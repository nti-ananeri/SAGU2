<?php

/**
 * Research process handler.
 * Contains the menus to access process submenus
 *
 * @author Gustavo Bremm [gsbremm@ftec.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Gustavo Scarantti Bremm [gsbremm@ftec.com.br]
 * Detley de Oliveira [ddocolombo@ftec.com.br]
 *
 * @since
 * Class created on 24/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solucoes Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Solucoes Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/


/**
 * Form to manipulate a form
 **/
class FrmForm extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete')
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $formId = $_GET['formId'] ? $_GET['formId'] : $_POST['formId'];
            $fields[]  = new MTextLabel('formId', $formId, _M('Form id', $module));
            $fields[]  = new MHiddenField('formId', $formId);
            
            $business = $MIOLO->getBusiness($module, 'BusForm');
            $data     = $business->getForm($formId);
        }

        $formDescription   = new MTextField('formDescription', $this->getFormValue('formDescription', $data->description), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $formDescription->setJsHint( _M('Enter the form description', $module) );
        $fields[]     = $formDescription;
        $validators[] = new MRequiredValidator('formDescription');

        $shortDescription = new MTextField('shortDescription', $this->getFormValue('shortDescription', $data->shortDescription), _M('Short description', $module), 20);
        $shortDescription->setJsHint(_M('Enter the form short description', $module));
        $fields[]        = $shortDescription;
        $validators[]    = new MRequiredValidator('shortDescription');

        $fields[] = new MSeparator();

        $isIdentifiedLabel = new MText('isIdentifiedLabel', _M('Is Identified',$module) . '?');
        $isIdentifiedLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isIdentifiedLabel->setClass('m-caption m-caption-required');
        $flds[] = $isIdentifiedLabel;
        $isIdentifiedOptions = SAGU::listYesNo(1);

        $isIdentified = new MRadioButtonGroup('isIdentified', '', $isIdentifiedOptions, $this->getFormValue('isIdentified', $data->isIdentified) ? $this->getFormValue('isIdentified', $data->isIdentified) : DB_TRUE, null, 'horizontal');
        $isIdentified->setShowLabel(false);
        $flds[] = $isIdentified;

        $hctIsIdentified = new MHContainer('hctIsIdentified', $flds);
        $hctIsIdentified->setShowLabel(false);
        $fields[]  = $hctIsIdentified;
        unset($flds);         
	
    	$fields[] = new MSeparator();

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        if ( $function == 'insert' )
        {
            $this->page->onLoad('document.'.$this->description.'.formId.focus();');
        }
        else
        {
            $this->page->onLoad('document.'.$this->description.'.form.description.focus();');
        }
    }
    

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
        $this->formDescription->value = $this->getFormValue('formDescriptionS') ? $this->getFormValue('formDescriptionS') : '';
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'formId'   => MIOLO::_request('formId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Form',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusForm');
        $ok = $business->deleteForm($this->formId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

	$data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusForm');

        if ( $function == 'update' )
        {
            $ok  = $business->updateForm($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertForm($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array( 'formIdS' => $this->formId->value );
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Form',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new rshForm();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
	$data->description = $this->formDescription->value;
        return $data;
    }

}

?>
