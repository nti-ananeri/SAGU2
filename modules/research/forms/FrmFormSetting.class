<?php

/**
 * Research process handler.
 * Contains the menus to access process submenus
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Gustavo Scarantti Bremm [gsbremm@ftec.com.br]
 * Detley de Oliveira [ddocolombo@ftec.com.br]
 *
 * @since
 * Class created on 24/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solucoes Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Solucoes Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/


/**
 * Form to manipulate a form
 **/
class FrmFormSetting extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete')
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $formSettingId = $_GET['formSettingId'] ? $_GET['formSettingId'] : $_POST['formSettingId'];
            $fields[]  = new MTextLabel('formSettingId', $formSettingId, _M('Form setting id', $module));
            $fields[]  = new MHiddenField('formSettingId', $formSettingId);
            
            $business = $MIOLO->getBusiness($module, 'BusFormSetting');
            $data     = $business->getFormSetting($formSettingId);
        }

        $formLabel = new MText('formLabel', _M('Form', $module) . ':');
        $formLabel->setWidth(FIELD_CONTAINER_SIZE);
        $formLabel->setClass('m-caption m-caption-required');

        $formId = new MLookupTextField('formId', $this->getFormValue('formId', $data->formId), null, FIELD_LOOKUPFIELD_SIZE, null, null, 'formDescription', $module, 'Form', null, null, true);
        $validators[] = new MIntegerValidator('formId', _M('Form', $module), 'required');

        $formDescription = new MTextField('formDescription', $this->getFormValue('formDescription', $data->formDescription), null, FIELD_DESCRIPTION_SIZE);
        $formDescription->setReadOnly(true);

        $hctForm = new MHContainer('hctForm', array($formLabel, $formId, $formDescription));
        $hctForm->setShowLabel(false);
        $fields[] = $hctForm;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $beginDate->setValidator(new MDateDMYValidator('beginDate', _M('Begin date',$module), 'required'));
        $fields[]   = $beginDate;

        $beginHour    = new MTextField('beginHour', $this->getFormValue('beginHour', $data->beginHour), _M('Begin hour',$module), FIELD_TIME_SIZE, 'HH:mm');
        $beginHour->setJsHint(_M('Enter the begin hour',$module));
        $fields[]     = $beginHour;
        $validators[] = new MTimeValidator('beginHour',_M('Begin hour',$module),'required');

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $endDate->setValidator(new MDateDMYValidator('endDate', _M('End date',$module),'required'));
        $fields[] = $endDate;

        $endHour    = new MTextField('endHour', $this->getFormValue('endHour', $data->endHour), _M('End hour',$module), FIELD_TIME_SIZE, 'HH:mm');
        $endHour->setJsHint(_M('Enter the end hour',$module));
        $fields[]     = $endHour;
        $validators[] = new MTimeValidator('endHour',_M('End hour',$module),'required');
        
        /*
        //Permite repetição (ou seja, que um mesmo person preencha mais de um questionário):
        $isRepeatedLabel = new MText('isRepeatedLabel', _M('Permit repeat',$module) . '?');
        $isRepeatedLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isRepeatedLabel->setClass('m-caption m-caption-required');
        $flds[]          = $isRepeatedLabel;

        $isRepeatedOptions = SAGU::listYesNo(1);

        $isRepeated = new MRadioButtonGroup('isRepeated', '', $isRepeatedOptions, $this->getFormValue('isRepeated', $data->isRepeated) ? $this->getFormValue('isRepeated', $data->isRepeated) : DB_FALSE, null, 'horizontal');
        $isRepeated->setShowLabel(false);
        $flds[]     = $isRepeated;
        
        $isRepeatedHint = new MHint('isRepeatedHint', _M('YES to hability then one person can answer this form one more time.', $module));
        $flds[] = $isRepeatedHint;

        $hctIsRepeated = new MHContainer('hctIsRepeated', $flds);
        $hctIsRepeated->setShowLabel(false);
        $fields[]      = $hctIsRepeated;
        unset($flds);
        
        //Fim repeticao
        */
        
        $isProfessorLabel = new MText('isProfessorLabel', _M('Is to professor',$module) . '?');
        $isProfessorLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isProfessorLabel->setClass('m-caption m-caption-required');
        $flds[]           = $isProfessorLabel;

        $isProfessorOptions = SAGU::listYesNo(1);

        $isProfessor = new MRadioButtonGroup('isProfessor', '', $isProfessorOptions, $this->getFormValue('isProfessor', $data->isProfessor) ? $this->getFormValue('isProfessor', $data->isProfessor) : DB_TRUE, null, 'horizontal');
        $isProfessor->setShowLabel(false);
        $flds[]      = $isProfessor;

        $hctIsProfessor = new MHContainer('hctIsProfessor', $flds);
        $hctIsProfessor->setShowLabel(false);
        $fields[]       = $hctIsProfessor;
        unset($flds);         

        $isEmployeeLabel = new MText('isEmployeeLabel', _M('Is to employee',$module) . '?');
        $isEmployeeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isEmployeeLabel->setClass('m-caption m-caption-required');
        $flds[]          = $isEmployeeLabel;

        $isEmployeeOptions = SAGU::listYesNo(1);

        $isEmployee = new MRadioButtonGroup('isEmployee', '', $isEmployeeOptions, $this->getFormValue('isEmployee', $data->isEmployee) ? $this->getFormValue('isEmployee', $data->isEmployee) : DB_TRUE, null, 'horizontal');
        $isEmployee->setShowLabel(false);
        $flds[]     = $isEmployee;

        $hctIsEmployee = new MHContainer('hctIsEmployee', $flds);
        $hctIsEmployee->setShowLabel(false);
        $fields[]      = $hctIsEmployee;
        unset($flds);         

        $isStudentLabel = new MText('isStudentLabel', _M('Is to student',$module) . '?');
        $isStudentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isStudentLabel->setClass('m-caption m-caption-required');
        $flds[]         = $isStudentLabel;

        $isStudentOptions = SAGU::listYesNo(1);

        $isStudent = new MRadioButtonGroup('isStudent', '', $isStudentOptions, $this->getFormValue('isStudent', $data->isStudent) ? $this->getFormValue('isStudent', $data->isStudent) : DB_TRUE, null, 'horizontal');
        $isStudent->setShowLabel(false);
        $isStudent->setAutoPostBack(true);
        $flds[]    = $isStudent;

        $hctIsStudent = new MHContainer('hctIsStudent', $flds);
        $hctIsStudent->setShowLabel(false);
        $fields[]     = $hctIsStudent;
        unset($flds);         

        if ( $isStudent->value == DB_TRUE && MODULE_ACADEMIC_INSTALLED == 'YES' )
        {

            $isInstitutionalEvaluationLabel = new MText('isInstitutionalEvaluationLabel', _M('Is institucional evaluation',$module) . '?');
            $isInstitutionalEvaluationLabel->setWidth(FIELD_CONTAINER_SIZE);
            $isInstitutionalEvaluationLabel->setClass('m-caption m-caption-required');
            $flds[]         = $isInstitutionalEvaluationLabel;

            $isInstitutionalEvaluationOptions = SAGU::listYesNo(1);

            $isInstitutionalEvaluation = new MRadioButtonGroup('isInstitutionalEvaluation', '', $isInstitutionalEvaluationOptions, $this->getFormValue('isInstitutionalEvaluation', $data->isInstitutionalEvaluation) ? $this->getFormValue('isInstitutionalEvaluation', $data->isInstitutionalEvaluation) : DB_FALSE, null, 'horizontal');
            $isInstitutionalEvaluation->setShowLabel(false);
            $flds[]    = $isInstitutionalEvaluation;

            $isInstitutionalEvaluationHint = new MHint('isInstitutionalEvaluationHint', _M('YES to the questions of this form is repeated for all student curricular components.', $module));
            $flds[] = $isInstitutionalEvaluationHint;

            $hctIsInstitutionalEvaluation = new MHContainer('hctIsInstitutionalEvaluation', $flds);
            $hctIsInstitutionalEvaluation->setShowLabel(false);
            $fields[]     = $hctIsInstitutionalEvaluation;
            unset($flds);

            $fields[]        = new MSeparator('<hr>');
            $fields[]        = new MText('txt1', _M('If the form is specifically for an course occurrence, tell the same below.', 'academic'));

            //Course
            $courseLabel     = new MText('courseLabel', _M('Course', 'academic') . ':');
            $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

            $courseId        = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', 'academic', 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
            $courseId->setJsHint(_M('Enter the course code', 'academic'));

            $courseName      = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Course name', 'academic'));

            $courseVersion   = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
            //$courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Course version code', 'academic'));

            $hctCourse       = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]        = $hctCourse;

            //Turn
            $turnLabel       = new MText('turnLabel', _M('Turn', 'academic') . ':');
            $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

            $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
            $turnId->setReadOnly(true);
            $turnId->setJsHint(_M('Turn id', 'academic'));

            $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
            $turnDescription->setReadOnly(true);
            $turnDescription->setJsHint(_M('Turn description', 'academic'));

            $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
            $hctTurn->setShowLabel(true);
            $fields[]        = $hctTurn;

            //Unit
            $unitLabel       = new MText('unitLabel', _M('Unit', 'academic') . ':');
            $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

            $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
            $unitId->setReadOnly(true);
            $unitId->setJsHint(_M('Unit id', 'academic'));

            $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
            $unitDescription->setReadOnly(true);
            $unitDescription->setJsHint(_M('Unit description', 'academic'));

            $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
            $hctUnit->setShowLabel(true);
            $fields[]        = $hctUnit;

            $fields[]        = new MSeparator('<hr>');
            $fields[]        = new MText('txt1', _M('If the form is specifically for an class, tell the same below.', 'academic'));

            //Class
            $classLabel      = new MText('classLabel', _M('Class', 'academic') . ':');
            $classLabel->setWidth(FIELD_CONTAINER_SIZE);

            $classId         = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', 'academic', 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId'), true);
            $classId->setJsHint(_M('Enter the class id', 'academic'));

            $className_      = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
            $className_->setReadOnly(true);
            $className_->setJsHint(_M('Class name', 'academic'));

            $hctClass        = new MHContainer('hctClass', array($classLabel, $classId, $className_));
            $hctClass->setShowLabel(true);
            $fields[]        = $hctClass;

            //end class
        }

        $fields[] = new MSeparator();

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'. $this->name . '.formId.focus();');
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'      => 'delete',
                        'formSettingId' => MIOLO::_request('formSettingId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Form setting',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusFormSetting');
        $ok       = $business->deleteFormSetting($this->formSettingId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusFormSetting');

        if ( $function == 'update' )
        {
            $ok  = $business->updateFormSetting($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertFormSetting($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array( 'formSettingIdS' => $this->formSettingId->value );
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'    => 'tbBtnNew_click',
                                 'function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Form',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new rshFormSetting();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        if ( strlen((string)$data->isInstitutionalEvaluation) == 0 )
        {
            $data->isInstitutionalEvaluation = DB_FALSE;
        }

        return $data;
    }

}

?>
