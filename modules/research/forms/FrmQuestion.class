<?php

/**
 * Course form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor SchmIdt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course
 **/
class FrmQuestion extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        $fields[] = $toolBar;
 
        if ( in_array($function, array('update', 'delete')) )
        {
            $questionId = $_GET['questionId'] ? $_GET['questionId'] : $_POST['questionId'];

            $business = $MIOLO->getBusiness($module, 'BusQuestion');
            $data     = $business->getQuestion($questionId);

            $fields[]  = new MTextLabel('questionId', $questionId, _M('Question id', $module));
            $fields[]  = new MHIddenField('questionId', $questionId);
       }

//        $fields[] = new MTextField('questionId', $this->getFormValue('questionId', $data->questionId), _M('Question Id',$module), FIELD_ID_SIZE);
//        $validators[] = new MRequiredValidator('questionId');

   
        $business = $MIOLO->GetBusiness($module, 'BusForm');
        $formId = new MSelection('formId', $this->getFormValue('formId', $data->formId), _M('Form',$module), $business->listForm());
        $formId->SetAutoPostBack(true);
        $fields[] = $formId;
        $validators[] = new MRequiredValidator('formId');

        $questionDescription = new MTextField('questionDescription', $this->getFormValue('questionDescription', $data->description), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $questionDescription->setJsHint( _M('Enter question description', $module) );
        $fields[]     = $questionDescription;
        $validators[] = new MRequiredValidator('questionDescription');

        $isMultiLabel = new MText('isMultiLabel', _M('Is multi',$module) . '?');
        $isMultiLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isMultiLabel;
       
        $isMultiOptions = SAGU::listYesNo(1);
	
        $isMulti = new MRadioButtonGroup('isMulti', '', $isMultiOptions, $this->getFormValue('isMulti', $data->isMulti) ? $this->getFormValue('isMulti', $data->isMulti) : DB_FALSE, null, 'horizontal');
        $isMulti->setShowLabel(false);
        $flds[] = $isMulti;
        
        $hctIsMulti = new MHContainer('hctIsMulti', $flds);
        $hctIsMulti->setShowLabel(false);
        $fields[]  = $hctIsMulti;
        unset($flds); 

        $allowAnswerCommentLabel = new MText('allowAnswerCommentLabel', _M('Allow answer comment',$module) . '?');
        $allowAnswerCommentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                  = $allowAnswerCommentLabel;
       
        $allowAnswerCommentOptions = SAGU::listYesNo(1);
	
        $allowAnswerComment = new MRadioButtonGroup('allowAnswerComment', '', $allowAnswerCommentOptions, $this->getFormValue('allowAnswerComment', $data->allowAnswerComment) ? $this->getFormValue('allowAnswerComment', $data->allowAnswerComment) : DB_FALSE, null, 'horizontal');
        $allowAnswerComment->setShowLabel(false);
        $flds[] = $allowAnswerComment;
        
        $hctAllowAnswerComment = new MHContainer('hctAllowAnswerComment', $flds);
        $hctAllowAnswerComment->setShowLabel(false);
        $fields[]  = $hctAllowAnswerComment;
        unset($flds); 
   
        $isTextTypeLabel = new MText('texTypeLabel', _M('Is text',$module) . '?');
        $isTextTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isTextTypeLabel;
       
        $isTextTypeOptions = SAGU::listYesNo(1);
	
        $isTextType = new MRadioButtonGroup('textType', '', $isTextTypeOptions, $this->getFormValue('textType', $data->textType) ? $this->getFormValue('textType', $data->textType) : DB_FALSE, null, 'horizontal');
        $isTextType->setShowLabel(false);
        $flds[] = $isTextType;
        
        $hctIsTextType = new MHContainer('hctTextType', $flds);
        $hctIsTextType->setShowLabel(false);
        $fields[]  = $hctIsTextType;
        unset($flds); 

        if ( strlen((string)$this->getFormValue('formId', $data->formId))>0 )
        {
            $businessFormSetting = $MIOLO->GetBusiness($module, 'BusFormSetting');
            $settings = $businessFormSetting->getFormSettingByFormId($this->getFormValue('formId', $data->formId));
        }

        if ( $settings->isInstitutionalEvaluation == DB_TRUE )
        {
            $isByCurricularComponentLabel = new MText('isByCurricularComponentLabel', _M('Is by curricular component',$module) . '?');
            $isByCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[] = $isByCurricularComponentLabel;
       
            $isByCurricularComponentOptions = SAGU::listYesNo(1);
	
            $isByCurricularComponent = new MRadioButtonGroup('isByCurricularComponent', '', $isByCurricularComponentOptions, $this->getFormValue('isByCurricularComponent', $data->isByCurricularComponent) ? $this->getFormValue('isByCurricularComponent', $data->isByCurricularComponent) : DB_FALSE, null, 'horizontal');
            $isByCurricularComponent->setShowLabel(false);
            $flds[] = $isByCurricularComponent;
        
            $hctIsByCurricularComponent = new MHContainer('hctIsByCurricularComponent', $flds);
            $hctIsByCurricularComponent->setShowLabel(false);
            $fields[]  = $hctIsByCurricularComponent;
            unset($flds); 
        }

        $business = $MIOLO->GetBusiness($module, 'BusQuestionCategory');
        $fields[] = new MComboBox('questionCategoryId', $this->getFormValue('questionCategoryId', $data->questionCategoryId), _M('Question category id',$module), $business->listQuestionCategory());
        $validators[] = new MRequiredValidator('questionCategoryId');
        
        $questionOrder = new MTextField('questionOrder', $this->getFormValue('questionOrder', $data->questionOrder), _M('Question order', $module), 5);
        $questionOrder->setJsHint( _M('Enter question order', $module) );
        $fields[]     = $questionOrder;
        $validators[] = new MIntegerValidator('questionOrder', '', 'optional');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValIdators($validators);
        $this->setLabelWIdth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.formId.focus();');
    }
    

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {


    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'questionId'=>MIOLO::_request('questionId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusQuestion');
        $ok = $business->deleteQuestion(MIOLO::_request('questionId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusQuestion');

        if ( $function == 'update' )
        {
            $ok  = $business->updateQuestion($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertQuestion($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('questionIdS'=>$data->questionId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new rshQuestion();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
	
        $data->description = $this->questionDescription->value;
        return $data;
    }

}

?>
