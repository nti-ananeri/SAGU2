<?php
/**
 *
 * This file manipulate the lookups for the academic module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

$constants = $business->getModuleValues('research');
if ( count($constants) > 0 )
{
    foreach ( $constants as $cnt )
    {
        define($cnt[0],$cnt[1]);
    }
}

/**
 * Class to manipulate the Lookups
 **/
class BusinessResearchLookup
{
    /**
     * Auto complete for external course
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteQuestion(&$context)
    {
        $sql = 'SELECT description
                  FROM rshQuestion
                 WHERE questionId = ?';

        $context->setContext('research', $sql);
    }

    /**
     * Lookup for external course
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupQuestion(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $questionId   = $lookup->getFilterValue('questionId');
        $questionName = $lookup->getFilterValue('questionName');

        $lookup->addFilterField( new MTextField('questionId',   $questionId,  _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('questionDescription', $name, _M('Question',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        
        $columns = array(
                           new DataGridColumn('questionId',       _M('Code', $module),   'right', true, null, true),
                           new DataGridColumn('description',      _M('Question', $module), 'left',  true, null, true),
                           new DataGridColumn('questionCategory', _M('Category', $module), 'left',  true, null, true)
                         );

        $sql = 'SELECT A.questionId,
	                   A.formId,
		               ( SELECT description 
		                   FROM rshQuestionCategory Q 
		                  WHERE Q.id = A.questionCategoryId ) as questionCategory,
                       A.description
                  FROM rshQuestion A';

        if ( strlen((string)$questionId) > 0 )
        {
            $where .= ' AND A.questionId = ?';
            $args[] = $questionId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Question search',$module), 15, 0);
        //$lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for forms
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteForm(&$context)
    {
        $sql = 'SELECT description
                  FROM rshForm
                 WHERE formId = ?';

        $context->setContext('research', $sql);
    }

    /**
     * Lookup for forms
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupForm(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $formId      = $lookup->getFilterValue('formId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('formId',   $formId,  _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Description',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        
        $columns = array(
                           new DataGridColumn('formId',      _M('Code', $module),   'right', true, null, true),
                           new DataGridColumn('description', _M('Description', $module), 'left',  true, null, true)
                         );

        $sql = 'SELECT A.formId,
	                   A.description
                  FROM rshForm A';

        if ( strlen((string)$formId) > 0 )
        {
            $where .= ' AND A.formId = ?';
            $args[] = $formId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Form search',$module), 15, 0);
        //$lookup->grid->setIsScrollable();

    }

}

?>
