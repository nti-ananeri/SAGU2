<?php

/**
 * Research process handler.
 * Contains the menus to access process submenus
 *
 * @author Gustavo Bremm [gsbremm@ftec.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Gustavo Scarantti Bremm [gsbremm@ftec.com.br]
 * Detley de Oliveira [ddocolombo@ftec.com.br]
 *
 * @since
 * Class created on 24/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solucoes Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Solucoes Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusForm extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'research' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listForm()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT formId,
                       description   
                  FROM rshForm   
              ORDER BY description';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $formId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getForm($formId)
    {
        $sql = 'SELECT formId,
                       description,
                       shortDescription,
                       isIdentified,
                       userName,
                       dateTime,
                       ipAddress
                  FROM rshForm
                 WHERE formId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $formId));
        //$db->close();

        $form = new rshForm();
        list ( $form->formId,
               $form->description,
               $form->shortDescription,
               $form->isIdentified,
               $form->userName,
               $form->dateTime,
               $form->ipAdress ) = $result[0];

        return $form; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchForm($filters)
    {

        $sql= 'SELECT formId,
                      description,
                      shortDescription,
                      isIdentified
                 FROM rshForm';

        if ( strlen((string)$filters->formId) > 0 )
        {
            $where .= ' AND formId = ? ';
            $args[] = $filters->formId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description.'%';
        }
        if ( strlen((string)$filters->shortDescription) > 0 )
        {
            $where .= ' AND shortDescription ILIKE ? ';
            $args[] = $filters->shortDescription.'%';
        }
        if ( strlen((string)$filters->isIdentified) > 0)
        {
            $where .= ' AND isIdentified = ? ';
            $args[] = $filters->isIdentified;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY description, shortDescription ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertForm($data)
    {
        
        $sql = 'INSERT INTO rshForm
                            (description,
                             shortDescription,
                             isIdentified) 
                     VALUES (?,?,?) ';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->isIdentified );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateForm($data)
    {

        $sql = 'UPDATE rshForm
                   SET description      = ?,
                       shortDescription = ?,
                       isIdentified     = ?
                 WHERE formId           = ?';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->isIdentified,
                       $data->formId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $formId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteForm($formId)
    {
        $sql = 'DELETE FROM rshForm
                      WHERE formId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $formId));
        //$db->close();
        return $result;
    }
}

?>
