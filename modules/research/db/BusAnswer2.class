<?php
/**
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusAnswer2 extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessResearchBusAnswer2()
    {
        $this->db = $this->getDatabase();
    }
     
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'research' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getAnswer($answerId)
    {

        $sql = 'SELECT A.answerId,
                       A.personId,
                       A.questionId,
                       A.optionId,
                       A.optionText,
                       A.optionComment,
                       A.userName,
                       TO_CHAR(A.dateTime, \'' . MASK_DATE . '\'),
                       ipAddress
                 FROM rshAnswer_noLogin A
                WHERE answerId = ? ';

        //$db     = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $answerId));

        $answer = new rshAnswer();
        list ( $answer->answerId,
               $answer->personId,
               $answer->questionId,
               $answer->optionId,
               $answer->optionText,
               $answer->optionComment,
               $answer->userName,
               $answer->dateTime,
               $answer->ipAddress ) = $result[0];

        return $answer; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/

    public function searchAnswer($filters)
    {
        $sql = 'SELECT A.answerId,
                       A.personId,
                       B.name,
                       A.questionId,
                       substr((SELECT description FROM rshQuestion WHERE questionId = A.questionId),1,50),
                       A.optionId,
                       substr((SELECT description FROM rshOption WHERE optionId = A.optionId),1,50),
                       A.optionComment
                  FROM rshAnswer_noLogin A
       INNER JOIN ONLY basPhysicalPerson B
                 USING (personId)';

        if ( strlen((string)$filters->answerId) > 0 )
        {
            $where .= ' AND A.answerId = ? ';
            $args[] = $filters->answerId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->personName) > 0 )
        {
            $where .= ' AND B.name ILIKE ? ';
            $args[] = $filters->personName . '%';
        }
        if ( strlen((string)$filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }
        if ( strlen((string)$filters->optionId) > 0 )
        {
            $where .= ' AND A.optionId = ? ';
            $args[] = $filters->optionId;
        }
        if ( strlen((string)$filters->optionText) > 0 )
        {
            $where .= ' AND A.optionText ILIKE ? ';
            $args[] = $filters->optionText . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).'';
            //$db = $this->getDatabase();

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertAnswer($data)
    {
        $sql = 'INSERT INTO rshAnswer_noLogin
                            (personId,
                             questionId,
                             optionId,
                             optionText,
                             optionComment)
                     VALUES (?, ?, ?, ?, ?) ';

        $args = array($data->personId,
                      $data->questionId,
                      $data->optionId,
                      $data->optionText,
                      $data->optionComment);

        //$db     = $this->getDatabase();

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAnswer($data)
    {

        $sql = 'UPDATE rshAnswer_noLogin
                   SET personId      = ?,
                       questionId    = ?,
                       optionId      = ?,
                       optionText    = ?,
                       optionComment = ?
                 WHERE answerId      = ?';

        $args = array( $data->personId,
                       $data->questionId,
                       $data->optionId,
                       $data->optionText,
                       $data->optionComment,
                       $data->answerId
                      );

        //$db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }
    
    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAnswer($answerId)
    {
        $sql = 'DELETE FROM rshAnswer_noLogin
                      WHERE answerId = ?';

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $answerId));
        return $result;
    }

    public function beginTransaction()
    {
        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');
    }

    public function commit()
    {
        $db = $this->getDatabase();
        $db->execute('COMMIT');
    }

}
?>
