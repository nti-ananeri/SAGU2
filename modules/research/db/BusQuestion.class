<?php
/**
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusQuestion extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'research' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listQuestion($formId=null)
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT questionId,
                       substr(description, 1, 60),
                       isMulti,
                       textType,
                       allowAnswerComment
                  FROM rshQuestion';

        if ( isset($formId) )
        {
            $sql .= ' WHERE formId = ? ';
            $args[] = $formId;
        }

        $sql .= ' ORDER BY questionId ';

        $ret = $db->query(SAGU::prepare($sql, $args));
        //$ret = $db->query($sql);
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getQuestion($questionId)
    {

        $sql = 'SELECT A.questionId,
                       A.description,
                       A.isMulti,
                       A.allowAnswerComment,
                       A.textType,
                       B.formId,
                       B.description,
                       B.shortDescription,
                       B.isIdentified,
                       C.questionCategoryId,
                       C.description,
                       A.isByCurricularComponent,
                       A.userName,
                       A.dateTime,
                       A.ipAddress,
                       A.questionOrder
                 FROM rshQuestion A
            LEFT JOIN rshForm B
                   ON (A.formId = B.formId)
            LEFT JOIN rshQuestionCategory C
                   ON (A.questionCategoryId = C.questionCategoryId)
                WHERE questionId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $questionId));

        $question = new rshQuestion();
        list ( $question->questionId,
               $question->description,
               $question->isMulti,
               $question->allowAnswerComment,
               $question->textType,
               $question->formId,
               $question->formDescription,
               $question->shortDescription,
               $question->isIdentified,
               $question->questionCategoryId,
               $question->questionCategoryDescription,
               $question->isByCurricularComponent,
               $question->userName,
               $question->dateTime,
               $question->ipAddress, 
               $question->questionOrder) = $result[0];

        return $question; 
    }

    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/

    public function searchQuestion($filters)
    {

        $sql = 'SELECT A.questionId,
                       A.description,
                       A.isMulti,
                       A.textType,
                       B.formId,
                       B.description,
                       B.shortDescription,
                       B.isIdentified,
                       C.questionCategoryId,
                       C.description,
                       A.userName,
                       A.dateTime,
                       A.ipAddress,
                       A.allowAnswerComment,
                       A.isByCurricularComponent,
                       A.questionOrder
                  FROM rshQuestion A
             LEFT JOIN rshForm B
                    ON (A.formId = B.formId)
             LEFT JOIN rshQuestionCategory C
                    ON (A.questionCategoryId = C.questionCategoryId)';

        if ( strlen((string)$filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ? ';
            $args[] = $filters->description.'%';
        }
        if ( strlen((string)$filters->formId) > 0 )
        {
            $where .= ' AND A.formId = ? ';
            $args[] = $filters->formId;
        }
        if ( strlen((string)$filters->isMulti) > 0 )
        {
            $where .= ' AND A.isMulti = ? ';
            $args[] = $filters->isMulti;
        }
        if ( strlen((string)$filters->questionCategoryId) > 0 )
        {
            $where .= ' AND A.questionCategoryId = ? ';
            $args[] = $filters->questionCategoryId;
        }
        if ( strlen((string)$filters->textType) > 0 )
        {
            $where .= ' AND A.textType = ? ';
            $args[] = $filters->textType;
        }
        if ( strlen((string)$filters->isByCurricularComponent) > 0 )
        {
            $where .= ' AND A.isByCurricularComponent = ? ';
            $args[] = $filters->isByCurricularComponent;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.questionOrder, A.questionId, A.description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
   public function insertQuestion($data)
    {
        $sql = 'INSERT INTO rshquestion
                            (description,
                             formId,
                             questionCategoryId,
                             isMulti,
                             textType,
                             allowAnswerComment,
                             isByCurricularComponent,
                             questionOrder)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?) ';

        $data->isByCurricularComponent = strlen((string)$data->isByCurricularComponent)>0 ? $data->isByCurricularComponent : DB_FALSE;

        $args = array (
                        $data->description,
                        $data->formId,
                        $data->questionCategoryId,
                        $data->isMulti,
                        $data->textType,
                        $data->allowAnswerComment,
                        $data->isByCurricularComponent,
                        $data->questionOrder
                      );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/

   public function updateQuestion($data)
    {
        $sql = 'UPDATE rshQuestion
                   SET description        = ?,
                       formId             = ?,
                       questionCategoryId = ?,
                       isMulti            = ?,
                       textType           = ?,
                       allowAnswerComment = ?,
                       isByCurricularComponent = ?,
                       questionOrder = ?
                 WHERE questionId         = ? ';

        $data->isByCurricularComponent = strlen((string)$data->isByCurricularComponent)>0 ? $data->isByCurricularComponent : DB_FALSE;

        $args = array( $data->description,
                       $data->formId,
                       $data->questionCategoryId,
                       $data->isMulti,
                       $data->textType,
                       $data->allowAnswerComment,
                       $data->isByCurricularComponent,
                       $data->questionOrder,
                       $data->questionId
                      );
        $db   = $this->getDatabase();

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteQuestion($questionId)
    {
        $sql = 'DELETE FROM rshQuestion
                      WHERE questionId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $questionId));
        return $result;
    }

}
?>
