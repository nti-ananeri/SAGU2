<?php
/**
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusQuestionCategory extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'research' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listQuestionCategory()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT questionCategoryId,
                       description   
                  FROM rshQuestionCategory   
              ORDER BY questionCategoryId ';
        $ret = $db->query($sql);
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getQuestionCategory($questionCategoryId)
    {
        $sql = 'SELECT questionCategoryId,
                       description,
                       userName,
                       dateTime,
                       ipAddress
                 FROM rshQuestionCategory
                 WHERE questionCategoryId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $questionCategoryId));

        $questionCategory = new rshQuestionCategory();
        list ( $questionCategory->questionCategoryId,
               $questionCategory->description,
               $questionCategory->userName,
               $questionCategory->dateTime,
               $questionCategory->ipAddress ) = $result[0];

        return $questionCategory; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/

    public function searchQuestionCategory($filters)
    {
        $sql= 'SELECT questionCategoryId,
                      description
                 FROM rshQuestionCategory ';

        if ( strlen((string)$filters->questionCategoryId) > 0 )
        {
            $where .= ' AND questionCategoryId = ? ';
            $args[] = $filters->questionCategoryId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description.'%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
   public function insertQuestionCategory($data)
    {
        $sql = 'INSERT INTO rshQuestionCategory
                            (description)
                     VALUES (?) ';

        $args = array($data->description);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/

   public function updateQuestionCategory($data)
    {
        $sql = 'UPDATE rshQuestionCategory
                   SET description        = ?
                 WHERE questionCategoryId = ? ';

        $args = array( $data->description,
                       $data->questionCategoryId
                      );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteQuestionCategory($questionCategoryId)
    {
        $sql = 'DELETE FROM rshQuestionCategory
                      WHERE questionCategoryId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $questionCategoryId));
        return $result;
    }

}
?>
