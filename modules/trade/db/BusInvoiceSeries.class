<?php
/**
 *
 * This file handles the connection and actions for trdInvoiceSeries table
 *
 * @author Rosemberg Almeida dos Santos [rosbrg@gmail.com]
 * @version $Id$
 *
 * \b Maintainers: \n
 * Rosemberg Almeida dos Santos [rosbrg@gmail.com]
 * Daniel Afonso Heisler [daniel.heisler@gmail.com]
 *
 * @since
 * Class created on 11/11/2008
 *
 * \b Organization: \n
 * Isolution [http://www.isolution.inf.br/]
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )

 **/

/**
 * Class to manipulate the trdInvoiceSeries table
 **/
class BusinessTradeBusInvoiceSeries extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'trade' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoiceSeries()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT invoiceSeriesId,
                       description   
                  FROM trdInvoiceSeries
              ORDER BY invoiceSeriesId';

        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInvoiceSeries($invoiceSeriesId)
    {

        $sql = 'SELECT invoiceSeriesId,
                       description,
                       username,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM trdInvoiceSeries
                 WHERE invoiceSeriesId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $invoiceSeriesId));
        //$db->close();

        $invoiceSeries = new trdInvoiceSeries();
        list ( $invoiceSeries->invoiceSeriesId,
               $invoiceSeries->description,
               $invoiceSeries->userName,
               $invoiceSeries->dateTime,
               $invoiceSeries->ipAddress ) = $result[0];

        return $invoiceSeries; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInvoiceSeries($filters)
    {
        $sql= 'SELECT invoiceSeriesId,
                      description
                 FROM trdInvoiceSeries';

        if ( strlen((string)$filters->invoiceSeriesId) > 0 )
        {
            $where .= ' AND invoiceSeriesId = ? ';
            $args[] = $filters->invoiceSeriesId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInvoiceSeries($data)
    {
        $sql = 'INSERT INTO trdInvoiceSeries
                            (invoiceSeriesId,
                             description)
                     VALUES (?,?)';

        $args = array( $data->invoiceSeriesId,
                       $data->description );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInvoiceSeries($data)
    {
        $sql = 'UPDATE trdInvoiceSeries
                   SET description = ?
                 WHERE invoiceSeriesId    = ?';

        $args = array( $data->description,
                       $data->invoiceSeriesId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInvoiceSeries($invoiceSeriesId)
    {
        $sql = 'DELETE FROM trdInvoiceSeries
                      WHERE invoiceSeriesId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $invoiceSeriesId));
        //$db->close();

        return $result;
    }

}

?>
