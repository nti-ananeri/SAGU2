<?php
/**
 *
 * This file handles the connection for finance module
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 * 
 * @since
 * Class created on 18/12/2007
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 **/

/**
 * Class to manipulate the Pupils Digital Password table
 **/
class BusinessServicesBusDigitalPassword extends Business
{

    public $userInfo;
	public $db;
	/**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'finance' : $module;
	    return $MIOLO->getDatabase($module);
	 }

    public function getDigitalPassword($data,$asObject = true)
    {

		$this->db = $this->getDatabase();
		$sql = 'SELECT 
						D.personId,
						P.name,
						TO_CHAR(D.inclusionDate,\''.MASK_DATE_TIME.'\'),
						TO_CHAR(D.exclusionDate,\''.MASK_DATE_TIME.'\'),
						(CASE WHEN exclusionDate IS NULL THEN TRUE ELSE FALSE END),
						D.password,
						D.passwordResponsable,
						D.username,
						TO_CHAR(D.dateTime,\''.MASK_DATE_TIME.'\'),
						D.ipAddress
						FROM 
						basDigitalPassword D
						INNER JOIN ONLY basPhysicalPerson P
						USING(personId)
						WHERE 1 = 1 ';
		if(strlen((string)$data->personId) > 0)
		{
			$sql .= ' AND D.personId = ?';
			$args[] = $data->personId;
		}
		
	    $sql =   SAGU::prepare($sql, $args);
		$result = $this->db->query($sql);
		if(count($result) == 1 )
		{
	        if($asObject == true)
			{
			list ( $this->userInfo->personId,
				   $this->userInfo->name,
				   $this->userInfo->inclusionDate,
				   $this->userInfo->exclusionDate,
				   $this->userInfo->stateId,
				   $this->userInfo->password,
				   $this->userInfo->passwordResponsable,
				   $this->userInfo->mioloUserName,
				   $this->userInfo->dateTime,
				   $this->userInfo->ipAddress) = $result[0];
				   $this->userInfo->userName = $this->userInfo->mioloUserName;
			}
			else 
			{
				return $result;
			}
		}
		else if (count($result) > 1 && is_array($result))
		{
			return $result;
		}
		else
		{
			return $this->userInfo = '';
		}
        return $this->userInfo;
    }
	public function personStatus()
	{
		if($this->userInfo->personId && $this->userInfo->stateId)
		{
			return true;
		}
		return false;
	}

	public function validateDigitalPassword($personId,$password,$passwordFiador)
	{
		$this->db = $this->getDatabase();
		$sql = 'SELECT *,(CASE WHEN exclusionDate IS NULL THEN TRUE ELSE FALSE END) FROM basDigitalPassword where personid = '.$personId.' AND upper(password) = upper(md5(\''.$password.'\')) AND upper(passwordFiador) = upper(md5(\''.$passwordFiador.'\'))';
        $result = $this->db->query($sql);
		if(count($result) > 0 )
		{
	        list ( $this->userInfo->username,
				   $this->userInfo->datetime,
				   $this->userInfo->ipaddress,
				   $this->userInfo->personId,
				   $this->userInfo->password,
				   $this->userInfo->passwordFiador,
				   $this->userInfo->date,
				   $this->userInfo->exclusionDate,
				   $this->userInfo->mioloUserName,
				   $this->userInfo->stateId) = $result[0];
		}
		else
		{
			$this->userInfo = '';
		}
        return $this->userInfo;
	}

	public function insertDigitalPasswordAssigned($personId)
	{
		$this->db = $this->getDatabase();
		$sql = 'INSERT INTO basdigitalpasswordassinado(personid)';
		$sql .= 'values(?)';
		$args[] = $personId;
		$sql = SAGU::prepare($sql,$args);
		return $this->db->execute($sql);
	}

	public function insertDigitalPassword($data)
	{
		$this->db = $this->getDatabase();
		$sql = 'INSERT INTO basDigitalPassword(personid,password,passwordResponsable)';
		$sql .= 'VALUES	(?,
						UPPER(MD5(\''.$data->password.'\')),
						UPPER(MD5(\''.$data->passwordResponsable.'\'))
						)';
		$args[] = $data->personId;
		$sql = SAGU::prepare($sql,$args);
		return $this->db->execute($sql);
	}

	public function updateDigitalPassword($data)
	{
		$this->db = $this->getDatabase();
		$sql = 'UPDATE basDigitalPassword ';
		$sql .= 'SET password = UPPER(MD5(\''.$data->password.'\')),
					 passwordResponsable = UPPER(MD5(\''.$data->passwordResponsable.'\'))
				WHERE personId = ? ';
		$args[] = $data->personId;
		$sql = SAGU::prepare($sql,$args);
		return $this->db->execute($sql);
	}

	public function isAssined($data)
	{
		$this->db = $this->getDatabase();
		$where = '';
		$sql = 'SELECT 
					B.username,
					B.datetime,
					B.ipaddress,
					B.personId,
					TO_CHAR(dateinclusion,\''.MASK_DATE_TIME.'\') 
				FROM basdigitalpasswordassinado B 
					INNER JOIN acdcontract C USING(personid) 
					WHERE 1 = 1 ';
		if(strlen((string)$data->personId) > 0 )
		{
			$sql .= ' AND B.personId = ? ';
			$args[] = $data->personId;
		}
		if(strlen((string)$data->contractId) > 0 )
		{
			$sql .= ' AND C.contractId = ?';
			$args[] = $data->contractId;
		}
		$sql = SAGU::prepare($sql,$args);
		$result = $this->db->query($sql);
		if(count($result) > 0)
		{
	        list ( $this->userInfo->username,
				   $this->userInfo->datetime,
				   $this->userInfo->ipaddress,
				   $this->userInfo->personId,
				   $this->userInfo->dateinclusion) = $result[0];
		}
		else
		{
			$this->userInfo = '';
		}
		return $this->userInfo;
	}
}
?>
