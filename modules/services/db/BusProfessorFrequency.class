<?php
/**
 *
 * This file handles the business layer for the professor frequency register
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 10/09/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to handle this business
 **/
class BusinessServicesBusProfessorFrequency extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * A list containing all pupils from a group
     *
     * @param $groupId (integer): Primary key for query
     *
     * @return (array): An array containing all pupils from a group
     *
     **/
    public function listGroupPupils($groupId)
    {
        $sql = 'SELECT C.name,
                       C.personId,
                       A.enrollId
                  FROM acdEnroll A
            INNER JOIN acdContract B
                    ON (A.contractId = B.contractId)
       INNER JOIN ONLY basPhysicalPerson C
                    ON (B.personId = C.personId)
                 WHERE A.groupId IN (' . $groupId . ') AND
                       A.statusId = ' . ENROLL_STATUS_ENROLLED . '
              ORDER BY C.name';

        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Gets the curricular component name
     *
     * @param $groupId (integer): Primary key for query
     *
     * @return (array): The name of a specific curricular component
     *
     **/
    public function getCurricularComponentName($scheduleId)
    {

        $sql = 'SELECT G.curricularComponentId::varchar || \'/\' || G.curricularComponentVersion::varchar || \' - \' || G.shortName || \' - \' || FF.description || \' (\' ||  TO_CHAR(D.beginHour,\'' . MASK_TIME . '\') || \' - \' || TO_CHAR(D.endHour,\'' . MASK_TIME . '\') || \') \' 
                  FROM acdGroup A
            INNER JOIN acdSchedule B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdScheduleProfessor C
                    ON (C.scheduleId = B.scheduleId)
            INNER JOIN acdScheduleLearningPeriod D
                    ON (D.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
            INNER JOIN basWeekDay FF
                    ON (FF.weekDayId = B.weekDayId)
            INNER JOIN acdLearningPeriod E
                    ON (E.learningPeriodId = D.learningPeriodId)
            INNER JOIN acdCurriculum F
                    ON (F.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = F.curricularComponentId
                        AND G.curricularComponentVersion = F.curricularComponentVersion)
            INNER JOIN acdCourseOccurrence H
                    ON (H.courseId = F.courseId
                        AND H.courseVersion = F.courseVersion
                        AND H.turnId = F.turnId
                        AND H.unitId = F.unitId)
            INNER JOIN acdCourse I
                    ON (I.courseId = H.courseId)
            INNER JOIN basTurn J
                    ON (J.turnId = F.turnId)
            INNER JOIN basUnit K
                    ON (K.unitId = F.unitId)
                 WHERE B.scheduleId IN (' . $scheduleId . ') ';

        $db  = $this->getDatabase();
        $result = $db->query($sql);

        return $result[0][0];
    }
    
     /**
     * A list containing all academic calendar from a group on a specified period
     *
     * @param $groupId (integer): group id
     *        $periodId (integer): period id
     *
     * @return (array): An array containing all academic calendars from a group
     *
     **/
    public function listGroupAcademicCalendar($scheduleId, $periodId, $professorId)
    {
        //pega o calendário acadêmico
        $sql = 'SELECT A.* FROM (SELECT TO_CHAR(B.occurrenceDate, \'dd\'),
                       TO_CHAR(B.occurrenceDate, \'mm\'),
                       CASE WHEN B.occurrenceDate <= now()::date 
                            THEN TRUE
                            ELSE FALSE
                       END,
                       F.description,
                       B.academicCalendarId::varchar,
                       D.scheduleId,
                       TO_CHAR(C.beginHour, \'' . MASK_TIME . '\'),
                       TO_CHAR(C.endHour, \'' . MASK_TIME . '\'),
                       C.numberhourslessons,
                       B.occurrenceDate,
                       C.turnId,
                       TO_CHAR(B.occurrenceDate, \'' . MASK_DATE . '\'),
                       C.scheduleLearningPeriodId
                  FROM acdLearningPeriod A
            INNER JOIN acdAcademicCalendar B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN acdScheduleLearningPeriod C
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN acdSchedule D
                    ON (C.scheduleLearningPeriodId = D.scheduleLearningPeriodId AND
                        B.weekdayid = D.weekdayid)
            INNER JOIN acdgroup E
                    ON (D.groupId = E.groupId AND
                        A.learningPeriodId = E.learningPeriodId)
            INNER JOIN basWeekDay F
                    ON (B.weekdayId = F.weekDayId)
                 WHERE A.periodId = ? AND
                       D.scheduleId IN (' . $scheduleId . ') ';

        $args[] = $periodId;

        //tira as aulas substituídas
        $sql .= ' AND B.occurrenceDate::varchar || C.turnId::varchar || B.weekDayId::varchar NOT IN (SELECT C.occurrenceDate::varchar || B.turnId::varchar || C.weekDayId::varchar
                                                             FROM acdSchedule A
                                                       INNER JOIN acdScheduleLearningPeriod B
                                                               ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                       INNER JOIN acdAcademicCalendarAdjustments C
                                                               ON (    B.learningPeriodId = C.learningPeriodId
                                                                   AND C.scheduleId = A.scheduleId)
                                                       INNER JOIN acdLearningPeriod D
                                                               ON (D.learningPeriodId = B.learningPeriodId)
                                                            WHERE A.scheduleId IN ( ' . $scheduleId . ') 
                                                              AND D.periodId    = ?
                                                              AND C.professorId = ?
                                                              AND C.inOut       = \'' . DB_FALSE . '\')';

        $args[] = $periodId;
        $args[] = $professorId;

        //pega os ajustes
        $sql .= 'UNION ALL
                    SELECT TO_CHAR(C.occurrenceDate, \'dd\'),
                           TO_CHAR(C.occurrenceDate, \'mm\'),
                           CASE WHEN C.occurrenceDate <= now()::date 
                                THEN TRUE
                                ELSE FALSE
                           END,
                           F.description,
                           (\'9999999\'|| C.academicCalendarAdjustmentsId::varchar), --esses 9 sao pra nunca dar conflito com o codigo do calendario academico
                           A.scheduleId,
                           TO_CHAR(B.beginHour, \'' . MASK_TIME . '\'),
                           TO_CHAR(B.endHour, \'' . MASK_TIME . '\'),
                           B.numberhourslessons,
                           C.occurrenceDate,
                           B.turnId,
                           TO_CHAR(C.occurrenceDate, \'' . MASK_DATE . '\'),
                           B.scheduleLearningPeriodId
                      FROM acdSchedule A
                INNER JOIN acdScheduleLearningPeriod B
                        ON ( A.scheduleLearningPeriodId = B.scheduleLearningPeriodId )
                INNER JOIN acdAcademicCalendarAdjustments C
                        ON (    B.learningPeriodId = C.learningPeriodId
                            AND C.scheduleId = A.scheduleId)
                INNER JOIN acdLearningPeriod D
                        ON (D.learningPeriodId = B.learningPeriodId)
                INNER JOIN basWeekDay F
                        ON (C.weekdayId = F.weekDayId)
                     WHERE A.scheduleId  IN (' . $scheduleId . ')
                       AND D.periodId    = ?
                       AND C.professorId = ?
                       AND C.inOut       = \'' . DB_TRUE . '\'
                       AND C.occurrenceDate IS NOT NULL
              ORDER BY occurrenceDate) A, acdScheduleLearningPeriod B WHERE A.schedulelearningperiodid = B.scheduleLearningPeriodId   AND A.occurrenceDate BETWEEN B.beginDate AND B.endDate ORDER BY A.occurrenceDate::date';

        $args[] = $periodId;
        $args[] = $professorId;

        $db     = $this->getDatabase();
        $sql = SAGU::prepare($sql, $args);

        $result = $db->query($sql);

        return $result;
    }

     /**
     * A list containing all frequencies enroll from a group
     *
     * @param $groupId (integer): group id
     *
     * @return (array): An array containing all frequencies enroll from a group
     *
     **/
    public function listFrequenceEnroll($groupId, $scheduleId=null, $professorId=null)
    {

        $sql = 'SELECT G.academicCalendarId::varchar,
                       E.scheduleId,
                       B.enrollId,
                       A.frequencyDate,
                       A.turnId,
                       A.frequency
                  FROM acdFrequenceEnroll A
            INNER JOIN acdEnroll B
                    ON (A.enrollId = B.enrollId)
            INNER JOIN acdContract C
                    ON (B.contractId = C.contractId)
            INNER JOIN acdGroup D
                    ON (B.groupId = D.groupId)
            INNER JOIN acdSchedule E
                    ON (D.groupId = E.groupId)
            INNER JOIN acdScheduleLearningPeriod F
                    ON (E.scheduleLearningPeriodId = F.scheduleLearningPeriodId)
            INNER JOIN acdAcademicCalendar G
                    ON (D.learningPeriodId = G.learningPeriodId AND
                        A.frequencyDate = G.occurrenceDate AND
                        E.weekdayId = G.weekDayId)
                 WHERE D.groupId IN(' . $groupId . ') ';

        if ( strlen((string)$scheduleId)>0 )
        {
            $sql .= ' AND A.scheduleId IN ( ' . $scheduleId . ') ';
        }
        
        $sql .= ' AND B.statusId = \'' . ENROLL_STATUS_ENROLLED . '\' ';

        //tira as aulas substituídas
        $sql .= ' AND A.frequencyDate::varchar || A.turnId::varchar || G.weekDayId::varchar NOT IN (SELECT C.occurrenceDate::varchar || B.turnId::varchar || C.weekDayId::varchar
                                                             FROM acdSchedule A
                                                       INNER JOIN acdScheduleLearningPeriod B
                                                               ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                       INNER JOIN acdAcademicCalendarAdjustments C
                                                               ON (    B.learningPeriodId = C.learningPeriodId
                                                                   AND C.scheduleId = A.scheduleId)
                                                       INNER JOIN acdLearningPeriod D
                                                               ON (D.learningPeriodId = B.learningPeriodId)
                                                            WHERE A.scheduleId  IN (' . $scheduleId . ')
                                                              AND C.professorId = ?
                                                              AND C.inOut       = \'' . DB_FALSE . '\')';

        $ar[] = $professorId;

        //pega os ajustes
        $sql .= 'UNION ALL
                    SELECT (\'9999999\' || G.academicCalendarAdjustmentsId::varchar), --esses 9 sao pra nunca dar conflito com o codigo do calendario academico,
                           E.scheduleId,
                           B.enrollId,
                           A.frequencyDate,
                           A.turnId,
                           A.frequency
                      FROM acdFrequenceEnroll A
                INNER JOIN acdEnroll B
                        ON (A.enrollId = B.enrollId)
                INNER JOIN acdContract C
                        ON (B.contractId = C.contractId)
                INNER JOIN acdGroup D
                        ON (B.groupId = D.groupId)
                INNER JOIN acdSchedule E
                        ON (D.groupId = E.groupId)
                INNER JOIN acdScheduleLearningPeriod F
                        ON (E.scheduleLearningPeriodId = F.scheduleLearningPeriodId)
                INNER JOIN acdAcademicCalendarAdjustments G
                        ON (D.learningPeriodId = G.learningPeriodId AND
                            A.frequencyDate = G.occurrenceDate AND
                            E.weekdayId = G.weekDayId AND 
                            G.scheduleId = E.scheduleId)
                     WHERE A.scheduleId  IN(' . $scheduleId . ')
                       AND G.professorId = ?
                       AND G.inOut       = \'' . DB_TRUE . '\'
                       AND G.occurrenceDate IS NOT NULL
              ORDER BY frequencyDate ';

        $ar[] = $professorId;

        $db  = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $ar));

/*
        if ( count($result)>0 )
        {
            $x = 0;
            foreach ( $result as $row )
            {
                $result2[$x]    = $row;
                $result2[$x][5] = str_replace('.', ',', $row[5]);
                $x++;
            }
            $result = $result2;
        }
*/
        return $result;
    }
    
    public function updateOrInsertFrequenceEnroll($acdFrequenceEnroll)
    {
/*
        //verifica se a turma ja nao está finalizada
        $sql    = 'SELECT A.isClosed 
                     FROM acdGroup A
               INNER JOIN acdSchedule B 
                       ON ( A.groupId = B.groupId )
                    WHERE B.scheduleId = ?';
        $args   = array ( $acdFrequenceEnroll->scheduleId );
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        if ( $result[0][0] == DB_TRUE )
        {
            return false;
        }
*/
        $sql = 'SELECT UpdateOrInsertFrequenceEnroll(?, ?, ?, ?, ?, ?, ?)';
        
        $args = array(
                    $acdFrequenceEnroll->userName,
                    $acdFrequenceEnroll->ipAddress,
                    $acdFrequenceEnroll->enrollId,
                    $acdFrequenceEnroll->scheduleId,
                    $acdFrequenceEnroll->frequencyDate,
                    $acdFrequenceEnroll->turnId,
                    str_replace(',', '.', $acdFrequenceEnroll->frequency)
                    );

        $db  = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function isDateAvaliable($groupId, $date)
    {

        //pega todas as datas dos bimestres
        $date = str_replace('_', '-', $date);
        $sql = "SELECT B.limitDate,
                       B.finalDate,
                       B.degreeNumber,
                       B.degreeId
                  FROM acdGroup A
            INNER JOIN acdDegree B
                 USING ( learningPeriodId )
                 WHERE A.groupId = ?
              ORDER BY B.degreeNumber";

        $args = array ( $groupId );

        $db  = $this->getDatabase();
        $res = $db->query(SAGU::prepare($sql, $args));

        if ( count($res)>0 )
        {
            foreach ( $res as $datas )
            {
                list ( $limitDate,
                       $finalDate,
                       $degreeNumber,
                       $degreeId ) = $datas;

                //verifica em qual bimestre se enquadra a data que vem por parâmetro
                $sql  = "SELECT CASE WHEN ?::date <= ?::date THEN true ELSE false END";
                $res2 = $db->query(SAGU::prepare($sql, array($date, $finalDate) ));
                //agora verifica se a data já foi fechada (entrega bimestral) ou se a data de hoje é maior que a data limite
                if ( $res2[0][0] == DB_TRUE )
                {

                    //se foi entregue, bloqueia a data
                    $sql = "SELECT CASE WHEN ( count(*)>0 ) THEN true ELSE false END
                              FROM acdGroupRelease
                             WHERE groupId = ?
                               AND degreeId = ?";
                    $res3 = $db->query(SAGU::prepare($sql, array($groupId, $degreeId) ));

                    if ( $res3[0][0] == DB_TRUE )
                    {
                        return false;
                    }

                    //verifica se a data atual é maior que a data limite
                    else
                    {
                        $sql = "SELECT CASE WHEN ( date(now()) <= ?::date ) THEN true ELSE false END";
                        $res4 = $db->query(SAGU::prepare($sql, array($limitDate) ));

                        if ( $res4[0][0] == DB_TRUE )
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        else
        {
            return true;
        }

    }

    public function getProfessorObservation($groupId)
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT professorObservation FROM acdGroup WHERE groupId = ?';
        $res = $db->query(SAGU::prepare($sql, $groupId));
        return $res[0][0];
    }

    public function updateProfessorObservation($groupId, $professorObservation)
    {
        $sql = 'UPDATE acdGroup SET professorObservation = ? WHERE groupId = ?';
        return $this->db->execute(SAGU::prepare($sql, array($professorObservation, $groupId), false));
    }

    public function beginTransaction()
    {
        $this->db = $this->getDatabase();
        $this->db->execute('BEGIN TRANSACTION');
    }

    public function commit()
    {
        $this->db = $this->getDatabase();
        $this->db->execute('COMMIT');
    }
    
    public function rollback()
    {
        $db = $this->getDatabase();
        $db->execute('ROLLBACK');
    }

}
