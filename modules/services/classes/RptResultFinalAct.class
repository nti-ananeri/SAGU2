<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 15/06/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptResultFinalAct extends PDF
{
    public $module = 'academic';

    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $this->useUserInfo = false;
        $this->title = strtoupper(_M('Result final act', 'academic') );
        
        foreach($filters as $item => $value )
        {
            if(!$this->headerData->{$item} )
            {
                $this->headerData->{$item} = $value;
            }
        }
        if(strlen((string)$this->headerData->groupId) > 0 )
        {
            $db = $MIOLO->getBusiness('academic', 'BusCallList');
            $this->group = $db->getHeader($this->headerData);
            $this->filters->unitId = $this->group->unitId;
        }

        parent::__construct();
        $this->addPage('P', 'mm', 'A4');
        $this->aliasNbPages();
        $this->criaReport();
        $this->output();
    }
    
    public function putHeader()
    {
        if(!$this->headerData->groupId) return;
        $this->module = 'academic';
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusCallList');
        $group = $db->getHeader($this->headerData);
        $this->gpX = $group;
        //MIOLO::vd($group);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Professor','academic'). ':', 'LT', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize, $group->professorName, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Class', 'academic') .':', 'T');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*2.4, $this->lsize,   $group->classId, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0,$this->lsize,  _M('Serie','academic'). ':', 'T', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->periodId, 'TR', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4, $this->lsize, _M('Curricular component', 'academic') .':', 'L', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize,   $group->curricularComponentName, '');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('H.L.', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize,   $group->lessonNumberHours. 'H', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Period', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->serie, '', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize, _M('Turn', 'basic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->charId, 'R', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Course','academic'). ':', 'LB',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*9.5, $this->lsize, $group->courseName, 'B');

        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.4,$this->lsize,  _M('Room','academic'). ':', 'B',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->room, 'RB', null, 'R');
        $this->ln();
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontBodySize);
        if ( $this->page == 1 )
        {
            $procurar = array('$CURDAY','$CURMONTHEXT', '$CURMONTH', '$CURYEAR', '$PERIOD', '$LEGALPERSON_ADDRESS', '$LEGALPERSON_NAME', '$CURRICULARCOMPONENT', '$CLASS', '$PROFESSOR', '$TURNDESCRIPTION', '$COURSE');
            $substituir = array(date('d'), _M(date('F'), 'academic'), date('m'), date('Y'), $group->periodId, $this->pdfInfo->legalPersonAddress, $this->pdfInfo->legalPersonName, $group->curricularComponentName, $group->classId, $group->professorName, $group->turnDescription, $group->courseName);
            $text = str_replace($procurar, $substituir, RESULT_FINAL_ACT_TEXT);
            $this->multicell($this->psize, $this->lsize, $text);
            $this->ln();
        }

        $this->cell1 = $this->colSize[2]/count($this->groups);
        $y[0] = $this->y;
        $y[1] = $this->y;
        
        $posx[0] = $this->x+($this->colSize[0]+$this->colSize[1]);
        $x = 0;
        $size = 0;
        $fs = $this->fontSizeBody;
        while ( $size >= $this->cell1 || $size == 0 )
        {
            foreach ( $this->groups as $id => $group )
            {
               $a = strpos($group[1], chr(32));

                if ( $this->GetStringWidth(substr($group[1], 0, $a)) > $size )
                {
                    $size = $this->GetStringWidth(substr($group[1],0,$a));
                }
                
                if ( $size == 0 )
                {
                    $size = $this->cell1-1;
                }
            }
            if ( $size > $this->cell1 )
            {
                $fs -= 0.1;
                $this->setFont( DEFAULT_REPORT_FONT, '', $fs );
                $size = 0;
            }
        }
        
        foreach ( $this->groups as $id => $group )
        {
            $x++;
            $this->setY($y[0]);
            $this->setX((($this->cell1*$x)-$this->cell1)+$posx[0]);
//            $this->multiCell($this->cell1, $this->lsize, $group[1] . "\n" . ' C/H '. $group[2], null, 'C');
            if ( $this->y > $y[1] )
            {
                $y[1] = $this->y;
            }
        }
        $this->setY($y[0]);
        $this->setFont( DEFAULT_REPORT_FONT, 'BI', $fs );
        $this->setY($y[1]);
        $this->colsNotes = array ( 'N' => _M('Average', 'academic'), 'PF' => _M('Exam', 'services'), 'NF' => _M('Final note', 'services'), 'F' => _M('Absences', 'services'));
        $x = 0;
        $this->setFont( DEFAULT_REPORT_FONT, 'BI', $fs );
        $this->cell($this->colSize[0], $this->lsize, 'N.', 1, null, 'C');
        $this->cell($this->colSize[1], $this->lsize, _M('Name', 'basic'), 1, null, 'C');
        foreach ( $this->colsNotes as $id => $value )
        {
            $this->colsSize[$id] = $this->GetStringWidth($value);
            if ( $this->colsSize[$id] < 7 )
            {
                $this->colsSize[$id] = 7;
            }
        }
        $this->m = ($this->cell1/array_sum($this->colsSize));
        foreach ( $this->colsSize as $id=> $value )
        {
            $this->Cell($this->colsSize[$id]*$this->m, $this->lsize, $this->colsNotes[$id], 1, null, 'C' );
        }
 //       $this->Line($this->x, $y[0]+0.2, $this->x, $y[1]-0.2);
        $this->cell($this->colSize[3], $this->lsize, _M('Signature', 'academic'), 1, null, 'C');
        $this->ln();

    }

    public function criaReport()
    {
        $MIOLO = MIOLO::getInstance();
        $busResultFinalAct = $MIOLO->getBusiness('academic', 'BusResultFinalAct');
        $db = $MIOLO->getBusiness('academic', 'BusCallList');
        
        $pupils = $db->getPupils($this->headerData);
        
        if ( count($pupils) == 0 )
        {
        //    $this->addPage('P', 'mm', 'A4');
            $this->aliasNbPages();
            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
            $this->SetFillColor(255,0,0);
            $this->cell($this->psize, $this->lsize, _M('No data found to process', 'finance'), null, null, 'C', 1);
            $this->output();
            return;
        }
        /*
         * 0: ContractId
         * 1: Personid
         * 2: Name
         * 3: Situation
        */
        $x = 1;
        $this->setFont( DEFAULT_REPORT_FONT, '', $this->fontSizeBody );
        $size = 0;
        $this->colSize[0] = 7;
        $this->colSize[1] = 60; 
        $fsb = $this->fontSizeBody;
        while($size >= $this->colSize[1] || $size == 0 )
        {
            foreach ( $pupils as $aluno )
            {
                if ( $this->GetStringWidth($aluno->personName) > $size )
                {
                    $size = $this->GetStringWidth($aluno->personName);
                }
            }
            if ( $size > $this->colSize[1] )
            {
                $fsb -= 0.1;
                $fontSizeForPupils = $this->fontSizeBody;
                $this->setFont( DEFAULT_REPORT_FONT, '', $fsb );
                $size = 0;
            }
        }

        $size += 1.5;
        $this->colSize[1] = $size;
        $this->colSize[3] = 60;

        $this->groups = $busResultFinalAct->getGroups($this->headerData);
        $dados = $busResultFinalAct->getGroupPupilInformation($this->headerData);
        $this->colSize[2] = $this->psize - array_sum($this->colSize);

        $this->putHeader();
        $this->setFont( DEFAULT_REPORT_FONT, '', $fsb );
        $x = 1;
        foreach ( $pupils as $id => $aluno )
        {
            if ( $aluno->contractId != $oldContract )
            {
                if ( $this->y+($this->lsize) > $this->PageBreakTrigger && $x <= count($pupils) )
                {
                    $this->addPage('P', 'mm', 'A4');
                    $this->putHeader();
                    $this->setFont( DEFAULT_REPORT_FONT, '', $fsb );
                }
                $n = 0;
                if ( count($dados[$aluno->contractId]) == 0 )
                {
                    $this->setTextColor(255,0,0);
                    $this->cell( $this->colSize[0], $this->lsize, str_pad($x, 3, '0', STR_PAD_LEFT), 1, null, 'R');
                    $this->cell( $this->colSize[1], $this->lsize, $aluno[2], 1, null, 'L');
                    $this->setFont( DEFAULT_REPORT_FONT, 'BI', $fsb );
                    $this->setLineWidth(0.5);
                    $this->Line($this->x, $this->y+0.2, $this->x, ($this->y+$this->lsize)-0.2);
                    $this->setLineWidth(0.1);
                    $this->cell( $this->colSize[2], $this->lsize, _M('No curricular component', 'academic'), 1, null, 'C');
                    $this->setFont( DEFAULT_REPORT_FONT, '', $fsb );
                    $this->setTextColor(0);
                }
                else
                {
                    $this->setTextColor(0);
                    $this->cell( $this->colSize[0], $this->lsize, str_pad($x, 3, '0', STR_PAD_LEFT), 1, null, 'R');
                    $this->cell( $this->colSize[1], $this->lsize, $aluno->personName, 1, null, 'L');
                    foreach ( $this->groups as $id => $group )
                    {
                        $n++;
                        $this->setLineWidth(0.5);
                        $this->Line($this->x, $this->y+0.2, $this->x, ($this->y+$this->lsize)-0.2);
                        $this->setLineWidth(0.1);
                        unset($dt);
                        $dt->groupId = $group[0];
                        $dt->contractId = $aluno->contractId;
                        foreach ( $this->colsNotes as $value => $id )
                        {
                            if ( strlen((string)$dados[$dt->contractId][$dt->groupId]['enrollId']) > 0 )
                            {
                                if ( strlen((string)$dados[$dt->contractId][$dt->groupId][$value]) > 0 )
                                {
                                    if ( $value == 'F' )
                                    {
                                        $this->Cell($this->colsSize[$value]*$this->m, $this->lsize, $dados[$dt->contractId][$dt->groupId][$value], 1, null, 'C' );
                                    }
                                    else
                                    {
                                        $this->Cell($this->colsSize[$value]*$this->m, $this->lsize, $dados[$dt->contractId][$dt->groupId][$value], 1, null, 'R' );
                                    }
                                }
                                else
                                {
                                    $this->Cell($this->colsSize[$value]*$this->m, $this->lsize, '-', 1, null, 'C' );
                                }
                            }
                            else
                            {
                                $this->Cell($this->colsSize[$value]*$this->m, $this->lsize, null, 1, null, 'C' );
                            }
                        }
                    }
                }
                $this->cell($this->colSize[3], $this->lsize, null, 1, null, 'C');
                $this->ln();
                $x++;
            }
            $oldContract = $aluno->contractId;
        }

        $this->ln();
        $this->multicell($this->psize, $this->lsize, _M('Because expression of truth, we enter into these minutes without rassurer.', 'academic'), null, 'C');
        $this->cell($this->psize,$this->lsize, strtoupper($this->pdfInfo->cityName . '/' . $this->pdfInfo->stateId . ', _____ '._M('of', 'academic') .' __________________________' . _M('of', 'academic') . ' __________ .'), null, null, 'C');
        $this->ln();
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->defaultFontSize);
        $this->cell(($this->psize/12), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'L');
        $this->cell(($this->psize/6), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, $this->gpX->professorName , null, null, 'C');
        $this->cell(($this->psize/2), $this->lsize, $this->gpX->coordinatorName , null, null, 'C');
        $this->ln();
        $this->cell(($this->psize/2), $this->lsize, _M('Professor Signature', 'academic'), null, null, 'C');
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, _M('Course Coordinator Signature', 'academic'), null, null, 'C');
        $this->ln();
        $this->ln();
    }

    public function Header()
    {
        parent::Header();
    }

    public function Footer()
    {
        parent::Footer();
    }
}
?>
