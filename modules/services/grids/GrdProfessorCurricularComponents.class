<?php
/**
 *
 * Grid with the professor's curricular components
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdProfessorCurricularComponents extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:professor:curricularComponents';

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false         
         */
        $columns = array( 

                          new MGridColumn( _M('Group id', 'services'),          'left', true, null, false,  null, false),
                          //new MGridColumn( _M('Code', 'services'),   'left', true, null, true,  null, false),
                          new MGridColumn( _M('Curricular component', 'services'), 'left', true, null, true,  null, false),
                          //new MGridColumn( _M('Course id', 'services'),         'left', true, null, true,  null, false),
                          new MGridColumn( _M('Course', 'services'),            'left', true, null, true,  null, false),
                          new MGridColumn( _M('Turn id', 'services'),           'left', true, null, false, null, false),
                          new MGridColumn( _M('Turn', 'services'),              'left', true, null, true,  null, false),
                          new MGridColumn( _M('Unit id', 'services'),           'left', true, null, false, null, false),
                          new MGridColumn( _M('Unit', 'services'),              'left', true, null, true,  null, false),
                          new MGridColumn( _M('Week day', 'services'),          'left', true, null, true,  null, false),
                          new MGridColumn( _M('Schedule', 'services'),          'left', true, null, true,  null, false),
                          new MGridColumn( _M('Schedule id', 'services'),       'left', true, null, false,  null, false)
                        );

        $opts = array('periodId'    => $filters->periodId,
                      'groupId'     => '%0%',
                      'professorId' => $filters->professorId,
                      'scheduleId'  => '%9%');
        $gradesTyping = $MIOLO->getActionURL( 'services', substr($home, 0, strrpos($home,':')+1) . 'gradesTyping',  null, $opts );
        $frequency    = $MIOLO->getActionURL( 'services', substr($home, 0, strrpos($home,':')+1) . 'frequency',     null, $opts );
        $close        = $MIOLO->getActionURL( 'services', substr($home, 0, strrpos($home,':')+1) . 'closeSemester', null, $opts );

        $url = $MIOLO->getActionURL('services', $home, null, array('periodId' => $filters->periodId));
        parent::__construct( null, $columns, $url, 0, 0, 'grdResults' );

        $this->setLinkType('hyperlink');
        $this->addActionIcon( _M('Frequency register', 'services'),         array('frequency-on.png', 'frequency-off.png'),    $frequency );
        $this->addActionIcon( _M('Grades typing', 'services'),              array('gradesTyping-on.png', 'gradesTyping-off.png'), $gradesTyping );
        $this->addActionIcon( _M('Close curricular component', 'services'), array('lock-on.png', 'lock-off.png'), $close );
        $this->setRowMethod('GrdProfessorCurricularComponents', 'myRowMethod');
        $this->eventHandler();

    }

   /**
    * Function to handle the before each row creation
    */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        if ( $row[10] == DB_TRUE )
        {
            $actions[0]->disable();
            //$actions[1]->disable();
            //$actions[1]->grid->actions[1]->value = 'gradesTyping-off.png';
            $actions[2]->disable();
        }
        else
        {
            $actions[0]->enable();
            $actions[1]->enable();
            $actions[1]->grid->actions[1]->value = 'gradesTyping-on.png';
            $actions[2]->enable();
        }

    }

}

?>
