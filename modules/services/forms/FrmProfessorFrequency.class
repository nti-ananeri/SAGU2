<?php
/**
 *
 * Shows a list of pupils enrolled in the specified group and allow the professor
 * to register their frequencies
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 10/09/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Report to show pupils ou employees financial situations
 */
class FrmProfessorFrequency extends MForm
{
    
    /**
     * Class constructor
     */
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Frequency register', 'services'));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
             $this->defineFields();
             $this->eventHandler();
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        
        $groupId     = MIOLO::_request('groupId');
        $scheduleId  = MIOLO::_request('scheduleId');
        $periodId    = MIOLO::_request('periodId');
        $professorId = MIOLO::_request('professorId');

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-disabled-20x20.png');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL('services',$action));
        $toolBar->addButton('tbBtnSave', _M('Save data','services'), 'javascript:saveData()', null, true, $enabledImage, $disabledImage);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png' );
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png' );
        $toolBar->addButton('tbBtnClose', _M('Close', 'miolo'), $MIOLO->getActionURL( 'services', 'main:professor:curricularComponents'), _M('Close', 'miolo'), true, $enabledImage, $disabledImage);

        $toolBar->hideButton('tbBtnExit');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnPrint');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        $fields[] = $toolBar;

        //define funcoes AJAX que serao chamadas ao clique do botao para armazenar dados
        $MIOLO->getRequiredJS4Ajax();
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $code = '
                    function saveData() 
                    {
                        xGetElementById(\'divContent\').innerHTML = "' . _M('Wait while saving data', 'services') . '..."
                        enrolls.professorObservation = document.' . $this->name . '.professorObservation.value;
                        MIOLO_ajaxCall("' . $url . '", "POST", "ajax_btnSave", php_serialize(enrolls), updateData, "TEXT");
                    } 

                    function updateData(result) 
                    {
                        xGetElementById(\'divContent\').innerHTML = result;
                        MIOLO_parseAjaxJavascript(result);
                    }    
                ';
        $this->page->AddJsCode($code);
        
        $fields[] = new MDiv('divContent', null);

        SAGU::importJsSerialize($this);
        //carrega arquivo externo com funções JS
        $this->page->scripts->add( $MIOLO->getActionURL( 'services', 'html:scripts:professorFrequency.js' ));

/*        $imgPresence     = $MIOLO->getActionUrl('services', 'html:images:presence.png');
        $imgHalfPresence = $MIOLO->getActionUrl('services', 'html:images:halfPresence.png');
        $imgAbsence      = $MIOLO->getActionUrl('services', 'html:images:absence.png');*/
        $img0h           = $MIOLO->getActionUrl('services', 'html:images:presence-0h.png');
        $img1h           = $MIOLO->getActionUrl('services', 'html:images:presence-1h.png');
        $img2h           = $MIOLO->getActionUrl('services', 'html:images:presence-2h.png');
        $img3h           = $MIOLO->getActionUrl('services', 'html:images:presence-3h.png');
        $img4h           = $MIOLO->getActionUrl('services', 'html:images:presence-4h.png');
        $img5h           = $MIOLO->getActionUrl('services', 'html:images:presence-5h.png');
        $img6h           = $MIOLO->getActionUrl('services', 'html:images:presence-6h.png');
        $img7h           = $MIOLO->getActionUrl('services', 'html:images:presence-7h.png');
        $img8h           = $MIOLO->getActionUrl('services', 'html:images:presence-8h.png');
        $img9h           = $MIOLO->getActionUrl('services', 'html:images:presence-9h.png');
        $imgAddOn        = $MIOLO->getActionUrl('services', 'html:images:add-on.png');
        $imgAddOff       = $MIOLO->getActionUrl('services', 'html:images:add-off.png');
        
        //seta os caminhos para as imagens que serão utilizadas
//        $this->page->AddJsCode("setImageSources('$imgPresence', '$imgHalfPresence', '$imgAbsence', '$imgAddOn', '$imgAddOff')");
        $this->page->AddJsCode("setImageSources('$img0h', '$img1h', '$img2h', '$img3h', '$img4h', '$img5h', '$img6h', '$img7h', '$img8h', '$img9h', '$imgAddOn', '$imgAddOff')");

        $business = $MIOLO->getBusiness('services', 'BusProfessorFrequency');
        $title    = $business->getCurricularComponentName($scheduleId);

        //busca lista de alunos e de calendário academico
        $pupils                      = $business->listGroupPupils($groupId);
        $data2->professorObservation = $business->getProfessorObservation($groupId);
        $academicCalendars           = $business->listGroupAcademicCalendar($scheduleId, $periodId, $professorId);
        
        //seta o número de horas de cada horário e define se é permitido meia presença
        $numberHoursSchedule = $academicCalendars[0][8];
        $this->page->AddJsCode("setNumberHours($numberHoursSchedule, true)");

        //cria as primeiras colunas da tabela (numero, nome e codigo)
        $cols = array('', _M('Person name', 'services'), _M('Person id', 'services'));
        
        unset($code);

        if ( count($pupils) > 0 )
        {

            foreach ( $pupils as $key => $pupil )
            {
                $data[$key][0] = $key+1;
                $data[$key][1] = str_replace(' ', '&nbsp;', $pupil[0]);
                $data[$key][2] = $pupil[1];
                $enrollId      = $pupil[2];
                $code[]        = "this.enrolls.push(new objEnroll($enrollId))";
            }
            $this->page->AddJsCode(implode($code, "\n"));
        }

        //cria componentes da tabela que relaciona aluno a horarios
        if ( count($academicCalendars) > 0 ) 
        {
            foreach ( $academicCalendars as $keyAC => $academicCalendar )
            {
                $day                = $academicCalendar[0];
                $month              = $academicCalendar[1];
                $isActive           = $academicCalendar[2];
                $weekDay            = $academicCalendar[3];
                $academicCalendarId = $academicCalendar[4];
                $scheduleId         = $academicCalendar[5];
                $beginHour          = $academicCalendar[6];
                $endHour            = $academicCalendar[7];
                $occurrenceDate     = $academicCalendar[9];
                $turnId             = $academicCalendar[10];
                $occurrenceDate2    = $academicCalendar[11];

                //se a nota tiver sido fechada e a frequencia for anterior a essa nota, bloqueia a opção de alterar a frequencia
                $isAvaliable = $business->isDateAvaliable($groupId, $occurrenceDate);

                //se a disciplina estiver ativa
                if ( $isActive == DB_TRUE )
                {

                    //IMAGEM DA FREQUENCIA
                    if ( $isAvaliable == true )
                    {
                        $path  = $MIOLO->getActionUrl('services', 'html:images:add-on.png');
                    }
                    else
                    {
                        $path  = $MIOLO->getActionUrl('services', 'html:images:add-off.png');
                    }
                    $image = new MImage('imgAdd_' . $academicCalendarId . '_' . $scheduleId, _M('Add frequencies for this schedule', 'services'), $path);
                    if ( $isAvaliable == true )
                    {
                        $image->addAttribute('onClick',"setPresence('$academicCalendarId', '$scheduleId', '$occurrenceDate', '$turnId')");
                    }
                    $businessContent = $MIOLO->getBusiness('academic', 'BusFrequenceEnroll');
                    $content2        = $businessContent->getFrquenceContent($scheduleId, $occurrenceDate2, $turnId);

                    //IMAGEM DO CONTEÚDO
                    if ( strlen((string)$content2->occurrenceDate)>0 )
                    {
                        if ( $isAvaliable == true )
                        {
                            $path  = $MIOLO->getActionUrl('services', 'html:images:content-on-ok.png');
                        }
                        else
                        {
                            $path  = $MIOLO->getActionUrl('services', 'html:images:content-off.png');
                        }
                        $imageContent = new MImage('imgContent_' . $academicCalendarId . '_' . $scheduleId, _M('Update content', 'services') . ': ' . $content2->content, $path);
                    }
                    else
                    {
                        if ( $isAvaliable == true )
                        {
                            $path  = $MIOLO->getActionUrl('services', 'html:images:content-on.png');
                        }
                        else
                        {
                            $path  = $MIOLO->getActionUrl('services', 'html:images:content-off.png');
                        }
                        $imageContent = new MImage('imgContent_' . $academicCalendarId . '_' . $scheduleId, _M('Add content', 'services'), $path);
                    }
                    $url   = $MIOLO->getActionUrl('services', "main:professor:content&scheduleId=$scheduleId&occurrenceDate=$occurrenceDate2&turnId=$turnId");
                    if ( $isAvaliable == true )
                    {
                        $imageContent->addAttribute('onClick', "window.open('$url')");
                    }
                }
                else
                {
                    $path  = $MIOLO->getActionUrl('services', 'html:images:add-off.png');
                    $image = new MImage('imgAdd_' . $academicCalendarId . '_' . $scheduleId, '', $path);
                    $path  = $MIOLO->getActionUrl('services', 'html:images:content-off.png');
                    $imageContent = new MImage('imgContent_' . $academicCalendarId . '_' . $scheduleId, '', $path);
                }

                $head = $day . '/' . $month . '<br>' . $image->generate() . $imageContent->generate();
                $divDay   = new MDiv('divDay', $head, null, 'align=center');
                $divDay->setJsHint($weekDay);
                $cols[]   = $divDay->generate();

                if ( count($pupils)>0 )
                {
                    foreach ( $pupils as $keyPP => $pupil )
                    {
                        $enrollId = $pupil[2];
                        $image   = new MImage('imgFreq_' . $academicCalendarId . '_' . $scheduleId . '_' . $enrollId, '', null);

                        if ( $isAvaliable == true )
                        {
                            $image->addAttribute('onClick',"updateFrequency('$academicCalendarId', '$scheduleId', $enrollId)");
                        }
                        $divFreq = new MDiv('divFreq_' . $academicCalendarId . '_' . $scheduleId . '_' . $enrollId, $image, null, 'align=center');
                        $data[$keyPP][$keyAC+3] = $divFreq;
                    }
                }
            }
        }

        $cols[] = _M('Person id', 'services');
        $cols[] = _M('Person name', 'services');
        $cols[] = _M('', 'services');

        if ( count($pupils) > 0 )
        {
            foreach ( $pupils as $key => $pupil )
            {
                $data[$key][count($data[$key])] = $pupil[1];
                $data[$key][count($data[$key])] = str_replace(' ', '&nbsp;', $pupil[0]);
                $data[$key][count($data[$key])] = $key+1;
                $enrollId      = $pupil[2];
                $code[]        = "this.enrolls.push(new objEnroll($enrollId))";
            }
            //$this->page->AddJsCode(implode($code, "\n"));
        }

        //cria duas últimas colunas (presenças e ausências)
        $cols[] = _M('Presences', 'services');
        $cols[] = _M('Absences', 'services');
        if ( count($pupils)>0 )
        {
            foreach ( $pupils as $key => $pupil )
            {
                $enrollId = $pupil[2];            
            
                $labelSuffix = new MText('lbSuf', _M('H/L', 'services'));
                $labelSuffix->color = 'blue';

                $label = new MText('lbPres_' . $enrollId, '0');
                $label->setBold(true);
                $label->color = 'blue';

                $labelPercent = new MText('lbPercentPres_' . $enrollId, '(0%)');
                $labelPercent->color = 'blue';
            
                $divPres = new MDiv('divPres_' . $enrollId, array($label, $labelSuffix, $labelPercent), null, 'align=center');
                $divPres->addBoxStyle('white-space', 'nowrap');
                $data[$key][count($data[$key])] = $divPres;

                $labelSuffix = new MText('lbSuf', _M('H/L', 'services'));
                $labelSuffix->color = 'red';
            
                $label  = new MText('lbAbs_' . $enrollId, '0');
                $label->setBold(true);
                $label->color = 'red';
            
                $labelPercent = new MText('lbPercentAbs_' . $enrollId, '(0%)');
                $labelPercent->color = 'red';
            
                $divAbs = new MDiv('divAbs_' . $enrollId, array($label, $labelSuffix, $labelPercent), null, 'align=center');
                $divAbs->addBoxStyle('white-space', 'nowrap');
                $data[$key][count($data[$key])] = $divAbs;
            }
        }

        //popula tabela com frequencias já registradas
        $frequencies = $business->listFrequenceEnroll($groupId, $scheduleId, $professorId);

        if ( count($frequencies) )
        {
            foreach ( $frequencies as $frequency )
            {
                $numberOfacademicCalendars[] = $frequency[0];
            }
            
            $numberOfacademicCalendars = count(array_unique($numberOfacademicCalendars));
            $this->page->AddJsCode("setSchedulesNumber($numberOfacademicCalendars)");

        
            unset($code);

            foreach ( $frequencies as $frequency )
            {
                $academicCalendarId = $frequency[0];
                $scheduleId         = $frequency[1];
                $enrollId           = $frequency[2];
                $frequencyDate      = $frequency[3];
                $turnId             = $frequency[4];
                $numberHours        = $frequency[5];
                
                $code[] ="setData('$academicCalendarId', '$scheduleId', '$enrollId', '$frequencyDate', $turnId, $numberHours, true)";
                
                $turnOffAddButton[] = array($academicCalendarId, $scheduleId);
            }

            foreach ( $turnOffAddButton as $toab )
            {
                $code[] = "turnOffAddButton('$toab[0]', '$toab[1]')";
            }
            $this->page->AddJsCode(implode(array_unique($code), "\n"));
        }

        //cria campos
        $pupilsTable = new MTableRaw($title, $data, $cols);
        $pupilsTable->setAlternate(true); 
        $fields[] = $pupilsTable;

        $obs = new MMultiLineField('professorObservation', $this->getFormValue('professorObservation', $data2->professorObservation), _M('Observation', 'academic'), null, 4, 70);
        $fields[] = $obs;

        $fields[] = new MSeparator();
        $fields[] = new MSeparator();
        $fields[] = new MSeparator();
        $fields[] = new MSeparator();

        $this->setFields($fields);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        
    }

    /**
     * Event triggered when user click on the save button
     **/
    public function ajax_btnSave($enrolls)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        $gotError = false;
        
        $data = unserialize(stripslashes($enrolls[0]));
        
        $professorObservation = $data['professorObservation'];
        unset($data['professorObservation']);
        $groupId              = $_REQUEST['groupId'];

        $business = $MIOLO->getBusiness('services', 'BusProfessorFrequency');
        $business->beginTransaction();

        foreach ( $data as $enrolls )
        {
            $enrollId    = $enrolls->enrollId;
            $frequencies = $enrolls->frequencies;
            
            foreach ( $frequencies as $frequency )
            {   
                $acdFrequenceEnroll->userName      = trim($MIOLO->getLogin()->id);
                $acdFrequenceEnroll->ipAddress     = $_SERVER['REMOTE_ADDR'];
                $acdFrequenceEnroll->enrollId      = $enrollId;
                $acdFrequenceEnroll->scheduleId    = $frequency->scheduleId;
                $acdFrequenceEnroll->frequencyDate = $frequency->frequencyDate;
                $acdFrequenceEnroll->turnId        = $frequency->turnId;
                $acdFrequenceEnroll->frequency     = $frequency->frequency ? $frequency->frequency : 0;
                
                try
                {
                    $business->updateOrInsertFrequenceEnroll($acdFrequenceEnroll);
                }
                catch( Exception $e )
                {
                    $msg  = _M('Error inserting or updating data', 'services') . ': ' . $e->getMessage();
                    $gotError = true;
                }
            }
        }
        if ( $gotError )
        {
            $business->rollback();
        }
        else
        {
            //Atualiza as observações do professor
            $business->updateProfessorObservation($groupId, $professorObservation);

            $business->commit();   
            $msg = _M('Data saved successfully', 'services');
            $fld33[]  = new MTextLabel('labelInfo', '<br><font color=red>' . $msg . '!</font><br>&nbsp;');
            $fields[] = new MDiv('divInfo', $fld33, null, 'align=center');
            unset($fld33);
        }
        
        $this->manager->getTheme()->setContent($fields);
    }
}

?>
