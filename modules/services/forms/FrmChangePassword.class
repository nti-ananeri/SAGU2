<?php

class FrmChangePassword extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->home = $data->home;
        parent::__construct(_M('Change password', 'services'));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $action   = MIOLO::getCurrentAction();

        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson     = $MIOLO->getBusiness('basic', 'BusPerson');

        //se for um usuário do sistema logado
        if ( strlen((string)$mioloUserName) >  0 )
        {
            $personData       = $busPerson->getPersonByMioloUserName($mioloUserName);
        }
        else //caso for um aluno
        {
            $personData->personId = $MIOLO->session->getValue('loginUid');
        }

        $businessPerson = $MIOLO->getBusiness('basic', 'BusPerson');
        $person         = $businessPerson->getPerson($personData->personId);

        $fields[]       = new MDiv('error', null);

        $fields[]       = new MTextLabel('txtPerson', $person->personId . ' - ' . $person->name, _M('Person', 'basic'));
        $fields[]       = new MHiddenField('personId', $person->personId);

        $fields[]       = new MPasswordField('password', $this->getFormValue('password'), _M('Actual password', 'services'));
        $validators[]   = new MRequiredValidator('password', _M('Actual password', 'services'));

        $fields[]       = new MPasswordField('newPassword', $this->getFormValue('newPassword'), _M('New password', 'services'));
        $validators[]   = new MRequiredValidator('newPassword', _M('New password', 'services'));

        $fields[]       = new MPasswordField('confirmNewPassword', $this->getFormValue('confirmNewPassword'), _M('Confirm new password', 'services'));
        $validators[]   = new MRequiredValidator('confirmNewPassword', _M('Confirm new password', 'services'));

        if ( $businessPerson->isPhysicalPersonEmployee($personData->personId) && $this->home == 'main:employee:changePassword' )
        {
            $passwordTypeLabel = new MText('passwordTypeLabel', _M('Change which password', 'services') . '?');
            $passwordTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
            $passwordTypeLabel->setClass('m-caption m-caption-required');
            $flds[]            = $passwordTypeLabel;

            $options[0][1] = 'W';
            $options[0][0] = _M('Password for login of web services.', 'services');
            $options[1][1] = 'S';
            $options[1][0] = _M('Password for login of SAGU.', 'services');

            $passwordType = new MRadioButtonGroup('passwordType', '', $options, $this->getFormValue('passwordType') ? $this->getFormValue('passwordType') : 'W', null, 'horizontal');
            $passwordType->setShowLabel(false);
            $flds[]       = $passwordType;

            $hctpasswordType = new MHContainer('hctpasswordType', $flds);
            $fields[]        = $hctpasswordType;
            unset($flds);
        }
        else
        {
            $fields[] = new MHiddenField('passwordType', 'W');
        }

        $fields[] = new MButton('btnSave', _M('Save', 'basic'));

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL('services', substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
        $this->page->onLoad('document.' . $this->name . '.password.focus();');

    }

    public function btnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $personId           = MIOLO::_REQUEST('personId');
        $password           = MIOLO::_REQUEST('password');
        $newPassword        = MIOLO::_REQUEST('newPassword');
        $confirmNewPassword = MIOLO::_REQUEST('confirmNewPassword');

        $businessPerson = $MIOLO->getBusiness('basic', 'BusPerson');

        //alteração de senha dos serviços WEB
        if ( $this->passwordType->value == 'W' )
        {
            //confere se a senha atual está correta
            if ( $businessPerson->authenticate($personId, strtoupper(md5(strtoupper($password)))) != true )
            {
                unset($fields);
                $info     = new MText('info', '<b><font color=red>' . _M('The actual password do not match', 'services') . '!</font></b>');
                $fields[] = $info;
                $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                $bsgCont->showLabel = true;
                $bsgCont->width     = '98%';
                $this->error->addControl($bsgCont);
                unset($fields, $bsgCont);
            }
            else
            {
                //confere se as senhas novas são iguais
                if ( $newPassword != $confirmNewPassword )
                {
                    unset($fields);
                    $info     = new MText('info', '<b><font color=red>' . _M('The new password and the confirmation password do not match', 'services') . '!</font></b>');
                    $fields[] = $info;
                    $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                    $bsgCont->showLabel = true;
                    $bsgCont->width     = '98%';
                    $this->error->addControl($bsgCont);
                    unset($fields, $bsgCont);
                }
                else
                {
                    //confere se as senhas novas são iguais as anteriores
                    if ( $newPassword == $password )
                    {
                        unset($fields);
                        $info     = new MText('info', '<b><font color=red>' . _M('The new password are the same that the current password', 'services') . '!</font></b>');
                        $fields[] = $info;
                        $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                        $bsgCont->showLabel = true;
                        $bsgCont->width     = '98%';
                        $this->error->addControl($bsgCont);
                        unset($fields, $bsgCont);
                    }
                    else
                    {
                        //confere se a senha tem o mínimo de dígitos
                        if ( strlen((string)$newPassword) < MINIMUM_PASSWORD_LENGTH )
                        {
                            unset($fields);
                            $info     = new MText('info', '<b><font color=red>' . _M('Your new password must contain at least @1 character(s)', 'services', MINIMUM_PASSWORD_LENGTH) . '!</font></b>');
                            $fields[] = $info;
                            $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                            $bsgCont->showLabel = true;
                            $bsgCont->width     = '98%';
                            $this->error->addControl($bsgCont);
                            unset($fields, $bsgCont);
                        }
                        else
                        {
                            $ok = $businessPerson->updatePassword($personId, strtoupper(md5(strtoupper($newPassword))));
                            if ( $ok )
                            {
                                $msg     = _M('Password changed with success!', 'services');
                                $caption = _M('Information', 'services');
                                $MIOLO->information($msg, $MIOLO->getActionURL( $module, substr($action, 0, strrpos($action, ':')) ));
                            }
                            else
                            {
                                $msg  = _M('Error executing requested operation.', 'academic');
                                $goto = $MIOLO->getActionURL('services', $action);
                                $caption = _M('Error', 'services');
                                $MIOLO->error( $msg, $goto, $caption );
                            }
                        }
                    }
                }
            }
        }
        //Alteração de senha do sistema SAGU
        elseif ( $this->passwordType->value == 'S' )
        {

            $person       = $businessPerson->getPerson($personId);
            $businessUser = $MIOLO->getBusiness('admin', 'user');

            //confere se a senha atual está correta
            if ( $businessUser->authenticate($person->mioloUserName, strtoupper($password), strtoupper(md5($password))) != true )
            {
                unset($fields);
                $info     = new MText('info', '<b><font color=red>' . _M('The actual password do not match', 'services') . '!</font></b>');
                $fields[] = $info;
                $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                $bsgCont->showLabel = true;
                $bsgCont->width     = '98%';
                $this->error->addControl($bsgCont);
                unset($fields, $bsgCont);
            }
            else
            {
                //confere se as senhas novas são iguais
                if ( $newPassword != $confirmNewPassword )
                {
                    unset($fields);
                    $info     = new MText('info', '<b><font color=red>' . _M('The new password and the confirmation password do not match', 'services') . '!</font></b>');
                    $fields[] = $info;
                    $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                    $bsgCont->showLabel = true;
                    $bsgCont->width     = '98%';
                    $this->error->addControl($bsgCont);
                    unset($fields, $bsgCont);
                }
                else
                {
                    //confere se as senhas novas são iguais as anteriores
                    if ( $newPassword == $password )
                    {
                        unset($fields);
                        $info     = new MText('info', '<b><font color=red>' . _M('The new password are the same that the current password', 'services') . '!</font></b>');
                        $fields[] = $info;
                        $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                        $bsgCont->showLabel = true;
                        $bsgCont->width     = '98%';
                        $this->error->addControl($bsgCont);
                        unset($fields, $bsgCont);
                    }
                    else
                    {
                        //confere se a senha tem o mínimo de dígitos
                        if ( strlen((string)$newPassword) < MINIMUM_PASSWORD_LENGTH )
                        {
                            unset($fields);
                            $info     = new MText('info', '<b><font color=red>' . _M('Your new password must contain at least @1 character(s)', 'services', MINIMUM_PASSWORD_LENGTH) . '!</font></b>');
                            $fields[] = $info;
                            $bsgCont  = new BaseGroup('bsgCont', _M('Error', 'services'), $fields, 'vertical');
                            $bsgCont->showLabel = true;
                            $bsgCont->width     = '98%';
                            $this->error->addControl($bsgCont);
                            unset($fields, $bsgCont);
                        }
                        else
                        {
                            $ok = $businessUser->updatePassword2($person->mioloUserName, $newPassword, md5($newPassword));
                            if ( $ok )
                            {
                                $msg     = _M('Password changed with success!', 'services');
                                $caption = _M('Information', 'services');
                                $MIOLO->information($msg, $MIOLO->getActionURL( $module, substr($action, 0, strrpos($action, ':')) ));
                            }
                            else
                            {
                                $msg  = _M('Error executing requested operation.', 'academic');
                                $goto = $MIOLO->getActionURL('services', $action);
                                $caption = _M('Error', 'services');
                                $MIOLO->error( $msg, $goto, $caption );
                            }
                        }
                    }
                }
            }
        }
    }

}

?>
