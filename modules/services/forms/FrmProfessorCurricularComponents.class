<?php
/**
 *
 * Show the professor curricular components by period and allow the professor
 * to register notes, frequency and stuff
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Report to show pupils ou employees financial situations
 */
class FrmProfessorCurricularComponents extends MForm
{
    /**
     * Class constructor
     */
    function __construct()
    {
    
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Curricular components', 'services'));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson     = $MIOLO->getBusiness('basic', 'BusPerson');

        //se for um usuário do sistema logado
        if ( strlen((string)$mioloUserName) >  0 )
        {
            $personData = $busPerson->getPersonByMioloUserName($mioloUserName);
        }
        else //caso for um aluno
        {
            $personData->personId = $MIOLO->session->getValue('loginUid');
        }

        $periodLabel   = new MText('periodLabel', _M('Period', 'services'));
        //$periodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $periodLabel->setClass('m-caption m-caption-required');

        $periodId      = $this->getFormValue('selPeriodId', (strlen((string)MIOLO::_request('periodId')) > 0) ? MIOLO::_request('periodId') : CURRENT_PERIOD_ID);

        $busProfessor  = $MIOLO->getBusiness('services', 'BusProfessor');
        $periods       = $busProfessor->listProfessorPeriods($personData->personId);

        $selPeriodId   = new MSelection('selPeriodId', $periodId, null, $periods, true);
        $selPeriodId->setAutoSubmit(true);

        $viewFormLabel = new MText('viewForm', _M('Sort by class, room and schedule', 'services') . '?');
        //$viewFormLabel->setWidth(FIELD_CONTAINER_SIZE);
        $viewFormLabel->setClass('m-caption m-caption-required');

        $viewForm      = new MRadioButtonGroup('viewForm', '', SAGU::listTrueFalse(1), $this->GetFormValue('viewForm', DB_TRUE), null, 'horizontal');
        $viewForm->SetShowLabel(false);
        $viewForm->SetAutoPostBack(true);

        $hctBase       = new MHContainer('hctBase', array($periodLabel, $selPeriodId, $viewFormLabel, $viewForm));
        $hctBase->setShowLabel(false);
        $fields[]      = $hctBase;

        // get filters values
        unset($filters);
        $filters->periodId    = $periodId;
        $filters->professorId = $personData->personId;

        if ( $this->GetFormValue('viewForm') == DB_FALSE )
        {
            $grdResults = $MIOLO->getUI()->getGrid('services', 'GrdProfessorCurricularComponents', $filters);
            $data       = $busProfessor->listProfessorCurricularComponents($personData->personId, $periodId);
        }
        else
        {
            $grdResults = $MIOLO->getUI()->getGrid('services', 'GrdProfessorCurricularComponents2', $filters);
            $data       = $busProfessor->listProfessorCurricularComponents2($personData->personId, $periodId);
        }
        $grdResults->setData($data);
        $fields[]   = $grdResults;

//        $lblCounter = new MLabel(_M('@1 records found.', 'services', count($data)));
//        $fields[] = $lblCounter;

        $fields[] = new MSeparator();

        $this->setFields($fields);

        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
