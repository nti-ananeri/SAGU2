<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 25/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'academic';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptCancelledPupilsReport extends PDF
{
    var $module = 'academic';
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusCancelledPupilsReport');
        
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->relats = $db->searchCancelledPupils($this->filters);
        $this->title = strtoupper(_M('Cancelled pupils report', $this->module));

        if ( $this->filters->printMode == 1 )
        {
            $this->title .= ' - ' . _M('Analytical', 'finance');
        }
        else if ( $this->filters->printMode == 2 )
        {
            $this->title .= ' - ' . _M('Synthetic', 'finance');
        }
        else
        {
            $this->title .= ' - ' . 'Sintético p/ curso';
        }
        parent::__construct();
        $this->useUserInfo = false;
        $this->aliasNbPages();
        $this->addPage('P', 'mm', 'A4');
        $this->PageBreakTrigger = ($this->h-$this->tMargin)-6;
        if ( count($this->relats) == 0 )
        {
            $this->SetFillColor(255,0,0);
            $this->cell($this->psize, $this->lsize, _M('No data found to process', 'finance'), 1, null, 'C', 1);
            $this->outPut();
            return;
        }

        if ( $this->filters->printMode == 1 )
        {
            $this->col['name'][0] = _M('Enroll', 'academic');
            $this->col['name'][1] = _M('Name', 'basic');
            $this->col['name'][2] = _M('Sex', 'basic'); //'Sexo';
            $this->col['name'][3] = _M('Birth', 'academic'); //'Nascimento';
            $this->col['name'][4] = _M('Date', 'basic');
            $this->col['size'][0] = ($this->psize/18)*2;
            $this->col['size'][1] = ($this->psize/18)*11;
            $this->col['size'][2] = ($this->psize/18)*1;
            $this->col['size'][3] = ($this->psize/18)*2;
            $this->col['size'][4] = ($this->psize/18)*2;
            $this->col['ori'][0] = 'C';
            $this->col['ori'][1] = 'L';
            $this->col['ori'][2] = 'C';
            $this->col['ori'][3] = 'C';
            $this->col['ori'][4] = 'C';
        }
        else if ( $this->filters->printMode == 2 )
        {
            $this->col['name'][0] = _M('Unit', 'basic');
            $this->col['name'][1] = _M('Course', 'academic');
            $this->col['name'][2] = _M('Serie', 'basic');
            $this->col['name'][3] = _M('Turn', 'basic');
            $this->col['name'][4] = _M('Women', 'basic');
            $this->col['name'][5] = _M('Men', 'basic');
            $this->col['name'][6] = _M('Total', 'basic');
            $this->col['size'][0] = ($this->psize/18)*1.5;
            $this->col['size'][1] = ($this->psize/18)*8.5;
            $this->col['size'][2] = ($this->psize/18)*0.9;
            $this->col['size'][3] = ($this->psize/18)*2;
            $this->col['size'][4] = ($this->psize/18)*1.7;
            $this->col['size'][5] = ($this->psize/18)*1.7;
            $this->col['size'][6] = ($this->psize/18)*1.7;
            $this->col['ori'][0] = 'C';
            $this->col['ori'][1] = 'L';
            $this->col['ori'][2] = 'C';
            $this->col['ori'][3] = 'C';
            $this->col['ori'][4] = 'R';
            $this->col['ori'][5] = 'R';
            $this->col['ori'][6] = 'R';
        }
        else
        {
            $this->col['name'][0] = _M('Unit', 'basic'); //'Unidade';
            $this->col['name'][1] = _M('Course', 'academic'); //'Curso';
            $this->col['name'][2] = _M('Women', 'basic'); //'Mulheres';
            $this->col['name'][3] = _M('Men', 'basic'); 
            $this->col['name'][4] = _M('Total', 'basic');
            $this->col['size'][0] = ($this->psize/18)*1.5;
            $this->col['size'][1] = ($this->psize/18)*10.5;
            $this->col['size'][2] = ($this->psize/18)*2;
            $this->col['size'][3] = ($this->psize/18)*2;
            $this->col['size'][4] = ($this->psize/18)*2;
            $this->col['ori'][0] = 'C';
            $this->col['ori'][1] = 'L';
            $this->col['ori'][2] = 'C';
            $this->col['ori'][3] = 'C';
            $this->col['ori'][4] = 'C';
        }
        $this->generatePDF();
    }

    public function generatePDF()
    {
        $this->module = 'academic';
        $this->putContent();
        PDF::generatePDF();
    }

    public function putHeaderContent()
    {
        $this->setFillColor(232,232,232);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $fs = 8;
        for($x = 0; $x < count($this->col['name']); $x++)
        {
            while ( $this->getStringWidth($this->col['name'][$x])+1 >= $this->col['size'][$x] ) 
            {
                $fs -= 0.1;
                $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
            }
            //$this->cell($this->col['size'][$x], $this->lsize, $this->col['name'][$x], 1, null, 'C', 1 );
        }
        $this->headerFontSize = $fs;
        for($x = 0; $x < count($this->col['name']); $x++)
        {
            $this->cell($this->col['size'][$x], $this->lsize, $this->col['name'][$x], 1, null, 'C', 1 );
        }
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $fs);
    }

    public function putContent()
    {
        //$this->putHeaderContent();
        $this->headerFontSize = 8;
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        asort($this->relats);
        $this->setFillColor(232,232,232);
        foreach($this->relats as $unit => $cunit)
        {
            switch( $this->filters->printMode )
            {
                case 1:
                unset($geraltotal);
                foreach ( $cunit as $course => $ccourse )
                {
                        /*$this->setFillColor(232,232,232);
                        $this->cell($this->psize, $this->lsize, _M('Course', 'academic') . ': ' . $course, 1, null, 'C', 1);
                        $this->ln();*/
                    foreach ( $ccourse as $serie => $ccserie )
                    {
                        foreach ( $ccserie as $turno => $cturn )
                        {
                            asort($cturn);
                            unset($sw);
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                            $sw['unitLabel'] = $this->getStringWidth(_M('Unit', 'basic') . ': ') +3;
                            $sw['courseLabel'] = $this->getStringWidth(_M('Course', 'academic') . ': ') +3;
                            $sw['serieLabel'] = $this->getStringWidth(  _M('Serie', 'academic') . ':  '  ) +3;
                            $sw['turnLabel'] = $this->getStringWidth(  _M('Turn', 'basic') . ':  '  ) +3;
                            $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                            $sw['unitDescription'] = $this->getStringWidth($unit) +3;
                            $dataCourse = $this->busCourse->getCourse($course);
                            $sw['courseDescription'] = $this->getStringWidth( $dataCourse->name .  " - ({$course})" ) +3;
                            $sw['serieDescription'] = $this->getStringWidth( $serie  ) +3;
                            $dataTurn = $this->busTurn->getTurn($turno);
                            $sw['turnDescription'] = $this->getStringWidth($dataTurn->description)+1;

                            while(array_sum($sw) > $this->psize )
                            {
                                $this->headerFontSize -= 0.1;
                                $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                                $sw['unitLabel'] = $this->getStringWidth(_M('Unit', 'basic') . ': ') +3;
                                $sw['courseLabel'] = $this->getStringWidth(_M('Course', 'academic') . ': ') +3;
                                $sw['serieLabel'] = $this->getStringWidth(  _M('Serie', 'academic') . ':  '  ) +3;
                                $sw['turnLabel'] = $this->getStringWidth(  _M('Turn', 'basic') . ':  '  ) +3;
                                $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                                $sw['unitDescription'] = $this->getStringWidth($unit) +3;
                                $dataCourse = $this->busCourse->getCourse($course);
                                $sw['courseDescription'] = $this->getStringWidth( $dataCourse->name .  " - ({$course})" ) +3;
                                $sw['serieDescription'] = $this->getStringWidth( $serie  ) +3;
                                $sw['turnDescription'] = $dataTurn->description;
                            }

                            if ( array_sum($sw) <> $this->psize )
                            {
                                $this->mf = $this->psize / array_sum($sw);
                                foreach ( $sw as $k => $v )
                                {
                                    $sw[$k] = $v * $this->mf;
                                }
                            }
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                            $this->cell($sw['unitLabel'], $this->lsize, _M('Unit', 'basic') . ':  ' , 'LTB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                            $this->cell($sw['unitDescription'], $this->lsize, $unit , 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                            $this->cell($sw['courseLabel'], $this->lsize, _M('Course', 'academic') . ':  ' , 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                            $this->cell($sw['courseDescription'], $this->lsize, $dataCourse->name .  " - ({$course})", 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                            $this->cell($sw['serieLabel'], $this->lsize, _M('Serie', 'academic') . ':  ' , 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                            $this->cell($sw['serieDescription'], $this->lsize, $serie , 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                            $this->cell($sw['turnLabel'], $this->lsize, _M('Turn', 'basic') . ':  ' , 'TB', null, 'L', 1);
                            $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->headerFontSize);
                            $dataTurn = $this->busTurn->getTurn($turno);
                            $this->cell($sw['turnDescription'], $this->lsize, $dataTurn->description , 'TBR', null, 'L', 1);
                            $this->ln();
                            $this->putHeaderContent();
                            unset($turnrelat);
                            unset($turnrelat2);
                            foreach ( $cturn as $relat )
                            {
                                $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                                for($x = 1; $x < count($this->col['name'])+1; $x++)
                                {
                                    $this->cell($this->col['size'][$x-1], $this->lsize, $relat[$x], 1, null, $this->col['ori'][$x-1] );
                                    if ( $x == 3 )
                                    {
                                        $turnrelat[$relat[$x]]++;
                                        $turnrelat2++;
                                    }
                                }
                                if ( $this->y+($this->lsize*2) > $this->PageBreakTrigger && $x-1 < count($cturn) )
                                {
                                    $this->addPage();
                                    $this->putHeaderContent();
                                    $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                                }
                                else
                                {
                                    $this->ln();
                                }
                            }
                            unset($sw);
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                            $sw['men'] = $this->getStringWidth(_M('Men', 'basic')) +8;
                            $sw['women'] = $this->getStringWidth(_M('Women', 'basic')) +8;
                            $sw['pupils'] = $this->getStringWidth(_M('Pupils', 'academic')) +12;
                            $this->mf = $this->psize / array_sum($sw);
                            $sw['men'] = ($sw['men']*$this->mf);
                            $sw['women'] = ($sw['women']*$this->mf);
                            $sw['pupils'] = ($sw['pupils']*$this->mf);

                            $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                            $this->cell($sw['men']-10, $this->lsize, _M('Men', 'basic') . ': ', 'TBL');
                            $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                            $this->cell(10, $this->lsize, $turnrelat['M'],'TBR');
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                            $this->cell($sw['women']-10, $this->lsize, _M('Women', 'basic') . ': ',  'TBL');
                            $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                            $this->cell(10, $this->lsize, $turnrelat['F'], 'TBR');
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                            $this->cell($sw['pupils']-12, $this->lsize, _M('Pupils', 'academic') . ': ', 'TBL');
                            $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                            $this->cell(12, $this->lsize, $turnrelat2, 'TBR');
                            $this->ln();
                            $geraltotal['M'] += $turnrelat['M'];
                            $geraltotal['F'] += $turnrelat['F'];
                        }
                    }
                }
                if ( isset($sw['pupils']) )
                {
                    if ( isset($geraltotal) )
                    {
                        if ( strlen((string)$geraltotal['M']) == 0 )
                        {
                            $geraltotal['M'] = 0;
                        }
                        if ( strlen((string)$geraltotal['F']) == 0 )
                        {
                            $geraltotal['F'] = 0;
                        }
                    }
                    if ( $this->y+($this->lsize*2) > $this->PageBreakTrigger )
                    {
                        $this->addPage();
                    }
                    $this->setFont(DEFAULT_REPORT_FONT, 'BI', 9);
                    $this->cell($this->psize, $this->lsize, 'Total', 1, null, 'C', 1);
                    $this->ln();
                    $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                    $this->cell($sw['men']-10, $this->lsize, _M('Men', 'basic') . ': ', 'TBL');
                    $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                    $this->cell(10, $this->lsize, $geraltotal['M'],'TBR');
                    $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                    $this->cell($sw['women']-10, $this->lsize, _M('Women', 'basic') . ': ',  'TBL');
                    $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                    $this->cell(10, $this->lsize, $geraltotal['F'], 'TBR');
                    $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                    $this->cell($sw['pupils']-12, $this->lsize, _M('Pupils', 'academic') . ': ', 'TBL');
                    $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                    $this->cell(12, $this->lsize, array_sum($geraltotal), 'TBR');
                    $this->ln();
                }
                break;
                case 2: //Sintético
                    $y2 = $this->y;
                    foreach ( $this->relats as $unitId => $unitArray )
                    {
                        if ( count($unitArray) > 0 )
                        {
                            if ( $this->y+($this->lsize) > $this->PageBreakTrigger )
                            {
                                $this->addPage();
                                $this->putHeaderContent();
                            }
                            else if ( $this->y == $y2 )
                            {
                                $this->putHeaderContent();
                            }
                            $totalU = 0;
                            $womenU = 0;
                            $menU = 0;
                            foreach ( $unitArray as $courseId => $courseArray )
                            {
                                if ( count($courseArray) > 0 )
                                {
                                    if ( $this->y+($this->lsize) > $this->PageBreakTrigger )
                                    {
                                        $this->addPage();
                                        $this->putHeaderContent();
                                    }
                                    $x = 0;
                                    $totalC = 0;
                                    $womenC = 0;
                                    $menC = 0;
                                    foreach ( $courseArray as $serie => $serieArray )
                                    {
                                        if ( count($serieArray) > 0 )
                                        {
                                            $totalS = 0;
                                            $womenS = 0;
                                            $menS = 0;
                                            $xS =0;
                                            foreach ( $serieArray as $turnId => $turnArray )
                                            {
                                                if ( $this->y+($this->lsize) > $this->PageBreakTrigger )
                                                {
                                                    $xS == 0;
                                                    $this->addPage();
                                                    $this->putHeaderContent();
                                                }
                                                $totalS += $turnArray->total;
                                                $womenS += $turnArray->women;
                                                $menS += $turnArray->men;
                                                if ( $x == 0 )
                                                {
                                                    $x++;
                                                    $this->cell($this->col['size'][0], $this->lsize, $turnArray->unitId, 1 , null, $this->col['ori'][0]);
                                                    $this->cell($this->col['size'][1], $this->lsize, $turnArray->courseName, 1, null, $this->col['ori'][1] );
                                                    if ( $xS == 0 )
                                                    {
                                                        $this->cell($this->col['size'][2], $this->lsize, $turnArray->serie, 1, null, $this->col['ori'][2] );
                                                        $xS++;
                                                    }
                                                    else
                                                    {
                                                        $this->cell($this->col['size'][2], $this->lsize, null, 1, null, $this->col['ori'][2] );
                                                    }
                                                    $this->cell($this->col['size'][3], $this->lsize, $turnArray->turnDescription, 1, null, $this->col['ori'][3] );
                                                    $this->cell($this->col['size'][4], $this->lsize, $turnArray->women, 1, null, $this->col['ori'][4] );
                                                    $this->cell($this->col['size'][5], $this->lsize, $turnArray->men, 1, null, $this->col['ori'][5] );
                                                    $this->cell($this->col['size'][6], $this->lsize, $turnArray->total, 1, null, $this->col['ori'][6] );
                                                    $this->ln();
                                                }
                                                else
                                                {
                                                    $this->cell($this->col['size'][0], $this->lsize, null, 1 , null, $this->col['ori'][0]);
                                                    $this->cell($this->col['size'][1], $this->lsize, null, 1, null, $this->col['ori'][1] );
                                                    if ( $xS == 0 )
                                                    {
                                                        $this->cell($this->col['size'][2], $this->lsize, $turnArray->serie, 1, null, $this->col['ori'][2] );
                                                        $xS++;
                                                    }
                                                    else
                                                    {
                                                        $this->cell($this->col['size'][2], $this->lsize, null, 1, null, $this->col['ori'][2] );
                                                    }
                                                    $this->cell($this->col['size'][3], $this->lsize, $turnArray->turnDescription, 1, null, $this->col['ori'][3] );
                                                    $this->cell($this->col['size'][4], $this->lsize, $turnArray->women, 1, null, $this->col['ori'][4] );
                                                    $this->cell($this->col['size'][5], $this->lsize, $turnArray->men, 1, null, $this->col['ori'][5] );
                                                    $this->cell($this->col['size'][6], $this->lsize, $turnArray->total, 1, null, $this->col['ori'][6] ); 
                                                    $this->ln();
                                                }
                                            }
                                            if ( $this->y+($this->lsize) > $this->PageBreakTrigger )
                                            {
                                                $xS == 0;
                                                $this->addPage();
                                                $this->putHeaderContent();
                                            }
                                            $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->headerFontSize);
                                            $this->cell($this->col['size'][0], $this->lsize, null, 1 , null, $this->col['ori'][0]);
                                            $this->cell($this->col['size'][1], $this->lsize, null, 1, null, $this->col['ori'][1] );
                                            $this->cell($this->col['size'][2], $this->lsize, _M('Total', 'basic'), 1, null, $this->col['ori'][2] );
                                            $this->cell($this->col['size'][4]+$this->col['size'][3], $this->lsize, $womenS, 1, null, $this->col['ori'][4] );
                                            $this->cell($this->col['size'][5], $this->lsize, $menS, 1, null, $this->col['ori'][5] );
                                            $this->cell($this->col['size'][6], $this->lsize, $totalS, 1, null, $this->col['ori'][6] ); 
                                            $this->ln();
                                            $this->setFont(DEFAULT_REPORT_FONT, '', $this->headerFontSize);
                                            $totalC += $totalS;
                                            $menC += $menS;
                                            $womenC += $womenS;
                                        }
                                    }
                                    $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->headerFontSize);
                                    $this->cell($this->col['size'][0], $this->lsize, null, 1 , null, $this->col['ori'][0]);
                                    $this->cell($this->col['size'][1]+$this->col['size'][2], $this->lsize, _M('Total', 'basic'), 1, null, 'L' );
                                    $this->cell($this->col['size'][4]+$this->col['size'][3], $this->lsize, $womenC, 1, null, $this->col['ori'][4] );
                                    $this->cell($this->col['size'][5], $this->lsize, $menC, 1, null, $this->col['ori'][5] );
                                    $this->cell($this->col['size'][6], $this->lsize, $totalC, 1, null, $this->col['ori'][6] ); 
                                    $this->ln();
                                    $this->setFont(DEFAULT_REPORT_FONT, '', $this->headerFontSize);
                                    $totalU += $totalC;
                                    $menU += $menC;
                                    $womenU += $womenC;
                                }
                            }
                            $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->headerFontSize);
                            $this->cell($this->col['size'][0]+$this->col['size'][1]+$this->col['size'][2], $this->lsize, _M('Total', 'basic'), 1, null, 'L' );
                            $this->cell($this->col['size'][4]+$this->col['size'][3], $this->lsize, $womenU, 1, null, $this->col['ori'][4] );
                            $this->cell($this->col['size'][5], $this->lsize, $menU, 1, null, $this->col['ori'][5] );
                            $this->cell($this->col['size'][6], $this->lsize, $totalU, 1, null, $this->col['ori'][6] ); 
                            $this->ln();
                            $this->setFont(DEFAULT_REPORT_FONT, '', $this->headerFontSize);
                            $total += $totalU;
                            $men += $menU;
                            $women += $womenU;
                        }
                    }
                break;
                case 3:
                $this->putHeaderContent();
                $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                unset($relat['F']);
                unset($relat['M']);
                foreach ( $cunit as $relat )
                {
                    for($x = 0; $x < count($this->col['name']); $x++)
                    {
                        $this->cell($this->col['size'][$x], $this->lsize, $relat[$x], 1, null, $this->col['ori'][$x] );
                    }
                    $relat2['F'] += (int)$relat[2];
                    $relat2['M'] += (int)$relat[3];
                    $relat2['T'] += (int)$relat[4];
                    if ( $this->y+($this->lsize*2) > $this->PageBreakTrigger && $x < count($this->relats) )
                    {
                        $this->addPage();
                        $this->putHeaderContent();
                        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                    }
                    else
                    {
                        $this->ln();
                    }
                }
                $this->cell($this->col['size'][0], $this->lsize, 'TOTAL', 1, null, $this->col['ori'][0] );
                $this->cell($this->col['size'][1], $this->lsize, '', 1, null, $this->col['ori'][0] );
                $this->cell($this->col['size'][2], $this->lsize, $relat2['F'], 1, null, $this->col['ori'][0] );
                $this->cell($this->col['size'][3], $this->lsize, $relat2['M'], 1, null, $this->col['ori'][0] );
                $this->cell($this->col['size'][4], $this->lsize, $relat2['T'], 1, null, $this->col['ori'][0] );
                $this->ln();
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                $sw['men'] = $this->getStringWidth(_M('Men', 'basic')) +8;
                $sw['women'] = $this->getStringWidth(_M('Women', 'basic')) +8;
                $sw['pupils'] = $this->getStringWidth(_M('Pupils', 'academic')) +12;
                $this->mf = $this->psize / array_sum($sw);
                $sw['men'] = ($sw['men']*$this->mf);
                $sw['women'] = ($sw['women']*$this->mf);
                $sw['pupils'] = ($sw['pupils']*$this->mf);
                
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                $this->cell($sw['men']-10, $this->lsize, _M('Men', 'basic') . ': ', 'TBL');
                $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                $this->cell(10, $this->lsize, $relat2['M'],'TBR');
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                $this->cell($sw['women']-10, $this->lsize, _M('Women', 'basic') . ': ',  'TBL');
                $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                $this->cell(10, $this->lsize, $relat2['F'], 'TBR');
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
                $this->cell($sw['pupils']-12, $this->lsize, _M('Pupils', 'academic') . ': ', 'TBL');
                $this->setFont(DEFAULT_REPORT_FONT, '', 9);
                $this->cell(12, $this->lsize, $relat2['T'], 'TBR');
                $this->ln();
                break;
            }
        }
//        $this->setFont(DEFAULT_REPORT_FONT, '', (strlen((string)$colvalue[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$colvalue[$x])/4.5)) );
//        $this->cell($this->colsize[$x], $this->lsize, $colvalue[$x], 1);*/
    }

    public function Header()
    {
        parent::Header();
        $MIOLO = MIOLO::getInstance();
        $this->module = 'academic';
        $this->busCourse = $MIOLO->getBusiness('academic', 'BusCourse');
        $this->busUnit = $MIOLO->getBusiness('basic', 'BusUnit');
        $this->busTurn = $MIOLO->getBusiness('basic', 'BusTurn');

        if ( strlen((string)$this->filters->unitId) > 0 )
        {
            $dataUnit = $this->busUnit->getUnit($this->filters->unitId);
            $unit = $dataUnit->unitId . ' - ' . $dataUnit->description;
        }
        else
        {
            $unit = strtoupper('Todas as Unidade');
        }

        if ( strlen((string)$this->filters->courseId) > 0 )
        {
            $dataCourse = $this->busCourse->getCourse($this->filters->courseId);
            $course = $dataCourse->courseId . ' - ' . $dataCourse->name;
        }
        else
        {
            $course = strtoupper('Todos os Cursos');
        }

        if ( strlen((string)$this->filters->courseId) > 0 )
        {
            $dataCourse = $this->busCourse->getCourse($this->filters->courseId);
            $course = $dataCourse->courseId . ' - ' . $dataCourse->name;
        }
        else
        {
            $course = strtoupper('Todos os Cursos');
        }

        if ( strlen((string)$this->filters->turnId) > 0 )
        {
            $dataTurn = $this->busTurn->getTurn($this->filters->turnId);
            $turn = $dataTurn->turnId . ' - ' . $dataTurn->description;
        }
        else
        {
            $turn = strtoupper('Todos os Turnos');
        }

        $this->setFont(DEFAULT_REPORT_FONT, 'BI', 9);
        $this->setFillColor(232,232,232);
        $this->cell($this->psize, $this->lsize, _M('Filtros', $this->module ), 1, null, 'C', 1);
        $this->ln();
        $this->lsize = 3.5;
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, _M('Date cancellation', $this->module ), 'TLR', null, 'C');
        $this->cell(12,$this->lsize, _M('Unit', $this->module ) . ': ' , 'TL', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $unit, 'T', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5)-13, $this->lsize, _M('Período/série/ano', $this->module ) . ': ', 'TL', null, 'L');
        $this->cell(13, $this->lsize, ( strlen((string)$this->filters->semester) > 0 ? $this->filters->semester : 'Todos' ), 'RT', null, 'L');
        $this->ln();
        $this->cell(($this->psize/5), $this->lsize, _M('Inicial', $this->module ) . ': ' . ( strlen((string)$this->filters->beginDate) > 0 ? $this->filters->beginDate : '    /    /    ' ), 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Course', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $course, '', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'I', 8);
        $this->cell(($this->psize/5), $this->lsize, '', 'LR', null, 'C');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, _M('Final', $this->module ) . ': ' . ( strlen((string)$this->filters->endDate) > 0 ? $this->filters->endDate : '    /    /    ' ), 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Turn', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $turn, null, 'L');
        $this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[1]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, '     Cancelados', 'LR', null, 'L');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, null /*_M('Final', $this->module ) . '    /    /    '*/, 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Class', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, ( strlen((string)$this->filters->classId) > 0 ? ($this->filters->classId . ' - ' . $this->filters->className ) : 'Todas as turmas' ), null, 'L');
        $this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[2]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, '     Desistentes', 'LR', null, 'L');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, null /*_M('Final', $this->module ) . '    /    /    '*/, 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Period', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $this->filters->periodId, null, 'L');
        $this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[3]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, '     Trancados', 'LR', null, 'L');
        $this->ln();
        $this->cell(($this->psize/5), $this->lsize,null /* _M('Final', $this->module ) . '    /    /    '*/, 'BLR', null, 'L');
        $this->cell(25,$this->lsize, _M('Formation level', $this->module ) . ': ' , 'LB', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-25, $this->lsize, 'Todos', 'B', null, 'L');
        $this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[4]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, '     Transferidos', 'LRB', null, 'L');
        $this->ln();
    }

    public function Footer()
    {
        parent::Footer();
    }
}
?>
