<?php

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC011'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

/**
 * PDF extension to generate report
 */
class RptPupilReport extends PDF
{

    public function __construct( $filters )
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        $this->title =strtoupper(_M('Pupil report', $module) );
        $this->useUserInfo = false;
        parent::__construct();
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->aliasNbPages();
        $this->addPage('P', 'mm', 'A4');
        $this->PageBreakTrigger = ($this->h-$this->tMargin);
        $db = $MIOLO->getBusiness('academic', 'BusPupilReport');
        $this->infos = $db->getPupilReport($this->filters);
        $this->generatePDF();
    }

    public function getHeader($header)
    {
        unset ($this->colName, $this->colSize);
        $this->colName[0] = _M('Id', 'basic');
        $this->colName[1] = _M('Pupil', 'academic');
//        $this->colName[2] = _M('Ingression form','academic');
        $this->colName[4] = _M('Neighborhood', 'basic');
        $this->colName[3] = _M('Enroll date', 'academic');
//        $this->colName[4] = _M('Room', 'academic');
//        $this->colName[5] = _M('Released', 'basic');
//        $this->colName[6] = _M('CLOSED', 'academic');
//        $this->colName[11] = _M('Typed', 'academic') . '(s)';
//        $this->colName[12] = _M('Not typed', 'academic') . '(s)';
//        $this->colName[13] = _M('Typed', 'academic') . '(s)';
//        $this->colName[14] = _M('Not typed', 'academic') . '(s)';

        $this->colSize[0] = 10;
//        $this->colSize[2] = 35;
        $this->colSize[3] = 25;
//        $this->colSize[3] = 20;
        $this->colSize[4] = 35;
//        $this->colSize[5] = 14;
//        $this->colSize[6] = 14;
//        $this->colSize[11] = 17;
//        $this->colSize[12] = 17;
//        $this->colSize[13] = 17;
//        $this->colSize[14] = 17;
        $this->colSize[1] = ($this->psize-array_sum($this->colSize));

        $this->colAlign[0] = 'R';
        $this->colAlign[1] = 'L';
//        $this->colAlign[2] = 'L';
        $this->colAlign[3] = 'C';
//        $this->colAlign[3] = 'C';
        $this->colAlign[4] = 'L';
//        $this->colAlign[5] = 'C';
//        $this->colAlign[6] = 'C';
//        $this->colAlign[11] = 'R';
//        $this->colAlign[12] = 'R';
//        $this->colAlign[13] = 'R';
//        $this->colAlign[14] = 'R';

        $fs = 10;
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
        $ok = true;
        while ($ok == true )
        {
            $ok = false;
            foreach ( $this->colSize as $item => $value )
            {
                if ( $this->getStringWidth($this->colName[$item])+3 > $value )
                {
                    $fs -= 0.1;
                    $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
                    $this->fs = $fs;
                    $ok = true;
                }
            }
        }
        $this->setFillColor(230);

        if ( strlen((string)$header) > 0 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'BI', $fs);
            $grau = strtoupper(_M('Ingression form', 'academic') . ':');
            $gsize = $this->getStringWidth($grau) +1;
            $this->cell($gsize, $this->lsize, $grau, 'LTB', null, null, 1);
            $this->setFont(DEFAULT_REPORT_FONT, 'I', $fs);
            $this->cell($this->psize-$gsize, $this->lsize, $header, 'RTB', null, null, 1);
            $this->ln();
        }
        $this->setFillColor(240);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
        foreach($this->colName as $item => $value )
        {
            if ( $item == 11 || $item == 12 || $item == 13 || $item == 14 )
            {
                $this->cell($this->colSize[$item], ($this->lsize/2)+1.5, strtoupper($value), 1, null, 'C', 1);
            }
            else 
            {
                $this->cell($this->colSize[$item], $this->lsize+2, strtoupper($value), 1, null, 'C', 1);
            }
            if ( $item == 6 )
            {
                $y = $this->y;
                $x = $this->x;
                $this->setX($x);
                $this->cell($this->colSize[11]+$this->colSize[12], ($this->lsize/2)+0.5, strtoupper(_M('Notes', 'academic')), 1, null, 'C', 1);
                $this->cell($this->colSize[11]+$this->colSize[12], ($this->lsize/2)+0.5, strtoupper(_M('Content', 'academic') . ' (' . _M('Aula', 'basic') . ')' ), 1, null, 'C', 1);
                $this->setY($y+(($this->lsize/2)+0.5));
                $this->setX($x);
            }
        }
        $this->ln();
    }
    public function generatePDF()
    {
        $y = $this->y;
        $x = 0;
        $oldpupil = '';
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fs);
        if ( count($this->infos) > 0 )
        {
            foreach ( $this->infos as $ln => $pupil )
            {
                
                if ( $this->y+($this->lsize) >= $this->PageBreakTrigger || $x == 0 || $pupil[2] <> $oldpupil[2] )
                {
                    if ( $x != 0 )
                    {
                        $this->addPage();
                    }
                    $this->getHeader($pupil[2]);
                    $this->setFont(DEFAULT_REPORT_FONT, '', $this->fs);
                    $x++;
                }

                if ( $oldpupil[0] != $pupil[0] )
                {
                    foreach ( $this->colName as $item => $value )
                    {
                        $this->cell($this->colSize[$item], $this->lsize, $pupil[$item], 1, null, $this->colAlign[$item]);
                    }
                    $this->ln();
                    $count[$pupil[2]][] ='';
                }
                $oldpupil = $pupil;
                if ( ( $this->infos[$ln][2] <> $this->infos[$ln+1][2] || !isset($this->infos[$ln+1]) ) && $x != 0  )
                {
                    $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->fs);
                    $this->cell($this->psize-$this->colSize[3], $this->lsize, _M('Total', 'academic'), 1, null, 'R');
                    $this->setFont(DEFAULT_REPORT_FONT, 'I', $this->fs);
                    $this->cell($this->colSize[3], $this->lsize, (count($count[$pupil[2]])), 1, null, 'R');
                    $this->ln();
                }
            }
        }
        parent::generatePDF();
    }
}

?>
