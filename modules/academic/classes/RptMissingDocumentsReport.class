<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 25/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'academic';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptMissingDocumentsReport extends PDF
{
    var $module = 'academic';
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusMissingDocumentsReport');

        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->relats = $db->searchMissingDocuments($this->filters);
        $this->title = strtoupper(_M('Relatório de documentos pendentes', $this->module));

        parent::__construct();
        $this->useUserInfo = false;
        $this->aliasNbPages();
        $this->addPage('P', 'mm', 'A4');
        $this->PageBreakTrigger = ($this->h-$this->tMargin);
        if ( count($this->relats) == 0 )
        {
            $this->SetFillColor(255,0,0);
            $this->cell($this->psize, $this->lsize, _M('No data found to process', 'finance'), 1, null, 'C', 1);
            $this->outPut();
            return;
        }

        $this->col['name'][0] = _M('Enroll', 'academic');
        $this->col['name'][1] = _M('Name', 'basic');
        $this->col['name'][2] = _M('Sex', 'basic'); //'Sexo';
        $this->col['name'][3] = _M('Birth', 'academic'); //'Nascimento';
        $this->col['name'][4] = _M('Enroll date', 'academic');
        $this->col['size'][0] = ($this->psize/18)*2;
        $this->col['size'][1] = ($this->psize/18)*11;
        $this->col['size'][2] = ($this->psize/18)*1;
        $this->col['size'][3] = ($this->psize/18)*2;
        $this->col['size'][4] = ($this->psize/18)*2;
        $this->col['ori'][0] = 'C';
        $this->col['ori'][1] = 'L';
        $this->col['ori'][2] = 'C';
        $this->col['ori'][3] = 'C';
        $this->col['ori'][4] = 'C';
        
        $this->generatePDF();
    }

    public function generatePDF()
    {
        $this->module = 'academic';
        $this->putContent();
        PDF::generatePDF();
    }

    public function putHeaderContent()
    {
        $this->setFillColor(232,232,232);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $fs = 8;
        for($x = 0; $x < count($this->col['name']); $x++)
        {
            while ( $this->getStringWidth($this->col['name'][$x])+1 >= $this->col['size'][$x] ) 
            {
                $fs -= 0.1;
                $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
            }
            //$this->cell($this->col['size'][$x], $this->lsize, $this->col['name'][$x], 1, null, 'C', 1 );
        }
        $this->headerFontSize = $fs;
        for($x = 0; $x < count($this->col['name']); $x++)
        {
            $this->cell($this->col['size'][$x], $this->lsize, $this->col['name'][$x], 1, null, 'C', 1 );
        }
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $fs);
    }

    public function putContent()
    {
        //$this->putHeaderContent();
        $this->headerFontSize = 8;
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->setFillColor(232,232,232);
        if ( count($this->relats->units) == 0 || count($this->relats->courses) == 0 || count($this->relats->turns) )
        {
//            $this->SetFillColor(255,0,0);
//            $this->cell($this->psize, $this->lsize, _M('No data found to process', 'finance'), 1, null, 'C', 1);
//            $this->outPut();
//            return;
        }
        asort($this->relats->units);
        asort($this->relats->courses);
        asort($this->relats->turns);
        foreach($this->relats->content as $unit => $arrayUnit )
        {
            foreach ( $arrayUnit as $courseId => $arrayCourse )
            {
                foreach ( $arrayCourse as $turnId => $arrayTurn )
                {
                    foreach ( $arrayTurn as $semester => $arraySemester )
                    {
                        $unitDescription = $this->relats->units[$unit];
                        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                        $psize = $this->getStringWidth(_M('Unit', 'academic') . ': ')+2;
                        $this->cell($psize, $this->lsize, _M('Unit', 'academic') . ': ', 'LTB', null, 'C', 1);
                        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                        $psize += $this->getStringWidth($unitDescription)+2;
                        $this->cell($this->getStringWidth($unitDescription)+2, $this->lsize, $unitDescription, 'TB', null, 'C', 1);
                        $courseName = $this->relats->courses[$courseId];
                        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                        $psize += $this->getStringWidth(_M('Course', 'academic') . ': ')+2;
                        $this->cell($this->getStringWidth(_M('Course', 'academic') . ': ')+2, $this->lsize, _M('Course', 'academic'). ': ', 'TB', null, 'C', 1);
                        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                        $psize += $this->getStringWidth($courseName) + 2;
                        $this->cell($this->getStringWidth($courseName)+2, $this->lsize, $courseName, 'TB', null, 'C', 1);
                        $turnDescription = $this->relats->turns[$turnId];
                        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                        $psize += $this->getStringWidth(_M('Turn', 'basic') . ': ')+2;
                        $this->cell($this->getStringWidth(_M('Turn', 'basic') . ': ')+2, $this->lsize, _M('Turn', 'basic'). ': ', 'TB', null, 'C', 1);
                        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                        $psize += $this->getStringWidth($turnDescription) + 2;
                        $this->cell($this->getStringWidth($turnDescription)+2, $this->lsize, $turnDescription, 'TB', null, 'C', 1); 
                        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                        $psize += $this->getStringWidth(_M('Semester', 'academic') . ': ')+2;
                        $this->cell($this->getStringWidth(_M('Semester', 'academic') . ': ')+2, $this->lsize, _M('Semester', 'academic'). ': ', 'TB', null, 'C', 1);
                        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                        $this->cell($this->psize - $psize, $this->lsize, $semester, 'TBR', null, 'L', 1); 
                        $this->ln();
                        $this->cell($this->psize, 1, null, 'B');
                        $this->ln(2);
                        foreach ( $arraySemester as $personId => $person )
                        {   
                            $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                            $sx = $this->getStringWidth(_M('Name', 'basic') . ': ')+2;
                            $this->cell($sx, $this->lsize, _M('Name', 'basic'). ': ', 'LTB', null, 'C', true);
                            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
                            $this->cell($this->psize - $sx, $this->lsize, $person->person->personId . ' - ' . $person->person->personName, 'TBR', null, 'L', true); 
                            $this->ln();
                            $ps2 = 0;
                            $ad = 0;
                            asort($person->documents);
                            $this->setFont(DEFAULT_REPORT_FONT, '', 7);
                            $y1 = $this->y;
                            $x1 = $this->x;
                            $p = $this->page;
                            foreach ( $person->documents as $documentTypeId => $content )
                            {
                                if ( count($person->documents) == count($this->relats->documents) )
                                {
                                    $this->Rect($this->x, $this->y, $this->psize, $this->lsize);
                                    $this->cell($this->psize, $this->lsize, strtoupper(_M('All documents', 'basic')), null, null, 'L' );
                                    $this->ln();
                                    break;
                                }
                                $ad++;
                                $cs = $this->getStringWidth($this->relats->documents[$documentTypeId]);
                                if ( ($ps2 + $cs) > $this->psize )
                                {
                                    $this->ln();
                                    $this->cell($cs, $this->lsize, $this->relats->documents[$documentTypeId], null, null, 'L' );
                                    $ps2 = 0;
                                }
                                else
                                {
                                    $this->cell($cs, $this->lsize, $this->relats->documents[$documentTypeId], null, null, 'L' );
                                }

                                if ( count($person->documents) > $ad )
                                {
                                    $cs += $this->getStringWidth(', ')+1;
                                    $this->cell( $this->getStringWidth(', '), $this->lsize, ', ', null, null, 'L' );
                                }
                                $ps2 += $cs;
                            }
                            if ( $this->x != $this->lMargin )
                            {
                                $this->ln();
                            }
                            if ( $this->page == $p )
                            {
                                $this->Rect($x1, $y1, $this->psize, $this->y-$y1);
                            }
                        }
                    }
                }
            }
        }
//        $this->setFont(DEFAULT_REPORT_FONT, '', (strlen((string)$colvalue[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$colvalue[$x])/4.5)) );
//        $this->cell($this->colsize[$x], $this->lsize, $colvalue[$x], 1);*/
    }

    public function Header()
    {
        parent::Header();
        $MIOLO = MIOLO::getInstance();
        $this->busCourse = $MIOLO->getBusiness('academic', 'BusCourse');
        $this->busUnit = $MIOLO->getBusiness('basic', 'BusUnit');
        $this->busTurn = $MIOLO->getBusiness('basic', 'BusTurn');

        if ( strlen((string)$this->filters->unitId) > 0 )
        {
            $dataUnit = $this->busUnit->getUnit($this->filters->unitId);
            $unit = $dataUnit->unitId . ' - ' . $dataUnit->description;
        }
        else
        {
            $unit = strtoupper('Todas as Unidade');
        }

        if ( strlen((string)$this->filters->courseId) > 0 )
        {
            $dataCourse = $this->busCourse->getCourse($this->filters->courseId);
            $course = $dataCourse->courseId . ' - ' . $dataCourse->name;
        }
        else
        {
            $course = strtoupper('Todos os Cursos');
        }

        if ( strlen((string)$this->filters->courseId) > 0 )
        {
            $dataCourse = $this->busCourse->getCourse($this->filters->courseId);
            $course = $dataCourse->courseId . ' - ' . $dataCourse->name;
        }
        else
        {
            $course = strtoupper('Todos os Cursos');
        }

        if ( strlen((string)$this->filters->turnId) > 0 )
        {
            $dataTurn = $this->busTurn->getTurn($this->filters->turnId);
            $turn = $dataTurn->turnId . ' - ' . $dataTurn->description;
        }
        else
        {
            $turn = strtoupper('Todos os Turnos');
        }

        $this->setFont(DEFAULT_REPORT_FONT, 'BI', 9);
        $this->setFillColor(232,232,232);
        $this->cell($this->psize, $this->lsize, _M('Filtros', $this->module ), 1, null, 'C', 1);
        $this->ln();
        $this->lsize = 3.5;
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, _M('Enroll date', $this->module ), 'TLR', null, 'C');
        $this->cell(12,$this->lsize, _M('Unit', $this->module ) . ': ' , 'TL', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $unit, 'T', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5)-13, $this->lsize, _M('Período/série/ano', $this->module ) . ': ', 'TL', null, 'L');
        $this->cell(13, $this->lsize, ( strlen((string)$this->filters->semester) > 0 ? $this->filters->semester : 'Todos' ), 'RT', null, 'L');
        $this->ln();
        $this->cell(($this->psize/5), $this->lsize, _M('Inicial', $this->module ) . ': ' . ( strlen((string)$this->filters->beginDate) > 0 ? $this->filters->beginDate : '    /    /    ' ), 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Course', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $course, '', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'I', 8);
        $this->cell(($this->psize/5), $this->lsize, '', 'LR', null, 'C');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, _M('Final', $this->module ) . ': ' . ( strlen((string)$this->filters->endDate) > 0 ? $this->filters->endDate : '    /    /    ' ), 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Turn', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $turn, null, 'L');
        /*$this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[4]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }*/
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        //$this->cell(($this->psize/5), $this->lsize, '     Normais', 'LR', null, 'L');
        $this->cell(($this->psize/5), $this->lsize, '', 'LR', null, 'L');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, null /*_M('Final', $this->module ) . '    /    /    '*/, 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Class', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, ( strlen((string)$this->filters->classId) > 0 ? ($this->filters->classId . ' - ' . $this->filters->className ) : 'Todas as turmas' ), null, 'L');
        /*$this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[1]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }*/
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
//        $this->cell(($this->psize/5), $this->lsize, '     Dependência', 'LR', null, 'L');
        $this->cell(($this->psize/5), $this->lsize, null, 'LR', null, 'L');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, null /*_M('Final', $this->module ) . '    /    /    '*/, 'LR', null, 'L');
        $this->cell(12,$this->lsize, _M('Period', $this->module ) . ': ' , 'L', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-12, $this->lsize, $this->filters->periodId, null, 'L');

        /*$this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[2]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }*/
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        //$this->cell(($this->psize/5), $this->lsize, '     Adaptação', 'LR', null, 'L');
        $this->cell(($this->psize/5), $this->lsize, null, 'LR', null, 'L');
        $this->ln();
        $this->cell(($this->psize/5), $this->lsize,null /* _M('Final', $this->module ) . '    /    /    '*/, 'BLR', null, 'L');
        $this->cell(25,$this->lsize, _M('Formation level', $this->module ) . ': ' , 'LB', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $this->cell(($this->psize-(($this->psize/5)*2))-25, $this->lsize, 'Todos', 'B', null, 'L');
        /*$this->Rect($this->x+1, $this->y, 3, 3);
        if ( strlen((string)$this->filters->enrollSituation[3]) > 0 )
        {
            $this->Line($this->x+1, $this->y, $this->x+4, $this->y+3);
            $this->Line($this->x+4, $this->y, $this->x+1, $this->y+3);
        }*/
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(($this->psize/5), $this->lsize, '', 'LRB', null, 'L');
        $this->ln();
    }
    public function func($value)
    {
        return $value * $this->mf;
    }
    public function Footer()
    {
        parent::Footer();
    }
}
?>
