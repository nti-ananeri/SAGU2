<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 03/07/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'academic';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptEnrollServicesPupilUpdate extends PDF
{
    var $module = 'academic';
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();

        $this->title = strtoupper(_M('Enroll services pupil update', $this->module));
        parent::__construct();
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->useUserInfo = true;
        $this->addPage('P', 'mm', 'A4');
        $this->aliasNbPages();   
        $this->generatePDF();
    }

    public function generatePDF()
    {
        $this->module = 'academic';
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusEnrollServicesPupilUpdate');
        $pupils = $db->getPupils($this->filters);

        $this->colsize[0] = $this->FontSize*2;
        $this->colsize[1] = $this->FontSize*4;
        $this->colsize[2] = $this->FontSize*4;
        $this->colsize[4] = $this->FontSize*3;
  //      $this->colsize[5] = $this->FontSize*3;
        $this->colsize[5] = $this->FontSize*7;
        $this->colsize[6] = $this->FontSize*7;
        $this->colsize[3] = round($this->psize-(array_sum($this->colsize)),2);
  
        $this->colname[0] = 'N.';
        $this->colname[1] = _M('Id', $this->module);
        $this->colname[2] = _M('Contract', $this->module);
        $this->colname[3] = _M('Name', $this->module);
        $this->colname[4] = _M('Course', $this->module);
//        $this->colname[5] = _M('Version', $this->module);
        $this->colname[5] = _M('Turn', $this->module);
        $this->colname[6] = _M('Last modification', $this->module);
        
        $this->putContent();
/*        for($x = 0; $x < count($this->colsize); $x++)
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', (strlen((string)$this->colname[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$this->colname[$x])/4.5)) );
            $this->cell($this->colsize[$x], $this->lsize, $this->colname[$x], 1);
        }*/
        $this->ln();
        $pupils = $db->getPupils($this->filters);
        if ( count($pupils) == 0 ) return;
        $x=0;
        foreach($pupils as $pupil)
        {
            $x++;
            $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
            $this->cell($this->colsize[0], $this->lsize,$x, 1, null, 'R');
            $this->cell($this->colsize[1], $this->lsize, $pupil[0], 1);
            $this->cell($this->colsize[2], $this->lsize, $pupil[1], 1);
            $this->setFont(DEFAULT_REPORT_FONT, '', (strlen((string)$pupil[2])/0.5) <= ceil($this->colsize[3]) ? $this->fontSizeBody : ceil($this->colsize[3]/(strlen((string)$pupil[2])/4.0)) );
            $this->cell($this->colsize[3], $this->lsize, $pupil[2], 1);
            $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
            $this->cell($this->colsize[4], $this->lsize, $pupil[12], 1);
    //        $this->cell($this->colsize[5], $this->lsize, $pupil[13], 1);
            $this->cell($this->colsize[6], $this->lsize, $pupil[14], 1);
            $this->cell($this->colsize[7], $this->lsize, $pupil[11], 1);
            $this->ln();
            $courseX[$pupil[12]][$pupil[14]]++;
            $turnoX[$pupil[14]]++;
            if ( ( $this->y + $this->lsize ) >= $this->PageBreakTrigger && $x < count($pupils) )
            {
                $this->putContent();
                $this->ln();
            }
        }
        $this->addPage();
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->fontSizeBody);
        $this->cell($this->psize, $this->lsize, 'TOTAIS', 1, null, 'C');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        foreach( $courseX as $curso => $turno)
        {
            foreach ( $turno as $item => $value )
            {
                $this->cell($this->psize, $this->lsize, $curso . ' / ' . $item . '    '. $value, null, null, 'R');
                $this->ln();
            }
        }
        $this->ln();
        foreach ($turnoX as $turno => $value)
        {
            $this->cell($this->psize, $this->lsize,  $turno . '    '. $value, null, null, 'R');
            $this->ln();
        }
        $this->ln();
        PDF::generatePDF();
    }

    public function putContent()
    {
        for($x = 0; $x < count($this->colsize); $x++)
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', (strlen((string)$this->colname[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$this->colname[$x])/4.5)) );
            $this->cell($this->colsize[$x], $this->lsize, $this->colname[$x], 1);
        }
    }

    public function Header()
    {
        parent::Header();
    }
    public function Footer()
    {
        parent::Footer();
    }
}
?>
