<?php

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC003'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = 'academic';
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
        
    public function attachedLeafHeader($reportData, $reg=0)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = 'academic';

        $busCompany  = $MIOLO->getBusiness('basic', 'BusCompany');
        $busCourse   = $MIOLO->getBusiness($module, 'BusCourse');
        $busClass    = $MIOLO->getBusiness('academic', 'BusClass');
        $company     = $busCompany->getCompany(DEFAULT_COMPANY_CONF);

        $this->setLineWidth(0.5);
        $this->cell(277, 5, '', 'B', 0);
        $this->ln(6);

        $this->Image(SAGUFile::getPhotoPath($company->personId),250, 13, '', 17, PHOTO_FORMAT);

        //Este if abaixo ira verificar se o curso e seriado
        //e incluira descricao da turma e do curso da turma
        //na pauta
        $isSerial = false;

        if ( is_array($reportData->pupils[$reg]) && (count($reportData->pupils[0]) > 0) )
        {
            if ( in_array($reportData->pupils[0][7], explode(",",SERIAL_ENROLL_TYPE_IDS)) )
            {
                $isSerial = true;
            }
        }

        if ( $isSerial == true )
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
            $this->cell(50, 5, _M('Lessons content', $module), 0, 0);

            $getSerialCourse = $busCourse->getSerialCourse($reportData->pupils[$reg][3], $reportData->pupils[$reg][8], $reportData->pupils[$reg][7], $reportData->pupils[$reg][1]);

            $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);

            if ( $reportData->classId )
            {
                $class = $busClass->getClass($reportData->classId);
                $lenghtString = strlen((string)$class->classId . ' - ' . $class->description);
                $this->cell(175, 5, $class->classId . ' - ' . $class->description, 0, 0, 'C');
            }
            else
            {
                $this->cell(175, 5, ' ', 0, 0, 'C');
            }

            $this->cell(50, 5, _M('Emission date', $module) . ': ' . $reportData->emissionDate, 0, 0);
        }
        else
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
            $this->cell(170, 5, _M('Lessons content', $module), 0, 0);
            $this->setFont(DEFAULT_REPORT_FONT, '', 10);
            $this->cell(50, 5, _M('Emission date', $module) . ': ' . $reportData->emissionDate, 0, 0);
        }

        $this->ln();

        //First data line
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(30, 5, _M('Curricular component', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(170, 5, $reportData->curricularComponent, 0, 0);
        $this->ln();
        
        //Second data line
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(30, 5, _M('Center', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(80, 5, $reportData->center, 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(20, 5, _M('Unit', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(30, 5, $reportData->unit, 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(20, 5, _M('Period', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(20, 5, $reportData->periodId, 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(10, 5, _M('Room', $module) . ':', 0, 0);
        if ( count($reportData->result) == 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            $this->cell(20, 5, $reportData->room, 0, 0);
        }
        elseif ( count($reportData->result) > 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            unset($reportData->room);
            $room = array();
            foreach ( $reportData->result as $reportDataRow )
            {
                if ( !in_array($reportDataRow[8], $room) )
                {
                    $room[] = $reportDataRow[8];
                    $reportData->room .= str_replace(' ', '', $reportDataRow[8]) . ', ';
                }
            }
            $this->cell(20, 5, substr($reportData->room, 0, -2), 0, 0);
        }
        
        $this->ln();

        //Third data line
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(30, 5, _M('Day', $module) . ':', 0, 0);

        if ( count($reportData->result) == 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            $this->cell(80, 5, $reportData->weekDay, 0, 0);
        }
        elseif ( count($reportData->result) > 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            unset($reportData->weekDay);
            $weekDay = array();
            foreach ( $reportData->result as $reportDataRow )
            {
                if ( !in_array($reportDataRow[9], $weekDay) )
                {
                    $weekDay[] = $reportDataRow[9];
                    $reportData->weekDay .= str_replace(' ', '', $reportDataRow[9]) . ', ';
                }
            }
            $this->cell(80, 5, substr($reportData->weekDay, 0, -2), 0, 0);
        }

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(20, 5, _M('Turn', $module) . ':', 0, 0);

        if ( count($reportData->result) == 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            $this->cell(30, 5, $reportData->turn, 0, 0);
        }
        elseif ( count($reportData->result) > 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            unset($reportData->turn);
            $turn = array();
            foreach ( $reportData->result as $reportDataRow )
            {
                if ( !in_array($reportDataRow[5], $turn) )
                {
                    $turn[] = $reportDataRow[5];
                    $reportData->turn .= str_replace(' ', '', $reportDataRow[5]) . ', ';
                }
            }
            $this->cell(30, 5, substr($reportData->turn, 0, -2), 0, 0);
        }

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(20, 5, _M('Total H/L', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(20, 5, $reportData->numberHours, 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        //$this->cell(20, 5, _M('Foreseen H/L', $module) . ':', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(40, 5, '', 0, 0);
        $this->ln();

        //Fourth data line
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
        $this->cell(30, 5, _M('Professor', $module) . ':', 0, 0);

        if ( count($reportData->result) == 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            $this->cell(80, 5, $reportData->professor, 0, 0);
        }
        elseif ( count($reportData->result) > 1 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 8);
            unset($reportData->professor);
            $professor = array();
            foreach ( $reportData->result as $reportDataRow )
            {
                if ( !in_array($reportDataRow[2], $professor) )
                {
                    $professor[] = $reportDataRow[2];
                    $reportData->professor .= str_replace(' ', '', $reportDataRow[2]) . ', ';
                }
            }
            $this->cell(80, 5, substr($reportData->professor, 0, -2), 0, 0);
        }

        //$this->cell(40, 5, '*' . _M('Minimum frequency', $module) . ':', 0, 0);
        //$this->cell(50, 5, $reportData->minimumNumberHours . ' ' . _M('H/L', $module), 0, 0);
        $this->cell(90, 5, '', 0, 0);
        $this->ln();

        $this->cell(265, 5, '', 'B', 0);
        $this->cell(12, 5, $reportData->groupId, 'B', 0);
        $this->ln(6);
        $this->setLineWidth(0.1);   
    }
    
    public function attachedLeafFooter()
    {
        $module = 'academic';
        
        $this->setLineWidth(0.0);
        
        $this->cell(277,5, '', '', 0);
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 9);
        $this->cell(22, 7, _M('Professor', $module) . ' (a)' . ':', 0, 0);
        $this->setLineWidth(0.1);
        $this->cell(50, 5, '', 'B', 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
        $this->cell(20, 5, ' ', 0, 0);
        $this->cell(20, 7, 'Visto:', 0, 0);
        $this->setFont(DEFAULT_REPORT_FONT, '', 9);
        $this->cell(50, 7, _M('Coordenador', $module) . ' (a) Pedagógico' . ':', 0, 0);
        $this->cell(50, 5, '', 'B', 0);
        $this->cell(10, 5, '', 0, 0);
        $this->cell(22, 7, 'Em: ______/________/_________.', 0, 0);
        $this->ln();

    }
    
    public function attachedLeafColumns()
    {
        $module = 'academic';

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
        $this->cell(30, 5, _M('Date', $module), 'LTR', 0);
        $this->cell(247 ,5, _M('Content', $module), 'LTR', 0);
        $this->ln();

    }
    
    public function attachedLeafPupilLine($data)
    {
        $module = 'academic';

        $string = $data->content;

        $this->setLineWidth(0.1);
        $this->setFont(DEFAULT_REPORT_FONT, '', 9);
        $this->cell(30, 15, $data->occurrenceDate, 1, 0, 'C');
        $this->multicell(247 ,15, $string, 1, 'J', 0);
    }
}


/**
 * PDF extension to generate report
 */
class RptAttachedLeaf
{
    var $listSpace;    
    
    public function RptAttachedLeaf($data = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = 'academic';
            
        $business    = $MIOLO->getBusiness($module, 'BusAttendance');
               
        // Generating PDF file
        $pdf = new PDF();
        $pdf->aliasNbPages();
        //$pdf->personName = $rdata->name;
        // First page
        $pdf->setTopMargin(1);

        $reg = 0; 
        if ( count($data->groupId) > 0 )
        {
            foreach ( $data->groupId as $group )
            {
                $scheduleId          = $data->scheduleId;
                $scheduleProfessorId = $data->scheduleProfessorId;

                $this->listSpace = 100;
                
                $pdf->addPage('L', 'mm', 'A4');

                if ( count($group) > 1 )
                {
                    list (  $groupId,
                            $name,
                            $weekDayId,
                            $unitId,
                            $turnId,
                            $scheduleId
                            ) = $group;
                }
                else
                {
                    $groupId = $group[0];
                }

                $reportData  = $business->getGroupData($groupId, $data->scheduleId, $data->scheduleProfessorId);

                $reportData->emissionDate = $data->emissionDate;
                $reportData->pupils = $business->listGroupEnrolledPupils($groupId);

                $pdf->attachedLeafHeader($reportData, $reg);

                $pdf->attachedLeafColumns();

                $businessFrequenceEnroll = $MIOLO->getBusiness('academic', 'BusFrequenceEnroll');

                $dates = $businessFrequenceEnroll->getFrequenceDatesFromAcademicCalendar($data->scheduleId, $groupId, $reportData->periodId, $data->scheduleProfessorId);
/*
                $turnId = $business->getScheduleProfessorTurnId($data->scheduleProfessorId, $data->scheduleId);
*/
                for( $x = 0; $x < count($dates); $x++)
                {
                    list($y,$m,$d) = explode('-',$dates[$x][0]);
                    $turnId           = $dates[$x][8];
                    $data->scheduleId = $dates[$x][9];

                    $day = $businessFrequenceEnroll->getFrquenceContent($data->scheduleId,  $d . '/' . $m . '/' . $y, $turnId);

                    $day->occurrenceDate = strlen((string)$day->occurrenceDate)>0 ? $day->occurrenceDate : $d . '/' . $m . '/' . $y;
                    $pdf->attachedLeafPupilLine($day);
                }

                $pdf->attachedLeafFooter();
                $reg++;
            }
        }
        $pdf->close();
        $pdf->output();
    }
}

?>
