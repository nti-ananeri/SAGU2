<?php

define('REPORT_ID', 'ACD04'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

/**
 * class PDF extends FPDF
{
    var $type = 0;
    
    // Defines the footer for this report
     
    public function Footer()
    {
    }

    
    // Defines the header for this report
    
    public function Header()
    {
    }
}
 */


/**
 * PDF extension to generate report
 */
class RptBoletim extends PDF
{
/**
     * Method to generate the report
     */
    /*public function RptBoletim($data = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $header = $this->getHeader($data);
//vd($header->course);
        // HEADER 
        $this = new PDF();
        $this->aliasNbPages();
        $this->setTopMargin(15);
        //$this->setFillColor(232);
        //$this->SetLineWidth('0.2mm');
        $this->addPage('L', 'mm', 'A4');
        $this->ln();
    }
    */
    
	var $module = 'academic';
    public function __construct($data = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        //$rdata  = $this->getReportData($data);
        
        //$rdata->unitId = $rdata->companyId;
        
        $this->title = strtoupper(_M('Boletim', $this->module));
        parent::__construct($data);
    	foreach($data as $item => $value)
        {
            $this->data->{$item} = $value;
        }
        $this->defaultFontSize = 8;        
        $this->useUserInfo = true;
        $this->addPage('P', 'mm', 'A4');
        $this->lsize = 3.5;
        $this->aliasNbPages();
        $this->putHeaderLine($data);
        $this->generateContent($data);
        $this->outPut();
    }
    
	public function putHeaderLine($data)
    {       
        $this->putInfos();
    }

    /**
     * Get report header information
     */   
    
	public function putInfos()
    {
        $this->fontSizeBody = $this->fontSizeBody;
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7,$this->lsize,  _M('Pupil','academic'). ':', 'LT', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*6.5, $this->lsize, $this->data->personName, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0,$this->lsize,  _M('Serie','academic'). ':', 'T', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        if ( strlen((string)$this->data->periodId) == 0 )
        {
            $periodIds = _M('All', 'academic');
        }
        else
        {
            $periodIds = $this->data->periodId;
        }
        $this->cell(($this->psize/12)*1.2, $this->lsize, $periodIds, 'T', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.6, $this->lsize, _M('Person id', 'basic') .':', 'T', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1, $this->lsize,   $this->data->personId, 'RT', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7,$this->lsize,  _M('Course','academic'). ':', 'LB',null,  'R');
        if(strlen((string)$this->data->courseName) > 25 )
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody-1);
        }
        else
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        }
        $courseName = explode(" - ", $this->data->courseName);
        $this->cell(($this->psize/12)*3.5, $this->lsize, $courseName[0] , 'B');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Class', 'academic') .':', 'B');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4, $this->lsize,   $this->data->classId, 'B');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1, $this->lsize, _M('Period', 'academic') .':', 'B');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.1, $this->lsize,   $this->data->serie, 'B', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Turn', 'basic') .':', 'B');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.9, $this->lsize,   $this->data->turnDescription, 'B');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1, $this->lsize, _M('Emission date', 'academic') .':', 'B', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1, $this->lsize,   date('d/m/Y'), 'RB', null, 'R');
        $this->ln();
        $this->fontSizeBody = $this->fontSizeBody-1;
        //        $this->putBoletimNotes();
        //        $this->putHeaderBoletim();
    }

    /**
     * Get report body information
     */
    private function getBody($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Enrolled curricular components
        $businessBoletim = $MIOLO->getBusiness('academic', 'BusBoletim');
        $groups          = $businessBoletim->getGroups($data->contractId, $data->learningPeriodId);

        //Degrees
        $degrees         = $businessBoletim->getDegrees($data->learningPeriodId);

        if ( count($groups) > 0 )
        {
            $x = 0;
            
            foreach ( $groups as $group )
            {
                list ( $enrollId,
                       $groupId,
                       $curriculumId,
                       $curricularComponentId,
                       $curricularComponentVersion,
                       $curricularComponentName,
                       $semester,
                       $statusId,
                       $statusDescription,
                       $note,
                       $examNote,
                       $finalNote,
                       $frequency ) = $group;

                $resData[$x]['enrollId']                   = $enrollId;
                $resData[$x]['groupId']                    = $groupId;
                $resData[$x]['curriculumId']               = $curriculumId;
                $resData[$x]['curricularComponentId']      = $curricularComponentId;
                $resData[$x]['curricularComponentVersion'] = $curricularComponentVersion;
                $resData[$x]['curricularComponentName']    = $curricularComponentName;
                $resData[$x]['semester']                   = $semester;
                $resData[$x]['statusId']                   = $statusId;
                $resData[$x]['statusDescription']          = $statusDescription;
                $resData[$x]['note']                       = $note;
                $resData[$x]['examNote']                   = $examNote;
                $resData[$x]['finalNote']                  = $finalNote;
                $resData[$x]['frequency']                  = $frequency;

                //notes
                if ( count($degrees)>0 )
                {
                    foreach ( $degrees as $degree )
                    {
                        list ( $degreeId,
                               $degreeDescription ) = $degree;

                        $resData[$x]['degree'][$degreeId]['description'] = $degreeDescription;

                        $note = $businessBoletim->getDegreeEnroll($enrollId, $degreeId);

                        $resData[$x]['degree'][$degreeId]['note'] = $note;
                    }
                }

                $x++;
            }
        }

        return $resData;
    }

    public function generateContent($data)
    {        

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 6);

        /* BODY */
        $body = $this->getBody($data);

        if ( count($body)>0 )
        {
            //imprime o fundo das disciplinas e notas
            $cont = 10;
            foreach ( $body as $key => $row )
            {
                $cont += 10;
            }
            //$this->setFillColor(232);
            //$this->SetLineWidth('0.2mm');
            $this->cell(275, $cont, '', null, 0, 'C', 0);
            $this->ln();

            $this->setFont(DEFAULT_REPORT_FONT, 'B', 6);
            $this->multiCell(60, (-1)*$cont, '');
            $this->ln(2);

            //Titulo dos dados 
            $this->cell(60, 5, _M('Curricular component', 'academic'), 1);
            if(count($body[0]['degree']) > 0 )
            {
                foreach ( $body[0]['degree'] as $degree )
                {
                   // $this->cell(15, 5, $degree['description'], 1);
                   $this->cell(8, 5,  substr($degree['description'],0 , 5), 'TBR',null,  'C');
                }
            }

            $this->cell(15, 5, _M('Average', 'academic')     ,1, null, 'C');
            $this->cell(15, 5, _M('Prova Final', 'academic') ,1, null, 'C');
            $this->cell(15, 5, _M('Média Final', 'academic') ,1, null, 'C');
            $this->cell(15, 5, _M('Frequency', 'academic')   ,1, null, 'C');
            $this->MultiCell(25, 5, _M('Status', 'academic') ,1, 'L', false);

            //Colocando as informações do aluno
            foreach ( $body as $key => $row )
            {
                $this->setFont(DEFAULT_REPORT_FONT, '', 6);
                $this->MultiCell(60, 5, $row['curricularComponentName'], 1);
                $this->setY($this->y-5);
                $this->setX($this->x+60);
                if( count($row['degree']) > 0 )
                {
                    foreach ( $row['degree'] as $degree )
                    {
                        $this->cell(8, 5, ( $degree['note'] == '0' || strlen((string)$degree['note']) == 0 ) ? '-' : $degree['note'], 1, null, 'C');
                    }
                }

                $this->cell(15, 5, ( $row['note'] == '0' || strlen((string)$row['note']) == 0 ) ? '-' : $row['note'], 1, null, 'C');
                $this->cell(15, 5, ( $row['examNote'] == '0' || strlen((string)$row['examNote']) == 0 ) ? '-' : $row['examNote'], 1, null, 'C');
                $this->cell(15, 5, ( $row['finalNote'] == '0' || strlen((string)$row['finalNote']) == 0 ) ? '-' : $row['finalNote'], 1, null, 'C');
                $this->cell(15, 5, ( $row['frequency'] == '0' || strlen((string)$row['frequency']) == 0 )? '-' : $row['frequency'] . ' H/A', 1, null, 'C');
                $this->MultiCell(25, 5, $row['statusDescription'], 1, 'L', false);
            }
        }
        $this->ln(2);

        $this->close();
        $this->output();
    }
}

?>
