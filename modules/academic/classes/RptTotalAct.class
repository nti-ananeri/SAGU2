<?php

/**
 * Default defines
 * To report identification
 */
define('REPORT_ID', 'AC004');
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
define('LINHA', 8);


$MIOLO = MIOLO::getInstance();
$module = 'academic';
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
	var $type = 0;
	var $MinHours =0;

	public function totalActHeader($reportData, $reg=0, $degreeId=null)
	{
		$MIOLO       = MIOLO::getInstance();
		$module      = 'academic';

		$busCompany  = $MIOLO->getBusiness('basic', 'BusCompany');
		$busCourse   = $MIOLO->getBusiness($module, 'BusCourse');
		$busClass    = $MIOLO->getBusiness('academic', 'BusClass');
		$company     = $busCompany->getCompany(DEFAULT_COMPANY_CONF);

		$this->setLineWidth(0.5);
		$this->cell(277, 5, '', 'B', 0);
		$this->ln(6);

		$this->Image(SAGUFile::getPhotoPath($company->personId),250, 13, '', 17, PHOTO_FORMAT);

		//Este if abaixo ira verificar se o curso e seriado
		//e incluira descricao da turma e do curso da turma
		//na pauta
		$isSerial = false;

		if ( is_array($reportData->pupils[$reg]) && (count($reportData->pupils[0]) > 0) )
		{
			if ( in_array($reportData->pupils[0][7], explode(",",SERIAL_ENROLL_TYPE_IDS)) )
			{
				$isSerial = true;
			}
		}

		if ( $degreeId )
		{
			$this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
			$this->cell(50, 5, _M('Avaliantion act', $module), 0, 0);
		}
		else
		{
			$this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
			$this->cell(50, 5, _M('Examination act', $module), 0, 0);
		}

		if ( $isSerial == true )
		{
			$getSerialCourse = $busCourse->getSerialCourse($reportData->pupils[$reg][3], $reportData->pupils[$reg][8], $reportData->pupils[$reg][7], $reportData->pupils[$reg][1]);

			$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);

			if ( $reportData->classId )
			{
				$class = $busClass->getClass($reportData->classId);
				$lenghtString = strlen((string)$class->classId . ' - ' . $class->description);
				$this->cell(175, 5, $class->classId . ' - ' . $class->description, 0, 0, 'C');
			}
			else
			{
				$this->cell(175, 5, ' ', 0, 0, 'C');
			}

			$this->cell(50, 5, _M('Emission date', $module) . ': ' . $reportData->emissionDate, 0, 0);
		}
		else
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 10);
			$this->cell(50, 5, _M('Emission date', $module) . ': ' . $reportData->emissionDate, 0, 0);
		}

		$this->ln();

		//First data line
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(30, 5, _M('Curricular component', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(170, 5, $reportData->curricularComponent, 0, 0);
		$this->ln();

		//Second data line
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(30, 5, _M('Center', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(80, 5, $reportData->center, 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(20, 5, _M('Unit', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(30, 5, $reportData->unit, 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(20, 5, _M('Period', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(20, 5, $reportData->periodId, 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(10, 5, _M('Room', $module) . ':', 0, 0);
		if ( count($reportData->result) == 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			$this->cell(20, 5, $reportData->room, 0, 0);
		}
		elseif ( count($reportData->result) > 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			unset($reportData->room);
			$room = array();
			foreach ( $reportData->result as $reportDataRow )
			{
				if ( !in_array($reportDataRow[8], $room) )
				{
					$room[] = $reportDataRow[8];
					$reportData->room .= str_replace(' ', '', $reportDataRow[8]) . ', ';
				}
			}
			$this->cell(20, 5, substr($reportData->room, 0, -2), 0, 0);
		}

		$this->ln();

		//Third data line
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(30, 5, _M('Day', $module) . ':', 0, 0);

		if ( count($reportData->result) == 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			$this->cell(80, 5, $reportData->weekDay, 0, 0);
		}
		elseif ( count($reportData->result) > 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			unset($reportData->weekDay);
			$weekDay = array();
			foreach ( $reportData->result as $reportDataRow )
			{
				if ( !in_array($reportDataRow[9], $weekDay) )
				{
					$weekDay[] = $reportDataRow[9];
					$reportData->weekDay .= str_replace(' ', '', $reportDataRow[9]) . ', ';
				}
			}
			$this->cell(80, 5, substr($reportData->weekDay, 0, -2), 0, 0);
		}

		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(20, 5, _M('Turn', $module) . ':', 0, 0);

		if ( count($reportData->result) == 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			$this->cell(30, 5, $reportData->turn, 0, 0);
		}
		elseif ( count($reportData->result) > 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			unset($reportData->turn);
			$turn = array();
			foreach ( $reportData->result as $reportDataRow )
			{
				if ( !in_array($reportDataRow[5], $turn) )
				{
					$turn[] = $reportDataRow[5];
					$reportData->turn .= str_replace(' ', '', $reportDataRow[5]) . ', ';
				}
			}
			$this->cell(30, 5, substr($reportData->turn, 0, -2), 0, 0);
		}

		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(20, 5, _M('Total H/L', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(20, 5, $reportData->numberHours, 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		//$this->cell(20, 5, _M('Foreseen H/L', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		$this->cell(40, 5, '', 0, 0);
		$this->ln();

		//Fourth data line
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
		$this->cell(30, 5, _M('Professor', $module) . ':', 0, 0);

		if ( count($reportData->result) == 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			$this->cell(80, 5, $reportData->professor, 0, 0);
		}
		elseif ( count($reportData->result) > 1 )
		{
			$this->setFont(DEFAULT_REPORT_FONT, '', 8);
			unset($reportData->professor);
			$professor = array();
			foreach ( $reportData->result as $reportDataRow )
			{
				if ( !in_array($reportDataRow[2], $professor) )
				{
					$professor[] = $reportDataRow[2];
					$reportData->professor .= $reportDataRow[2] . ', '; //str_replace(' ', '', $reportDataRow[2]) . ', ';
				}
			}
			$this->cell(80, 5, substr($reportData->professor, 0, -2), 0, 0);
		}

		$this->cell(40, 5, '*' . _M('Minimum frequency', $module) . ':', 0, 0);
		$this->cell(50, 5, $reportData->minimumNumberHours . ' ' . _M('H/L', $module), 0, 0);
		$this->cell(90, 5, '', 0, 0);
		$this->ln();
		
		$this->MinHours = $reportData->minimumNumberHours;

		$this->cell(265, 5, '', 'B', 0);
		$this->cell(12, 5, $reportData->groupId, 'B', 0);
		$this->ln(6);
		$this->setLineWidth(0.1);
	}

	public function totalActFooter()
	{
		$module = 'academic';
		$MIOLO  = MIOLO::getInstance();

		$businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
		$company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

		$businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
		$legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

		$businessCity = $MIOLO->getBusiness('basic', 'BusCity');
		$city         = $businessCity->getCity($legalPerson->cityId);

		$this->setLineWidth(0.5);

		$this->cell(277,5, '', 'B', 0);
		$this->ln();
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
		$this->cell(35, 7, _M('And, to consist, I write the present lesson', $module) . ':', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 9);
		$this->cell(110, 7, '', 0, 0);
		$this->cell(85, 7, '*: ' . _M('Locking as process directed by Protocol', $module) . '.', 0, 0);
		$this->ln();

		$this->setFont(DEFAULT_REPORT_FONT, '', 9);
		$this->cell(62, 7, _M('@1, on', $module, SAGU::getCapitulatetString($city->name)) . ' ____ ' . _M('of', $module) . ' _____________ ' . _M('of', $module) .  ' 20__' . '.', 0, 0);
		$this->setLineWidth(0.1);
		$this->ln();
		 
		$this->setFont(DEFAULT_REPORT_FONT, '', 9);
		$this->cell(17, 12, _M('Professor', $module) . ':', 0, 0);
		$this->setLineWidth(0.1);
		$this->cell(45, 7, '', 'B', 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 9);
		$this->cell(83, 7, '', 0, 0);
		$this->cell(42, 12, _M('Received in the secretary in', $module) . ': ', 0, 0);
		$this->cell(25, 12, '___/___/_____', 0);
		$this->cell(8, 7, '', 0, 0);
		$this->setFont(DEFAULT_REPORT_FONT, '', 9);
		$this->cell(20, 12, _M('Viewed', $module) . ': ', 0, 0);
		$this->setLineWidth(0.1);
		$this->cell(30, 7, '', 'B', 0);
		$this->ln();
		$this->setLineWidth(0.5);
		$this->cell(277, 4, '', 'B', 0);
		$this->setLineWidth(0.1);
	}

	public function totalActColumns($degreeId=null, $degreeDescription=null, $degreeQualityId = null, $degrees=null)
	{
		$module = 'academic';

		$this->setLineWidth(0.1);

		$this->setFont(DEFAULT_REPORT_FONT, 'B', 9);
		$this->SetFillColor(240,240,240);
		$this->cell(5, 5, '#', 'LR', 0, 'C');
		$this->cell(10, 5, _M('Cod', $module), 'LR', 0, 'C');
		$this->cell(40 ,5, _M('Name', $module), 'LR', 0, 'C');
		$this->cell(10, 5, _M('Course', $module), 'LR', 0, 'C');
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 7);
		//echo '<pre>';print_r($degrees);
		foreach ( $degrees as $degree )
		{
			$degreeId          = $degree[0];
			$degreeDescription = $degree[6];
			$degreeNumber      = $degree[9];
			$degreeQualityId   = $degree[17];
			if(!($degreeNumber % 2 == 0))
			{
				$this->cell(8, 5, substr($degreeDescription,0,5), 'LR', 0,'C',1);
			}
			else
			{
				$this->cell(8, 5, _M('Qual.', $module), 'LR', 0,'C',1);
				$this->cell(8, 5, _M('Total', $module), 'LR', 0,'C',1);
				$this->cell(24, 5, 'Visto Aluno', 'LR', 0,'C');
			}
		}

		$this->cell(8, 5, _M('Média', $module), 'LR', 0,'C',1);
		$this->cell(14, 5, _M('Prova Final', $module), 'LR', 0,'C',1);
		$this->cell(14, 5, _M('Média Final', $module), 'LR', 0,'C',1);
		$this->cell(8, 5, _M('Faltas', $module), 'LR', 0,'C',1);
		$this->cell(24, 5, 'Visto Aluno', 'LR', 0,'C');
		 

		$this->ln();
	}

	public function totalActPupilLine($count, $personId, $personName, $courseId, $dateCancellation = null, $enrollId=null, $degreeId=null, $degreeQualityId=null, $degrees=null)
	{
		$linha = LINHA;
		$module = 'academic';
		$MIOLO  = MIOLO::getInstance();

		$this->setLineWidth(0.1);
		$this->setFont(DEFAULT_REPORT_FONT, '', 7);
		$this->SetFillColor(240,240,240);
		$this->cell(5, $linha, $count, 1, 0, 'C');
		$this->cell(10, $linha, $personId, 1, 0, 'C');

		$x = $this->GetX();
		$y = $this->GetY();
		$this->cell(40, $linha, '', 1, 0, 'C');
		$this->SetXY($x, $y);
		$this->MultiCell(40,$linha/3, $personName, 0, 'L',0);
		$this->SetXY($x+40, $y);
		$this->Cell(10, $linha, $courseId, 1, 0, 'C');

		//$busDegrees = $MIOLO->getBusiness('academic', 'BusDegree');
		//$degrees    = $busDegrees->searchDegree($filter);

		$total = 0;
		//echo '<pre>'; print_r($degrees);
		foreach ( $degrees as $degree )
		{
			$degreeId          = $degree[0];
			$degreeDescription = $degree[6];
			$degreeNumber      = $degree[9];

			//pega a nota parcial
			$busDegreeEnroll = $MIOLO->getBusiness('academic', 'BusDegreeEnroll');
			$notes           = $busDegreeEnroll->getDegreeEnroll($degreeId, $enrollId);
			//echo '<pre>'; print_r($notes); die();
			if($notes->note !='--')
			{
				if(!($degreeNumber % 2 == 0))
				{
					$this->cell(8, $linha, $notes->note != '' ? number_format($notes->note,2,',','.') : '', 1, 0, 'C',1);
					$total = $total + $notes->note;
				}
				else
				{
					$total = $total + $notes->note;
					$this->cell(8, $linha, $notes->note != '' ? number_format($notes->note,2,',','.') : '', 1, 0, 'C',1);
					$this->cell(8, $linha, $total       != '' ? number_format($total,2,',','.')       : '', 1, 0, 'C',1);
					$this->cell(24, $linha, ' ', 1, 0,'C');
					$total = 0;
				}
			}
			else
			{
				$this->cell(8, $linha, $notes->note, 1, 0, 'C',1);
				if(($degreeNumber % 2 == 0))
				{
					$this->cell(8, $linha, '--', 1, 0, 'C',1);
					$this->cell(24, $linha, ' ', 1, 0,'C');
				}
			}
		}
		//pega a média final
		$busEnroll = $MIOLO->getBusiness('academic', 'BusEnroll');
		$notes     = $busEnroll->getEnroll($enrollId);
		$groupIdFreq   = $notes->groupId;
		if($notes->note != '--')
		{
			$this->cell(8, $linha, $notes->note != '' ? number_format($notes->note,2,',','.') : '', 1, 0, 'C',1);
		}

		if($notes->examNote != '--')
		{
			$this->cell(14, $linha, $notes->examNote != '' ? number_format($notes->examNote,2,',','.') : '', 1, 0, 'C',1);
		}

		if($notes->finalNote != '--')
		{
			$this->cell(14, $linha, $notes->finalNote != '' ? number_format($notes->finalNote,2,',','.') : '', 1, 0, 'C',1);
		}

		if ($dateCancellation == null)
		{
			//pega a frequencia

			$busFrequenceEnroll = $MIOLO->getBusiness('academic', 'BusFrequenceEnroll');
			//$frequencies      = $busFrequenceEnroll->getTotalFrquenceEnroll($enrollId, $degreeId);
			//$absencies        = $busFrequenceEnroll->getTotalAbsenceEnroll($enrollId, $degreeId);
			$frequencies        = $busFrequenceEnroll->verifyEnrollAbsence($enrollId, $groupIdFreq);
			 
			$this->cell(8, $linha, $frequencies, 1, 0, 'C',1);
			$this->cell(24, $linha, ' ', 1, 0,'C');
		}
		else
		{
			$this->cell(8, $linha, '', 1, 0, 'C',1);
			$this->cell(24, $linha, '', 1, 0,'C');
		}

		if ($dateCancellation != null)
		{
			$mx = $this->GetX();
			$my = $this->GetY();
			$this->setXY($x, $y+2);
			$this->setFont(DEFAULT_REPORT_FONT, '', 6);
			$this->cell(40, $linha, _M('Locked in', $module) . ' ' . $dateCancellation, 0, 0, 'R');
			$this->setXY($mx, $my);
		}
		else if ($frequencies >= $this->MinHours)
		{
			 
			$mx = $this->GetX();
			$my = $this->GetY();
			$this->setXY($x, $y+2);
			$this->setFont(DEFAULT_REPORT_FONT, '', 6);
			$this->SetTextColor(255,0,0);
			$this->cell(40, $linha, _M('Atencao: FALTAS EM EXCESSO!', $module), 0, 0, 'R');
			$this->SetTextColor(0,0,0);
			$this->setXY($mx, $my);
		}

		$this->ln();
	}
}


/**
 * PDF extension to generate report
 */
class RptTotalAct
{
	var $listSpace;

	public function RptTotalAct($data = null)
	{
		$MIOLO       = MIOLO::getInstance();
		$module      = 'academic';

		$business    = $MIOLO->getBusiness('academic', 'BusAttendance');
		 
		// Generating PDF file
		$pdf = new PDF('P','mm','A4');
		$pdf->aliasNbPages();
		//$pdf->personName = $rdata->name;
		// First page
		$pdf->setTopMargin(1);

		/* ISSO AQUI É PARA AS MEDIAS (GRAUS) DO SEMESTRE */
		$reg = 0;
		if (count($data->groupId) > 0)
		{
			foreach ($data->groupId as $group)
			{
				$scheduleId          = $data->scheduleId;
				$scheduleProfessorId = $data->scheduleProfessorId;

				if ( count($group) > 1 )
				{
					list (  $groupId,
					$name,
					$weekDayId,
					$unitId,
					$turnId,
					$scheduleId
					) = $group;
				}
				else
				{
					$groupId = $group[0];
				}

				$reportData  = $business->getGroupData($groupId, $data->scheduleId, $data->scheduleProfessorId);
				$reportData->emissionDate = $data->emissionDate;
				$reportData->pupils       = $business->listGroupEnrolledPupils($groupId);

				$filter->learningPeriodId = $reportData->learningPeriodId;
				$busDegrees = $MIOLO->getBusiness('academic', 'BusDegree');
				$degrees    = $busDegrees->searchDegree($filter);

				//aqui tem que ter um foreach dos graus
				if ( count($degrees) )
				{
					$pdf->addPage('L', 'mm', 'A4');
					$pdf->totalActHeader($reportData, $reg, $degreeId, $degrees);
					$pdf->totalActColumns($degreeId, $degreeDescription, $degreeQualityId,$degrees);
					$this->listSpace = 14*LINHA;

					//Pupils listing
					if ( count($reportData->pupils) > 0)
					{
						$count = 1;
						$reg2  = 0;

						foreach ($reportData->pupils as $pupil)
						{
							list ($enrollId,
							$personId,
							$personName,
							$courseId,
							$statusId,
							$dateCancellation) = $pupil;

							if ($this->listSpace < LINHA)
							{
								$pdf->totalActFooter();
								$pdf->addPage('L', 'mm', 'A4');
								$pdf->totalActHeader($reportData, $reg2, $degreeId);
								$pdf->totalActColumns($degreeId, $degreeDescription,$degreeQualityId,$degrees);
								$this->listSpace = 14*LINHA;
							}

							if ($statusId == ENROLL_STATUS_CANCELLED ||
							$statusId == ENROLL_STATUS_DESISTING )
							{
								$pdf->totalActPupilLine('*', $personId, $personName, $courseId, $dateCancellation, $enrollId, $degreeId, null,$degrees);
							}
							else
							{
								$pdf->totalActPupilLine($count, $personId, $personName, $courseId, null, $enrollId, $degreeId, $degreeQualityId,$degrees);
								$count++;
							}
							$this->listSpace = $this->listSpace - LINHA;
							$reg2++;
						}
					}
					$pdf->totalActFooter();
				}
			}
			$reg++;
		}
		$pdf->close();
		$pdf->output();
	}
}

?>
