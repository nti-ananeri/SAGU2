<?php
set_time_limit(0);        
$MIOLO  = MIOLO::getInstance();
define('REPORT_ID', 'Contrato de Adesão Para Prestação de Serviços Educacionais'); 
$module = 'academic';
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptContractTechnicanDocument extends PDF
{
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();
//        $this->title = strtoupper(REPORT_ID)." - ". strtoupper(_M('Period', 'academic')).": ". (strlen((string)$filters->periodId) > 0 ? $filters->periodId : CURRENT_PERIOD_ID) ;
        $this->title = strtoupper(REPORT_ID);
        parent::__construct();
        $this->useUserInfo = false;
        $this->AddPage('P', 'mm', 'A4');
        $this->aliasNbPages();
        $this->generatePDF($filters);
    }
	
    public function generatePDF($data)
    {
        $this->generateContent($data);
        PDF::generatePDF();
    }

    public function Header()
    {
        parent::Header();
    }
    public function Footer()
    {
        parent::Footer();
    }
    private function replaceText($rdata)
    {
        $parcelValue = $rdata->contract->courseValue/$rdata->contract->parcelsNumber;
        $courseValue = $rdata->contract->courseValue;
        $enrollValue = $rdata->contract->enrollValue;
        $courseTotalNumberHours = $rdata->contract->courseTotalNumberHours;
        
        $procurar[] = '$CURDAY';
        $substituir[] = date('d');

        $procurar[] = '$CURMONTHEXT';
        $substituir[] =  _M(date('F'), 'academic');

        $procurar[] = '$CURMONTH';
        $substituir[] = date('m');

        $procurar[] = '$CURYEAR';
        $substituir[] =  date('Y');

        $procurar[] = '$PERIOD';
        $substituir[] =  CURRENT_PERIOD_ID;
        
        $procurar[] = '$LEGALPERSON_CNPJ';
        $substituir[] =   $this->pdfInfo->legalPerson->cnpj;

        $procurar[] = '$LEGALPERSON_ADDRESS';
        $substituir[] =   $this->pdfInfo->legalPersonAddress;

        $procurar[] = '$LEGALPERSON_NAME';
        $substituir[] =   $this->pdfInfo->legalPersonName;

        $procurar[] = '$LEGALPERSON_SHORTNAME';
        $substituir[] =   $this->pdfInfo->legalPerson->shortName;

        $procurar[] = '$COMPANY_NAME';
        $substituir[] =   $this->pdfInfo->company->name;

        $procurar[] = '$COMPANY_SHORTNAME';
        $substituir[] =   $this->pdfInfo->company->acronym;

        $procurar[] = '$MATURITYDAY_EXTENSIVE';
        $substituir[] =   strtolower(SAGU::returnExtenseNumber($rdata->contract->maturityDay));

        $procurar[] = '$MATURITYDAY';
        $substituir[] =   $rdata->contract->maturityDay;
        
        if ( $rdata->policy->isDiscountInPercent )
        {
            $procurar[] = '$POLICY_DISCOUNT_VALUE_EXTENSIVE';
            $substituir[] =    strtolower(SAGU::returnExtenseNumber($rdata->policy->discount)) . ' por cento';
            $procurar[] = '$POLICY_DISCOUNT_VALUE';
            $substituir[] =   $rdata->policy->discount . ' %';
        }
        else
        {
            $procurar[] = '$POLICY_DISCOUNT_VALUE_EXTENSIVE';
            $substituir[] =    strtolower(SAGU::returnExtenseNumber($rdata->policy->discount)) . ' REAIS';
            $procurar[] = '$POLICY_DISCOUNT_VALUE';
            $substituir[] =   'R$ ' . $rdata->policy->discount;
        }

        $procurar[] = '$POLICY_DAYS_TO_DISCOUNT_EXTENSIVE';
        $substituir[] =   strtolower(SAGU::extensive($rdata->contract->maturityDay -($rdata->policy->daysToDiscount)));

        $procurar[] = '$POLICY_DAYS_TO_DISCOUNT';
        $substituir[] =   $rdata->contract->maturityDay -($rdata->policy->daysToDiscount);

        $procurar[] = '$PARCELS_NUMBER';
        $substituir[] =   $rdata->contract->parcelsNumber; 

        $procurar[] = '$PARCELS_NUMBER_EXENSIVE';
        $substituir[] =    strtolower(SAGU::returnExtenseNumber($rdata->contract->parcelsNumber, 'F')); 

        $procurar[] = '$PARCEL_VALUE_EXTENSIVE';
        $substituir[] =   SAGU::extensive($parcelValue, 'M', true); 

        $procurar[] = '$PARCEL_VALUE';
        $substituir[] =   SAGU::formatNumber($parcelValue,true); 

        $procurar[] = '$COURSE_VALUE_EXTENSIVE';
        $substituir[] =   SAGU::extensive($courseValue, 'M', true); 

        $procurar[] = '$COURSE_VALUE';
        $substituir[] =   SAGU::formatNumber($courseValue, true); 

        $procurar[] = '$ENROLL_VALUE_EXTENSIVE';
        $substituir[] =   SAGU::extensive($enrollValue, 'M', true); 

        $procurar[] = '$ENROLL_VALUE';
        $substituir[] =   SAGU::formatNumber($enrollValue, true); 
        
        $procurar[] = '$COURSENAME';
        $substituir[] =   $rdata->contract->courseName; 

        $procurar[] = '$COURSE_SEMESTER_TOTAL_EXTENSIVE';
        $substituir[] =   strtolower(SAGU::extensive($rdata->contract->courseSemesterTotal)); 

        $procurar[] = '$COURSE_SEMESTER_TOTAL';
        $substituir[] =   $rdata->contract->courseSemesterTotal; 

        $procurar[] = '$COURSE_TOTAL_NUMBER_HOURS_EXTENSIVE';
        $substituir[] =   strtolower(SAGU::extensive($courseTotalNumberHours, 'F')); 
        
        $procurar[] = '$COURSE_TOTAL_NUMBER_HOURS';
        $substituir[] =   $courseTotalNumberHours; 

        $procurar[] = '$CONTRACT_PERSONNAME';
        $substituir[] =   $rdata->contract->name; 
        
        $procurar[] = '$CONTRACT_MARITALSTATUS';
        $substituir[] =   $rdata->contract->maritalStatus; 

        $procurar[] = '$CONTRACT_RG';
        $substituir[] =   $rdata->contract->rg; 

        $procurar[] = '$CONTRACT_CPF';
        $substituir[] =   $rdata->contract->cpf;

        $procurar[] = '$CONTRACT_LOCATION';
        $substituir[] =   $rdata->contract->location;

        $procurar[] = '$CONTRACT_ADDRESSNUMBER';
        $substituir[] =   $rdata->contract->number;

        $procurar[] = '$CONTRACT_ZIPCODE';
        $substituir[] =   $rdata->contract->zipCode;

        $procurar[] = '$CONTRACT_CITYNAME';
        $substituir[] =   $rdata->contract->cityName;

        $procurar[] = '$CONTRACT_NEIGHBORHOOD';
        $substituir[] =   $rdata->contract->neighborhood;
        
        $text = str_replace($procurar, $substituir, TECHNICAN_DOCUMENT_TEXT);

        return $text;
    }

    protected function generateContent($rdata)
    {	   
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $module = 'academic';
    	$transDay[5] = 'cinco';
        $transDay[6] = 'seis';
        $transDay[10] = 'dez';
    	$transMonth[1]  = _M('January', $module); 
    	$transMonth[2]  = _M('February', $module);
    	$transMonth[3]  = _M('March', $module);
    	$transMonth[4]  = _M('April', $module);
    	$transMonth[5]  = _M('May', $module);
        $transMonth[6]  = _M('June', $module);
        $transMonth[7]  = _M('July', $module);
        $transMonth[8]  = _M('August', $module);
        $transMonth[9]  = _M('September', $module);
        $transMonth[10] = _M('October', $module);
        $transMonth[11] = _M('November', $module);
        $transMonth[12] = _M('December', $module);            
    
     	$this->setFont(DEFAULT_REPORT_FONT, '', 8);


        $text = $this->replaceText($rdata);
     
        $this->multiCell($this->psize, $this->lsize,$text, null, 'J');
        $this->ln();

        $this->ln(10);
	    $this->MultiCell($this->psize, 5,$rdata->company->cityName.', '.date('d').' de '.$transMonth[date('n')].' de '.date('Y'),'','C');  
        $this->ln(10);
		$this->Cell(($this->psize/10)*1, 5,'','','C');
		$this->Cell(($this->psize/10)*8, 5,'','B','C');
        $this->ln(5);
		$this->MultiCell($this->psize, 5,$this->pdfInfo->legalPerson->name . ' - ' . $this->pdfInfo->legalPerson->shortName ,'','C');
		$this->ln(10);		
		$this->Cell(($this->psize/10)*1, 5,'','','C');
		$this->Cell(($this->psize/10)*8, 5,'','B','C');
        $this->ln(5);
		$this->MultiCell($this->psize, 5,'CONTRATANTE' ,'','C');
		$this->ln(10);		
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'', 'B');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'', 'B');
        $this->ln();
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'1ª Testemunha', '');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'2ª Testemunha', '');
        $this->ln();
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'CPF:', '');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*0.5, 5, '');
        $this->Cell(($this->psize/14)*6, 5,'CPF:', '');

	}
}
?>
