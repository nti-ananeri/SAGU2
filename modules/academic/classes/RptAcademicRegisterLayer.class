<?php

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC003'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;

    public function academicRegisterLayerHeader($reportData, $auxToMargin)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->SetY(5);
        $this->SetAutoPageBreak(10);

        if ( $auxToMargin == 1)
        {
            $this->SetLeftMargin(10);
        }
        elseif ( $auxToMargin == 2 )
        {
            $this->SetLeftMargin(10+145);
        }

        $this->setLineWidth(0);
        $this->cell(120, 5, '', '', 0);
        $this->ln(1);

        $this->Image(SAGUFile::getPhotoPath($reportData->companyPersonId), ($auxToMargin == 2 ? (120 * $auxToMargin + 25) : 120) , 13, '', 17, PHOTO_FORMAT);

        $this->cell(20,15, '', '', 0);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 16);
        $this->cell(70, 15, _M('Academic register', $module), 0, 0, 'C');
        $this->ln();

        for ( $x = 0; $x < strlen((string)$reportData->personId); $x++ )
        {
            //$reportData->personId[$x];
            $this->setFont(DEFAULT_REPORT_FONT, 'B',14);
            $this->cell(8, 8, $reportData->personId[$x], 'TLRB', 0);
        }

        $this->cell(strlen((string)$reportData->personId), 8 , '  ' . _M('Register', $module) . ' ' . $reportData->fakeName, 0);
        $this->ln(10);

        for ( $x = 0; $x < 4; $x++ )
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B',14);
            $this->cell(8, 8, '', 'TLRB', 0);
        }

        $this->cell(15, 8, '  ' . _M('Passive file id', $module), 0);
        $this->ln(8);
    }

//     public function academicRegisterLayerFooter()
//     {
//         $module = MIOLO::getCurrentModule();
// 
//         $this->setLineWidth(0.0);
// 
//         $this->cell(277,5, '', '', 0);
//         $this->ln();
//         $this->setFont(DEFAULT_REPORT_FONT, '', 9);
//         $this->cell(22, 7, _M('Professor', $module) . ' (a)' . ':', 0, 0);
//         $this->setLineWidth(0.1);
//         $this->cell(50, 5, '', 'B', 0);
//         $this->ln();
// 
//     }



    public function academicRegisterLayerMiddle($reportData, $auxToMargin)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('Name', $module), 0);
        $this->ln(7);
        $this->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->cell(140, 7, $reportData->personName, 'LRTB', 0);
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('Filiation', $module), 0);
        $this->ln(7);
		
        if ( count($reportData->nameFather) == 0 ) 
        {
            $reportDara->nameFather = _M('Not informed', $module);
        }
        if ( count($reportData->nameMother) == 0 ) 
        {
            $reportDara->nameMother = _M('Not informed', $module);
        }
        $this->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->cell(140, 7, $reportData->fatherName . ' - ' . $reportData->motherName, 'LRTB', 0);
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('Birth date', $module) . ' - ' . _M('Naturalness', $module), 0);
        $this->ln(7);
        $this->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->cell(140, 7, $reportData->dateBirth . ' - ' . $reportData->cityIdBirth . ' - ' . $reportData->stateIdBirth, 'LRTB', 0);
        $this->ln();		

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('High school', $module) . ' / ' . _M('Contain certified', $module), 0);
        $this->ln(7);
        $this->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->cell(140, 7, substr($reportData->institutionIdHs, 0, 50), 'LRTB', 0);
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('Location', $module) . ' ' . _M('and', $module) . ' ' . _M('conclusion year', $module), 0);
        $this->ln(7);
        $this->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->cell(140, 7, $reportData->cityInstitutionId . ' - ' . $reportData->stateIdInstitution . ' - ' . $reportData->yearHs, 'LRTB', 0);
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 12);
        $this->cell(8, 10, _M('Ingression form', $module), 0);
        $this->ln(7);

        if ( $reportData->stateContractId == WRITING_STATE_CONTRACT ) 
        {
            $businessAcademicRegisterLayer1 = $MIOLO->getBusiness($module, 'BusAcademicRegisterLayer');

            //Forma de ingresso so aluno (ENEM, vestibular)
            $pupilAprove = $businessAcademicRegisterLayer1->getSelectiveProcessFromAprovePupil($reportData);

            //Percorrerá todos os processos seletivos de um aluno, para vermos com qual ele entrou na universidade, ou seja, qual tem a maior nota
            if ( is_array($pupilAprove) && ( count($pupilAprove) > 0 ) )
            {
                $morNote                     = null;
                $selectiveProcessTypeMorNote = null;
                $selectiveProcessDescMorNote = null;

                foreach ( $pupilAprove as $key1 => $value1 )
                {
                    if ( $value1[1] > $morNote )
                    {
                        $morNote                     = $value1[1];
                        $selectiveProcessTypeMorNote = $value1[2];
                        $selectiveProcessDescMorNote = $value1[3];
                    }
                }
            }

            if ( $selectiveProcessTypeMorNote == DEFAULT_SELECTIVE_PROCESS_TYPE )
            {
                //Maior nota é do processo seletivo principal
                //então mostramos as notas de todas as provas
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
                $this->cell(140, 7, _M('SELECTIVE PROCESS RESULTS', $module), 'LRTB', 0, 'C');
                $this->ln(7);
                $this->cell(20,  7, _M('Date', $module), 'LRTB', 0, 'C');
                $this->cell(100, 7, _M('Curricular component', $module), 'LRTB', 0, 'C');
                $this->cell(20,  7, _M('Points', $module), 'LRTB', 0, 'C');
                $this->ln(7);

                $pupilsNotes = $businessAcademicRegisterLayer1->getExamsNotesFromSelectiveProcess($reportData);


                if (is_array($pupilsNotes))
                {
                    $totalPoints = 0;
                    foreach ( $pupilsNotes as $examNote )
                    {
                        $this->cell(20,  6, $examNote[3], 'LRTB', 0, 'C');
                        $this->cell(100, 6, $examNote[1], 'LRTB', 0, 'C');
                        $this->cell(20,  6, $examNote[2], 'LRTB', 0, 'C');
                        $this->ln(6);
                        $totalPoints += $examNote[2];
                    }
                }

                $this->cell(20,  7, _M('Total', $module), 'LRTB', 0, 'C');
                $this->cell(100, 7, '', 'LRTB', 0, 'C');
                $this->cell(20,  7, $totalPoints, 'LRTB', 0, 'C');
            }
            else
            {
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
                $this->cell(140, 7, $selectiveProcessDescMorNote .' '. _M('RESULTS', $module), 'LRTB', 0, 'C');
                $this->ln(7);

                $this->cell(140,  7, _M('Classified by') . ' ' . $selectiveProcessDescMorNote . ' ' . _M('with note', $module) . ' ' . $morNote . '.', 'LRTB', 0, 'L');
            }
        }
        else
        {
            $this->setFont(DEFAULT_REPORT_FONT, '', 12);

            if ( strlen((string)$reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition) > 50 )
            {
                $this->MultiCell(140, 5, $reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition, 'LRTB', 'L');
            }
            else
            {
                $this->cell(140, 8, $reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition, 'LRTB', 0);
            }

            $this->ln();
        }
    }
}

/**
 * PDF extension to generate report
 */
class RptAcademicRegisterLayer
{
    public function RptAcademicRegisterLayer($data = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        $busCompany  = $MIOLO->getBusiness('basic', 'BusCompany');
        $company     = $busCompany->getCompany(DEFAULT_COMPANY_CONF);

        $reportData->companyPersonId = $company->personId;

        $businessAcademicRegisterLayer = $MIOLO->getBusiness($module, 'BusAcademicRegisterLayer');
        $pupilsAcademicRegister        = $businessAcademicRegisterLayer->getPupilsToAcademicRegisterLayer($data);

        $pupilsTotal = count($pupilsAcademicRegister);

        //Generating PDF file
        $pdf = new PDF();
        $pdf->addPage('L', 'mm', 'A4');
        $pdf->aliasNbPages();

        //Relat
        $auxToMargin = 1;

        if(is_array($pupilsAcademicRegister))
        {
            if ( is_array($pupilsAcademicRegister) && (count($pupilsAcademicRegister) > 0) )
            {
                foreach ( $pupilsAcademicRegister as $pupil)
                {
                    $reportData->periodId         = $data->periodId; 
                    $reportData->personId         = $pupil[0];
                    $reportData->fakeName         = $data->fakeName;
                    $reportData->personName       = $pupil[1];
                    $reportData->fatherName       = $pupil[2];
                    $reportData->motherName       = $pupil[3];
                    $reportData->dateBirth        = $pupil[4];
                    $reportData->cityIdBirth      = $pupil[5];
                    $reportData->stateIdBirth     = $pupil[6];
                    $reportData->institutionIdHs  = $pupil[7];
                    $reportData->cityInstitutionId= $pupil[8];
                    $reportData->stateIdInstitution= $pupil[9];
                    $reportData->yearhs           = $pupil[10];
                    $reportData->courseId         = $pupil[11];
                    $reportData->courseName       = $pupil[12];
                    $reportData->stateContractDescription = $pupil[13];
                    $reportData->institutionContractDescrition = $pupil[14];
                    $reportData->stateContractId  = $pupil[15];

                    $pdf->academicRegisterLayerHeader($reportData, $auxToMargin);

                    $pdf->academicRegisterLayerMiddle($reportData, $auxToMargin);

                    if($auxToMargin == 1)
                    {
                        $auxToMargin = 2;

                    }
                    else
                    {
                        $auxToMargin = 1;
                        $pdf->addPage('L', 'mm', 'A4');
                    }
                }
            }
        }

        $pdf->close();
        $pdf->output();
    }
}

?>
