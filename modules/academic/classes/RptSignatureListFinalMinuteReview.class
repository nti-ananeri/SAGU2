<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 25/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'academic';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptSignatureListFinalMinuteReview extends PDF
{
    var $module = 'academic';

    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();

        $this->title = strtoupper(_M('Signature list for @1','services', _M('Final examination', 'academic')));
        $this->businessCallList = $MIOLO->getBusiness($this->module, 'BusCallList');
        $group = $this->businessCallList->getHeader($filters);
        foreach($filters as $item => $value )
        {
            if(!$this->headerData->{$item} )
            {
                $this->headerData->{$item} = $value;
            }
        }
	$this->filters->unitId = $group->unitId;
        parent::__construct();
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->useUserInfo = false;
        $this->addPage('P', 'mm', 'A4');
        $this->aliasNbPages();   
        $this->generatePDF();
        PDF::generatePDF(); 
    }

    public function getHeader($group)
    {
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Professor','academic'). ':', 'LT', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize, $group->professorName, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Class', 'academic') .':', 'T');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*2.4, $this->lsize,   $group->classId, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0,$this->lsize,  _M('Serie','academic'). ':', 'T', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->periodId, 'TR', null, 'R');
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4, $this->lsize, _M('Curricular component', 'academic') .':', 'L', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize,   $group->curricularComponentName, '');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('H.L.', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize,   $group->lessonNumberHours. 'H', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Period', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->serie, '', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize, _M('Turn', 'basic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->charId, 'R', null, 'R');
        $this->ln();
        
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Course','academic'). ':', 'LB',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*9.5, $this->lsize, $group->courseName, 'B');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.4,$this->lsize,  _M('Room','academic'). ':', 'B',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->room, 'RB', null, 'R');
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->ln();
        
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontBodySize);
        $procurar = array('$CURDAY','$CURMONTHEXT', '$CURMONTH', '$CURYEAR', '$PERIOD', '$LEGALPERSON_ADDRESS', '$LEGALPERSON_NAME', '$CURRICULARCOMPONENT', '$PROFESSOR', '$CLASSID', '$DEGREENUMBER');
        $substituir = array(date('d'), _M(date('F'), 'academic'), date('m'), date('Y'), CURRENT_PERIOD_ID, $this->pdfInfo->legalPersonAddress, $this->pdfInfo->legalPersonName, $group->curricularComponentId . ' - ' . $group->curricularFullName, $group->professorId . ' - ' . $group->professorName, $group->classId, $this->filters->degreeNumber );

        $text = str_replace($procurar, $substituir, SIGNATURE_LIST_FINAL_MINUTE_TEXT);
        $this->multicell($this->psize, $this->lsize, $text , null, 'J');
        $this->ln();


        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $fs = $this->fontSizeBody;
        $nn = false;
        while ( $nn == false )
        {
            for ($x = 0 ; $x < count($this->colsize); $x++)
            {
                if ( $this->colsize[$x] < $this->getStringWidth($this->colname[$x])+2 )
                {
                    $nn = false;
                    $fs -= 0.1;
                    $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
                    break;
                }
                else
                {
                    $nn = true;
                }
            }
        }
        for($x = 0; $x < count($this->colsize); $x++)
        {
            $this->cell($this->colsize[$x], $this->lsize, $this->colname[$x], 1, null, 'C');
        }
        $this->ln();
    }

    public function generatePDF()
    {
        unset($this->colname, $this->colsize, $group, $pupils, $headerData, $db);

        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->colname[0] = _M('N.', 'basic');
        $this->colname[1] = _M('Id', 'basic');
        $this->colname[2] = _M('Name', 'basic');
        $this->colname[3] = _M('Pupil signature', 'academic');

        $this->colsize[0] = $this->getStringWidth($this->colname[0])+3;
        $this->colsize[1] = $this->getStringWidth($this->colname[1])+2;
        $this->colsize[2] = ($this->psize-array_sum($this->colsize))/2;
        $this->colsize[3] = $this->colsize[2];
 
        if(!$this->filters->groupId) return;

        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusCallList');
        
        $group = $db->getHeader($this->filters);
        $this->getHeader($group);
        
        $pupils = $db->getPupils($this->filters);
        $headerData = $db->getHeader($this->filters);

        if ( count($pupils)>0 )
        {
            foreach ( $pupils as $id => $pupil )
            {
                if ( strlen((string)$pupil->enrollNote) == 0 || (float)$pupil->enrollNote <= (float)$group->learningPeriodDisapprovationWithoutExam || (float)$pupil->enrollNote >= (float)$group->learningPeriodAverage )
                {
                    unset($pupils[$id]);
                }
            }
        }
        if ( count($pupils) == 0 ) return;

        $nn = false;
        $fs2 = $this->fontSizeBody;
        $this->setFont(DEFAULT_REPORT_FONT, '', $fs2);
        while ( $nn == false )
        {
            foreach( $pupils as $pupil )
            {
                if ( $this->colsize[2] < $this->getStringWidth($pupil->personName)+2 )
                {
                    $nn = false;
                    $fs2 -= 0.1;
                    $this->setFont(DEFAULT_REPORT_FONT, '', $fs2);
                    break;
                }
                else
                {
                    $nn = true;
                }
            }
        }
        $x=0;
        foreach($pupils as $pupil)
        {
            $x++;
            if ( ($this->y+$this->lsize) > $this->PageBreakTrigger )
            {
                $this->getHeader($group);
            }
            $this->setFont(DEFAULT_REPORT_FONT, '', $fs2);
            $note = strlen((string)$pupil->degreeNote[$this->filters->degreeNumber]) > 0 ? SAGU::formatNumber($pupil->degreeNote[$this->filters->degreeNumber]) : ATTENDANCE_WITHOUTNOTE_CHAR;
            $this->cell($this->colsize[0], $this->lsize, $x, 1, null, 'R');
            $this->cell($this->colsize[1], $this->lsize, $pupil->personId, 1, null, 'R');
            $this->cell($this->colsize[2], $this->lsize, $pupil->personName, 1);
            $this->cell($this->colsize[3], $this->lsize, null, 1, null, 'R');
            $this->ln();
        }
        $this->ln();
        $this->multicell($this->psize, $this->lsize, _M('Because expression of truth, we enter into these minutes without rassurer.', 'academic'), null, 'C');

//        $this->cell($this->psize,$this->lsize, strtoupper($this->pdfInfo->cityName . '/' . $this->pdfInfo->stateId . ', '.date('d').' '._M('of', $this->module) .' '._M(date('F'), $this->module).' ' . _M('of', $this->module) . ' '. date('Y'). '.'), null, null, 'C');
        $this->cell($this->psize,$this->lsize, strtoupper($this->pdfInfo->cityName . '/' . $this->pdfInfo->stateId . ', _____ '._M('of', 'academic') .' __________________________' . _M('of', 'academic') . ' __________ .'), null, null, 'C');
        $this->ln();
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->defaultFontSize);
        $this->cell(($this->psize/12), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'L');
        $this->cell(($this->psize/6), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, $group->professorName , null, null, 'C');
        $this->cell(($this->psize/2), $this->lsize, $group->coordinatorName , null, null, 'C');
        $this->ln();
        $this->cell(($this->psize/2), $this->lsize, _M('Professor Signature', 'academic'), null, null, 'C');
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, _M('Course Coordinator Signature', 'academic'), null, null, 'C');
        $this->ln();
        $this->ln();
    }

    public function Header()
    {
        parent::Header();
    }

    public function Footer()
    {
        parent::Footer();
    }
}
?>
