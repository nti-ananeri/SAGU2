<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 25/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'academic';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptFinalMinuteReview extends PDF
{
    var $module = 'academic';
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();

        $this->title = strtoupper(_M('Final minute review', $this->module));
        parent::__construct();
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->useUserInfo = false;
        $this->addPage('P', 'mm', 'A4');
        $this->aliasNbPages();   
        $this->generatePDF();
    }

    public function generatePDF()
    {
        if(!$this->filters->groupId) return;
        $this->module = 'academic';
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('academic', 'BusCallList');
        $group = $db->getHeader($this->filters);

        //MIOLO::vd($group);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Professor','academic'). ':', 'LT', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize, $group->professorName, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Class', 'academic') .':', 'T');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*2.4, $this->lsize,   $group->classId, 'T');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0,$this->lsize,  _M('Serie','academic'). ':', 'T', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->periodId, 'TR', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4, $this->lsize, _M('Curricular component', 'academic') .':', 'L', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*5.8, $this->lsize,   $group->curricularComponentName, '');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('H.L.', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize,   $group->lessonNumberHours. 'H', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, _M('Period', 'academic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->serie, '', null, 'L');
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.0, $this->lsize, _M('Turn', 'basic') .':', '', null, 'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize,   $group->charId, 'R', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*1.4,$this->lsize,  _M('Course','academic'). ':', 'LB',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*9.5, $this->lsize, $group->courseName, 'B');

        $this->setFont(DEFAULT_REPORT_FONT, 'B', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.4,$this->lsize,  _M('Room','academic'). ':', 'B',null,  'R');
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
        $this->cell(($this->psize/12)*0.7, $this->lsize, $group->room, 'RB', null, 'R');
        $this->ln();
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontBodySize);
        $procurar = array('$CURDAY','$CURMONTHEXT', '$CURMONTH', '$CURYEAR', '$PERIOD', '$LEGALPERSON_ADDRESS', '$LEGALPERSON_NAME', '$CURRICULARCOMPONENT', '$CLASS', '$PROFESSOR', '$TURNDESCRIPTION', '$COURSE');
        $substituir = array(date('d'), _M(date('F'), 'academic'), date('m'), date('Y'), $group->periodId, $this->pdfInfo->legalPersonAddress, $this->pdfInfo->legalPersonName, $group->curricularComponentName, $group->classId, $group->professorName, $group->turnDescription, $group->courseName);
        $text = str_replace($procurar, $substituir, REQUIREMENT_EXAM_TEXT);
        $this->multicell($this->psize, $this->lsize, $text);
        $this->ln();
        $this->colsize[0] = $this->FontSize*2;
        $this->colsize[1] = $this->FontSize*4;
        $this->colsize[3] = $this->FontSize*4;
        $this->colsize[2] = round($this->psize-(array_sum($this->colsize)),2)/2;
        $this->colsize[4] = $this->colsize[2];
        $this->colname[0] = 'N.';
        $this->colname[1] = _M('Id', $this->module);
        $this->colname[2] = _M('Name', $this->module);
        $this->colname[3] = _M('Note', $this->module);
        $this->colname[4] = _M('Signature', $this->module);

        $contractsIdsForCancel[] = STATE_CONTRACT_ID_EXTERNAL_TRANSFER_TO;
        $contractsIdsForCancel[] = STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO;
        $contractsIdsForCancel[] = STATE_CONTRACT_ID_LOCKED;
        $contractsIdsForCancel[] = STATE_CONTRACT_ID_CANCELLATION;
        $contractsIdsForCancel[] = STATE_CONTRACT_ID_ABANDONMENT;
        $contractsIdsForCancel[] = STATE_CONTRACT_ID_ABANDONMENT_CASE;

        for($x = 0; $x < count($this->colsize); $x++)
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', (strlen((string)$this->colname[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$this->colname[$x])/4.5)) );
            $this->cell($this->colsize[$x], $this->lsize, $this->colname[$x], 1, null, 'C');
        }
        $this->ln();
        $pupils = $db->getPupils($this->filters);
        if ( count($pupils) == 0 ) return;
        $x=0;

        foreach($pupils as $pupil)
        {
            if(!in_array($pupil->stateContractId, $contractsIdsForCancel))
            {
                $x++;
                $this->setFont(DEFAULT_REPORT_FONT, '', $this->fontSizeBody);
                $this->cell($this->colsize[0], $this->lsize,$x, 1, null, 'R');
                $this->cell($this->colsize[1], $this->lsize, $pupil->personId, 1);
                $this->setFont(DEFAULT_REPORT_FONT, '', (strlen((string)$pupil->personName)/0.5) <= ceil($this->colsize[2]) ? $this->fontSizeBody : ceil($this->colsize[2]/(strlen((string)$pupil->personName)/4.0)) );
                $this->cell($this->colsize[2], $this->lsize, $pupil->personName, 1);
                $this->cell($this->colsize[3], $this->lsize, SAGU::formatNumber($pupil->examNote), 1, null, 'R');
                $this->cell($this->colsize[4], $this->lsize,null, 1, null, 'R');
                $this->ln();
            }
        }
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->defaultFontSize);
        $this->cell($this->psize,$this->lsize, 'E por ser expressão da verdade, firmo a presente ATA sem rasuras.', null,  null, 'C');
        $this->ln();
        $this->ln();
        if($this->filters->showDate)
        {
            $this->cell($this->psize,$this->lsize, strtoupper($this->pdfInfo->cityName . '/' . $this->pdfInfo->stateId . ', '.date('d').' '._M('of', $this->module) .' '._M(date('F'), $this->module).' ' . _M('of', $this->module) . ' '. date('Y'). '.'), null, null, 'C');
        }
        else 
        {
            $this->cell($this->psize,$this->lsize, strtoupper($this->pdfInfo->cityName . '/' . $this->pdfInfo->stateId . ', _____ '._M('of', $this->module) .' ____________________________ ' . _M('of', $this->module) . ' __________.'), null, null, 'C');
        }
        $this->ln();
        $this->ln();
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $this->defaultFontSize);
        $this->cell(($this->psize/12), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'L');
        $this->cell(($this->psize/6), $this->lsize, '', '', null, 'L');
        $this->cell(($this->psize/6)*2, $this->lsize, '', 'B', null, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, $group->professorName , null, null, 'C');
        $this->cell(($this->psize/2), $this->lsize, $group->coordinatorName , null, null, 'C');
        $this->ln();
        $this->cell(($this->psize/2), $this->lsize, _M('Professor Signature', 'academic'), null, null, 'C');
        $this->setFont(DEFAULT_REPORT_FONT, 'BI', $this->defaultFontSize);
        $this->cell(($this->psize/2), $this->lsize, _M('Course Coordinator Signature', 'academic'), null, null, 'C');
        $this->ln();
        $this->ln();
        PDF::generatePDF();
    }

    public function putContent()
    {
        foreach ( $pupil as $colvalue )
        {
            for($x = 0; $x < count($this->colsize); $x++)
            {
                $this->setFont(DEFAULT_REPORT_FONT, '', (strlen((string)$colvalue[$x])/.5) <= ceil($this->colsize[$x]) ? $this->fontSizeBody : ceil($this->colsize[$x]/(strlen((string)$colvalue[$x])/4.5)) );
                $this->cell($this->colsize[$x], $this->lsize, $colvalue[$x], 1);
            }
        }
    }

    public function Header()
    {
        parent::Header();
    }
    public function Footer()
    {
        parent::Footer();
    }
}
?>
