<?php

/**
 *
 * This file handles the connection and actions for acdStateContractField table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finStateContractField table
 */
class FrmStateContractFieldSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('State contract field', $this->home, 'stateContractField-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('stateContractFieldIdS', $this->getFormValue('stateContractFieldIdS', $stateContractFieldIdS));

        $stateContractLabel = new MText('stateContractLabel', _M('State contract',$module) . ':');
        $stateContractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]          = $stateContractLabel;

        $stateContractIdS = new MLookupTextField('stateContractIdS', $this->getFormValue('stateContractIdS',$data->stateContractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'stateContractDescriptionS', $module, 'StateContract', null, null, true);
        $stateContractIdS->setJsHint(_M('Enter the state contract code',$module));
        $flds[]          = $stateContractIdS;
        $validators[] = new MIntegerValidator('stateContractIdS', '', 'optional');

        $stateContractDescriptionS = new MTextField('stateContractDescriptionS', $this->getFormValue('stateContractDescriptionS',$data->stateContractDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $stateContractDescriptionS->setReadOnly(true);
        $stateContractDescriptionS->setJsHint(_M('State contract',$module));
        $flds[]             = $stateContractDescriptionS;

        $hctStateContractS = new MHContainer('hctStateContractS', $flds);
        $hctStateContractS->setShowLabel(true);
        $fields[]  = $hctStateContractS;
        unset($flds);
        
        $stateContractFieldDescriptionS = new MTextField('stateContractFieldDescriptionS', $this->getFormValue('stateContractFieldDescriptionS',$data->stateContractFieldDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $stateContractFieldDescriptionS->setJsHint(_M('Enter the description',$module));
        $fields[]             = $stateContractFieldDescriptionS;
        
        //$hctDescriptionS = new MHContainer('hctDescriptionS', $flds);
        //$hctDescriptionS->setShowLabel(true);
        //$fields[]  = $hctDescriptionS;
        //unset($flds);

        $rowsS = new MTextField('rowsS', $this->getFormValue('rowsS',$data->rowsS), _M('Rows',$module), 18);
        $rowsS->setJsHint(_M('Enter the rows',$module));
        $fields[]             = $rowsS;
        
        $columnsS = new MTextField('columnsS', $this->getFormValue('columnsS',$data->columnsS), _M('Columns',$module), 18);
        $columnsS->setJsHint(_M('Enter the columns',$module));
        $fields[]             = $columnsS;
        
        //$hctRowsColumnsS = new MHContainer('hctRowsColumnsS', $flds);
        //$hctRowsColumnsS->setShowLabel(true);
        //$fields[]  = $hctRowsColumnsS;
        //unset($flds);
        
        $isLookupLabelS = new MText('isLookupLabelS', _M('Is it lookup',$module) . '?');
        $isLookupLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isLookupLabelS;

        $isLookupS = new MRadioButtonGroup('isLookupS', null, SAGU::listTrueFalse(1), $this->isLookupS, null, 'horizontal');
        $isLookupS->setShowLabel(false);
        $flds[] = $isLookupS;

        $hctIsLookupS = new MHContainer('hctIsLookupS', $flds);
        $fields[] = $hctIsLookupS;
        unset($flds);

        $isRequiredLabelS = new MText('isRequiredLabelS', _M('Is it required',$module) . '?');
        $isRequiredLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isRequiredLabelS;

        $isRequiredS = new MRadioButtonGroup('isRequiredS', null, SAGU::listTrueFalse(1), $this->isRequiredS, null, 'horizontal');
        $isRequiredS->setShowLabel(false);
        $flds[] = $isRequiredS;

        $hctIsRequiredS = new MHContainer('hctIsRequiredS', $flds);
        $fields[] = $hctIsRequiredS;
        unset($flds);


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->stateContractFieldId     = $this->stateContractFieldIdS->value;
        $filters->description              = $this->stateContractFieldDescriptionS->value;
        $filters->stateContractId          = $this->stateContractIdS->value;
        $filters->rows                     = $this->rowsS->value;
        $filters->columnsS                 = $this->columnsS->value;  
        $filters->isLookup                 = $this->isLookupS->value;  
        $filters->autoCompleteSelect       = $this->autoCompleteSelectS->value;  
        $filters->lookupSelect             = $this->lookupSelectS->value;  
        $filters->fieldValidator           = $this->fieldValidatorS->value;  
        $filters->isRequired               = $this->isRequiredS->value;    

        unset($this->stateContractFieldIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdStateContractFieldSearch',$filters);
        $business = $this->manager->getBusiness($module,'BusStateContractField');
        $data = $business->searchStateContractField($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults); 

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.stateContractFieldIdS.focus();');
        } 
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }

}

?>
