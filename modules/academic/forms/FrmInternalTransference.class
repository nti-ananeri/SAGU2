<?php

/**
 * Academic internal transference form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2007
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to change the pupil course
 **/
class FrmInternalTransference extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Internal transference', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $contractPersonLabel = new MText('contractLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $flds[]              = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, ( $this->getFormValue('contractId') == '' ) ? array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', null, 'contractUnitId') : null, $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;
        $validators[]     = new MRequiredValidator('contractPersonId', _M('Person',$module), 'required');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]        = $contractLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', null, 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]     = $contractId;
        $validators[]     = new MRequiredValidator('contractId', _M('Contract',$module), 'required');

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Course id',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $fields[] = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId', $data->contractTurnId));
        $fields[] = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId', $data->contractUnitId));

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]              = $learningPeriodLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period', $module), FIELD_LOOKUPFIELD_SIZE, null, null, array(null, null, null, null, null, 'learningPeriodDescription'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId', 'courseVersion' => 'contractCourseVersion' ), true);
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));
        $learningPeriodId->setJsHint(_M('Enter the learning period id', $module));
        $flds[]           = $learningPeriodId;

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description', $module));
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(false);
        $fields[]          = $hctLearningPeriod;
        unset($flds);

        $businessReason = $MIOLO->getBusiness($module, 'BusReason');
        $reasonId       = new MComboBox('reasonId', $this->getFormValue('reasonId', $data->reasonId), _M('Reason',$module), $businessReason->listReasonByStateContract(STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO), true );
        $validators[]   = new MRequiredValidator('reasonId', _M('Reason',$module), 'required');
        $fields[]       = $reasonId;

        $fields[]    = new MSeparator('<hr>');

        $courseLabel = new MText('courseLabel', _M('Destination course occurrence',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId',_M('Destination course occurrence',$module), 'required');

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('courseVersion',_M('Destination course version occurrence',$module), 'required');

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;
        
        $turnLabel = new MText('turnLabel', _M('Turn',$module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId',$data->turnId), _M('Code',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription',$data->turnDescription), _M('Turn',$module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);

        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[]  = $hctTurn;

        $unitLabel = new MText('unitLabel', _M('Unit',$module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId = new MTextField('unitId', $this->getFormValue('unitId',$data->unitId), _M('Code',$module), FIELD_ID_SIZE);
        $unitId->setReadOnly(true);

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription',$data->unitDescription), _M('Unit description',$module), FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);

        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[]  = $hctUnit;
        $stateTime = $this->getFormValue('stateTime', $data->stateTime);
        if ( is_null($stateTime) )
        {
            //default date(now);
            $stateTime = date(MASK_DATE_PHP);
        }
        $stateTime      = new MCalendarField('stateTime', $stateTime, _M('State date',$module), FIELD_DATE_SIZE);
        $stateTime->setValidator( new MDATEDMYValidator('stateTime', _M('State date',$module), 'required'));
        $fields[]       = $stateTime;

        $stateHour = new MTextField('stateHour', $this->getFormValue('stateHour', date('H:i')), _M('State hour',$module), FIELD_TIME_SIZE, 'hh:mm');
        $validators[] = new MTimeValidator('stateHour', _M('State hour',$module), 'required');
        $fields[] = $stateHour;

        $flds[] = new MTextLabel('lblMes', _M('If you fill out the class below, the person will be automatically included in this class after conversion', $module) . '.');

        $classLabel = new MText('classLabel', _M('Class', $module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds1[]    = $classLabel;

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Class', $module), FIELD_LOOKUPFIELD_SIZE, null, null, array('classDescription'), 'academic', 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId','periodId' => 'periodId' ), !$this->page->isPostBack() );
        $classId->setJsHint(_M('Enter the class code',$module));
        $flds1[]  = $classId;

        $classDescription = new MTextField('classDescription', $this->getFormValue('classDescription', $data->classDescription), _M('Class',$module), FIELD_DESCRIPTION_SIZE);
        $classDescription->setReadOnly(true);
        $flds1[]   = $classDescription;

        $hctClass = new MHContainer('hctClass', $flds1);
        $hctClass->setShowLabel(false);
        $flds[]   = $hctClass;
        unset($flds1);

        $bsg3         = new BaseGroup('bsg3', _M('Convert information', $module), $flds, 'vertical');
        $fields[]     = $bsg3;
        $fields[]     = new MSeparator('');
        unset($flds, $flds1);

        //Error container
        $divError = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[] = $divError;
        $fields[] = new Separator();

        //Buttons
        $btnExecute[] = new MButton('btnExecute', _M('Execute', $module));
        $div1   = new MDiv('div1', $btnExecute);

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);
        
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click execute button
     **/
    public function btnExecute_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();

        $data->stateContractId = STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO;
        $data->stateTime .= ' ' . $this->stateHour->value . ':00';
        $busCountry            = $MIOLO->getBusiness('basic', 'BusCountry');
        $busContract           = $MIOLO->getBusiness($module, 'BusContract');
        $busStateContract      = $MIOLO->getBusiness($module, 'BusStateContract');
        $busStateTransistion   = $MIOLO->getBusiness($module, 'BusStateTransistion');
        $busReceivableInvoice  = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
        $businessInvoice       = $MIOLO->getBusiness('finance', 'BusInvoice');

        $dataCountry           = $busCountry->getCountry(DEFAULT_COUNTRY_ID);
        $dataContract          = $busContract->getContract($data->contractId);
        $lastState             = $busContract->getContractLastMovementStatus($data->contractId);

        $filters = new acdStateTransistion();
        $filters->beginStateId = strlen((string)$lastState->stateContract)>0 ? $lastState->stateContract : 0;
        $filters->endStateId   = STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO;

        $contractState         = $busStateTransistion->searchStateTransistion($filters);

        //regra da última movimentação contratual
        if ( @count($contractState) != 1 )
        {
            $lastStateContract = $busStateContract->getStateContract($lastState->stateContract);

            $msg  = _M('The last operation of this contract is to @1 and should be one of the operations below to carry out this process', $module, $lastStateContract->description) . '.' . '<br>';

            unset($filters);
            $filters = new acdStateTransistion();
            $filters->endStateId = STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO;

            $contractStates = $busStateTransistion->searchStateTransistion($filters);

            unset($msg_);
            if ( count($contractStates)>0 )
            {
                foreach ( $contractStates as $row )
                {
                    $msg_ .= '<i>' . $row[0] . ' - ' . $row[1] . '</i><br>';
                }
            }

            $this->addError($msg . $msg_);

        }
        elseif ( $data->courseId      == $data->contractCourseId &&
                 $data->courseVersion == $data->contractCourseVersion &&
                 $data->unitId        == $data->contractUnitId &&
                 $data->turnId        == $data->contractTurnId )
        {
            $msg = _M('The contract course occurrence and the destination course occurrence are the same', $module);

            $this->addError($msg);
        }
        else
        {
            try
            {
                $business = $MIOLO->getBusiness($module, 'BusCourseChange');

                $business->internalTransference($data);
                
                $ok = true;
            }
            catch( Exception $e )
            {
                $msg = _M('An unexpected error occurred while trying to change course.', $module) .
                      ': ' . $e->getMessage();
                $goto    = $MIOLO->getActionURL($module, $action);
                $caption = _M('Error',$module);
                $MIOLO->Error( $msg, $goto, $caption );
            }

            if ( $ok )
            {
                $msg     = _M('Internal transference executed with success.', $module);
                $goto    = $MIOLO->getActionURL($module, $action);
                $caption = _M('Success',$module);
                $MIOLO->information($msg, $goto, $caption);
            }
        }

    }

}

?>
