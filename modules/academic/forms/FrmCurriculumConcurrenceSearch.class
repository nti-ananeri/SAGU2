<?php

/**
 *
 * This file handles the connection and actions for acdCurriculumConcurrence table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurriculumConcurrence table
 */
class FrmCurriculumConcurrenceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Curriculum matrix concurrence', $this->home, 'curriculumConcurrence-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $cOutCourseInstruction = new MTextLabel('textLabel', _M('Curricular component that if is coursed, hind the "In" curricular component at are would course',$module).'.');

        $curriculumCourseOutLabel = new MText('curriculumCourseOutLabel', _M('Course id',$module) . ':');
        $curriculumCourseOutLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumOutCourseIdS = new MLookupTextField('curriculumOutCourseIdS', $this->curriculumOutCourseIdS->value, '', FIELD_ID_SIZE, null, null, 'curriculumOutCourseVersionS, curriculumOutCourseNameS, curriculumOutCourseUnitIdS, curriculumOutCourseUnitDescriptionS, curriculumOutCourseTurnIdS, curriculumOutCourseTurnDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumOutCourseIdS'), !$this->page->isPostBack());

        $fields[] = new MHiddenField('curriculumOutCourseUnitIdS', $curriculumOutCourseUnitIdS);
        $fields[] = new MHiddenField('curriculumOutCourseTurnIdS', $curriculumOutCourseTurnIdS);

        $curriculumOutCourseNameS = new MTextField('curriculumOutCourseNameS', $this->curriculumOutCourseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumOutCourseNameS->setJsHint(_M('Enter the curriculum course name',$module));
        $curriculumOutCourseNameS->setReadOnly(true);

        $curriculumOutCourseVersionS = new MTextField('curriculumOutCourseVersionS', $this->curriculumOutCourseVersionS->value, '', 5);
        $curriculumOutCourseVersionS->setJsHint(_M('Enter the curriculum course version',$module));
        //$curriculumOutCourseVersionS->setReadOnly(true);

        $curriculumOutCourseUnitDescriptionS = new MTextField('curriculumOutCourseUnitDescriptionS', $this->curriculumOutCourseUnitDescriptionS->value, '', 8);
        $curriculumOutCourseUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumOutCourseUnitDescriptionS->setReadOnly(true);

        $curriculumOutCourseTurnDescriptionS = new MTextField('curriculumOutCourseTurnDescriptionS', $this->curriculumOutCourseTurnDescriptionS->value, '', 8);
        $curriculumOutCourseTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumOutCourseTurnDescriptionS->setReadOnly(true);

        $hctCurriculumOutCourse = new MHContainer('hctCurriculumOutCourse', array($separator, $curriculumCourseOutLabel, $curriculumOutCourseIdS, $curriculumOutCourseNameS, $curriculumOutCourseVersionS, $curriculumOutCourseUnitDescriptionS, $curriculumOutCourseTurnDescriptionS));
        $hctCurriculumOutCourse->setShowLabel(true);
        //$fields[]  = $hctCurriculumOutCourse;

        $curriculumOutCurricularComponentLabel = new MText('curriculumOutCurricularComponentLabel', _M('Curricular component id',$module) . ':');
        $curriculumOutCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumOutCurricularComponentIdS = new MLookupTextField('curriculumOutCurricularComponentIdS', $this->curriculumOutCurricularComponentIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curriculumOutCurricularComponentVersionS,curriculumOutCurricularComponentNameS', $module, 'CurricularComponent', null, null, !$this->page->isPostBack());

        $curriculumOutCurricularComponentVersionS = new MTextField('curriculumOutCurricularComponentVersionS', $this->curriculumOutCurricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $curriculumOutCurricularComponentVersionS->setJsHint(_M('Enter the curriculum curricular component version',$module));
        //$curriculumOutCurricularComponentVersionS->setReadOnly(true);

        $curriculumOutCurricularComponentNameS = new MTextField('curriculumOutCurricularComponentNameS', $this->curriculumOutCurricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumOutCurricularComponentNameS->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curriculumOutCurricularComponentNameS->setReadOnly(true);

        $hctCurriculumOutCurricularComponent = new MHContainer('hctCurriculumOutCurricularComponent', array($curriculumOutCurricularComponentLabel, $curriculumOutCurricularComponentIdS, $curriculumOutCurricularComponentVersionS, $curriculumOutCurricularComponentNameS));
        $hctCurriculumOutCurricularComponent->setShowLabel(true);
        //$fields[]  = $hctCurriculumOutCurricularComponent;

        $separator = new MSeparator('');

        $fields[]  = new MBaseGroup('bgOut', _M('Out', $module), array($separator, $cOutCourseInstruction, $separator, $hctCurriculumOutCourse, $separator, $hctCurriculumOutCurricularComponent, $separator));

        $cInCourseInstruction = new MTextLabel('textLabel1', _M('Curricular component that dont will can are would course if the "Out" curricular component is coursed',$module).'.');

        $curriculumCourseInLabel = new MText('curriculumCourseInLabel', _M('Course id',$module) . ':');
        $curriculumCourseInLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumInCourseIdS = new MLookupTextField('curriculumInCourseIdS', $this->curriculumInCourseIdS->value, '', FIELD_ID_SIZE, null, null, 'curriculumInCourseVersionS, curriculumInCourseNameS, curriculumInCourseUnitIdS, curriculumInCourseUnitDescriptionS, curriculumInCourseTurnIdS, curriculumInCourseTurnDescriptionS', $module, 'CourseOccurrence', null, null, !$this->page->isPostBack());

        $fields[] = new MHiddenField('curriculumInCourseUnitIdS', $curriculumInCourseUnitIdS);
        $fields[] = new MHiddenField('curriculumInCourseTurnIdS', $curriculumInCourseTurnIdS);

        $curriculumInCourseNameS = new MTextField('curriculumInCourseNameS', $this->curriculumInCourseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumInCourseNameS->setJsHint(_M('Enter the curriculum course name',$module));
        $curriculumInCourseNameS->setReadOnly(true);

        $curriculumInCourseVersionS = new MTextField('curriculumInCourseVersionS', $this->curriculumInCourseVersionS->value, '', 5);
        $curriculumInCourseVersionS->setJsHint(_M('Enter the curriculum course version',$module));
        //$curriculumInCourseVersionS->setReadOnly(true);

        $curriculumInCourseUnitDescriptionS = new MTextField('curriculumInCourseUnitDescriptionS', $this->curriculumInCourseUnitDescriptionS->value, '', 8);
        $curriculumInCourseUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumInCourseUnitDescriptionS->setReadOnly(true);

        $curriculumInCourseTurnDescriptionS = new MTextField('curriculumInCourseTurnDescriptionS', $this->curriculumInCourseTurnDescriptionS->value, '', 8);
        $curriculumInCourseTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumInCourseTurnDescriptionS->setReadOnly(true);

        $hctCurriculumInCourse = new MHContainer('hctCurriculumInCourse', array($curriculumCourseInLabel, $curriculumInCourseIdS, $curriculumInCourseNameS, $curriculumInCourseVersionS, $curriculumInCourseUnitDescriptionS, $curriculumInCourseTurnDescriptionS));
        $hctCurriculumInCourse->setShowLabel(true);
        //$fields[]  = $hctCurriculumInCourse;

        $curriculumInCurricularComponentLabel = new MText('curriculumInCurricularComponentLabel', _M('Curricular component id',$module) . ':');
        $curriculumInCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumInCurricularComponentIdS = new MLookupTextField('curriculumInCurricularComponentIdS', $this->curriculumInCurricularComponentIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curriculumInCurricularComponentVersionS,curriculumInCurricularComponentNameS', $module, 'CurricularComponent', null, null, !$this->page->isPostBack());

        $curriculumInCurricularComponentVersionS = new MTextField('curriculumInCurricularComponentVersionS', $this->curriculumInCurricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $curriculumInCurricularComponentVersionS->setJsHint(_M('Enter the curriculum curricular component version',$module));
        //$curriculumInCurricularComponentVersionS->setReadOnly(true);

        $curriculumInCurricularComponentNameS = new MTextField('curriculumInCurricularComponentNameS', $this->curriculumInCurricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumInCurricularComponentNameS->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curriculumInCurricularComponentNameS->setReadOnly(true);

        $hctCurriculumInCurricularComponent = new MHContainer('hctCurriculumInCurricularComponent', array($separator, $curriculumInCurricularComponentLabel, $curriculumInCurricularComponentIdS, $curriculumInCurricularComponentVersionS, $curriculumInCurricularComponentNameS));
        $hctCurriculumInCurricularComponent->setShowLabel(true);
        //$fields[]  = $hctCurriculumInCurricularComponent;

        $fields[]  = new MBaseGroup('bgIn', _M('In', $module), array($separator, $cInCourseInstruction, $separator, $hctCurriculumInCourse, $separator, $hctCurriculumInCurricularComponent, $separator));

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);
/*
        $filters->courseId                     = $this->courseIdS->value;
        $filters->courseVersion                = $this->courseVersionS->value;*/

        $filters->courseOutId                   = $this->curriculumOutCourseIdS->value;
        $filters->courseOutVersion              = $this->curriculumOutCourseVersionS->value;
        $filters->unitOutId                     = $this->curriculumOutCourseUnitIdS->value;
        $filters->turnOutId                     = $this->curriculumOutCourseTurnIdS->value;
        $filters->curricularComponentOutId      = $this->curriculumOutCurricularComponentIdS->value;
        $filters->curricularComponentOutVersion = $this->curriculumOutCurricularComponentVersionS->value;

        $filters->courseInId                   = $this->curriculumInCourseIdS->value;
        $filters->courseInVersion              = $this->curriculumInCourseVersionS->value;
        $filters->unitInId                     = $this->curriculumInCourseUnitIdS->value;
        $filters->turnInId                     = $this->curriculumInCourseTurnIdS->value;
        $filters->curricularComponentInId      = $this->curriculumInCurricularComponentIdS->value;
        $filters->curricularComponentInVersion = $this->curriculumInCurricularComponentVersionS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCurriculumConcurrenceSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusCurriculumConcurrence');
        $data = $business->searchCurriculumConcurrenceFormGrid($filters);

        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.curriculumOutIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
