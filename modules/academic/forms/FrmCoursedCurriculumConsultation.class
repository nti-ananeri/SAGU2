<?php

/**
 * Coursed curriculum consultation form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 05/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmCoursedCurriculumConsultation extends MForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Coursed curriculum consultation', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Coursed curriculum consultation', $this->home, 'coursedCurriculumConsultation-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;

        //Course
        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId');

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $turnLabel = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $validators[] = new MRequiredValidator('turnId');
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[] = $hctTurn;

        $unitLabel = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $validators[] = new MRequiredValidator('unitId');
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit  = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[] = $hctUnit;
        
        $opts = array ( array(_M('Only active', $module), 0),
                        array(_M('Active and passive', $module), 1) );
        
        $pupilStatusLabel = new MText('pupilStatusLabel', _M('Pupils status',$module) . ':');
        $pupilStatusLabel->setWidth(FIELD_CONTAINER_SIZE);

        $pupilStatus = $this->GetFormValue('pupilStatus', $data->pupilStatus) ? $this->GetFormValue('pupilStatus',$data->pupilStatus) : 0;
        $pupilStatus = new MRadioButtonGroup('pupilStatus', '', $opts , $pupilStatus, null, 'horizontal');
        $pupilStatus->SetShowLabel(false);

        $hctPupilStatus = new MHContainer('hctPupilStatus', array($pupilStatusLabel, $pupilStatus));
        $fields[]       = $hctPupilStatus;

        $opts = array ( array(_M('Only concluded', $module), 0),
                        array(_M('Concluded and enrolled', $module), 1) );
        
        $currCompStatusLabel = new MText('currCompLabel', _M('Curricular component status',$module) . ':');
        $currCompStatusLabel->setWidth(FIELD_CONTAINER_SIZE);

        $currCompStatus = $this->GetFormValue('currCompStatus', $data->currCompStatus) ? $this->GetFormValue('currCompStatus', $data->currCompStatus) : 0;
        $currCompStatus = new MRadioButtonGroup('currCompStatus', '', $opts , $currCompStatus, null, 'horizontal');
        $currCompStatus->SetShowLabel(false);

        $hctCurrCompStatus = new MHContainer('hctCurrCompStatus', array($currCompStatusLabel, $currCompStatus));
        $fields[]          = $hctCurrCompStatus;

        $btn1     = new MButton('btnList', _M('List', $module));
        $fields[] = $btn1;
        
        $fields[] = new MSeparator('');
        
        $fields[] = new MContainer('ctGrids');
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user clicks on List button
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusCoursedCurriculumConsultation');
        $data     = $this->getData();
        
        $options->pupilStatus    = $data->pupilStatus;
        $options->currCompStatus = $data->currCompStatus;
        
        $gridData = $business->listCoursedCurriculum($data, $options);
        
        if (count($business->getErrors()) > 0)
        {
            $this->addError($business->getErrors());
        }
        else
        {
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdCoursedCurriculumConsultation', $gridData);

            //###GRID///is_array($gridData) ? $grid->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

            $this->addField($grid);
        }
    }
    
    public function listPupils($sender=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $curriculumId   = $MIOLO->_request('curriculumId');
        $business       = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculumData = $business->getCurriculum($curriculumId);
        
        $data               = $this->getData();
        $data->curriculumId = $curriculumId;
        
        $business = $MIOLO->getBusiness($module, 'BusCoursedCurriculumConsultation');
        $pupils   = $business->listCoursedCurriculumPupils($data);
        
        $grid  = $MIOLO->getUI()->getGrid($module, 'GrdCoursedCurriculumConsultationPupils', $pupils);
        $title = _M('Pupils that coursed', $module) . ': ' . $curriculumData->curricularComponentName;
        $grid->setTitle($title);
        
        $this->clearFields();
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
                
        $this->addField($toolBar);        
        $this->addField($grid);
        
        $arrayData = get_object_vars($data);
        
        $backUrl = $MIOLO->getActionURL($module, $action, null, $arrayData);
              
    }
}

?>
