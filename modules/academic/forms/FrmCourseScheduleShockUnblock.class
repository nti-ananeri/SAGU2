<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmCourseScheduleShockUnblock extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Insert', $module));
        
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');        
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course schedule shock unblock', $this->home, 'courseScheduleShockUnblock-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');
        $flds[] = $courseLabel;
                
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('Course',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'courseOccurrence', null, array('courseId' => 'courseId'), true);
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course', $module), 'required');
        $flds[]           = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $flds[]             = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $flds[]             = $courseName;
        
        $hctCourse = new MHContainer('hctCourse', $flds);
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;
        unset($flds);
        
        $turnLabel = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $turnLabel;
        
        $turnId = new MTextField('turnId', $this->getFormValue('turnId',$data->turnId), _M('Turn',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $flds[]             = $turnId;
        
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription',$data->turnDescription), _M('Turn',$module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $flds[]             = $turnDescription;
        
        $hctTurn = new MHContainer('hctTurn', $flds);
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;
        unset($flds);

        $unitLabel = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $unitLabel;
        
        $unitId = new MTextField('unitId', $this->getFormValue('unitId',$data->unitId), _M('Unit id',$module), FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $flds[]             = $unitId;
        
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription',$data->unitDescription), _M('Unit description',$module), FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $flds[]           = $unitDescription;                                       

        $hctUnit = new MHContainer('hctUnit', $flds);
        $hctUnit->setShowLabel(false);
        $fields[]  = $hctUnit;
        unset($flds);       
        
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodLabelS;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId','', 'required');                
        $flds[]           = $learningPeriodId;

        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriod->setReadOnly(true);
        $flds[]           = $learningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);
        
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseId', 'curricularComponentId' => 'curricularComponentId'), true);
        $validators[]          = new MRequiredValidator('curricularComponentId');
        $flds[]                = $curricularComponentId;

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);
        
        $fields[] = new Separator('');
        $fields[] = new MButton('btnList', null . _M('List', $module));       
        $fields[] = new Separator('<hr>');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.CurricularComponentUnblockDescription.focus();');

    }
    

    /**
     * Event triggered when user clicks the list button
     **/
    public function btnList_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCourseScheduleShockUnblock');


        $filters->curricularComponentId      = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId                   = $this->courseId->value;
        $filters->courseVersion              = $this->courseVersion->value;

        $busCurr                             = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums                         = $busCurr->searchCurriculum($filters);

        $data->curriculumId                  = $curriculums[0][0];

        $msg = _M('@1 records inserted', $module,$ok);

        $btn2     = new MButton('btnInvertSelection', _M('Invert selection', $module), 'invertSelection()');
        $this->addField($btn2);

        //$ok  = $business->runInsuficientConditionCurricularComponentCancellation($data->periodId);
        $gridData = $business->selectCourseContracts($data);

        $grid     = $MIOLO->getUI()->getGrid($module, 'GrdCourseScheduleShockUnblock', null);
        $grid->setData($gridData);
        $this->addField($grid);

        $this->addField(new Separator(''));

        //###GRID///is_array($gridData) ? $grid->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        if ( is_array($gridData) )
        {
            $script .= "    function invertSelection()\n    {\n";
            $x = 0;

            foreach ( $gridData as $row )
            {
                $script .= '        if ( document.' . $this->name . '[\'selectgridCourseScheduleShockUnblock[' . $x . ']\'].checked == true )' . "\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridCourseScheduleShockUnblock[' . $x . ']\'].checked = false;' . "\n";
                $script .= '        }' . "\n        else\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridCourseScheduleShockUnblock[' . $x . ']\'].checked = true;' . "\n";
                $script .= '        }' . "\n";
                $x++;
            }

            $script .= "    }\n";
            $script .= "    invertSelection();";
            $this->page->addJsCode($script);

            $this->toolBar->enableButton('tbBtnSave');
        }

        //$btn1[]     = new MButton('btnSave', _M('Run', $module));
        //$div1       = new MDiv('div1', $btn1, null, 'center');
        
        
        //$fields[] = $div1;
        //$fields[] = new Separator('');
        //$this->addField($fields);
        
        /*if ( $ok )
        {
            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }*/
    }

    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busContract = $MIOLO->getBusiness($module, 'BusContract');

        $data   = $this->getTypesData();

        $contracts = $this->getFormValue('selectgridCourseScheduleShockUnblock', $this->selectgridCourseScheduleShockUnblock);

        $opts['contracts'] = urlencode(serialize($contracts));

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $opts['function'] = $function;
        $opts['event']    = 'tbBtnSave_confirm';

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        unset($opts['event']);

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $msg = _M('Are you sure that want to insert schedule shock unblock to this pupils, this learning period and this curricular components', $module) . '?' ;

        $msg .= '<br><br>' . $data->learningPeriodDescription . '<br><br>' . _M('Curricular component', $module). ': ' . $data->curricularComponentName . '<br><br>';

        $msg .= _M('Pupils',$module).':<br>';

        foreach ( $contracts as $key1 => $value1 )
        {
            $getContract = $busContract->getContract($value1);

            $msg .= '<br>' . $getContract->personName;
        }

        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    public function tbBtnSave_confirm($sender=NULL)
    {
        $MIOLO                               = MIOLO::getInstance();
        $module                              = MIOLO::getCurrentModule();
        $action                              = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCourseScheduleShockUnblock');
        $cnt                                 = 0;

        $data                                = $this->getTypesData();

        $filters->curricularComponentId      = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId                   = $this->courseId->value;
        $filters->courseVersion              = $this->courseVersion->value;

        $busCurr                             = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums                         = $busCurr->searchCurriculum($filters);

        if ( is_array($curriculums) && ( count($curriculums) > 0 ) )
        {
            $data->curriculumId                  = $curriculums[0][0];

            //$contracts = $this->getFormValue('selectgridCourseScheduleShockUnblock', $this->selectgridCourseScheduleShockUnblock);

            $contracts = unserialize(urldecode(stripslashes(MIOLO::_request('contracts'))));

            if ( count($contracts) > 0 )
            {
                foreach ( $contracts as $id => $value )
                {
                    if ($business->insertCourseScheduleShockUnblock($data, $value))
                    {
                        $cnt++;
                    }
                }
            }

            if ( $cnt > 0 )
            {
                $msg = _M('@1 records inserted', $module,$cnt);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg  = _M('Error executing requested operation.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            //Nao existe o curriculo
            $msg  = _M('No exist one curriculum to this course and this curricular component', $module).'.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->courseId      = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId        = $this->turnId->value;
        $data->unitId        = $this->unitId->value;

        $data->learningPeriodDescription = $this->learningPeriod->value;
        $data->curricularComponentName   = $this->curricularComponentName->value;

        return $data;
    }

}

?>
