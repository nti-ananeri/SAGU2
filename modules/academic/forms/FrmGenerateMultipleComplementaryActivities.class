<?php

/**
 * Complementary Activities form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *         Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate multiple complementary activities
 **/
class FrmGenerateMultipleComplementaryActivities extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[]       = $toolBar;

        $courseId       = $MIOLO->_request('courseId');
        $courseVersion  = $MIOLO->_request('courseVersion');
        $turnId         = $MIOLO->_request('turnId');
        $unitId         = $MIOLO->_request('unitId');

        $groupId        = $MIOLO->_request('groupId');
        $groupName      = $MIOLO->_request('groupGroupName');

        $businessCourse = $this->manager->getBusiness($module,'BusCourse');
        $businessGroup  = $this->manager->getBusiness($module,'BusGroup');
        $businessCurricularComponent = $this->manager->getBusiness($module,'BusCurricularComponent');
        $businessTurn   = $this->manager->getBusiness('basic','BusTurn');
        $businessUnit   = $this->manager->getBusiness('basic','BusUnit');

        $courseData     = $businessCourse->getCourse($courseId);
        $turnData       = $businessTurn->getTurn($turnId);
        $unitData       = $businessUnit->getUnit($unitId);

        $fields[]  = new MTextLabel('lbcourseId', $courseId . ' - ' . $courseData->shortName, _M('Course id', $module));

        $fields[]  = new MTextLabel('lbcourseVersion', $courseVersion, _M('Course version', $module));
        $fields[]  = new MTextLabel('lbturnId', $turnId . ' - ' . $turnData->description, _M('Turn id', $module));
        $fields[]  = new MTextLabel('lbunitId', $unitId . ' - ' . $unitData->description, _M('Unit id', $module));

        $fields[]  = new MTextLabel('lbofferId', $groupId . ' - ' . $groupName, _M('Offered curricular component',$module));

        $fields[]  = new MHiddenField('courseId', $courseId);
        $fields[]  = new MHiddenField('courseVersion', $courseVersion);
        $fields[]  = new MHiddenField('turnId', $turnId);
        $fields[]  = new MHiddenField('unitId', $unitId);

        $fields[]  = new MHiddenField('groupId', $groupId);
        $fields[]  = new MHiddenField('groupName', $groupName);

        $groupData = $businessGroup->getGroup($groupId);

        if ( is_object($groupData) )
        {
            $curricularComponentData         = $businessCurricularComponent->getCurricularComponent($groupData->curriculumCurricularComponentId, $groupData->curriculumCurricularComponentVersion);

            $numberCreditsPerHour = SAGU::calcNumber($curricularComponentData->academicCredits . '* 1.00' .  '/' . $curricularComponentData->academicNumberHours); // Use in javaScript
        }

        $academicNumberHours = new MHiddenField('academicNumberHours', $curricularComponentData->academicNumberHours);
        $fields[] = $academicNumberHours;

        $curriculumCurricularComponent = new MHiddenField('curriculumCurricularComponent', $groupData->curriculumCurricularComponentId);
        $fields[] = $curriculumCurricularComponent;


        $complementaryActivitiesDescription = new MTextField('complementaryActivitiesDescription', $this->getFormValue('complementaryActivitiesDescription', $data->complementaryActivitiesDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $complementaryActivitiesDescription;
        $validators[] = new MRequiredValidator('complementaryActivitiesDescription');

        $businessPeriod = $this->manager->getBusiness($module,'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;

        $totalHours = new MTextField('totalHours', $this->getFormValue('totalHours', $data->totalHours), _M('Total hours', $module), FIELD_TIME_SIZE);
        $fields[] = $totalHours;
        $validators[] = new MFloatValidator('totalHours', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');

        $totalHours->addAttribute('onChange', 'calcCredits(' . $numberCreditsPerHour . ')');

        $this->page->addJSCode("function calcCredits(numberCreditsPerHour)
                                {
                                    var total;

                                    totalHours    = document.getElementsByName('totalHours')[0];
                                    totalCredits1 = document.getElementsByName('totalCredits')[0];

                                    total = totalHours.value * numberCreditsPerHour;

                                    totalCredits1.value = total;
                                }");



        $totalCredits = new MTextField('totalCredits', $this->getFormValue('totalCredits', $data->totalCredits), _M('Credits total', $module), 13);
        $fields[] = $totalCredits;
        $validators[] = new MRequiredValidator('totalCredits');
//         $validators[] = new MFloatValidator('totalCredits', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');

        $degree = new MTextField('degree', $this->getFormValue('degree', $data->degree), _M('Grade', $module), 13);
        $fields[] = $degree;
        $validators[] = new MFloatValidator('degree', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $concept = new MTextField('concept', $this->getFormValue('concept', $data->concept), _M('Concept', $module), 13);
        $fields[] = $concept;

        $businessCC = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategory');
        $dataCC = $businessCC->listComplementaryActivitiesCategory();
        $complementaryActivitiesCategoryId = new MComboBox('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Complementary activity category id',$module), $dataCC );
        $fields[] = $complementaryActivitiesCategoryId;
        $validators[] = new MRequiredValidator('complementaryActivitiesCategoryId');

//         $groupLabel = new MText('groupLabel', _M('Offered curricular component',$module) . ':');
//         $groupLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $groupLabel->setClass('m-caption m-caption-required');
// 
//         $groupId = new MLookupTextField('groupId', $this->getFormValue('groupId', $data->groupId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'groupGroupName', $module, 'Group', null, null, true);
//         $validators[] = new MRequiredValidator('groupId', _M('Offered curricular component',$module));
// 
//         $groupGroupName = new MTextField('groupGroupName', strlen((string)$this->getFormValue('groupGroupName', $data->groupGroupName)) > 0 ? $this->getFormValue('groupGroupName', $data->groupGroupName) : $getGroup->groupGroupName , '', FIELD_DESCRIPTION_SIZE);
//         $groupGroupName->setJsHint(_M('Offered curricular component name',$module));
//         $groupGroupName->setReadOnly(true);
// 
//         $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupId, $groupGroupName));
//         $hctGroup->setShowLabel(true);
//         $fields[]  = $hctGroup;

        $fields[] = new Separator('');

        $fields[] = new MButton('btnGenerate', _M('Generate', $module));

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $data             = $this->getTypesData();
        $business         = $MIOLO->getBusiness($module, 'BusComplementaryActivities');
        $businessContract = $MIOLO->getBusiness($module, 'BusContract');
        $businessComplementaryRules = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');
        $business2        = $MIOLO->getBusiness($module, 'BusGenerateMultipleComplementaryActivities');

        $curriculumCurricularComponent = MIOLO::_request('curriculumCurricularComponent');
        $academicNumberHours           = MIOLO::_request('academicNumberHours');
        $groupId                       = MIOLO::_request('groupId');
        $groupGroupName                = MIOLO::_request('groupName');

        $filters3->curricularComponentId             = $curriculumCurricularComponent;
        $filters3->complementaryActivitiesCategoryId = $data->complementaryActivitiesCategoryId;

        $searchCompRules = $businessComplementaryRules->searchComplementaryActivitiesCategoryRules($filters3);

        $pupils = unserialize(urldecode(stripslashes(MIOLO::_request('pupils'))));

        $ok = true;

        foreach ( $pupils as $pupilContract ) // Percore o vetor de pessoas da atividade complementar
        {
            $dataContract   = $businessContract->getContract($pupilContract);

            $filters1->contractId             = $pupilContract;
            $searchComplementaryActivities    = $business->searchComplementaryActivities($filters1);

            $totalActivitiesRegitered         = 0; //total de atividades complementares
            $totalActivitiesRegiteredCategory = 0; //total de atividades complementares na categoria

            if ( is_array($searchComplementaryActivities) && sizeof($searchComplementaryActivities) )
            {
                //A pessoa possui atividades complementares cadastradas
                for ($x=0; $x < sizeof($searchComplementaryActivities); $x++)
                {
                    $totalActivitiesRegitered += $searchComplementaryActivities[$x][3];

                    if ( $searchComplementaryActivities[8] == $data->complementaryActivitiesCategoryId )
                    {
                        //Somara a $totalActivitiesRegiteredCategory se as categorias forem iguais
                        $totalActivitiesRegiteredCategory += $searchComplementaryActivities[$x][3];
                    }
                }

                //Verifica se a pessoa ira ultrapassar o maximo possivel com estas horas para categoria
                if ( is_array($searchCompRules) &&(sizeof($searchCompRules) > 0) )
                {
                    //Existe maximo permitido cadastrado
                    if ( ($totalActivitiesRegiteredCategory + $data->totalHours) > $searchCompRules[0][7])
                    {
                        $msgCategory[] = $dataContract->personName;
                        $ok = false;
                    }
                }
                else
                {
                    //Nao existe maximo permitido cadastrado
                }

                //Verifica se a pessoa ira ultrapassar o maximo de atividades complementares
                if ( ($totalActivitiesRegitered+$data->totalHours) > $academicNumberHours )
                {
                    //Ultrapassa total permitido para atividades complementares
                    $msgTotal[] = $dataContract->personName;
                    $ok = false;
                }
                else
                {
                    //Nao ultrapassa total permitido para atividades complementares
                }
            }
        }

        if ( $ok == true )
        {
            $x = 0;

            $business2->beginTransaction();

            foreach ( $pupils as $value )
            {
                $data->contractId = $value;

                $enrollId = $business->getPupilGroupEnroll($data->groupId, $data->contractId);

                if (strlen((string)$enrollId) == 0)
                {
                    $enrollId = $business->insertPupilGroupEnroll($data);
                }

                $data->enrollId = $enrollId;

                $ok  = $business->insertComplementaryActivities($data);

                if ( $ok )
                {
                    $x++;
                }
            }

            $business2->commit();

            $msg = _M('@1 records inserted', $module, $x);

            if ( $x > 0 )
            {
                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleComplementaryActivitiesPupils';
                $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg  = _M('Error executing requested operation. Verify if complementary activities are in the course curriculum.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {

            if ( sizeof($msgCategory) > 0 )
            {
                $msg = _M('The pupils', $module) . ' '. implode(', ', $msgCategory) . ' ' . _M('will be pass the maximun permited to this category', $module) . '.<br>' ;
            }

            if ( sizeof($msgTotal) > 0 )
            {
                $msg .= _M('The pupils', $module) . ' '. implode(', ', $msgTotal) . ' ' . _M('will be pass the maximun permited to this complementary activities from yours courses', $module) . '.<br>' ;
            }

            $msg .= _M('No pupil was inserted because of the problems above') . '.<br>';

            $opts['courseId']       = $data->courseId;
            $opts['courseVersion']  = $data->courseVersion;
            $opts['turnId']         = $data->turnId;
            $opts['unitId']         = $data->unitId;
            $opts['pupils']         = urlencode(serialize($pupils));
            $opts['groupId']        = $data->groupId;
            $opts['groupGroupName'] = $groupGroupName;

            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdComplementaryActivities();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->complementaryActivitiesDescription->value;
        $data->contractId  = $this->contractId->value;
        $data->groupId     = $this->groupId->value;

        $data->courseId      = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId        = $this->turnId->value;
        $data->unitId        = $this->unitId->value;

        return $data;
    }
}

?>
