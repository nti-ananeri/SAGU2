<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 11/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the sprInscription table
 */
class FrmCourseEnrolledPupils extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('List course enrolled pupils',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $periodId      = MIOLO::_request('periodId');
        $unitId        = MIOLO::_request('unitId');
        $courseId      = MIOLO::_request('courseId');
        $courseVersion = MIOLO::_request('courseVersion');
        $turnId        = MIOLO::_request('turnId');
        $returnPath    = urldecode(stripslashes(MIOLO::_request('returnPath')));
        $returnData    = unserialize(urldecode(stripslashes(MIOLO::_request('returnData'))));

        //pesquisa os dados
        $business = $MIOLO->getBusiness($module, 'BusPupilListing');
        $data     = $business->getCourseEnrolledPupils($periodId, $unitId, $courseId, $courseVersion, $turnId);

        if ( count($data) > 0 )
        {
            foreach ( $data as $row )
            {
                $emails[][0] = $row[3];
            }

            foreach ( $data as $key => $row )
            {
                $signature1[$key][0] = $row[1];
                $signature1[$key][1] = $row[2];
            }
        }

        //registrar em seção do miolo(aki)(daniel)

        $session   = $MIOLO->session;

        if ( !($session->IsRegistered('signature1')) )
        {
            $session->SetValue('signature1', serialize($signature1));

            $session->SetValue('emails', serialize($emails));

            $signature1 = $session->IsRegistered('signature1') ? unserialize($session->GetValue('signature1')) : null;

            $emails = $session->IsRegistered('emails') ? unserialize($session->GetValue('emails')) : null;
        }

        //cria os atalhos para emails e assinaturas
        $actionEmail = $MIOLO->getActionURL('basic', 'main:report:emailList', null, array('personId' => $personId));

        $optsSignature = array('event' => 'signatureList',
                               'periodId'=>$periodId);

        $actionSignature = $MIOLO->getActionURL($module, 'main:report:listcourseenrolledpupils', null, $optsSignature);

        $flds[] = new MOpenWindow('lnk1', _M('E-Mail list', $module), $actionEmail);
        $flds[] = new MSeparator();

        $flds[] = new MLink('lnk2', _M('Signature list', $module), $actionSignature);
        $flds[] = new MSeparator();


        $bsg1        = new BaseGroup('bsg1', null, $flds, 'horizontal');
        $bsg1->width = '70%';
        $bsg1->align = 'center';
        $bsg1->addboxstyle('align', 'center');
        $div1        = new MDiv('div1', $flds, null, 'align=center');
        $fields[]    = $div1;
        unset($flds);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdListCourseEnrolledPupils', null);
        $grdResults->setData($data);

        $fields[] = $grdResults;

        if ( strlen((string)$returnPath) > 0 )
        {
            $fields[] = new Separator();
            $btn1     = new MButton('btnBack', _M('Back', $module), $MIOLO->getActionURL($module, $returnPath, null, array('filter' => urlencode(serialize($returnData['filter'])), 'reportOption' => $returnData['reportOption'])));
            $div1     = new MDiv('div1', $btn1, null, 'align=center');
            $fields[] = $div1;
            $fields[] = new Separator();
        }

        $this->setFields($fields);

    }

    public function signatureList()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //$session = $MIOLO->session;

        //$signature1 = $session->IsRegistered('signature1') ? unserialize($session->GetValue('signature1')) : null;

        $session   = $MIOLO->session;
        //$session->SetValue('emails', serialize($emails));

        //$session->SetValue('signature1', serialize($signature1));

        $signature1 = $session->IsRegistered('signature1') ? unserialize($session->GetValue('signature1')) : null;

        $emails = $session->IsRegistered('emails') ? unserialize($session->GetValue('emails')) : null;

      //  $periodId   = MIOLO::_request('periodId');

//        $pupilSignatureCourse['periodId'] = $periodId;

  //      $MIOLO->getClass($module, 'RptSignature');
    //    $report = new RptSignature($pupilSignatureCourse);
    }


}

?>
