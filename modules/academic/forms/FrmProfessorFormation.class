<?php

/**
 * Professor formation form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a professor formation record
 **/
class FrmProfessorFormation extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            // obtain primary key values
            $professorId = $_GET['professorId'] ? $_GET['professorId'] : $_POST['professorId'];
            $fields[]    = new MHiddenField('professorId', $professorId);

            $formationLevelId = $_GET['formationLevelId'] ? $_GET['formationLevelId'] : $_POST['formationLevelId'];
            $fields[]         = new MHiddenField('formationLevelId', $formationLevelId);

            $externalCourseId = $_GET['externalCourseId'] ? $_GET['externalCourseId'] : $_POST['externalCourseId'];
            $fields[]         = new MHiddenField('externalCourseId', $externalCourseId);

            $business = $MIOLO->getBusiness($module,'BusProfessorFormation');
            $data = $business->getProfessorFormation($professorId, $formationLevelId, $externalCourseId);

            $fields[] = new MTextLabel('professorId', $professorId, _M('Professor id',$module));
            $fields[] = new MTextLabel('professorName', $data->professorName, _M('Professor name',$module));
            $fields[] = new MTextLabel('formationLevelId', $formationLevelId, _M('Formation level id',$module));
            $fields[] = new MTextLabel('formationLevelDescription', $data->formationLevelDescription, _M('Formation level description',$module));
            $fields[] = new MTextLabel('externalCourseId', $externalCourseId, _M('External course id',$module));
            $fields[] = new MTextLabel('externalCourseName', $data->externalCourseName, _M('External course name',$module));

            $this->page->onLoad('document.' . $this->name . '.beginDate.focus();');
        }
        else
        {
            /*
             * MLookupTextField class constructor prototype:
             *
             * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
             *                      $hint = '', $validator = null,     $related = '', $module       = '',
             *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
             */
            //Professor
            $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
            $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
            $professorLabel->setClass('m-caption m-caption-required');

            $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
            $professorId->setJsHint(_M('Enter the professor code',$module));
            $validators[] = new MIntegerValidator('professorId', _M('Professor',$module), 'required');

            $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', FIELD_DESCRIPTION_SIZE);
            $professorName->setReadOnly(true);
            $professorName->setJsHint(_M('Professor name',$module));

            $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
            $hctProfessor->setShowLabel(true);
            $fields[]  = $hctProfessor;

            //Professor
            $formationLevelLabel = new MText('formationLevelLabel', _M('Formation level',$module).':');
            $formationLevelLabel->setWidth(FIELD_CONTAINER_SIZE);
            $formationLevelLabel->setClass('m-caption m-caption-required');

            $formationLevelId = new MLookupTextField('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'formationLevelDescription', 'academic', 'FormationLevel', null, null, true);
            $formationLevelId->setJsHint(_M('Enter the formation level code',$module));
            $validators[] = new MIntegerValidator('formationLevelId', _M('Formation level',$module), 'required');

            $formationLevelDescription = new MTextField('formationLevelDescription', $this->getFormValue('formationLevelDescription', $data->formationLevelDescription), '', FIELD_DESCRIPTION_SIZE);
            $formationLevelDescription->setReadOnly(true);
            $formationLevelDescription->setJsHint(_M('Formation level description',$module));

            $hctFormatioLevel = new MHContainer('hctFormatioLevel', array($formationLevelLabel, $formationLevelId, $formationLevelDescription));
            $hctFormatioLevel->setShowLabel(true);
            $fields[]  = $hctFormatioLevel;

            //External Course
            $externalCourseLabel = new MText('externalCourseLabel', _M('External course',$module).':');
            $externalCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
            $externalCourseLabel->setClass('m-caption m-caption-required');

            $externalCourseId = new MLookupTextField('externalCourseId', $this->getFormValue('externalCourseId', $data->externalCourseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'externalCourseName', 'academic', 'ExternalCourse', null, null, true);
            $externalCourseId->setJsHint(_M('Enter the external course code',$module));
            $validators[] = new MIntegerValidator('externalCourseId', _M('External course',$module), 'required');

            $externalCourseName = new MTextField('externalCourseName', $this->getFormValue('externalCourseName', $data->externalCourseName), '', FIELD_DESCRIPTION_SIZE);
            $externalCourseName->setReadOnly(true);
            $externalCourseName->setJsHint(_M('External course name',$module));

            $hctExternalCourse = new MHContainer('hctExternalCourse', array($externalCourseLabel, $externalCourseId, $externalCourseName));
            $hctExternalCourse->setShowLabel(true);
            $fields[]  = $hctExternalCourse;

            $this->page->onLoad('document.' . $this->name . '.professorId.focus();');
        }

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        //$validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', '', 'required') );
        $fields[] = $beginDate;

        $dateConclusion = new MCalendarField('dateConclusion', $this->getFormValue('dateConclusion', $data->dateConclusion), _M('Conclusion date',$module), FIELD_DATE_SIZE);
        $dateConclusion->setJsHint(_M('Enter the date conclusion',$module));
        $dateConclusion->setValidator( new MDATEDMYValidator('dateConclusion', '', 'required') );
        $fields[] = $dateConclusion;

        //Institution
        $institutionLabel = new MText('institutionLabel', _M('Institution',$module).':');
        $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $institutionLabel->setClass('m-caption m-caption-required');

        $institutionId = new MLookupTextField('institutionId', $this->getFormValue('institutionId', $data->institutionId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionName', 'basic', 'LegalPersonInstitution', null, null, true);
        $institutionId->setJsHint(_M('Enter the institution code',$module));
        $validators[] = new MRequiredValidator('institutionId', _M('Institution',$module));

        $institutionName = new MTextField('institutionName', $this->getFormValue('institutionName', $data->institutionName), '', FIELD_DESCRIPTION_SIZE);
        $institutionName->setReadOnly(true);
        $institutionName->setJsHint(_M('Institution name',$module));

        $hctInstitution = new MHContainer('hctInstitution', array($institutionLabel, $institutionId, $institutionName));
        $hctInstitution->setShowLabel(true);
        $fields[]  = $hctInstitution;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'professorId'      => MIOLO::_request('professorId'),
                        'formationLevelId' => MIOLO::_request('formationLevelId'),
                        'externalCourseId' => MIOLO::_request('externalCourseId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('professorIdS'      => MIOLO::_request('professorId'),
                        'formationLevelIdS' => MIOLO::_request('formationLevelId'),
                        'externalCourseIdS' => MIOLO::_request('externalCourseId'));

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusProfessorFormation');
        $pk = new AcdProfessorFormation();
        $ok = $business->deleteProfessorFormation($this->professorId->value, $this->formationLevelId->value, $this->externalCourseId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusProfessorFormation');

        if ( $function == 'update' )
        {
            $ok  = $business->updateProfessorFormation($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertProfessorFormation($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('professorIdS'      => $data->professorId/*,
                          'formationLevelIdS' => $data->formationLevelId,
                          'externalCourseIdS' => $data->externalCourseId*/);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdProfessorFormation();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    }

}

?>
