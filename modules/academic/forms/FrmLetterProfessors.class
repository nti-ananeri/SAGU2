<?php

/**
 * Letter professor report form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/02/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmLetterProfessors extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Letter professors', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $toolbar = new MToolBar('toolbar');
        $toolbar->disableButton('tbBtnDelete');
        $toolbar->disableButton('tbBtnSave');
        $toolbar->disableButton('tbBtnSearch');

        $data = unserialize(urldecode(stripslashes(MIOLO::_request('letterData'))));

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $action, null, array('event' => 'bookmark'));
        $toolbar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Letter professors', $action, 'letterProfessors-16x16.png', true);
        }
        //fim favoritos


        $fields[] = $toolbar;

        $fields[] = new MSeparator();

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Enter the period code', $module));
        $fields[]       = $periodId;
        $validators[]   = new MRequiredValidator('periodId');

        $oficioNumberS = new MTextField('oficioNumberS', $this->getFormValue('oficioNumberS', $data->oficioNumberS), _M('Document number', $module), 6);
        $oficioNumberS->setJsHint(_M('Enter the document number',$module));
        $fields[] = $oficioNumberS;
        $validators[] = new MRequiredValidator('oficioNumberS');

        $professorLabel = new MText('professorLabel', _M('Professor', $module));
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $professorIdS = new MLookupTextField('professorIdS', $this->getFormValue('professorIdS', $data->professorIdS), _M('Professor id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'physicalPersonProfessor', null, null, true);
        //$fields[] = $professorIdS;

        $professorNameS = new MTextField('professorNameS', $this->getFormValue('professorNameS',$data->professorNameS), _M('Professor name', $module), FIELD_DESCRIPTION_SIZE);
        $professorNameS->setJsHint(_M('Enter the professor name',$module));
        $professorNameS->setReadOnly(true);
        //$fields[] = $professorNameS;
        
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorIdS, $professorNameS));
        $hctProfessor->setShowLabel(false);
        $fields[] = $hctProfessor;


        $messagesType = array( array(_M('Only one professor', $module), 1),
                               array(_M('All professors from selected period', $module), 2)
                             );

        $typeGenerationLabel = new MText('typeGenerationLabel', _M('Type Generation',$module));
        $typeGenerationLabel->setWidth('132');

        $typeGenerationS = $this->GetFormValue('typeGenerationS',$data->typeGenerationS);
        $typeGenerationS = new MRadioButtonGroup('typeGenerationS', '', $messagesType, ($data->typeGenerationS > 0) ? $data->typeGenerationS : 1 , null, 'horizontal');
        $typeGenerationS->SetShowLabel(false);
        //$validators[] = new MRequiredValidator('typeGenerationS');

        $hctTypeGenerationS = new MHContainer('hctTypeGenerationS', array($typeGenerationLabel, $typeGenerationS));
        $fields[]  = $hctTypeGenerationS;

        $fields[] = new MSeparator();

        $fields[] = new MButton('BtnPrint',_M('Generate report',$module));

        $fields[] = new MSeparator();

        //$this->setValidators($validators);
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click print
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData(); //get form's data

        $business    = $MIOLO->getBusiness($module, 'BusLetterProfessors');
        $reportData  = $business->listDateToLetterProfessor($data->periodId, $data->professorIdS);

        if( ((count($reportData) > 0) && ($data->typeGenerationS == '1')) || (($data->typeGenerationS == '2')))
        {
            $MIOLO->getClass($module, 'RptLetterProfessors'); //get the class RptLetterProfessors

            $report = new RptLetterProfessors($data); //instanciate the class
        }
        else
        {
            $vars = array('letterData' => urlencode(serialize($data)));
            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $vars);
            $msg     = 'O(A) professor(a) selecionado(a) não ministra(ou) aula(s) neste período selecionado.';
            $MIOLO->Information($msg, $gotoYes);

        }
    }
}

?>
