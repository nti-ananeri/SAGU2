<?php

/**
 * TestEndCourseContract form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a testEndCourseContract
 **/
class FrmTestEndCourseContract extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $testEndCourseTypeId = MIOLO::_request('testEndCourseTypeId');
            $contractId            = MIOLO::_request('contractId');
            $testEndCourseDate    = MIOLO::_request('testEndCourseDate');

            $business = $MIOLO->getBusiness($module,'BusTestEndCourseContract');
            $data = $business->getTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate);
            
            $busContract = $MIOLO->getBusiness($module, 'BusContract');
            $contractData = $busContract->getContract($data->contractId);
            
            $data->contractPersonId = $contractData->personId;
            $data->contractCourseId = $contractData->courseId;
            $data->contractCourseVersion = $contractData->courseVersion;
            $data->contractTurnId = $contractData->turnId;
            $data->contractUnitId = $contractData->unitId;
            
            $busPerson = $MIOLO->getBusiness('basic', 'BusPerson');
            $personData = $busPerson->getPerson($contractData->personId);
            
            $data->contractPersonName = $personData->name;
            
            $busCourse = $MIOLO->getBusiness($module, 'BusCourse');
            $courseData = $busCourse->getCourse($contractData->courseId);
            
            $data->contractCourseName = $courseData->name;
            
            $busTestEndCourseType = $MIOLO->getBusiness($module, 'BusTestEndCourseType');
            $testEndCourseTypeData = $busTestEndCourseType->getTestEndCourseType($data->testEndCourseTypeId);
            
            $data->testEndCourseTypeDescription = $testEndCourseTypeData->description;
        }

        $testEndCourseTypeLabel = new MText('testEndCourseTypeLabel', _M('Course end test type',$module) . ':');
        $testEndCourseTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $testEndCourseTypeLabel->setClass('m-caption m-caption-required');
        $flds[]                = $testEndCourseTypeLabel;

        $testEndCourseTypeId = new MLookupTextField('testEndCourseTypeId', $this->getFormValue('testEndCourseTypeId', $data->testEndCourseTypeId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'testEndCourseTypeDescription', $module, 'TestEndCourseType', null, null, true);
        $testEndCourseTypeId->setJsHint(_M('Enter the course end test type code',$module));
        $function == 'update' ? $testEndCourseTypeId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('testEndCourseTypeId', _M('Course end test type',$module), 'required');
        $flds[] = $testEndCourseTypeId;

        $testEndCourseTypeDescription = new MTextField('testEndCourseTypeDescription', $this->getFormValue('testEndCourseTypeDescription', $data->testEndCourseTypeDescription), '', FIELD_DESCRIPTION_SIZE);
        $testEndCourseTypeDescription->setReadOnly(true);
        $testEndCourseTypeDescription->setJsHint(_M('Description',$module));
        $flds[] = $testEndCourseTypeDescription;

        $hctTestEndCourseType = new MHContainer('hctTestEndCourseType', $flds);
        $hctTestEndCourseType->setShowLabel(true);
        $fields[]  = $hctTestEndCourseType;
        unset($flds);
        
        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $function == 'update' ? $contractPersonId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('contractPersonId', _M('Person',$module), 'optional');
        $flds[]           = $contractPersonId;
         $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]                = $contractLabel;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $function == 'update' ? $contractId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), '', FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Description',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId;        


        $testEndCourseDate = new MCalendarField('testEndCourseDate', $this->getFormValue('testEndCourseDate',$data->testEndCourseDate), _M('Course end test date',$module), FIELD_DATE_SIZE);
        $testEndCourseDate->setJsHint(_M('Enter the course end test date',$module));
        $function == 'update' ? $testEndCourseDate->setReadOnly(true) : null;
        $testEndCourseDate->setValidator(new MDATEDMYValidator('testEndCourseDate', _M('Course end test date',$module), 'required'));

        $fields[]    = $testEndCourseDate;
        
        $excusedLabel = new MText('excusedLabel', _M('Is it excused',$module) . '?');
        $excusedLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $excusedLabel;

        $excusedOptions = array(
                                      array(_M('Yes', $module), 't'),
                                      array(_M('No', $module), 'f')
                                     );

        $excused = new MRadioButtonGroup('excused', null, SAGU::listTrueFalse(1), strlen((string)$this->getFormValue('excused', $data->excused)) > 0 ? $this->getFormValue('excused', $data->excused) : DB_FALSE, null, 'horizontal');
        $excused->setShowLabel(false);
        $flds[] = $excused;

        $hctExcused = new MHContainer('hctExcused', $flds);
        $fields[] = $hctExcused;
        unset($flds);
        
        $isPresentLabel = new MText('isPresentLabel', _M('Is it present',$module) . '?');
        $isPresentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isPresentLabel;

        $isPresentOptions = array(
                                      array(_M('Yes', $module), 't'),
                                      array(_M('No', $module), 'f')
                                     );

        $isPresent = new MRadioButtonGroup('isPresent', null, SAGU::listTrueFalse(1), strlen((string)$this->getFormValue('isPresent', $data->isPresent)) > 0 ? $this->getFormValue('isPresent', $data->isPresent) : DB_TRUE, null, 'horizontal');
        $isPresent->setShowLabel(false);
        $flds[] = $isPresent;

        $hctIsPresent = new MHContainer('hctIsPresent', $flds);
        $fields[] = $hctIsPresent;
        unset($flds);

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $this->page->onLoad('document.' . $this->name . '.testEndCourseContractDescription.focus();');

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'               => 'tbBtnDelete_confirm',
                        'function'            => 'delete',
                        'testEndCourseTypeId' => MIOLO::_request('testEndCourseTypeId'),
                        'contractId'          => MIOLO::_request('contractId'),
                        'testEndCourseDate'   => MIOLO::_request('testEndCourseDate') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('testEndCourseTypeIdS'=>MIOLO::_request('testEndCourseTypeId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $testEndCourseTypeId = MIOLO::_request('testEndCourseTypeId');
        $contractId           = MIOLO::_request('contractId');
        $testEndCourseDate   = MIOLO::_request('testEndCourseDate');

        $business = $MIOLO->getBusiness($module, 'BusTestEndCourseContract');
        $ok = $business->deleteTestEndCourseContract($testEndCourseTypeId, $contractId, $testEndCourseDate);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusTestEndCourseContract');

        if ( $function == 'update' )
        {
            $ok  = $business->updateTestEndCourseContract($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertTestEndCourseContract($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('testEndCourseTypeIdS'=>$data->testEndCourseTypeId,
                          'contractIdS'=>$data->contractId,
                          'testEndCourseDateS'=>$data->testEndCourseDate);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdTestEndCourseContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }

}

?>
