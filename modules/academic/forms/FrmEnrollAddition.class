<?php

/**
 * Enroll contract form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/02/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollAddition extends MForm
{
    var $enrollData;

    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Enroll addition', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $fields[] = new MHiddenField('limbo', '');

        $business = $MIOLO->getBusiness($module, 'BusEnrollAddition');
        /*
         * Formulario para os atendentes
         */
        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');

        $contractPersonLabel = new MText('contractLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'ActivePersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Enter the person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]        = $contractLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'ActiveContract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]     = $contractId;
        $validators[]     = new MRequiredValidator('contractId', _M('Contract',$module), 'required');

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Enter the course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Enter the course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Enter the course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $fields[] = new MHiddenField('contractTurnId', $this->contractTurnId->value);
        $fields[] = new MHiddenField('contractUnitId', $this->contractUnitId->value);

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]              = $learningPeriodLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period', $module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));
        $flds[]           = $learningPeriodId;

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(false);
        $fields[]          = $hctLearningPeriod;
        unset($flds);

        $classLabel = new MText('classLabel', _M('Class',$module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]     = $classLabel;

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $this->enrollData->classId), _M('Class id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('className_'), $module, 'Class', null, array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $flds[]  = $classId;
        
        $className = new MTextField('className_', $this->getFormValue('className_', $this->enrollData->className), _M('Class name', $module), FIELD_DESCRIPTION_SIZE);
        $className->setReadOnly(true);
        $flds[]    = $className;
        
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;
        unset($flds);

        $contract       = $this->getFormValue('contractId');
        $learningPeriod = $this->getFormValue('learningPeriodId');
        $classId        = $this->getFormValue('classId');

/*        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), _M('Parcels number',$module), 5, _M('For the value of the added curricular component only, not for the entire enroll value.',$module));
        $parcelsNumber->setJsHint(_M('Enter the parcels number',$module));
        $validators[]  = new MRegExpValidator('parcelsNumber', '', POSSIBLE_PARCELS_NUMBER);
        $fields[]      = $parcelsNumber;
*/
        /*
         * This field was used by SAGU 1, but it's not being considered by the finance module.
         *
         * $numberHours  = new MTextField('numberHours', $data->numberHours, _M('Number hours to payment',$module), 5, _M('The number of hours to be payed for this curricular component instead of its total duration.', $module));
         * $numberHours->setJsHint(_M('Enter the number hours',$module));
         *$fields[]     = $numberHours;
         */
        
        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]        = $divError;

        $fields[]        = new Separator();

        //Buttons
        $btn1[]     = new MButton('btnList', _M('Search', $module));
        $div1       = new MDiv('div1', $btn1);

        $fields[] = $div1;
        $fields[] = new Separator('');
        
        if ( (strlen((string)$this->getFormValue('contractId')) > 0) && 
             (strlen((string)$this->getFormValue('learningPeriodId')) > 0) )
        {
            $data->contractId       = $this->getFormValue('contractId');
            $data->classId          = $this->getFormValue('classId');
            $data->periodId         = $this->getFormValue('periodId');
            $data->learningPeriodId = $this->getFormValue('learningPeriodId');
//            $data->parcelsNumber    = $this->getFormValue('parcelsNumber');

            $business      = $MIOLO->getBusiness($module, 'BusContract');
            $contractData  = $business->getContract($data->contractId);

            if ( strlen((string)$contractData->conclusionDate) > 0 )
            {
                $msg = _M('This contract have all curricular components concluded',$module);

                $this->addError($msg);
            }
            else
            {
                $business = $MIOLO->getBusiness($module, 'BusEnrollAddition');
                $gridData1 = $business->listPersonEnrolls($data->contractId, $data->periodId);

                $grid1 = $MIOLO->getUI()->getGrid($module,'GrdEnrolledGroups', null);
                $grid1->setData($gridData1);

                $gridData2 = $business->getEnrollPossibilities($data->contractId, $data->learningPeriodId, $data->classId);

                $grid2 = $MIOLO->getUI()->getGrid($module,'GrdEnrollAddition', null);
                $grid2->setData($gridData2->groups);

                $fields[] = new MSeparator();
                $fields[] = new MText('enrolledGroups', '<b>' . _M('Enrolled', $module) . '</b>');
                $fields[] = $grid1;
                $fields[] = new MSeparator();
                $fields[] = new MText('enrollPossibilities', '<b>' . _M('Enroll possibilities', $module) . '</b>');
                $fields[] = $grid2;
                $fields[] = new MSeparator();
                
                if (count($gridData2->electives) > 0)
                {
                    $busCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');
                    foreach ($gridData2->electives as $electiveCurriculumId)
                    {
                        $curriculumData = $busCurriculum->getCurriculum($electiveCurriculumId);
                        
                        $electiveFields[] = new MHiddenField( 'curricularComponentGroupElectiveId_' . $electiveCurriculumId, $curriculumData->curricularComponentGroupElectiveId );
                        
                        $autoCompleteFields = array('lookGroupId_' . $electiveCurriculumId,
                                                    'lookCurricularComponentId_' . $electiveCurriculumId,
                                                    'lookCurricularComponentVersion_' . $electiveCurriculumId,
                                                    'lookCurricularComponentName_' . $electiveCurriculumId,
                                                    'limbo',
                                                    'limbo',
                                                    'lookUnit_' . $electiveCurriculumId,
                                                    'limbo',
                                                    'lookTurn_' . $electiveCurriculumId,
                                                    'limbo',
                                                    'lookWeekDay_' . $electiveCurriculumId);
                                                    
                        $filterFields = array('curricularComponentGroupElectiveId' => 'curricularComponentGroupElectiveId_' . $electiveCurriculumId, 
                                              'courseId' => 'contractCourseId', 
                                              'courseVersion' => 'contractCourseVersion',
                                              'contractId' => 'contractId',
                                              'learningPeriodId' => 'learningPeriodId');
                                              
                        $fldLookField = new MLookupField('lookField_' . $electiveCurriculumId, $this->getFormValue('lookField_' . $electiveCurriculumId), _M('Offered curricular component id',$module), null, $autoCompleteFields, $module, 'Elective', null, $filterFields );
                        
                        $fldLookGroupId = new MTextField('lookGroupId_' . $electiveCurriculumId, $this->getFormValue('lookGroupId_' . $electiveCurriculumId), _M('Offered curricular component id', $module), FIELD_ID_SIZE);
                        $fldLookGroupId->setReadOnly(true);
                        
                        $fldLookCurricularComponentId = new MTextField('lookCurricularComponentId_' . $electiveCurriculumId, $this->getFormValue('lookCurricularComponentId_' . $electiveCurriculumId), _M('Curricular component id', $module), FIELD_ID_SIZE);
                        $fldLookCurricularComponentId->setReadOnly(true);
                        
                        $fldLookCurricularComponentVersion = new MTextField('lookCurricularComponentVersion_' . $electiveCurriculumId, $this->getFormValue('lookCurricularComponentVersion_' . $electiveCurriculumId), _M('Curricular component version', $module), FIELD_ID_SIZE);
                        $fldLookCurricularComponentVersion->setReadOnly(true);
                        
                        $fldLookCurricularComponentName = new MTextField('lookCurricularComponentName_' . $electiveCurriculumId, $this->getFormValue('lookCurricularComponentName_' . $electiveCurriculumId), _M('Curricular component name', $module), FIELD_DESCRIPTION_SIZE);
                        $fldLookCurricularComponentName->setReadOnly(true);
                        
                        $fldLookUnit = new MTextField('lookUnit_' . $electiveCurriculumId, $this->getFormValue('lookUnit_' . $electiveCurriculumId), _M('Unit', $module), 20);
                        $fldLookUnit->setReadOnly(true);
                        
                        $fldLookTurn = new MTextField('lookTurn_' . $electiveCurriculumId, $this->getFormValue('lookTurn_' . $electiveCurriculumId), _M('Turn', $module), 20);
                        $fldLookTurn->setReadOnly(true);
                        
                        $fldLookWeekDay = new MTextField('lookWeekDay_' . $electiveCurriculumId, $this->getFormValue('lookWeekDay_' . $electiveCurriculumId), _M('Week day',  $module), 20);
                        $fldLookWeekDay->setReadOnly(true);
                        
                        $addButton = new MLinkButton('addButton_' . $electiveCurriculumId, '&nbsp', $MIOLO->getActionURL($module, $action, null, array('curriculumid'=>$electiveCurriculumId, 'event'=>'addition')));
                        $addButton->setText(_M('Add', $module));
                        
                        $cntLine1         = new MHContainer('cntLine1_' . $electiveCurriculumId, array($fldLookField, $fldLookGroupId, $fldLookCurricularComponentId, $fldLookCurricularComponentVersion, $fldLookCurricularComponentName));
                        $electiveFields[] = $cntLine1;
                        
                        $cntLine2         = new MHContainer('cntLine2_' . $electiveCurriculumId, array($fldLookUnit, $fldLookTurn, $fldLookWeekDay, $addButton));
                        $electiveFields[] = $cntLine2;
                        
                        $bsgElective      = new MBaseGroup('bsgElective_' . $electiveCurriculumId, $curriculumData->curricularComponentName, $electiveFields, 'vertical');
                        $fields[] = $bsgElective;
                        unset($electiveFields);
                    }
                }
            }    
        }
        
        $this->setFields($fields);
        
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    public function addition()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();
        $groupId      = MIOLO::_REQUEST('groupid');
        $curriculumId = MIOLO::_REQUEST('curriculumid');
        $data         = $this->getData();

        // fields needed to process the cancellation process
        $group         = new MHiddenField('groupId', $this->getFormValue('groupId', $groupId));
        $fields[]      = $group;
        $curriculum    = new MHiddenField('curriculumId', $this->getFormValue('curriculumId', $curriculumId));
        $fields[]      = $curriculum;
        $contractId    = new MHiddenField('contractId', $this->getFormValue('contractId'));
        $fields[]      = $contractId;
        $periodId      = new MHiddenField('periodId', $this->getFormValue('periodId'));
        $fields[]      = $periodId;
        $contractCourseId = new MHiddenField('contractCourseId', $this->getFormValue('contractCourseId'));
        $fields[]      = $contractCourseId;
        $learningPeriodId = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId'));
        $fields[]      = $learningPeriodId;

        $contractPerson = new MTextLabel('person', $this->getFormValue('contractPersonId') . ' - ' . $this->getFormValue('contractPersonName'), _M('Person', $module));
        $fields[]       = $contractPerson;

        $contract = new MTextLabel('contract', $this->getFormValue('contractId') . ' - ' . $this->getFormValue('contractCourseId') . '/' . $this->getFormValue('contractCourseVersion') . ' ' . $this->getFormValue('contractCourseName'), _M('Contract', $module));
        $fields[] = $contract;

        $business = $MIOLO->getBusiness($module,'BusPeriod');
        $period   = $business->getPeriod($this->getFormValue('periodId'));
        $periodId = new MTextLabel('period', $this->getFormValue('periodId') . ' - ' . $period->description, _M('Period id',$module));
        $fields[] = $periodId;

        $additionStatusOpts = array ( 'R' => _M('Regular curricular component', $module),
                                      'A' => _M('Adaptation', $module),
                                      'D' => _M('Dependence', $module)
                                    );

        $additionStatus = new MSelection('additionStatus', $this->getFormValue('additionStatus'), _M('Addition status', $module), $additionStatusOpts);
        $fields[]       = $additionStatus;
        $validators[]   = new MRequiredValidator('additionStatus');

        $business = $MIOLO->getBusiness($module, 'BusEnrollAddition');
        $group    = $business->getGroup($this->getFormValue('groupId', $groupId));

        $grid = $MIOLO->getUI()->getGrid($module,'GrdEnrollAddition', null);
        $grid->setData($group);
        unset($grid->actions);

        $fields[] = new MSeparator();
        $fields[] = $grid;
        $fields[] = new MSeparator();

        //Buttons
        unset($opts);
        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';
        $backUrl    = $MIOLO->getActionURL($module, $action, null, $opts);

        $opts = array ( 'enrollId'=>$this->getFormValue('enrollId'),
                        'event'=>'btnConfirm_click');
        $confirmUrl    = $MIOLO->getActionURL($module, $action, null, $opts);
        $btn1[]     = new MButton('btnBack', _M('Back', $module), $backUrl);
        $btn1[]     = new MButton('btnConfirm', _M('Confirm enroll addition', $module));
        $div1       = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    public function btnConfirm_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();
        $data->curriculumId   = $MIOLO->_request('curriculumid');
        $data->groupId        = $MIOLO->_request('groupid');
        $data->personId       = $MIOLO->_request('contractPersonId');
        $data->contractId     = $MIOLO->_request('contractId');

        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';

        if ( $MIOLO->_request('additionStatus') == 'A' )
        {
            $data->isAdaptation = DB_TRUE;
            $data->isDependence = DB_FALSE;
        }
        elseif ( $MIOLO->_request('additionStatus') == 'D' )
        {
            $data->isAdaptation = DB_FALSE;
            $data->isDependence = DB_TRUE;
        }
        else
        {
            $data->isAdaptation = DB_FALSE;
            $data->isDependence = DB_FALSE;
        }

        if (strlen((string)$data->groupId) == 0)
        {
            $data->groupId = $this->getFormValue('lookGroupId_' . $data->curriculumId);
        }

        $business1            = $MIOLO->getBusiness($module, 'BusEnrollCancelation');
        $business2            = $MIOLO->getBusiness($module, 'BusEnroll');
        $business3            = $MIOLO->getBusiness($module, 'BusEnrollAddition');
        $busContract          = $MIOLO->getBusiness('academic', 'BusContract');
        $busSchedule          = $MIOLO->getBusiness($module, 'BusSchedule');
        $busScheduleProfessor = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
        $busFrequenceEnroll   = $MIOLO->getBusiness($module, 'BusFrequenceEnroll');

        $contract        = $busContract->getContract($data->contractId);
        $enrolledGroups1 = $business3->listPersonEnrolls($data->contractId, $data->periodId);

        $businessGroup   = $MIOLO->getBusiness($module, 'BusGroup');
        $group1          = $businessGroup->getGroup($data->groupId);

        //Usamos este foreach() para considerar somente as pessoas matriculadas
        if ( is_array($enrolledGroups1) && ( count($enrolledGroups1) > 0 ) )
        {
            foreach ( $enrolledGroups1 as $key1 => $value1 )
            {
                if ( $value1[10] == ENROLL_STATUS_ENROLLED )
                {
                    $enrolledGroups[] = $value1;
                }
            }
        }

        for ( $i=0; $i < count($enrolledGroups) && ! $hasShock; $i++ )
        {
            $hasShock = $business2->hasShockingSchedule($data->groupId, $enrolledGroups[$i][5]);

            if ( $hasShock )
            {
                $group2        = $businessGroup->getGroup($enrolledGroups[$i][5]);

                if ( $business2->isScheduleShock($data->contractId, $data->learningPeriodId, $group1->curriculumId) || $business2->isScheduleShock($data->contractId, $data->learningPeriodId, $group2->curriculumId) )
                {
                    $hasShock = false;
                }
                else
                {
                    $shockingGroups = array ( $data->groupId, $enrolledGroups[$i][5] );
                }
            }
        }

        //Check if the curricular component is already enrolled
        $busEnroll     = $MIOLO->getBusiness($module,'BusEnroll');
        $busCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');
        $curriculum    = $busCurriculum->getCurriculum($data->curriculumId);
        $isEnrolled    = $busEnroll->isEnrolledCurricularComponent($data->contractId, $curriculum->curricularComponentId, $curriculum->curricularComponentVersion);

        if ( $isEnrolled == true )
        {
            $msg = _M('The student has already enroll status in this curricular component.',$module);
            $this->addError($msg);
        }
        elseif ( $hasShock )
        {
            $businessGroup = $MIOLO->getBusiness($module,'BusGroup');
            $group1 = $businessGroup->getGroup($shockingGroups[0]);
            $group2 = $businessGroup->getGroup($shockingGroups[1]);
            $msg = _M('The following curricular components have shocking schedules', $module) . ':' . '<br><br>' .
                   '<table>' .
                   ' <tr>' .
                   '  <td align="right">' . $group1->curriculumCurricularComponentId . '/' . $group1->curriculumCurricularComponentVersion . '</td>' .
                   '  <td>' . $group1->curriculumCurricularComponentName . '</td>' .
                   ' </tr>' .
                   ' <tr>' .
                   '  <td align="right">' . $group2->curriculumCurricularComponentId . '/' . $group2->curriculumCurricularComponentVersion . '</td>' .
                   '  <td>' . $group2->curriculumCurricularComponentName . '</td>' .
                   ' </tr>' .
                   '</table><br>' .
                   _M('Please, correct this problems and try again.',$module);

            $this->addError($msg);
        }
        else
        {
            $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
            $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

            $res = true;
            if ( MODULE_FINANCE_INSTALLED == 'YES' )
            {
                /* VERIFICACAO FINANCEIRA */
                /* Verifica se já tem taxa de matrícula */
                $businessFinance = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
                //$res             = $businessFinance->haveEnrollFee($contract->personId, $learningPeriodData->beginDate, $learningPeriodData->endDate);
                $res = true;
            }

            if ( $res != true )
            {
                $msg = _M('It is not possible to make the enroll because there is no invoice fee for this student this learning period.', 'academic');
                $this->addError($msg);
            }
            else
            {
                unset($res);
                $res[0][5] = 0;
                if ( MODULE_FINANCE_INSTALLED == 'YES' )
                {
                    /* VERIFICACAO FINANCEIRA */
                    /* Verifica se a taxa de matrícula já foi paga */
                    $businessFinance = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
                    //$res             = $businessFinance->getEnrollFeeInformations($contract->personId, $learningPeriodData->beginDate);
                    $res = true;
                }

                if ( $res[0][5] > 0 )
                {
                    $msg = _M('The enroll fee for this pupil still is open.', 'academic');
                    $this->addError($msg);
                }
                else
                {
                    /*
                     * Verifica se ja tem movimentacao de matricula
                     */
                    $hasEnrollMovement = $business2->checkIfHasEnrollMovement($data->contractId, $data->learningPeriodId);

                    $enroll = new acdEnroll();
                    $enroll->contractId   = $data->contractId;
                    $enroll->statusId     = ENROLL_STATUS_ENROLLED;
                    $enroll->ip           = $_SERVER['REMOTE_ADDR'];
                    $enroll->dateEnroll   = date(MASK_DATE_PHP);
                    $enroll->hourEnroll   = date(MASK_DATE_PHP);
                    $enroll->curriculumId = $data->curriculumId;
                    $enroll->groupId      = $data->groupId;
                    $enroll->isAdaptation = $data->isAdaptation;
                    $enroll->isDependence = $data->isDependence;

                    $transaction = $business2->db->getTransaction();
                    $transaction->_beginTransaction();
            
                    /*
                     * Insere a matricula
                     */
                    $enrollId = $business2->insertEnroll($enroll);

                    /*
                     * Se nao tiver movimentacao de matricula, insere a mesma
                     */

                    if ( $hasEnrollMovement == false )
                    {
                        $movementContract                   = new acdMovementContract();
                        $movementContract->contractId       = $data->contractId;
                        $movementContract->stateContractId  = STATE_CONTRACT_ID_ENROLLED;
                        $movementContract->reasonId         = strlen((string)$data->reasonId)>0 ? $data->reasonId : OLDER_REASON_ID;
                        $movementContract->learningPeriodId = $data->learningPeriodId;
                        $movementContract->stateTime        = date(MASK_TIMESTAMP_PHP);

                        $busMovementContract     = $MIOLO->getBusiness($module, 'BusMovementContract');
                        $busMovementContract->db = $business2->db;
                        $busMovementContract->insertMovementContract($movementContract);
                    }

                    /*
                     * Insere as frequencias
                     */
                    $filter->groupId = $enroll->groupId;
                    $busSchedule->db = $business2->db;
                    $schedules       = $busSchedule->searchSchedule($filter);

                    //se tiver horários
                    if ( count($schedules)>0 )
                    {
                        foreach ( $schedules as $schedule )
                        {
                            $filter->scheduleId     = $schedule[0];
                            $scheduleProfessors->db = $business2->db;
                            $scheduleProfessors     = $busScheduleProfessor->searchScheduleProfessor($filter);

                            //se tiverem professores para os horários
                            if ( count($scheduleProfessors)>0 )
                            {
                                foreach ( $scheduleProfessors as $professor )
                                {
                                    $filter->professorId    = $professor[1];
                                    $busFrequenceEnroll->db = $business2->db;
                                    $frequencies            = $busFrequenceEnroll->getRegisteredFrequence($filter->scheduleId);

                                    //se tiver frequencias, registra as mesmas
                                    if ( count($frequencies) > 0 )
                                    {
                                        $frq->enrollId = $enrollId;
                                        foreach ( $frequencies as $frequence )
                                        {
                                            $frq->scheduleId    = $frequence[0];
                                            $frq->frequencyDate = $frequence[1];
                                            $frq->turnId        = $frequence[2];
                                            $frq->frequency     = 0;
                                            if ( $busFrequenceEnroll->isFrequenceRegistered($frq) == DB_FALSE )
                                            {
                                                $busFrequenceEnroll->insertFrequenceEnroll($frq);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if ( (MODULE_FINANCE_INSTALLED == 'YES') && (strtoupper($learningPeriodData->isFinanceGenerate) == strtoupper(DB_TRUE)) && $enroll->isAdaptation == DB_FALSE )
                    {
                        $busEnrollSummaryGen     = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
                        $busEnrollSummaryGen->db = $business2->db;
                        //Gera os dados para a acdEnrollSummary (necessários para o módulo financeiro)
                        //$busEnrollSummaryGen->generateEnrollSummaryToEnrollAddition($data);
                    }

                    if ( count($business2->getErrors()) > 0 )
                    {
                        $transaction->_rollback();
                        
                        $msg  = _M('Error executing requested operation.' . $business2->getErrors(),$module);
                        $goto = $MIOLO->getActionURL($module, $action);
                        $caption = _M('Error',$module);
                        $MIOLO->error( $msg, $goto, $caption );
                    }
                    else
                    {
                        $transaction->_commit();

/*
                        //converte o resumo de matrícula em previsões
                        if ( GENERATE_INC_FORECAST_ON_ENROLL_ADDITION == 'YES' )
                        {
                            $busFinance = $MIOLO->getBusiness('finance', 'BusIncomeForecast');
                            $res        = $busFinance->generateIncomeForecast($data->learningPeriodId, $data->contractId,  count($enroll->groupId), true); //esse true indica que é acréscimo
                        }
        
                        //converte as previsões em títulos
                        if ( $res && GENERATE_INVOICE_ON_ENROLL_ADDITION == 'YES')
                        {
                            $businessRec = $MIOLO->getBusiness('finance', 'BusReceivableInvoicePupil');

                            $dataInvoice->bankAccountId    = $busLearningPeriod->getLearningPeriodBankAccount($data->learningPeriodId);
                            $dataInvoice->bankContractId   = $busLearningPeriod->getLearningPeriodBankContract($data->learningPeriodId);
                            $dataInvoice->personId         = $data->personId;
                            $dataInvoice->contractId       = $data->contractId;
                            $dataInvoice->learningPeriodId = $data->learningPeriodId;

                            //pega os meses e anos do período letivo
                            $dates = $busFinance->getMonthAndYear($dataInvoice);

                            if ( count($dates) > 0 )
                            {
                                foreach ( $dates as $date )
                                {
                                    list ( $dataInvoice->month, $dataInvoice->year ) = $date;
                                    $businessRec->generateReceivableInvoices($dataInvoice);
                                }
                            }
                        }
*/
                        $msg  = _M('Curricular component added with success',$module);
                        $goto = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Success',$module);
                        $MIOLO->information( $msg, $goto, $caption );
                    }
                }
            }
        }
    }
}

?>
