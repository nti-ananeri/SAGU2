<?php

/**
 *
 * This file handles the connection and actions for acdAcademicCalendarAdjustments table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdAcademicCalendarAdjustments table
 */
class FrmAcademicCalendarAdjustmentsSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Academic calendar adjustment', $this->home, 'academicCalendarAdjustments-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

//         $academicCalendarAdjustmentsIdS = new MTextField('academicCalendarAdjustmentsIdS', $this->academicCalendarAdjustmentsIdS->value, _M('Academic calendar adjustment',$module), 10);
//         $academicCalendarAdjustmentsIdS->setJsHint(_M('Enter the academic calendar adjustment',$module));
//         $fields[] = $academicCalendarAdjustmentsIdS;

        $fields[]  = new MHiddenField('academicCalendarAdjustmentsIdS', $this->getFormValue('academicCalendarAdjustmentsIdS', $academicCalendarAdjustmentsIdS));

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodIdS       = new MComboBox('periodIdS', $this->getFormValue('periodIdS', $data->periodIdS), _M('Period',$module), $businessPeriod->listPeriod() );
        $fields[]       = $periodIdS;

        //Course
        $courseLabelS = new MText('courseLabelS', _M('Course',$module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionS, courseNameS', $module, 'CourseVersion', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $unitIdS  = new MHiddenField('unitIdS', $this->getFormValue('unitIdS', $unitIdS));
        $fields[] = $unitIdS;

        $fields[] = new MHiddenField('limbo', $limbo);

        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version code',$module));

        $courseNameS = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        //LearningPeriod
               
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period', $module) .':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);

        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), _M('Learning period',$module), FIELD_LOOKUPFIELD_SIZE, null, null,'limbo, courseIdS, courseVersionS, turnIdCourseS, unitIdS, learningPeriodDescription, limbo, beginDate, endDate, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseNameS, turnDescriptionCourse, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, ($function == 'update') ? false : true);
        
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('learningPeriodDescription', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodIdS, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;
        
        //End LearningPeriod
        
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, null, true);
        $flds[]                = $curricularComponentId;
        //$fields[] = $curricularComponentId;

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;
        //$fields[] = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;
        //$fields[] = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;

        $professorLabelS = new MText('professorLabelS', _M('Professor',$module) . ':');
        $professorLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $professorIdS = new MLookupTextField('professorIdS', $this->getFormValue('professorIdS', $data->professorIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorIdS->setJsHint(_M('Professor id',$module));

        $professorNameS = new MTextField('professorNameS', $this->getFormValue('professorNameS', $data->professorNameS), '', FIELD_DESCRIPTION_SIZE);
        $professorNameS->setReadOnly(true);
        $professorNameS->setJsHint(_M('Professor name',$module));

        $hctProfessorS = new MHContainer('hctProfessorS', array($professorLabelS, $professorIdS, $professorNameS));
        $hctProfessorS->setShowLabel(true);
        $fields[]  = $hctProfessorS;

        $occurrenceDateS = new MCalendarField('occurrenceDateS', $this->getFormValue('occurrenceDateS', $data->occurrenceDateS), _M('Occurrence date',$module), FIELD_DATE_SIZE);
        $occurrenceDateS->setJsHint(_M('Enter the occurrence date', $module));
        $validators[] = new MDATEDMYValidator('occurrenceDateS');
        $fields[] = $occurrenceDateS;

        $business   = $MIOLO->getBusiness('basic', 'BusWeekDay');
        $weekDayIdS = new MComboBox('weekDayIdS',
                                 $this->GetFormValue('weekDayIdS',$data->weekDayIdS),
                                 _M('Week day',$module),
                                 $business->listWeekDay());
        $fields[] = $weekDayIdS;

        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnIdS  = new MComboBox('turnIdS',
                                  $this->GetFormValue('turnIdS',$data->turnIdS),
                                  _M('Turn',$module),
                                  $business->listTurn());
        $fields[] = $turnIdS;

        $inOutS = new MSelection( 'inOutS',
                                 $this->GetFormValue('inOutS',$data->inOutS),
                                 _M('In out',$module),
                                 SAGU::listInOut());
        $fields[] = $inOutS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->curricularComponentId= $this->curricularComponentId->value;
        $filters->academicCalendarAdjustmentsId = $this->academicCalendarAdjustmentsIdS->value;
        $filters->occurrenceDate       = $this->occurrenceDateS->value;
        $filters->weekDayId            = $this->weekDayIdS->value;
        $filters->professorId          = $this->professorIdS->value;
        $filters->inOut                = $this->inOutS->value;
        $filters->periodId             = $this->periodIdS->value;
        $filters->courseId             = $this->courseIdS->value;
        $filters->courseVersion        = $this->courseVersionS->value;
        $filters->turnId               = $this->turnIdS->value;
        $filters->learningPeriodId     = $this->learningPeriodIdS->value;

        unset($this->academicCalendarAdjustmentsIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdAcademicCalendarAdjustmentsSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusAcademicCalendarAdjustments');
        $data = $business->searchAcademicCalendarAdjustments($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.academicCalendarAdjustmentsIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
