<?php

/**
 * Class form
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a professorCurricularComponent
 **/
class FrmClassPupil extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $classId    = $_GET['classId'] ? $_GET['classId'] : $_POST['classId'];
            $contractId = $_GET['contractId'] ? $_GET['contractId'] : $_POST['contractId'];
            $beginDate  = $_GET['beginDate'] ? $_GET['beginDate'] : $_POST['beginDate'];

            $business = $MIOLO->getBusiness($module,'BusClassPupil');
            $data     = $business->getClassPupil($classId, $contractId, $beginDate);

            $fields[] = new MTextLabel('classId', $classId, _M('Class id',$module));
            $fields[] = new MHiddenField('classId', $classId);

            $fields[] = new MTextLabel('contractId', $contractId, _M('Contract id',$module));
            $fields[] = new MHiddenField('contractId', $contractId);

            $fields[] = new MTextLabel('bginDate', $beginDate, _M('Begin date',$module));
            $fields[] = new MHiddenField('beginDate', $beginDate);

            $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
            $endDate->setJsHint(_M('Enter the end date', $module));
            $fields[]     = $endDate;
            $validators[] = new MDATEDMYValidator('endDate', _M('End date', $module), 'optional');

            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

            $this->page->onLoad('document.' . $this->name . '.endDate.focus();');
        }
        else
        {
            //Class
            $classLabel   = new MText('classLabel', _M('Class',$module) . ':');
            $classLabel->setWidth(FIELD_CONTAINER_SIZE);
            $classLabel->setClass('m-caption m-caption-required');

            $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', $module, 'Class', null, null, true);
            $classId->setJsHint(_M('Enter the class id',$module));

            $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
            $className_->setReadOnly(true);
            $className_->setJsHint(_M('Class name',$module));

            $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
            $hctClass->setShowLabel(true);
            $fields[]     = $hctClass;
            $validators[] = new MRequiredValidator('classId', _M('Class', $module), 'required');
            //end class

            //Person
            $contractPersonLabel = new MText('contractPersonLabel', _M('Person', $module) . ':');
            $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[] = $contractPersonLabel;

            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Enter the person code',$module));
            $flds[]           = $contractPersonId;
            $validators[]     = new MIntegerValidator('contractPersonId', _M('Person', $module), 'optional');

            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
            $contractPersonName->setReadOnly(true);
            $flds[]             = $contractPersonName;

            $hctPerson = new MHContainer('hctContract', $flds);
            $hctPerson->setShowLabel(false);
            $fields[]  = $hctPerson;
            unset($flds);
            //end Person

            //Contract
            $contractLabel = new MText('contractLabel', _M('Contract', $module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractLabel->setClass('m-caption m-caption-required');
            $flds[] = $contractLabel;

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $validators[] = new MIntegerValidator('contractId', _M('Contract', $module), 'required');
            $flds[]           = $contractId;

            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->contractCourseId->value), _M('Course',$module), FIELD_ID_SIZE);
            $contractCourseId->setReadOnly(true);
            $flds[]           = $contractCourseId;

            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->postEnrollConditionUnblockSearch->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
            $contractCourseVersion->setReadOnly(true);
            $flds[]                = $contractCourseVersion;

            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->postEnrollConditionUnblockSearch->contractCourseName), _M('Description',$module), 30);
            $contractCourseName->setReadOnly(true);
            $flds[]             = $contractCourseName;

            $hctContractS = new MHContainer('hctContractS', $flds);
            $hctContractS->setShowLabel(false);
            $fields[]    = $hctContractS;
            unset($flds);
            //end course

            $beginDate    = new MCalendarField('beginDate', strlen((string)$this->getFormValue('beginDate', $data->beginDate))>0 ? $this->getFormValue('beginDate', $data->beginDate) : date(MASK_DATE_PHP), _M('Begin date', $module), FIELD_DATE_SIZE);
            $beginDate->setJsHint(_M('Enter the begin date', $module));
            $fields[]     = $beginDate;
            $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Begin date',$module), 'required'));

            $this->page->onLoad('document.' . $this->name . '.classId.focus();');

        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'classId'  => MIOLO::_request('classId'),
                        'contractId' => MIOLO::_request('contractId'),
                        'beginDate'  => MIOLO::_request('beginDate'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('classIdS'    => MIOLO::_request('classId'),
                        'contractIdS' => MIOLO::_request('contractId'),
                        'beginDateS'  => MIOLO::_request('beginDate')
                        );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusClassPupil');
        $ok = $business->deleteClassPupil(MIOLO::_request('classId'), MIOLO::_request('contractId'), MIOLO::_request('beginDate'));

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusClassPupil');

        $check    = strlen((string)MIOLO::_request('check')) > 0 ? MIOLO::_request('check') : $business->checkCourse($data);

        //a consulta na base é executada apenas uma vez. Se for false, exibe a mensagem de conflito e pede para gravar mesmo assim
        if ( $check == DB_FALSE && $function == 'insert')
        {
            $msg = _M('The student contract course code and the calss course code are not the same ones. Are you sure that you want to insert this register?', $module);
            $opts   = array( 'classId'    => $data->classId, 
                             'personId'   => $data->personId,
                             'contractId' => $data->contractId,
                             'beginDate'  => $data->beginDate,
                             'function'   => $function);
            $gotoNo = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            $opts['check'] = DB_TRUE;
            $opts['event'] = $event;
            $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Question',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
        else
        {

            if ( $function == 'update' )
            {
                $ok  = $business->updateClassPupil($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok  = $business->insertClassPupil($data);
                $msg = MSG_RECORD_INSERTED;
            }

            if ( $ok )
            {
                // This returns the primary key data to the search form
                // so that the user can see the inserted/updated record.
                $opts = array('classIdS' => MIOLO::_request('classId'));
                if ( $function == 'update' )
                {
                    $caption = _M('Information',$module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    unset($opts);
                    $opts = array('classIdS' => MIOLO::_request('classId'));
                    $goto = $MIOLO->getActionURL( $module, $action, null, $opts);

                    $opts = array( 'function' => 'insert', 'classId' => MIOLO::_request('classId'));

                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg     = _M('Error executing requested operation.',$module);
                $goto    = SAGU::getStackBackUrl();
                $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdClassPupil();
        $data->classId     = $this->classId->value;
        $data->contractId  = $this->contractId->value;
        $data->beginDate   = $this->beginDate->value;
        $data->endDate     = $this->endDate->value;

        return $data;
    }

}

?>
