<?php

/**
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/11/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPeriodEnrollDate extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {

            $periodEnrollDateId = MIOLO::_request('periodEnrollDateId');

            $fields[]  = new MHiddenField('periodEnrollDateId', $periodEnrollDateId);
            $fields[]  = new MTextLabel('periodEnrollDateId', $data->periodEnrollDateId, _M('Learning period id', $module));

            $business = $MIOLO->getBusiness($module, 'BusPeriodEnrollDate');
            $data     = $business->getPeriodEnrollDate($periodEnrollDateId);
        }

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), true);
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[]  = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        $turnLabel->setClass('m-caption m-caption-required');

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        $validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $unitLabel->setClass('m-caption m-caption-required');

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        $validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');
        }
        else
        {
        
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId', 'periodId' => 'periodId');
        }
        

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module).':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, true);
        //$fields[] = $learningPeriodId;
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Learning period',$module), 'required');
        
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->learningPeriodDescription->value, _M('Learning period description',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        //$fields[] = $learningPeriodDescription;
        
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctlearningPeriod->setShowLabel(false);
        $fields[]  = $hctlearningPeriod;
	
        $periodEnrollDateDescription = new MTextField('periodEnrollDateDescription', $this->getFormValue('periodEnrollDateDescription', $data->periodEnrollDateDescription), _M('Description',$module), 40);
        $fields[]                    = $periodEnrollDateDescription;
        $validators[] = new MRequiredValidator('periodEnrollDateDescription');

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required'));
        //$validators[]     = new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required');
        $fields[]         = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $endDate->setValidator( new MDATEDMYValidator('endDate', _M('End date', $module), 'required'));
//        $validators[]   = new MDATEDMYValidator('endDate', _M('End date', $module), 'required');
        $fields[]       = $endDate;

        $maturityDate = new MCalendarField('maturityDate', $this->getFormValue('maturityDate', $data->maturityDate), _M('Maturity date', $module), FIELD_DATE_SIZE);
        $maturityDate->setValidator( new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required'));
        $validators[]   = new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required');
        $fields[]       = $maturityDate;


//        $formationLevelId = new MTextField('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Formation level id',$module), 30);
//        $fields[]         = $formationLevelId;

        //IsInternet
        $isInternetLabel = new MText('isInternetLabel', _M('Allow internet subscription',$module).':');
        $isInternetLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isInternetLabel->setClass('m-caption m-caption-required');

        $isInternet = $this->GetFormValue('isInternet',$data->isInternet);
        $isInternet = new MRadioButtonGroup('isInternet', '', SAGU::listTrueFalse(1), $isInternet ? $isInternet : DB_FALSE, null, 'horizontal');
        $isInternet->SetShowLabel(false);
        
        $hctIsInternet = new MHContainer('hctIsInternet', array($isInternetLabel, $isInternet));
        $fields[]  = $hctIsInternet;

        //isAdjustmentLabel
        $isAdjustmentLabel = new MText('isAdjustmentLabel', _M('Is it an adjustment period',$module).':');
        $isAdjustmentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isAdjustmentLabel->setClass('m-caption m-caption-required');

        $isAdjustment = $this->GetFormValue('isAdjustment',$data->isAdjustment);
        $isAdjustment = new MRadioButtonGroup('isAdjustment', '', SAGU::listTrueFalse(1), $isAdjustment ? $isAdjustment : DB_FALSE, null, 'horizontal');
        $isAdjustment->SetShowLabel(false);
        
        $hctIsAdjustment = new MHContainer('hctIsAdjustment', array($isAdjustmentLabel, $isAdjustment));
        $fields[]  = $hctIsAdjustment;

        //isSelectiveProc
        $isSelectiveProcLabel = new MText('isSelectiveProcLabel', _M('Is it a period for freshmen',$module).':');
        $isSelectiveProcLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isSelectiveProcLabel->setClass('m-caption m-caption-required');

        $isSelectiveProc = $this->GetFormValue('isSelectiveProc',$data->isSelectiveProc);
        $isSelectiveProc = new MRadioButtonGroup('isSelectiveProc', '', SAGU::listTrueFalse(1), $isSelectiveProc ? $isSelectiveProc : DB_FALSE, null, 'horizontal');
        $isSelectiveProc->SetShowLabel(false);
        
        $hctIsSelectiveProc = new MHContainer('hctIsSelectiveProc', array($isSelectiveProcLabel, $isSelectiveProc));
        $fields[]  = $hctIsSelectiveProc;

        //isAcademic
        $isAcademicLabel = new MText('isAcademicLabel', _M('Is it a period for academic enroll',$module).':');
        $isAcademicLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isAcademicLabel->setClass('m-caption m-caption-required');

        $isAcademic = $this->GetFormValue('isAcademic',$data->isAcademic);
        $isAcademic = new MRadioButtonGroup('isAcademic', '', SAGU::listTrueFalse(1), $isAcademic ? $isAcademic : DB_FALSE, null, 'horizontal');
        $isAcademic->SetShowLabel(false);
        
        $hctIsAcademic = new MHContainer('hctIsAcademic', array($isAcademicLabel, $isAcademic));
        $fields[]  = $hctIsAcademic;

        //isFinance
        $isFinanceLabel = new MText('isFinanceLabel', _M('Is it a period for finance enroll',$module).':');
        $isFinanceLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isFinanceLabel->setClass('m-caption m-caption-required');

        $isFinance = $this->GetFormValue('isFinance',$data->isFinance);
        $isFinance = new MRadioButtonGroup('isFinance', '', SAGU::listTrueFalse(1), $isFinance ? $isFinance : DB_FALSE, null, 'horizontal');
        $isFinance->SetShowLabel(false);
        
        $hctIsFinance = new MHContainer('hctIsFinance', array($isFinanceLabel, $isFinance));
        $fields[]  = $hctIsFinance;



        $this->setLabelWidth(FIELD_LABEL_SIZE);

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        if ( $function == 'insert' )
        {
            $this->page->onLoad('document.'.$this->name.'.periodEnrollDateId.focus();');
        }
        else
        {
            $this->page->onLoad('document.'.$this->name.'.periodId.focus();');
        }
    }
    

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'periodEnrollDateId'=>MIOLO::_request('periodEnrollDateId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPeriodEnrollDate');
        $ok = $business->deletePeriodEnrollDate($this->periodEnrollDateId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPeriodEnrollDate');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePeriodEnrollDate($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertPeriodEnrollDate($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array( 'learningPeriodIdS'=>$data->learningPeriodId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdPeriodEnrollDate();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description      = $this->periodEnrollDateDescription->value;
        $data->learningPeriodId = $this->learningPeriodId->value;
        $data->formationLevelId = $this->formationLevelId->value;

        return $data;
    }
    

}

?>
