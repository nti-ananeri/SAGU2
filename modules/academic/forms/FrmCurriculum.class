<?php

/**
 * Curriculum form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a curriculum
 **/
class FrmCurriculum extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $curriculumId = $_GET['curriculumId'] ? $_GET['curriculumId'] : $_POST['curriculumId'];
            $fields[] = new MTextLabel('curriculumId', $curriculumId, _M('Curriculum id',$module));
            $fields[] = new MHiddenField('curriculumId', $curriculumId);

            $business = $MIOLO->getBusiness($module,'BusCurriculum');
            $data = $business->getCurriculum($curriculumId);

            $businessTurn                 = $MIOLO->getBusiness('basic', 'BusTurn');
            $businessUnit                 = $MIOLO->getBusiness('basic', 'BusUnit');

            $dataTurn                     = $businessTurn->getTurn($data->turnId);
            $dataUnit                     = $businessUnit->getUnit($data->unitId);

            $data->turnDescription        = $dataTurn->description;
            $data->unitDescription        = $dataUnit->description;
        }
        $this->page->onLoad('document.' . $this->name . '.courseId.focus();');

        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');
        if ( $function == 'update' )
        {
            $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId'), false);
        }
        else
        {
            $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId'), true);
        }
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), _M('Version',$module), FIELD_ID_SIZE);

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;
        
        $turnLabel = new MText('turnLabel', _M('Turn',$module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId',$data->turnId), _M('Code',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription',$data->turnDescription), _M('Turn',$module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);

        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[]  = $hctTurn;

        $unitLabel = new MText('unitLabel', _M('Unit',$module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId = new MTextField('unitId', $this->getFormValue('unitId',$data->unitId), _M('Code',$module), FIELD_ID_SIZE);
        $unitId->setReadOnly(true);

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription',$data->unitDescription), _M('Unit description',$module), FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);

        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[]  = $hctUnit;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        if ( $function == 'update' )
        {
            $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion'), false);
        }
        else
        {
            $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion'), true);
        }
        $flds[]                = $curricularComponentId;
        $validators[]          = new MRequiredValidator('curricularComponentId', _M('Curricular component',$module));
        //$fields[] = $curricularComponentId;

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;
        //$fields[] = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;
        //$fields[] = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);
        
        $curricularComponentTypeLabel = new MText('curricularComponentTypeLabel', _M('Curricular component type',$module) . ':');
        $curricularComponentTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentTypeLabel->setClass('m-caption m-caption-required');
        
        $busCurricularComponentType = $MIOLO->getBusiness($module, 'BusCurricularComponentType');
        $curricularComponentTypeId  = new MSelection('curricularComponentTypeId', $this->GetFormValue('curricularComponentTypeId',$data->curricularComponentTypeId), null, $busCurricularComponentType->listCurricularComponentType());
        
        $validators[] = new MRequiredValidator('curricularComponentTypeId',_M('Curricular component type',$module), 'required');

        $hctCurricularComponentType  = new MHContainer('hctCurricularComponentType', array($curricularComponentTypeLabel, $curricularComponentTypeId ));
        $hctCurricularComponentType->setShowLabel(true);
       
        $fields[] = $hctCurricularComponentType;

        $semesterLabel = new MText('semesterLabel', _M('Semester',$module) . ':');
        $semesterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $semesterLabel->setClass('m-caption m-caption-required');

        $semester = new MTextField('semester', $this->getFormValue('semester', $data->semester), '', 10 );
        $semester->setJsHint(_M('Enter the year or the semester', $module));
        $validators[] = new MRegExpValidator('semester', '', '(^-?[0-9][0-9]*$)');

        $semesterHint  = new MHint('semesterHint', _M('Year when it is an annual course otherwise, semester', $module));

        $hctSemester  = new MHContainer('hctSemester', array($semesterLabel, $semester, $semesterHint ));
        $hctSemester->setShowLabel(true);
       
        $fields[] = $hctSemester;
        

        $messagesType = array( array(_M('Yes', $module), DB_TRUE),
                               array(_M('No', $module), DB_FALSE)
                             );

        $isShowDocumentEndCourseLabel = new MText('isShowDocumentEndCourseLabel', _M('Is it shown in document end course',$module) . '?');
        $isShowDocumentEndCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isShowDocumentEndCourseLabel->setClass('m-caption m-caption-required');

        $isShowDocumentEndCourse = $this->GetFormValue('isShowDocumentEndCourse',$data->isShowDocumentEndCourse);
        if ( ! isset($isShowDocumentEndCourse))
        {
            $isShowDocumentEndCourse = DB_TRUE;
        }
        $isShowDocumentEndCourse = new MRadioButtonGroup('isShowDocumentEndCourse', null, SAGU::listTrueFalse(1), $isShowDocumentEndCourse, null, 'horizontal');
        $isShowDocumentEndCourse->SetShowLabel(false);

        $hctIsShowDocumentEndCourse = new MHContainer('hctIsShowDocumentEndCourse', array($isShowDocumentEndCourseLabel, $isShowDocumentEndCourse));
        $fields[]  = $hctIsShowDocumentEndCourse;

        $isCurriculumLabel = new MText('isCurriculumLabel', _M('Is it part of the curriculum',$module) . '?');
        $isCurriculumLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isCurriculumLabel->setClass('m-caption m-caption-required');

        $isCurriculum = $this->GetFormValue('isCurriculum',$data->isCurriculum);
        if ( ! isset($isCurriculum))
        {
            $isCurriculum = DB_TRUE;
        }
        $isCurriculum = new MRadioButtonGroup('isCurriculum', '', SAGU::listTrueFalse(1), $isCurriculum, null, 'horizontal');
        $isCurriculum->SetShowLabel(false);

        $hctIsCurriculum= new MHContainer('hctIsCurriculum', array($isCurriculumLabel, $isCurriculum));
        $fields[]  = $hctIsCurriculum;

        $business = $MIOLO->getBusiness($module,'BusCurriculumType');
        $opts = $business->listCurriculumType();

        $curriculumTypeLabel = new MText('curriculumTypeLabel', _M('Curriculum type id',$module) . ':');
        $curriculumTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curriculumTypeLabel->setClass('m-caption m-caption-required');

        $curriculumTypeId = new MSelection('curriculumTypeId', $this->getFormValue('curriculumTypeId', $data->curriculumTypeId), null, $opts);
        $curriculumTypeId->setJsHint(_M('Enter the curriculum type code',$module));
        $hctcurriculumType  = new MHContainer('hctcurriculumType', array($curriculumTypeLabel, $curriculumTypeId ));
        $hctcurriculumType->setShowLabel(true);
       
        $fields[] = $hctcurriculumType;
        $validators[] = new MRequiredValidator("curriculumTypeId");

        //atribuicao de um grupo de eletivas para uma disciplina eletiva
        $masterCurriculumIdHint = new MText('masterCurriculumIdHint', _M('If you are registering an elective curricular component option, enter the curriculum id from the eletive curricular component.',$module));
        $fields[]        = new MSeparator();
        
        $sep = new MSeparator();
        $isElective = new MHiddenField('isElective', DB_TRUE);
        $curricularComponentNameElective = new MHiddenField('curricularComponentNameElective', 'ELE%T%');
        $masterCurriculumIdLabel = new MText('masterCurriculumIdLabel', _M('Curriculum id',$module) . ':');
        $masterCurriculumIdLabel->setWidth(FIELD_CONTAINER_SIZE);

        $masterCurriculumId = new MLookupTextField('masterCurriculumId', $this->getFormValue('masterCurriculumId', $data->masterCurriculumId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, masterCurriculumDescription', $module, 'Curriculum', null, array ( 'courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=> 'turnId', 'unitId'=>'unitId', 'semester'=>'semester', 'isElective'=> 'isElective', 'curricularComponentName'=>'curricularComponentNameElective'), true);
        $masterCurriculumId->setJsHint(_M('Enter the curriculum id.',$module));
        $validators[] = new MIntegerValidator('masterCurriculumId', _M('Master curriculum id',$module), 'optional');

        $masterCurriculumDescription = new MTextField('masterCurriculumDescription', $this->masterCurriculumDescription->value, '', FIELD_DESCRIPTION_SIZE);
        $masterCurriculumDescription->setJsHint(_M('Curricular component description',$module));
        $masterCurriculumDescription->setReadOnly(true);

        $hctMasterCurriculum  = new MHContainer('hctMasterCurriculum',
                array($masterCurriculumIdHint, $sep, $masterCurriculumIdLabel, $masterCurriculumId, $masterCurriculumDescription, $isElective, $curricularComponentNameElective));
        $hctMasterCurriculum->setShowLabel(true);

        $bsg1            = new BaseGroup('bsg1', _M('Elective group (only for elective curricular components)',$module), array($hctMasterCurriculum), 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        $fields[]        = $bsg1;


        if ( in_array($function,array('update','delete')) )
        {
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
            $endDate->setJsHint(_M('Enter the end date',$module));
            $validators[] = new MDATEDMYValidator('endDate', '', 'optional');
            $fields[] = $endDate;
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'curriculumId' => MIOLO::_request('curriculumId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('curriculumIdS' => MIOLO::_request('curriculumId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCurriculum');
        $ok = $business->deleteCurriculum($this->curriculumId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCurriculum');
        
        if ( strlen((string)$data->masterCurriculumId) > 0 && $data->curriculumTypeId != ACD_CURRICULUM_TYPE_OPTATIVE )
        {
            $msg  = _M('Error executing requested operation.',$module);
            $msg .= "<br>";
            $msg .= _M('You can\'t fill the field curriculum id from elective group, when the curriculum type is not optative.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
            return;
        }

        if ( $function == 'update' )
        {
            $ok  = $business->updateCurriculum($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCurriculum($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('curriculumIdS' => $data->curriculumId);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdCurriculum();
        $data->curriculumId                                = $this->curriculumId->value;
        $data->courseId                                    = $this->courseId->value;
        $data->courseVersion                               = $this->courseVersion->value;
        $data->turnId                                      = $this->turnId->value;
        $data->unitId                                      = $this->unitId->value;
        $data->curricularComponentId                       = $this->curricularComponentId->value;
        $data->curricularComponentVersion                  = $this->curricularComponentVersion->value;
        $data->curricularComponentTypeId                   = $this->curricularComponentTypeId->value;
        $data->semester                                    = $this->semester->value;
        $data->isShowDocumentEndCourse                     = $this->isShowDocumentEndCourse->value;
        $data->isCurriculum                                = $this->isCurriculum->value;
        $data->curricularComponentGroupDocumentEndCourseId = $this->curricularComponentGroupDocumentEndCourseId->value;
        $data->curricularComponentGroupElectiveId          = $this->curricularComponentGroupElectiveId->value;
        $data->curriculumTypeId                            = $this->curriculumTypeId->value;
        $data->endDate                                     = $this->endDate->value;
        $data->masterCurriculumId                          = $this->masterCurriculumId->value;

        return $data;
    }

}

?>
