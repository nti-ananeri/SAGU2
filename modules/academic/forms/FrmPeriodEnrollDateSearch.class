<?php

/**
 *
 * This file handles the connection and actions for acdPeriodEnrollDate table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [edaurdo@solis.coop.br]
 * 
 * @since
 * Class created on 07/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the scdPeriodEnrollDate table
 */
class FrmPeriodEnrollDateSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Period enroll date', $this->home, 'periodEnrollDate-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $learningPeriodIdS));

        $this->page->isPostBack() ? $dataPeriodId = $this->getFormValue('periodIdS', $data->periodIdS) : $dataPeriodId = CURRENT_PERIOD_ID;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodIdS      = new MComboBox('periodIdS', $dataPeriodId, _M('Period',$module), $businessPeriod->listPeriod() );
        //$validators[]   = new MRequiredValidator('periodIdS');
        $fields[]       = $periodIdS;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        //$validators[]  = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        //$validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        //$validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        $periodEnrollDateDescriptionS = new MTextField('periodEnrollDateDescriptionS', $this->periodEnrollDateDescriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $periodEnrollDateDescriptionS;

        $beginDateLessonsS = new MCalendarField('beginDateLessonsS', $this->getFormValue('beginDateLessonsS', $data->beginDateLessonsS), _M('Lessons begin date',$module), FIELD_DATE_SIZE);
        $beginDateLessonsS->setJsHint(_M('Lessons begin date', $module));
        $validators[] = new MDATEDMYValidator('beginDateLessonsS', '', 'required');
        $fields[] = $beginDateLessonsS;

        $endDateLessonsS = new MCalendarField('endDateLessonsS', $this->getFormValue('endDateLessonsS', $data->endDateLessonsS), _M('Lessons end date',$module), FIELD_DATE_SIZE);
        $endDateLessonsS->setJsHint(_M('Lessons end date', $module));
        $validators[] = new MDATEDMYValidator('endDateLessonsS', '', 'required');
        $fields[] = $endDateLessonsS;

        $business = $MIOLO->getBusiness($module,'BusFormationLevel');
        $period   = $business->listFormationLevel();

        $formationLevelIdS = new MComboBox ('formationLevelIdS', $this->formationLevelIdS->value, _M('Formation level', $module), $period, true, '', 6);
        $formationLevelIdS->setJsHint(_M('Enter the document type code',$module));
        $fields[]      = $formationLevelIdS;

        //IsInternet
        $isInternetLabel = new MText('isInternetLabel', _M('Allow internet subscription',$module) . '?');
        $isInternetLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isInternetS = $this->GetFormValue('isInternetS',$data->isInternetS);
        $isInternetS = new MRadioButtonGroup('isInternetS', '', SAGU::listTrueFalse(1), $isInternetS, null, 'horizontal');
        $isInternetS->SetShowLabel(false);

        $hctIsInternetS = new MHContainer('hctIsInternetS', array($isInternetLabel, $isInternetS));
        $fields[]  = $hctIsInternetS;
	
        //$fields[] = $isInternetS;

        //isAdjustmentLabel
        $isAdjustmentLabel = new MText('isAdjustmentLabel', _M('Is it an adjustment period',$module) . '?');
        $isAdjustmentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isAdjustmentS = $this->GetFormValue('isAdjustmentS',$data->isAdjustmentS);
        $isAdjustmentS = new MRadioButtonGroup('isAdjustmentS', '', SAGU::listTrueFalse(1), $isAdjustmentS, null, 'horizontal');
        $isAdjustmentS->SetShowLabel(false);

        $hctIsAdjustmentS = new MHContainer('hctIsAdjustmentS', array($isAdjustmentLabel, $isAdjustmentS));
        $fields[]  = $hctIsAdjustmentS;

        //isSelectiveProcS
        $isSelectiveProcLabelS = new MText('isSelectiveProcLabelS', _M('Is it a period for freshmen',$module) . '?');
        $isSelectiveProcLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $isSelectiveProcS = $this->GetFormValue('isSelectiveProcS',$data->isSelectiveProcS);
        $isSelectiveProcS = new MRadioButtonGroup('isSelectiveProcS', '', SAGU::listTrueFalse(1), $isSelectiveProcS, null, 'horizontal');
        $isSelectiveProcS->SetShowLabel(false);

        $hctIsSelectiveProcS = new MHContainer('hctIsSelectiveProcS', array($isSelectiveProcLabelS, $isSelectiveProcS));
        $fields[]  = $hctIsSelectiveProcS;

    	$fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        $this->setValidators($validators);
        unset($learningPeriodIdS);
        // get filters values
        $filters->learningPeriodId             = $this->learningPeriodIdS->value;
        $filters->periodEnrollDateDescription  = $this->periodEnrollDateDescriptionS->value;
        $filters->beginDateLessons             = $this->beginDateLessonsS->value;
        $filters->endDateLessons               = $this->endDateLessonsS->value;
        $filters->formationLevelId             = $this->formationLevelIdS->value;
        $filters->isInternet                   = $this->isInternetS->value;
        $filters->isAdjustment                 = $this->isAdjustmentS->value;
        $filters->isSelectiveProc              = $this->isSelectiveProcS->value;
        $filters->periodId                     = $this->periodIdS->value;

        $filters->courseId                     = $this->courseId->value;
        $filters->courseVersion                = $this->courseVersion->value;

        unset($this->learningPeriodIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPeriodEnrollDateSearch', $filters);
        $business = $this->manager->getBusiness($module,'BusPeriodEnrollDate');
        $data = $business->searchPeriodEnrollDate($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.learningPeriodIdS.focus();');
        }
    	$this->setLabelWidth(FIELD_LABEL_SIZE);

    }
}

?>
