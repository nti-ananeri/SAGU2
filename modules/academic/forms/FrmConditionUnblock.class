<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmConditionUnblock extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_request('curricularComponentUnblockId');

            $business = $MIOLO->getBusiness($module, 'BusConditionUnblock');
            $data     = $business->getConditionUnblock($curricularComponentUnblockId);

            $busCurr  = $MIOLO->getBusiness($module, 'BusCurriculum');
            $currData = $busCurr->getCurriculum($data->curriculumId);

            $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
            $getLearningPeriod = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

            $data->periodId    = $getLearningPeriod->periodId;

            $data->curricularComponentId = $currData->curricularComponentId;
            $data->curricularComponentVersion = $currData->curricularComponentVersion;

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Curricular component unblock id', $module));
        }

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractPersonLabelS;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('contractPersonId', '', 'required');
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);       

        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractLabelS;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId', 'courseId' => 'contractCourseId', 'courseVersion'=>'contractCourseVersion', 'turnId'=>'contractTurnId', 'unitId'=>'contractUnitId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId', '', 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);
        
        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId;        

        if ( strlen((string)$data->periodId) > 0 )
        {
            $periodIdValue = $data->periodId;
        }
        else
        {
            strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $periodIdValue = $this->getFormValue('periodId', $data->periodId) : $periodIdValue = CURRENT_PERIOD_ID;
        }



        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', $periodIdValue, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodLabelS;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));

        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period',$module), 'required');
        $flds[]           = $learningPeriodId;

        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriod->setReadOnly(true);
        $flds[]         = $learningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion, curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'contractCourseId', 'curricularComponentId' => 'curricularComponentId', 'courseVersion'=>'contractCourseVersion', 'turnId'=>'contractTurnId', 'unitId'=>'contractUnitId'), true);
        $validators[]          = new MRequiredValidator('curricularComponentId', _M('Curricular component',$module));
        $flds[]                = $curricularComponentId;

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        /*$curriculumLabelS = new MText('curriculumLabelS', _M('Curriculum', $module) . ':');
        $curriculumLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $curriculumLabelS->setClass('m-caption m-caption-required');
        $flds[] = $curriculumLabelS;
        
        $curriculumId = new MLookupTextField('curriculumId', $this->getFormValue('curriculumId',$data->curriculumId), _M('Curriculum id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('limbo', 'limbo', 'limbo', 'curricularComponentId', 'curricularComponentVersion', 'curricularComponentName'), $module, 'Curriculum', null, array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $curriculumId->setJsHint(_M('Enter the curriculum code',$module));
        $validators[] = new MIntegerValidator('curriculumId', '', 'required');
        $flds[]           = $curriculumId;
        
        $curricularComponentId = new MTextField('curricularComponentId', $this->getFormValue('curricularComponentId',$data->curricularComponentId), _M('Curricular component id',$module), FIELD_ID_SIZE);
        $curricularComponentId->setReadOnly(true);
        $flds[]           = $curricularComponentId;

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion), _M('Curricular component version',$module), FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        $flds[]           = $curricularComponentVersion;  
        
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), _M('Curricular component name',$module), 30);
        $curricularComponentName->setReadOnly(true);
        $flds[]           = $curricularComponentName;        
        
        $hctcurriculum = new MHContainer('hctcurriculum', $flds);
        $hctcurriculum->setShowLabel(false);
        $fields[]    = $hctcurriculum;
        unset($flds); */       

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.CurricularComponentUnblockDescription.focus();');

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'curricularComponentUnblockId' => MIOLO::_request('curricularComponentUnblockId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusConditionUnblock');
        $ok = $business->deleteConditionUnblock(MIOLO::_request('curricularComponentUnblockId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data   = $this->getData();
        MIOLO::vd($data);

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $opts['function'] = $function;
        $opts['event']    = 'tbBtnSave_confirm';

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        unset($opts['event']);

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $msg = _M('Are you sure that want to insert condition unblock to this pupils, this learning period and this curricular component', $module) . '?' ;

        $msg .= '<br><br>' . $data->contractPersonName . ' - ' . $data->learningPeriod . ' - ' . $data->curricularComponentName . '<br><br>';


        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getData();
        $filters->curricularComponentId      = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId                   = $this->contractCourseId->value;
        $filters->courseVersion              = $this->contractCourseVersion->value;
        $filters->courseTurnId                     = $this->contractTurnId->value;
        $filters->courseUnitId                     = $this->contractUnitId->value;
        $busConditionUnblock                 = $MIOLO->getBusiness($module, 'BusConditionUnblock');

        $busCurr     = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums = $busCurr->searchCurriculum($filters);

        if ( is_array($curriculums) && ( count($curriculums) > 0 ) )
        {
            $data->curriculumId = $curriculums[0][0];

            $filters1->curriculumId       = $curriculums[0][0];
            $filters1->contractId         = $data->contractId;
            $filters1->learningPeriodId   = $data->learningPeriodId;

            $searchConditionUnblock              = $busConditionUnblock->searchConditionUnblock($filters1);

            if ( is_array($searchConditionUnblock) && (count($searchConditionUnblock)>0) )
            {
                //Ja existe um desbloqueio para esta disciplina, periodo letivo e contrato
                $msg  = _M('Already exist unblock to this contract and learning period', $module) . '.';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
            else
            {
                if ( $function == 'update' )
                {
                    $ok  = $busConditionUnblock->updateConditionUnblock($data);
                    $msg = MSG_RECORD_UPDATED;
                }
                else
                {
                    $ok  = $busConditionUnblock->insertConditionUnblock($data);
                    $msg = MSG_RECORD_INSERTED;
                }

                if ( $ok )
                {
                    $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                    if ( $function == 'update' )
                    {
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $goto);
                    }
                    else
                    {
                        $opts    = array('event'=>'tbBtnNew_click',
                                        'function'=>'insert');
    
                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Question',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                else
                {
                    $msg  = _M('Error executing requested operation.', $module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }
        }
        else
        {
            $msg  = _M('No exist one curriculum to this course and this curricular component', $module).'.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->learningPeriodDescription = $this->learningPeriod->value;
        $data->personName                = $this->contractPersonName->value;
        $data->curricularComponentName   = $this->curricularComponentName->value;
        $data->contractCourseId          = $this->contractCourseId->value;
        $data->contractCourseVersion     = $this->contractCourseVersion->value;

        return $data;
    }

}

?>
