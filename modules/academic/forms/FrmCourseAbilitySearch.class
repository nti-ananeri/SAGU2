<?php

/**
 *
 * This file handles the connection and actions for acdCourseAbility table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCourseAbility table
 */
class FrmCourseAbilitySearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course ability (technician)', $this->home, 'courseAbility-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

//         $courseAbilityIdS = new MTextField('courseAbilityIdS', $this->courseAbilityIdS->value, _M('Ability id',$module), 10);
//         $courseAbilityIdS->setJsHint(_M('Enter the course ability code',$module));
//         $fields[] = $courseAbilityIdS;

        $fields[]  = new MHiddenField('courseAbilityIdS', $this->getFormValue('courseAbilityIdS', $courseAbilityIdS));

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $formationLevelId = new MHiddenField('formationLevelId', TECHNICAL_FORMATION_LEVEL_ID);
        $fields[] = $formationLevelId;

        $courseLabel = new MText('courseLabel', _M('Course id',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionS,courseNameS', $module, 'CourseVersion', null, array('formationLevelId' => 'formationLevelId', 'courseId' => 'courseIdS'), !$this->page->isPostBack());
        //$fields[] = $courseIdS;

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, '', FIELD_ID_SIZE);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));
        //$fields[] = $courseVersionS;

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setJsHint(_M('Enter the course name',$module));
        //$fields[] = $courseNameS;


        $hctCourseVersion = new MHContainer('hctCourseVersion', array($courseLabel, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseVersion->setShowLabel(true);
        $fields[]         = $hctCourseVersion;

        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the description',$module));
        $fields[] = $descriptionS;

//         $typeS = new MTextField('typeS', $this->typeS->value, _M('Type',$module), 5);
//         $typeS->setJsHint(_M('Enter the type',$module));
//         $fields[] = $typeS;

        $opts = array (
                        'G' => _M('General',$module),
                        'E' => _M('Specific',$module)
                      );

        $typeS = new MSelection('typeS', $this->getFormValue('typeS', $data->typeS), _M('Type',$module), $opts);
        $typeS->setJsHint(_M('Enter the type', $module));
        $fields[] = $typeS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->courseAbilityId = $this->courseAbilityIdS->value;
        $filters->courseId        = $this->courseIdS->value;
        $filters->courseVersion   = $this->courseVersionS->value;
        $filters->courseName      = $this->courseNameS->value;
        $filters->description     = $this->descriptionS->value;
        $filters->type            = $this->typeS->value;

        unset($this->courseAbilityIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCourseAbilitySearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusCourseAbility');
        $data = $business->searchCourseAbilityFormGrid($filters);
        $grdResults->setData($data);

//         is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.courseAbilityIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
