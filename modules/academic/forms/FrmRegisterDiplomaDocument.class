<?php

/**
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 06/10/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmRegisterDiplomaDocument extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Register diploma document', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Register diploma document', $this->home, 'registerDiplomaDocument-16x16.png', true);
        }
        //fim favoritos

        $fields[]   = $toolBar;

        $fields[]   = new MSeparator();
        $fields[]   = new MHiddenField('limbo', '');

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractCourseLabel = new MText('contractCourseLabel', _M('Contract',$module) . ':');
        $contractCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractCourseLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->enrollData->contractCourseId), '', FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->personId       = MIOLO::_request('contractPersonId');
        $data->personName     = MIOLO::_request('contractPersonName');
        $data->contractId     = MIOLO::_request('contractId');
        $data->fileType       = MIOLO::_request('radFileType');

        $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPersonStudent');
        $physicalPerson         = $businessPhysicalPerson->getPhysicalPersonStudent($data->personId);

        $fatherPerson       =  $businessPhysicalPerson->getPhysicalPerson($physicalPerson->fatherId);
        $motherPerson       =  $businessPhysicalPerson->getPhysicalPerson($physicalPerson->motherId);

        $businessCity       = $MIOLO->getBusiness('basic', 'BusCity');
        $cityBirth          = $businessCity->getCity($physicalPerson->cityIdBirth);

        $businessCountry    = $MIOLO->getBusiness('basic', 'BusCountry');

        if ( strlen((string)$physicalPerson->countryIdBirth) > 0 )
        {
            $countryNationality = $businessCountry->getCountry($physicalPerson->countryIdBirth);
        }

        $businessDocument   = $MIOLO->getBusiness('basic', 'BusDocument');
        $document           = $businessDocument->getDocument($data->personId, RG_CODE);

        if ( strlen((string)$document->cityId) > 0 )
        {
            $cityDocument       = $businessCity->getCity($document->cityId);
        }

        $documentEleitoral  = $businessDocument->getDocument($data->personId, DEFAULT_DOCUMENT_TYPE_ID_ELEITORAL_QUIT);


        $businessContract   = $MIOLO->getBusiness('academic', 'BusContract');
        $contract           = $businessContract->getContract($data->contractId);

        $businessMovementContract = $MIOLO->getBusiness('academic', 'BusMovementContract');
        $firstMovementContract    = $businessMovementContract->getFirstMovementContractDiploma($data->contractId);


        $businessCourse     = $MIOLO->getBusiness('academic', 'BusCourse');
        $course             = $businessCourse->getCourse($contract->courseId);

        $businessEducationArea = $MIOLO->getBusiness('academic', 'BusEducationArea');

        if ( strlen((string)$course->educationAreaId) > 0 )
        {
            $educationArea         = $businessEducationArea->getEducationArea($course->educationAreaId);
        }

        $businessDiploma     = $MIOLO->getBusiness('academic', 'BusDiploma');
        $filter2->contractId = $data->contractId;
        $diplomaData         = $businessDiploma->searchDiploma($filter2);

        $MIOLO->uses('/core/AgataAPI.class');
        $MIOLO->uses('classes/sagu.class', 'basic');

        $api = new AgataAPI;

        set_time_limit(0);

        if ( strlen((string)$contract->diplomaDate) > 0 )
        {
            if ( count($data) > 0 )
            {
                $api->setParameter('$recognitionDocumentNumber',     $course->recognitionDocumentNumber);

                $api->setParameter('$protocolId',   $diplomaData[0][4]);

                $api->setParameter('$personName',   $data->personName);
                $api->setParameter('$personId',     $data->personId);
                $api->setParameter('$fatherName',   $fatherPerson->name);
                $api->setParameter('$motherName',   $motherPerson->name);
                $api->setParameter('$dateBirth',            SAGU::getDateByExtense($physicalPerson->dateBirth));

                $naturalidade = $cityBirth->name . ' / ' . $cityBirth->stateId;

                $api->setParameter('$naturalidade', $naturalidade);
                $api->setParameter('$nationality',  $countryNationality->nationality);

                $documentDescription = $document->content . '/' . $document->organ . '/' . $cityDocument->stateId;

                $api->setParameter('$documentId',               $documentDescription);

                if ( $documentEleitoral->isDelivered == DB_TRUE )
                {
                    $situation = _M('Not conferred', $module);
                }
                else
                {
                    $situation = _M('Conferred', $module);
                }

                $api->setParameter('$situation', $situation);
                $api->setParameter('$conclusionYearHighSchool', $physicalPerson->yearHs);
                $api->setParameter('$ingressForma',          $firstMovementContract[0][0]);
                $api->setParameter('$codCourse',             $course->courseId);
                $api->setParameter('$courseName',            $course->name);
                $api->setParameter('$conclusionDate',        $contract->conclusionDate);
                $api->setParameter('$diplomaDate',           $contract->diplomaDate);

                $api->setParameter('$grauCourse',            $contract->degree);
                $api->setParameter('$registerNumber',        $diplomaData[0][0]);
                $api->setParameter('$sheet',                 $diplomaData[0][2]);
                $api->setParameter('$book',                  $diplomaData[0][3]);

                $api->setParameter('$dateNow', SAGU::getDateByExtense(date('d/m/Y')));

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(TEMP_DIR . '/contract.sxw');

                $dataAgata[0][0] = 'A';

                $api->setDataArray($dataAgata);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/registerDocument.sxw'));

                if ( $ok && $data->fileType == 'pdf' )
                {
                    $api->setOutputPath(TEMP_DIR . '/contract.pdf');
                    $ok = $api->openOffice2pdf(TEMP_DIR . '/contract.sxw');
                }

                if ( !$ok )
                {
                    $lblAgataError        = new MText('lblMsg1', $api->getError());
                    $lblAgataError->color = 'red';
                    $sep1                 = new Separator('');
                    $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                    $this->divError->addControl($cntErrors);
                }
                else
                {
                    $api->fileDialog();
                }
            }
        }
        else
        {
            $this->addError(_M('This pupil haven\'t diploma date', $module));
        }
    }
}

?>
