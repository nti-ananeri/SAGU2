<?php

/**
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdEnroll table
 */
class FrmInternalExploitationSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnNew');
        //$toolBar->hideButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Internal exploitation', $this->home, 'internalExploitation-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabelS;

        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->contractPersonIdS->value), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack() );
        $contractPersonIdS->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonIdS;
        $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->substitutionUnblockSearch->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonNameS->setReadOnly(true);
        $flds[]             = $contractPersonNameS;

        $hctPersonS = new MHContainer('hctContractS', $flds);
        $hctPersonS->setShowLabel(false);
        $fields[]  = $hctPersonS;
        unset($flds);

        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractLabelS;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $this->contractIdS->value), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), $module, 'Contract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', '', 'required');

        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->substitutionUnblockSearch->contractCourseIdS), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $flds[]           = $contractCourseIdS;

        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->substitutionUnblockSearch->contractCourseVersionS), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersionS->setReadOnly(true);
        $flds[]                = $contractCourseVersionS;

        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->substitutionUnblockSearch->contractCourseNameS), _M('Description',$module), 30);
        $contractCourseNameS->setReadOnly(true);
        $flds[]             = $contractCourseNameS;

        $hctContractS = new MHContainer('hctContractS', $flds);
        $hctContractS->setShowLabel(false);
        $fields[]    = $hctContractS;
        unset($flds);
        
        //Parâmetros para o lookup
        $fields[] = new MHiddenField('hideContractIdField', DB_TRUE);
        $fields[] = new MHiddenField('checkNumberHours', DB_TRUE);
        
        $newCurricularComponentLabelS = new MText('newCurricularComponentLabelS', _M('Curricular component', $module) . ':');
        $newCurricularComponentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $newCurricularComponentLabelS->setClass('m-caption m-caption-required');
        $flds[] = $newCurricularComponentLabelS;
        
        $newCurricularComponentId = new MLookupTextField('newCurricularComponentId', $this->getFormValue('newCurricularComponentId', $this->newCurricularComponentId->value), _M('Curricular component id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('newCurricularComponentVersion', 'newCurricularComponent',  'newCurriculumId',  'limbo',  'limbo',  'limbo', '', '', ''), $module, 'CurriculumFaultToConclue', null, array('contractId' => 'contractIdS', 'hideContractIdField' => 'hideContractIdField', 'checkNumberHours' => 'checkNumberHours' ), true);
        $newCurricularComponentId->setJsHint(_M('Enter the curricular component code', $module));
        $validators[]    = new MRequiredValidator('newCurricularComponentId', _M('Curricular component', $module));
        $flds[]        = $newCurricularComponentId;

        $newCurriculumIdS = new MHiddenField('newCurriculumIdS', $this->newCurriculumIdS->value);
        $fields[]         = $newCurriculumIdS;

        $newCurricularComponentVersion = new MTextField('newCurricularComponentVersion', $this->GetFormValue('newCurricularComponentVersion', $this->newCurricularComponentVersion->value), _M('Curricular component version', $module), FIELD_ID_SIZE);
        $newCurricularComponentVersion->setReadOnly(true);
        $flds[]                      = $newCurricularComponentVersion;

        $newCurricularComponent = new MTextField('newCurricularComponent', $this->GetFormValue('newCurricularComponent', $this->newCurricularComponent->value), _M('Curricular component', $module), FIELD_DESCRIPTION_SIZE);
        $newCurricularComponent->setReadOnly(true);
        $flds[]               = $newCurricularComponent;
        
        $hctCurriculumS = new MHContainer('hctCurriculumS', $flds);
        $hctCurriculumS->setShowLabel(false);
        $fields[]    = $hctCurriculumS;
        unset($flds);

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);

        // get form values
        $contractId                 = $this->contractIdS->value;
        $curriculumId               = $this->newCurriculumIdS->value;
        $curricularComponentId      = $this->newCurricularComponentId->value;
        $curricularComponentVersion = $this->newCurricularComponentVersion->value;

        if ( strlen((string)$contractId) > 0 )
        {
            try
            {
                $businessContract = $MIOLO->getBusiness($module,'BusContract');
                $contractData     = $businessContract->getContract($contractId);
            }
            catch (Exception $e)
            {
                $msg = _M('Error getting contract data. ', $module) . $e->getMessage();
                $this->addError($msg);
            }

            if ( strlen((string)$contractData->conclusionDate) > 0 )
            {
                //Contrato fechado
                $msg    = _M('This contract is closed and the system doesn\'t allow to register exploitations to contracts in this situation', $module);
                $this->addError($msg);
            }
            else
            {
                try
                {
                    $busCurriculum    = $MIOLO->getBusiness($module, 'BusCurriculum');
                    $isFromCurriculum = $busCurriculum->isFromCurriculum($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $curricularComponentId, $curricularComponentVersion);
                }
                catch (Exception $e)
                {
                    $msg = _M('Error getting curriculum data. ', $module) . $e->getMessage();
                    $this->addError($msg);
                }
                
                if (!$isFromCurriculum)
                {
                    $msg = _M('This curricular component does not belong to this curriculum.', $module);
                    $this->addError($msg);
                }
                else
                {
                    $filters->courseId                   = $contractData->courseId;
                    $filters->courseVersion              = $contractData->courseVersion;
                    $filters->turnId                     = $contractData->turnId;
                    $filters->unitId                     = $contractData->unitId;
                    $filters->curricularComponentId      = $curricularComponentId;
                    $filters->curricularComponentVersion = $curricularComponentVersion;
                    
                    try
                    {
                        $resultCurriculum = $busCurriculum->searchCurriculum($filters);
                    
                        $curriculumId = $resultCurriculum[0][0];
                    }
                    catch (Exception $e)
                    {
                        $msg = _M('Error getting curriculum data. ', $module) . $e->getMessage();
                        $this->addError($msg);
                    }
                    
                    if (strlen((string)$curriculumId) > 0)
                    {
                        try
                        {
                            $busEnroll = $MIOLO->getBusiness($module, 'BusEnroll');
                            $isCoursed = $busEnroll->checkIfCoursed($contractId, $curriculumId, true);
                        }
                        catch (Exception $e)
                        {
                            $msg = _M('Error getting enroll data. ', $module) . $e->getMessage();
                            $this->addError($msg);
                        }
                        
                        if ($isCoursed)
                        {
                            $msg = _M('This curricular component was coursed or is in course', $module);
                            $this->addError($msg);
                        }
                        else
                        {
                            $filters->contractId = $contractId;
                            $filters->newCurricularComponentId = $curricularComponentId;
                            $filters->curriculumId = $curriculumId;
                            
                            //Dados
                            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdInternalExploitationSearch', $filters);
                            
                            try
                            {
                                $business = $MIOLO->getBusiness($module, 'BusInternalExploitation');
                                
                                $gridData = $business->searchContractExploitableEnroll($contractId);
                            }
                            catch (Exception $e)
                            {
                                $msg = _M('Error getting exploitable enrolls. ', $module) . $e->getMessage();
                                $this->addError($msg);
                            }
                            
                            $grdResults->setData($gridData);
                            $this->addField($grdResults);
                        }
                    }
                    else
                    {
                        $msg = _M('Problems getting curriculum id. Check the curricular component register in contract course.', $module);
                        $this->addError($msg);
                    }
                }
            }
        }

        $this->page->onLoad('document.' . $this->name . '.contractPersonIdS.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
