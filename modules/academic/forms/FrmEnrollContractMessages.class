<?php

/**
 * Enroll contract form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/12/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to show the contract renewal messages
 **/
class FrmEnrollContractMessages extends MForm
{
    var $enrollData;

    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $session     = $MIOLO->session;
        $loginUid    = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;

        $this->enrollData = unserialize(urldecode(stripslashes(MIOLO::_request('enrollData'))));

        parent::__construct(_M('Messages', $module));

        //$this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

        //MUDAR AQUI!!!
        /*if ( !( SAGU::authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess($module, ACD_ENROLL, false, true) ) )
        {
            $this->page->mGoto($MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) . ':enroll'));
        }*/
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $business    = $MIOLO->getBusiness($module, 'BusEnroll');
        $busContract = $MIOLO->getBusiness($module, 'BusContract');
        
        $businessPeriodEnrollDate = $MIOLO->getBusiness($module, 'BusPeriodEnrollDate');
        $periodEnrollDate         = $businessPeriodEnrollDate->getCurrentPeriodEnrollDate($this->enrollData->learningPeriodId);
        
        $contractData = $busContract->getContract($this->enrollData->contractId);
        
        if ($business->isFreshman($this->enrollData->contractId))
        {
            $filters->status = 'F';    
        }
        elseif ($business->isVeteran($this->enrollData->contractId))
        {
            $filters->status = 'E';
        }
        else
        {
            $filters->status = 'O';
        }   
        
        $filters->isListener = $contractData->isListener;
        $messages            = $business->getEnrollContractMessages($this->enrollData->learningPeriodId, $filters);
        
        if ( (count($messages) > 0) && (strtoupper($periodEnrollDate->isAdjustment) == strtoupper(DB_FALSE)) )
        {
            foreach ($messages as $msg)
            {
                if (stristr($msg[1], '$contrato'))
                {
                    $msg[1] = str_replace('$contrato', $this->enrollData->contractId, $msg[1]);
                }
                
                if ( (stristr($msg[1], '$preco')) && (MODULE_FINANCE_INSTALLED == 'YES') )
                {
                    $busPrice = $MIOLO->getBusiness('finance', 'BusPrice');
                    $price    = $busPrice->getLastPrice($this->enrollData->learningPeriodId);
                    
                    $msg[1] = str_replace('$preco', number_format($price->value, 2, ',', '.'), $msg[1]);
                }
                
                $fields[] = new MText('msg_' . $msg[0], $msg[1]);
                $fields[] = new MSeparator();
            }
        }
        else
        {
            $vars = array ( 'returnTo' => $action,
                            'enrollData' => urlencode(serialize($this->enrollData)) );
                        
            $postAction = substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';
            
            $this->page->mGoto($MIOLO->getActionURL($module, $postAction,null,$vars));
        }
        
        //Buttons
        $btn1[]     = new MButton('btnPrev', '<< ' . _M('Previous', $module));
        $btn1[]     = new MButton('btnNext', _M('Accept', $module) . ' >>');
        $div1       = new MDiv('div1', $btn1, null, 'align=center');
        //$div1->addStyle('text-align', 'center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

    }

    /**
     * Event triggered when user click previous
     **/
    public function btnPrev_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( $MIOLO->checkAccess($module, ACD_ENROLL, false, true) )
        {
            // formulario de destino para funcionarios
            $postAction = substr($action,0,strrpos($action,':')) . ':enroll';
        }
        else
        {
            $data = $this->getData();

            foreach ( $data as $k => $v )
            {
                $this->enrollData->$k = $v;
            }

            $vars = array ( 'enrollData' => urlencode(serialize($this->enrollData)) );
            // formulario de destino para alunos
            $postAction = substr($action,0,strrpos($action,':')) . ':enrollContract';
        }
        $this->page->mGoto($MIOLO->getActionURL($module, $postAction,null,$vars));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnNext_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $vars = array ( 'returnTo' => $action,
                        'enrollData' => urlencode(serialize($this->enrollData)) );
                        
        $postAction = substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';
        
        $this->page->mGoto($MIOLO->getActionURL($module, $postAction,null,$vars));
    }
}

?>
