<?php
/**
 *
 * Shows a list of pupils enrolled in the specified group and allow the professor
 * to register their frequencies
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 10/09/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Report to show pupils ou employees financial situations
 */
class FrmFrequencyPupils extends MForm
{
    
    /**
     * Class constructor
     */
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Frequency', 'academic'));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
             $this->defineFields();
             $this->eventHandler();
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL('services',$action));

        //Toolbar save
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-disabled-20x20.png');

        $toolBar->addButton('tbBtnSave', _M('Save data','services'), 'javascript:saveData()', null, true, $enabledImage, $disabledImage);

        //Toolbar content
        $args = array ( 'groupId' => $data->groupId, 'event' => 'tbBtnContent_click' );

        //Toolbar exit
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png' );
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png' );
        

 
        //Toolbar desable all 
        $toolBar->hideButton('tbBtnExit');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnPrint');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        $fields[] = $toolBar;

        //define funcoes AJAX que serao chamadas ao clique do botao para armazenar dados
        $MIOLO->getRequiredJS4Ajax();
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $code = '
                    function saveData() 
                    {
                        xGetElementById(\'divContent\').innerHTML = "' . _M('Wait while saving data', 'services') . '...";
                        var enrollForSave = new Object();
                        enrollForSave = enrolls;
                        for ( x = 0 ; x < enrollForSave.length; x++ )
                        {
                            delete enrollForSave[x].absenceHours;
                            delete enrollForSave[x].presenceHours;
                        }

                        MIOLO_ajaxCall("' . $url . '", "POST", "ajax_btnSave", php_serialize(enrollForSave), updateData, "TEXT");
                    } 

                    function updateData(result) 
                    {
                        xGetElementById(\'divContent\').innerHTML = result;
                        MIOLO_parseAjaxJavascript(result);
                    }    
                ';
        $this->page->AddJsCode($code);
        unset($code);
        $fields[] = new MDiv('divContent', null);

        SAGU::importJsSerialize($this);
        $data->groupId      = MIOLO::_request('groupId');
        $data->enrollId     = MIOLO::_request('enrollId');

        $this->page->scripts->add( $MIOLO->getActionURL( 'services', 'html:scripts:professorFrequencyNew.js' ));
        $img0h           = $MIOLO->getActionUrl('services', 'html:images:presence-0h.png');
        $img1h           = $MIOLO->getActionUrl('services', 'html:images:presence-1h.png');
        $img2h           = $MIOLO->getActionUrl('services', 'html:images:presence-2h.png');
        $img3h           = $MIOLO->getActionUrl('services', 'html:images:presence-3h.png');
        $img4h           = $MIOLO->getActionUrl('services', 'html:images:presence-4h.png');
        $img5h           = $MIOLO->getActionUrl('services', 'html:images:presence-5h.png');
        $img6h           = $MIOLO->getActionUrl('services', 'html:images:presence-6h.png');
        $img7h           = $MIOLO->getActionUrl('services', 'html:images:presence-7h.png');
        $img8h           = $MIOLO->getActionUrl('services', 'html:images:presence-8h.png');
        $img9h           = $MIOLO->getActionUrl('services', 'html:images:presence-9h.png');
        $imgAddOn        = $MIOLO->getActionUrl('services', 'html:images:add-on.png');
        $imgAddOff       = $MIOLO->getActionUrl('services', 'html:images:add-off.png');
        $this->page->AddJsCode("setImageSources('$imgAddOn', '$imgAddOff', '$img0h', '$img1h', '$img2h', '$img3h', '$img4h', '$img5h', '$img6h', '$img7h', '$img8h', '$img9h')");
        $business = $MIOLO->getBusiness('services', 'BusProfessorFrequencyNew');
        $busGroup = $MIOLO->getBusiness('academic', 'BusGroup');

        unset( $cols, $title, $dataX, $academicCalendar, $professorGroup, $pupilsFrequence, $dataC);
                    
        $academicCalendar   = $business->getAcademicCalendar($data);
        $professorGroup     = $busGroup->getGroup($data->groupId);
                    
        $pupilsFrequence    = $business->listGroupPupilsEnrolledFrequency($data);    
        
        $title    = $professorGroup->curriculumCurricularComponentId . '/' . $professorGroup->curriculumCurricularComponentVersion . ' - '. $professorGroup->curriculumCurricularComponentName .'<br>Aluno: '. MIOLO::_request('personName');
        
        //cria as primeiras colunas da tabela (numero, nome e codigo)
        if ( count($pupilsFrequence->enrollFrequence) > 0 )
        {
            foreach ( $pupilsFrequence->enrollFrequence as $enrollId => $item )
            {
                $code[]        = "this.enrolls.push(new objEnroll($enrollId))";
            }
            $this->page->AddJsCode(implode($code, "\n"));
        }
        unset($code);

        foreach ( $academicCalendar as $item )
        {
            //Verifica se existe frequencia para o dia
            $tot = $item->totalOfferedHours;
        }
        $this->page->AddJsCode('setSchedulesNumber(' . $tot . ')');
        unset($tot);
        //cria componentes da tabela que relaciona aluno a horarios
        $x = -1;
        
        //Acao: dá presenca pra todo mundo:
        $divAction   = new MDiv('divAction', 'Ação', null, 'align=center');
        $divAction->setJsHint('Setar presença para todos os dias');
        $cols[]   = $divAction->generate();

        if ( count($academicCalendar) > 0 ) 
        {
            //unset($cols);
            foreach ( $academicCalendar as $occurrenceDate => $day )
            {
                $x++;
                $dataC[$x] = $day;
                $head = $day->day . '/' . $day->month . '<br>' ;
                $divDay   = new MDiv('divDay', $head, null, 'align=center');
                $divDay->setJsHint($weekDay);
                $cols[]   = $divDay->generate();
            }
        }
        $cols[] = _M('Presences', 'services');
        $cols[] = _M('Absences', 'services');
        
        //Action:
        unset($str);
        $image   = new MImage('imgFreqAction', 'Dar presença total para todos os dias!', $MIOLO->getActionURL($module, 'html:images:presence.png'));
        $image->addAttribute('onClick',"setPresenceAll('{$day->lessonNumberHours}')");
        $divFreq = new MDiv('divFreqAction', array($image), null, 'align=center');
        $dataX[0][0] = $divFreq;
        
        foreach ( $dataC as $x => $day )
        {
            //unset($str);
            foreach ( $pupilsFrequence->enrollFrequence as $enrollId => $occurrenceDates )
            {
                if ( array_key_exists ( $day->occurrenceDate, $occurrenceDates ) )
                {
                    $absences += ( $occurrenceDates[$day->occurrenceDate]['frequency'] - $day->lessonNumberHours );
                    $code['setData'][$day->occurrenceDate][$enrollId] ="setData('$enrollId', '$day->occurrenceDate', " . $occurrenceDates[$day->occurrenceDate]['frequency'] . ", true)";
                                $str = $occurrenceDates[$day->occurrenceDate]['frequency'] . " H/A " . _M('from', 'services') . ' ' . $day->lessonNumberHours . " H/A" . "\r\n" .  _M('Content', 'academic') . ': '. $day->content;
                    break;
                }
                $code['turnOffAddButton'][$day->occurrenceDate] = "turnOffAddButton('$day->occurrenceDate')";
            }
            $image   = new MImage('imgFreq[' . $enrollId . '][' . $day->occurrenceDate . ']', $str, null);
            $image->addAttribute('onClick',"updateFrequency('{$day->occurrenceDate}', '$enrollId', '{$day->lessonNumberHours}')");
            $divFreq = new MDiv('divFreq_' . $enrollId . '_' . $x, array($image), null, 'align=center');
            $dataX[0][$x+1] = $divFreq;
            $data->totalOfferedHours = $day->totalOfferedHours;
        }
        $labelSuffix = new MText('lbSuf', _M('H/L', 'services'));
        $labelSuffix->color = 'blue';
        $label = new MText('lbPres_' . $enrollId, '0');
        $label->setBold(true);
        $label->color = 'blue';

        $labelPercent = new MText('lbPercentPres_' . $enrollId, '(0%)');
        $labelPercent->color = 'blue';
            
        $divPres = new MDiv('divPres_' . $enrollId, array($label, $labelSuffix, $labelPercent), null, 'align=center');
        $divPres->addBoxStyle('white-space', 'nowrap');
 
        $dataX[0][count($cols)-2] = $divPres;
        
        $labelSuffix = new MText('lbSuf', _M('H/L', 'services'));
        $labelSuffix->color = 'red';
            
        $label  = new MText('lbAbs_' . $enrollId, '0');
        $label->setBold(true);
        $label->color = 'red';
            
        $labelPercent = new MText('lbPercentAbs_' . $enrollId, '(0%)');
        $labelPercent->color = 'red';
            
        $divAbs = new MDiv('divAbs_' . $enrollId, array($label, $labelSuffix, $labelPercent), null, 'align=center');
        $divAbs->addBoxStyle('white-space', 'nowrap');
        
        $dataX[0][count($cols)-1] = $divAbs;

        //cria campos
        $pupilsTable = new MTableRaw($title, $dataX, $cols);
        $fields[] = $pupilsTable;
        $fields[] = new MSeparator();
        if ( count($code['turnOffAddButton']) > 0 )
        {
            foreach ( $code['turnOffAddButton'] as $date => $value )
            {
                if (!$code['setData'][$date][$enrollId])
                {
                    $code['setData'][$date][$enrollId] ="setData('$enrollId', '$date', 0, true)";
                }
            }
        }
        if  ( count($code) > 0 )
        {
            foreach($code as $item => $value)
            {
                if (is_array($value))
                {
                    foreach( $value as $item2 => $value2 )
                    {
                        if ( is_array($value2) )
                        {
                            foreach ($value2 as $item3 => $value3 )
                            {
                                $this->page->AddJsCode($value3);
                            }
                        }
                        else
                        {
                            $this->page->AddJsCode($value2);
                        }
                    }
                }
            }
        }
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }

    public function tbBtnContent_click($enroll = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $data->groupId      = MIOLO::_REQUEST('groupId');
        $data->professorId  = MIOLO::_REQUEST('professorId');

        $class = 'RptLessonsContent'; 
        $MIOLO->getClass('academic', $class);
        $report = new $class($data); 
        return;
    }
    /**
     * Event triggered when user click on the save button
     **/
    public function ajax_btnSave($enrolls)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        $gotError = false;
        $data                 = unserialize(stripslashes($enrolls[0]));

        $professorObservation = $data['professorObservation'];
        unset($data['professorObservation']);
        $groupId              = $_REQUEST['groupId'];

        $business = $MIOLO->getBusiness('services', 'BusProfessorFrequencyNew');
        $business->beginTransaction();

        foreach ( $data as $enrolls )
        {
            $enrollId    = $enrolls->enrollId;
            $frequencies = $enrolls->frequencies;
            foreach ( $frequencies as $frequency )
            {   
                $acdFrequenceEnroll->userName      = trim($MIOLO->getLogin()->id);
                $acdFrequenceEnroll->ipAddress     = $_SERVER['REMOTE_ADDR'];
                $acdFrequenceEnroll->enrollId      = $enrollId;
                $acdFrequenceEnroll->frequencyDate = str_replace('_', '-', $frequency->frequencyDate);
                $acdFrequenceEnroll->frequency     = $frequency->frequency ? $frequency->frequency : 0;
                $acdFrequenceEnroll->professorId   = $_REQUEST['professorId'];
             
                try
                {
                    $business->insertFrequence ($acdFrequenceEnroll);
                }
                catch( Exception $e )
                {
                    $msg  = _M('Error inserting or updating data', 'services') . ': ' . $e->getMessage();
                    $gotError = true;
                } 
            }
        }
        if ( $gotError )
        {
            $business->rollback();
        }
        else
        {
            //Atualiza as observações do professor
            $business->updateProfessorObservation($groupId, $professorObservation);

            $business->commit();   
            $msg = _M('Data saved successfully', 'services') . '!';
        }
        $fld33[]  = new MTextLabel('labelInfo', '<br><font color=red>' . $msg . '</font><br>&nbsp;');
        $fields[] = new MDiv('divInfo', $fld33, null, 'align=center');
        unset($fld33);
        
        $this->manager->getTheme()->setContent($fields);
    }
}

?>
