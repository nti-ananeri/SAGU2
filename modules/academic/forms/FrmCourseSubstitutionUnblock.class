<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmCourseSubstitutionUnblock extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Insert', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course substitution unblock', $this->home, 'courseSubstitutionUnblock-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');
        $flds[] = $courseLabel;

        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $formationLevelId = new MHiddenField('formationLevelId', $formationLevelId);
        $fields[]         = $formationLevelId;

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('Course',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName', 'unitId', 'unitDescription', 'turnId', 'turnDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'formationLevelId'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course', $module));
        $flds[]           = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $flds[]             = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $flds[]             = $courseName;

        $hctCourse = new MHContainer('hctCourse', $flds);
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;
        unset($flds);

        $turnLabel = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $turnLabel;

        $turnId = new MTextField('turnId', $this->getFormValue('turnId',$data->turnId), _M('Turn',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $flds[]             = $turnId;
        
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription',$data->turnDescription), _M('Turn',$module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $flds[]             = $turnDescription;
        
        $hctTurn = new MHContainer('hctTurn', $flds);
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;
        unset($flds);

        $unitLabel = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $unitLabel;
        
        $unitId = new MTextField('unitId', $this->getFormValue('unitId',$data->unitId), _M('Unit id',$module), FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $flds[]             = $unitId;

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription',$data->unitDescription), _M('Unit description',$module), FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $flds[]           = $unitDescription;

        $hctUnit = new MHContainer('hctUnit', $flds);
        $hctUnit->setShowLabel(false);
        $fields[]  = $hctUnit;
        unset($flds); 

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;


        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodLabelS;    
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period', $module), 'required');
        $flds[]           = $learningPeriodId;

        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriod->setReadOnly(true);
        $flds[]           = $learningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);

        $curricularComponentLabelC = new MText('curricularComponentLabelC', _M('Curricular component',$module) . ':');
        $curricularComponentLabelC->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabelC->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabelC;

        $curricularComponentIdC = new MLookupTextField('curricularComponentIdC', $this->getFormValue('curricularComponentIdC', $data->curricularComponentIdC), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersionC,curricularComponentNameC', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseId', 'curricularComponentId' => 'curricularComponentIdC'), true);
        $validators[]          = new MRequiredValidator('curricularComponentIdC', _M('Curricular component',$module), 'required');
        $flds[]                = $curricularComponentIdC;

        $curricularComponentVersionC = new MTextField('curricularComponentVersionC', $this->getFormValue('curricularComponentVersionC', $data->curricularComponentVersionC), _M('Version',$module), FIELD_ID_SIZE);
        $flds[]                = $curricularComponentVersionC;
        $validators[] = new MRequiredValidator('curricularComponentVersionC',  _M('Curricular component version',$module), 'required');                                        

        $curricularComponentNameC = new MTextField('curricularComponentNameC', $this->getFormValue('curricularComponentNameC', $data->curricularComponentNameC), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameC->setReadOnly(true);
        $flds[]                  = $curricularComponentNameC;

        $hctCurricularComponentC = new MHContainer('hctCurricularComponentC', $flds);
        $hctCurricularComponentC->setShowLabel(false);
        $fields[]  = $hctCurricularComponentC;
        unset($flds);

        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Substitute curricular component', $module) . ':');
        $curricularComponentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabelS->setClass('m-caption m-caption-required');
        $flds[] = $curricularComponentLabelS;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId',$data->curricularComponentId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion , curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('periodId' => 'periodId', 'curricularComponentId' => 'curricularComponentId', 'formationLevelId' => 'formationLevelId'), true);
        $curricularComponentId->setJsHint(_M('Enter the substitution curricular component code',$module));
        $flds[]           = $curricularComponentId;
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Substitute curricular component', $module));

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion), '', FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('curricularComponentVersion', _M('Substitute curricular component version', $module), 'required');
        $flds[]           = $curricularComponentVersion;   

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]           = $curricularComponentName;

        $hctcurricularComponent = new MHContainer('hctcurricularComponent', $flds);
        $hctcurricularComponent->setShowLabel(true);
        $fields[]    = $hctcurricularComponent;
        unset($flds);

        $fields[] = new Separator('');
        $fields[] = new MButton('btnList', null . _M('Search', $module));       
        $fields[] = new Separator('<hr>');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.courseId.focus()');

    }

    /**
     * Event triggered when user clicks the list button
     **/
    public function btnList_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCourseSubstitutionUnblock');

        $filters->curricularComponentId      = $this->curricularComponentIdC->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
        $filters->courseId                   = $this->courseId->value;
        $filters->courseVersion              = $this->courseVersion->value;

        $busCurr     = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums = $busCurr->searchCurriculum($filters);

        //Verifica se a disciplina informada para ser substituída é do curriculo do aluno
        if ( !(count($curriculums) > 0) )
        {
            //$goto    = SAGU::getStackBackUrl();
            //$gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            //unset($opts['event']);
            $msg .= _M('The curricular component @1 isn\'t in the pupil curriculum.', $module, $data->curricularComponentOldName) . '<br>';
            $caption = _M('Error', $module);
            $this->addError( $msg );
            //$MIOLO->error( $msg, $gotoNo, $caption );
        }
        else
        {
            //Disciplina pertence ao currículo do aluno

            $data->curriculumId = $curriculums[0][0];

            $btn2     = new MButton('btnInvertSelection', _M('Invert selection', $module), 'invertSelection()');
            //$btn2->addAttribute('onClick','invertSelection()');
            $this->addField($btn2);

            $gridData = $business->selectCourseContracts($data);
            $grid     = $MIOLO->getUI()->getGrid($module,'GrdCourseSubstitutionUnblock', null);
            $grid->setData($gridData);

            //###GRID///is_array($data) ? $grid->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

            $this->addField($grid);

            if ( is_array($gridData) )
            {
                $script .= "    function invertSelection()\n    {\n";
                $x = 0;

                foreach ( $gridData as $row )
                {
                    $script .= '        if ( document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked == true )' . "\n        {\n";
                    $script .= '            document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked = false;' . "\n";
                    $script .= '        }' . "\n        else\n        {\n";
                    $script .= '            document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked = true;' . "\n";
                    $script .= '        }' . "\n";
                    $x++;
                }

                $script .= "    }\n";
                $script .= "    invertSelection();";
                $this->page->addJsCode($script);

                $this->toolBar->enableButton('tbBtnSave');
            }
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO         = MIOLO::getInstance();
        $module        = MIOLO::getCurrentModule();
        $action        = MIOLO::getCurrentAction();
        $function      = MIOLO::_request('function');

        $busContract   = $MIOLO->getBusiness($module, 'BusContract');
        $busCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');;

        $data          = $this->getTypesData();

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $contracts = $this->getFormValue('selectgridCourseSubstitutionUnblock',$this->selectgridCourseScheduleShockUnblock);

        $opts['contracts'] = urlencode(serialize($contracts));

        $msg = _M('Are you sure that want to insert substitution unblock to this pupils, this learning period and this curricular components', $module) . '?' ;

        $msg .= '<br><br>' . $data->learningPeriodDescription . '<br><br>' . _M('Curricular component', $module). ': ' . $data->curricularComponentOldName  . '<br><br>' . _M('Substitute curricular component' ,$module). ': ' . $data->curricularComponentNewName . '<br><br>';

        $msg .= _M('Pupils',$module).':<br>';

        if ( count($contracts) == 0 )
        {
            $msg .= '<br />' . _M('No pupils selected.', $module);
        }
        else
        {
            foreach ( $contracts as $key1 => $value1 )
            {
                $getContract = $busContract->getContract($value1);

                $msg .= '<br>' . $getContract->personName;
            }
        }

        $opts['function'] = $function;
        $opts['event']    = 'btnList_click';

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        //Verifica se a disciplina substituta pertence ao mesmo grau de formação da disciplina a ser substituida
        $filters2->courseId                = $data->courseId;
        $filters2->courseVersion           = $data->courseVersion;
        $filters2->courseUnitId            = $data->unitId;
        $filters2->courseTurnId            = $data->turnId;

        $filters1->curricularComponentId   = $data->curricularComponentId;
        $filters1->formationLevelId        = $data->formationLevelId;

        $filters2->curricularComponentId   = $data->curricularComponentIdC;
        $curricularComponentData           = $busCurriculum->searchCurriculum($filters2);
        $filters2->curricularComponentId   = $data->curricularComponentId;
        $curricularComponentSubstituteData = $busCurriculum->searchCurriculum($filters2);

        if ( !(count($busCurriculum->searchCurriculum($filters1)) > 0) )
        {
            //Substituta não pertence ao mesmo grau de formação
            unset($opts['event']);
            $msg  = _M('The substitute curricular component not is of same formation level that curricular component of pupil', $module);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $gotoNo, $caption );
        }
        else
        {
            //Verifica se são a disciplina substituta pertence ao mesmo currículo, se forem, não podem ser do mesmo tipo de currículo
            if ( count($curricularComponentSubstituteData) > 0 )
            {
                //Pertence ao mesmo currículo.
                if ( $curricularComponentData[0][18] == $curricularComponentSubstituteData[0][18])
                {
                    //São do mesmo tipo, NÃO PODE substituir
                    unset($opts['event']);
                    $msg = _M('Not is possible substitue this curricular component, because both curricular component are from the same curriculum type', $module) . '.' . '<br>';
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $gotoNo, $caption );
                }
                else
                {
                    //Não são do mesmo tipo, PODE substituir
                    //Se são de tipos diferentes, só avisar o usuário que pertencem ao mesmo currículo, mas podem ser inseridas
                    $msg .= '<font color=\'red\'><br><br>' . _M('The substitute curricular component @1 is in the pupil curriculum.', $module, $data->curricularComponentNewName) . '</font>';
                }
            }
        }


        $opts['function'] = $function;
        $opts['event']    = 'tbBtnSave_confirm';

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        unset($opts['event']);

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();

        $filters->curricularComponentId      = $this->curricularComponentIdC->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
        $filters->courseId                   = $this->courseId->value;
        $filters->courseVersion              = $this->courseVersion->value;

        $busCurr     = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums = $busCurr->searchCurriculum($filters);

        if ( strlen((string)$curriculums) > 0 ) 
        {
            //Existe este curriculo
            $data->curriculumId = $curriculums[0][0];

            $business = $MIOLO->getBusiness($module, 'BusCourseSubstitutionUnblock');
            $cnt      = 0;

            //$contracts = $this->getFormValue('selectgridCourseSubstitutionUnblock',$this->selectgridCourseScheduleShockUnblock);

            $contracts = unserialize(urldecode(stripslashes(MIOLO::_request('contracts'))));

            if ( count($contracts) > 0 )
            {
                foreach ( $contracts as $id => $value )
                {
                    if ($business->insertCourseSubstitutionUnblock($data, $value))
                    {
                        $cnt++;
                    }
                }
            }

            if ( $cnt > 0 )
            {
                $msg = _M('@1 records inserted', $module,$cnt);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg  = _M('Error executing requested operation.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            //Nao existe este curriculo
            $msg  = _M('No exist one curriculum to this course and this curricular component', $module).'.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        /*$ok  = $business->insertCourseSubstitutionUnblock($data);
        $msg = _M('@1 records inserted', $module,$ok);


        if ( $ok )
        {
            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }*/
    }

    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        
        $data->courseId      = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId        = $this->turnId->value;
        $data->unitId        = $this->unitId->value;

        $data->curricularComponentIdC = $this->curricularComponentIdC->value;

        $data->learningPeriodDescription  = $this->learningPeriod->value;
        $data->curricularComponentOldName = $this->curricularComponentNameC->value;
        $data->curricularComponentNewName = $this->curricularComponentName->value;

        $data->formationLevelId           = $this->formationLevelId->value;

        return $data;
    }

}

?>
