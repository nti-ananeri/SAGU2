<?php

/**
 * Form to manipulate acdMessageContractRenewal table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmMessageContractRenewal extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $messageContractRenewalId = $_GET['messageContractRenewalId'] ? $_GET['messageContractRenewalId'] : $_POST['messageContractRenewalId'];
            $fields[] = new MTextLabel('messageContractRenewalId', $messageContractRenewalId, _M('Message contract renewal id',$module));
            $fields[] = new MHiddenField('messageContractRenewalId', $messageContractRenewalId);

            $business = $MIOLO->getBusiness($module,'BusMessageContractRenewal');
            $data = $business->getMessageContractRenewal($messageContractRenewalId);
        }
        $this->page->onLoad('document.' . $this->name . '.courseId.focus();');
        
        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
        
        if ( in_array($function,array('update','delete')) )
        {
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');
        }
        else
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId', 'periodId' => 'periodId');
        }
        
        /*$businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;*/

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', FIELD_LOOKUPFIELD_SIZE, null, null,'limbo, courseId, courseVersion, turnId, unitId, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code', $module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);
        $learningPeriodDescription->setJsHint(_M('Description', $module));

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $fields[]  = $hctLearningPeriod;

        $message = new MMultiLineField('message', $this->getFormValue('message', $data->message), _M('Message', $module), 100, 5, 40);
        $message->setJsHint(_M('Enter the message', $module));
        $validators[] = new MRequiredValidator('message');
        $fields[] = $message;

        $opts = array (
                        'D' => _M('Default',$module),
                        'B' => _M('Bold',$module),
                        'I' => _M('Italic',$module)
                      );

        $font = new MSelection('font', $this->getFormValue('font', $data->font), _M('Font',$module), $opts);
        $font->setJsHint(_M('Enter the font', $module));
        $validators[] = new MRequiredValidator('font');
        $fields[] = $font;

        $opts = array (
                        '1'  => _M('One',$module),
                        '2'  => _M('Thwo',$module),
                        '3'  => _M('Three',$module),
                        '4'  => _M('Four',$module),
                        '5'  => _M('Five',$module),
                        '6'  => _M('Six',$module),
                        '7'  => _M('Seven',$module),
                        '8'  => _M('Eight',$module),
                        '9'  => _M('Nine',$module),
                        '10' => _M('Ten',$module)
                      );

        $sequence = new MSelection('sequence', $this->getFormValue('sequence', $data->sequence), _M('Sequence',$module), $opts);
        $sequence->setJsHint(_M('Enter the sequence', $module));
        $validators[] = new MRequiredValidator('sequence');
        $fields[] = $sequence;

        $length = $this->getFormValue('length', $data->length);
        $length = new MTextField('length', $length ? $length : DEFAULT_LINE_CHARS, _M('Line characters',$module), 5);
        $length->setJsHint(_M('Enter the number of line characters', $module));
//         $validators[] = new MRegExpValidator('length','','(^-?[0-9][0-9][0-9][0-9]$)','required');
        $validators[] = new MRequiredValidator('length', _M('Line characters',$module), 'required');
        $fields[] = $length;

        $isListenerLabel = new MText('isListenerLabel', _M('Shown for listener pupils',$module) . '?');
        $isListenerLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isListenerLabel->setClass('m-caption m-caption-required');

        $isListener = strlen((string)$this->GetFormValue('isListener',$data->isListener)) > 0 ? $this->GetFormValue('isListener',$data->isListener) : DB_FALSE;
        $isListener = new MRadioButtonGroup('isListener', '', SAGU::listTrueFalse(1), $isListener, null, 'horizontal');
        $isListener->SetShowLabel(false);

        $hctIsListener = new MHContainer('hctIsListener', array($isListenerLabel, $isListener));
        $fields[]  = $hctIsListener;

        $opts = array (
                        'E' => _M('Enrolled',$module),
                        'F' => _M('Freshmen',$module),
                        'O' => _M('Others',$module)
                      );

        $status = new MSelection('status', $this->getFormValue('status', $data->status), _M('Show for',$module), $opts);
        $status->setJsHint(_M('For what kind of pupil will this message be shown?', $module));
        $validators[] = new MRequiredValidator('status');
        $fields[] = $status;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'messageContractRenewalId' => MIOLO::_request('messageContractRenewalId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('messageContractRenewalIdS' => MIOLO::_request('messageContractRenewalId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusMessageContractRenewal');
        $ok = $business->deleteMessageContractRenewal($this->messageContractRenewalId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusMessageContractRenewal');

        if ( $function == 'update' )
        {
            $ok  = $business->updateMessageContractRenewal($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertMessageContractRenewal($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('messageContractRenewalIdS' => $data->messageContractRenewalId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdMessageContractRenewal();
        $data->messageContractRenewalId = $this->messageContractRenewalId->value;
        $data->learningPeriodId         = $this->learningPeriodId->value;
        $data->message                  = $this->message->value;
        $data->font                     = $this->font->value;
        $data->sequence                 = $this->sequence->value;
        $data->length                   = $this->length->value;
        $data->isListener               = $this->isListener->value;
        $data->status                   = $this->status->value;

        return $data;
    }

}

?>
