<?php

/**
 * ScolarshipDescription form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a scolarshipDescription
 **/
class FrmInternshipTerm extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('TERMO DE COMPROMISSO DE ESTÁGIO', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Termo de Compromisso de Estágio', $this->home, 'scolarshipDescription-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractPersonLabel;

        if (strlen((string)$this->getFormValue('contractId')) > 0)
        {
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', FIELD_ID_SIZE, null, null, array('limbo', 'contractPersonId', 'contractPersonName', 'contractCourseId','contractCourseVersion', 'turnId', 'limbo', 'unitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Enter the person code',$module));
            $flds[]           = $contractPersonId;
        }
        else
        {
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'turnId', 'limbo', 'unitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Enter the person code',$module));
            $flds[]           = $contractPersonId;
        }

        $validators[] = new MRequiredValidator('contractPersonId', _M('Person',$module));

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractCourseLabel = new MText('contractCourseLabel', _M('Contract',$module) . ':');
        $contractCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractCourseLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'turnId', 'limbo', 'unitId', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;

        $validators[] = new MRequiredValidator('contractId', _M('Contract',$module));

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Course id', $module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[] = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), _M('Course version', $module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[] = $contractCourseVersion;
        
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), _M('Course name', $module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $flds[] = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;

        $institutionLabel = new MText('institutionLabel', _M('Concedente',$module).':');
        $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $legalPersonId   = new MLookupTextField('legalPersonId', $this->getFormValue('legalPersonId',$data->legalPersonId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionHsName', 'basic', 'LegalPerson', null, null, true);
        $legalPersonId->setJsHint(_M('Enter the institution code',$module));
        $validators[] = new MIntegerValidator('legalPersonId', '', 'required');

        $institutionHsName = new MTextField('institutionHsName', $this->institutionHsName->value, '', FIELD_DESCRIPTION_SIZE);
        $institutionHsName->setJsHint(_M('Institution name',$module));
        $institutionHsName->setReadOnly(true);

        $hctInstitution = new MHContainer('hctInstitution', array($institutionLabel, $legalPersonId, $institutionHsName));
        $hctInstitution->setShowLabel(true);
        $fields[]  = $hctInstitution;

        $concedenteResponsable = new MTextField('concedenteResponsable', $this->getFormValue('concedenteResponsable', $data->concedenteResponsable), _M('Responsável', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $concedenteResponsable;

        $concedenteResponsableJob = new MTextField('concedenteResponsableJob', $this->getFormValue('concedenteResponsableJob', $data->concedenteResponsableJob), _M('Cargo (Representante)', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $concedenteResponsableJob;
        
        $vigencia = new MTextField('vigencia', $this->getFormValue('vigencia', $data->vigencia), _M('Vigência', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $vigencia;

        $horario = new MTextField('horario', $this->getFormValue('horario', $data->horario), _M('Horário', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $horario;

        $atividadeDoEstagio = new MTextField('atividadeDoEstagio', $this->getFormValue('atividadeDoEstagio', $data->atividadeDoEstagio), _M('Atividade do Estágio', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $atividadeDoEstagio;

        $setor = new MTextField('setor', $this->getFormValue('setor', $data->setor), _M('Setor', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $setor;

        $supervisor = new MTextField('supervisor', $this->getFormValue('supervisor', $data->supervisor), _M('Supervisor', $module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $supervisor;

        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate', $data->emissionDate))>0 ? $this->getFormValue('emissionDate', $data->emissionDate) : date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $fields[] = $emissionDate;
        $gravar = new MCheckBox('gravar', 1, '', $this->getFormValue('gravar', $data->printNotCoursed), _M('Save', $module));
        $fields[] = $gravar;
        $fields[] = new Separator('');
        unset($flds);

        $this->setFields($fields);
        //$this->addFields($this->defineFields());
        $this->setValidators($validators);
        $this->page->onLoad('document.' . $this->name . '.contractId.focus();');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);

    }
    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();
        
        $class = 'RptInternshipTerm';
        $MIOLO->getClass($module, $class);
        $report = new $class($data);
    }
    
    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->personId             = $this->contractPersonId->value;
        $data->contractId           = $this->contractId->value;
        $data->emissionDate         = $this->emissionDate->value;
        $data->unitId               = $this->unitId->value;
        $data->turnId               = $this->turnId->value; 
        $data->legalPersonId = $this->legalPersonId->value;
        $data->responsable = $this->concedenteResponsable->value;
        $data->responsableJob = $this->concedenteResponsableJob->value;
        $data->vigencia             = $this->vigencia->value;
        $data->horario              = $this->horario->value;
        $data->atividadeDoEstagio   = $this->atividadeDoEstagio->value;
        $data->setor                = $this->setor->value; //$this->notPrintEnrolled->value;
        $data->supervisor           = $this->supervisor->value;//$this->notPrintEnrolled->value;
        $data->gravar               = $this->gravar->value; //$this->printNotCoursed->value;
        return $data;
  }
}

?>
