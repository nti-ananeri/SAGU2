<?php

/**
 * Curriculum Conversion form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a curriculum conversion
 **/
class FrmCurriculumConversion extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $this->home   = $data->home;

        parent::__construct(_M('Curriculum conversion', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Curriculum conversion', $this->home, 'curriculumConversion-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]     = new MSeparator('');

        $flds[]       = new MSeparator('');

        //Error container
        $divMsgs1       = new MDiv('divMsgs1', $lblMsg, null, 'align=center');
        $fields[]       = $divMsgs1;

        $convertCoursesInLot = new MCheckBox('convertCoursesInLot', 1, '', false, '<b>'. _M('Check for process conversion in lot', $module) . '</b>' );
        $convertCoursesInLot->addAttribute('onclick', 'if (this.checked == true ) { document.getElementById(\'m_hctPerson\').style.display = \'none\';  document.getElementById(\'m_hctClass\').style.display = \'none\';  document.getElementById(\'lblMes\').style.display = \'none\';} else { document.getElementById(\'m_hctPerson\').style.display = \'\'; document.getElementById(\'m_hctClass\').style.display = \'\'; document.getElementById(\'lblMes\').style.display = \'\';  }');
        $fields[]     = new MHContainer('hctConvertCoursesInLot', array ( $convertCoursesInLot ) );

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $personLabel;
        //Contract
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName','oldCourseId','oldCourseName','oldCourseVersion','oldTurnId','oldTurnDescription','oldUnitId','oldUnitDescription'), $module, 'PersonContract', null, array ( 'personId' => 'personId' ) , true);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $flds[]       = $personId;
        
		$personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

		$contractId = new MHiddenField('contractId',$this->contractId->value,_M('Contract',$module));
        $flds[]  = $contractId;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        unset($flds);
        $flds[]  = $hctPerson;
        
    
        //Old course fields
        $oldCourseLabel = new MText('oldCourseLabel', _M('Course',$module) . ':');
        $oldCourseLabel->setClass('m-caption m-caption-required');
        $oldCourseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $oldCourseId = new MLookupTextField('oldCourseId', $this->getFormValue('oldCourseId', $data->oldCourseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('oldCourseVersion', 'oldCourseName', 'oldUnitId', 'oldUnitDescription', 'oldTurnId', 'oldTurnDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'oldCourseId'), true);
        $oldCourseId->setJsHint(_M('Enter the current course code',$module));
        $validators[] = new MRequiredValidator('oldCourseId', _M('Course',$module));

        $oldCourseVersion = new MTextField('oldCourseVersion', $this->getFormValue('oldCourseVersion', $data->oldCourseVersion), '', FIELD_ID_SIZE);
        //$oldCourseVersion->setReadOnly(true);

        $oldCourseName = new MTextField('oldCourseName', $this->getFormValue('oldCourseName', $data->oldCourseName), '', FIELD_DESCRIPTION_SIZE);
        $oldCourseName->setReadOnly(true);
        $oldCourseName->setJsHint(_M('Course name',$module));

        $hctOldCourse = new MHContainer('hctOldCourse', array($oldCourseLabel, $oldCourseId, $oldCourseVersion, $oldCourseName));
        $hctOldCourse->setShowLabel(true);
        //$fields[]  = $hctOldCourse;

        $flds[]       = $hctOldCourse;


        $oldTurnLabel = new MText('oldTurnLabel', _M('Turn',$module) . ':');
        $oldTurnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $oldTurnId = new MTextField('oldTurnId', $this->getFormValue('oldTurnId', $data->oldTurnId), _M('Turn id',$module), FIELD_ID_SIZE);
        $oldTurnId->setReadOnly(true);
        //$fields[] = $oldTurnId;

        $oldTurnDescription = new MTextField('oldTurnDescription', $this->getFormValue('oldTurnDescription', $data->oldTurnDescription), _M('Turn description', $module), FIELD_DESCRIPTION_SIZE);
        $oldTurnDescription->setReadOnly(true);

        $hctOldTurn = new MHContainer('hctOldTurn', array($oldTurnLabel, $oldTurnId, $oldTurnDescription));
        $hctOldTurn->setShowLabel(false);
        //$fields[]  = $hctOldTurn;

        $flds[]       = $hctOldTurn;

        $oldUnitLabel = new MText('oldUnitLabel', _M('Unit',$module) . ':');
        $oldUnitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $oldUnitId = new MTextField('oldUnitId', $this->getFormValue('oldUnitId', $data->oldUnitId), _M('Unit id', $module), FIELD_ID_SIZE);
        $oldUnitId->setReadOnly(true);
        //$fields[] = $oldUnitId;
        
        $oldUnitDescription = new MTextField('oldUnitDescription', $this->getFormValue('oldUnitDescription', $data->oldUnitDescription), _M('Unit description', $module), FIELD_DESCRIPTION_SIZE);
        $oldUnitDescription->setReadOnly(true);
        
        $hctOldUnit = new MHContainer('hctOldUnit', array($oldUnitLabel, $oldUnitId, $oldUnitDescription));
        $hctOldUnit->setShowLabel(false);
        //$fields[]  = $hctOldUnit;

        $flds[]       = $hctOldUnit;


        $bsg1         = new BaseGroup('bsg1', _M('Current course', $module), $flds, 'vertical');

        $fields[]     = $bsg1;

        $fields[]     = new MSeparator('');

        unset($flds);

        $flds[]     = new MSeparator('');

        //New course fields
        $newCourseLabel = new MText('newCourseLabel', _M('Course',$module) . ':');
        $newCourseLabel->setClass('m-caption m-caption-required');
        $newCourseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $newCourseId = new MLookupTextField('newCourseId', $this->getFormValue('newCourseId', $data->newCourseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'newCourseVersion, newCourseName, newUnitId, newUnitDescription, newTurnId, newTurnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'newCourseId'), true);
        $newCourseId->setJsHint(_M('Enter the new course code',$module));
        $validators[] = new MRequiredValidator('newCourseId', _M('Course',$module));

        $newCourseVersion = new MTextField('newCourseVersion', $this->getFormValue('newCourseVersion', $data->newCourseVersion), '', FIELD_ID_SIZE);
        //$newCourseVersion->setReadOnly(true);

        $newCourseName = new MTextField('newCourseName', $this->getFormValue('newCourseName', $data->newCourseName), '', FIELD_DESCRIPTION_SIZE);
        $newCourseName->setReadOnly(true);
        $newCourseName->setJsHint(_M('Course name',$module));

        $hctNewCourse = new MHContainer('hctNewCourse', array($newCourseLabel, $newCourseId, $newCourseVersion, $newCourseName));
        $hctNewCourse->setShowLabel(true);
        //$fields[]  = $hctNewCourse;
        $flds[]       = $hctNewCourse;

        $newTurnLabel = new MText('newTurnLabel', _M('Turn',$module) . ':');
        $newTurnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $newTurnId = new MTextField('newTurnId', $this->getFormValue('newTurnId', $data->newTurnId), _M('Turn id',$module), FIELD_ID_SIZE);
        $newTurnId->setReadOnly(true);
        //$fields[] = $newTurnId;

        $newTurnDescription = new MTextField('newTurnDescription', $this->getFormValue('newTurnDescription', $data->newTurnDescription), _M('Turn description', $module), FIELD_DESCRIPTION_SIZE);
        $newTurnDescription->setReadOnly(true);

        $hctNewTurn = new MHContainer('hctNewTurn', array($newTurnLabel, $newTurnId, $newTurnDescription));
        $hctNewTurn->setShowLabel(false);
        //$fields[]  = $hctNewTurn;
        $flds[]     = $hctNewTurn;

        $newUnitLabel = new MText('newUnitLabel', _M('Unit',$module) . ':');
        $newUnitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $newUnitId = new MTextField('newUnitId', $this->getFormValue('newUnitId', $data->newUnitId), _M('Unit id', $module), FIELD_ID_SIZE);
        $newUnitId->setReadOnly(true);
        //$fields[] = $newUnitId;
        
        $newUnitDescription = new MTextField('newUnitDescription', $this->getFormValue('newUnitDescription', $data->newUnitDescription), _M('Unit description', $module), FIELD_DESCRIPTION_SIZE);
        $newUnitDescription->setReadOnly(true);

        $hctNewUnit = new MHContainer('hctNewUnit', array($newUnitLabel, $newUnitId, $newUnitDescription));
        $hctNewUnit->setShowLabel(false);
        //$fields[]  = $hctNewUnit;
        $flds[]   = $hctNewUnit;
        
        $flds[] = new MSeparator('');

        $flds[] = new MTextLabel('lblMes', _M('If you fill out the class below, the person will be automatically included in this class after conversion', $module) . '.');

        $flds[] = new MSeparator('');

        $classLabel = new MText('classLabel', _M('Class', $module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds1[]    = $classLabel;

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Class', $module), FIELD_LOOKUPFIELD_SIZE, null, null, array('classDescription'), 'academic', 'Class', null, array('courseId' => 'newCourseId', 'courseVersion' => 'newCourseVersion', 'turnId' => 'newTurnId', 'unitId' => 'newUnitId'), !$this->page->isPostBack() );
        $classId->setJsHint(_M('Enter the class code',$module));
        $flds1[]  = $classId;

        $classDescription = new MTextField('classDescription', $this->getFormValue('classDescription', $data->classDescription), _M('Class',$module), FIELD_DESCRIPTION_SIZE);
        $classDescription->setReadOnly(true);
        $flds1[]   = $classDescription;

        $hctClass = new MHContainer('hctClass', $flds1);
        $hctClass->setShowLabel(false);
        $flds[]   = $hctClass;
        unset($flds1);

        $bsg2         = new BaseGroup('bsg2', _M('New course', $module), $flds, 'vertical');

        $fields[]     = $bsg2;

        unset($flds);

        $flds[]     = new MSeparator('');

 
        //é utiliza esta opção de conversão, para convertermos o currículo
        //para contratos ativos apenas
        $flds[] = new MHiddenField('convert', '1');


        $fields[] = new Separator('');

        //Error container
        $divMsgs        = new MDiv('divMsgs', $lblMsg, null, 'align=center');
        $fields[]       = $divMsgs;

        $fields[]       = new Separator();

        //Buttons
        $btn1[]     = new MButton('btnBack', _M('Back', $module), $MIOLO->getActionURL($module, 'main:process:curriculumConversion'));

        $btnConvert = new MButton('btnConvert', _M('Convert', $module));

        $btn1[]     = $btnConvert;
        $div1       = new MDiv('div1', $btn1, null, 'align=center');
        //$div1->addStyle('text-align', 'center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click convert
     **/
    public function btnConvert_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();

        $business = $MIOLO->getBusiness($module, 'BusCurriculumConversion');

        if ( strlen((string)$data->personId) > 0 )
        {
            //se for só para uma pessoa
            $contracts = $business->getContractsByData( $data->oldCourseId, 
                                                        $data->oldCourseVersion, 
                                                        $data->oldUnitId, 
                                                        $data->oldTurnId,
                                                        $data->personId,
                                                        $data->convert);
        }
        else if ( $data->convertCoursesInLot == '1' )
        {
            //conversaoa para todos do curso
            $contracts = $business->getContractsByData( $data->oldCourseId, 
                                                        $data->oldCourseVersion, 
                                                        $data->oldUnitId, 
                                                        $data->oldTurnId,
                                                        null,
                                                        $data->convert);
        }
        else
        {
            $msg           = _M('You can\'t process a conversion in lot without check the "check box"',$module) . '<br>' . $business->getErrors();
            $this->addError($msg); 
            return;
        }

        //se der algum erro exibe uma mensagem
        if ( count($business->getErrors()) > 0 )
        {
            $msg           = _M('Error getting contracts list',$module) . ': ' . '<br>' . $business->getErrors();

            $this->addError($msg);
        }

        //percorre os contratos a serem convertidos
        if ( count($contracts) > 0 )
        {
            $columns[] = "<div style=\"text-align: center;\">" . _M('Contract id', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Person id', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Person name', $module) . "</div>";

            $business->beginTransaction();

            foreach ( $contracts as $contract )
            {
                list ($contractId,
                      $personId,
                      $personName ) = $contract;

                //coleta as matrículas dos contratos
                $enrolls = $business->getContractEnrolls($contract[0]);

                //em caso de erro na coleta das matrículas
                if ( count($business->getErrors()) > 0 )
                {
                    $msg           = _M('Error getting enrolls list',$module) . ': ' . '<br>' . $business->getErrors();

                    $this->addError($msg);
                }

                //se o aluno tiver disciplinas a serem convertidas
                if ( count($enrolls) > 0 )
                {
                    foreach ( $enrolls as $enroll )
                    {
                        //pesquisa por disciplinas equivalentes para conversao
                        //$curriculumLink[0][0] - curriculo que sai
                        //$curriculumLink[0][1] - curriculo que entra
                        $curriculumLink = $business->getCurriculumLink($enroll[1], 
                                                                       $data->newCourseId, 
                                                                       $data->newCourseVersion,
                                                                       $data->newUnitId,
                                                                       $data->newTurnId);

                        //em caso de erro na pesquisa de disciplins equivalentes
                        if ( count($business->getErrors()) > 0 )
                        {
                            $msg           = _M('Error getting equivalences list',$module) . ': ' . '<br>' . $business->getErrors();

                            $this->addError($msg);
                        }

                        //se existirem disciplinas equivalentes para conversao
                        if ( count($curriculumLink) > 0 )
                        {
                            $business->updateEnrollCurriculumId($enroll[0], $curriculumLink[0][1]);
                        }
                    }
                }

                //atualiza os dados do contrato para o novo curso
                unset($sameCourse);

                $sameCourse = $business->checkSameContractToCourse($contract[0], $data->newCourseId, $data->newCourseVersion, $data->newUnitId, $data->newTurnId);

                if ( is_array($sameCourse) && ( count($sameCourse) > 0 ) )
                {
                    //Já existe um contrato para esta pessoa, curso, versão, turno e unidade
                    $msg .= '<br>' . _M('Just exist contract to this pupil', $module) . ' '. $sameCourse[0][0] . ' - ' . $sameCourse[0][1] . ' ' . _M('in this course, version, turn and unit', $module) . '. <br>' . _M('The curriculum also was altered to the new course', $module).'.';
                }
                else
                {
                    $business->updateContractCourseData($contract[0], 
                                                        $data->newCourseId,
                                                        $data->newCourseVersion,
                                                        $data->newUnitId,
                                                        $data->newTurnId);

                    //tira o aluno da turma
                    $business->closePupilInClass($contract[0]);
                    if ( strlen((string)$data->classId)> 0 )
                    {
                        $business->openPupilInClass($contract[0], $data->classId);
                    }

                }
                

                //em caso de erros
                if ( count($business->getErrors()) > 0 )
                {
                    $msg           = _M('Error updating contract',$module) . ' ' . $contract[0] . ':<br>' . $business->getErrors();

                    $this->addError($msg);
                }
                else
                {
                    $matrix[] = array($contractId, $personId, $personName);
                }
            }

            if ( count($business->getErrors()) > 0 )
            {
                $business->rollbackTransaction();
            }
            else
            {
                $business->commitTransaction();
            }

            $tableRaw = new MTableRaw('', $matrix, $columns);
            $tableRaw->setAlternate(true);
            $tableRaw->addStyle('width', '75%');

            $tableRaw->setCellAttribute(0, 0, 'width', '15%');
            $tableRaw->setCellAttribute(0, 1, 'width', '15%');
            $tableRaw->setCellAttribute(0, 2, 'width', '70%');

            $fields[] = new MSeparator('');

            $msg .= '<br>' . _M('Converted concluded to this persons', $module) . '<br>';

            $fields[] = new MSeparator('');

            $fields[] = $tableRaw;

            $fields[] = new MSeparator('');

            $this->bsg1->caption       = _M('Course Old', $module);

            $this->btnConvert->visible = false;
            $this->bsg3->visible       = false;

            $this->oldCourseId->setReadOnly(true);
            $this->newCourseId->setReadOnly(true);

            $this->addInfo($msg);

        }
        else
        {
            $msg           = _M('No contract available according to selected parameters', $module);

            $this->addError($msg);
        }
    }
}

?>
