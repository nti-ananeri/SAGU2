<?php

/**
 *
 * This file handles the connection and actions for acdClass table
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/206
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Form to search the acdClass table
 */
class FrmClassSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        //        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert(_M('Class',$module), $this->home, 'class-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $classLabelS = new MText('classLabelS', _M('Class id',$module) . ':');
        $classLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $classIdS = new MTextField('classIdS', $this->classIdS->value, '', FIELD_ID_SIZE);
        $classIdS->setJsHint(_M('Enter the class code',$module));

        $hctClassIdS = new MHContainer('hctClassIdS', array($classLabelS, $classIdS));
        $fields[]    = $hctClassIdS;

        $classLabelNameS = new MText('classLabelNameS', _M('Class name',$module) . ':');
        $classLabelNameS->setWidth(FIELD_CONTAINER_SIZE);

        $classNameS_ = new MTextField('classNameS_', $this->classNameS_->value,'', FIELD_DESCRIPTION_SIZE);
        $classNameS_->setJsHint(_M('Enter the class name',$module));

        $hctClassNameS = new MHContainer('hctClassNameS', array($classLabelNameS, $classNameS_));
        $fields[]      = $hctClassNameS;

        $classLabelVacantS = new MText('classLabelVacantS', _M('Vacant',$module) . ':');
        $classLabelVacantS->setWidth(FIELD_CONTAINER_SIZE);

        $vacantS = new MTextField('vacantS', $this->vacantS->value,'', FIELD_ID_SIZE);
        $vacantS->setJsHint(_M('Enter the number of vacants',$module));

        $hctClassVacantS = new MHContainer('hctClassVacantS', array($classLabelVacantS, $vacantS));
        $fields[]        = $hctClassVacantS;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodIdS      = new MComboBox('periodIdS', $this->getFormValue('periodIdS', CURRENT_PERIOD_ID), _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[]       = $periodIdS;

        //Course
        $courseLabelS   = new MText('courseLabelS', _M('Course',$module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS     = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionS, courseNameS', $module, 'CourseVersion', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseNameS    = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name',$module));

        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version code',$module));

        $hctCourseS     = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]      = $hctCourseS;
        //end course

        $lookupFilters = array('periodId' => 'periodIdS', 'courseId' => 'courseIdS');

        //period
        $initialLearningPeriodLabelS = new MText('initialLearningPeriodLabelS', _M('Initial learning period',$module).':');
        $initialLearningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $initialLearningPeriodIdS = new MLookupTextField('initialLearningPeriodIdS', $this->getFormValue('initialLearningPeriodIdS', $data->initialLearningPeriodIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,initialLearningPeriodDescriptionS', $module, 'LearningPeriod', null, $lookupFilters, true);
        $initialLearningPeriodIdS->setJsHint(_M('Enter the initial learning period code',$module));

        $initialLearningPeriodDescriptionS = new MTextField('initialLearningPeriodDescriptionS', $this->getFormValue('initialLearningPeriodDescriptionS', $data->learningPeriodDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $initialLearningPeriodDescriptionS->setJsHint(_M('Initial learning period description',$module));
        $initialLearningPeriodDescriptionS->setReadOnly(true);

        $hctInitialLearningPeriodS = new MHContainer('hctInitialLearningPeriodS', array($initialLearningPeriodLabelS, $initialLearningPeriodIdS, $initialLearningPeriodDescriptionS));
        $hctInitialLearningPeriodS->setShowLabel(true);
        $fields[]  = $hctInitialLearningPeriodS;
        //end

        // get Yes and No for Radio Button
        $option = '1';
        $messagesType =  SAGU::listYesNo('1'); 

        //isDependence
        $isDependenceLabelS = new MText('isDependenceLabelS', _M('Is dependence',$module) . '?');
        $isDependenceLabelS->setClass('m-caption m-caption-required');
        $isDependenceLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $isDependenceS      = $this->GetFormValue('isDependenceS',$data->isDependenceS);
        $isDependenceS      = new MRadioButtonGroup('isDependenceS', '', $messagesType , $isDependenceS, null, 'horizontal');
        $isDependenceS->SetShowLabel(false);

        $hctIsDependenceS   = new MHContainer('hctIsDependenceS', array($isDependenceLabelS, $isDependenceS));
        $fields[]           = $hctIsDependenceS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters = new AcdClass();
        $filters->classId                   = $this->classIdS->value;
        $filters->className_                = $this->classNameS_->value;
        $filters->vacant                    = $this->vacantS->value;
        $filters->periodId                  = $this->periodIdS->value;
        $filters->courseId                  = $this->courseIdS->value;
        $filters->initialLearningPeriodId   = $this->initialLearningPeriodIdS->value;
        $filters->isDependence              = $this->isDependenceS->value;

        //unset($this->classIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdClassSearch', $filters);
        $business   = $MIOLO->getBusiness($module, 'BusClass');
        $data       = $business->searchClass($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.classIdS.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
