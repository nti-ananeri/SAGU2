<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmMinimumTurnUnblockSearch extends MForm
{
    private $home;
    private $module;
    private $grdResults;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Minimum turn unblock', $this->home, 'minimumTurnUnblock-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        
        $curricularComponentUnblockIdS = new MHiddenField('curricularComponentUnblockIdS', $this->getFormValue('curricularComponentUnblockIdS', $data->curricularComponentUnblockIdS));
        $fields[] = $curricularComponentUnblockIdS;      

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabelS;    
        
        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->conditionUnblockSearch->contractPersonIdS), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractPersonIdS->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonIdS;
        $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->conditionUnblockSearch->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonNameS->setReadOnly(true);
        $flds[]             = $contractPersonNameS;

        $hctPersonS = new MHContainer('hctContractS', $flds);
        $hctPersonS->setShowLabel(false);
        $fields[]  = $hctPersonS;
        unset($flds);       
        
        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractLabelS;
        
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', '', 'optional');

        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->conditionUnblockSearch->contractCourseIdS), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $flds[]           = $contractCourseIdS;

        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->conditionUnblockSearch->contractCourseVersionS), _M('Version',$module), 3);
        $contractCourseVersionS->setReadOnly(true);
        $flds[]                = $contractCourseVersionS;

        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->conditionUnblockSearch->contractCourseNameS), _M('Description',$module), 35);
        $contractCourseNameS->setReadOnly(true);
        $flds[]             = $contractCourseNameS;

        $hctContractS = new MHContainer('hctContractS', $flds);
        $hctContractS->setShowLabel(false);
        $fields[]    = $hctContractS;
        unset($flds);
        
        $contractTurnIdS = new MHiddenField('contractTurnIdS', '');
        $fields[]    = $contractTurnIdS;

        $contractUnitIdS = new MHiddenField('contractUnitIdS', '');
        $fields[]    = $contractUnitIdS; 

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');

        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', CURRENT_PERIOD_ID), _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $flds[] = $learningPeriodLabelS;       
        
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS'), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriodS'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseIdS', 'courseVersion' => 'contractCourseVersionS', 'turnId' => 'contractTurnIdS', 'unitId' => 'contractUnitIdS'), true);
        $learningPeriodIdS->setJsHint(_M('Enter the learning period code',$module));
        $flds[]           = $learningPeriodIdS;

        $learningPeriodS = new MTextField('learningPeriodS', $this->getFormValue('learningPeriodS',$this->conditionUnblockSearch->learningPeriodS), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodS->setReadOnly(true);
        $flds[]           = $learningPeriodS;

        $hctlearningPeriodS = new MHContainer('hctlearningPeriodS', $flds);
        $hctlearningPeriodS->setShowLabel(false);
        $fields[]    = $hctlearningPeriodS;
        unset($flds);

        $fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $this->grdResults = $MIOLO->getUI()->getGrid($module,'GrdMinimumTurnUnblockSearch', $filters);
        $this->addField($this->grdResults);

        $this->page->onLoad('document.' . $this->name . '.contractPersonIdS.focus()');
    }

    public function btnSearch_Click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->curricularComponentUnblockId = $this->curricularComponentUnblockIdS->value;
        $filters->personId                     = $this->contractPersonIdS->value;
        $filters->contractId                   = $this->contractIdS->value;
        $filters->learningPeriodId             = $this->learningPeriodIdS->value;
        $filters->curriculumId                 = $this->curriculumIdS->value;
        $filters->periodId                     = $this->periodId->value;

        $business = $MIOLO->getBusiness($module,'BusMinimumTurnUnblock');
        $data = $business->searchMinimumTurnUnblockFormGrid($filters);
        $this->grdResults->setData($data);
    }

}

?>
