<?php

/**
 * Certified form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmCertified extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar  = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $certifiedId     = MIOLO::_request('certifiedId');
            $dateIssue       = MIOLO::_request('dateIssue');
            $certifiedTypeId = MIOLO::_request('certifiedTypeId');

            $business = $MIOLO->getBusiness($module, 'BusCertified');
            $data     = $business->getCertified($certifiedId, $dateIssue, $certifiedTypeId);

            $fields[] = new MHiddenField('certifiedId', $certifiedId);
            $fields[] = new MTextLabel('certifiedId', $data->certifiedId, _M('Certified id', $module));

            $fields[] = new MHiddenField('dateIssue', $dateIssue);
            $fields[] = new MTextLabel('dateIssue', $data->dateIssue, _M('Issue date', $module));

            $fields[] = new MHiddenField('certifiedTypeId', $certifiedTypeId);
            $fields[] = new MTextLabel('certifiedTypeId', $data->certifiedTypeId, _M('Certified type', $module));
        }

        $limbo = new MHiddenField('limbo');
        $fields[] = $limbo;

        $certifiedTypeLabel = new MText('certifiedTypeLabel', _M('Certified type',$module) . ':');
        $certifiedTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $certifiedTypeLabel->setClass('m-caption m-caption-required');

        if ( in_array($function, array('insert') ) )
        {
            $certifiedTypeId = new MLookupTextField('certifiedTypeId', $this->getFormValue('certifiedTypeId', $data->certifiedTypeId), NULL, FIELD_LOOKUPFIELD_SIZE, NULL, NULL, 'certifiedTypeDescription', $module, 'CertifiedType', NULL, NULL, true);
            $certifiedTypeId->setJsHint(_M('Certified type id',$module));
            $validators[]    = new MIntegerValidator('certifiedTypeId', _M('Certified type',$module), 'required');

            $certifiedTypeDescription = new MTextField('certifiedTypeDescription', $this->getFormValue('certifiedTypeDescription', $data->certifiedTypeDescription), NULL, FIELD_DESCRIPTION_SIZE);
            $certifiedTypeDescription->setReadOnly(true);
            $certifiedTypeDescription->setJsHint(_M('Certified type description',$module));

            $hctCertifiedType = new MHContainer('hctCertifiedType', array($certifiedTypeLabel, $certifiedTypeId, $certifiedTypeDescription));
            $hctCertifiedType->setShowLabel(true);
            $fields[]         = $hctCertifiedType;
        }

        $personIdLabel = new MText('personIdLabel', _M('Person',$module) . ':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personIdLabel->setClass('m-caption m-caption-required');

        $certifiedTypeId = new MLookupTextField('certifiedTypeId', $this->getFormValue('certifiedTypeId', $data->certifiedTypeId), NULL, FIELD_LOOKUPFIELD_SIZE, NULL, NULL, 'certifiedTypeDescription', $module, 'CertifiedType', NULL, NULL, true);

        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'contractPersonName', 'courseId', 'contractCourseName', 'courseVersion', 'turnId', 'limbo', 'unitId'), $module, 'PersonContract', null, array('personId' => 'personId'), !$this->page->isPostBack());
        $personId->setJsHint(_M('Enter the person code',$module));

        $validators[]    = new MIntegerValidator('personId', _M('Person',$module), 'required');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), NULL, FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Enter the person name',$module));

        $hctContractPersonId = new MHContainer('hctContractPersonId', array($personIdLabel, $personId, $contractPersonName));
        $hctContractPersonId->setShowLabel(true);
        $fields[]         = $hctContractPersonId;

        $contractIdLabel = new MText('contractIdLabel', _M('Contract',$module) . ':');
        $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$contractIdLabel->setClass('m-caption m-caption-required');

        if ( strlen((string)$this->getFormValue('contractId', $data->contractId))>0 )
        {
            $contractId = new MTextField('contractId', $this->getFormValue('contractId', $data->contractId), NULL, FIELD_ID_SIZE);
            $contractId->setReadOnly(true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
        }
        else
        {
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'contractPersonName', 'courseId', 'contractCourseName', 'courseVersion', 'turnId', 'limbo', 'unitId'), $module, 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
        }
        $validators[]    = new MIntegerValidator('contractId', _M('Contract',$module), 'optional');

        $hctContractId = new MHContainer('hctContractId', array($contractIdLabel, $contractId));
        $hctContractId->setShowLabel(true);
        $fields[]         = $hctContractId;

        $contractCourseIdLabel = new MText('contractCourseIdLabel', _M('Course',$module) . ':');
        $contractCourseIdLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), null, FIELD_ID_SIZE);
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('course code',$module));
        //$flds[]           = $contractCourseId;

        $contractCourseVersionLabel = new MText('contractCourseVersionLabel', _M('Version',$module) . ':');
        $contractCourseVersionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseVersionLabel->setClass('m-caption m-caption-required');

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), null, FIELD_ID_SIZE-3);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        //$flds[]                = $contractCourseVersion;

        $contractCourseNameLabel = new MText('contractCourseNameLabel', _M('Description',$module) . ':');
        $contractCourseNameLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseNameLabel->setClass('m-caption m-caption-required');

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), null, FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Course name',$module));
        $flds[]             = $contractCourseName;

        $hctCoursetId = new MHContainer('hctCoursetId', array($contractCourseIdLabel, $courseId, $courseVersion, $contractCourseName));
        $hctCoursetId->setShowLabel(true);
        $fields[]         = $hctCoursetId;

        $fields[] = new MHiddenField('unitId', $this->getFormValue('unitId', $data->unitId));
        $fields[] = new MHiddenField('turnId', $this->getFormValue('turnId', $data->turnId));

        $dateIssueLabel = new MText('dateIssueLabel', _M('Issue date',$module) . ':');
        $dateIssueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $dateIssueLabel->setClass('m-caption m-caption-required');

        if ( in_array($function, array('insert') ) )
        {
            $dateIssue = $this->getFormValue('dateIssue', date(MASK_DATE_PHP));
            $dateIssue = new MCalendarField('dateIssue', $dateIssue, NULL , FIELD_DATE_SIZE);
            $dateIssue->setJsHint(_M('Issue date',$module));
            $validators[] = new MDATEDMYValidator('dateIssue', _M('Issue date', $module), 'required');

            $hctDateIssue = new MHContainer('hctDateIssue', array($dateIssueLabel, $dateIssue));
            $hctDateIssue->setShowLabel(true);
            $fields[]  = $hctDateIssue;
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        //$this->page->onLoad('document.' . $this->name . '.certifiedTypeId.focus();');
    }
    

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'           => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'certifiedId'     => MIOLO::_request('certifiedId'),
                        'dateIssue'       => MIOLO::_request('dateIssue'),
                        'certifiedTypeId' => MIOLO::_request('certifiedTypeId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCertified');
        $ok       = $business->deleteCertified($this->certifiedId->value, $this->dateIssue->value, $this->certifiedTypeId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCertified');

        if ( $function == 'update' )
        {
            $ok  = $business->updateCertified($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCertified($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('certifiedIdS'     => $data->certifiedId,
                          'certifiedTypeIdS' => $data->certifiedTypeId,
                          'dateIssueS'       => $data->dateIssue,
                          'personIdS'        => $data->personId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdCertified();
        
        $data->certifiedTypeId = $this->certifiedTypeId->value;
        $data->certifiedId     = $this->certifiedId->value;
        $data->dateIssue       = $this->dateIssue->value;
        $data->personId        = $this->personId->value;
        $data->courseId        = $this->courseId->value;
        $data->courseVersion   = $this->courseVersion->value;
        $data->turnId          = $this->turnId->value;
        $data->unitId          = $this->unitId->value;
        
        return $data;
    }

}

?>
