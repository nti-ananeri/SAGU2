<?php

/**
 *
 * This file handles the connection and actions for acdCurriculumLink table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurriculumLink table
 */
class FrmCurriculumLinkSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Curriculum matrix link', $this->home, 'curriculumLink-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $courseLabel = new MText('courseLabel', _M('Course id',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_ID_SIZE, null, null, 'courseVersionS, courseNameS, courseUnitIdS, courseUnitDescriptionS, courseTurnIdS, courseTurnDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());

        $fields[] = new MHiddenField('courseUnitIdS', $courseUnitIdS);
        $fields[] = new MHiddenField('courseTurnIdS', $courseTurnIdS);

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setJsHint(_M('Enter the curriculum course name',$module));
        $courseNameS->setReadOnly(true);

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, '', 5);
        $courseVersionS->setJsHint(_M('Enter the curriculum course version',$module));
        //$courseVersionS->setReadOnly(true);

        $courseUnitDescriptionS = new MTextField('courseUnitDescriptionS', $this->courseUnitDescriptionS->value, '', 8);
        $courseUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $courseUnitDescriptionS->setReadOnly(true);

        $courseTurnDescriptionS = new MTextField('courseTurnDescriptionS', $this->courseTurnDescriptionS->value, '', 8);
        $courseTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $courseTurnDescriptionS->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseIdS, $courseNameS, $courseVersionS, $courseUnitDescriptionS, $courseTurnDescriptionS));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component id',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curricularComponentIdS = new MLookupTextField('curricularComponentIdS', $this->curricularComponentIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersionS, curricularComponentNameS', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentIdS'), !$this->page->isPostBack());

        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->curricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $curricularComponentVersionS->setJsHint(_M('Enter the curriculum curricular component version',$module));
        //$curricularComponentVersionS->setReadOnly(true);

        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->curricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameS->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curricularComponentNameS->setReadOnly(true);

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
        $hctCurricularComponent->setShowLabel(true);
        $fields[]  = $hctCurricularComponent;


        //curriculumLink
        $courseLinkLabel = new MText('courseLinkLabel', _M('Course link id',$module) . ':');
        $courseLinkLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseLinkIdS = new MLookupTextField('courseLinkIdS', $this->courseLinkIdS->value, '', FIELD_ID_SIZE, null, null, 'courseLinkVersionS, courseLinkNameS, courseLinkUnitIdS, courseLinkUnitDescriptionS, courseLinkTurnIdS, courseLinkTurnDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'courseLinkIdS'), !$this->page->isPostBack());

        $fields[] = new MHiddenField('courseLinkUnitIdS', $courseLinkUnitIdS);
        $fields[] = new MHiddenField('courseLinkTurnIdS', $courseLinkTurnIdS);

        $courseLinkNameS = new MTextField('courseLinkNameS', $this->courseLinkNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseLinkNameS->setJsHint(_M('Enter the curriculum course name',$module));
        $courseLinkNameS->setReadOnly(true);

        $courseLinkVersionS = new MTextField('courseLinkVersionS', $this->courseLinkVersionS->value, '', 5);
        $courseLinkVersionS->setJsHint(_M('Enter the curriculum course version',$module));
        //$courseLinkVersionS->setReadOnly(true);

        $courseLinkUnitDescriptionS = new MTextField('courseLinkUnitDescriptionS', $this->courseLinkUnitDescriptionS->value, '', 8);
        $courseLinkUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $courseLinkUnitDescriptionS->setReadOnly(true);

        $courseLinkTurnDescriptionS = new MTextField('courseLinkTurnDescriptionS', $this->courseLinkTurnDescriptionS->value, '', 8);
        $courseLinkTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $courseLinkTurnDescriptionS->setReadOnly(true);

        $hctLinkCourse = new MHContainer('hctLinkCourse', array($courseLinkLabel, $courseLinkIdS, $courseLinkNameS, $courseLinkVersionS, $courseLinkUnitDescriptionS, $courseLinkTurnDescriptionS));
        $hctLinkCourse->setShowLabel(true);
        $fields[]  = $hctLinkCourse;

        $curricularComponentLinkLabel = new MText('curricularComponentLinkLabel', _M('Curricular component link id',$module) . ':');
        $curricularComponentLinkLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curricularComponentLinkIdS = new MLookupTextField('curricularComponentLinkIdS', $this->curricularComponentLinkIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentLinkVersionS, curricularComponentLinkNameS', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentLinkIdS'), !$this->page->isPostBack());

        $curricularComponentLinkVersionS = new MTextField('curricularComponentLinkVersionS', $this->curricularComponentLinkVersionS->value, '', FIELD_ID_SIZE);
        $curricularComponentLinkVersionS->setJsHint(_M('Enter the curriculum curricular component version',$module));
        //$curricularComponentLinkVersionS->setReadOnly(true);

        $curricularComponentLinkNameS = new MTextField('curricularComponentLinkNameS', $this->curricularComponentLinkNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentLinkNameS->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curricularComponentLinkNameS->setReadOnly(true);

        $hctCurricularComponentLink = new MHContainer('hctCurricularComponentLink', array($curricularComponentLinkLabel, $curricularComponentLinkIdS, $curricularComponentLinkVersionS, $curricularComponentLinkNameS));
        $hctCurricularComponentLink->setShowLabel(true);
        $fields[]  = $hctCurricularComponentLink;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        //curriculumId
        $filters->courseId                   = $this->courseIdS->value ;
        $filters->courseVersion              = $this->courseVersionS->value ;
        $filters->courseUnitId               = $this->courseUnitIdS->value ;
        $filters->courseTurnId               = $this->courseTurnIdS->value ;
        $filters->curricularComponentId      = $this->curricularComponentIdS->value ;
        $filters->curricularComponentVersion = $this->curricularComponentVersionS->value ;

        $filters->courseLinkId               = $this->courseLinkIdS->value ;
        $filters->courseLinkVersion          = $this->courseLinkVersionS->value ;
        $filters->courseLinkUnitId           = $this->courseLinkUnitIdS->value ;
        $filters->courseLinkTurnId           = $this->courseLinkTurnIdS->value ;
        $filters->curricularComponentLinkId  = $this->curricularComponentLinkIdS->value ;
        $filters->curricularComponentLinkVersion = $this->curricularComponentLinkVersionS->value ;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCurriculumLinkSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusCurriculumLink');
        $data = $business->searchCurriculumLink($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults); 

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.curriculumOutIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
