<?php

/**
 *
 * This file handles the connection and actions for acdEvaluationEnroll table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 10/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdEvaluationEnroll table
 */
class FrmEvaluationEnrollSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Grade typing to evaluation', $this->home, 'evaluationEnroll-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        $limbo = new MHiddenField('limbo');
        $fields[] = $limbo;
        
        $professorLabelS = new MText('professorLabelS', _M('Professor', $module) . ':');
        $professorLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $professorLabelS;
        
        $professorIdS = new MLookupTextField('professorIdS', $this->getFormValue('professorIdS', $data->professorIdS), _M('Professor id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, array('personId' => 'professorIdS'), true);
        $professorIdS->setJsHint(_M('Enter the professor code',$module));
        $flds[] = $professorIdS;
        $validators[] = new MIntegerValidator('professorIdS', _M('Professor', $module), 'optional');

        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, _M('Professor name',$module), FIELD_DESCRIPTION_SIZE);
        $professorNameS->setReadOnly(true);
        $professorIdS->setJsHint(_M('Professor name',$module));
        $flds[] = $professorNameS;
        
        $hctProfessorS = new MHContainer('hctProfessorS', $flds);
        $hctProfessorS->setShowLabel(false);
        $fields[] = $hctProfessorS;
        unset($flds);
        
        $evaluationLabelS = new MText('evaluationLabelS', _M('Evaluation', $module) . ':');
        $evaluationLabelS->setWidth(FIELD_CONTAINER_SIZE);
        //$evaluationLabelS->setClass('m-caption m-caption-required');
        
        $evaluationIdS = new MTextField('evaluationIdS', $this->getFormValue('evaluationIdS', $data->evaluationIdS),'', FIELD_ID_SIZE);
        $evaluationIdS->setReadOnly(true);
        
        $scheduleProfessorIdS = new MLookupField('scheduleProfessorIdS', $this->getFormValue('scheduleProfessorIdS', $data->scheduleProfessorIdS), null, null, 'professorIdS, professorNameS, limbo, limbo, limbo, periodIdS, limbo, limbo, limbo, limbo, limbo, limbo, limbo, curricularComponentIdS, curricularComponentVersionS, curricularComponentNameS, evaluationIdS, evaluationDescriptionS', $module, 'Evaluation', null, array('professorIdS' => 'professorIdS'), true);
        
        $evaluationDescriptionS = new MTextField('evaluationDescriptionS', $this->getFormValue('evaluationDescriptionS', $data->evaluationDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $evaluationDescriptionS->setReadOnly(true);
        //$flds[] = $evaluationDescription;
        
        $hctEvaluationS = new MHContainer('hctEvaluationS', array($evaluationLabelS, $evaluationIdS, $scheduleProfessorIdS, $evaluationDescriptionS));
        $hctEvaluationS->setShowLabel(false);
        $fields[]  = $hctEvaluationS;
        unset($flds);
        
        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Curricular component', $module) . ':');
        $curricularComponentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        
        $curricularComponentIdS = new MTextField('curricularComponentIdS', $this->getFormValue('curricularComponentIdS', $data->curricularComponentIdS), '', FIELD_ID_SIZE);
        $curricularComponentIdS->setReadOnly(true);
        
        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->getFormValue('curricularComponentVersionS', $data->curricularComponentVersionS), '', FIELD_ID_SIZE);
        $curricularComponentVersionS->setReadOnly(true);
        
        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->getFormValue('curricularComponentNameS', $data->curricularComponentNameS), '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameS->setReadOnly(true);

        $hctCurricularComponentS = new MHContainer('hctEvaluationS', array($curricularComponentLabelS, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
        $hctCurricularComponentS->setShowLabel(false);
        $fields[]  = $hctCurricularComponentS;
        unset($flds);
        
        $periodIdS = new MHiddenField('periodIdS');
        $fields[] = $periodIdS;

        $enrolLabelS = new MText('enrolLabelS', _M('Enroll', $module) . ':');
        $enrolLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $enrollIdS = new MLookupTextField('enrollIdS', $this->getFormValue('enrollIdS', $data->enrollIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, enrollCurriculumDescriptionS', $module, 'Enroll', null, null, true);
        $enrollIdS->setJsHint(_M('Enter the enroll code',$module));
        $validators[] = new MIntegerValidator('enrollIdS', _M('Enroll', $module), 'optional');

        $enrollCurriculumDescriptionS = new MTextField('enrollCurriculumDescriptionS', $this->enrollCurriculumDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $enrollCurriculumDescriptionS->setReadOnly(true);
        $enrollCurriculumDescriptionS->setJsHint(_M('Enroll curricular component description',$module));

        $hctEnrollS = new MHContainer('hctEnrollS', array($enrolLabelS, $enrollIdS, $enrollCurriculumDescriptionS));
        $hctEnrollS->setShowLabel(true);
        $fields[]  = $hctEnrollS;
        //unset($flds);

        $noteS = new MTextField('noteS', $this->getFormValue('noteS',$data->noteS), _M('Grade',$module), 18);
        $noteS->setJsHint(_M('Enter the grade',$module));
        $fields[] = $noteS;
        $validators[] = new MFloatValidator('noteS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        //$hctNoteS = new MHContainer('hctNoteS', $flds);
        //$fields[] = $hctNoteS;
        //unset($flds);
        
        $conceptS = new MTextField('conceptS', $this->getFormValue('conceptS',$data->conceptS), _M('Concept',$module), 18);
        $conceptS->setJsHint(_M('Enter the concept',$module));
        $fields[] = $conceptS;

        //$hctConpectS = new MHContainer('hctConpectS', $flds);
        //$fields[] = $hctConpectS;
        //unset($flds);
        
        $descritiveS = new MMultiLineField('descritiveS', $this->getFormValue('descritiveS', $data->descritiveS), _M('Descritive', $module), 100, 2, 50);
        $descritiveS->setJsHint(_M('Enter the descritive',$module));
        $fields[] = $descritiveS;

        //$hctDescritiveS = new MHContainer('hctDescritiveS', $flds);
        //$fields[] = $hctDescritiveS;
        //unset($flds);       
        
        $isNotAppearLabelS = new MText('isNotAppearLabelS', _M('Is it absent',$module) . '?');
        $isNotAppearLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isNotAppearLabelS;

        $isNotAppearOptionsS = array(
                                      array(_M('Yes', $module), 't'),
                                      array(_M('No', $module), 'f')
                                     );

        $isNotAppearS = new MRadioButtonGroup('isNotAppearS', null, SAGU::listTrueFalse(1), $data->isNotAppearS, null, 'horizontal');
        $isNotAppearS->setShowLabel(false);
        $flds[] = $isNotAppearS;

        $hctIsNotAppearS = new MHContainer('hctIsNotAppearS', $flds);
        $fields[] = $hctIsNotAppearS;
        unset($flds);
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->evaluationId  = $this->evaluationIdS->value;
        $filters->enrollId      = $this->enrollIdS->value;
        $filters->note          = $this->noteS->value;
        $filters->concept       = $this->concept->value;
        $filters->descritive    = $this->descritiveS->value;
        $filters->isNotAppear   = $this->isNotAppearS->value;
        $filters->professorId   = $this->professorIdS->value;
        $filters->professorName = $this->professorNameS->value;
        

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdEvaluationEnrollSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusEvaluationEnroll');
        $data = $business->searchEvaluationEnroll($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);  

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.evaluationIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
