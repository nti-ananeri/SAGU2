<?php


/**
 *
 * This file handles the connection and actions for acdLearningPeriod table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the scdLearningPeriod table
 */
class FrmLearningPeriodSearch extends MForm
{
    private $home;
    private $module;
    private $grdResults;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Learning period', $this->home, 'learningPeriod-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $learningPeriodIdS));

        if ( ! $this->getFormValue('learningPeriodIdS', $this->learningPeriodIdS->value) )
        {
            $this->page->isPostBack() ? $dataPeriodId = $this->getFormValue('periodIdS', $data->periodIdS) : $dataPeriodId = CURRENT_PERIOD_ID;
        }

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodIdS = new MComboBox('periodIdS', $dataPeriodId, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodIdS;

        unset($flds);

        $formationLevelLabelS = new MText('formationLevelLabelS', _M('Formation level', $module) . ':');
        $formationLevelLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $formationLevelLabelS;

        $formationLevelIdS = new MLookupTextField('formationLevelIdS', $this->getFormValue('formationLevelIdS', $data->formationLevelIdS), _M('Formation level id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,
            'formationLevelDescriptionS',
            $module, 'FormationLevel', null, null, true);
        $flds[] = $formationLevelIdS;

        $formationLevelDescriptionS = new MTextField('formationLevelDescriptionS', $this->getFormValue('formationLevelDescriptionS', $data->formationLevelDescriptionS), _M('Formation level description',$module), FIELD_DESCRIPTION_SIZE);
        $formationLevelDescriptionS->setReadOnly(true);
        $flds[] = $formationLevelDescriptionS;
        
        $hctFormationLevelS = new MHContainer('hctFormationLevelS', $flds);
        $hctFormationLevelS->setShowLabel(false);
        $fields[] = $hctFormationLevelS;
        unset($flds);

        $courseLabelS = new MText('courseLabelS', _M('Course', $module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $courseLabelS;
        
        $courseIdS = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), _M('Course id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,
            'courseVersionS,courseNameS,turnIdS,turnDescriptionS,unitIdS',             $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $flds[] = $courseIdS;
        
        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), _M('Version', $module), FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));         
        $flds[] = $courseVersionS;
        
        $courseNameS = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $flds[] = $courseNameS;
        
        $hctCourseS = new MHContainer('hctCourseS', $flds);
        $hctCourseS->setShowLabel(false);
        $fields[] = $hctCourseS;
        unset($flds);
        
        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitIdS       = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $this->unitIdS->value), _M('Unit id',$module), $business->listUnit());
        $unitIdS->setJsHint(_M('Enter the unit code',$module));
//        $validators[] = new MRequiredValidator('unitIdS');
        $fields[]     = $unitIdS;
        
        //LearningPeriod
               
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period', $module) .':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);

        $learningPeriodId = new MLookupTextField('learningPeriodIdCod', $this->getFormValue('learningPeriodIdCod', $data->learningPeriodIdCod), _M('Learning period',$module), FIELD_LOOKUPFIELD_SIZE, null, null,'limbo, courseId, courseVersion, turnIdCourse, unitId, learningPeriodDescription, limbo, beginDate, endDate, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescriptionCourse, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, ($function == 'update') ? false : true);
        
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('learningPeriodDescription', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;
        
        //End LearningPeriod

        $fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        // get filters values
        $filters->learningPeriodId = $this->learningPeriodIdS->value;
        $filters->periodId         = $this->periodIdS->value;
        $filters->formationLevelId = $this->formationLevelIdS->value;
        $filters->courseId         = $this->courseIdS->value;
        $filters->unitId           = $this->unitIdS->value;
        $filters->learningPeriodIdCod = $this->learningPeriodIdCod->value;
        
        unset($this->learningPeriodIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdLearningPeriodSearch', $filters);
        $business   = $this->manager->getBusiness($this->module,'BusLearningPeriod');
        $data       = $business->searchLearningPeriod($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.periodIdS.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }
}

?>
