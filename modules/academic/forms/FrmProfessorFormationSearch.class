<?php

/**
 *
 * This file handles the connection and actions for acdProfessorFormation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdProfessorFormation table
 */
class FrmProfessorFormationSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', $this->module), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Professor formation', $this->home, 'professorFormation-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $professorLabel = new MText('professorLabel', _M('Professor id',$module).':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);

        $professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value,'', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        //$fields[] = $professorIdS;
        $validators[] = new MIntegerValidator('professorIdS', '', 'optional');

        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $professorNameS->setJsHint(_M('Enter the professor name',$module));
        //$fields[] = $professorNameS;

        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorIdS, $professorNameS));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;


        $formationLevelLabel = new MText('formationLevelLabel', _M('Formation level id',$module).':');
        $formationLevelLabel->setWidth(FIELD_CONTAINER_SIZE);

        $formationLevelIdS = new MLookupTextField('formationLevelIdS', $this->formationLevelIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'formationLevelDescriptionS', 'academic', 'FormationLevel', null, null, true);
        //$fields[] = $formationLevelIdS;
        $validators[] = new MIntegerValidator('formationLevelIdS', '', 'optional');

        $formationLevelDescriptionS = new MTextField('formationLevelDescriptionS', $this->formationLevelDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $formationLevelDescriptionS->setJsHint(_M('Enter the formation level description',$module));
        //$fields[] = $formationLevelDescriptionS;

        $hctFormationLevel = new MHContainer('$hctFormationLevel', array($formationLevelLabel, $formationLevelIdS, $formationLevelDescriptionS));
        $hctFormationLevel->setShowLabel(true);
        $fields[]  = $hctFormationLevel;

//ver daqui em diante

        $formationLevelLabel = new MText('formationLevelLabel', _M('Formation level id',$module).':');
        $formationLevelLabel->setWidth(FIELD_CONTAINER_SIZE);

        $externalCourseLabel = new MText('formationLevelLabel', _M('External course id',$module).':');
        $externalCourseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $externalCourseIdS = new MLookupTextField('externalCourseIdS', $this->externalCourseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'externalCourseNameS', 'academic', 'ExternalCourse', null, null, true);
        //$fields[] = $externalCourseIdS;
        $validators[] = new MIntegerValidator('externalCourseIdS', '', 'optional');        

        $externalCourseNameS = new MTextField('externalCourseNameS', $this->externalCourseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $externalCourseNameS->setJsHint(_M('Enter the external course name',$module));
        //$fields[] = $externalCourseNameS;

        $hctExternalCourse = new MHContainer('hctExternalCourse', array($externalCourseLabel, $externalCourseIdS, $externalCourseNameS));
        $hctExternalCourse->setShowLabel(true);
        $fields[]  = $hctExternalCourse;

        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDateS->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        $dateConclusionS = new MCalendarField('dateConclusionS', $this->dateConclusionS->value, _M('Conclusion date',$module), FIELD_DATE_SIZE);
        $dateConclusionS->setJsHint(_M('Enter the date conclusion',$module));
        $validators[] = new MDATEDMYValidator('dateConclusionS', '', 'optional');
        $fields[] = $dateConclusionS;

        $institutionLabel = new MText('institutionLabel', _M('Institution id',$module).':');
        $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $institutionIdS = new MLookupTextField('institutionIdS', $this->institutionIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionNameS', 'basic', 'LegalPersonInstitution', null, null, true);
        //$fields[] = $institutionIdS;
        $validators[] = new MIntegerValidator('institutionIdS', '', 'optional');        

        $institutionNameS = new MTextField('institutionNameS', $this->institutionNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $institutionNameS->setJsHint(_M('Enter the institution name',$module));
        //$fields[] = $institutionNameS;

        $hctInstitutuion = new MHContainer('hctInstitutuion', array($institutionLabel, $institutionIdS, $institutionNameS));
        $hctInstitutuion->setShowLabel(true);
        $fields[]  = $hctInstitutuion;


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->professorId               = $this->professorIdS->value;
        $filters->professorName             = $this->professorNameS->value;
        $filters->formationLevelId          = $this->formationLevelIdS->value;
        $filters->formationLevelDescription = $this->formationLevelDescriptionS->value;
        $filters->externalCourseId          = $this->externalCourseIdS->value;
        $filters->externalCourseName        = $this->externalCourseNameS->value;
        $filters->beginDate                 = $this->beginDateS->value;
        $filters->dateConclusion            = $this->dateConclusionS->value;
        $filters->institutionId             = $this->institutionIdS->value;
        $filters->institutionName           = $this->institutionNameS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdProfessorFormationSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusProfessorFormation');
        $data = $business->searchProfessorFormation($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);
//         $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.professorIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
