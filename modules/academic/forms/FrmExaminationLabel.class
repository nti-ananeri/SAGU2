<?php

/**
 * Label for examination form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/06/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmExaminationLabel extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Label for examination', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Label for examination', $this->home, 'examinationLabel-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');
        $fields[] = new MHiddenField('formationLevelId', GRADUATION_FORMATION_LEVEL_ID);

        $fields[] = new MSeparator();

        $business = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', $data->periodId), _M('Period', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;
        $fields[] = new MSeparator();

        $printDate = new MCalendarField('printDate', $this->getFormValue('printDate', date(MASK_DATE_PHP)	), _M('Print date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('printDate', '', 'optional');
        $fields[] = $printDate;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

	}

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

		$periodId         = MIOLO::_request('periodId');
		$formationLevelId = MIOLO::_request('formationLevelId');
		$printDate        = MIOLO::_request('printDate');    

		$monthDay         = substr($printDate, 3, 2);
		$data->year       = substr($printDate, 6, 4);

		if ( $monthDay{0} == 0 )
		{
			$newMonthDay          = explode(0, $monthDay);
		    $transMonth[1]        = _M('january', $module); 
      		$transMonth[2]        = _M('february', $module);
        	$transMonth[3]        = _M('march', $module);
        	$transMonth[4]        = _M('april', $module);
        	$transMonth[5]        = _M('may', $module);
        	$transMonth[6]        = _M('june', $module);
        	$transMonth[7]        = _M('july', $module);
        	$transMonth[8]        = _M('august', $module);
        	$transMonth[9]        = _M('september', $module);
			$data->extensionMonth = $transMonth[$newMonthDay[1]];
		}
        elseif ( $monthDay{0} == 1 )
		{
			$newMonthDay = $monthDay;
        	$transMonth[10]       = _M('october', $module);
        	$transMonth[11]       = _M('november', $module);
        	$transMonth[12]       = _M('december', $module); 
			$data->extensionMonth = $transMonth[$newMonthDay];
		}

		//pega os dados da instituicao
        $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
        $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessFakeName = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $fakeName         = $businessFakeName->getLegalPerson($company->personId);
    	$data->fakeName   = $fakeName->fakeName;

		$businessFinalExamination = $MIOLO->getBusiness($module, 'BusGroup');
		$finalExamination         = $businessFinalExamination->getProfessorGroupSchedule($periodId, $formationLevelId);

		$data->finalExamination = $finalExamination;
		$data->periodId         = $periodId;

		$MIOLO->uses('classes/RptExaminationLabel.class', $module);
       
	    $report = new RptExaminationLabel($data);
        exit;
        
		$this->page->setAction($MIOLO->getActionURL($module, $action));
          
    }
}

?>
