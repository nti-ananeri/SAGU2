<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmMinimumCreditsUnblock extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        
        $fields[] = $toolBar;
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_request('curricularComponentUnblockId');

            $business = $MIOLO->getBusiness($module, 'BusMinimumCreditsUnblock');
            $data     = $business->getMinimumCreditsUnblock($curricularComponentUnblockId);

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Curricular component unblock id', $module));
        }

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractPersonLabelS;  
        
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;
        $validators[] = new MIntegerValidator('contractPersonId', '', 'required');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);       
        
        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractLabelS;
        
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId', '', 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);
        
        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId;        

        if ($function == 'insert')
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }
        else
        {
            $lookupFilters = array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodLabelS;
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period', $module), 'required');
        $flds[]           = $learningPeriodId;

        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriod->setReadOnly(true);
        $flds[]           = $learningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);    

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.CurricularComponentUnblockDescription.focus();');

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'curricularComponentUnblockId' => MIOLO::_request('curricularComponentUnblockId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusMinimumCreditsUnblock');
        $ok = $business->deleteMinimumCreditsUnblock(MIOLO::_request('curricularComponentUnblockId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data   = $this->getTypesData();

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $opts['function'] = $function;
        $opts['event']    = 'tbBtnSave_confirm';

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        unset($opts['event']);

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $msg = _M('Are you sure that want to insert minimum credits unblock to this pupils and to this learning period', $module) . '?' ;

        $msg .= '<br><br>' . $data->personName . ' - ' . $data->learningPeriodDescription . '<br><br>';


        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusMinimumCreditsUnblock');

        $filters1->learningPeriod = $data->learningPeriodId;
        $filters1->contractId     = $data->contractId;

        $searchMinimumCreditsUnblock = $business->searchMinimumCreditsUnblock($filters1);

        if ( is_array($searchMinimumCreditsUnblock) && (count($searchMinimumCreditsUnblock) > 0) )
        {
            //Ja existe um desbloqueio para esta disciplina, periodo letivo e contrato
            $msg  = _M('Already exist unblock to this contract and learning period', $module) . '.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        else
        {
            if ( $function == 'update' )
            {
                $ok  = $business->updateMinimumCreditsUnblock($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok  = $business->insertMinimumCreditsUnblock($data);
                $msg = MSG_RECORD_INSERTED;
            }
    
            if ( $ok )
            {
                $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                if ( $function == 'update' )
                {
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $goto);
                }
                else
                {
                    $opts    = array('event'=>'tbBtnNew_click',
                                    'function'=>'insert');
    
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }
    
    
    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->personName                = $this->contractPersonName->value;
        $data->learningPeriodDescription = $this->learningPeriod->value;

        return $data;
    }

}

?>
