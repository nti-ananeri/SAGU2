<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmInsuficientConditionCurricularComponentCancellation extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Run', $module));
        
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');        
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');        
        $toolBar->disableButton('tbBtnPrint');
        

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Insuficient condition curricular component cancellation', $this->home, 'insuficientConditionCurricularComponentCancellation-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId','', 'required');        
        $flds[]         = $periodId;

        $flds[] = new MButton('btnFilter', null . _M('Filter', $module));
        
        $fields[] = $flds;
        $fields[] = new Separator('<hr>');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(70);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.periodId.focus();');

    }
    

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnFilter_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusInsuficientConditionCurricularComponentCancellation');

        $btn2     = new MButton('btnInvertSelection', _M('Invert selection', $module), 'invertSelection()');
        //$btn2->addAttribute('onClick','invertSelection()');
        $this->addField($btn2);

        //$ok  = $business->runInsuficientConditionCurricularComponentCancellation($data->periodId);
        set_time_limit(0);
        $gridData = $business->selectEnrollsToBeCancelled($data->periodId);

        $grid     = $MIOLO->getUI()->getGrid($module,'GrdInsuficientConditionCurricularComponentCancellation', null);
        $grid->setData($gridData);

        //###GRID///is_array($gridData) ? $grid->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grid);

        $script .= "    function invertSelection()\n    {\n";
        $x = 0;

        if (count($gridData) > 0)
        {
            foreach ( $gridData as $row )
            {
                $script .= '        if ( document.' . $this->name . '[\'selectgridInsuficientConditionCurricularComponentCancellation[' . $x . ']\'].checked == true )' . "\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridInsuficientConditionCurricularComponentCancellation[' . $x . ']\'].checked = false;' . "\n";
                $script .= '        }' . "\n        else\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridInsuficientConditionCurricularComponentCancellation[' . $x . ']\'].checked = true;' . "\n";
                $script .= '        }' . "\n";
                $x++;
            }
        }
        
        $script .= "    }\n";
        $script .= "    invertSelection();";
        $this->page->addJsCode($script);

        $btn1[]     = new MButton('btnRun', _M('Run', $module));
        $div1       = new MDiv('div1', $btn1, null, 'center');

        $fields[] = $div1;
        $fields[] = new Separator('');
        $this->addField($fields);
    }
    
    public function btnRun_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $busEnroll         = $MIOLO->getBusiness($module, 'BusEnroll');
        $busGroup          = $MIOLO->getBusiness($module, 'BusGroup');
        $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $busContract       = $MIOLO->getBusiness($module, 'BusContract');

        $business = $MIOLO->getBusiness($module, 'BusInsuficientConditionCurricularComponentCancellation');
        $cnt      = 0;

        $enrolls = $this->getFormValue('selectgridInsuficientConditionCurricularComponentCancellation',$this->selectgridInsuficientConditionCurricularComponentCancellation);

        $transaction = $business->db->getTransaction();
        $transaction->_beginTransaction();

        if ( count($enrolls) > 0 )
        {
            //Percorrerá todoas as matrículas
            foreach ( $enrolls as $id => $value )
            {
                $enrollData         = $busEnroll->getEnroll($value);
                $groupData          = $busGroup->getGroup($enrollData->groupId);

                $learningPeriodData = $busLearningPeriod->getLearningPeriod($groupData->learningPeriodId);
                $contractData       = $busContract->getContract($enrollData->contractId);

                //Parcelas que restam para os alunos
                $restantParcels = $busEnroll->getPeriodRestantParcels($enrollData->contractId, $groupData->learningPeriodId);

                if ( $business->curricularComponentCancellation($value) )
                {
                    $cnt++;
                }

                if ( $restantParcels == 0 )
                {
                    //Não restam parcelas para serem pagas pelo aluno
                    $stringFinance .= '<br>' . $contractData->personName  . ' - '  . $groupData->curriculumCurricularComponentName . '.' . '<br>';
                }
                else
                {
                    //Restam parcelas para serem pagas pelo aluno

                    $busEnrollSummaryGen = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
                    $busEnrollSummaryGen->db = $business->db;

                    if ( (MODULE_FINANCE_INSTALLED == 'YES') && (strtoupper($learningPeriodData->isFinanceGenerate) == strtoupper(DB_TRUE)) )
                    {
                        $data->contractId       = $enrollData->contractId;
                        $data->parcelsNumber    = $restantParcels;
                        $data->learningPeriodId = $groupData->learningPeriodId;
                        $data->groupId          = $enrollData->groupId;

                        //Gera os dados para acdEnrollSummary
                        $busEnrollSummaryGen->generateEnrollSummaryToEnrollCancellationProcess($data);
                    }

                    if ( (count($business->getErrors()) > 0) || (count($busEnrollSummaryGen->getErrors())  > 0) || (count($busLearningPeriod->getErrors()) > 0) || (count($busEnroll->getErrors()) > 0) )
                    {
                        $transaction->_rollback();

                        $msg  = _M('Error cancelling the enroll', $module);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null,  $opts);
                        $caption = _M('Error',$module);
                        $MIOLO->error( $msg, $goto, $caption );
                    }
                }
            }
        }

        if ( $cnt > 0 )
        {
            $transaction->_commit();

            $msg  = _M('@1 enrolls cancelled', $module,$cnt);

            if ( strlen((string)$stringFinance) > 0 )
            {
                $stringFinance1 .= '<br>' . _M('No finance was generated for the pupils below because there were no remaining parcels for this period', $module) . ':' . '<br>';

                $stringFinance1 = $stringFinance1 . $stringFinance;

                $msg .= '<br>' . $stringFinance1;
            }

            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('None curricular component cancelled. Try choose another period.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new acdPeriod();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }

}

?>
