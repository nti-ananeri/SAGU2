<?php

/**
 * Course enroll certified form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmAcademicRegisterLayer extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Academic register layer', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Academic register layer', $this->home, 'certified-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
//         $fields[] = new MHiddenField('limbo', '');

        $fields[] = new MSeparator();

        $business = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
		$fields[] = $periodId;
        $fields[] = new MSeparator();

	    //Course
        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName', 'limbo', 'limbo', 'turnId', 'turnDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), _M('Course version',$module), FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;
        $fields[] = new MSeparator();

        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), _M('Unit id',$module), $business->listUnit());
        $unitId->setJsHint(_M('Enter the unit code',$module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[]     = $unitId;
	$fields[] = new MSeparator();

        unset($flds);
	$personLabel  = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]       = $personLabel;

        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('personName'), 'basic', 'PhysicalPerson', null, array('personId' => 'personId'), true);
        $personId->setJsHint(_M('Enter the person code', $module));
        $flds[]       = $personId;

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

        $hctPerson    = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;
        unset($flds);
	$fields[] = new MSeparator();

        $opts[] = new MOption('optGraduation', 'G', _M('Graduation', $module), true);
        $opts[] = new MOption('optTechnician', 'T', _M('Technician', $module), false);

        $radOptionLabel = new MText('radOptionLabel', _M('Certified type', $module) . ':');
        $radOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radOptionLabel->setClass('m-caption m-caption-required');
        $flds[]         = $radOptionLabel;

        $radOption = new MRadioButtonGroup('radOption', '', $opts, $this->getFormValue('radOption', $this->radOption->value), '', 'horizontal');
        $radOption->setShowLabel(false);
        $flds[]    = $radOption;
        unset($opts);

        $hctOption = new MHContainer('hctOption', $flds);
        $hctOption->setShowLabel(false);
        unset($flds);
        $fields[] = $hctOption;

        $opts[] = new MOption('optEnrolled', 'enrolled', _M('Enrolled', $module), true);
        $opts[] = new MOption('optFreshmen', 'freshmen', _M('Freshmen', $module), false);
		$opts[] = new MOption('optLocked', 'locked', _M('Locked', $module), false);
		$opts[] = new MOption('optOther', 'other', _M('Other', $module), false);

        $radFileSituationLabel = new MText('radFileSituationLabel', _M('Pupil situation',$module) . ':');
        $radFileSituationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileSituationLabel->setClass('m-caption m-caption-required');

        $radFileSituation = new MRadioButtonGroup('radFileSituation', '', $opts, 2, '', 'horizontal', '');
        $radFileSituation->setShowLabel(false);

        $hctFileSituation = new MHContainer('hctFileSituation', array($radFileSituationLabel, $radFileSituation));
        $hctFileSituation->setShowLabel(false);
        unset($opts);
        $fields[]    = $hctFileSituation;

        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //pega dados da instituição
        $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
        $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $data->courseId         = $this->getFormValue('courseId', MIOLO::_request('courseId'));
        $data->courseVersion    = $this->getFormValue('courseVersion', MIOLO::_request('courseVersion'));	
        $data->unitId           = $this->getFormValue('unitId', MIOLO::_request('unitId'));	
        $data->periodId         = $this->getFormValue('periodId', MIOLO::_request('periodId')); 
        $data->personId         = $this->getFormValue('personId', MIOLO::_request('personId'));
        $data->radOption        = $this->getFormValue('radOption', MIOLO::_request('radOption'));
        $data->radFileSituation = $this->getFormValue('radFileSituation', MIOLO::_request('radFileSituation'));

        $data->fakeName         = $legalPerson->fakeName;

        $MIOLO->uses('classes/RptAcademicRegisterLayer.class', $module);

        $report = new RptAcademicRegisterLayer($data);
    }
}

?>
