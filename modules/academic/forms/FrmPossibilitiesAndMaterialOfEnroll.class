<?php

/**
 * Possibilities and material of enroll form
 *
 * @author Rafael Luís Spengler  [rafael@solis.coop.br]
 *         Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmPossibilitiesAndMaterialOfEnroll extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Pupil\'s enroll material', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $fields[] = $toolBar;

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId'), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'limbo', 'unitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[] = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[] = $contractPersonName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]        = $contractLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'limbo', 'unitId', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'isListener'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[] = $contractId;

        $isListener = new MHiddenField('isListener', $this->getFormValue('isListener'));
        $fields[]    = $isListener;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;
        unset($flds);

        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $courseLabel;

        $courseId    = new MLookupTextField('courseId', $this->getFormValue('courseId'), _M('Course code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, limbo, turnId', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), true);
        $flds[]      = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion'), _M('Course version',$module), FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Enter the course version',$module));
        $courseVersion->setReadOnly(true);
        $flds[]        = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName'), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Enter the course name',$module));
        $courseName->setReadOnly(true);
        $flds[]     = $courseName;

        $hctCourse = new MHContainer('hctCourse', $flds);
        $hctCourse->setShowLabel(false);
        $fields[]   = $hctCourse;
        unset($flds);

        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId  = new MComboBox('turnId',
                                  $this->GetFormValue('turnId'),
                                  _M('Turn',$module),
                                  $business->listTurn());
        $fields[] = $turnId;

        $business = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId  = new MComboBox('unitId',
                                  $this->GetFormValue('unitId'),
                                  _M('Unit',$module),
                                  $business->listUnit());
        $fields[] = $unitId;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;
        unset($flds);

        $learningPeriodIdLabel = new MText('learningPeriodIdLabel', _M('Learning period',$module) . ':');
        $learningPeriodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodIdLabel->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodIdLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId'), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodName', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period', $module), 'required');

        $flds[]           = $learningPeriodId;

        $learningPeriodName = new MTextField('learningPeriodName', $this->getFormValue('learningPeriodName'), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodName->setReadOnly(true);
        $flds[]             = $learningPeriodName;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(false);
        $fields[]           = $hctLearningPeriod;
        unset($flds);

        $fields[] = new Separator ('');

        $emissionLabel = new MText('emissionLabel', _M('Emission',$module) . ':');
        $emissionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]        = $emissionLabel;

        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(MASK_DATE_PHP), _M('Date', $module), FIELD_DATE_SIZE);
        $flds[]       = $emissionDate;

        $emissionTime = new MTextField('emissionTime', strlen((string)$this->getFormValue('emissionTime'))>0 ? $this->getFormValue('emissionTime') : date(MASK_TIME_PHP), _M('Hour', $module), FIELD_ID_SIZE);
        $flds[]       = $emissionTime;

        $hctDateTime = new MHContainer('hctDateTime', $flds);
        $hctDateTime->setShowLabel(true);
        $fields[]     = $hctDateTime;
        unset($flds);

        $fields[] = new Separator ('');

        $options = array( 
                          array(_M('Enrolled', $module),    'E'),
                          array(_M('Other', $module),       'O'),
                          array(_M('Freshmen', $module),    'F'),
                          array(_M('Indifferent', $module), 'I')
                        );

        $pupilSituationLabel = new MText('pupilSituationLabel', _M('Situation of pupil', $module) . ':');
        $pupilSituationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $pupilSituationLabel;

        $pupilSituation = new MRadioButtonGroup('pupilSituation', '', $options, $this->getFormValue('pupilSituation', 'I'), '', 'vertical');
        $pupilSituation->setShowLabel(false);
        $flds[] = $pupilSituation;

        $hctOptions = new MHContainer('hctOptions', $flds);
        $hctOptions->setShowLabel(false);
        $fields[] = $hctOptions;
        unset($flds);

        $fields[] = new Separator('');

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus()');
    }

    /**
     * Event triggered when user click in the button 'print'
     **/
    public function tbBtnPrint_click ($sender=NULL)
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();

        $data = $this->getTypesData();
        $rptData = array (
                           $data->contractId,
                           $data->courseId,
                           $data->courseVersion,
                           $data->turnId,
                           $data->unitId,
                           $data->contractPersonId,
                           $data->learningPeriodId,
                           $data->pupilSituation,
                           $data->isListener,
                           $data->emissionDate,
                           $data->emissionTime,
                           $data->periodId
                         );

        if ( strlen((string)$data->contractId) == 0 &&
             (strlen((string)$data->courseId) == 0 || strlen((string)$data->courseVersion) == 0) )
        {
            $this->addError(_M('You must inform either a course or a contract to generate for a pupil only or for the entire course, respectively.', $module));
        }
        elseif ( strlen((string)$data->contractId) > 0 )
        {
            $MIOLO->getClass($module, 'RptEnrollMaterial');
            $report = new RptEnrollMaterial($rptData);
        }
        else
        {
            $MIOLO->getClass($module, 'RptAllEnrollMaterial');
            $report = new RptAllEnrollMaterial($rptData);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->contractId       = $this->getFormValue('contractId', $this->contractId->value);
        $data->courseId         = $this->getFormValue('courseId', $this->courseId->value);
        $data->courseVersion    = $this->getFormValue('courseVersion', $this->courseVersion->value);
        $data->turnId           = $this->getFormValue('turnId', $this->turnId->value);
        $data->unitId           = $this->getFormValue('unitId', $this->unitId->value);
        $data->contractPersonId = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $data->learningPeriodId = $this->getFormValue('learningPeriodId', $this->learningPeriodId->value);
        $data->pupilSituation   = $this->getFormValue('pupilSituation', $this->pupilSituation->value);
        if ( $data->pupilSituation == 'I' )
        {
            $data->pupilSituaion = null;
        }
        $data->isListener       = $this->getFormValue('isListener', $this->isListener->value);
        $data->emissionDate     = $this->getFormValue('emissionDate', $this->emissionDate->value);
        $data->emissionTime     = $this->getFormValue('emissionTime', $this->emissionTime->value);
        $data->periodId         = $this->getFormValue('periodId', $this->periodId->value);

        return $data;
    }


}

?>
