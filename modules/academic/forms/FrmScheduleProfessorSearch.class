<?php

/**
 *
 * This file handles the connection and actions for acdScheduleProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdScheduleProfessor table
 */
class FrmScheduleProfessorSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Schedule professor', $this->home, 'scheduleProfessor-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[]  = new MHiddenField('scheduleIdS', $this->getFormValue('scheduleIdS', $scheduleIdS));
        
        $professorLabelS = new MText('professorLabelS', _M('Professor', $module) . ':');
        $professorLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $professorLabelS;

        $professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value, _M('Professor id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'physicalPersonProfessor', null, null, true);
        $flds[] = $professorIdS;
        $validators[] = new MIntegerValidator('professorIdS', '', 'optional');

        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, _M('Professor name', $module), FIELD_DESCRIPTION_SIZE);
        $professorNameS->setJsHint(_M('Enter the professor name',$module));
        $flds[] = $professorNameS;
        
        $hctProfessorS = new MHContainer('hctProfessorS', $flds);
        $hctProfessorS->setShowLabel(false);
        $fields[] = $hctProfessorS;

        $isInstitutionalEvaluationLabelS = new MText('isInstitutionalEvaluationLabelS', _M('Is it institutional evaluation',$module) . '?');
        $isInstitutionalEvaluationLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $isInstitutionalEvaluationOptionsS = array( 
                                                    array(_M('Yes', $module), 't'),
                                                    array(_M('No', $module), 'f')
                                                  );

        $isInstitutionalEvaluationS = new MRadioButtonGroup('isInstitutionalEvaluationS', null, SAGU::listTrueFalse(1), $this->isInstitutionalEvaluationS, null, 'horizontal');
        $isInstitutionalEvaluationS->setShowLabel(false);

        $hctIsInstitutionalEvaluationS = new MHContainer('hctIsInstitutionalEvaluationS', array($isInstitutionalEvaluationLabelS, $isInstitutionalEvaluationS));
        $fields[] = $hctIsInstitutionalEvaluationS;

        $weightS = new MTextField('weightS', $this->weightS->value, _M('Weight', $module), 15);
        $weightS->setJsHint(_M('Enter the weight',$module));
        $fields[] = $weightS;
        $validators[] = new MFloatValidator('weightS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->scheduleId                = $this->scheduleIdS->value;
        $filters->professorId               = $this->professorIdS->value;
        $filters->professorName             = $this->professorNameS->value;
        $filters->isInstitutionalEvaluation = $this->isInstitutionalEvaluationS->value;
        $filters->weight                    = $this->weightS->value;

        unset($this->scheduleIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleProfessorSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusScheduleProfessor');
        $data = $business->searchScheduleProfessor($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.scheduleIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
