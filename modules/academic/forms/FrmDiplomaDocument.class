<?php

/**
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/10/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmDiplomaDocument extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Diploma', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Diploma', $this->home, 'diplomaDocument-16x16.png', true);
        }
        //fim favoritos

        $fields[]   = $toolBar;

        $fields[]   = new MSeparator();
        $fields[]   = new MHiddenField('limbo', '');


        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);


        $contractCourseLabel = new MText('contractCourseLabel', _M('Contract',$module) . ':');
        $contractCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractCourseLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->enrollData->contractCourseId), '', FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);


        $businessDiploma = $MIOLO->getBusiness('academic', 'BusDiploma');
        $registerNumber   = $businessDiploma->getNextRegisterNumber();
        $sheet            = $businessDiploma->getNextPageNumber();


        $registerNumberLabel = new MText('$registerNumberLabel', _M('Regiter id',$module) . ':');
        $registerNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $registerNumberLabel->setClass('m-caption m-caption-required');
        $flds[]           = $registerNumberLabel;

        $registerNumber = new MTextField('registerNumber', $this->getFormValue('registerNumber', $registerNumber), '', 10);
        $registerNumber->setJsHint(_M('Enter the regiter id',$module));
        $flds[]             = $registerNumber;

        $hctRegisterId = new MHContainer('hctRegisterId', $flds);
        $hctRegisterId->setShowLabel(true);
        $fields[]    = $hctRegisterId;
        unset($flds);


        $sheetLabel = new MText('sheetLabel', _M('Sheet',$module) . ':');
        $sheetLabel->setWidth(FIELD_CONTAINER_SIZE);
        $sheetLabel->setClass('m-caption m-caption-required');
        $flds[]           = $sheetLabel;

        $sheet = new MTextField('sheet', $this->getFormValue('sheet', $sheet), '', 10);
        $sheet->setJsHint(_M('Enter the sheet number',$module));
        $flds[]             = $sheet;

        $hctSheet = new MHContainer('hctSheet', $flds);
        $hctSheet->setShowLabel(true);
        $fields[]    = $hctSheet;
        unset($flds);

        $bookLabel = new MText('bookLabel', _M('Book',$module) . ':');
        $bookLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bookLabel->setClass('m-caption m-caption-required');
        $flds[]           = $bookLabel;

        $book = new MTextField('book', $this->getFormValue('book', $book), '', FIELD_ID_SIZE);
        $book->setJsHint(_M('Enter the sheet number',$module));
        $flds[]             = $book;

        $hctBook     = new MHContainer('hctBook', $flds);
        $hctBook->setShowLabel(true);
        $fields[]    = $hctBook;
        unset($flds);


        $protocolLabel = new MText('protocolLabel', _M('Protocol id',$module) . ':');
        $protocolLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$protocolLabel->setClass('m-caption m-caption-required');
        $flds[]           = $protocolLabel;

        $limbo = new MHiddenField('limbo', $limbo);

        $protocolId = new MLookupTextField('protocolId', $this->getFormValue('protocolId', $protocolId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('limbo', 'protocolIdT'), 'protocol', 'Protocol', null, array('personId' => 'contractPersonId'), true);
        $protocolId->setJsHint(_M('Enter the protocol code',$module));
        $flds[]           = $protocolId;

        $protocolIdT = new MTextField('protocolIdT', $this->getFormValue('protocolIdT',$protocolIdT), '', FIELD_ID_SIZE);
        $protocolIdT->setReadOnly(true);
        $protocolIdT->setJsHint(_M('Course version',$module));
        $flds[]                = $protocolIdT;


        $hctProtocol     = new MHContainer('hctProtocol', $flds);
        $hctProtocol->setShowLabel(true);
        $fields[]    = $hctProtocol;
        unset($flds);

        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', $data->emissionDate), _M('Emission date',$module), FIELD_DATE_SIZE);
//         $emissionDate->setJsHint(_M('Enter the emission date', $module));
        $emissionDate->setValidator( new MDATEDMYValidator('emissionDate', '', 'required'));
        //$validators[] = new MDATEDMYValidator('occurrenceDate', '', 'required');
        $fields[] = $emissionDate;

        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->personId       = MIOLO::_request('contractPersonId');
        $data->personName     = MIOLO::_request('contractPersonName');
        $data->contractId     = MIOLO::_request('contractId');
        $data->emissionDate   = MIOLO::_request('emissionDate');
        $data->registerNumber = MIOLO::_request('registerNumber');
        $data->book           = MIOLO::_request('book');
        $data->sheet          = MIOLO::_request('sheet');
        $data->protocolId     = MIOLO::_request('protocolId');
        $data->courseVersion  = MIOLO::_request('contractCourseVersion');
        $data->fileType       = MIOLO::_request('radFileType');

        $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPersonStudent');
        $physicalPerson         = $businessPhysicalPerson->getPhysicalPersonStudent($data->personId);

        $fatherPerson    =  $businessPhysicalPerson->getPhysicalPerson($physicalPerson->fatherId);

        $motherPerson    =  $businessPhysicalPerson->getPhysicalPerson($physicalPerson->motherId);

        $businessCity    = $MIOLO->getBusiness('basic', 'BusCity');
        $cityBirth       = $businessCity->getCity($physicalPerson->cityIdBirth);

        $businessCountry = $MIOLO->getBusiness('basic', 'BusCountry');
        $countryNationality = $businessCountry->getCountry($cityBirth->countryId);

        $businessDocument = $MIOLO->getBusiness('basic', 'BusDocument');

        $document         = $businessDocument->getDocument($data->personId, RG_CODE);

        if ( strlen((string)$document->cityId) > 0 )
        {
            $cityDocument     = $businessCity->getCity($document->cityId);
        }

        $businessContract = $MIOLO->getBusiness('academic', 'BusContract');
        $contract         = $businessContract->getContract($data->contractId);

        $businessCourse   = $MIOLO->getBusiness('academic', 'BusCourse');

        $course           = $businessCourse->getCourse($contract->courseId);

        $businessEducationArea = $MIOLO->getBusiness('academic', 'BusEducationArea');
        if ( strlen((string)$course->educationAreaId) > 0 )
        {
            $educationArea         = $businessEducationArea->getEducationArea($course->educationAreaId);
        }

        $businessCourseAbility  = $MIOLO->getBusiness('academic', 'BusCourseAbility');

        $filters1->courseId = $contract->courseId;

        $courseAbility = $businessCourseAbility->searchCourseAbility($filters1);

        $businessDiplomaDocument = $MIOLO->getBusiness('academic', 'BusDiplomaDocument');
        $filters2->courseId      = $contract->courseId;
        $filters2->courseVersion = $contract->courseVersion;
        $filters2->unitId        = $contract->unitId;
        $filters2->turnId        = $contract->turnId;
        $curricularComponentLessonsHours = $businessDiplomaDocument->getCurricularComponentLessonsHours($filters2);

        $MIOLO->uses('/core/AgataAPI.class');
        $MIOLO->uses('classes/sagu.class', 'basic');

        $api = new AgataAPI;

        if ( strlen((string)$contract->diplomaDate) > 0 )
        {
            $businessDiploma = $MIOLO->getBusiness('academic', 'BusDiploma');

            $getDiploma      = $businessDiploma->getDiploma($data->registerNumber);

            if ( count($getDiploma->registerNumber) > 0 )
            {
                $ok2 = true;
            }
            else
            {
                $ok2 = $businessDiploma->insertDiploma($data);
            }

            if ( $ok2 )
            {
                if ( $course->formationLevelId == TECHNICAL_FORMATION_LEVEL_ID ) //Curso técnico
                {
                    $textAbility = '';

                    if ( is_array($courseAbility) )
                    {

                        $textAbility .= '\</text:span\>';
                        foreach ($courseAbility as $ability)
                        {
                            $textAbility .= $ability[4] . '\</text:p\>\<text:p text:style-name="Default"\>';
                        }
                        $textAbility .= '\<text:span\>';
                    }

                    $textCurricularData = '';

                    if ( is_array($curricularComponentLessonsHours) )
                    {
                        $textCurricularData .= '\</text:span\>';

                        foreach ( $curricularComponentLessonsHours as $curricularData )
                        {
                            $textCurricularData .= $curricularData[0] . '    ' . $curricularData[1] . '\</text:p\>\<text:p text:style-name="Default"\>';
                        }

                        $textCurricularData .= '\<text:span\>';
                    }

                    if ( count($data) > 0 )
                    {
                        $api->setParameter('$personName',           $data->personName);
                        $api->setParameter('$fatherName',           $fatherPerson->name);
                        $api->setParameter('$motherName',           $motherPerson->name);
                        $api->setParameter('$stateBirth',           $cityBirth->stateId);
                        $api->setParameter('$nationality',          $countryNationality->nationality);
                        $api->setParameter('$birthDate',            SAGU::getDateByExtense($physicalPerson->dateBirth));
                        $api->setParameter('$dateDiploma',        SAGU::getDateByExtense($contract->diplomaDate));

                        $api->setParameter('$conclusionDate',        SAGU::getDateByExtense($contract->conclusionDate));

                        $yearConclusion = substr($contract->diplomaDate, 5, 4);

                        $api->setParameter('$yearConclusion',        $yearConclusion);
                        $api->setParameter('$documentId',            $document->content);
                        $api->setParameter('$organ',                 $document->organ);
                        $api->setParameter('$courseName',            $course->name);
                        $api->setParameter('$courseArea',            $educationArea->description);
                        $api->setParameter('$emissionDate',          SAGU::getDateByExtense($data->emissionDate));

                        $api->setParameter('$bookNumber',            $data->book);

                        $api->setParameter('$textAbility',           $textAbility);
                        $api->setParameter('$curricularData',        $textCurricularData);
                        $api->setParameter('$externalCourse',        $physicalPerson->externalCourseHsName);
                        $api->setParameter('$conclusionYear',        $physicalPerson->yearHs);
                        $api->setParameter('$conclusionSchool',      $physicalPerson->institutionHsName);
                        $api->setParameter('$citySchool',            $physicalPerson->cityHsName);
                        $api->setParameter('$stateIdHs',             $physicalPerson->stateIdHs);

                        $api->setLanguage($MIOLO->getConf('i18n.language'));
                        $api->setOutputPath(TEMP_DIR . '/contract.sxw');

                        $dataAgata[0][0] = 'A';

                        $api->setDataArray($dataAgata);

                        $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/diplomaTechnican.sxw'));


                        if ( $ok && $data->fileType == 'pdf' )
                        {
                            $api->setOutputPath(TEMP_DIR . '/contract.pdf');
                            $ok = $api->openOffice2pdf(TEMP_DIR . '/contract.sxw');
                        }

                        if ( !$ok )
                        {
                            $this->addError(_M('AGATA returned this error: @1.', $module, $api->getError()));
                        }
                        else
                        {
                            $api->fileDialog();
                        }
                    }
                }
                elseif ( $course->formationLevelId == GRADUATION_FORMATION_LEVEL_ID ) //Curso de graduação
                {
                    if ( count($data) > 0 )
                    {
                        $api->setParameter('$courseName',         $course->name);
                        $api->setParameter('$dateDiploma',        SAGU::getDateByExtense($contract->diplomaDate));
                        $api->setParameter('$personName',         $data->personName);

                        if ( strlen((string)$contract->conclusionDate) > 0 )
                        {
                            $api->setParameter('$conclusionDate',        SAGU::getDateByExtense($contract->conclusionDate));
                        }
                        else
                        {
                            $api->setParameter('$conclusionDate', _M('Undefined', $module));
                        }

                        $api->setParameter('$nationality',        $countryNationality->nationality);
                        $api->setParameter('$documentId',         $document->content);
                        $api->setParameter('$organ',              $document->organ);
                        $api->setParameter('$stateOrgan',         $cityDocument->stateId);
                        $api->setParameter('$dateBirth',            SAGU::getDateByExtense($physicalPerson->dateBirth));
                        $api->setParameter('$cityBirth',          $cityBirth->name);
                        $api->setParameter('$stateName',          $cityBirth->stateName);
                        $api->setParameter('$recognitionDocumentNumber',     $course->recognitionDocumentNumber);
                        $api->setParameter('$recognitionDocumentNumber',     $course->recognitionDocumentNumber);

                        $api->setParameter('$registerNumber',        $data->book);
                        $api->setParameter('$bookNumber',            $data->book);
                        $api->setParameter('$sheet',                 $data->sheet);
                        $api->setParameter('$processNumber',         $data->protocolId);

                        $api->setParameter('$courseGrau',            $course->degree);


                        $api->setLanguage($MIOLO->getConf('i18n.language'));
                        $api->setOutputPath(TEMP_DIR . '/contract.sxw');

                        $dataAgata[0][0] = 'A';

                        $api->setDataArray($dataAgata);

                        $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/diplomaGraduation.sxw'));

                        if ( $ok && $data->fileType == 'pdf' )
                        {
                            $api->setOutputPath(TEMP_DIR . '/contract.pdf');
                            $ok = $api->openOffice2pdf(TEMP_DIR . '/contract.sxw');
                        }

                        if ( !$ok )
                        {
                            $this->addError(_M('AGATA returned this error: @1.', $module, $api->getError()));
                        }
                        else
                        {
                            $api->fileDialog();
                       }
                    }
                }
            }
            else
            {
                //Problemas ao inserir diploma
                $this->addError(_M('Error inserting diploma data.', $module));
            }
        }
        else
        {
            //Data de diploma nula.
            $this->addError(_M('This pupil haven\'t diploma date', $module));
        }
    }
}

?>
