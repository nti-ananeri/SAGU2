<?php

/**
 *
 * This file handles the connection and actions for acdTestEndCourseContract table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdTestEndCourseContract table
 */
class FrmTestEndCourseContractSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course end test students evaluation', $this->home, 'testEndCourseContract-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $testEndCourseTypeLabel = new MText('testEndCourseTypeLabel', _M('Course end test type',$module).':');
        $testEndCourseTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $testEndCourseTypeLabel;

        $testEndCourseTypeIdS = new MLookupTextField('testEndCourseTypeIdS', $this->getFormValue('testEndCourseTypeIdS', $data->testEndCourseTypeIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'testEndCourseTypeDescriptionS', $module, 'TestEndCourseType', null, null, true);
        $testEndCourseTypeIdS->setJsHint(_M('Enter the course end test type code',$module));
        $flds[] = $testEndCourseTypeIdS;
        $validators[] = new MIntegerValidator('testEndCourseTypeIdS', '', 'optional');

        $testEndCourseTypeDescriptionS = new MTextField('testEndCourseTypeDescriptionS', $this->testEndCourseTypeDescriptionS->value,'', FIELD_DESCRIPTION_SIZE);
        $testEndCourseTypeDescriptionS->setReadOnly(true);
        $testEndCourseTypeDescriptionS->setJsHint(_M('Description',$module));
        $flds[] = $testEndCourseTypeDescriptionS;

        $hctTestEndCourseTypeS = new MHContainer('hctTestEndCourseTypeS', $flds);
        $hctTestEndCourseTypeS->setShowLabel(true);
        $fields[]  = $hctTestEndCourseTypeS;
        unset($flds);
        
        $personLabel = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]   = $personLabel;

        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->scheduleShockUnblockSearch->contractPersonIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractPersonIdS->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonIdS;
        $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->scheduleShockUnblockSearch->contractPersonNameS), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonNameS->setReadOnly(true);
        $flds[]             = $contractPersonNameS;

        $hctPersonS = new MHContainer('hctContractS', $flds);
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module).':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $contractLabel;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS',$data->contractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'),
                $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', '', 'optional');
 
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$data->contractCourseIdS),'', FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $contractCourseIdS->setJsHint(_M('Course',$module));
        $flds[]           = $contractCourseIdS;

        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$data->contractCourseVersionS), '', 10);
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseVersionS->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersionS;

        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$data->contractCourseNameS), '', 56);
        $contractCourseNameS->setReadOnly(true);
        $contractCourseNameS->setJsHint(_M('Description',$module));
        $flds[]             = $contractCourseNameS;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId;        

        $testEndCourseDateS = new MCalendarField('testEndCourseDateS', $this->getFormValue('testEndCourseDateS',$data->testEndCourseDateS), _M('Course end test date',$module), FIELD_DATE_SIZE);
        $testEndCourseDateS->setJsHint(_M('Enter the course end test date',$module));
        $validators[] = new MDATEDMYValidator('testEndCourseDateS', '', 'optional');
        $fields[]    = $testEndCourseDateS;

        $excusedLabelS = new MText('excusedLabelS', _M('Is it excused',$module) . '?');
        $excusedLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $excusedLabelS;

        $excusedS = new MRadioButtonGroup('excusedS', null, SAGU::listYesNo(1), $data->excusedS, null, 'horizontal');
        $excusedS->setShowLabel(false);
        $flds[] = $excusedS;

        $hctExcusedS = new MHContainer('hctExcusedS', $flds);
        $fields[] = $hctExcusedS;
        unset($flds);
        
        $isPresentLabelS = new MText('isPresentLabelS', _M('Is it present',$module) . '?');
        $isPresentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isPresentLabelS;

        $isPresentS = new MRadioButtonGroup('isPresentS', null, SAGU::listYesNo(1), $data->isPresentS, null, 'horizontal');
        $isPresentS->setShowLabel(false);
        $flds[] = $isPresentS;

        $hctIsPresentS = new MHContainer('hctIsPresentS', $flds);
        $fields[] = $hctIsPresentS;
        unset($flds);
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));
        
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->testEndCourseTypeId  = $this->testEndCourseTypeIdS->value;
        $filters->contractId           = $this->contractIdS->value;
        $filters->personId             = $this->contractPersonIdS->value;
        $filters->testEndCourseDate    = $this->testEndCourseDateS->value;
        $filters->excused              = $this->excusedS->value;
        $filters->isPresent            = $this->isPresentS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdTestEndCourseContractSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusTestEndCourseContract');
        $data = $business->searchTestEndCourseContract($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults); 

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.testEndCourseTypeIdS.focus();');
        }
        

    }

}

?>
