<?php

/**
 * ScolarshipDescriptionInLot form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 21/03/2008
 *
 * \b Organization: \n
 * iSolution - Solucoes em TI \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2008 iSolution \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 **/
/**
 * Form to manipulate a scolarshipDescription
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->Uses('forms/FrmScolarshipDescription.class', 'academic');

class FrmScolarshipDescriptionInLot extends FrmScolarshipDescription
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Print scolarship description in lot', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessStamp = $MIOLO->getBusiness('basic', 'BusStamp');
        $stampData     = $businessStamp->listStamp();

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Scolarship description in lot', $this->home, 'scolarshipDescription-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;


        $classLabel   = new MText('classLabel', _M('Class',$module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $classLabel->setClass('m-caption m-caption-required');

        $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', $module, 'ClassCourse', null, array(), true);
        $classId->setJsHint(_M('Enter the class id',$module));
        $validators[] = new MRequiredValidator('classId', _M('Class','academic'), 'required');

        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Class name',$module));

        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;

        $this->setFields($fields);
        $this->addFields($this->defineFields());
        $this->setValidators($validators);
        $this->page->onLoad('document.' . $this->name . '.contractId.focus();');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);

    }
    
    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();
        if ($data->scolarshipType == 1)
        {
            $class = 'RptScolarshipDescriptionInLot';
            $MIOLO->getClass($module, $class);
            $report = new $class($data);
        }
    }
    
    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->courseId             = $this->contractCourseId->value;
        $data->courseVersion        = $this->contractCourseVersion->value;
        $data->courseName           = $this->contractCourseName->value;
        $data->classId              = $this->classId->value;
        $data->emissionDate         = $this->emissionDate->value;
        $data->unitId               = $this->unitId->value;
        $data->turnId               = $this->turnId->value; 
        $data->scolarshipType       = $this->scolarshipType->value;
        $data->monograph            = $this->monograph->value;
        $data->comments             = $this->comments->value;
        $data->notPrintDisapproved  = $this->getFormValue('notPrintDisapproved');//$this->notPrintDisapproved->value;
        $data->notPrintEnrolled     = $this->getFormValue('notPrintEnrolled'); //$this->notPrintEnrolled->value;
        $data->notPrintCoefficient  = $this->getFormValue('notPrintCoefficient'); //$this->notPrintEnrolled->value;
        $data->printNotCoursed      = $this->getFormValue('printNotCoursed'); //$this->printNotCoursed->value;
        $data->exploitationDetails  = $this->getFormValue('exploitationDetails'); //$this->exploitationDetails->value;
        $data->stamp1               = $this->getFormValue('stamp1');
        $data->stamp2               = $this->getFormValue('stamp2');
        $data->orderBy              = $this->orderBy->value;
        return $data;
  }
}

?>
