<?php

/**
 * GenerateMultipleComplementaryActivitiesPupils form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *         Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 18/09/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate multiple complementary activites
 **/
class FrmGenerateMultipleComplementaryActivitiesPupils extends MForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Generate multiple complementary activities', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Generate multiple complementary activities', $this->home, 'generateMultipleComplementaryActivities-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), _M('Course id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,
            'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription, limbo, limbo, limbo, limbo, limbo, formationLevelId, formationLevelDescription',
            $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        //$validators[]  = new MRequiredValidator('courseVersion');
        $courseVersion->setJsHint(_M('Course version',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;

        $separatorLabel = new MText('separatorLabel', '&nbsp');
        $separatorLabel->setWidth(17);

        //Turn
        $turnLabel = new MText('turnLabel', _M('Turn',$module));
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id',$module));
        //$validators[] = new MRequiredValidator('turnId');

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description',$module));

        $hctTurn  = new MHContainer('hctTurn', array($turnLabel, $turnId, $separatorLabel, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[] = $hctTurn;

        //Unit
        $unitLabel = new MText('unitLabel', _M('Unit',$module));
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id',$module));
        //$validators[] = new MRequiredValidator('unitId');

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description',$module));

        $hctUnit  = new MHContainer('hctUnit', array($unitLabel, $unitId, $separatorLabel, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[] = $hctUnit;

        $fields[] = new MSeparator('');

        $btn1   = new MButton('btnFilter', _M('Filter', $module));
        $fields[] = $btn1;

        $fields[] = new MSeparator('');

        $groupLabel = new MText('groupLabel', _M('Offered curricular component',$module) . ':');
        $groupLabel->setWidth(FIELD_CONTAINER_SIZE);
        $groupLabel->setClass('m-caption m-caption-required');


        $curriculumTypeId = new MHiddenField('curriculumTypeId', 1);
        $fields[] = $curriculumTypeId;

        $groupId = new MLookupTextField('groupId', $this->getFormValue('groupId', $data->groupId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'groupGroupName', $module, 'Group', null, array('curriculumTypeId' => 'curriculumTypeId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $validators[] = new MRequiredValidator('groupId', _M('Offered curricular component',$module));

        $groupGroupName = new MTextField('groupGroupName', strlen((string)$this->getFormValue('groupGroupName', $data->groupGroupName)) > 0 ? $this->getFormValue('groupGroupName', $data->groupGroupName) : $getGroup->groupGroupName , '', FIELD_DESCRIPTION_SIZE);
        $groupGroupName->setJsHint(_M('Offered curricular component name',$module));
        $groupGroupName->setReadOnly(true);

        $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupId, $groupGroupName));
        $hctGroup->setShowLabel(true);
        $fields[]  = $hctGroup;

        $fields[] = new MSeparator('<hr>');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->filters->courseId       = $this->courseId->value;
        $this->filters->courseVersion  = $this->courseVersion->value;
        $this->filters->turnId         = $this->turnId->value;
        $this->filters->unitId         = $this->unitId->value;
        $this->filters->groupGroupName = $this->groupGroupName->value;
        $this->filters->groupId        = $this->groupId->value;
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $business         = $MIOLO->getBusiness($module,'BusGenerateMultipleComplementaryActivities');
        $this->filters->status = "t";
        $pupils           = $business->getPupils($this->filters);

        $data1    = array();
        $flagCanLearningPeriodCourse = 0;

        $data2    = array();
        $flagDontCanLearningPeriodCourse = 0;

        $btnInvert = new MButton('btnInvertSelection', _M('Invert selection', $module), 'invertSelection()');
        $this->addField($btnInvert);

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdGenerateMultipleComplementaryActivitiesPupils', $pupils);
        $grdResults->setData($pupils);
        $grdResults->setTitle(_M('Pupils registered in course', $module) . ' ' . $this->filters->courseId);
        $grdResults->name = 'grd';

        is_array($pupils) ? $grdResults->setScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        $script .= "    function invertSelection()\n    {\n";
        $x = 0;

        foreach ( $pupils as $row )
        {
            $script .= '        if ( document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked == true )' . "\n        {\n";
            $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = false;' . "\n";
            $script .= '        }' . "\n        else\n        {\n";
            $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = true;' . "\n";
            $script .= '        }' . "\n";
            $x++;
        }
        $script .= "    }\n";
        $script .= "    invertSelection();";
        $this->page->addJsCode($script);

        $btn1[]     = new MButton('btnNext', _M('Next', $module) . ' >>');
        $div1       = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->addField($fields);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $pupils = $this->getFormValue('selectgrd',$this->selectgrd) ? $this->getFormValue('selectgrd',$this->selectgrd) : array() ;

        if ( count($pupils) > 0 )
        {
            foreach ( $pupils as $id => $value )
            {
                $pupilsVars[$id] = $value;
            }
        }

        $vars['pupils'] = urlencode(serialize($pupilsVars));

        $vars['courseId']       = $this->filters->courseId;
        $vars['courseVersion']  = $this->filters->courseVersion;
        $vars['unitId']         = $this->filters->unitId;
        $vars['turnId']         = $this->filters->turnId;
        $vars['groupId']        = $this->filters->groupId;
        $vars['groupGroupName'] = $this->filters->groupGroupName;

        $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleComplementaryActivities';
        $this->page->mGoto($MIOLO->getActionURL($module, $postAction, null, $vars));
    }
}

?>
