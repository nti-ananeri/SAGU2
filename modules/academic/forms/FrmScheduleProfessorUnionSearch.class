<?php

/**
 * Form to manipulate acdScheduleProfessor table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmScheduleProfessorUnionSearch extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Search schedule professor union', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();

    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        //$toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        //$toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnBack');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        
        $fields[] = $toolBar;

        $physicalResourceLabelS = new MText('physicalResourceLabelS', _M('Physical resource id',$module) . ':');
        $physicalResourceLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $physicalResourceLabelS->setClass('m-caption m-caption-required');

        $physicalResourceId = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId', $data->physicalResourceId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', 'institutional', 'PhysicalResource', null, null, true);
        $physicalResourceId->setJsHint(_M('Physical resource code',$module));
        //$validators[] = new MIntegerValidator('physicalResourceId', _M('Physical resource id',$module), 'required');

        $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), '', 8);
        $physicalResourceVersion->setReadOnly(true);
        $physicalResourceVersion->setJsHint(_M('Physical resource version', $module));

        $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), '', FIELD_DESCRIPTION_SIZE);
        $physicalResourceDescription->setReadOnly(true);

        $hctPhysicalResource = new MHContainer('hctPhysicalResource', array($physicalResourceLabelS, $physicalResourceId, $physicalResourceVersion, $physicalResourceDescription));
        $fields[]   = $hctPhysicalResource;
        
        //Professor

        $professorLabel = new MText('professorlabel', _M('Professor',$module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
        $professorLabel->setClass('m-caption m-caption-required');

        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, $params, true);
        $professorId->setJsHint(_M('Professor id',$module));
        $validators[] = new MIntegerValidator('professorId', _M('Professor',$module), 'optional');

        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Professor name',$module));
        
        $hctProfessor = new MHContainer('hctProfessor', array( $professorLabel, $professorId, $professorName) );
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;
        
        //Curricular Component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion'), true);
        $flds[]                = $curricularComponentId;
        //$validators[]          = new MRequiredValidator('curricularComponentId', _M('Curricular component',$module));

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        //Period
        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        if ( is_null($this->getFormValue('periodId', $data->periodId)) ||
             strlen((string)$this->getFormValue('periodId', $data->periodId)) == 0 )
        {
            $periodIdValue = CURRENT_PERIOD_ID;
        }
        else
        {
            $periodIdValue = $this->getFormValue('periodId', $data->periodId);
        }
        $periodLabel = new MText('periodLabel', _M('Period', $module));
        $periodLabel->setWidth(FIELD_CONTAINER_SIZE);

        $periodId = new MComboBox('periodId', $periodIdValue, null, $businessPeriod->listPeriod(), true );
        $fields[] = new MHContainer('hctPeriod', array($periodLabel, $periodId));
        //$validators[] = new MRequiredValidator('periodId');

        //Turn
        $turnLabel = new MText('turnLabel', _M('Turn', $module));
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');
        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId = new MComboBox( 'turnId',
                                    $this->GetFormValue('turnId',$data->turnId),
                                    null,
                                    $business->listTurn());
        //$validators[] = new MRequiredValidator('turnId');
        $fields[] = new MHContainer('hctTurn', array($turnLabel, $turnId));


        $fields[]    = new MButton('tbBtnSearch',   _M('Search', $module));
        $fields[] = new Separator('');
        $this->setFields($fields);

        $filters->physicalResourceId = $this->physicalResourceId->value;
        $filters->physicalResourceVersion = $this->physicalResourceVersion->value;
        $filters->professorId = $this->professorId->value;
        $filters->curricularComponentId = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->periodId = $this->periodId->value;
        $filters->turnId = $this->turnId->value;
        $business = $MIOLO->getBusiness($module, 'BusScheduleProfessorUnion');
        $data = $business->searchScheduleProfessorUnion($filters);
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleProfessorUnionSearch',$filters);
        $grdResults->setData($data);
        $grdResults->setTitle(_M('Curricular components', $module));
        $this->addField($grdResults);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }
}

?>
