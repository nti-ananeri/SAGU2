<?php

/**
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdExamDate table
 */
class FrmExamDateSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Exam date', $this->home, 'examDate-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        $this->page->isPostBack() ? $dataPeriodId = $this->getFormValue('periodId', $data->periodId) : $dataPeriodId = CURRENT_PERIOD_ID;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', $dataPeriodId, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module));
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $learningPeriodLabelS;

        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,courseIdS,limbo,limbo,limbo,learningPeriodDescriptionS', $module, 'LearningPeriod', null, array('periodId' => 'periodId'), true);
        $flds[] = $learningPeriodIdS;

        $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->getFormValue('learningPeriodDescriptionS', $data->learningPeriodDescriptionS), _M('Learning period description',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescriptionS->setJsHint(_M('Enter the learning period description',$module));
        $flds[] = $learningPeriodDescriptionS;

        $hctLearningPeriodS = new MHContainer('hctLearningPeriodS', $flds);
        $hctLearningPeriodS->setShowLabel(false);
        $fields[] = $hctLearningPeriodS;

        $business   = $MIOLO->getBusiness('basic', 'BusWeekDay');
        $weekDayIdS = new MComboBox('weekDayIdS',
                                $this->getFormValue('weekDayIdS',$data->weekDayIdS),
                                _M('Week day',$module),
                                $business->listWeekDay());
        $fields[]   = $weekDayIdS;

        $examDateS = new MCalendarField('examDateS', $this->getFormValue('examDateS', $data->examDateS), _M('Exam date', $module), FIELD_DATE_SIZE);
        $fields[]  = $examDateS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->periodId                  = $this->periodId->value;
        $filters->courseId                  = $this->courseId->value;
        $filters->courseVersion             = $this->courseVersion->value;
        $filters->turnId                    = $this->turnId->value;
        $filters->unitId                    = $this->unitId->value;
        $filters->learningPeriodId          = $this->learningPeriodIdS->value;
        $filters->learningPeriodDescription = $this->learningPeriodDescriptionS->value;
        $filters->weekDayId                 = $this->weekDayIdS->value;
        $filters->examDate                  = $this->examDateS->value;

        $business  = $MIOLO->getBusiness($module,'BusExamDate');
        $examDates = $business->searchExamDateFormGrid($filters);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdExamDateSearch', $filters);
        $grdResults->setData($examDates);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.learningPeriodIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }
}

?>
