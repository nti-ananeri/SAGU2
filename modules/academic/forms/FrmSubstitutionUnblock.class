<?php
/**
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmSubstitutionUnblock extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_request('curricularComponentUnblockId');

            $business = $MIOLO->getBusiness($module, 'BusSubstitutionUnblock');
            $data     = $business->getSubstitutionUnblock($curricularComponentUnblockId);

            $busCurr  = $MIOLO->getBusiness($module, 'BusCurriculum');
            $currData = $busCurr->getCurriculum($data->curriculumId);

            $data->curricularComponentIdC = $currData->curricularComponentId;
            $data->curricularComponentVersionC = $currData->curricularComponentVersion;

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Curricular component unblock id', $module));
        }

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractPersonLabelS; 

        $contractId = $this->getFormValue('contractId',$data->contractId);

        //Este trecho de código é devido ao conjunto Person-Contract preencher o contractId como NULL se a pessoa tiver mais de um contrato
        if($contractId == NULL)
        {
            $arrayContract = array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId', 'limbo', 'formationLevelId');
        }
        else
        {
            $arrayContract = array('limbo', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId', 'limbo', 'formationLevelId');
        }

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, $arrayContract, $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('contractPersonId', _M('Person',$module), 'required');
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);       

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabelS->setClass('m-caption m-caption-required');
        $flds[] = $contractLabelS;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'formationLevelId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId; 

        $formationLevelId = new MHiddenField('formationLevelId', $formationLevelId);
        $fields[]         = $formationLevelId;

        if ($function == 'insert')
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }
        else
        {
            $lookupFilters = array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) . ':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $flds[] = $learningPeriodLabelS;       
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Learning period',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period',$module), 'required');
        $flds[]           = $learningPeriodId;

        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Learning period',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriod->setReadOnly(true);
        $flds[]           = $learningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);

        $curricularComponentLabelC = new MText('curricularComponentLabelC', _M('Curricular component',$module) . ':');
        $curricularComponentLabelC->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabelC->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabelC;

        $curricularComponentIdC = new MLookupTextField('curricularComponentIdC', $data->curricularComponentIdC, _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersionC,curricularComponentNameC', $module, 'CurriculumFaultToConclue', null, array('contractId' => 'contractId', 'curricularComponentId' => 'curricularComponentIdC'), true);
        $validators[]          = new MRequiredValidator('curricularComponentIdC', _M('Curricular component',$module), 'required');
        $flds[]                = $curricularComponentIdC;

        $curricularComponentVersionC = new MTextField('curricularComponentVersionC', $data->curricularComponentVersionC, _M('Version',$module), FIELD_ID_SIZE);
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersionC;
        $validators[]          = new MRequiredValidator('curricularComponentVersionC', _M('Curricular component version',$module), 'required');

        $curricularComponentNameC = new MTextField('curricularComponentNameC', $this->getFormValue('curricularComponentNameC', $data->curricularComponentNameC), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameC->setReadOnly(true);
        $flds[]                  = $curricularComponentNameC;

        $hctCurricularComponentC = new MHContainer('hctCurricularComponentC', $flds);
        $hctCurricularComponentC->setShowLabel(false);
        $fields[]  = $hctCurricularComponentC;
        unset($flds);
        
        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Substitute curricular component', $module) . ':');
        $curricularComponentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabelS->setClass('m-caption m-caption-required');
        $flds[] = $curricularComponentLabelS;
        
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId',$data->curricularComponentId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion , curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseIdJustOptionalCurricularComponent' => 'contractCourseId', 'curricularComponentId' => 'curricularComponentId', 'formationLevelId' => 'formationLevelId'), true);
        $curricularComponentId->setJsHint(_M('Enter the substitution curricular component code',$module));
        $flds[]           = $curricularComponentId;
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Substitute curricular component', $module));
        
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion),'', FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('curricularComponentVersion', _M('Substitute curricular component version', $module), 'required');                                        
        $flds[]           = $curricularComponentVersion;   
        
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]           = $curricularComponentName;
        
        $hctcurricularComponent = new MHContainer('hctcurricularComponent', $flds);
        $hctcurricularComponent->setShowLabel(true);
        $fields[]    = $hctcurricularComponent;
        unset($flds);        

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.CurricularComponentUnblockDescription.focus();');

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'curricularComponentUnblockId' => MIOLO::_request('curricularComponentUnblockId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusSubstitutionUnblock');
        $ok = $business->deleteSubstitutionUnblock(MIOLO::_request('curricularComponentUnblockId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data   = $this->getTypesData();

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $opts['function'] = $function;
        $opts['event']    = 'tbBtnSave_confirm';

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        unset($opts['event']);

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $msg = _M('Are you sure that want to insert substitution unblock to this pupils, this learning period and this curricular components', $module) . '?' ;

        $msg .= '<br><br>' . $data->personName . ' - ' . $data->learningPeriodDescription . '<br><br>' . _M('Curricular component', $module). ': ' . $data->curricularComponentOldName  . '<br><br>' . _M('Substitute curricular component' ,$module). ': ' . $data->curricularComponentNewName . '<br><br>';

        $busCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');

        $filters->courseId      = $this->getFormValue('contractCourseId', $this->contractCourseId->value);
        $filters->courseVersion = $this->getFormValue('contractCourseVersion', $this->contractCourseVersion->value);
        $filters->courseUnitId  = $this->getFormValue('contractUnitId', $this->contractUnitId->value);
        $filters->courseTurnId  = $this->getFormValue('contractTurnId', $this->contractTurnId->value);


        //Verifica se a disciplina substituta pertence ao mesmo grau de formação da disciplina a ser substituida
        //$filters1->courseId              = $filters->courseId;
        //$filters1->courseVersion         = $filters->courseVersion;
        //$filters1->courseUnitId          = $filters->courseUnitId;
        //$filters1->courseTurnId          = $filters->courseTurnId;
        $filters1->curricularComponentId = $data->curricularComponentId;
        $filters1->formationLevelId      = $data->formationLevelId;

        if ( !(count($busCurriculum->searchCurriculum($filters1)) > 0) )
        {
            unset($opts['event']);
            $msg  = _M('The substitute curricular component not is of same formation level that curricular component of pupil', $module);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $gotoNo, $caption );
        }
        else
        {
            //Verifica se a disciplina informada para ser substituída é do curriculo do aluno
            $filters->curricularComponentId = $data->curricularComponentIdC;

            if ( !(count($busCurriculum->searchCurriculum($filters)) > 0) )
            {
                unset($opts['event']);
                $msg .= '<font color=\'red\'>' . _M('The curricular component @1 isn\'t in the pupil curriculum.', $module, $data->curricularComponentOldName) . '</font><br>';
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $gotoNo, $caption );
            }
            else
            {
                //Verifica se a disciplina substituta é do currículo do aluno.
                $filters->curricularComponentId = $data->curricularComponentId;

                if ( count($busCurriculum->searchCurriculum($filters)) > 0 )
                {
                    //Verifica-se se as disciplinas são de tipo de currículo diferentes.

                    $filter2->courseId              = $filters->courseId;
                    $filter2->courseVersion         = $filters->courseVersion;
                    $filter2->courseUnitId          = $filters->courseUnitId;
                    $filter2->courseTurnId          = $filters->courseTurnId;
                    $filter2->curricularComponentId = $data->curricularComponentIdC;

                    $curricularComponentData = $busCurriculum->searchCurriculum($filter2);

                    $filter2->curricularComponentId = $data->curricularComponentId;

                    $curricularComponentSubstituteData = $busCurriculum->searchCurriculum($filter2);

                    if ( $curricularComponentSubstituteData[0][18] == $curricularComponentData[0][18] )
                    {
                        //Se são do mesmo tipo, não podem serem substituídas
                        unset($msg);
                        unset($opts['event']);
                        $msg .= _M('Not is possible substitue this curricular component, because both curricular component are from the same curriculum type', $module) . '.' . '<br>';
                        $caption = _M('Error', $module);
                        $MIOLO->error( $msg, $gotoNo, $caption );
                    }
                    else
                    {
                        //Se são de tipos diferentes, só avisar o usuário que pertencem ao mesmo currículo, mas podem ser inseridas
                        $msg .= '<font color=\'red\'>' . _M('The substitute curricular component @1 is in the pupil curriculum.', $module, $data->curricularComponentNewName) . '</font>';
                    }
                }
                //else
                //{
                    //Não é do currículo do aluno, pode substituir
                //}
            }

            $caption = _M('Question',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();

        $filters->curricularComponentId      = $this->curricularComponentIdC->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
        $filters->courseId                   = $this->contractCourseId->value;
        $filters->courseVersion              = $this->contractCourseVersion->value;
        //$filters->learningPeriodId           = $this->learningPeriodId->value;              //use in searchGroup


        $busCurr     = $MIOLO->getBusiness($module, 'BusCurriculum');
        $curriculums = $busCurr->searchCurriculum($filters);      
        $data->curriculumId = $curriculums[0][0];

//         $filters1->learningPeriodId           = $this->learningPeriodId->value;
//         $filters1->curricularComponentId      = $this->curricularComponentId->value;
//         $filters1->curricularComponentVersion = $this->curricularComponentVersion->value;
// 
//         $busGroup   = $MIOLO->getBusiness($module, 'BusGroup');
//         $groups     = $busGroup->searchGroup($filters1);
// 
//         if($groups)
//         {

        if ( strlen((string)$curriculums) > 0 )
        {
            //Existe curriculo

            $business = $MIOLO->getBusiness($module, 'BusSubstitutionUnblock');

            $filter1->curriculumId               = $curriculums[0][0];
            $filter1->contractId                 = $data->contractId;
            $filter1->learningPeriodId           = $data->learningPeriodId;
            $filter1->curricularComponentId      = $data->curricularComponentId;
            $filter1->curricularComponentVersion = $data->curricularComponentVersion;

            $searchSubstitutionUnblock      = $business->searchSubstitutionUnblock($filter1);

            if ( is_array($searchSubstitutionUnblock) && (count($searchSubstitutionUnblock) > 0) ) 
            {
                //Ja existe um desbloqueio para esta disciplina, periodo letivo e contrato
                $msg  = _M('Already exist unblock to this contract, learning period, curricular component and substitution curricular component', $module) . '.';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
            else
            {
                if ( $function == 'update' )
                {
                    $ok  = $business->updateSubstitutionUnblock($data);
                    $msg = MSG_RECORD_UPDATED;
                }
                else
                {
                    $ok  = $business->insertSubstitutionUnblock($data);
                    $msg = MSG_RECORD_INSERTED;
                }
    
                if ( $ok )
                {
                    $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                    if ( $function == 'update' )
                    {
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $goto);
                    }
                    else
                    {
                        $opts    = array('event'=>'tbBtnNew_click',
                                        'function'=>'insert');
        
                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Question',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                else
                {
                    $msg  = _M('Error executing requested operation', $module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }
        }
        else
        {
            //Nao existe curriculo
        }
//         }
//         else
//         {
//                 $msg1  = _M('There is no offer registered for this curricular component in this learning period', $module);
//                 $this->AddError($msg1);
//         }
    }
    
    
    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->curricularComponentIdC     = $this->curricularComponentIdC->value;

        $data->learningPeriodDescription  = $this->learningPeriod->value;
        $data->personName                 = $this->contractPersonName->value;
        $data->curricularComponentOldName = $this->curricularComponentNameC->value;
        $data->curricularComponentNewName = $this->curricularComponentName->value;

        $data->formationLevelId           = $this->formationLevelId->value;

        return $data;
    }

}

?>
