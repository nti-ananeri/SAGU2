<?php

/**
 * PupilListing form
 *
 * @author Hélio H. R. Guimarães [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/12/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmEnrollFromCurricularComponent extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('List enrolled pupils by curricular component', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $filtersSchedule->periodId      = MIOLO::_request('periodId');
        $filtersSchedule->courseId      = MIOLO::_request('courseId');
        $filtersSchedule->courseUnitId  = MIOLO::_request('unitId');
        $filtersSchedule->courseVersion = MIOLO::_request('courseVersion');
        $filtersSchedule->courseTurnId  = MIOLO::_request('turnId');

        $businessGroup = $MIOLO->getBusiness($module, 'BusGroup');
        $searchGroup   = $businessGroup->searchGroup($filtersSchedule);

        $gridGroup = $MIOLO->getUI()->getGrid($module, 'GrdGroupSearch', null);
        $gridGroup->setData($searchGroup);

        unset($gridGroup->actions); //Retira botão de update e delete

        $this->addField($gridGroup);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
//     public function tbBtnPrint_click($sender = null)
//     {
//         $MIOLO  = MIOLO::getInstance();
//         $module = MIOLO::getCurrentModule();
//         $action = MIOLO::getCurrentAction();
// 
// 
//     }
}

?>
