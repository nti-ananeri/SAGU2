<?php

/**
 * State transistion form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a stateTransistion
 **/
class FrmStateTransistion extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $beginStateId   = $_GET['beginStateId'] ? $_GET['beginStateId'] : $_POST['beginStateId'];
            $endStateId     = $_GET['endStateId'] ? $_GET['endStateId'] : $_POST['endStateId'];

            $business = $MIOLO->getBusiness($module,'BusStateTransistion');
            $data = $business->getStateTransistion($beginStateId, $endStateId);
        }
        $this->page->onLoad('document.' . $this->name . '.beginStateId.focus();');

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $beginStateLabel = new MText('beginStateLabel', _M('Begin state', $module) . ':');
        $beginStateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginStateLabel->setClass('m-caption m-caption-required');
         
        $beginStateId = new MLookupTextField('beginStateId', $this->getFormValue('beginStateId', $data->beginStateId), _M('Begin state id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'beginStateDescription', $module, 'StatesContract', null, null, true);
        //$fields[] = $beginStateId;
        $validators[] = new MIntegerValidator('beginStateId', _M('Begin state', $module), 'required');

        $beginStateDescription = new MTextField('beginStateDescription', $this->getFormValue('beginStateDescription', $data->beginStateDescription), _M('Begin state description',$module), FIELD_DESCRIPTION_SIZE);
        $beginStateDescription->setReadOnly(true);
        //$fields[] = $beginStateDescription;
        
        $hctBeginState = new MHContainer('hctBeginState', array($beginStateLabel, $beginStateId, $beginStateDescription));
        $hctBeginState->setShowLabel(false);
        $fields[] = $hctBeginState;
        
        $endStateLabel = new MText('endStateLabel', _M('End state', $module) . ':');
        $endStateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endStateLabel->setClass('m-caption m-caption-required');

        $endStateId = new MLookupTextField('endStateId', $this->getFormValue('endStateId', $data->endStateId), _M('End state id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'endStateDescription', $module, 'StatesContract', null, null, true);
        //$fields[] = $endStateId;
        $validators[] = new MIntegerValidator('endStateId', _M('End state', $module), 'required');

        $endStateDescription = new MTextField('endStateDescription', $this->getFormValue('endStateDescription', $data->endStateDescription), _M('End state description',$module), FIELD_DESCRIPTION_SIZE);
        $endStateDescription->setReadOnly(true);
        //$fields[] = $endStateDescription;
        
        $hctEndState = new MHContainer('hctEndState', array($endStateLabel, $endStateId, $endStateDescription));
        $hctEndState->setShowLabel(false);
        $fields[] = $hctEndState;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'beginStateId' => MIOLO::_request('beginStateId'),
                        'endStateId' => MIOLO::_request('endStateId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('beginStateId' => MIOLO::_request('beginStateId'),
                        'endStateId' => MIOLO::_request('endStateId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusStateTransistion');
        $ok = $business->deleteStateTransistion($this->beginStateId->value, $this->endStateId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusStateTransistion');

        if ( $function == 'update' )
        {
            $ok  = $business->updateStateTransistion($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertStateTransistion($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.


            if ( $function == 'update' )
            {
                $opts = array('beginStateIdS' => $data->beginStateId,
                'endStateIdS' => $data->endStateId);
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }

        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdStateTransistion();

        $data->beginStateId = $this->beginStateId->value;
        $data->endStateId   = $this->endStateId->value;

        return $data;
    }

}

?>
