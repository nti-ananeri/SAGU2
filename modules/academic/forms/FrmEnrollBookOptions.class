<?php

/**
 * Form to choice the enroll book report option
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 10/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmEnrollBookOptions extends MForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Enroll book data', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Generate multiple learning period', $this->home, 'generateMultipleLearningPeriodCourse-16x16.png', true);
        }
        //fim favoritos
        $toolBar->disableButton('tbBtnBookmark');
        
        $fields[] = $toolBar;
        $fields[] = new MSeparator('');
        
        $fields[] = new MHiddenField('periodId', $periodId);
        
        $reportLabel  = new MText('reportLabel', _M('Report option',$module) . ':');
        $reportLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reportLabel->setClass('m-caption m-caption-required');
        $flds[] = $reportLabel;
        
        $reportOptions = array( array(_M('View enroll book summary', $module), 1),
                                array(_M('Enroll book data by age', $module), 2),
                                array(_M('Number of pupils by city', $module), 3),
                                array(_M('Number of pupils by group: offers', $module), 4),
                                array(_M('Number of pupils by group: occurrences', $module), 19),
                                array(_M('Number of groups by professor', $module), 5),
                                array(_M('Number of curricular components by professor', $module), 6),
                                array(_M('Number of pupils by city and course', $module), 7),
                                array(_M('Number of pupils by city, course and curricular component', $module), 18),
                                array(_M('Number of pupils by course and incentive', $module), 8),
                                array(_M('Number of pupils by course and credits number', $module), 9),
                                array(_M('Number of pupils by course and age band', $module), 10),
                                array(_M('Number of pupils by course, age band and curricular component', $module), 17),
                                array(_M('Pupils in transfer to other institution or with transfer document forwarded', $module), 11),
                                array(_M('Pupils by enroll book status', $module), 12),
                                array(_M('Number of pupils by origin and age', $module), 13),
                                array(_M('Configure courses view mode', $module), 14),
                                array(_M('Last 2 periods re-ingressed pupils', $module), 15),
                                array(_M('Print complete enroll book', $module), 16),
                              );

        $reportOption = new MRadioButtonGroup('reportOption', '', $reportOptions);
        $reportOption->setShowLabel(false);
        $reportOption->setAutoPostBack(true);
        $validators[] = new MRequiredValidator('reportOption');
        $flds[] = $reportOption;
        
        $hctReport = new MHContainer('hctReport', $flds);
        $hctReport->setShowLabel(false);
        $fields[] = $hctReport;
        
        $option = $this->getFormValue('reportOption', $data->reportOption);
        
        if ($option == 12)
        {
            $business = $MIOLO->getBusiness($module, 'BusStateEnrollBook');
            $stateEnrollBookId = new MComboBox('stateEnrollBookId', $this->getFormValue('stateEnrollBookId', $data->stateEnrollBookId), _M('Enroll book state',$module), $business->listStateEnrollBook() );
            $validators[]   = new MRequiredValidator('stateEnrollBookId');
            $fields[] = $stateEnrollBookId;
        }
        
        if ($option == 2)
        {
            $sex = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sex',$module), SAGU::listSex());
            $fields[] = $sex;
        }
                      
        $btn1     = new MButton('btnNext', _M('Next', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusEnrollBook');
        $data     = $this->getData();
        
        switch ($data->reportOption)
        {
            case 1:
                
                $enrollBookSummary = $business->getEnrollBookSummary($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Status', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Male', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Female', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Unknown', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookSummary) > 0)
                {
                    foreach ($enrollBookSummary as $ebsData)
                    {
                        $tableData = $ebsData->statesData;
                        
                        strlen((string)$ebsData->totalM)  == 0 ? $ebsData->totalM  = 0 : null;
                        strlen((string)$ebsData->totalF)  == 0 ? $ebsData->totalF  = 0 : null;
                        strlen((string)$ebsData->totalU)  == 0 ? $ebsData->totalU  = 0 : null;
                        strlen((string)$ebsData->total)   == 0 ? $ebsData->total   = 0 : null;
                        strlen((string)$ebsData->totalMA) == 0 ? $ebsData->totalMA = 0 : null;
                        strlen((string)$ebsData->totalFA) == 0 ? $ebsData->totalFA = 0 : null;
                        strlen((string)$ebsData->totalUA) == 0 ? $ebsData->totalUA = 0 : null;
                        strlen((string)$ebsData->totalA)  == 0 ? $ebsData->totalA  = 0 : null;
                        
                        $tableData[] = array(null, '<b>' . strtoupper(_M('Total', $module)) . '</b>', '<b>' . $ebsData->totalM . '</b>', '<b>' . $ebsData->totalF . '</b>', '<b>' . $ebsData->totalU . '</b>', '<b>' . $ebsData->total . '</b>');
                        $tableData[] = array(null, '<b>' . strtoupper(_M('Total active', $module)) . '</b>', '<b>' . $ebsData->totalMA . '</b>', '<b>' . $ebsData->totalFA . '</b>', '<b>' . $ebsData->totalUA . '</b>', '<b>' . $ebsData->totalA . '</b>');
                        
                        $tableRaw = new MTableRaw($ebsData->title, $tableData, $columns);

                        $tableRaw->setAlternate(true);
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                break;
            
            case 2:
                $enrollBookSummByAge = $business->getEnrollBookSummaryByAge($data->periodId, $data->sex);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Status', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\"><=18</div>";
                $columns[] = "<div style=\"text-align: center;\">19..24</div>";
                $columns[] = "<div style=\"text-align: center;\">25..29</div>";
                $columns[] = "<div style=\"text-align: center;\">30..34</div>";
                $columns[] = "<div style=\"text-align: center;\">35..39</div>";
                $columns[] = "<div style=\"text-align: center;\">40..44</div>";
                $columns[] = "<div style=\"text-align: center;\">45..49</div>";
                $columns[] = "<div style=\"text-align: center;\">50..54</div>";
                $columns[] = "<div style=\"text-align: center;\">55..59</div>";
                $columns[] = "<div style=\"text-align: center;\">60..64</div>";
                $columns[] = "<div style=\"text-align: center;\">>=65</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('NK', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookSummByAge) > 0)
                {
                    foreach ($enrollBookSummByAge as $ebsData)
                    {
                        $tableData = $ebsData->statesData;
                        
                        $under18    = '<b>' . $ebsData->totalUnder18 . '</b>';
                        $from19to24 = '<b>' . $ebsData->total19to24 . '</b>';
                        $from25to29 = '<b>' . $ebsData->total25to29 . '</b>';
                        $from30to34 = '<b>' . $ebsData->total30to34 . '</b>';
                        $from35to39 = '<b>' . $ebsData->total35to39 . '</b>';
                        $from40to44 = '<b>' . $ebsData->total40to44 . '</b>';
                        $from45to49 = '<b>' . $ebsData->total45to49 . '</b>';
                        $from50to54 = '<b>' . $ebsData->total50to54 . '</b>';
                        $from55to59 = '<b>' . $ebsData->total55to59 . '</b>';
                        $from60to64 = '<b>' . $ebsData->total60to64 . '</b>';
                        $over65     = '<b>' . $ebsData->totalOver65 . '</b>';
                        $unknown    = '<b>' . $ebsData->totalUnknown . '</b>';
                        $number     = '<b>' . $ebsData->total . '</b>';
                        
                        $tableData[] = array(null,  
                                            '<b>' . strtoupper(_M('Total', $module)) . '</br>',
                                            $under18,
                                            $from19to24,
                                            $from25to29,
                                            $from30to34,
                                            $from35to39,
                                            $from40to44,
                                            $from45to49,
                                            $from50to54,
                                            $from55to59,
                                            $from60to64,
                                            $over65,
                                            $unknown,
                                            $number     );
                        
                        $under18    = '<b>' . $ebsData->totalUnder18A . '</b>';
                        $from19to24 = '<b>' . $ebsData->total19to24A . '</b>';
                        $from25to29 = '<b>' . $ebsData->total25to29A . '</b>';
                        $from30to34 = '<b>' . $ebsData->total30to34A . '</b>';
                        $from35to39 = '<b>' . $ebsData->total35to39A . '</b>';
                        $from40to44 = '<b>' . $ebsData->total40to44A . '</b>';
                        $from45to49 = '<b>' . $ebsData->total45to49A . '</b>';
                        $from50to54 = '<b>' . $ebsData->total50to54A . '</b>';
                        $from55to59 = '<b>' . $ebsData->total55to59A . '</b>';
                        $from60to64 = '<b>' . $ebsData->total60to64A . '</b>';
                        $over65     = '<b>' . $ebsData->totalOver65A . '</b>';
                        $unknown    = '<b>' . $ebsData->totalUnknownA . '</b>';
                        $number     = '<b>' . $ebsData->totalA . '</b>';
                        
                        $tableData[] = array(null,  
                                            '<b>' . strtoupper(_M('Total active', $module)) . '</br>',
                                            $under18,
                                            $from19to24,
                                            $from25to29,
                                            $from30to34,
                                            $from35to39,
                                            $from40to44,
                                            $from45to49,
                                            $from50to54,
                                            $from55to59,
                                            $from60to64,
                                            $over65,
                                            $unknown,
                                            $number     );
                        
                        $tableRaw = new MTableRaw($ebsData->title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                
                break;
                
            case 3:
                $enrollBookDataByCity = $business->getEnrollBookDataByCity($data->periodId);
                
                $title = strtoupper(_M('Number of pupils by city', $module) . ' - ' . $data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('City', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookDataByCity) > 0)
                {
                    foreach ($enrollBookDataByCity as $ebd)
                    {
                        $total += $ebd[1];
                    }
                    
                    $tableData = $enrollBookDataByCity;
                    
                    $tableData[] = array ('<b>' . strtoupper(_M('Total', $module)) . '</b>', '<b>' . $total . '</b>');
                    
                    $tableRaw = new MTableRaw($title, $tableData, $columns);
                    $tableRaw->setAlternate(true);
                    //$tableRaw->setAttribute('width', '500px');
                    $this->addField($tableRaw);
                    $this->addField(new Separator());
                }
                
                break;
                
            case 4:
                $enrollBookDataByGroup = $business->getEnrollBookDataByGroupOffer($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Curricular component', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Professor', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookDataByGroup) > 0)
                {
                    foreach ($enrollBookDataByGroup as $ebg)
                    {
                        $text = new MText('text_' . $ebg->title, '<b>' . $ebg->title . '</b>');
                        $div  = new MDiv('div_' . $ebg->title, $text, null, 'align=center');
                        $this->addField($div);
                        
                        if (count($ebg->data) > 0)
                        {
                            foreach ($ebg->data as $ebgdata)
                            {
                                $tableData = $ebgdata->data;
                                
                                $tableData[] = array(null,
                                                     null,
                                                     '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                                     '<b>' . $ebgdata->total . '</b>');
                                                                                                
                                $tableRaw = new MTableRaw($ebgdata->title, $tableData, $columns);
                                $tableRaw->setAlternate(true);
                                //$tableRaw->setAttribute('width', '500px');
                                $this->addField($tableRaw);
                                $this->addField(new Separator());
                            }
                        }
                    }
                }
                
                break;
            
            case 19:
                $enrollBookDataByGroup = $business->getEnrollBookDataByGroupOccurrence($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Curricular component', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Professor', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookDataByGroup) > 0)
                {
                    foreach ($enrollBookDataByGroup as $ebdg)
                    {
                        $text = new MText('text_' . $ebdg->title, '<b>' . $ebdg->title . '</b>');
                        $div  = new MDiv('div_' . $ebdg->title, $text, null, 'align=center');
                        $this->addField($div);
                        
                        if (count($ebdg->data) > 0)
                        {
                            foreach ($ebdg->data as $ebgdata)
                            {
                                $tableData = $ebgdata->courseData;
                                
                                $tableData[] = array(null,
                                                     null,
                                                     '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                                     '<b>' . $ebgdata->total . '</b>');
                                                                                                
                                $tableRaw = new MTableRaw($ebgdata->title, $tableData, $columns);
                                $tableRaw->setAlternate(true);
                                //$tableRaw->setAttribute('width', '500px');
                                $this->addField($tableRaw);
                                $this->addField(new Separator());
                            }
                        }
                    }
                }
                
                break;
                
            case 5:
                $professorGroups = $business->getProfessorGroups($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($professorGroups) > 0)
                {
                    foreach ($professorGroups as $pg)
                    {
                        $tableData   = $pg->data;
                        $tableData[] = array(null, 
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $pg->total . '</b>' );
                        
                        $tableRaw = new MTableRaw($pg->title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                
                break;
                
            case 6:
                $professorCurrComp = $business->getProfessorCurricularComponents($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                $title     = strtoupper(_M('Number of curricular components by professor') . ' - ' . $data->periodId);
                
                $total = 0;
                if (count($professorCurrComp) > 0)
                {
                    foreach ($professorCurrComp as $pCC)
                    {
                        $total += $pCC[2];
                    }
                }
                
                $professorCurrComp[] = array(null,
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $total . '</b>');
                
                $tableRaw = new MTableRaw($title, $professorCurrComp, $columns);
                $tableRaw->setAlternate(true);
                //$tableRaw->setAttribute('width', '500px');
                $this->addField($tableRaw);
                $this->addField(new Separator());
                                
                break;
                
            case 7:
                $dataByCityAndCourse = $business->getEnrollBookDataByCityAndCourse($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('City', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($dataByCityAndCourse) > 0)
                {
                    foreach ($dataByCityAndCourse as $dbcc)
                    {
                        $title       = $dbcc->title;
                        $tableData   = $dbcc->data;
                        $tableData[] = array(null,
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $dbcc->total . '</b>');
                        
                        $tableRaw = new MTableRaw($title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                
                break;
                
            case 18:
                $dataByCityAndCourse = $business->getEnrollBookDataByCityCourseAndCurrComp($data->periodId);
                
                $columns[] = _M('Id', $module);
                $columns[] = _M('City', $module);
                $columns[] = _M('Number', $module);
                
                if (count($dataByCityAndCourse) > 0)
                {
                    foreach ($dataByCityAndCourse as $dbcc)
                    {
                        $title       = $dbcc->title;
                        $tableData   = $dbcc->data;
                        $tableData[] = array(null,
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $dbcc->total . '</b>');
                        
                        $tableRaw = new MTableRaw($title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                
                break;    
            
            case 8:
                $enrollBookDataByIncentive = $business->getEnrollBookDataByCourseAndIncentive($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Incentive', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Value', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                
                if (count($enrollBookDataByIncentive) > 0)
                {
                    foreach ($enrollBookDataByIncentive as $ebdi)
                    {
                        $tableData   = $ebdi->data;
                        $tableData[] = array(null,
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            null,
                                            '<b>' . $ebdi->total . '</b>');
                        
                        $tableRaw = new MTableRaw($ebdi->title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());
                    }
                }
                
                break;
                
            case 10:
                $pupilsByCourse = $business->getPupilsByCourseAndAgeBand($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Unit', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Course', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Male', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Female', $module) . "</div>";
                
                $title = strtoupper(_M('Number of pupils by course and age band', $module)) . ' - ' . $data->periodId;
                
                if (count($pupilsByCourse) > 0)
                {
                    foreach ($pupilsByCourse as $pbc)
                    {
                        $needAdjust  = false;
                        if (strlen((string)$pbc->data[3]) == 0)
                        {
                            //$pbc->data[3] = ' ';
                            $needAdjust   = true;
                            $i = 3;
                        }
                        if (strlen((string)$pbc->data[4]) == 0)
                        {
                            //$pbc->data[4] = ' ';
                            $needAdjust   = true;
                            $i = 4;
                        }
                        
                        if ($needAdjust)
                        {
                            $strData = array('<=18 '   . '<font color=\'red\'>0</font>', 
                                             '19..24 ' . '<font color=\'red\'>0</font>', 
                                             '25..29 ' . '<font color=\'red\'>0</font>', 
                                             '30..34 ' . '<font color=\'red\'>0</font>', 
                                             '35..39 ' . '<font color=\'red\'>0</font>', 
                                             '40..44 ' . '<font color=\'red\'>0</font>', 
                                             '45..49 ' . '<font color=\'red\'>0</font>', 
                                             '50..54 ' . '<font color=\'red\'>0</font>', 
                                             '55..59 ' . '<font color=\'red\'>0</font>', 
                                             '60..64 ' . '<font color=\'red\'>0</font>', 
                                             '>=65 '   . '<font color=\'red\'>0</font>', 
                                             '<b>' . _M('Total', $module) . ' <font color=\'red\'>0</font></b>');
                
                            $str = implode('<br>', $strData);
                            
                            $pbc->data[$i] = $str;
                        }
                                                
                        $tableData[] = $pbc->data;
                        $totalM     += $pbc->totalM;
                        $totalF     += $pbc->totalF;
                    }
                    
                    $tableData[] = array(null, null, 
                                        '<b>' . strtoupper(_M('Total', $module)) . '</b>', 
                                        '<b>' . $totalM . '</b>', 
                                        '<b>' . $totalF . '</b');
                }
                                
                $tableRaw = new MTableRaw($title, $tableData, $columns);
                $tableRaw->setAlternate(true);
                //$tableRaw->setAttribute('width', '500px');
                $this->addField($tableRaw);
                $this->addField(new Separator());
                
                break;
                
            case 17:
                $pupilsByCourse = $business->getPupilsByCourseAgeBandAndCurrComp($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Unit', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Course', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Curricular component', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Male', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Female', $module) . "</div>";
                
                $title = strtoupper(_M('Number of pupils by course, age band and curricular component', $module)) . ' - ' . $data->periodId;
                
                if (count($pupilsByCourse) > 0)
                {
                    foreach ($pupilsByCourse as $pbc)
                    {
                        $needAdjust  = false;
                        if (strlen((string)$pbc->data[5]) == 0)
                        {
                            //$pbc->data[3] = ' ';
                            $needAdjust   = true;
                            $i = 5;
                        }
                        if (strlen((string)$pbc->data[4]) == 0)
                        {
                            //$pbc->data[4] = ' ';
                            $needAdjust   = true;
                            $i = 4;
                        }
                        
                        if ($needAdjust)
                        {
                            $strData = array('<=18 '   . '<font color=\'red\'>0</font>', 
                                             '19..24 ' . '<font color=\'red\'>0</font>', 
                                             '25..29 ' . '<font color=\'red\'>0</font>', 
                                             '30..34 ' . '<font color=\'red\'>0</font>', 
                                             '35..39 ' . '<font color=\'red\'>0</font>', 
                                             '40..44 ' . '<font color=\'red\'>0</font>', 
                                             '45..49 ' . '<font color=\'red\'>0</font>', 
                                             '50..54 ' . '<font color=\'red\'>0</font>', 
                                             '55..59 ' . '<font color=\'red\'>0</font>', 
                                             '60..64 ' . '<font color=\'red\'>0</font>', 
                                             '>=65 '   . '<font color=\'red\'>0</font>', 
                                             '<b>' . _M('Total', $module) . ' <font color=\'red\'>0</font></b>');
                
                            $str = implode('<br>', $strData);
                            
                            $pbc->data[$i] = $str;
                        }
                                                
                        $tableData[] = $pbc->data;
                        $totalM     += $pbc->totalM;
                        $totalF     += $pbc->totalF;
                    }
                    
                    $tableData[] = array(null, null, null,
                                        '<b>' . strtoupper(_M('Total', $module)) . '</b>', 
                                        '<b>' . $totalM . '</b>', 
                                        '<b>' . $totalF . '</b');
                }
                                
                $tableRaw = new MTableRaw($title, $tableData, $columns);
                $tableRaw->setAlternate(true);
                //$tableRaw->setAttribute('width', '500px');
                $this->addField($tableRaw);
                $this->addField(new Separator());
                
                break;
            
            case 11:
                $pupilsInExternalTransfer = $business->getPupilsInExternalTransfer($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
                
                $total = 0;
                if (count($pupilsInExternalTransfer) > 0)
                {
                    foreach ($pupilsInExternalTransfer as $piet)
                    {
                        $tableData   = $piet->data;
                        /*$tableData[] = array(
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $piet->total . '</b>');*/
                        $total += $piet->total;
                        $tableRaw = new MTableRaw($piet->title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());   
                    }
                    
                    $text = new MText('total', '<b>' . strtoupper(_M('Total', $module)) . ': <font color=\'blue\'>' . $total . '</font></b>');
                    $div  = new MDiv('div', $text, null, 'align=center');
                    $this->addField($div);
                }
                
                
                break;
            
            case 12:
                $pupilsByState = $business->getPupilsByState($data->periodId, $data->stateEnrollBookId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Person id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Course id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Course name', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Unit', $module) . "</div>";
                
                if (count($pupilsByState) > 0)
                {
                    $total = 0;
                    foreach ($pupilsByState as $pbs)
                    {
                        $tableData   = $pbs->data;
                        /*$tableData[] = array(
                                            '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                            '<b>' . $pbs->total . '</b>');*/
                        $total += $pbs->total;
                        $tableRaw = new MTableRaw($pbs->title, $tableData, $columns);
                        $tableRaw->setAlternate(true);
                        //$tableRaw->setAttribute('width', '500px');
                        $this->addField($tableRaw);
                        $this->addField(new Separator());   
                    }
                    
                    $text = new MText('total', '<b>' . strtoupper(_M('Total', $module)) . ': <font color=\'blue\'>' . $total . '</font></b>');
                    $div  = new MDiv('div', $text, null, 'align=center');
                    $this->addField($div);
                }
                
                break;
                        
            case 13:
                $pupilsByCityAndAge = $business->getPupilsByCityAndAge($data->periodId);
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('City', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Age', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Number', $module) . "</div>";
                                
                $title = strtoupper(_M('Number of pupils by origin and age', $module)) . ' - ' . $data->periodId;
                
                $total = 0;
                
                if (count($pupilsByCityAndAge) > 0)
                {
                    foreach ($pupilsByCityAndAge as $pca)
                    {
                        $total += $pca[3];
                    }
                }
                
                $tableData = $pupilsByCityAndAge;
                $tableData[] = array(null, 
                                    '<b>' . strtoupper(_M('Total', $module)) . '</b>', 
                                    null, 
                                    '<b>' . $total . '</b>');
                
                $tableRaw = new MTableRaw($title, $tableData, $columns);
                $tableRaw->setAlternate(true);
                //$tableRaw->setAttribute('width', '500px');
                $this->addField($tableRaw);
                $this->addField(new Separator());
                
                break;
            case 14:
                $coursesSequenceConfig = $business->getCoursesSequenceConfig($data->periodId, 1);
                
                $instructions = '<b>' . _M('Instructions', $module) . ':</b><br><br>' . 
                                _M('Create course groups by typing the same number in the text boxes of courses that should appear together', $module) . '. ' . _M('For example', $module) . ':<br><br>' . 
                                ' - ' . _M('If you want that courses 16 and 400 appear one after other, type 1 in both text boxes') . '.<br>' . 
                                ' - ' . _M('If you want that courses 120 and 350 appear after courses 16 and 400 (that belong to group 1), type 2 in their text boxes') . '.';
                                
                $instructionsField = new MText('instructionsField', $instructions);
                
                $instructionsDiv   = new MDiv('instructionsDiv', $instructionsField);
                
                $this->addField($instructionsDiv);
                $this->addField(new MSeparator());
                
                if (count($coursesSequenceConfig) > 0)
                {
                    $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                    $columns[] = "<div style=\"text-align: center;\">" . _M('Course', $module) . "</div>";
                    $columns[] = "<div style=\"text-align: center;\">" . _M('Offered curricular component', $module) . "</div>";
                    
                    $title = strtoupper(_M('Configuration of courses view mode in enroll book', $module));
                    
                    foreach ($coursesSequenceConfig as $row)
                    {
                        list (  $courseId,
                                $name,
                                $sequence   ) = $row;
                                
                        $groupField = new MTextField('grpField[' . $courseId . ']', $sequence, '', 5, _M('Type the group number for course', $module) . ' ' . $courseId);
                        
                        $tableRow[] = $courseId;
                        $tableRow[] = $name;
                        $tableRow[] = $groupField;
                        
                        $tableData[] = $tableRow;
                        unset($tableRow);
                    }
                    
                    $tableRaw = new MTableRaw($title, $tableData, $columns);
                    $tableRaw->setAlternate(true);
                    $this->addField($tableRaw);
                    
                    $btnSave = new MButton('btnSave', _M('Save', $module));
                    $btnDiv  = new MDiv('btnDiv', $btnSave, null, 'align=center');
                    
                    $this->addField(new MSeparator());
                    $this->addField($btnDiv);
                    $this->addField(new MSeparator());
                }
                
                break;
            case 16:
                $MIOLO->uses('classes/RptEnrollBookData.class', $module);
        
                $report = new RptEnrollBookData($data);
                
                break;
            default:
                break;
        }
        
    }
    
    public function btnSave_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $courseGroups = $this->getFormValue('grpField');
        
        if (count($courseGroups) > 0)
        {
            $busCourse = $MIOLO->getBusiness($module, 'BusCourse');
            
            foreach ($courseGroups as $courseId=>$group)
            {
                $courseData = $busCourse->getCourse($courseId);
                
                $courseData->enrollBookSequence = $group;
                
                $busCourse->updateCourse($courseData);
            }
        }
    }
}

?>
