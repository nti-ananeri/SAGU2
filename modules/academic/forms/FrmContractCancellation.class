<?php
/**
 *
 *
 * @author Daniel Afonso Heisler [daniel.heisler@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 18/01/2008
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
**
 */
class FrmContractCancellation extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Contract cancellation', $module));
        
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');


        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Contract lock', $this->home, 'contractLock-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person', $module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack() );
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;
        $validators[] = new MIntegerValidator('contractPersonId', '', 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractLabel = new MText('contractLabel', _M('Contract', $module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractLabel;
        $contractLabel->setClass('m-caption m-caption-required');


        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'ContractLock', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId','', 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;
        $contractCourseId->setJsHint(_M('Contract course code',$module));
        
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;
        $contractCourseVersion->setJsHint(_M('Contract course version',$module));

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;
        $contractCourseName->setJsHint(_M('Contract course name',$module));

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Learning period',$module), 'required');

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[]  = $hctLearningPeriod;

        $businessStateContract = $MIOLO->getBusiness($module, 'BusStatesContract');
        $statesContractObject  = $businessStateContract->getStatesContract(STATE_CONTRACT_ID_CANCELLATION);
        $businessReason        = $MIOLO->getBusiness($module,'BusReason');

        $contractInformation->statesContractId->value = STATE_CONTRACT_ID_CANCELLATION;

        $reasonId = new MComboBox('reasonId', $this->getFormValue('reasonId', $data->reasonId ? $data->reasonId : ''), _M('Cancellation reason',$module), $businessReason->listReasonByStateContract($contractInformation->statesContractId)); 
        $fields[] = $reasonId;

        if ( $statesContractObject->needsReason == DB_TRUE )  //if isNeedReason = true
        {
            $validators[] = new MIntegerValidator('reasonId', '', 'required') ;
        }

        $businessReasonCancellation = $MIOLO->getBusiness($module, 'BusReasonCancellation');
        $reasonCancellationId = new MComboBox('reasonCancellationId', $this->getFormValue('reasonCancellationId'), _M('Curricular component reason cancellation',$module), $businessReasonCancellation->listReasonCancellation()); 
        $fields[] = $reasonCancellationId;
        $validators[] = new MIntegerValidator('reasonCancellationId', '', 'required') ;

        $fields[] = new Separator('');
        $fields[] = new MButton('btnExecute', null . _M('Execute', $module));
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');

    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnExecute_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data                  = $this->getTypesData();

        $data->stateContractId = STATE_CONTRACT_ID_CANCELLATION;
        $data->stateTime       = date(MASK_DATE_PHP . ' ' . MASK_TIME_PHP);

        $busCountry            = $MIOLO->getBusiness('basic', 'BusCountry');
        $busContract           = $MIOLO->getBusiness($module, 'BusContract');
        $busStateContract      = $MIOLO->getBusiness($module, 'BusStateContract');
        $busStateTransistion   = $MIOLO->getBusiness($module, 'BusStateTransistion');
        $busReceivableInvoice  = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
        $businessInvoice       = $MIOLO->getBusiness('finance', 'BusInvoice');
        $busGeneralQueries     = $MIOLO->getBusiness('finance', 'BusGeneralQueries');

        $dataCountry           = $busCountry->getCountry(DEFAULT_COUNTRY_ID);
        $dataContract          = $busContract->getContract($data->contractId);
        $lastState             = $busContract->getContractLastMovementStatus($data->contractId);

        $filters = new acdStateTransistion();
        $filters->beginStateId = strlen((string)$lastState->stateContract)>0 ? $lastState->stateContract : 0;
        $filters->endStateId   = STATE_CONTRACT_ID_CANCELLATION;
        $contractState         = $busStateTransistion->searchStateTransistion($filters);
        $opts['event'] = 'confirmBlock';
        $opts['data']  = urlencode(serialize($data));
 
        //regra da última movimentação contratual
        if ( strtoupper($contractState->inOutTransition) != 'I' && @count($contractState) != 1 )
        {

            $lastStateContract = $busStateContract->getStateContract($lastState->stateContract);

            $msg  = new MTextLabel('label1', _M('The last operation of this contract is to @1 and should be one of the operations below to carry out this process', $module, $lastStateContract->description) . '.' . '<br>', null, 'red');

            unset($filters);
            $filters = new acdStateTransistion();
            $filters->endStateId = STATE_CONTRACT_ID_CANCELLATION;

            $contractStates = $busStateTransistion->searchStateTransistion($filters);

            unset($msg_);
            if ( count($contractStates)>0 )
            {
                foreach ( $contractStates as $row )
                {
                    $msg_ .= '<i>' . $row[0] . ' - ' . $row[1] . '</i><br>';
                }
            }

            $msg2 = new MTextLabel('label2', $msg_ . '<br>' . _M('To cancel contract to this person', $module) . '?<br>', null, 'red');

            $div1 = new MDIV('div1', array($msg, new Separator(''), $msg2), null, 'align=center');

            $btnYes1 = new MButton('btnYes1', _M('Yes', $module), $MIOLO->getActionURL($module, $action, null, $opts), 'confirmBlock');

            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

            $btnNo1  = new MButton('btnNo1', _M('No', $module), $goto);

            $div2 = new MDIV('div2', array($btnYes1, $btnNo1), null, 'align=center');

            $fields[] = new MSeparator('');
            $fields[] = $div1;
            $fields[] = new MSeparator('');
            $fields[] = $div2;
            $fields[] = new MSeparator('');
            $fields[] = new MSeparator('');

            $this->setFields($fields);
        }
        //Se o cancelamento pode ser executado
        else
        {
            if (CHECKFINANCE_ON_CONTRACT_CANCELATION == 'TRUE' && MODULE_FINANCE_INSTALLED == 'YES')
            {
                if ( CHECKFINANCE_ON_CONTRACT_CANCELATION == 'TRUE'  )
                {
                    $debits = $busGeneralQueries->getDefaulterDebt($data->contractId, true);
                    if( $debits > 0 )
                    {
                        $MIOLO->error(_M('The system has detected you\'re in debt with the institution.',$module).'<br>'._M('The actual debt value is @1',$module,$debits).'.', $MIOLO->getActionURL($module,$action,null,null));
                    }
                }
                else
                {
                    $confirmBlock = true;
                }
            }
            else
            {
                $confirmBlock = true; 
            }
            //die();
            //Se estiver tudo ok, envia para o cancelamento do contrato
            if($confirmBlock)
            {
                $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
            }
            //Se o financeiro estiver em abeto, e ajustado para bloquear, emite alerta
            else
            {
                $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));

            }
        }
    }

    public function confirmBlock()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $busMovementContract = $MIOLO->getBusiness($module, 'BusMovementContract');
        $busContractLock     = $MIOLO->getBusiness($module, 'BusContractLock');

        $busContractLock->beginTransaction();

        $data = unserialize(urldecode(stripslashes(MIOLO::_request('data'))));

        $curricularComponents = $busContractLock->getContractPeriodEnrolls($data->contractId, $data->learningPeriodId);
        
        $cnt = 0;
        if ( count($curricularComponents) > 0 )
        {
            for ( $i=0; $i<count($curricularComponents); $i++ )
            {
                if ( $busContractLock->curricularComponentCancellation($curricularComponents[$i][0], $data->reasonCancellationId))
                {
                    $cnt++;
                }
            }
        }

        $busMovementContract->db = $busContractLock->db;
        $busMovementContract->insertMovementContract($data);
        $busMovementContract->closePupilInClass($data->contractId);

        $ok = $busContractLock->endTransaction();

        $msg = _M('Contract cancelled. @1 curricular components cancelled.', $module, $cnt);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module) . '.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }


    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdMovementContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->reasonCancellationId = $this->reasonCancellationId->value;

        return $data;
    }

}

?>
