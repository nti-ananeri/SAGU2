<?php

/**
 * Class form
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a class
 **/
class FrmClass extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $classId = $_GET['classId'] ? $_GET['classId'] : $_POST['classId'];
            $fields[] = new MTextLabel('classId', $classId, _M('Class id',$module));
            $fields[] = new MHiddenField('classId', $classId);

            $business = $MIOLO->getBusiness($module,'BusClass');
            $data     = $business->getClass($classId);
        }
        else
        {

            $classLabel = new MText('classLabel', _M('Class id', $module) . ':');
            $classLabel->setWidth(FIELD_CONTAINER_SIZE);
            $classLabel->setClass('m-caption m-caption-required');

            $classId      = new MTextField('classId', $this->getFormValue('classId', $data->classId),'', FIELD_ID_SIZE);
            $validators[] = new MRequiredValidator('classId', _M('Class id', $module), 'required');
            $classId->setJsHint(_M('Enter the class code',$module));

            $hctClassId = new MHContainer('hctClassId', array($classLabel, $classId));
            $fields[]   = $hctClassId;

            $this->page->onLoad('document.' . $this->name . '.classId.focus();');

        }

        $classLabelName = new MText('classLabelName', _M('Class name',$module) . ':');
        $classLabelName->setWidth(FIELD_CONTAINER_SIZE);
        $classLabelName->setClass('m-caption m-caption-required');

        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_),'', FIELD_DESCRIPTION_SIZE);
        $validators[] = new MRequiredValidator('className_', _M('Class name', $module), 'required');
        $className_->setJsHint(_M('Enter the class name', $module));

        $hctClassName = new MHContainer('hctClassName', array($classLabelName, $className_));
        $fields[]     = $hctClassName;

        $classLabelVacant = new MText('classLabelVacant', _M('Vacant',$module) . ':');
        $classLabelVacant->setWidth(FIELD_CONTAINER_SIZE);
        $classLabelVacant->setClass('m-caption m-caption-required');

        $vacant       = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), '', FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('vacant', _M('Vacant', $module), 'required');
        $vacant->setJsHint(_M('Enter the number of vacants', $module));

        $hctClassVacant = new MHContainer('hctClassVacant', array($classLabelVacant, $vacant));
        $fields[]   = $hctClassVacant;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;
        //end course

        $lookupFilters = array('periodId' => 'periodId', 'courseId' => 'courseId');

        //period
        $initialLearningPeriodLabel = new MText('initialLearningPeriodLabel', _M('Initial learning period',$module).':');
        $initialLearningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $initialLearningPeriodLabel->setClass('m-caption m-caption-required');

        $initialLearningPeriodId = new MLookupTextField('initialLearningPeriodId', $this->getFormValue('initialLearningPeriodId', $data->initialLearningPeriodId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, $lookupFilters, true);
        $validators[] = new MRequiredValidator('initialLearningPeriodId', _M('Initial learning period', $module), 'required');
        $initialLearningPeriodId->setJsHint(_M('Enter the initial learning period code',$module));

        $initialLearningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('initialLearningPeriodDescription', $data->initialLearningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $initialLearningPeriodDescription->setJsHint(_M('Initial learning period description',$module));
        $initialLearningPeriodDescription->setReadOnly(true);

        $hctinitialLearningPeriod = new MHContainer('hctlearningPeriod', array($initialLearningPeriodLabel, $initialLearningPeriodId, $initialLearningPeriodDescription));
        $hctinitialLearningPeriod->setShowLabel(true);
        $fields[]  = $hctinitialLearningPeriod;

        // get Yes and No for Radio Button
        $option = '1';
        $messagesType =  SAGU::listYesNo('1'); 

        //isDependence
        $isDependenceLabel = new MText('isDependenceLabel', _M('Is dependence',$module) . '?');
        $isDependenceLabel->setClass('m-caption m-caption-required');
        $isDependenceLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isDependence      = $this->GetFormValue('isDependence',$data->isDependence) ? $this->GetFormValue('isDependence',$data->isDependence) : DB_FALSE;
        $isDependence      = new MRadioButtonGroup('isDependence', '', $messagesType , $isDependence, null, 'horizontal');
        $isDependence->SetShowLabel(false);

        $hctIsDependence   = new MHContainer('hctIsDependence', array($isDependenceLabel, $isDependence));
        $fields[]          = $hctIsDependence;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
        'function' => 'delete',
        'classId' => MIOLO::_request('classId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('classIdS' => MIOLO::_request('classId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusClass');
        $ok = $business->deleteClass($this->classId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusClass');

        if ( $function == 'update' )
        {
            $ok  = $business->updateClass($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertClass($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('classIdS' => $data->classId);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = SAGU::getStackBackUrl();
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdClass();
        $data->classId                  = $this->classId->value;
        $data->className_               = $this->className_->value;
        $data->vacant                   = $this->vacant->value;
        $data->periodId                 = $this->periodId->value;
        $data->courseId                 = $this->courseId->value;
        $data->initialLearningPeriodId  = $this->initialLearningPeriodId->value;
        $data->isDependence             = $this->isDependence->value;

        return $data;
    }

}

?>
