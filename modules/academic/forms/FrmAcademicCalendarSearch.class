<?php

/**
 *
 * This file handles the connection and actions for acdAcademicCalendar table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdAcademicCalendar table
 */
class FrmAcademicCalendarSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Academic calendar', $this->home, 'academicCalendar-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('academicCalendarIdS', $this->getFormValue('academicCalendarIdS', $academicCalendarIdS));
        
        $business  = $MIOLO->getBusiness($module,'BusPeriod');
        $periodIdS = new MComboBox('periodIdS', $this->getFormValue('periodIdS', $data->periodIdS), _M('Period',$module), $business->listPeriod(), true );
        $fields[]  = $periodIdS;
                
        $courseLabelS = new MText('courseLabelS', _M('Course', $module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $courseLabelS;
        
        $courseIdS = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), _M('Course id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,
            'courseVersionS,courseNameS',             $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $flds[] = $courseIdS;
        
        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), _M('Version', $module), FIELD_ID_SIZE);
        //$courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));         
        $flds[] = $courseVersionS;
        
        $courseNameS = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
        //$courseNameS->setReadOnly(true);
        $flds[] = $courseNameS;
        
        $hctCourseS = new MHContainer('hctCourseS', $flds);
        $hctCourseS->setShowLabel(false);
        $fields[] = $hctCourseS;
        unset($flds);
        
        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitIdS  = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $data->unitIdS), _M('Unit', $module), $business->listUnit());
        $fields[] = $unitIdS;
        
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);

        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array(null, null, null, null, null, 'learningPeriodDescriptionS'), $module, 'LearningPeriod', null, array('periodId' => 'periodIdS'), true);
        $learningPeriodIdS->setJsHint(_M('Enter the learning period code',$module));

        $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->getFormValue('learningPeriodDescriptionS', $data->learningPeriodDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescriptionS->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescriptionS->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodIdS, $learningPeriodDescriptionS));
        $hctLearningPeriod->setShowLabel(true);
        $fields[]  = $hctLearningPeriod;

        $occurrenceDateS = new MCalendarField('occurrenceDateS', $this->getFormValue('occurrenceDateS', $data->occurrenceDateS), _M('Date',$module), FIELD_DATE_SIZE);
        $occurrenceDateS->setJsHint(_M('Enter the occurrence date', $module));
        $validators[] = new MDATEDMYValidator('occurrenceDateS', '', 'optional');
        $fields[] = $occurrenceDateS;

        $business = $MIOLO->getBusiness('basic', 'BusWeekDay');
        /*$weekDayId = new MTextField('weekDayId', $this->getFormValue('weekDayId', $data->weekDayId), _M('Week day id',$module), 25);*/

        $weekDayIdS = new MComboBox('weekDayIdS',
                                    $this->GetFormValue('weekDayIdS',$data->weekDayId),
                                    _M('Week day id',$module),
                                    $business->listWeekDay());
        $fields[] = $weekDayIdS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->academicCalendarId = $this->academicCalendarIdS->value;
        $filters->courseId           = $this->courseIdS->value;
        $filters->courseVersion      = $this->courseVersionS->value;
        $filters->courseName         = $this->courseNameS->value;
        $filters->periodId           = $this->periodIdS->value;
        $filters->learningPeriodId   = $this->learningPeriodIdS->value;
        $filters->occurrenceDate     = $this->occurrenceDateS->value;
        $filters->weekDayId          = $this->weekDayIdS->value;

        unset($this->academicCalendarIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdAcademicCalendarSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusAcademicCalendar');
        $data = $business->searchAcademicCalendar($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.academicCalendarIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
