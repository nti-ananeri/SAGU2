<?php

/**
 * ScolarshipDescription form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a scolarshipDescription
 **/
class FrmScolarshipDescription extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Report', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Scolarship description', $this->home, 'scolarshipDescription-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractPersonLabel;

        if (strlen((string)$this->getFormValue('contractId')) > 0)
        {
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', FIELD_ID_SIZE, null, null, array('limbo', 'contractPersonId', 'contractPersonName', 'contractCourseId','contractCourseVersion', 'turnId', 'limbo', 'unitId', 'limbo', 'limbo', 'comments', 'monograph'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Enter the person code',$module));
            $flds[]           = $contractPersonId;
        }
        else
        {
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'turnId', 'limbo', 'unitId', 'limbo', 'limbo', 'comments', 'monograph'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Enter the person code',$module));
            $flds[]           = $contractPersonId;
        }

        $validators[] = new MRequiredValidator('contractPersonId', _M('Person',$module));

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractCourseLabel = new MText('contractCourseLabel', _M('Contract',$module) . ':');
        $contractCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractCourseLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'turnId', 'limbo', 'unitId', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber', 'limbo','limbo',  'comments', 'monograph'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;

        $validators[] = new MRequiredValidator('contractId', _M('Contract',$module));

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Course id', $module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[] = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), _M('Course version', $module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $flds[] = $contractCourseVersion;
        
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), _M('Course name', $module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $flds[] = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $this->setFields($fields);
        $this->addFields($this->defineFields());
        $this->setValidators($validators);
        $this->page->onLoad('document.' . $this->name . '.contractId.focus();');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);

    }
    public function defineValidators()
    {
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
    }

    public function defineFields()
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();
        $businessStamp = $MIOLO->getBusiness('basic', 'BusStamp');
        $stampData     = $businessStamp->listStamp();
        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate', $data->emissionDate))>0 ? $this->getFormValue('emissionDate', $data->emissionDate) : date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $fields[] = $emissionDate;
        $fields[] = new Separator(_M('Report type', $module));
        $reportTypes = array(
                              array(_M('Graduation', $module), 1),
                              array(_M('Technician', $module), 2) 
                             );

        if ( ! strlen((string)$data->scolarshipType) > 0 )
        {
            $data->scolarshipType = 1;
        }

        $scolarshipType = new MRadioButtonGroup('scolarshipType', '', $reportTypes, $this->getFormValue('scolarshipType', $data->scolarshipType), '', 'horizontal');

        $scolarshipType->setShowLabel(false);
        $scolarshipType->setAutoPostBack(true);
        $fields[] = $scolarshipType;
        
        if ( ($this->getFormValue('scolarshipType', $data->scolarshipType)) == 1)
        {      

            $fields[] = new Separator(_M('Report options', $module));
            $print0_opt = array( array(_M('Complementary activities annex', $module), 1),
                                 array(_M('Complementary activities discriminated', $module), 2)
                               );

            $print0 = $this->getFormValue('print0', $data->print0) ? $this->getFormValue('print0', $data->print0) : 2;
            $print0 = new MRadioButtonGroup('print0', '', $print0_opt, $print0, '', 'horizontal');
            $print0->setShowLabel(false);
            $fields[] = $print0; 

            $fields[] = new Separator('');
         
            $notPrintDisapproved = new MCheckBox('notPrintDisapproved', 1, '', $this->getFormValue('notPrintDisapproved', $data->notPrintDisapproved),_M('Don\'t print disapproved curricular components', $module));
            $fields[] = $notPrintDisapproved;

            $notPrintEnrolled = new MCheckBox('notPrintEnrolled', 1, '', $this->getFormValue('notPrintEnrolled', $data->notPrintEnrolled),_M('Don\'t print enrolled curricular components', $module));
            $fields[] = $notPrintEnrolled;
            
            $exploitationDetails = new MCheckBox('exploitationDetails', 1, '', $this->getFormValue('exploitationDetails', $data->exploitationDetails),_M('Print exploitations details', $module));
            $fields[] = $exploitationDetails;
            
            $printNotCoursed = new MCheckBox('printNotCoursed', 1, '', $this->getFormValue('printNotCoursed', $data->printNotCoursed), _M('Print "Not coursed" curricular components', $module));
            $fields[] = $printNotCoursed;

            $notPrintCoefficient = new MCheckBox('notPrintCoefficient', 1, '', $this->getFormValue('notPrintCoefficient', $data->notPrintCoefficient), _M('Do not print pupil coefficient', $module));
            $fields[] = $notPrintCoefficient;
            
            $comments = new MMultilineField('comments', $this->getFormValue('comments', $data->comments), _M('Comments', $module), FIELD_DESCRIPTION_SIZE, 5, FIELD_DESCRIPTION_SIZE);
            $fields[] = $comments;
            
            $monograph = new MMultilineField('monograph', $this->getFormValue('monograph', $data->monograph), _M('Monograph', $module), FIELD_DESCRIPTION_SIZE, 5, FIELD_DESCRIPTION_SIZE);
            $fields[] = $monograph;
        }

        //ordem das disciplinas(alfabética ou semestre)
        $fields[] = new Separator(_M('Sort curricular component by', $module) . ':');
        $reportTypes = array(
                              array(_M('Semester, alphabetic order', $module), 1),
                              array(_M('Alphabetic order, semester', $module), 2) 
                             );

        if ( ! strlen((string)$data->orderBy) > 0 )
        {
            $data->orderBy = 2;
        }

        $orderBy = new MRadioButtonGroup('orderBy', '', $reportTypes, $this->getFormValue('orderBy', $data->orderBy), '', 'horizontal');

        $orderBy->setShowLabel(false);
        $fields[] = $orderBy;

        $fields[] = new Separator(_M('Stamps', $module));
        
        $stamp1 = new MComboBox('stamp1', $this->getFormValue('stamp1', $data->stamp1), _M('Stamp 1', $module),  $stampData);
        $fields[] = $stamp1;

        $stamp2 = new MComboBox('stamp2', $this->getFormValue('stamp2', $data->stamp2), _M('Stamp 2', $module), $stampData);
        $fields[] = $stamp2;
        
        $fields[] = new Separator('');
        
        $fields[] = new MHiddenField('turnId', $this->getFormValue('turnId', $data->turnId));
        $fields[] = new MHiddenField('unitId', $this->getFormValue('unitId', $data->unitId));
        return $fields;
    }
    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();
        
        if ($data->scolarshipType == 1)
        {
            $class = 'RptScolarshipDescription';
            $MIOLO->getClass($module, $class);
            $report = new $class($data);
        }
        else
        {
            $busCourse  = $MIOLO->getBusiness($module, 'BusCourse');
            $courseData = $busCourse->getCourse($data->contractCourseId);
                
            if ($courseData->formationLevelId == TECHNICAL_FORMATION_LEVEL_ID)
            {
                $MIOLO->getClass($module, 'RptScolarshipDescriptionTech');
                $report = new RptScolarshipDescriptionTech($data);
            }
            else
            {
                $msg = _M('To view this report you must select a technical course.', $module);
                $this->addError($msg);
            }
        }
    }
    
    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->personId             = $this->contractPersonId->value;
        $data->personName           = $this->contractPersonName->value;
        $data->courseId             = $this->contractCourseId->value;
        $data->courseVersion        = $this->contractCourseVersion->value;
        $data->courseName           = $this->contractCourseName->value;
        $data->contractId           = $this->contractId->value;
        $data->emissionDate         = $this->emissionDate->value;
        $data->unitId               = $this->unitId->value;
        $data->turnId               = $this->turnId->value; 
        $data->scolarshipType       = $this->scolarshipType->value;
        $data->monograph            = $this->monograph->value;
        $data->comments             = $this->comments->value;
        $data->notPrintDisapproved  = $this->getFormValue('notPrintDisapproved');//$this->notPrintDisapproved->value;
        $data->notPrintEnrolled     = $this->getFormValue('notPrintEnrolled'); //$this->notPrintEnrolled->value;
        $data->notPrintCoefficient  = $this->getFormValue('notPrintCoefficient'); //$this->notPrintEnrolled->value;
        $data->printNotCoursed      = $this->getFormValue('printNotCoursed'); //$this->printNotCoursed->value;
        $data->exploitationDetails  = $this->getFormValue('exploitationDetails'); //$this->exploitationDetails->value;
        $data->stamp1               = $this->getFormValue('stamp1');
        $data->stamp2               = $this->getFormValue('stamp2');
        $data->orderBy              = $this->orderBy->value;
        return $data;
  }
}

?>
