<?php

/**
 *
 * This file handles the connection and actions for acdComplementaryActivities table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [edaurdo@solis.coop.br]
 * 
 * @since
 * Class created on 11/01/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the scdComplementaryActivities table
 */
class FrmComplementaryActivitiesCategoryRulesSearch extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Search', $module));

        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Complementary activity category rules', $this->home, 'complementaryActivitiesCategoryRules-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $complementaryActivitiesCategoryRulesIdS = MIOLO::_request('complementaryActivitiesCategoryRulesIdS');

        if ( strlen((string)$complementaryActivitiesCategoryRulesIdS) > 0 )
        {
            $business = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');
            $data     = $business->getComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesIdS);
        }


        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseIdS      = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersionS', 'courseNameS', 'unitIdS', 'unitDescriptionS', 'turnIdS', 'turnDescriptionS'), $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseNameS    = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name',$module));

        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnIdS          = new MTextField('turnIdS', $this->getFormValue('turnIdS', $data->turnIdS), '', FIELD_ID_SIZE);
        $turnIdS->setReadOnly(true);
        $turnIdS->setJsHint(_M('Turn id', $module));
        //$validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescriptionS = new MTextField('turnDescriptionS', $this->getFormValue('turnDescriptionS', $data->turnDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $turnDescriptionS->setReadOnly(true);
        $turnDescriptionS->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnIdS, $turnDescriptionS));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitIdS          = new MTextField('unitIdS', $this->getFormValue('unitIdS', $data->unitIdS),'', FIELD_ID_SIZE);
        $unitIdS->setReadOnly(true);
        $unitIdS->setJsHint(_M('Unit id', $module));
        //$validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescriptionS = new MTextField('unitDescriptionS', $this->getFormValue('unitDescriptionS', $data->unitDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $unitDescriptionS->setReadOnly(true);
        $unitDescriptionS->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitIdS, $unitDescriptionS));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentIdS = new MLookupTextField('curricularComponentIdS', $this->getFormValue('curricularComponentIdS', $data->curricularComponentIdS), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('curricularComponentVersionS', 'curricularComponentNameS'), $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentIdS'), !$this->page->isPostBack());
        $flds[]                = $curricularComponentIdS;

        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->getFormValue('curricularComponentVersionS', $data->curricularComponentVersionS), _M('Version',$module), FIELD_ID_SIZE);
        $curricularComponentVersionS->setReadOnly(true);
        $flds[]                = $curricularComponentVersionS;

        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->getFormValue('curricularComponentNameS', $data->curricularComponentNameS), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameS->setReadOnly(true);
        $flds[]                  = $curricularComponentNameS;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        $businessCC = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategory');
        $dataCC = $businessCC->listComplementaryActivitiesCategory();
        $complementaryActivitiesCategoryIdS = new MSelection('complementaryActivitiesCategoryIdS', $this->getFormValue('complementaryActivitiesCategoryIdS', $data->complementaryActivitiesCategoryIdS ? $data->complementaryActivitiesCategoryIdS : ''), _M('Complementary activity category',$module), $dataCC );
        $fields[] = $complementaryActivitiesCategoryIdS;

        $minimumHoursS = new MTextField('minimumHoursS', $this->minimumHoursS->value, _M('Minimum hours',$module), FIELD_ID_SIZE);
        $fields[] = $minimumHoursS;

        $maximumHoursS = new MTextField('maximumHoursS', $this->maximumHoursS->value, _M('Maximum hours',$module), FIELD_ID_SIZE);
        $fields[] = $maximumHoursS;

        $fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->courseId                          = $this->courseIdS->value;
        $filters->curricularComponentId             = $this->curricularComponentIdS->value;
        $filters->complementaryActivitiesCategoryId = $this->complementaryActivitiesCategoryIdS->value;
        $filters->minimumHours                      = $this->minimumHoursS->value;
        $filters->maximumHours                      = $this->maximumHoursS->value;

        $filters->complementaryActivitiesCategoryRulesId = $complementaryActivitiesCategoryRulesIdS;

        $business = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategoryRules');
        $data = $business->searchComplementaryActivitiesCategoryRules($filters);

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesCategoryRulesSearch', $filters); 
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
//        unset($this->complementaryActivitiesIdS->value);

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.complementaryActivitiesDescriptionS.focus();');
        }
    	$this->setLabelWidth(FIELD_LABEL_SIZE);

    }
}

?>
