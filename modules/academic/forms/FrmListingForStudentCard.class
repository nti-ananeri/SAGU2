<?php

class FrmListingForStudentCard extends MForm
{

    /**
     * Class constructor
     **/
    function __construct($data=null)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();

        parent::__construct(_M('Listing for student identity card', $module) );

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');
        $event     = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

		$toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnSave');
		$toolBar->hideButton('tbBtnNew');
        $fields[] = $toolBar;
       
		//Person Student

		$personLabel = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
 
		$personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'PersonPupils', null, null, false);
        $personId->setJsHint(_M('Enter the person code',$module));

        $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Person name',$module));
        $personName->setReadOnly(false);

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
		$fields[]  = $hctPerson;
        
		//Course Occurrence
        
		$courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
		
		$courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), _M('Course id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription, limbo, limbo, limbo, limbo, limbo, formationLevelId, formationLevelDescription',$module, 'CourseOccurrence', null, array('courseId'=>'courseId'), !$this->page->isPostBack());
        
		$courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;
        
		$turnLabel = new MText('turnLabel', _M('Turn',$module));
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id',$module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description',$module));

        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $separatorLabel, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]  = $hctTurn;

        $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
        $fields[]       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $this->periodId->value))>0 ? $this->getFormValue('periodId', $this->periodId->value) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );

        $busFormationLevel = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $formationLevels   = $busFormationLevel->listFormationLevel();

        $fields[] = new MMultiSelection('formationLevelId', is_array($this->getFormValue('formationLevelId', $data->formationLevelId)) ? $this->getFormValue('formationLevelId', $data->formationLevelId) : array(), _M('Formation level', $module), $formationLevels, true, null, 5);

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $fields[] = new Separator();
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
		$this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function btnSearch_click($sender = null)
    {
		$MIOLO                  = MIOLO::getInstance();
		$module                 = MIOLO::getCurrentModule();
        
        $data = $this->getTypesData();

        $businessStudent = $MIOLO->getBusiness($module, 'BusStudentCard');
		$dataX           = $businessStudent->getPupils($data);
        $grdSemtur       = $MIOLO->getUI()->getGrid($module, 'GrdListingForStudentCard');
        $grdSemtur->setData($dataX);
		$this->addField($grdSemtur);
    }

    public function tbBtnPrint_click($sender = null)
    {
		$MIOLO = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();

        $data = $this->getTypesData();

		$businessStudent = $MIOLO->getBusiness($module, 'BusStudentCard');
		$dataX = $businessStudent->getPupils($data);
		for($x = 0; $x < count($dataX); $x++)
		{
			if( is_array(MIOLO::_request('selectGrdListingForStudentCard')) ) 
			{
				if( array_key_exists($x,MIOLO::_request('selectGrdListingForStudentCard')) )
				{
					$dataY[$x][] = str_pad(substr($dataX[$x][0],0,4),4,'0', STR_PAD_LEFT);
					$dataY[$x][] = str_pad(substr($dataX[$x][1],0,50),50,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][2],0,50),50,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][3],0,50),50,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][4],0,1),1,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][5],0,25),25,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][6],0,1),1,'0', STR_PAD_LEFT);
					$dataY[$x][] = str_pad(substr($dataX[$x][7],0,1),1,'0', STR_PAD_LEFT);
					$dataY[$x][] = str_pad(substr($dataX[$x][8],0,1),1,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][9],0,5),5,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][10],0,12),12,' ',STR_PAD_LEFT);
					$dataY[$x][] = str_pad(substr(str_replace('/','',$dataX[$x][11]),0,8),8,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][12],0,50),50,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][13],0,30),30,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][14],0,20),20,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][15],0,8),8, '0', STR_PAD_LEFT);
					$dataY[$x][] = str_pad(substr($dataX[$x][16],0,10),10,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][17],0,20),20,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][18],0,10),10,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][19],0,8),8,' ');
					$dataY[$x][] = str_pad(substr($dataX[$x][20],0,11),11,' ');
					$dataGrid[] = $dataX[$x];
					$fC .= implode($dataY[$x],'')."\n";
                    $personIds[] = (int)$dataX[$x][21];
				}
			}
		}
        $f1 = 'semturList/'.'ARQUIVO_RETORNO_INS_'.$dataX[0][0].'_REM_';

        $f1 = $businessStudent->addPupils($personIds, $f1, $data);
        $data->file = $fC;
        $data->fileId = $f1;
        SAGUFile::saveDataToLocal($data);
		if( count($dataGrid) > 0 )
		{
			SAGU::returnAsFile($f1, $fC, 'text/card-file');
		}
    }
    public function getTypesData ()
    {
		$data->courseId         = MIOLO::_request('courseId');
		$data->courseVersion    = MIOLO::_request('courseVersion');
		$data->turnId           = MIOLO::_request('turnId');
		$data->personName       = MIOLO::_request('personName');
		$data->personId         = MIOLO::_request('personId');
        $data->formationLevelId = MIOLO::_request('formationLevelId');
        $data->periodId         = MIOLO::_request('periodId');
        return $data;
    }
}
