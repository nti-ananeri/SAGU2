<?php

/**
 *
 * This file handles the connection and actions for acdMovementContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basMovementContract table
 */
class FrmMovementContractSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Movement contract', $this->home, 'movementContract-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);

        $contractPersonIdS     = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS', $this->contractPersonIdS->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), null, FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonIdS, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $contractLabel;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonIdS', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[] = $contractIdS;

        $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', FIELD_ID_SIZE);
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Course code',$module));
        $flds[]   = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        $flds[]        = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));
        $flds[]             = $courseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);


        $stateContractLabel= new MText('stateContractLabel', _M('State contract',$module) . ':');
        $stateContractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $stateContractLabel;
        $validators[] = new MIntegerValidator('contractIdS', '', 'optional');


        $stateContractIdS = new MLookupTextField('stateContractIdS', $this->getFormValue('stateContractIdS', $data->stateContractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'stateDescriptionS', $module, 'StatesContract', null, null, true);
        $stateContractIdS->setJsHint(_M('Enter the state code',$module));
        $flds[]                = $stateContractIdS;
        $validators[] = new MIntegerValidator('stateContractIdS', '', 'optional');

        $stateDescriptionS = new MTextField('stateDescriptionS', $this->getFormValue('stateDescriptionS', $data->stateDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $stateDescriptionS->setReadOnly(true);
        $stateDescriptionS->setJsHint(_M('State contract description',$module));
        $flds[]                = $stateDescriptionS;

        $hctStateContract = new MHContainer('hctStateContract', $flds);
        $hctStateContract->setShowLabel(true);
        $fields[]    = $hctStateContract;
        unset($flds);

        $reasonLabel= new MText('reasonLabel', _M('Reason',$module) . ':');
        $reasonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $reasonLabel;

        $reasonIdS = new MLookupTextField('reasonIdS', $this->getFormValue('reasonIdS', $data->contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'reasonDescriptionS', $module, 'Reason', null, null, true);
        $reasonIdS->setJsHint(_M('Enter the reason code',$module));
        $flds[]                = $reasonIdS;
        $validators[] = new MIntegerValidator('reasonIdS', '', 'optional');

        $reasonDescriptionS = new MTextField('reasonDescriptionS', $this->reasonDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $reasonDescriptionS->setReadOnly(true);
        $reasonDescriptionS->setJsHint(_M('Reason description',$module));
        $flds[]                = $reasonDescriptionS;

        $hctReason = new MHContainer('hctReason', $flds);
        $hctReason->setShowLabel(true);
        $fields[]    = $hctReason;
        unset($flds);

        $stateTime = $this->getFormValue('stateTimeS');
        $stateTimeS = new MTextField('stateTimeS', $stateTime, _M('State date',$module), FIELD_DATE_SIZE + FIELD_TIME_SIZE);
        $validators[] = new MDATETimeDMYValidator('stateTimeS', _M('State date',$module), 'optional');
        $fields[] = $stateTimeS;


        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', $data->periodId), _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel= new MText('learningPeriodLabel', _M('Last learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $learningPeriodLabel;

        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodIdDescriptionS', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId'), true);
        $learningPeriodIdS->setJsHint(_M('Enter the last learning period',$module));
        $flds[]                = $learningPeriodIdS;

        $fields[] = new MHiddenField('limbo', $limbo);

        $learningPeriodIdDescriptionS = new MTextField('learningPeriodIdDescriptionS', $this->learningPeriodIdDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodIdDescriptionS->setReadOnly(true);
        $learningPeriodIdDescriptionS->setJsHint(_M('Last period description',$module));
        $flds[]                = $learningPeriodIdDescriptionS;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(true);
        $fields[]    = $hctLearningPeriod;
        unset($flds);

        $this->page->onLoad('document.' . $this->name . '.contractPersonIdS.focus();');

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->contractId       = $this->contractIdS->value;
        $filters->personId         = $this->contractPersonIdS->value;
        $filters->stateContractId  = $this->stateContractIdS->value;
        $filters->reasonId         = $this->reasonIdS->value;
        $filters->stateTime        = $this->stateTimeS->value;
        if ( strlen((string)$filters->stateTime) > 0 )
        {
            $filters->stateTime .= ':00';
        }
        $filters->learningPeriodId = $this->learningPeriodIdS->value;
        $filters->periodId         = $this->periodId->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdMovementContractSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusMovementContract');
        $data = $business->searchMovementContract($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.contractIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
