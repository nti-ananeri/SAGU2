<?php

/**
 *
 * This file handles the connection and actions for acdRestrictedDocuments table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdRestrictedDocuments table
 */
class FrmRestrictedDocumentsSearch extends MForm
{
    private $home;
    private $module;
    private $grdResults;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', $this->module), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Restricted documents', $this->home, 'restrictedDocuments-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        //documentType
        $documentTypeLabelS = new MText('documentTypeLabelS', _M('Document type',$module).':');
        $documentTypeLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $documentTypeIdS = new MLookupTextField('documentTypeIdS', $this->documentTypeIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'documentTypeNameS', 'basic', 'DocumentType', null, null, true);
        $documentTypeIdS->setJsHint(_M('Enter the document code',$module));
        $validators[] = new MIntegerValidator('documentTypeIdS');

        $documentTypeNameS = new MTextField('documentTypeNameS', $this->documentTypeNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $documentTypeNameS->setJsHint(_M('Document type name',$module));
        $documentTypeNameS->setReadOnly(true);

        $hctDocumentType = new MHContainer('hctDocumentType', array($documentTypeLabelS, $documentTypeIdS, $documentTypeNameS));
        $hctDocumentType->setShowLabel(true);
        $fields[]   = $hctDocumentType; 

        //course
        $courseLabelS = new MText('courseLabelS', _M('Course',$module).':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
//                'courseVersionS,courseNameS,unitIdS,unitDescriptionS,turnIdS,turnDescriptionS',
                'courseVersionS,courseNameS,unitIdS,unitDescriptionS,turnIdS,turnDescriptionS,limbo,limbo,limbo,limbo,limbo,formationLevelIdS,formationLevelDescriptionS',
                'academic', 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, '', 10);
        $courseVersionS->setJsHint(_M('Course version',$module));
        $courseVersionS->setReadOnly(true);

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', 27);
        $courseNameS->setJsHint(_M('Course name',$module));
        $courseNameS->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourse->setShowLabel(true);
        $fields[]   = $hctCourse;

        //formationLevel
        $formationLevelLabelS = new MText('formationLevelLabelS', _M('Formation level',$module).':');
        $formationLevelLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $formationLevelIdS = new MLookupTextField('formationLevelIdS', $this->formationLevelIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'formationLevelDescriptionS', 'academic', 'FormationLevel', null, null, true);
        $formationLevelIdS->setJsHint(_M('Enter the formation level code',$module));
        $validators[] = new MIntegerValidator('formationLevelIdS');

        $formationLevelDescriptionS = new MTextField('formationLevelDescriptionS', $this->formationLevelDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $formationLevelDescriptionS->setJsHint(_M('Formation level description',$module));
        $formationLevelDescriptionS->setReadOnly(true);

        $hctformationLevel = new MHContainer('hctformationLevel', array($formationLevelLabelS, $formationLevelIdS, $formationLevelDescriptionS));
        $hctformationLevel->setShowLabel(true);
        $fields[]   = $hctformationLevel; 

        $business = $MIOLO->getBusiness('basic','BusTurn');
        $turnIdS = new MComboBox('turnIdS', $this->turnIdS->value, _M('Turn id',$module), $business->listTurn(), false, '', 2);
        $turnIdS->setJsHint( _M('Choose the turn',$module) );
        $fields[] = $turnIdS;

        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitIdS = new MComboBox('unitIdS', $this->unitIdS->value, _M('Unit id',$module), $business->listUnit(), false, '', 2);
        $unitIdS->setJsHint( _M('Choose the unit',$module) );
        $fields[] = $unitIdS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        $this->grdResults = $MIOLO->getUI()->getGrid($module,'GrdRestrictedDocumentsSearch',$filters);

        $this->addField($this->grdResults);
        $this->setValidators($validators);

        $this->page->onLoad('document.' . $this->name . '.documentTypeIdS.focus();');
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

    public function btnSearch_click($sender = NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // get filters values
        $filters->restrictedDocumentId      = $this->restrictedDocumentIdS->value;
        $filters->documentTypeId            = $this->documentTypeIdS->value;
        $filters->documentTypeName          = $this->documentTypeNameS->value;
        $filters->formationLevelId          = $this->formationLevelIdS->value;
        $filters->formationLevelDescription = $this->formationLevelDescriptionS->value;
        $filters->courseId                  = $this->courseIdS->value;
        $filters->courseVersion             = $this->courseVersionS->value;
        $filters->courseName                = $this->courseNameS->value;
        $filters->turnId                    = $this->turnIdS->value;
        $filters->turnDescription           = $this->turnDescriptionS->value;
        $filters->unitId                    = $this->unitIdS->value;
        $filters->unitDescription           = $this->unitDescriptionS->value;

        $business = $MIOLO->getBusiness($module, 'BusRestrictedDocuments');
        $data = $business->searchRestrictedDocuments($filters);
        $this->grdResults->setData($data);
    }

}

?>
