<?php

/**
 *
 * This file handles the connection and actions for acdProfessorCenter table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdProfessorCenter table
 */
class FrmProfessorCenterSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', $this->module), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Professor center', $this->home, 'professorCenter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $professorLabelS = new MText('professorLabelS', _M('Professor',$module).':');
        $professorLabelS->setWidth(FIELD_CONTAINER_SIZE);

        //$professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value, _M('Professor id',$module), 10, null, null, 'professorNameS', $module, 'PhysicalPersonProfessor', null, null, true);
        $professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorIdS->setJsHint(_M('Enter the professor code',$module));
        $validators[] = new MIntegerValidator('professorIdS');

        //$professorNameS = new MTextField('professorNameS', $this->professorNameS->value, _M('Professor name',$module), 40);
        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, '', FIELD_DESCRIPTION_SIZE);
        //$professorNameS->setReadOnly(true);

        $hctProfessor = new MHContainer('hctProfessor', array($professorLabelS, $professorIdS, $professorNameS));
        $hctProfessor->setShowLabel(true);
        $fields[]   = $hctProfessor; 

        $centerLabelS = new MText('centerLabelS', _M('Center',$module).':');
        $centerLabelS->setWidth(FIELD_CONTAINER_SIZE);

        //$centerIdS    = new MLookupTextField('centerIdS', $this->centerIdS->value, _M('Center id',$module), 10, null, null, 'centerNameS', 'academic', 'Center', null, null, true);
        $centerIdS    = new MLookupTextField('centerIdS', $this->centerIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'centerNameS', 'academic', 'Center', null, null, true);
        $centerIdS->setJsHint(_M('Enter the center code',$module));
        $validators[] = new MIntegerValidator('centerIdS');

        //$centerNameS = new MTextField('centerNameS', $this->centerNameS->value, _M('Center name',$module), 40);
        $centerNameS = new MTextField('centerNameS', $this->centerNameS->value, '', FIELD_DESCRIPTION_SIZE);
        //$centerNameS->setReadOnly(true);

        $hctCenter = new MHContainer('hctCenter', array($centerLabelS, $centerIdS, $centerNameS));
        $hctCenter->setShowLabel(true);
        $fields[]  = $hctCenter;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->professorId   = $this->professorIdS->value;
        $filters->professorName = $this->professorNameS->value;
        $filters->centerId      = $this->centerIdS->value;
        $filters->centerName    = $this->centerNameS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdProfessorCenterSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusProfessorCenter');
        $data       = $business->searchProfessorCenter($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.professorIdS.focus();');
        }

    }

}

?>
