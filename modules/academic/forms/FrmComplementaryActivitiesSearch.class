<?php

/**
 *
 * This file handles the connection and actions for acdComplementaryActivities table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [edaurdo@solis.coop.br]
 * 
 * @since
 * Class created on 05/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the scdComplementaryActivities table
 */
class FrmComplementaryActivitiesSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        //$action = MIOLO::getCurrentAction();

        $action = 'main:register:complementaryActivities:complementaryActivities';

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Complementary activity', $this->home, 'complementaryActivities-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('complementaryActivitiesIdS', $this->getFormValue('complementaryActivitiesIdS', $complementaryActivitiesIdS));

//         $complementaryActivitiesDescriptionS = new MTextField('complementaryActivitiesDescriptionS', $this->complementaryActivitiesDescriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
//         $fields[] = $complementaryActivitiesDescriptionS;
// 
//         $businessPeriod = $this->manager->getBusiness($module,'BusPeriod');
//         $periodIdS      = new MComboBox('periodIdS', $this->getFormValue('periodIdS', $data->periodIdS), _M('Period',$module), $businessPeriod->listPeriod(), true );
//         $fields[]       = $periodIdS;
// 
//         $totalHoursS = new MTextField('totalHoursS', $this->getFormValue('totalHoursS', $data->totalHoursS), _M('Total hours', $module), 13);
//         $fields[] = $totalHoursS;
//         $validators[] = new MFloatValidator('totalHoursS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');
// 
//         $totalCreditsS = new MTextField('totalCreditsS', $this->getFormValue('totalCreditsS', $data->totalCreditsS), _M('Credits total', $module), 13);
//         $fields[] = $totalCreditsS;
//         $validators[] = new MFloatValidator('totalCreditsS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');
// 
//         $degreeS = new MTextField('degreeS', $this->degreeS->value, _M('Grade',$module), 30);
//         $fields[] = $degreeS;
//         $validators[] = new MFloatValidator('degreeS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');
// 
//         $conceptS = new MTextField('conceptS', $this->conceptS->value, _M('Concept',$module), 30);
//         $fields[] = $conceptS;
	
//         $businessCC = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategory');
//         $dataCC = $businessCC->listComplementaryActivitiesCategory();
//         $complementaryActivitiesCategoryIdS = new MComboBox('complementaryActivitiesCategoryIdS', $this->getFormValue('complementaryActivitiesCategoryIdS', $data->complementaryActivitiesCategoryIdS ? $data->complementaryActivitiesCategoryIdS : ''), _M('Complementary activity category id',$module), $dataCC );
//         $fields[] = $complementaryActivitiesCategoryIdS;

        $personLabelS = new MText('personLabelS', _M('Person',$module) . ':');
        $personLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $personIdS     = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $data->personIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'limbo', 'personNameS', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
        $validators[] = new MIntegerValidator('personIdS', _M('Person',$module), 'optional');

        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS', $data->personNameS), NULL, FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Person name',$module));

        $hctPersonS = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;

        $contractLabelS = new MText('contractLabelS', _M('Contract',$module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractLabelS;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personIdS', 'personNameS', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'),
                $module, 'Contract', null, array('personId' => 'personIdS'), !$this->page->isPostBack());
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractIdS', _M('Contract',$module), 'optional');
        $flds[]           = $contractIdS;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId),'', FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Description',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

//         $enrollIdS = new MLookupTextField('enrollIdS', $this->getFormValue('enrollIdS',$data->enrollIdS), _M('Enroll id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'enrollIdS, groupId, groupName, contractIdS, contractCourseId, contractCourseVersion, contractCourseName, personIdS, personNameS',
//                 $module, 'EnrollContractPerson', null, array('contractId' => 'contractId', 'personId' => 'personId'), true);
//         $fields[] = $enrollIdS;

//         $enrollId = new MLookupTextField('enrollId', $this->getFormValue('enrollId',$data->enrollId)/*$this->enrollId->value*/, _M('Enroll id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'enrollId, groupId, groupName, contractIdS, contractCourseId, contractCourseVersion, contractCourseName, personIdS, personNameS',
//                 $module, 'EnrollContractPerson', null, array('contractId' => 'contractIdS', 'personId' => 'personIdS'), true);
//         $fields[] = $enrollId;
//         $validators[] = new MIntegerValidator('enrollId', '', 'optional');
// 
//         $groupLabel = new MText('groupLabel', _M('Offered curricular component',$module) . ':');
//         $groupLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $flds[]                = $groupLabel;
// 
//         $groupId = new MTextField('groupId', $this->getFormValue('groupId',$data->groupId),'', FIELD_ID_SIZE);
//         $groupId->setReadOnly(true);
//         $groupId->setJsHint(_M('Offered curricular component id',$module));
//         $flds[]           = $groupId;
// 
//         $groupName = new MTextField('groupName', $this->getFormValue('groupName',$data->groupName), '', FIELD_DESCRIPTION_SIZE);
//         $groupName->setReadOnly(true);
//         $groupName->setJsHint(_M('Offered curricular component name',$module));
//         $flds[]                = $groupName;
// 
//         $hctGroup = new MHContainer('hctGroup', $flds);
//         $hctGroup->setShowLabel(true);
//         $fields[]    = $hctGroup;
//         unset($flds);

    	$fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        $this->setValidators($validators);
//        $this->setValidators($validators);

        // get filters values
        $filters->complementaryActivitiesId = $this->complementaryActivitiesIdS->value;
        $filters->periodId             = $this->periodIdS->value;
        $filters->enrollId             = $this->enrollIdS->value;
        $filters->description          = $this->complementaryActivitiesDescriptionS->value;
        $filters->totalHours           = $this->totalHoursS->value;
        $filters->totalCredits         = $this->totalCreditsS->value;
        $filters->degree               = $this->degreeS->value;
        $filters->concept              = $this->conceptS->value;
        $filters->complementaryActivitiesCategoryId = $this->complementaryActivitiesCategoryIdS->value;
        $filters->personId             = $this->personIdS->value;
        $filters->contractId           = $this->contractIdS->value;

        unset($this->complementaryActivitiesIdS->value);
        
        $business   = $this->manager->getBusiness($module,'BusComplementaryActivities');
        $data       = $business->searchComplementaryActivities($filters);
        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesSearch', $filters); 

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        if ( count($data)>0 )
        {
            foreach ( $data as $resultComplementaryActivities1 )
            {
                    list ( $_complementaryActivitiesId,
                           $_contractId,
                           $_complementaryActivity,
                           $_institutionId,
                           $_complementaryActivitiesCategoryId,
                           $_complementaryActivitiesCategoryDescription,
                           $_curriculumId,
                           $_periodId,
                           $_totalHours,
                           $_totalCredits,
                           $_degree,
                           $_concept,
                           $_observation) = $resultComplementaryActivities1;

                    $grdData[] = array($_complementaryActivitiesId, $_complementaryActivity, $_totalHours, $_totalCredits, $_degree,$_concept, $_periodId, $_complementaryActivitiesCategoryId, $_complementaryActivitiesCategoryDescription, $_contractId);
            }
        }

        $grdResults->setData($grdData);
        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.personIdS.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }
}

?>
