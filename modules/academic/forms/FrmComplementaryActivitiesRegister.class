<?php

/**
 * Complementary Activities form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmComplementaryActivitiesRegister extends MForm
{
    public $addComplementaryActivities;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');

        $businessComplementaryActivities = $MIOLO->getBusiness($module, 'BusComplementaryActivities');
        $businessCurriculum              = $MIOLO->getBusiness($module, 'BusCurriculum');
        $businessPhysicalPerson          = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
        $businessContract                = $MIOLO->getBusiness($module, 'BusContract');
        $businessCurricularComponent     = $MIOLO->getBusiness($module, 'BusCurricularComponent');
        $businessComplementaryActivitiesCategoryRules = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');

        if ( $function == 'update' )
        {
            $complementaryActivitiesId   = MIOLO::_request('complementaryActivitiesId');

            $dataComplementaryActivities = $businessComplementaryActivities->getComplementaryActivities($complementaryActivitiesId);
            $dataContract                = $businessContract->getContract($dataComplementaryActivities->contractId);
            $dataPerson                  = $businessPhysicalPerson->getPhysicalPerson($dataContract->personId);
            $dataCurriculum              = $businessCurriculum->getComplementaryActivityData($dataContract->courseId, $dataContract->courseVersion, $dataContract->turnId, $dataContract->unitId);
            $data                        = $dataComplementaryActivities;

            $data->contractId            = $dataContract->contractId;
            $data->personId              = $dataContract->personId;
            $data->personName            = $dataPerson->name;
            $data->contractCourseId      = $dataContract->courseId;
            $data->contractCourseVersion = $dataContract->courseVersion;
            $data->contractUnitId        = $dataContract->unitId;
            $data->contractTurnId        = $dataContract->turnId;
            $data->curriculumId          = $dataCurriculum->curriculumId;

            $opts   = array('function'              => $function,
                            'personId'              => $data->personId,
                            'personName'            => $data->personName,
                            'contractId'            => $data->contractId,
                            'contractCourseId'      => $data->contractCourseId,
                            'contractCourseVersion' => $data->contractCourseVersion,
                            'contractTurnId'        => $data->contractTurnId,
                            'contractUnitId'        => $data->contractUnitId,
                            'curriculumId'          => $data->curriculumId);
        }
        else
        {
            $contractId            = MIOLO::_request('contractId');
            $personId              = MIOLO::_request('personId');
            $personName            = MIOLO::_request('personName');
            $contractCourseId      = MIOLO::_request('contractCourseId');
            $contractCourseVersion = MIOLO::_request('contractCourseVersion');
            $contractCourseName    = MIOLO::_request('contractCourseName');
            $contractTurnId        = MIOLO::_request('contractTurnId');
            $contractUnitId        = MIOLO::_request('contractUnitId');
            $curriculumId          = MIOLO::_request('curriculumId');

            $opts   = array('function'              => $function,
                            'personId'              => $personId,
                            'personName'            => $personName,
                            'contractId'            => $contractId,
                            'contractCourseId'      => $contractCourseId,
                            'contractCourseVersion' => $contractCourseVersion,
                            'contractCourseName'    => $contractCourseName,
                            'contractTurnId'        => $contractTurnId,
                            'contractUnitId'        => $contractUnitId,
                            'curriculumId'          => $curriculumId);
        }

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action, null, $opts));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        $fields[] = $toolBar;


        if ( in_array($function, array('update', 'delete')) )
        {
            $toolBar->disableButton('tbBtnNew');
            $complementaryActivitiesId = MIOLO::_request('complementaryActivitiesId');
            $complementaryActivitiesId = new MHiddenField('complementaryActivitiesId', $complementaryActivitiesId);
            $fields[] = $complementaryActivitiesId;
        }

        if ( $function == 'update' )
        {
            $personLabel = new MText('personLabel', _M('Person',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personId    = new MTextLabel('personId', $dataContract->personId);
            $personName  = new MTextLabel('personName', $dataPerson->name);

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]                = $contractLabel;

            $contractId            = new MTextLabel('contractId', $dataEnroll->contractId);
            $contractCourseId      = new MTextLabel('contractCourseId', $dataContract->courseId);
            $contractCourseVersion = new MTextLabel('contractCourseVersion', $dataContract->courseVersion);
            $contractCourseName    = new MTextLabel('contractCourseName', $dataContract->courseName);;

            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $fields[]    = $hctContract;

            $contractCourseId = new MHiddenField('contractCourseId', $data->contractCourseId);
            $fields[]         = $contractCourseId;

            $contractCourseVersion = new MHiddenField('contractCourseVersion', $data->contractCourseVersion);
            $fields[]              = $contractCourseVersion;

            $contractTurnId = new MHiddenField('contractTurnId', $data->contractTurnId);
            $fields[]       = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', $data->contractUnitId);
            $fields[]       = $contractUnitId;

            $curriculumId   = new MHiddenField('curriculumId', $data->curriculumId);
            $fields[]       = $curriculumId;

            $personId       = new MHiddenField('personId', $data->personId);
            $fields[]       = $personId;

            $personName     = new MHiddenField('personName', $data->personName);
            $fields[]       = $personName;

            $contractId = new MHiddenField('contractId', $data->contractId);
            $fields[]   = $contractId;
        }
        elseif ( $function == 'insert' )
        {
            $personLabel = new MText('personLabel', _M('Person',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
            $validators[] = new MIntegerValidator('personId', '', 'optional');
            $personId->setReadOnly(true);

            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), NULL, FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Person name',$module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]                = $contractLabel;

            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $flds[]           = $contractId;
            $contractId->setReadOnly(true);
            $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');

            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId),'', FIELD_ID_SIZE);
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Course',$module));
            $flds[]           = $contractCourseId;

            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', FIELD_ID_SIZE);
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Course version',$module));
            $flds[]                = $contractCourseVersion;

            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', FIELD_DESCRIPTION_SIZE);
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Description',$module));
            $flds[]             = $contractCourseName;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $contractTurnId = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId',$data->contractTurnId));
            $fields[]       = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId',$data->contractUnitId));
            $fields[]       = $contractUnitId;

            $curriculumId = new MHiddenField('curriculumId', $this->getFormValue('curriculumId',$data->curriculumId));
            $fields[]     = $curriculumId;

        }

        if ( in_array($function, array('update', 'insert')) )
        {

            //funcao java script para calcular a carga horária e total de créditos
            $this->page->addJSCode("function calcCredits(numberCreditsPerHour)
                                    {
                                        var total;

                                        totalHours   = document.getElementsByName('totalHours')[0];
                                        totalCredits = document.getElementsByName('totalCredits')[0];

                                        total              = Math.round((totalHours.value * numberCreditsPerHour)*1000)/1000;
                                        totalCredits.value = total;
                                    }");

            $businessCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');
            $curriculumData     = $businessCurriculum->getComplementaryActivityData($this->getFormValue('contractCourseId',$data->contractCourseId), $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), $this->getFormValue('contractTurnId',$data->contractTurnId), $this->getFormValue('contractUnitId',$data->contractUnitId));
            $curricularComponentData = $businessCurricularComponent->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);
            $curricularComponentData->academicCredits = $curricularComponentData->academicCredits ? $curricularComponentData->academicCredits : 1;
            $numberCreditsPerHour = SAGU::calcNumber($curricularComponentData->academicCredits . '* 1.00' .  '/' . $curricularComponentData->academicNumberHours); // Use in javaScript
            //div de mensagens de erros
            $fields[] = new MSeparator('<hr>');
            $divError = new MDiv('divError', null, null, 'align=center');
            $fields[] = $divError;
            $fields[] = new MSeparator('');

            //atividade complementar
            $complementaryActivity = new MTextField('complementaryActivity', $this->getFormValue('complementaryActivity', $data->complementaryActivity), _M('Complementary activity',$module), FIELD_DESCRIPTION_SIZE);
            $fields[]              = $complementaryActivity;
            $validators[]          = new MRequiredValidator('complementaryActivity');

            //instituicao
            $institutionLabel = new MText('institutionLabel', _M('Institution',$module) . ':');
            $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);
            $institutionLabel->setClass('m-caption m-caption-required');

            $institutionId    = new MLookupTextField('institutionId', $this->getFormValue('institutionId', $data->institutionId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionName', 'basic', 'LegalPersonInstitution', null, null, true);
            $institutionId->setJsHint(_M('Enter the institution code',$module));
            $validators[]     = new MIntegerValidator('institutionId', _M('Institution',$module), 'required');

            $institutionName  = new MTextField('institutionName', $this->institutionName->value, '', FIELD_DESCRIPTION_SIZE);
            $institutionName->setJsHint(_M('Institution name',$module));
            $institutionName->setReadOnly(true);

            $hctInstitution   = new MHContainer('hctInstitution', array($institutionLabel, $institutionId, $institutionName));
            $hctInstitution->setShowLabel(true);
            $fields[]         = $hctInstitution;

            //periodo
            $businessPeriod = $this->manager->getBusiness($module,'BusPeriod');
            $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $validators[]   = new MRequiredValidator('periodId');
            $fields[]       = $periodId;

            //total de horas
            $totalHours   = new MTextField('totalHours', $this->getFormValue('totalHours', $data->totalHours), _M('Total hours', $module), FIELD_TIME_SIZE);
            $fields[]     = $totalHours;
            $validators[] = new MFloatValidator('totalHours', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
            $totalHours->addAttribute('onChange', 'calcCredits(' . $numberCreditsPerHour . ')');

            //total de créditos
            $totalCredits = new MTextField('totalCredits', $this->getFormValue('totalCredits', $data->totalCredits), _M('Credits total', $module), FIELD_TIME_SIZE);
            $fields[]     = $totalCredits;
            //$validators[] = new MRequiredValidator('totalCredits', _M('Credits total', $module), 'optional');

            //grau
            $degree       = new MTextField('degree', $this->getFormValue('degree', $data->degree), _M('Grade', $module), FIELD_TIME_SIZE);
            $fields[]     = $degree;
            $validators[] = new MFloatValidator('degree', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');
    
            //conceito
            $businessConcept = $MIOLO->getBusiness('basic', 'BusConcept');
            $concept         = new MSelection('concept', $this->getFormValue('concept', $data->concept), _M('Concept', $module), $businessConcept->listConcept() );
            $concept->setJsHint(_M('Enter here the concept', $module));
            $fields[]        = $concept;

            //categoria da atividade complementar
            $businessCC = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategory');
            $dataCC     = $businessCC->listComplementaryActivitiesCategory($this->getFormValue('contractCourseId',$data->contractCourseId), $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), $this->getFormValue('contractTurnId',$data->contractTurnId), $this->getFormValue('contractUnitId',$data->contractUnitId));

            $complementaryActivitiesCategoryId = new MSelection('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Complementary activity category',$module), $dataCC );
            $fields[]                          = $complementaryActivitiesCategoryId;
            $validators[]                      = new MRequiredValidator('complementaryActivitiesCategoryId');

            $fields[] = new MSeparator('<hr>');

            /* INÍCIO DO GRID COM AS ATIVIDADES CADASTRADAS */

            $firsStepInForeach   = TRUE;
            $countCategoryIdsAux = 0;

            $filter1->contractId           = $contractId->value;
            $searchComplementaryActivities = $businessComplementaryActivities->searchComplementaryActivities($filter1);

            $filters5->courseId                          = $contractCourseId->value;
            $filters5->curricularComponentId             = $groupData->curriculumCurricularComponentId;
            $filters5->complementaryActivitiesCategoryId = null;

            $dataComplementaryActivitiesCategoryRules = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters5);

            //percorre as regras das atividades complementares
            if ( count($dataComplementaryActivitiesCategoryRules)>0 )
            {
                foreach ( $dataComplementaryActivitiesCategoryRules as $key2 => $value2 )
                {
                    eval('$minimumCategory' . $value2[2].' = $value2[6];');
                    eval('$maximumCategory' . $value2[2].' = $value2[7];');
                    $countCategoryIdsAux += 1;
                    $categoryIdsAux1[]    = $value2[2];
                }
            }

            //caso já existam atividades complementares registradas, percorre as mesmas
            if ( count($searchComplementaryActivities)>0 )
            {
                foreach ( $searchComplementaryActivities as $key1 => $resultComplementaryActivities1 )
                {
                    eval('$total' . $resultComplementaryActivities1[4].' += $resultComplementaryActivities1[8];');
                    $totalGeral += $resultComplementaryActivities1[8];

                    if ( ($resultComplementaryActivities1[4] != $oldCategoryId) && (!$firsStepInForeach) )
                    {
                        //Escreve o total da categoria
                        unset($totalCategoryLine);
                        $totalCategoryLine          = array('', '', '', '', '', '', '', '', ''); //8 positions
                        $totalCategoryLine[1]       = '<b>' . _M('Total of category', $module) . ' ' . $oldCategoryDesc . ' ' . _M('concluded', $module) . '</b>';
                        eval('$totalCategoryLine[2] = \'<b>\' . $total' . $oldCategoryId . ' . \'</b>\';');
                        $grdData[]                  = $totalCategoryLine;

                        eval('$aux1 = $minimumCategory' . $oldCategoryId . ';');
                        if ( strlen((string)$aux1)>0 )
                        {
                            unset($totalCategoryLine);
                            $totalCategoryLine[1]       = '<b>' . _M('Minimum hours necessary to category', $module) . ' ' . $oldCategoryDesc . '</b>';
                            eval('$totalCategoryLine[2] = \'<b>\' . $minimumCategory' . $oldCategoryId . ' . \'</b>\';');
                            $grdData[]                  = $totalCategoryLine;
                        }

                        eval('$aux1 = $maximumCategory' . $oldCategoryId.';');
                        if ( strlen((string)$aux1)>0 )
                        {
                            unset($totalCategoryLine);
                            $totalCategoryLine[1]       = '<b>' . _M('Maximum hours necessary to category', $module) . ' ' . $oldCategoryDesc . '</b>';
                            eval('$totalCategoryLine[2] = \'<b>\' . $maximumCategory'.$oldCategoryId.' . \'</b>\';');
                            $grdData[]                  = $totalCategoryLine;
                        }

                        $grdData[] = '';
                    }

                    list ( $_complementaryActivitiesId,
                           $_contractId,
                           $_complementaryActivity,
                           $_institutionId,
                           $_complementaryActivitiesCategoryId,
                           $_complementaryActivitiesCategoryDescription,
                           $_curriculumId,
                           $_periodId,
                           $_totalHours,
                           $_totalCredits,
                           $_degree,
                           $_concept,
                           $_observation) = $resultComplementaryActivities1;

                    $grdData[]        = array($_complementaryActivitiesId, $_complementaryActivity, $_totalHours, $_totalCredits, $_degree,$_concept, $_periodId, $_complementaryActivitiesCategoryId, $_complementaryActivitiesCategoryDescription, $_contractId);
                    $categoryIdsAux[] = $resultComplementaryActivities1[4];
                    $oldCategoryId    = $resultComplementaryActivities1[4];
                    $oldCategoryDesc  = $resultComplementaryActivities1[5];

                    if ( $firsStepInForeach ) //Flag para controle de não escrever na primeira passagem a categoria
                    {
                        $firsStepInForeach = FALSE;
                    }
                }
            }

            //Para somar com últimos valores do foreach acima (só entra aqui se tiver entrado no bloco anterior)
            if ( strlen((string)$oldCategoryDesc) > 0 )
            {
                $totalCategoryLine          = array('', '', '', '', '', '', '', '', ''); //8 positions
                $totalCategoryLine[1]       = '<b>' . _M('Total of category', $module) . ' ' . $oldCategoryDesc . '</b>';
                eval('$totalCategoryLine[2] = \'<b>\' . $total'.$oldCategoryId.' . \'</b>\';');
                $grdData[]                  = $totalCategoryLine;

                eval('$aux1 = $minimumCategory'.$oldCategoryId.';');
                if ( strlen((string)$aux1)>0 )
                {
                    unset($totalCategoryLine);
                    $totalCategoryLine[1]       = '<b>' . _M('Minimum hours necessary to category', $module) . ' ' . $oldCategoryDesc . '</b>';
                    eval('$totalCategoryLine[2] = \'<b>\' . $minimumCategory'.$oldCategoryId.' . \'</b>\';');
                    $grdData[]                  = $totalCategoryLine;
                }

                eval('$aux1 = $maximumCategory'.$oldCategoryId.';');
                if ( strlen((string)$aux1)>0 )
                {
                    unset($totalCategoryLine);
                    $totalCategoryLine[1]       = '<b>' . _M('Maximum hours necessary to category', $module) . ' ' . $oldCategoryDesc . '</b>';
                    eval('$totalCategoryLine[2] = \'<b>\' . $maximumCategory' . $oldCategoryId . ' . \'</b>\';');
                    $grdData[]                  = $totalCategoryLine;
                }

                $grdData[]         = '';
                $totalCategoryLine = array('', '', '', '', '', '', '', '', ''); //8 positions
            }

            //percorre as categorias das atividades caso não exista nenhum registro de atividade complementar
            for ( $x = 0; $x<$countCategoryIdsAux; $x++ )
            {
                $flagIsTheSame = false;

                //verifica se teve atividade, neste caso não entra no looping abaixo
                for ( $y=0 ; $y<count($categoryIdsAux); $y++ )
                {
                    if ( $categoryIdsAux1[$x] == $categoryIdsAux[$y] )
                    {
                        $flagIsTheSame = true;
                        break;
                    }
                }

                if ( $flagIsTheSame == false )
                {
                    $filters5->complementaryActivitiesCategoryId = $categoryIdsAux1[$x];
                    $dataComplementaryActivitiesCategoryRulesAux = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters5);

                    $totalCategoryLine    = array('', '', '', '', '', '', '', '', ''); //8 positions
                    $totalCategoryLine[1] = '<b>' . _M('Minimum hours necessary to category', $module) . ' ' . $dataComplementaryActivitiesCategoryRulesAux[0][3] . '</b>';
                    $totalCategoryLine[2] = '<b>' . $dataComplementaryActivitiesCategoryRulesAux[0][6] . '</b>';
                    $grdData[]            = $totalCategoryLine;

                    unset($totalCategoryLine);

                    $totalCategoryLine[1] = '<b>' . _M('Maximum hours necessary to category', $module) . ' ' . $dataComplementaryActivitiesCategoryRulesAux[0][3] . '</b>';
                    $totalCategoryLine[2] = '<b>' . $dataComplementaryActivitiesCategoryRulesAux[0][7] . '</b>';
                    $grdData[]            = $totalCategoryLine;
                    $grdData[]            = '';
                    $totalCategoryLine    = array('', '', '', '', '', '', '', '', ''); //8 positions
                }
            }

            //total de horas já realizado
            $totalCategoryLine[1] = '<b>' . _M('Total of complementary activities concluded', $module) . '</b>';
            if ( ! ($totalGeral > 0) )
            {
                $totalGeral = 0;
            }
            $totalCategoryLine[2] = '<b>' . $totalGeral . '</b>';
            $grdData[]            = $totalCategoryLine;

            //total de horas que faltam
            if ( is_object($curricularComponentData) && isset($totalGeral) )
            {
                $faultComplementaryActivities = SAGU::calcNumber($curricularComponentData->academicNumberHours . '-' . $totalGeral);
            }
            $faultCompActivHidden = new MHiddenField('faultCompActivHidden', $faultComplementaryActivities);
            $fields[]             = $faultCompActivHidden;
            $totalCategoryLine    = array('', '', '', '', '', '', '', '', ''); //8 positions
            $totalCategoryLine[1] = '<b><font color=\'red\'>' . _M('Complementary activities fault', $module) . '</font></b>';
            $totalCategoryLine[2] = '<b><font color=\'red\'>' . $faultComplementaryActivities  . '</font></b>';
            $grdData[]            = $totalCategoryLine;

            //total de horas necessárias a serem realizadas
            $totalCategoryLine    = array('', '', '', '', '', '', '', '', ''); //8 positions
            $totalCategoryLine[1] = '<b>' . _M('Total of complementary activities necessary', $module) . '</b>';
            $totalCategoryLine[2] = '<b>' . $curricularComponentData->academicNumberHours . '</b>';
            $grdData[]            = $totalCategoryLine;
            $fields[]             = new MHiddenField('academicNumberHours', $curricularComponentData->academicNumberHours);

            //carrega o grid
            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesSearch'); 
            $grdResults->setData($grdData);
            if ( $function == 'insert' )
            {
                $fields[] = $grdResults;
                $fields[] = new MSeparator('<hr>');
            }
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.complementaryActivity.focus();');

    }

    public function tbBtnNew_click($sender = null)
    {
    }

    public function tbBtnSearch_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $opts   = array('function' => 'search');
        $action = 'main:register:complementaryActivities:complementaryActivities';
        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $action  = 'main:register:complementaryActivities:complementaryActivitiesRegister';
        $opts   = array('event'                     => 'tbBtnDelete_confirm',
                        'function'                  => 'delete',
                        'contractId'                => MIOLO::_request('contractId'),
                        'complementaryActivitiesId' => MIOLO::_request('complementaryActivitiesId')
                       );
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        $action  = 'main:register:complementaryActivities:complementaryActivities';
        $opts   = array('contractIdS'               => MIOLO::_request('contractId'),
                        'function'                  => 'search'
                       );
        $gotoNo  = $MIOLO->getActionURL( $module, $action, null, $opts );

        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO                      = MIOLO::getInstance();
        $module                     = MIOLO::getCurrentModule();
        $action                     = MIOLO::getCurrentAction();

        $business                   = $MIOLO->getBusiness($module, 'BusComplementaryActivities');
        $businessContract           = $MIOLO->getBusiness($module, 'BusContract');

        $data                       = $this->getTypesData();
        $getComplementaryActivities = $business->getComplementaryActivities($data->complementaryActivitiesId);
        $getCotract                 = $businessContract->getContract(MIOLO::_request('contractId'));
        $ok                         = $business->deleteComplementaryActivities($data->complementaryActivitiesId);

        if ( $ok )
        {
            $action = 'main:register:complementaryActivities:complementaryActivities';
            $opts = array ( 'contractIdS' => $getCotract->contractId );
            $msg  = MSG_RECORD_DELETED;
            $goto = $MIOLO->getActionURL($module, $action, NULL, $opts);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $action  = 'main:register:complementaryActivities:complementaryActivities';
            $opts    = array ( 'contractIdS' => $getCotract->contractId );
            $caption = _M('Error', $module);
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = $MIOLO->getActionURL($module, $action, NULL, $opts);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $faultCompActivHidden = MIOLO::_request('faultCompActivHidden');
        $academicNumberHours  = MIOLO::_request('academicNumberHours');

        $data = $this->getTypesData();

        $businessComplementaryActivities              = $MIOLO->getBusiness($module, 'BusComplementaryActivities');
        $businessComplementaryActivitiesCategoryRules = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');
        $businessContract                             = $MIOLO->getBusiness($module, 'BusContract');

        $dataContract                                 = $businessContract->getContract($data->contractId);

        $filters1->contractId                         = $data->contractId;
        $dataComplementaryActivities                  = $businessComplementaryActivities->searchComplementaryActivities($filters1);

        $filters2->courseId                           = $dataContract->courseId;
        $filters2->courseVersion                      = $dataContract->courseVersion;
        $filters2->turnId                             = $dataContract->turnId;
        $filters2->unitId                             = $dataContract->unitId;
        $dataComplementaryActivitiesCategoryRules     = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters2);

        //pega o total de horas concluihdas
        if ( count($dataComplementaryActivities)>0 )
        {
            foreach ( $dataComplementaryActivities as $row1 )
            {
                if ( $function == 'update' && $row1[0] == $data->complementaryActivitiesId )
                {
                    $totalHoursConclued += $data->totalHours;
                }
                else
                {
                    $totalHoursConclued += $row1[8];
                }
            }
        }

        if ( $function == 'update' )
        {
            $dataComplementaryActivitiesAux = $businessComplementaryActivities->getComplementaryActivities($data->complementaryActivitiesId);
            $data->contractId               = $dataComplementaryActivitiesAux->contractId;
        }

        //Verifica se já existem atividades complementares para este contrato
        if ( is_array($dataComplementaryActivities) )
        {
            foreach ( $dataComplementaryActivities as $key1 => $value1 )
            {
                if ( $function == 'update' && $value1[0] == $data->complementaryActivitiesId )
                {
                    eval('$totalCategory' . $value1[4].' += $data->totalHours ;');
                    $totalGeral += $data->totalHours ;

                }
                else
                {
                    eval('$totalCategory' . $value1[4].' += $value1[8] ;');
                    $totalGeral += $value1[8] ;
                }
            }
        }

        //Verifica se existem regras para atividades complementares por categoria
        if ( is_array($dataComplementaryActivitiesCategoryRules) )
        {
            foreach ( $dataComplementaryActivitiesCategoryRules as $key2 => $value2 )
            {
                eval('$minimumCategory' . $value2[2].' = $value2[6];');
                eval('$maximumCategory' . $value2[2].' = $value2[7];');

                $categoryIds[] = $value2[2];
            }
        }

        //Verificar aqui se existe choque com o que quero inserir
        eval('$aux1 = $totalCategory' . $data->complementaryActivitiesCategoryId.';');
        eval('$aux2 = $maximumCategory' . $data->complementaryActivitiesCategoryId.';');

        if ( isSet($aux1) && isSet($data->totalHours) && isSet($aux2) )
        {
            $isSetVariables = true;
        }
        else
        {
            $isSetVariables = false;
        }

        if ( $function == 'insert' )
        {
            if (($aux1 + $data->totalHours) > $aux2)
            {
                $isMorThatMaximum = true;
            }
            else
            {
                $isMorThatMaximum = false;
            }
        }
        elseif ( $function == 'update' )
        {
            if ( $aux1 > $aux2 )
            {
                $isMorThatMaximum = true;
            }
            else
            {
                $isMorThatMaximum = false;
            }
        }

        if ( ($isSetVariables && $isMorThatMaximum) || ($isMorThatMaximum && $aux2))
        {
            //Tem problema, pois irá ultrapassar o máximo
            $msg     = _M('This complementary activity can not be registered in the selected category because it will exceed the maximum hours allowed.', $module);
            $lblMsg1 = new MText('lblMsg1', $msg);
            $lblMsg1->color = 'red';

            $cntErrors      = new MVContainer('cntErrors', array(new Separator(''), $lblMsg1, new Separator('')));
            $this->divError->addControl($cntErrors);
            $flagFaultRequired = true;
        }
        elseif ( ((($totalHoursConclued + $data->totalHours ) > $academicNumberHours) && $function ==  'insert') || ( ($totalHoursConclued > $academicNumberHours) && $function == 'update' ) )
        {
            //Irah ultrapassar maximo da carga horahria total
            $msg     = _M('This complementary activities not is possible insert, because the maximum to complementary activities will be exceed', $module) . '.';
            $lblMsg1 = new MText('lblMsg1', $msg);
            $lblMsg1->color = 'red';

            $cntErrors      = new MVContainer('cntErrors', array(new Separator(''), $lblMsg1, new Separator('')));
            $this->divError->addControl($cntErrors);
            $flagFaultRequired = true;
        }
        else
        {
            if ( $function == 'update' )
            {
                $ok  = $businessComplementaryActivities->updateComplementaryActivities($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok      = $businessComplementaryActivities->insertComplementaryActivities($data);
                $msg     = MSG_RECORD_INSERTED;
                $infoMsg = $msg;
            }

            if ( $ok )
            {

                //Código para enviar e-mail para aluno
                $businessEmail = $MIOLO->getBusiness('basic', 'BusEmail');
                $getEmail      = $businessEmail->getEmail(ACD_COMPLEMENTARY_ACTIVITIES_CONFIRMED_EMAIL_ID);

                $businessContract = $MIOLO->getBusiness($module, 'BusContract');
                $contractData     = $businessContract->getContract($data->contractId);

                $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
                $getPerson              = $businessPhysicalPerson->getPhysicalPerson($contractData->personId);

                unset($dataComplementaryActivities);
                $filters1->contractId        = $data->contractId;
                $dataComplementaryActivities = $businessComplementaryActivities->searchComplementaryActivities($filters1);

                $msg1 = _M('Id', $module);
                $msg2 = _M('Category', $module);
                $msg3 = _M('Complementary activity', $module);
                $msg4 = _M('Quantity exploitation hours', $module);
                $msg5 = _M('Quantity exploitation credits', $module);
                $msg6 = _M('Note', $module);
                $msg7 = _M('Concept', $module);
                $msg8 = _M('Period', $module);

                $optionsAux .= "<table border=\"1\"><tr>\n" .
                    "<td><b>".$msg1."</b></td>" .
                    "<td><b>".$msg2."</b></td>" .
                    "<td><b>".$msg3."</b></td>" .
                    "<td><b>".$msg4."</b></td>" .
                    "<td align=\"center\"><b>".$msg5."</b></td>" .
                    "<td align=\"center\"><b>".$msg6."</b></td>" .
                    "<td align=\"center\"><b>".$msg7."</b></td></tr>";
                    "<td align=\"center\"><b>".$msg8."</b></td></tr>";

                $faultCompActivHidden = $academicNumberHours;

                for ($x=0; $x < count($dataComplementaryActivities); $x++)
                {
                    eval('$cod1 = $dataComplementaryActivities['.$x.'][0];');
                    eval('$cod2 = $dataComplementaryActivities['.$x.'][5];');
                    eval('$cod3 = $dataComplementaryActivities['.$x.'][2];');
                    eval('$cod4 = $dataComplementaryActivities['.$x.'][8];');
                    eval('$cod5 = $dataComplementaryActivities['.$x.'][9];');
                    eval('$cod6 = $dataComplementaryActivities['.$x.'][10];');
                    eval('$cod7 = $dataComplementaryActivities['.$x.'][11];');
                    eval('$cod8 = $dataComplementaryActivities['.$x.'][7];');

                    $optionsAux .= "<tr>\n" .
                        "<td><Font face=\"Verdana\" size=\"2\"><b>$cod1</b></td>" .
                        "<td><Font face=\"Verdana\" size=\"1\">$cod2</b></td>" .
                        "<td><Font face=\"Verdana\" size=\"1\">$cod3</b></td>" .
                        "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod4</td>" .
                        "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod5</td>" .
                        "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod6</td>" .
                        "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod7</td></tr>" ;
                        "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod8</td></tr>" ;

                    eval('$faultCompActivHidden -= $dataComplementaryActivities['.$x.'][8];');
                }

                $optionsAux .= "</table>";

                $searchData    = array("\$PERSONNAME",
                                       "\$CURRENTDATE",
                                       "\$FAULTTOTOTAL");
                $replaceData   = array($contractData->personName,
                                       date('d/m/Y'),
                                       $faultCompActivHidden);
                $searchData[]  = "\$LISTCATEGORYHOURS";
                $replaceData[] = $optionsAux;

                $subjectNew = str_replace($searchData, $replaceData, $getEmail->subject);
                $subject    = $subjectNew;
                $body       = "<html><head><title>".$subjectNew."</title></head>" ;
                $body      .= "<body>";
                $body      .= str_replace($searchData, $replaceData, $getEmail->body);
                $body      .= "</body></html>";
                $recipient  = $contractData->personName . ' <' . $getPerson->email . '>';
                $from       = str_replace($searchData, $replaceData, $getEmail->from);
                $host       = strtolower($getEmail->server);

                $fp = fsockopen($host, $getEmail->port);

                if ( $fp )
                {
                    fputs($fp,"HELO ".$host."\n" .
                              "MAIL FROM: $from\n" .
                              "RCPT TO: {$getPerson->email}\n" .
                              "DATA\n" .
                              "TO: {$getPerson->email}\n" .
                              "FROM: $from\n" .
                              "SUBJECT: $subject\n" .
                              "MIME-Version: {$getEmail->mimeVersion}\n" .
                              "Content-Type: {$getEmail->contentType}\n" .
                              "$body\n" .
                              ".\n" .
                              "QUIT\n");
    
                    fclose($fp);
                }

                //confirmação de atividade complementar na tela e redirecionamento para consulta
                if ( $function == 'update' )
                {
                    $opts   = array('function'    => 'search',
                                    'contractIdS' => $data->contractId);
                    $action  = 'main:register:complementaryActivities:complementaryActivities';
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    $opts   = array('function'              => $function,
                                    'personId'              => $data->personId,
                                    'personName'            => $data->personName,
                                    'contractId'            => $data->contractId,
                                    'contractCourseId'      => $data->contractCourseId,
                                    'contractCourseVersion' => $data->contractCourseVersion,
                                    'contractCourseName'    => $data->contractCourseName,
                                    'contractTurnId'        => $data->contractTurnId,
                                    'contractUnitId'        => $data->contractUnitId,
                                    'curriculumId'          => $data->curriculumId);
                    $action  = 'main:register:complementaryActivities:complementaryActivitiesRegister';
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

                    $opts   = array('function'    => 'search',
                                    'contractIdS' => $data->contractId);
                    $action  = 'main:register:complementaryActivities:complementaryActivities';
                    $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);

                    $caption = _M('Question',$module);

                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.', $module). ' ' . $infoMsg . '. ';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdComplementaryActivities();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->complementaryActivity = $this->complementaryActivity->value;
        $data->contractId            = $this->contractId->value;
        $data->personId              = MIOLO::_request('personId');
        $data->personName            = MIOLO::_request('personName');
        $data->contractCourseId      = MIOLO::_request('contractCourseId');
        $data->contractCourseVersion = MIOLO::_request('contractCourseVersion');
        $data->contractCourseName    = MIOLO::_request('contractCourseName');
        $data->contractTurnId        = MIOLO::_request('contractTurnId');
        $data->contractUnitId        = MIOLO::_request('contractUnitId');

        return $data;
    }

}

?>
