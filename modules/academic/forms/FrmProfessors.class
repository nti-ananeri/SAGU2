<?php

/**
 * Boletim document form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 17/03/2008
 *
 * \b Organization: \n
 * iSolution - Solucoes em TI \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2008 iSolution \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmProfessors extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Professors', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        //$toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert(_M('Professors',$module), $this->home, 'document-16x16.png', true);
        }
        //fim favoritos
        $fields[]   = $toolBar;

        //Period
        $busPeriod     = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodValue   = is_array($this->getFormValue('periodId', $this->periodId->value)) ? $this->getFormValue('periodId',$this->periodId->value) : array(CURRENT_PERIOD_ID);

        $periodIdLabel = new MText('periodIdLabel',  _M('Period', 'academic') . ':');
        $periodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $periodIdLabel->setClass('m-caption m-caption-required');

        $periodId      = new MMultiSelection('periodId', $periodValue, null, $busPeriod->listPeriod(), false, null, 10 );

        $fields[]      = new MHContainer('hctPeriodId', array($periodIdLabel, $periodId));

        $validators[]  = new MRequiredValidator('periodId', _M('Period', $module), 'required');

        $fields[]      = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $periodId = is_array($this->periodId->value) ? $this->periodId->value : array($this->periodId->value);

        SAGU::returnAsFile(_M('Professors', $module) . '_' . date(dmY) . '.txt', $data, 'text/txt');
    }

    //Preenche com espaços à direita
    function formatString($value, $len)
    {
        return sprintf("%-{$len}.{$len}s", $value);
    }

    //Preenche com zeros "0" à esquerda
    function formatNumber($value, $len)
    {
        return sprintf("%0{$len}.{$len}d", $value);
    }
}

?>
