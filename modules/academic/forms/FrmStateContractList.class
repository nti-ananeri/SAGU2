<?php

/**
 * Form to choice the enroll book report option
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 09/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmStateContractList extends MForm
{
    private $home;
    public  $filters;
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home   = "main:report:stateContractList";

        parent::__construct(_M('State contract listing', $module));

        
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('State contract listing', $this->home, 'construction-16x16.gif', true);
        }
        //fim favoritos
        //$toolBar->disableButton('tbBtnBookmark');
        
        $fields[] = $toolBar;
        $fields[] = new MSeparator('');
            
        //$dperiodId      = strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID;
        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', /*$dperiodId*/$this->getFormValue('periodId', $data->periodId), _M('Period',$module), $businessPeriod->listPeriod() );
        //$validators[]   = new MRequiredValidator('periodId');
        $fields[]      = $periodId;
        
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $this->addValidator(new MDateDMYValidator('beginDate', '', 'optional'));
        $fields[] = $beginDate;
        
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $this->addValidator(new MDateDMYValidator('endDate', '', 'optional'));
        $fields[] = $endDate;
                    
        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), true);
        $courseId->setJsHint(_M('Enter the course code',$module));
        //$validators[]  = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]     = $hctCourse;
        
        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        //$validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;
        
        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        //$validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
        
        $busStateContract = $MIOLO->getBusiness($module, 'BusStatesContract');
        $stateContractId  = new MComboBox('stateContractId', $this->getFormValue('stateContractId', $data->stateContractId), _M('State contract', $module), $busStateContract->listStatesContract());
        $fields[]   = $stateContractId;
                                      
        $btn1     = new MButton('btnList', _M('List', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        $this->setValidators($validators);
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user clicks list button
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusStateContractList');
        $data     = $this->getData();
        
        $listData = $business->listStateContractPupils($data);
                
        //$title    = _M('Graduates final average', $module);
        
        if (count($listData) > 0)
        {
            $columns[] = "<div style=\"text-align: center;\">" . _M('Person id', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Residential phone', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Work phone', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Cellular phone', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Actual situation', $module) . "</div>";
            
            foreach ($listData as $gridData)
            {
                $tableRaw = new MTableRaw($gridData->title, $gridData->data, $columns);
                $tableRaw->setAlternate(true);
                $this->addField($tableRaw);
                /*$this->addField(new Separator());
                
                $grdResults = $MIOLO->getUI()->getGrid($module,'GrdStateContractList',$data);
                $grdResults->setData($gridData->data);
                $grdResults->setFooter(_M('Total', $module) . ': ' . count($gridData->data));
                $grdResults->setTitle($gridData->title);
                $this->addField($grdResults);*/
            }
        }
        else
        {
            $text = new MText('text', _M('The search returned no data. Certify that you are setting the filters correctly!', $module) . '<br>' . _M('Tip: you must set a course or a contract state at least.', $module), 'red');
            $this->addField($text);
            $this->addField(new MSeparator());
        }
    }
}

?>
