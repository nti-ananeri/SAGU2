<?php

/**
 * Possibilities and material of enroll form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmPossibilitiesAndMaterialOfEnrollAfterGraduation extends MForm
{

    var $business;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusPossibilitiesAndMaterialOfEnrollAfterGraduation');
        parent::__construct(_M('Pupil\'s enroll material', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $this->setAction('main');

        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');

        if ( (strlen((string)$function) == 0) || ($function == null) )
        {
            $fields[]  = new MHiddenField('limbo1');

            $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
            $period         = $businessPeriod->listPeriod();

            $contractPersonLabel1 = new MText('contractPersonLabel1', _M('Person',$module) . ':');
            $contractPersonLabel1->setWidth(FIELD_CONTAINER_SIZE);
            $contractPersonLabel1->setClass('m-caption m-caption-required');

            $contractPersonId1 = new MLookupTextField('contractPersonId1', $this->getFormValue('contractPersonId1'), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId1', 'contractPersonId1', 'contractPersonName1', 'contractCourseId1', 'contractCourseName1', 'contractCourseVersion1', 'contractTurnId1', 'limbo1', 'contractUnitId1'), $module, 'PersonContract', null, array('personId' => 'contractPersonId1'), true);
            $contractPersonId1->setJsHint(_M('Enter the person code',$module));
            $validators[]     = new MRequiredValidator('contractPersonId1', _M('Person',$module), 'required');

            $contractPersonName1 = new MTextField('contractPersonName1', $this->getFormValue('contractPersonName1'), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
            $contractPersonName1->setReadOnly(true);

            $hctPerson1 = new MHContainer('hctPerson1', array($contractPersonLabel1, $contractPersonId1,  $contractPersonName1));
            $hctPerson1->setShowLabel(false);
            $fields[]   = $hctPerson1;

            $contractLabel1 = new MText('contractLabel1', _M('Contract',$module) . ':');
            $contractLabel1->setWidth(FIELD_CONTAINER_SIZE);
            $contractLabel1->setClass('m-caption m-caption-required');

            $contractId1 = new MLookupTextField('contractId1', $this->getFormValue('contractId1'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId1', 'contractPersonName1', 'contractCourseId1', 'contractCourseName1', 'contractCourseVersion1', 'contractTurnId1', 'limbo1', 'contractUnitId1'), $module, 'Contract', null, array('personId' => 'contractPersonId1'), true);
            $contractId1->setJsHint(_M('Enter the contract code',$module));
            $validators[] = new MRequiredValidator('contractId1', _M('Contract',$module), 'required');

            $contractCourseId1 = new MTextField('contractCourseId1', $this->getFormValue('contractCourseId1'), _M('Course',$module), FIELD_ID_SIZE - 2);
            $contractCourseId1->setReadOnly(true);

            $contractCourseVersion1 = new MTextField('contractCourseVersion1', $this->getFormValue('contractCourseVersion1'), _M('Version',$module), FIELD_ID_SIZE - 4);
            $contractCourseVersion1->setReadOnly(true);

            $contractCourseName1 = new MTextField('contractCourseName1', $this->getFormValue('contractCourseName1'), _M('Description',$module), FIELD_DESCRIPTION_SIZE - 6);
            $contractCourseName1->setReadOnly(true);

            $hctContract1 = new MHContainer('hctContract1', array($contractLabel1, $contractId1, $contractCourseId1, $contractCourseVersion1, $contractCourseName1));
            $hctContract1->setShowLabel(false);
            $fields[]           = $hctContract1;

            $contractTurnId1 = new MHiddenField('contractTurnId1');
            $fields[]        = $contractTurnId1;

            $contractUnitId1 = new MHiddenField('contractUnitId1');
            $fields[]        = $contractUnitId1;

            $businessPeriod1 = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId2 = new MComboBox('periodId2', strlen((string)$this->getFormValue('periodId2', $data->periodId2))>0 ? $this->getFormValue('periodId2', $data->periodId2) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod1->listPeriod(), true );
            $fields[] = $periodId2;

            $learningPeriodIdLabel1 = new MText('learningPeriodIdLabel1', _M('Learning period',$module) . ':');
            $learningPeriodIdLabel1->setWidth(FIELD_CONTAINER_SIZE);
            $learningPeriodIdLabel1->setClass('m-caption m-caption-required');

            $formationLevelIdAux = new MHiddenField('formationLevelIdAux', GRADUATE_FORMATION_LEVEL_ID);
            $fields[] = $formationLevelIdAux;

            $learningPeriodId1 = new MLookupTextField('learningPeriodId1', $this->getFormValue('learningPeriodId1'), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('limbo1', 'limbo1', 'limbo1', 'limbo1', 'limbo1', 'learningPeriodName1'), $module, 'LearningPeriod', null, array('periodId' => 'periodId2', 'courseId' => 'contractCourseId1', 'courseVersion' => 'contractCourseVersion1', 'turnId' => 'contractTurnId1', 'unitId' => 'contractUnitId1', 'formationLevelId' => 'formationLevelIdAux'), true);
            $learningPeriodId1->setJsHint(_M('Enter the learning period code',$module));
            $validators[]      = new MRequiredValidator('learningPeriodId1', _M('Learning period',$module), 'required');

            $learningPeriodName1 = new MTextField('learningPeriodName1', $this->getFormValue('learningPeriodName1'), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
            $learningPeriodName1->setReadOnly(true);

            $hctLearningPeriod1 = new MHContainer('hctLearningPeriod1', array($learningPeriodIdLabel1, $learningPeriodId1, $learningPeriodName1));
            $hctLearningPeriod1->setShowLabel(false);
            $fields[]           = $hctLearningPeriod1;

            $fields[] = new Separator ('');

            $stampLabel          = new MText('stampLabel', _M('Stamp',$module) . ':');
            $stampLabel->setWidth(FIELD_CONTAINER_SIZE);
//             $stampLabel->setClass('m-caption m-caption-required');

            $stampId        = new MLookupTextField('stampId', $this->getFormValue('stampId'), null, FIELD_ID_SIZE, null, null, array('stampId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);

            $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName'), null, 20);
            $employeeName->setJsHint(_M('Enter the employee function',$module));
            $employeeName->setReadOnly(true);

//             $stampLabel2         = new MText('stampLabel2', _M('Function',$module) . ':');

            $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription'), null, 20);
            $functionDescription->setJsHint(_M('Enter the employee function',$module));
            $functionDescription->setReadOnly(true);

            //$stampLabel3         = new MText('stampLabel3', _M('Sector',$module) . ':');

            $sector              = new MTextField('sector', $this->getFormValue('sector'), null, 20);
            $sector->setJsHint(_M('Enter the employee sector',$module));
            $sector->setReadOnly(true);

            $hctStamp            = new MHContainer('hctStamp', array($stampLabel, $stampId, $employeeName, /*$stampLabel2,*/ $functionDescription, /*$stampLabel3,*/ $sector));
            $hctStamp->setShowLabel(false);
            $fields[]            = $hctStamp;


            $txtMessage = _M('Click in the button below to generate the enroll material of selected pupil', $module) . ':';
            $lblAct     = new MText('lblAct', $txtMessage);
            $fields[]            = $lblAct;

            $btnAll     = new MButton('btnAll',_M('Print report', $module));
            $btnAll->attachEventHandler('click', 'tbBtnPrint_click');
            $fields[]            = $btnAll;

//             $divAct            = new MHContainer ('divAct', array($lblAct, $btnAll), 'vertical');
//             $divAct->showLabel = true;
//             $divAct->width     = '90%';

//             $bsg1               = new MVContainer('bsg1', $flds, 'vertical');
//             $bsg1->setShowLabel = true;
//             $bsg1->width        = '60%';
// 
//             $hct1               = new MHContainer('hct1',array($bsg1, $divAct));
//             $hct1->setShowLabel = true;
            $fields[] = new Separator ('');
//            $fields[] = $divAct;
        }

        $fields[] = new Separator('');

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }

        $this->page->setAction($MIOLO->getActionURL($module, $action));
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user click in the button 'print'
     **/
    public function tbBtnPrint_click ($sender=NULL)
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusPossibilitiesAndMaterialOfEnroll');

        $data = array (
                        contractId            => MIOLO::_request('contractId1'),
                        contractCourseId      => MIOLO::_request('contractCourseId1'),
                        contractCourseVersion => MIOLO::_request('contractCourseVersion1'),
                        contractTurnId        => MIOLO::_request('contractTurnId1'),
                        contractUnitId        => MIOLO::_request('contractUnitId1'),
                        contractPersonId      => MIOLO::_request('contractPersonId1'),
                        learningPeriod        => MIOLO::_request('learningPeriodId1'),
                        periodId              => MIOLO::_request('periodId2'),
                        employeeName          => MIOLO::_request('employeeName'),
                        functionDescription   => MIOLO::_request('functionDescription'),
                        sector                => MIOLO::_request('sector')
                      );

        $MIOLO->getClass($module, 'RptEnrollMaterialAfterGraduation');

        $report = new RptEnrollMaterialAfterGraduation($data);
    }

}

?>
