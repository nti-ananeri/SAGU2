<?php

/**
 * Professor center form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a professorCenter
 **/
class FrmProfessorCenter extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $centerIdOld    = $_GET['centerId']    ? $_GET['centerId']    : $_POST['centerIdOld'];
            $professorIdOld = $_GET['professorId'] ? $_GET['professorId'] : $_POST['professorIdOld'];
            $beginDateOld   = $_GET['beginDate']   ? $_GET['beginDate']   : $_POST['beginDateOld'];

            $fields[]  = new MTextLabel('centerId', $centerIdOld, _M('Center id',$module));
            $fields[]  = new MTextLabel('professorId', $professorIdOld, _M('Professor id',$module));
            $fields[]  = new MTextLabel('beginDate', $beginDateOld, _M('Begin date',$module));

            $fields[] = new MHiddenField('centerIdOld', $centerIdOld);
            $fields[] = new MHiddenField('professorIdOld', $professorIdOld);
            $fields[] = new MHiddenField('beginDateOld', $beginDateOld);

            $business = $MIOLO->getBusiness($module,'BusProfessorCenter');
            $data     = $business->getProfessorCenter($professorIdOld, $centerIdOld, $beginDateOld);
        }
        else
        {
            $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
            $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
            $professorLabel->setClass('m-caption m-caption-required');
    
            $professorId  = new MLookupTextField('professorId', $this->getFormValue('professorId',$data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
            $professorId->setJsHint(_M('Enter the professor code',$module));
            $validators[] = new MIntegerValidator('professorId', _M('Professor', $module), 'required');
    
            $professorName = new MTextField('professorName', $this->professorName->value, '', FIELD_DESCRIPTION_SIZE);
            $professorName->setReadOnly(true);
    
            $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
            $hctProfessor->setShowLabel(true);
            $fields[]   = $hctProfessor;
    
            $centerLabel = new MText('centerLabel', _M('Center',$module).':');
            $centerLabel->setWidth(FIELD_CONTAINER_SIZE);
            $centerLabel->setClass('m-caption m-caption-required');
    
            $centerId     = new MLookupTextField('centerId', $this->getFormValue('centerId',$data->centerId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'centerName', 'academic', 'Center', null, null, true);
            $centerId->setJsHint(_M('Enter the center code',$module));
            $validators[] = new MIntegerValidator('centerId', _M('Center', $module), 'required');
    
            $centerName   = new MTextField('centerName', $this->centerName->value, '', FIELD_DESCRIPTION_SIZE);
            $centerName->setReadOnly(true);
    
            $hctCenter = new MHContainer('hctCenter', array($centerLabel, $centerId, $centerName));
            $hctCenter->setShowLabel(true);
            $fields[]  = $hctCenter;


            $beginDateLabel = new MText('beginDateLabel', _M('Begin date',$module).':');
            $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $beginDateLabel->setClass('m-caption m-caption-required');

            $beginDate    = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
            $beginDate->setValidator(new MDateDMYValidator('beginDate', _M('Begin date', $module), 'required'));

            $hctBeginDate = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
            $hctBeginDate->setShowLabel(true);
            //$fields[]  = $hctBeginDate;

            //$validators[] = new MDateDMYValidator('beginDate', _M('Begin date', $module), 'required');
            $fields[]     = $beginDate;
        }

        if ( in_array($function,array('update','delete')) )
        {
            $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
            $validators[] = new MDateDMYValidator('endDate','','optional');
            $fields[]     = $endDate;
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->page->onLoad('document.' . $this->name . '.zipCode.focus();');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'       => 'tbBtnDelete_confirm',
                        'function'    => 'delete',
                        'professorId' => MIOLO::_request('professorId'),
                        'centerId'    => MIOLO::_request('centerId'),
                        'beginDate'   => MIOLO::_request('beginDate') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusProfessorCenter');
        $ok = $business->deleteProfessorCenter($this->professorId->value, $this->centerId->value, $this->beginDate->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusProfessorCenter');

        if ( $function == 'update' )
        {
            $ok  = $business->updateProfessorCenter($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertProfessorCenter($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array( 'professorIdS' => $data->professorId/*,
                           'centerIdS'    => $data->centerId,
                           'beginDateS'   => urlencode($data->beginDate) */);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdProfessorCenter();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->professorIdOld = $this->professorIdOld->value;
        $data->centerIdOld    = $this->centerIdOld->value;
        $data->beginDateOld   = $this->beginDateOld->value;

        return $data;
    }
}

?>
