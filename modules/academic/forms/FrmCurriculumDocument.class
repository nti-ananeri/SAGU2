<?php

/**
 *
 * This file handles the connection and actions for acdCurriculum table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurriculum table
 */
class FrmCurriculumDocument extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnReset');
        $toolBar->hideButton('tbBtnBack');
        
        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Curriculum', $this->home, 'document-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;


        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
       // $personLabel->setClass('m-caption m-caption-required');
        $flds[]      = $personLabel;
        //Contract
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName','courseId','courseName','courseVersion','turnId','turnName','unitId','unitName'), $module, 'PersonContract', null, array('personId' => 'personId', 'personName' => 'personName'), true);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $flds[]       = $personId;
        
		$personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

		$contractId = new MHiddenField('contractId',$this->contractId->value,_M('Contract',$module));
        $flds[]  = $contractId;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->courseId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion,courseName,unitId,limbo,turnId', $module, 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId' ), true);
        $courseId->setJsHint(_M('Enter the course code', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Course name',$module));
        //$courseName->setReadOnly(true);

        $courseVersion = new MTextField('courseVersion', $this->courseVersion->value, '', FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Enter the course version',$module));
        $courseVersion->setReadOnly(true);

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;
        //$validators[] = new MRequiredValidator('courseId', _M('Course id', $module));
        //$validators[] = new MRequiredValidator('courseVersion', _M('Course version', $module));

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');
        $businessTurn = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId   = new MSelection('turnId',
                                    $this->getFormValue('turnId',$data->turnId),
                                    NULL,
                                    $businessTurn->listTurn());
 
        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;
        //$validators[] = new MRequiredValidator('turnId', _M('Turn', $module));

        //Unit
        $unitLabel = new MText('unitLabel', _M('Unit',$module).':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $unitLabel->setClass('m-caption m-caption-required');
        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitId = new MSelection('unitId', $this->getFormValue('unitId',$data->unitId), '', $business->listUnit());
        $unitId->setJsHint( _M('Choose the unit',$module) );

        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]   = $hctUnit;
        $validators[] = new MRequiredValidator('unitId', _M('Unit', $module));

        $fields[] = new Separator();

        $this->setFields($fields);
        $this->setValidators($validators);

        $this->page->onLoad('document.' . $this->name . '.courseId.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }

    public function tbBtnPrint_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // get filters values
        $filters->courseId                   = $this->courseId->value;
        $filters->courseVersion              = $this->courseVersion->value;
        $filters->unitId                     = $this->unitId->value;
        $filters->turnId                     = $this->turnId->value;
        $filters->courseName                 = $this->courseName->value;
        $filters->contractId                 = $this->contractId->value;

        $class = 'RptCurriculumInLot';
        $module = 'academic';
        $MIOLO->getClass( $module, $class );
        $report = new $class($filters);
    }

}

?>
