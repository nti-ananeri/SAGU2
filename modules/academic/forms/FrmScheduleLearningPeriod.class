<?php

/**
 * Learning Period form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br] 
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/10/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmScheduleLearningPeriod extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $scheduleLearningPeriodId = MIOLO::_request('scheduleLearningPeriodId');

            $fields[]  = new MHiddenField('scheduleLearningPeriodId', $scheduleLearningPeriodId);
            $fields[]  = new MTextLabel('scheduleLearningPeriodId',  $data->scheduleLearningPeriodId, _M('Code', $module));

            $business = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
            $data     = $business->getScheduleLearningPeriod($scheduleLearningPeriodId);
        }

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnIdCourse, turnDescriptionCourse', $module, 'CourseOccurrence', null, array ( 'courseId' => 'courseId', 'courseName' => 'courseName', 'courseVersion' => 'courseVersion' ), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabelCourse       = new MText('turnLabelCourse', _M('Turn', $module) . ':');
        $turnLabelCourse->setWidth(FIELD_CONTAINER_SIZE);

        $turnIdCourse          = new MTextField('turnIdCourse', $this->getFormValue('turnIdCourse', $data->turnIdCourse), '', FIELD_ID_SIZE);
        $turnIdCourse->setReadOnly(true);
        $turnIdCourse->setJsHint(_M('Turn id', $module));

        $turnDescriptionCourse = new MTextField('turnDescriptionCourse', $this->getFormValue('turnDescriptionCourse', $data->turnDescriptionCourse), '', FIELD_DESCRIPTION_SIZE);
        $turnDescriptionCourse->setReadOnly(true);
        $turnDescriptionCourse->setJsHint(_M('Turn description', $module));

        $hctTurnCourse         = new MHContainer('hctTurnCourse', array($turnLabelCourse, $turnIdCourse, $turnDescriptionCourse));
        $hctTurnCourse->setShowLabel(true);
        $fields[]        = $hctTurnCourse;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
        
        if ( in_array($function,array('update','delete')) )
        {
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnIdCourse', 'unitId'=>'unitId');
        }
        else
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;

            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnIdCourse', 'unitId'=>'unitId', 'periodId'=>'periodId');
        }

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period', $module) .':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period',$module), FIELD_LOOKUPFIELD_SIZE, null, null,'limbo, courseId, courseVersion, turnIdCourse, unitId, learningPeriodDescription, limbo, beginDate, endDate, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescriptionCourse, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, ($function == 'update') ? false : true);

        $validators[] = new MIntegerValidator('learningPeriodId', _M('Learning period', $module), 'required');
        //$fields[] = $learningPeriodId;

//         $periodId = new MTextField('periodId', $this->getFormValue('periodId', $data->periodId), _M('Period',$module), FIELD_ID_SIZE);
//         $periodId->setReadOnly(true);

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('learningPeriodDescription', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;

        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Description',$module), 'required');

        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId = new MComboBox('turnId', $this->getFormValue('turnId', $data->turnId), _M('Turn id',$module), $business->listTurn());

        $turnId->setAutoPostBack(true);

        $validators[] = new MRequiredValidator('turnId');
        $fields[] = $turnId;

        if ( (strlen((string)$turnId->value) > 0) && ($function != 'update') )
        {
            $turnData = $business->getTurn($turnId->value);

            if ( strlen((string)$beginHour->value) === 0 )
            {
                $data->beginHour = $turnData->beginHour;
            }

            if ( strlen((string)$endHour->value) === 0 )
            {
                $data->endHour = $turnData->endHour;
            }
        }

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('beginDate', '', 'optional');
        $fields[] = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('endDate', '', 'optional');
        $fields[] = $endDate;

        $beginHour = new MTextField('beginHour', $this->getFormValue('beginHour', $data->beginHour) > 0 ? $this->getFormValue('beginHour', $data->beginHour) : $data->beginHour, _M('Begin hour',$module), FIELD_TIME_SIZE, 'hh:mm');
        $validators[] = new MTimeValidator('beginHour', '', 'required');
        $fields[] = $beginHour;

        $endHour = new MTextField('endHour', $this->getFormValue('endHour', $data->endHour) > 0 ? $this->getFormValue('endHour', $data->endHour) : $data->endHour, _M('End hour',$module), FIELD_TIME_SIZE, 'hh:mm');
        $validators[] = new MTimeValidator('endHour', '', 'required');
        $fields[] = $endHour;

        $minimumNumberLessons = new MTextField('minimumNumberLessons', $this->getFormValue('minimumNumberLessons', $data->minimumNumberLessons), _M('Minimum number lessons', $module), 4);
        $validators[] = new MRegExpValidator('minimumNumberLessons','','(^-?[0-9][0-9]*$)');
        $fields[] = $minimumNumberLessons;

        $numberHoursLessons = new MTextField('numberHoursLessons', $this->getFormValue('numberHoursLessons', $data->numberHoursLessons) ? $this->getFormValue('numberHoursLessons', $data->numberHoursLessons) : '4', _M('Number hours lessons', $module), 4);
        $fields[] = $numberHoursLessons;
        $validators[] = new MIntegerValidator('numberHoursLessons', _M('Number hours lessons', $module), 'required');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        /*if (count($turnData) > 0)
        {
            $this->setFieldValue('beginHour', $turnData->beginHour);
            $this->setFieldValue('endHour', $turnData->endHour);
        }*/

        if ( $function == 'insert' )
        {
            $this->page->onLoad('document.'.$this->name.'.courseId.focus();');
        }
        else
        {
            $this->page->onLoad('document.'.$this->name.'.courseId.focus();');
        }
    }
    

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        /*$MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }*/
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'scheduleLearningPeriodId'=>MIOLO::_request('scheduleLearningPeriodId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
        $ok = $business->deleteScheduleLearningPeriod($this->scheduleLearningPeriodId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');

        if ( $function == 'update' )
        {
            $ok  = $business->updateScheduleLearningPeriod($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertScheduleLearningPeriod($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('learningPeriodIdS'=>$data->learningPeriodId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
     
     
    public function getTypesData()
    {
        $data = new acdScheduleLearningPeriod();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->description->value;
        $data->beginHour   = $this->getFormValue('beginHour');

        //$data->learningPeriodDescription = $this->learningPeriodDescription->value;

        return $data;
    }
    
}

?>
