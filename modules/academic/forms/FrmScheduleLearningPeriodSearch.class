<?php

/**
 *
 * This file handles the connection and actions for acdScheduleLearningPeriod table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br] 
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdScheduleLearningPeriod table
 */
class FrmScheduleLearningPeriodSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Schedule learning period', $this->home, 'scheduleLearningPeriod-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        //$fields[]  = new MHiddenField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $learningPeriodIdS));

        $scheduleLearningPeriodIdS = new MTextField('scheduleLearningPeriodIdS', $this->getFormValue('scheduleLearningPeriodIdS', $data->scheduleLearningPeriodIdS), _M('Schedule learning period id',$module), FIELD_ID_SIZE);
        $fields[] = $scheduleLearningPeriodIdS;

        $descriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS', $data->descriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $fields[] = $descriptionS;

        //Course
        $courseLabelS   = new MText('courseLabelS', _M('Course',$module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseIdS      = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionS, courseNameS', $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseNameS    = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name',$module));

        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version code',$module));

        $hctCourseS     = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]      = $hctCourseS;
        
        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', $data->periodId), _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module) .':');
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);
        
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescriptionS', $module, 'LearningPeriod', null, array('periodId'=>'periodId', 'courseId'=>'courseIdS', 'courseVersion'=>'courseVersionS'), true);
        
        $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->getFormValue('learningPeriodDescriptionS', $data->learningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescriptionS->setReadOnly(true);

        $hctLearningPeriodS = new MHContainer('hctLearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodDescriptionS));
        $hctLearningPeriodS->setShowLabel(false);
        $fields[] = $hctLearningPeriodS;

        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnIdS = new MComboBox( 'turnIdS',
                                $this->GetFormValue('turnIdS',$data->turnId),
                                _M('Turn id',$module),
                                $business->listTurn());
        //$validators[] = new MRequiredValidator('turnIdS');
        $fields[]     = $turnIdS;

        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[]   = $beginDateS;

        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('End date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;

        $beginHourS = new MTextField('beginHourS', $this->beginHourS->value, _M('Begin hour',$module), FIELD_TIME_SIZE, 'hh:mm');
        $validators[] = new MTimeValidator('beginHourS', '', 'optional');
        $fields[]   = $beginHourS;

        $endHourS = new MTextField('endHourS', $this->endHourS->value, _M('End hour',$module), FIELD_TIME_SIZE, 'hh:mm');
        $validators[] = new MTimeValidator('endHourS', '', 'optional');
        $fields[] = $endHourS;

        //$minimumNumberLessonsS = new MTextField('minimumNumberLessonsS', $this->minimumNumberLessonsS->value, _M('minimum number lessons',$module), 4);
        //$fields[]              = $minimumNumberLessonsS;

        //$numberHoursLessonsS = new MTextField('numberHoursLessonsS', $this->numberHoursLessonsS->value, _M('Number hours lessons',$module), 4);
        //$fields[]            = $numberHoursLessonsS;

        //$numberHoursLessonsS = new MTextField('sagu1ScheduleLearningPeriodIdS', $this->numberHoursLessonsS->value, _M('Sagu1 schedule learning period id',$module), 4);
        //$fields[]            = $numberHoursLessonsS;

        $fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        // get filters values
        $filters->scheduleLearningPeriodId      = $this->scheduleLearningPeriodIdS->value;
        $filters->learningPeriodId              = $this->learningPeriodIdS->value;
        $filters->learningPeriodDescription     = $this->learningPeriodDescriptionS->value;
        $filters->description                   = $this->descriptionS->value;
        $filters->turnId                        = $this->turnIdS->value;
        $filters->beginDate                     = $this->beginDateS->value;
        $filters->endDate                       = $this->endDateS->value;
        $filters->beginHour                     = $this->beginHourS->value;
        $filters->endHour                       = $this->endHourS->value;
        $filters->minimumNumberLessons          = $this->minimumNumberLessonsS->value;
        $filters->numberHoursLessons            = $this->numberHoursLessonsS->value;
        $filters->sagu1ScheduleLearningPeriodId = $this->sagu1ScheduleLearningPeriodIdS->value;
        $filters->courseId                      = $this->courseIdS->value;
        $filters->courseVersion                 = $this->courseVersionS->value;
        $filters->courseName                    = $this->courseNameS->value;
        $filters->periodId                      = $this->periodId->value;

        //unset($this->learningPeriodIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleLearningPeriodSearch', $filters);
        $business = $this->manager->getBusiness($module,'BusScheduleLearningPeriod');
        $data = $business->searchScheduleLearningPeriod($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        //unset($learningPeriodDescriptionS);

        $this->page->onLoad('document.'.$this->name .'.descriptionS.focus();');
    }
}

?>
