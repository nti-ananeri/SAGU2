<?php

/**
 * Grades typing form
 *
 * @author Leovan Tavares da Silva [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 20/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmGradesTyping extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Grade typing', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave'); 

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Grade typing', $this->home, 'gradesTyping-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period id', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Select a period', $module));
        $fields[]       = $periodId;
        $validators[]   = new MRequiredValidator('periodId');

        $fields[] = new Separator('');
    
        //Course
        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, limbo, limbo, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code', $module));
//        $validators[] = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name', $module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion),'', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version', $module));
        //$fields[] = $courseVersion;

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $turnLabel = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), _M('Turn id',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        //$fields[] = $turnId;
        
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnId', $data->turnId), _M('Turn description', $module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));
        
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[]  = $hctTurn;
        $lookupFilters = array( 'courseId'      => 'courseId',
                                'periodId'      => 'periodId',
                                'courseVersion' => 'courseVersion',
                                'turnId'        => 'turnId');

        //Class
        $classLabel = new MText('classLabel', _M('Class', $module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', $module, 'ClassCourse', null, $lookupFilters, true);
        $classId->setJsHint(_M('Enter the class code', $module));

        $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Class name', $module));

        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[] = $hctClass;

        $fields[]  = new Separator('');

        $registerEvaluationHint = new MText('hintRadioButton', _M('Below, select "No" whenever you want to list only closed minutes, otherwise click "Yes"',$module) . '.');

        $sep = new MSeparator('<br />');

        $registerEvaluation = strlen((string)$this->GetFormValue('registerEvaluation', $data->registerEvaluation)) > 0 ? $this->GetFormValue('registerEvaluation', $data->registerEvaluation) : DB_FALSE;

        $registerEvaluation = new MRadioButtonGroup('registerEvaluation', '', SAGU::listYesNo('1') , $registerEvaluation, "", 'horizontal');
        $registerEvaluation->SetShowLabel(false);

        $hctRegisterEvaluation = new MVContainer('registerEvaluation',
 array($registerEvaluationHint, $registerEvaluation));
        $hctRegisterEvaluation->setShowLabel(false);

        $bsg2            = new BaseGroup('bsg2', _M('Open minutes',$module) . '?', array($hctRegisterEvaluation), 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        $fields[]        = $bsg2;

        $fields[] = new Separator('');

        $btnList  = new MButton('btnList', _M('Search', $module));
        $divButtons = new MDiv('divButtons', array($btnList));
        $fields[] = $divButtons;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function btnList_click($sender = null)
    {
        $MIOLO              = MIOLO::getInstance();
        $module             = MIOLO::getCurrentModule();
        $action             = MIOLO::getCurrentAction();

        $periodId           = MIOLO::_request('periodId');
        $courseId           = MIOLO::_request('courseId');
        $classId            = MIOLO::_request('classId');
        $courseVersion      = MIOLO::_request('courseVersion');
        $turnId             = MIOLO::_request('turnId');
        $registerDegrees    = MIOLO::_request('registerDegrees');
        $registerEvaluation = MIOLO::_request('registerEvaluation');

        $opts  = array('registerEvaluation' => $registerEvaluation,
                       'periodId'           => $periodId,
                       'courseId'           => $courseId,
                       'courseVersion'      => $courseVersion,
                       'turnId'             => $turnId,
                       'classId'            => $classId,
                       'registerEvaluation' => $registerEvaluation );

        $opts1 = urlencode(serialize($opts));
        $business        = $MIOLO->getBusiness($module, 'BusGradeTyping');
        if ( ACADEMIC_REGISTER_LAYER_INDIVIDUAL == 'YES' )
        {
            $listingData = $business->listCurricularComponentGroups($periodId, $courseId, $courseVersion, $turnId, $classId);
        }
        elseif ( ACADEMIC_REGISTER_LAYER_INDIVIDUAL == 'NO' )
        {
            $listingData = $business->listCurricularComponentGroupsSummary($periodId, $courseId, $courseVersion, $turnId, $classId, $registerEvaluation);
        }

        $grid   = $MIOLO->getUI()->getGrid($module, 'GrdGradesTyping', $opts1);
        $grid->setData($listingData);
        $this->addField($grid);
    }
}

?>
