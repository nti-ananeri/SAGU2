<?php

/**
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate condition unblock list
 **/
class FrmConditionUnblockList extends MForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = 'main:report:conditionUnblockList';

        parent::__construct(_M('Condition unblock list', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Condition unblock list', $this->home, 'conditionUnblockList-16x16.png', true);
        }
        //fim favoritos
        //$toolBar->disableButton('tbBtnBookmark');
        
        $fields[] = $toolBar;
        $fields[] = new MSeparator('');
            
        $dperiodId      = strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID;
        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', $dperiodId, _M('Period',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;
        
        $businessFormationLevel = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $formationLevelId       = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Formation level', $module), $businessFormationLevel->listFormationLevel());
        $validators[]           = new MRequiredValidator('formationLevelId');
        $fields[]               = $formationLevelId;
                                      
        $btn1     = new MButton('btnList', _M('List', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        $this->setValidators($validators);
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user clicks list button
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusConditionUnblockList');
        $data     = $this->getData();
        
        $listData = $business->listConditionUnblockPupils($data->periodId, $data->formationLevelId);
                
        if (count($listData) > 0)
        {
            foreach ($listData as $tableData)
            {
                unset($tableRows);
                if (count($tableData->currComps) > 0)
                {
                    foreach ($tableData->currComps as $currComps)
                    {
                        unset($columns);
                        $columns[] = "<div style=\"text-align: center;\">" . _M('Id', $module) . "</div>";
                        $columns[] = "<div style=\"text-align: center;\">" . _M('Name', $module) . "</div>";
                        
                        $tableRaw = new MTableRaw($currComps->title, $currComps->data, $columns);

                        $tableRaw->setAlternate(true);
                        
                        $tableRows[] = array($tableRaw);
                    }
                }
                
                $total       = "<div style=\"background-color: black; color: white; text-align: right;\"><b>" . _M('Course total', $module) . ': ' . $tableData->total . "</b></div>";
                $tableRows[] = array($total);
                $courseTable = new MTableRaw($tableData->title, $tableRows, null);
                $this->addField($courseTable);
                $this->addField(new MSeparator());
            }
        }
        
        /*$title    = _M('Graduates final average', $module);
        
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdGraduatedPupilsFinalAverage',$filters);
        $grdResults->setData($listData);
        $grdResults->setTitle($title);
        $this->addField($grdResults);*/
    }
}

?>
