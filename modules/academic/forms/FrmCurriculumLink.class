<?php

/**
 * Curriculum link form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 29/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a curriculumLink
 **/
class FrmCurriculumLink extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        $this->page->onLoad('document.' . $this->name . '.curriculumId.focus();');
        
        $courseLabel = new MText('courseLabel', _M('Course id',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->courseId->value, '', FIELD_ID_SIZE, null, null, 'courseVersion, courseName, courseUnitId, courseUnitDescription, courseTurnId, courseTurnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('courseId', _M('Course id',$module));

        $fields[] = new MHiddenField('courseUnitId', $courseUnitId);
        $fields[] = new MHiddenField('courseTurnId', $courseTurnId);

        $courseName = new MTextField('courseName', $this->courseName->value, '', FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Enter the curriculum course name',$module));
        $courseName->setReadOnly(true);

        $courseVersion = new MTextField('courseVersion', $this->courseVersion->value, '', 5);
        $courseVersion->setJsHint(_M('Enter the curriculum course version',$module));
        //$courseVersion->setReadOnly(true);

        $courseUnitDescription = new MTextField('courseUnitDescription', $this->courseUnitDescription->value, '', 8);
        $courseUnitDescription->setJsHint(_M('Curriculum course unit description',$module));
        $courseUnitDescription->setReadOnly(true);

        $courseTurnDescription = new MTextField('courseTurnDescription', $this->courseTurnDescription->value, '', 8);
        $courseTurnDescription->setJsHint(_M('Curriculum course unit description',$module));
        $courseTurnDescription->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseName, $courseVersion, $courseUnitDescription, $courseTurnDescription));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component id',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->curricularComponentId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion, curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseId', 'curricularComponentId' => 'curricularComponentId', 'courseVersion' => 'courseVersion', 'turnId' => 'courseTurnId', 'unitId' => 'courseUnitId' ), true);
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Curricular component id',$module));

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->curricularComponentVersion->value, '', FIELD_ID_SIZE);
        $curricularComponentVersion->setJsHint(_M('Enter the curriculum curricular component version',$module));
        $curricularComponentVersion->setReadOnly(true);

        $curricularComponentName = new MTextField('curricularComponentName', $this->curricularComponentName->value, '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curricularComponentName->setReadOnly(true);

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctCurricularComponent->setShowLabel(true);
        $fields[]  = $hctCurricularComponent;

        $courseLinkLabel = new MText('courseLinkLabel', _M('Course link id',$module) . ':');
        $courseLinkLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLinkLabel->setClass('m-caption m-caption-required');

        $courseLinkId = new MLookupTextField('courseLinkId', $this->courseLinkId->value, '', FIELD_ID_SIZE, null, null, 'courseLinkVersion, courseLinkName, courseLinkUnitId, courseLinkUnitDescription, courseLinkTurnId, courseLinkTurnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseLinkId'), true);
        $validators[] = new MRequiredValidator('courseLinkId', _M('Course link id',$module));

        $fields[] = new MHiddenField('courseLinkUnitId', $courseLinkUnitId);
        $fields[] = new MHiddenField('courseLinkTurnId', $courseLinkTurnId);

        $courseLinkName = new MTextField('courseLinkName', $this->courseLinkName->value, '', FIELD_DESCRIPTION_SIZE);
        $courseLinkName->setJsHint(_M('Enter the curriculum course name',$module));
        $courseLinkName->setReadOnly(true);

        $courseLinkVersion = new MTextField('courseLinkVersion', $this->courseLinkVersion->value, '', 5);
        $courseLinkVersion->setJsHint(_M('Enter the curriculum course version',$module));
        //$courseLinkVersion->setReadOnly(true);

        $courseLinkUnitDescription = new MTextField('courseLinkUnitDescription', $this->courseLinkUnitDescription->value, '', 8);
        $courseLinkUnitDescription->setJsHint(_M('Curriculum course unit description',$module));
        $courseLinkUnitDescription->setReadOnly(true);

        $courseLinkTurnDescription = new MTextField('courseLinkTurnDescription', $this->courseLinkTurnDescription->value, '', 8);
        $courseLinkTurnDescription->setJsHint(_M('Curriculum course unit description',$module));
        $courseLinkTurnDescription->setReadOnly(true);

        $hctLinkCourse = new MHContainer('hctLinkCourse', array($courseLinkLabel, $courseLinkId, $courseLinkName, $courseLinkVersion, $courseLinkUnitDescription, $courseLinkTurnDescription));
        $hctLinkCourse->setShowLabel(true);
        $fields[]  = $hctLinkCourse;

        $curricularComponentLinkLabel = new MText('curricularComponentLinkLabel', _M('Curricular component link id',$module) . ':');
        $curricularComponentLinkLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLinkLabel->setClass('m-caption m-caption-required');

        $curricularComponentLinkId = new MLookupTextField('curricularComponentLinkId', $this->curricularComponentLinkId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentLinkVersion, curricularComponentLinkName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseLinkId', 'curricularComponentId' => 'curricularComponentLinkId', 'courseVersion' => 'courseLinkVersion', 'turnId' => 'courseLinkTurnId', 'unitId' => 'courseLinkUnitId'), true);
        $validators[] = new MRequiredValidator('curricularComponentLinkId', _M('Curricular component link id',$module));

        $curricularComponentLinkVersion = new MTextField('curricularComponentLinkVersion', $this->curricularComponentLinkVersion->value, '', FIELD_ID_SIZE);
        $curricularComponentLinkVersion->setJsHint(_M('Enter the curriculum curricular component version', $module));
        $curricularComponentLinkVersion->setReadOnly(true);

        $curricularComponentLinkName = new MTextField('curricularComponentLinkName', $this->curricularComponentLinkName->value, '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentLinkName->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curricularComponentLinkName->setReadOnly(true);

        $hctCurricularComponentLink = new MHContainer('hctCurricularComponentLink', array($curricularComponentLinkLabel, $curricularComponentLinkId, $curricularComponentLinkVersion, $curricularComponentLinkName));
        $hctCurricularComponentLink->setShowLabel(true);
        $fields[]  = $hctCurricularComponentLink;

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'curriculumId'     => MIOLO::_request('curriculumId'),
                        'curriculumLinkId' => MIOLO::_request('curriculumLinkId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
//         $opts   = array('curriculumIdS' => MIOLO::_request('curriculumId'),
//                         'curriculumLinkIdS' => MIOLO::_request('curriculumLinkId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $curriculumId     = MIOLO::_request('curriculumId');
        $curriculumLinkId = MIOLO::_request('curriculumLinkId');

        $business = $MIOLO->getBusiness($module, 'BusCurriculumLink');
        $ok = $business->deleteCurriculumLink($curriculumId, $curriculumLinkId);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCurriculumLink');

        if ( (strlen((string)$data->curriculumId) > 0 ) &&
             (strlen((string)$data->curriculumLinkId) > 0 ) )
        {
            if ( $function == 'update' )
            {
                $ok  = $business->updateCurriculumLink($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok  = $business->insertCurriculumLink($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }
        else
        {
            $ok = false;
            $currMessage = _M('Impossible to find the correct curriculum for', $module) . ' ' . $this->curricularComponentId->value . '(' . $this->curricularComponentVersion->value . ') ' . _M('or', $module) . ' ' . $this->curricularComponentLinkId->value . '(' . $this->curricularComponentLinkVersion->value . ').';
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('curriculumIdS'   => $data->curriculumId,
                          'curriculumLinkIdS' => $data->curriculumLinkId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }        
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module) . ' ' . $currMessage;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        $data = new AcdCurriculumLink();

        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        //curriculumId
        $filters1->courseId                   = $this->courseId->value;
        $filters1->courseVersion              = $this->courseVersion->value;
        $filters1->courseUnitId               = $this->courseUnitId->value;
        $filters1->courseTurnId               = $this->courseTurnId->value;
        $filters1->curricularComponentId      = $this->curricularComponentId->value;
        $filters1->curricularComponentVersion = $this->curricularComponentVersion->value;

        $searchCurriculum   = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $data->curriculumId = $searchCurriculum[0][0];
        }

        //curriculumLinkId
        $filters2->courseId                   = $this->courseLinkId->value;
        $filters2->courseVersion              = $this->courseLinkVersion->value;
        $filters2->courseUnitId               = $this->courseLinkUnitId->value;
        $filters2->courseTurnId               = $this->courseLinkTurnId->value;
        $filters2->curricularComponentId      = $this->curricularComponentLinkId->value;
        $filters2->curricularComponentVersion = $this->curricularComponentLinkVersion->value;

        $searchCurriculum1   = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchCurriculum1) == 1 )
        {
            $data->curriculumLinkId = $searchCurriculum1[0][0];
        }

        return $data;
    }
}

?>
