<?php

/**
 *
 * This file handles the connection and actions for acdCondition table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCondition table
 */
class FrmConditionSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Condition', $this->home, 'condition-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[]  = new MHiddenField('conditionIdS', $this->getFormValue('conditionIdS', $conditionIdS));

        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Course id',$module) . ':');
        $curriculumCourseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumCourseIdS = new MLookupTextField('curriculumCourseIdS', $this->curriculumCourseIdS->value, '', FIELD_ID_SIZE, null, null, 'curriculumCourseVersionS, curriculumCourseNameS, curriculumCourseUnitIdS, curriculumCourseUnitDescriptionS, curriculumCourseTurnIdS, curriculumCourseTurnDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseIdS'), !$this->page->isPostBack());

        $fields[] = new MHiddenField('curriculumCourseUnitIdS', $curriculumCourseUnitIdS);
        $fields[] = new MHiddenField('curriculumCourseTurnIdS', $curriculumCourseTurnIdS);

        $curriculumCourseVersionS = new MTextField('curriculumCourseVersionS', $this->curriculumCourseVersionS->value, '', FIELD_ID_SIZE);
        $curriculumCourseVersionS->setJsHint(_M('Enter the curriculum course version',$module));

        $curriculumCourseNameS = new MTextField('curriculumCourseNameS', $this->curriculumCourseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumCourseNameS->setJsHint(_M('Enter the curriculum course name',$module));

        $curriculumCourseNameS->setReadOnly(true);


        $curriculumCourseVersionS = new MTextField('curriculumCourseVersionS', $this->curriculumCourseVersionS->value, '', 5);
        $curriculumCourseVersionS->setJsHint(_M('Enter the curriculum course version',$module));
        $curriculumCourseVersionS->setReadOnly(true);

        $curriculumCourseUnitDescriptionS = new MTextField('curriculumCourseUnitDescriptionS', $this->curriculumCourseUnitDescriptionS->value, '', 8);
        $curriculumCourseUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumCourseUnitDescriptionS->setReadOnly(true);

        $curriculumCourseTurnDescriptionS = new MTextField('curriculumCourseTurnDescriptionS', $this->curriculumCourseTurnDescriptionS->value, '', 8);
        $curriculumCourseTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumCourseTurnDescriptionS->setReadOnly(true);

        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseIdS, $curriculumCourseVersionS, $curriculumCourseNameS, $curriculumCourseUnitDescriptionS, $curriculumCourseTurnDescriptionS));
        $hctCurriculumCourse->setShowLabel(true);
        $fields[]  = $hctCurriculumCourse;

        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponent', _M('Curricular component id',$module) . ':');
        $curriculumCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $curriculumCurricularComponentIdS = new MLookupTextField('curriculumCurricularComponentIdS', $this->curriculumCurricularComponentIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curriculumCurricularComponentVersionS, curriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseIdS', 'curricularComponentId' => 'curriculumCurricularComponentIdS'), !$this->page->isPostBack());

        $curriculumCurricularComponentVersionS = new MTextField('curriculumCurricularComponentVersionS', $this->curriculumCurricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $curriculumCurricularComponentVersionS->setJsHint(_M('Enter the curriculum curricular component version',$module));

        $curriculumCurricularComponentVersionS->setReadOnly(true);


        $curriculumCurricularComponentNameS = new MTextField('curriculumCurricularComponentNameS', $this->curriculumCurricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumCurricularComponentNameS->setJsHint(_M('Enter the curriculum curricular component name',$module));

        $curriculumCurricularComponentNameS->setReadOnly(true);

        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponent', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentIdS, $curriculumCurricularComponentVersionS, $curriculumCurricularComponentNameS));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[]  = $hctCurriculumCurricularComponent;

//         $conditionCurriculumLabel = new MText('conditionCurriculumLabel', _M('Condition id',$module) . ':');
//         $conditionCurriculumLabel->setWidth(FIELD_CONTAINER_SIZE);
// 
//         $conditionCurriculumCourseIdS = new MLookupTextField('conditionCurriculumCourseIdS', $this->conditionCurriculumCourseIdS->value,'', FIELD_LOOKUPFIELD_SIZE, null, null, 'conditionCurriculumCourseVersionS,conditionCurriculumCourseNameS', $module, 'CourseVersion', null, null, true);
//         $validators[] = new MIntegerValidator('conditionCurriculumCourseIdS', '', 'optional');
// 
//         $conditionCurriculumCourseIdS = new MLookupTextField('conditionCurriculumCourseIdS', $this->conditionCurriculumCourseIdS->value, '', FIELD_ID_SIZE, null, null, 'conditionCurriculumCourseVersionS, conditionCurriculumCourseNameS, conditionCurriculumCourseUnitIdS, conditionCurriculumCourseUnitDescriptionS, conditionCurriculumCourseTurnIdS, conditionCurriculumCourseTurnDescriptionS', $module, 'CourseOccurrence', null, null, true);
//         $validators[] = new MIntegerValidator('conditionCurriculumCourseIdS', '', 'optional');
// 
//         $fields[] = new MHiddenField('conditionCurriculumCourseUnitIdS', $conditionCurriculumCourseUnitIdS);
//         $fields[] = new MHiddenField('conditionCurriculumCourseTurnIdS', $conditionCurriculumCourseTurnIdS);
// 
//         $conditionCurriculumCourseNameS = new MTextField('conditionCurriculumCourseNameS', $this->conditionCurriculumCourseNameS->value, '', FIELD_DESCRIPTION_SIZE);
//         $conditionCurriculumCourseNameS->setJsHint(_M('Enter the curriculum course name',$module));
//         $conditionCurriculumCourseNameS->setReadOnly(true);
// 
//         $conditionCurriculumCourseVersionS = new MTextField('conditionCurriculumCourseVersionS', $this->curriculumCourseVersionS->value, '', 5);
//         $conditionCurriculumCourseVersionS->setJsHint(_M('Enter the curriculum course version',$module));
//         $conditionCurriculumCourseVersionS->setReadOnly(true);
// 
//         $conditionCurriculumCourseUnitDescriptionS = new MTextField('conditionCurriculumCourseUnitDescriptionS', $this->conditionCurriculumCourseUnitDescriptionS->value, '', 8);
//         $conditionCurriculumCourseUnitDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
//         $conditionCurriculumCourseUnitDescriptionS->setReadOnly(true);
// 
//         $conditionCurriculumCourseTurnDescriptionS = new MTextField('conditionCurriculumCourseTurnDescriptionS', $this->conditionCurriculumCourseTurnDescriptionS->value, '', 8);
//         $conditionCurriculumCourseTurnDescriptionS->setJsHint(_M('Curriculum course unit description',$module));
//         $conditionCurriculumCourseTurnDescriptionS->setReadOnly(true);
// 
//         $hctConditionCurriculumCourse = new MHContainer('hctConditionCurriculumCourse', array($conditionCurriculumLabel, $conditionCurriculumCourseIdS, $conditionCurriculumCourseNameS, $conditionCurriculumCourseVersionS, $conditionCurriculumCourseUnitDescriptionS, $conditionCurriculumCourseTurnDescriptionS));
//         $hctConditionCurriculumCourse->setShowLabel(true);
//         $fields[]  = $hctConditionCurriculumCourse;

        $conditionCurriculumCurricularComponentLabel = new MText('conditionCurriculumCurricularComponentLabel', _M('Conditional curricular component',$module) . ':');
        $conditionCurriculumCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $conditionCurriculumCurricularComponentIdS = new MLookupTextField('conditionCurriculumCurricularComponentIdS', $this->conditionCurriculumCurricularComponentIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'conditionCurriculumCurricularComponentVersionS,conditionCurriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseIdS', 'curricularComponentId' => 'conditionCurriculumCurricularComponentIdS'), !$this->page->isPostBack());

        //$fields[] = $conditionCurriculumCurricularComponentIdS;

        $conditionCurriculumCurricularComponentVersionS = new MTextField('conditionCurriculumCurricularComponentVersionS', $this->conditionCurriculumCurricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $conditionCurriculumCurricularComponentVersionS->setJsHint(_M('Enter the condition curriculum curricular component version',$module));
        $conditionCurriculumCurricularComponentVersionS->setReadOnly(true);
        //$fields[] = $conditionCurriculumCurricularComponentVersionS;

        $conditionCurriculumCurricularComponentNameS = new MTextField('conditionCurriculumCurricularComponentNameS', $this->conditionCurriculumCurricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $conditionCurriculumCurricularComponentNameS->setJsHint(_M('Enter the condition curriculum curricular component name',$module));
        $conditionCurriculumCurricularComponentNameS->setReadOnly(true);
        //$fields[] = $conditionCurriculumCurricularComponentNameS;

        $hctConditionCurriculumCurricularComponent = new MHContainer('hctConditionCurriculumCurricularComponent', array($conditionCurriculumCurricularComponentLabel, $conditionCurriculumCurricularComponentIdS, $conditionCurriculumCurricularComponentVersionS, $conditionCurriculumCurricularComponentNameS));
        $hctConditionCurriculumCurricularComponent->setShowLabel(true);
        $fields[]  = $hctConditionCurriculumCurricularComponent;

        $busEducationArea = $MIOLO->getBusiness($module,'BusEducationArea');
        $educationAreaIdS = new MComboBox('educationAreaIdS', $this->educationAreaIdS->value, _M('Education area (technical)', $module), $busEducationArea->listEducationArea());
        $fields[] = $educationAreaIdS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);


        //$curriculumIdS 
        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        $filters1->courseId                   = $curriculumCourseIdS->value;
        $filters1->courseVersion              = $curriculumCourseVersionS->value;
        $filters1->curricularComponentId      = $curriculumCurricularComponentIdS->value;
        $filters1->curricularComponentVersion = $curriculumCurricularComponentVersionS->value;
        $filters1->unitId                     = $curriculumCourseUnitIdS->value;
        $filters1->turnId                     = $curriculumCourseTurnIdS->value;

        $searchCurriculum   = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $filters->curriculumId = $searchCurriculum[0][0];
        }

        //$conditionCurriculumId
        $filters2->courseId                   = $conditionCurriculumCourseIdS->value;
        $filters2->courseVersion              = $conditionCurriculumCourseVersionS->value;
        $filters2->curricularComponentId      = $conditionCurriculumCurricularComponentIdS->value;
        $filters2->curricularComponentVersion = $conditionCurriculumCurricularComponentVersionS->value;
        $filters2->unitId                     = $conditionCurriculumCourseUnitIdS->value;
        $filters2->turnId                     = $conditionCurriculumCourseTurnIdS->value;

        $searchConditionalCurriculum          = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchConditionalCurriculum) == 1 )
        {
            $filters->conditionCurriculumId       = $searchConditionalCurriculum[0][0];
        }


        // get filters values

        $filters->conditionId                                     = $this->conditionIdS->value;
//        $filters->curriculumId                                    = $this->curriculumIdS->value;
        $filters->curriculumCourseId                              = $this->curriculumCourseIdS->value;
        $filters->curriculumCourseVersion                         = $this->curriculumCourseVersionS->value;
        $filters->curriculumCourseName                            = $this->curriculumCourseNameS->value;
        $filters->curriculumCurricularComponentId                 = $this->curriculumCurricularComponentIdS->value;
        $filters->curriculumCurricularComponentVersion            = $this->curriculumCurricularComponentVersionS->value;
        $filters->curriculumCurricularComponentName               = $this->curriculumCurricularComponentNameS->value;
        //$filters->conditionCurriculumId                           = $this->conditionCurriculumIdS->value;
        $filters->conditionalCurriculumCourseId                   = $this->conditionCurriculumCourseIdS->value;
        $filters->conditionalCurriculumCourseVersion              = $this->conditionCurriculumCourseVersionS->value;
        $filters->conditionalCurriculumCourseName                 = $this->conditionCurriculumCourseNameS->value;
        $filters->conditionalCurriculumCurricularComponentId      = $this->conditionCurriculumCurricularComponentIdS->value;
        $filters->conditionCurriculumCurricularComponentVersion = $this->conditionalCurriculumCurricularComponentVersionS->value;
        $filters->conditionCurriculumCurricularComponentName    = $this->conditionalCurriculumCurricularComponentNameS->value;
        $filters->educationAreaId                                 = $this->educationAreaIdS->value;
        $filters->educationAreaDescription                        = $this->educationAreaDescriptionS->value;

        unset($this->conditionIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdConditionSearch',$filters);
        $business   = $MIOLO->getBusiness($module,'BusCondition');
        $data       = $business->searchShortCondition($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.conditionIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
