<?php

/**
 * External course form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a condition
 **/
class FrmCondition extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

         $isHaveDiv = new MHiddenField('isHaveDiv', MIOLO::_request('isHaveDiv'));
         $fields[]  = $isHaveDiv;

        if ( $isHaveDiv->value == 't' )
        {

            $fields[] = new MSeparator('');

            $divError = new MDiv('divError', null, null, 'align=center');

            $lblMsg1    = new MText('lblMsg1', _M('Impossible to find the correct curriculum id for curricular component and/or for curricular component condition', $module));
            $lblMsg1->color = 'red';

            $divError->addControl($lblMsg1);

            $fields[] = $divError;
            $fields[] = new MSeparator('');
        }

        if ( in_array($function,array('update','delete')) )
        {
            $conditionId = $_GET['conditionId'] ? $_GET['conditionId'] : $_POST['conditionId'];
            $fields[] = new MTextLabel('conditionId', $conditionId, _M('Code',$module));
            $fields[] = new MHiddenField('conditionId', $conditionId);

            $business = $MIOLO->getBusiness($module,'BusCondition');
            $data = $business->getCondition($conditionId);
        }
        $this->page->onLoad('document.' . $this->name . '.curriculumId.focus();');

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Course',$module) . ':');
        $curriculumCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curriculumCourseLabel->setClass('m-caption m-caption-required');

        $curriculumCourseId = new MLookupTextField('curriculumCourseId', $this->getFormValue('curriculumCourseId', $data->curriculumCourseId), '', FIELD_ID_SIZE, null, null, 'curriculumCourseVersion, curriculumCourseName, curriculumCourseUnitId, curriculumCourseUnitDescription, curriculumCourseTurnId, curriculumCourseTurnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseId', 'courseVersion'=>'curriculumCourseVersion', 'turnId'=>'curriculumCourseTurnId', 'unitId' =>'curriculumCourseTurnId'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('curriculumCourseId', _M('Course',$module));

        $fields[] = new MHiddenField('curriculumCourseUnitId', $curriculumCourseUnitId);
        $fields[] = new MHiddenField('curriculumCourseTurnId', $curriculumCourseTurnId);

        $curriculumCourseName = new MTextField('curriculumCourseName', $this->getFormValue('curriculumCourseName', strlen((string)$this->curriculumCourseName->value) > 0 ? $this->curriculumCourseName->value : $data->curriculumCourseName ), '', FIELD_DESCRIPTION_SIZE);
        $curriculumCourseName->setJsHint(_M('Enter the curriculum course name',$module));
        $curriculumCourseName->setReadOnly(true);

        $curriculumCourseVersion = new MTextField('curriculumCourseVersion', $this->getFormValue('curriculumCourseVersion', $data->curriculumCourseVersion), '', 5);
        $curriculumCourseVersion->setJsHint(_M('Enter the curriculum course version',$module));
        //$curriculumCourseVersion->setReadOnly(true);

        $curriculumCourseUnitDescription = new MTextField('curriculumCourseUnitDescription', strlen((string)$this->curriculumCourseUnitDescription->value) > 0 ? $this->curriculumCourseUnitDescription->value : $data->curriculumUnitDescription, '', 8);
        $curriculumCourseUnitDescription->setJsHint(_M('Curriculum course unit description',$module));
        $curriculumCourseUnitDescription->setReadOnly(true);

        $curriculumCourseTurnDescription = new MTextField('curriculumCourseTurnDescription', strlen((string)$this->curriculumCourseTurnDescription->value) > 0 ? $this->curriculumCourseTurnDescription->value : $data->curriculumTurnDescription , '', 8);
        $curriculumCourseTurnDescription->setJsHint(_M('Curriculum course turn description',$module));
        $curriculumCourseTurnDescription->setReadOnly(true);

        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseId, $curriculumCourseName, $curriculumCourseVersion, $curriculumCourseUnitDescription, $curriculumCourseTurnDescription));
        $hctCurriculumCourse->setShowLabel(true);
        $fields[]  = $hctCurriculumCourse;


        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponent', _M('Curricular component',$module) . ':');
        $curriculumCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curriculumCurricularComponentLabel->setClass('m-caption m-caption-required');

        $curriculumCurricularComponentId = new MLookupTextField('curriculumCurricularComponentId', $this->getFormValue('curriculumCurricularComponentId', $data->curriculumCurricularComponentId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'curriculumCurricularComponentVersion,curriculumCurricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseId', 'curricularComponentId' => 'curriculumCurricularComponentId', 'courseVersion' => 'curriculumCourseVersion', 'turnId' => 'curriculumCourseTurnId', 'unitId'=>'curriculumCourseUnitId'), true);
        $validators[] = new MRequiredValidator('curriculumCurricularComponentId', _M('Curricular component',$module));

        $curriculumCurricularComponentVersion = new MTextField('curriculumCurricularComponentVersion', $this->getFormValue('curriculumCurricularComponentVersion', $data->curriculumCurricularComponentVersion), '', FIELD_ID_SIZE);
        $curriculumCurricularComponentVersion->setJsHint(_M('Enter the curriculum curricular component version',$module));
        $curriculumCurricularComponentVersion->setReadOnly(true);

        $curriculumCurricularComponentName = new MTextField('curriculumCurricularComponentName', $this->curriculumCurricularComponentName->value, '', FIELD_DESCRIPTION_SIZE);
        $curriculumCurricularComponentName->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $curriculumCurricularComponentName->setReadOnly(true);

        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponent', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentId, $curriculumCurricularComponentVersion, $curriculumCurricularComponentName));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[]  = $hctCurriculumCurricularComponent;

        $conditionCurriculumCurricularComponentLabel = new MText('conditionCurriculumCurricularComponentLabel', _M('Conditional curricular component',$module) . ':');
        $conditionCurriculumCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$conditionCurriculumCurricularComponentLabel->setClass('m-caption m-caption-required');

        $conditionCurriculumCurricularComponentId = new MLookupTextField('conditionCurriculumCurricularComponentId', $this->getFormValue('conditionCurriculumCurricularComponentId', $data->conditionalCurriculumCurricularComponentId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'conditionCurriculumCurricularComponentVersion,conditionCurriculumCurricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseId', 'curricularComponentId' => 'conditionCurriculumCurricularComponentId', 'courseVersion' => 'curriculumCourseVersion', 'turnId' => 'curriculumCourseTurnId', 'unitId'=>'curriculumCourseUnitId'), true);
        //$fields[] = $conditionCurriculumCurricularComponentIdS;

        $conditionCurriculumCurricularComponentVersion = new MTextField('conditionCurriculumCurricularComponentVersion', $this->getFormValue('conditionCurriculumCurricularComponentVersion', $data->conditionalCurriculumCurricularComponentVersion), '', FIELD_ID_SIZE);
        $conditionCurriculumCurricularComponentVersion->setJsHint(_M('Enter the condition curriculum curricular component version',$module));
        $conditionCurriculumCurricularComponentVersion->setReadOnly(true);
        //$fields[] = $conditionCurriculumCurricularComponentVersionS;

        $conditionCurriculumCurricularComponentName = new MTextField('conditionCurriculumCurricularComponentName', $this->getFormValue('conditionCurriculumCurricularComponentName', $data->conditionalCurriculumCurricularComponentName), '', FIELD_DESCRIPTION_SIZE);
        $conditionCurriculumCurricularComponentName->setJsHint(_M('Enter the condition curriculum curricular component name',$module));
        $conditionCurriculumCurricularComponentName->setReadOnly(true);
        //$fields[] = $conditionCurriculumCurricularComponentNameS;

        $hctConditionCurriculumCurricularComponent = new MHContainer('hctConditionCurriculumCurricularComponent', array($conditionCurriculumCurricularComponentLabel, $conditionCurriculumCurricularComponentId, $conditionCurriculumCurricularComponentVersion, $conditionCurriculumCurricularComponentName));
        $hctConditionCurriculumCurricularComponent->setShowLabel(true);
        $fields[]  = $hctConditionCurriculumCurricularComponent;

        $type = new MSelection('type', $this->getFormValue('type', $data->type), _M('Type', $module), array( 'P' => _M('Pre', $module), 'C' => _M('Co', $module) ) );
        $type->setJsHint(_M('Enter the type', $module));
        $fields[] = $type;
        $validators[] = new MRequiredValidator('type');

        $credits = new MTextField('credits', $this->getFormValue('credits', $data->credits), _M('Credits',$module), 10);
        $credits->setJsHint(_M('Enter the credits', $module));
        $validators[] = new MRegExpValidator('credits','','(^-?[0-9][0-9]*$)');
        $fields[] = $credits;

        $numberHour = new MTextField('numberHour', $this->getFormValue('numberHour', $data->numberHour), _M('Number hour',$module), 10);
        $numberHour->setJsHint(_M('Enter the number hours', $module));
        $validators[] = new MRegExpValidator('numberHour','','(^-?[0-9][0-9]*$)');
        $fields[] = $numberHour;

        $busEducationArea = $MIOLO->getBusiness($module,'BusEducationArea');
        $educationAreaId = new MComboBox('educationAreaId', $this->getFormValue('educationAreaId', $data->educationAreaId), _M('Education area (technical)', $module), $busEducationArea->listEducationArea());
        $fields[] = $educationAreaId;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'conditionId' => MIOLO::_request('conditionId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('conditionIdS' => MIOLO::_request('conditionId'));
        $goto   = SAGU::getStackBackUrl();
        $gotoNo = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCondition');
        $ok = $business->deleteCondition($this->conditionId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        $filters1->courseId                   = MIOLO::_request('curriculumCourseId');
        $filters1->courseVersion              = MIOLO::_request('curriculumCourseVersion');
        $filters1->curricularComponentId      = MIOLO::_request('curriculumCurricularComponentId');
        $filters1->curricularComponentVersion = MIOLO::_request('curriculumCurricularComponentVersion');
        $filters1->courseUnitId               = MIOLO::_request('curriculumCourseUnitId');
        $filters1->courseTurnId               = MIOLO::_request('curriculumCourseTurnId');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCondition');


        if ( $function == 'update' )
        {
            $ok  = $business->updateCondition($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCondition($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('conditionIdS'=> $data->conditionId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        $data = new AcdCondition();
        $data->conditionId                    = $this->conditionId->value;

        $filters1->courseId                   = $this->curriculumCourseId->value;
        $filters1->courseVersion              = $this->curriculumCourseVersion->value;
        $filters1->curricularComponentId      = $this->curriculumCurricularComponentId->value;
        $filters1->curricularComponentVersion = $this->curriculumCurricularComponentVersion->value;
        $filters1->courseUnitId               = $this->curriculumCourseUnitId->value;
        $filters1->courseTurnId               = $this->curriculumCourseTurnId->value;

        $searchCurriculum   = $businessCurriculum->searchCurriculum($filters1);

        $curriculumMsg = '';

        if ( count($searchCurriculum) == 1 )
        {
            $curriculumId = $searchCurriculum[0][0];
        }
        else
        {
            $curriculumMsg .= _M('Impossible to find the correct curriculum id for ', $module) . $this->curriculumCurricularComponentId->value . '(' . $this->curriculumCurricularComponentVersion->value . '). ';
        }

        //$conditionCurriculumId
        $filters2->courseId                   = $this->curriculumCourseId->value;
        $filters2->courseVersion              = $this->curriculumCourseVersion->value;
        $filters2->curricularComponentId      = $this->conditionCurriculumCurricularComponentId->value;
        $filters2->curricularComponentVersion = $this->conditionCurriculumCurricularComponentVersion->value;
        $filters2->courseUnitId               = $this->curriculumCourseUnitId->value;
        $filters2->courseTurnId               = $this->curriculumCourseTurnId->value;

        $searchConditionalCurriculum          = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchConditionalCurriculum) == 1 )
        {
            $conditionCurriculumId       = $searchConditionalCurriculum[0][0];
        }
        elseif ( ( strlen((string)$this->conditionCurriculumCurricularComponentId->value) ) &&
                 ( strlen((string)$this->conditionCurriculumCurricularComponentVersion->value) ) )
        {
            $curriculumMsg .= '<br>' . _M('Impossible to find the correct condition curriculum id for ', $module) . $this->conditionCurriculumCurricularComponentId->value . '(' . $this->conditionCurriculumCurricularComponentVersion->value . '). ';
        }

        if (strlen((string)$curriculumMsg) > 0)
        {
            $opts = array('function'      => $function,
                          'curriculumCourseId'      => $this->curriculumCourseId->value,
                          'curriculumCourseVersion' => $this->curriculumCourseVersion->value,
                          'curriculumCurricularComponentId' => $this->curriculumCurricularComponentId->value,
                          'curriculumCurricularComponentVersion' => $this->curriculumCurricularComponentVersion->value,
                          'curriculumCurricularComponentName'=>$this->curriculumCurricularComponentName->value,
                          'conditionCurriculumCurricularComponentId'=>$this->conditionCurriculumCurricularComponentId->value,
                          'conditionCurriculumCurricularComponentVersion'=>$this->conditionCurriculumCurricularComponentVersion->value,
                          'conditionCurriculumCurricularComponentName'=>$this->conditionCurriculumCurricularComponentName->value,
                          'type' => $this->type->value,
                          'credits' => $this->credits->value,
                          'numberHour' => $this->numberHour->value,
                          'educationAreaId' => $this->educationAreaId->value,
                          'conditionId' => $this->conditionId->value,
                          'isHaveDiv' => 't');

            $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));

/*            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $curriculumMsg, $goto, $caption );*/
        }

        $data->curriculumId           = $curriculumId;/*$this->curriculumId->value;*/
        $data->conditionCurriculumId  = $conditionCurriculumId;/*$this->conditionCurriculumId->value;*/
        $data->form                   = $this->form->value;
        $data->type                   = $this->type->value;
        $data->credits                = $this->credits->value;
        $data->numberHour             = $this->numberHour->value;
        $data->educationAreaId        = $this->educationAreaId->value;

        return $data;
    }

}

?>
