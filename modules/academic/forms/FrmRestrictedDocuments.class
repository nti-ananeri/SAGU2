<?php

/**
 * Restricted restricted documents form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a restricted documents record
 **/
class FrmRestrictedDocuments extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            // obtain primary key values
            $restrictedDocumentId = MIOLO::_request('restrictedDocumentId');

            $business = $MIOLO->getBusiness($module,'BusRestrictedDocuments');
            $data = $business->getRestrictedDocuments($restrictedDocumentId);

            $fields[] = new MHiddenField('restrictedDocumentId', MIOLO::_request('restrictedDocumentId'));
        }

        $documentTypeLabel = new MText('documentTypeLabel', _M('Document',$module).':');
        $documentTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $documentTypeLabel->setClass('m-caption m-caption-required');

        $documentTypeId = new MLookupTextField('documentTypeId', $this->getFormValue('documentTypeId', $data->documentTypeId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'documentTypeName', 'basic', 'DocumentType', null, null, true);
        $documentTypeId->setJsHint(_M('Enter the document type code',$module));
        $validators[] = new MIntegerValidator('documentTypeId', _M('Document', $module), 'required');

        $documentTypeName = new MTextField('documentTypeName', $this->getFormValue('documentTypeName', $data->documentTypeName), '', FIELD_DESCRIPTION_SIZE);
        $documentTypeName->setJsHint(_M('Document type name',$module));
        $documentTypeName->setReadOnly(true);

        $hctDocumentType = new MHContainer('hctDocumentType', array($documentTypeLabel, $documentTypeId, $documentTypeName));
        $hctDocumentType->setShowLabel(true);
        $fields[]   = $hctDocumentType;

        //course
        $courseLabel = new MText('courseLabel', _M('Course',$module).':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                'courseVersion,courseName,unitId,unitDescription,turnId,turnDescription,limbo,limbo,limbo,limbo,limbo,formationLevelId,formationLevelDescription',
                'academic', 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Course version',$module));
        //$courseVersion->setReadOnly(true);

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Course name',$module));
        $courseName->setReadOnly(true);

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]   = $hctCourse;

        //formationLevel
        $formationLevelLabel = new MText('formationLevelLabel', _M('Formation level',$module).':');
        $formationLevelLabel->setWidth(FIELD_CONTAINER_SIZE);

        $formationLevelId = new MLookupTextField('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                'formationLevelDescription',
                'academic', 'FormationLevel', null, array('formationLevelId' => 'formationLevelId'), true);
        $formationLevelId->setJsHint(_M('Enter the formation level code',$module));

        $formationLevelDescription = new MTextField('formationLevelDescription', $this->getFormValue('formationLevelDescription', $data->formationLevelDescription), '', FIELD_DESCRIPTION_SIZE);
        $formationLevelDescription->setJsHint(_M('Formation level description',$module));
        $formationLevelDescription->setReadOnly(true);

        $hctFormationLevel = new MHContainer('hctformationLevel', array($formationLevelLabel, $formationLevelId, $formationLevelDescription));
        $hctFormationLevel->setShowLabel(true);
        $fields[]   = $hctFormationLevel;

        $business = $MIOLO->getBusiness('basic','BusTurn');
        $turnId = new MComboBox('turnId', $this->getFormValue('turnId', $data->turnId), _M('Turn id',$module), $business->listTurn(), false, '', FIELD_ID_SIZE);
        $turnId->setJsHint( _M('Choose the turn code',$module) );
        $fields[] = $turnId;

        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unit id',$module), $business->listUnit(), false, '', FIELD_ID_SIZE);
        $unitId->setJsHint( _M('Choose the unit',$module) );
        $fields[] = $unitId;

        $isInLabel = new MText('isInLabel', _M('Obligator',$module) . '?');
        $isInLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isIn = strlen((string)$this->GetFormValue('isIn',$data->isIn))>0 ? $this->GetFormValue('isIn',$data->isIn) : 'f';
        $isIn = new MRadioButtonGroup('isIn', '', SAGU::listTrueFalse(1), $isIn, null, 'horizontal');
        $isIn->setShowLabel(false);

        $hctIsIn  = new MHContainer('hctIsIn', array($isInLabel, $isIn));
        $fields[] = $hctIsIn;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->page->onLoad('document.' . $this->name . '.documentTypeId.focus()');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'                => 'tbBtnDelete_confirm',
                        'function'             => 'delete',
                        'restrictedDocumentId' => $data->restrictedDocumentId);

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('restrictedDocumentIdS' => MIOLO::_request('restrictedDocumentId'),
                        'event' => 'btnSearch_click');

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusRestrictedDocuments');
        $ok = $business->deleteRestrictedDocuments($this->restrictedDocumentId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusRestrictedDocuments');

        if ( $function == 'update' )
        {
            $ok  = $business->updateRestrictedDocuments($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertRestrictedDocuments($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('restrictedDocumentIdS' => $data->restrictedDocumentId,
                          'event' => 'btnSearch_click');

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdRestrictedDocuments();
        $data->restrictedDocumentId      = $this->restrictedDocumentId->value;
        $data->documentTypeId            = $this->documentTypeId->value;
        $data->documentTypeName          = $this->documentTypeName->value;
        $data->formationLevelId          = $this->formationLevelId->value;
        $data->formationLevelDescription = $this->formationLevelDescription->value;
        $data->courseId                  = $this->courseId->value;
        $data->courseVersion             = $this->courseVersion->value;
        $data->courseName                = $this->courseName->value;
        $data->turnId                    = $this->turnId->value;
        $data->turnDescription           = $this->turnDescription->value;
        $data->unitId                    = $this->unitId->value;
        $data->unitDescription           = $this->unitDescription->value;
        $data->isIn                      = $this->isIn->value;

        return $data;
    }

}

?>
