<?php

/**
 * ComplementaryActivitiesCategory form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br] 
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 11/01/2007
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a complementaryActivitiesCategory
 **/
class FrmComplementaryActivitiesCategoryRules extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        if ( in_array($function, array('update', 'delete')) )
        {
            $complementaryActivitiesCategoryRulesId = $_GET['complementaryActivitiesCategoryRulesId'] ? $_GET['complementaryActivitiesCategoryRulesId'] : $_POST['complementaryActivitiesCategoryRulesId'];

            $fields[]  = new MHiddenField('complementaryActivitiesCategoryRulesId', $complementaryActivitiesCategoryRulesId);

            $business = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');
            $data     = $business->getComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId);

            $businessCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');
            $dataCurriculum     = $businessCurriculum->getCurriculum($data->curriculumId);

            $data->courseId               = $dataCurriculum->courseId;
            $data->curricularComponentId  = $dataCurriculum->curricularComponentId;
            $data->courseVersion          = $dataCurriculum->courseVersion;
            $data->courseName             = $dataCurriculum->courseName;

            $data->turnId                 = $dataCurriculum->turnId;
            $data->unitId                 = $dataCurriculum->unitId;

            $businessTurn                 = $MIOLO->getBusiness('basic', 'BusTurn');
            $businessUnit                 = $MIOLO->getBusiness('basic', 'BusUnit');

            $dataTurn                     = $businessTurn->getTurn($data->turnId);
            $dataUnit                     = $businessUnit->getUnit($data->unitId);

            $data->turnDescription        = $dataTurn->description;
            $data->unitDescription        = $dataUnit->description;

            $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName', 'unitId', 'unitDescription', 'turnId', 'turnDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), $this->page->isPostBack());
        }
        else
        {
            $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName', 'unitId', 'unitDescription', 'turnId', 'turnDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), true);
        }

        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[]  = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        //$validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        //$validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        $curriculumTypeId = new MHiddenField('curriculumTypeId', ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY);
        $fields[] = $curriculumTypeId;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('curricularComponentVersion', 'curricularComponentName'), $module, 'CurricularComponentInCurriculum', null, array('courseId'=>'courseId', 'curriculumTypeId'=>'curriculumTypeId', 'courseVersion' => 'courseVersion', 'curricularComponentId' => 'curricularComponentId', 'unitId' =>'unitId', 'turnId' => 'turnId'), true);

        $flds[]                = $curricularComponentId;
        $validators[]          = new MRequiredValidator('curricularComponentId', _M('Curricular component',$module));

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        $businessCC = $this->manager->getBusiness($module,'BusComplementaryActivitiesCategory');
        $dataCC     = $businessCC->listComplementaryActivitiesCategory();

        $complementaryActivitiesCategoryId = new MSelection('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Complementary activity category',$module), $dataCC );
        $fields[] = $complementaryActivitiesCategoryId;
        $validators[]  = new MIntegerValidator('complementaryActivitiesCategoryId', _M('Complementary activity category id',$module), 'required');

        $minimumHours = new MTextField('minimumHours', $this->getFormValue('minimumHours', $data->minimumHours), _M('Minimum hours',$module), FIELD_ID_SIZE);
        $fields[] = $minimumHours;
        $validators[]  = new MRequiredValidator('minimumHours');

        $maximumHours = new MTextField('maximumHours', $this->getFormValue('maximumHours', $data->maximumHours), _M('Maximum hours',$module), FIELD_ID_SIZE);
        $fields[] = $maximumHours;
        $validators[]  = new MRequiredValidator('maximumHours');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        //$this->page->onLoad('document.' . $this->name . '.complementaryActivitiesCategoryDescription.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $this->$var->value = $this->getFormValue($var . 'S', '');
            }
        }

//        $this->complementaryActivitiesCategoryDescription->value = $this->getFormValue('complementaryActivitiesCategoryDescriptionS','');
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'complementaryActivitiesCategoryRulesId'=>MIOLO::_request('complementaryActivitiesCategoryRulesId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');
        $ok = $business->deleteComplementaryActivitiesCategoryRules($this->complementaryActivitiesCategoryRulesId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusComplementaryActivitiesCategoryRules');

        if ( $function == 'update' )
        {
            $ok  = $business->updateComplementaryActivitiesCategoryRules($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertComplementaryActivitiesCategoryRules($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('courseIdS' => $data->courseId,
                          'curricularComponentIdS' => $data->curricularComponentId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');

//         $complementaryActivitiesCategoryRulesId = MIOLO::_request('complementaryActivitiesCategoryRulesId');

        $data = new acdComplementaryActivitiesCategoryRules();

        $filter->courseId              = $this->courseId->value;
        $filter->curricularComponentId = $this->curricularComponentId->value;
        $filter->courseVersion         = $this->courseVersion->value;
        $filter->turnId                = $this->turnId->value;
        $filter->unitId                = $this->unitId->value;
        $data->courseId                = $filter->courseId;
        $data->curricularComponentId   = $filter->curricularComponentId;
        $data->unitId                  = $filter->unitId;
        $data->turnId                  = $filter->turnId;

        $dataCurriculum        = $businessCurriculum->searchCurriculum($filter);

        $data->curriculumId    = $dataCurriculum[0][0];
        $data->complementaryActivitiesCategoryId = $this->complementaryActivitiesCategoryId->value;
        $data->minimumHours = $this->minimumHours->value;
        $data->maximumHours = $this->maximumHours->value;

        $data->complementaryActivitiesCategoryRulesId = $this->complementaryActivitiesCategoryRulesId->value;
        $data->description = $this->complementaryActivitiesCategoryDescription->value;
        return $data;
    }

}

?>
