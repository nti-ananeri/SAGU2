<?php

/**
 * Contract document form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/11/2007
 *
 * \b Organization: \n
 * iSolution - Soluções Interativas \n
 * The Isolution Team
 *
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmContractGraduation extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Contract', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Graduation contract', $this->home, 'contract-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');


        $fields[] = new MSeparator();

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personLabel->setClass('m-caption m-caption-required');
        $flds[]      = $personLabel;


        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName','courseId','courseName','courseVersion','turnId','turnName','unitId','unitName'), $module, 'PersonContract', null, null, true);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $flds[]       = $personId;
        
		$personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

		$contractId = new MHiddenField('contractId',$this->contractId->value,_M('Contract',$module));
        $flds[]  = $contractId;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);
        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');
        $courseId     = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', FIELD_ID_SIZE);
		$courseId->setReadOnly(true);
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName->value), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
		$fields[]  = $hctCourse;
        
        $unitLabel = new MText('unitLabel', _M('Unit',$module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $unitName = new MTextField('unitName', $this->getFormValue('unitName',$this->unitName->value), '', FIELD_DESCRIPTION_SIZE);
        $unitName->setReadOnly(true);

		$turnId     = new MHiddenField('turnId', $this->getFormValue('turnId',$this->turnId->value), '', FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('turnId');
		$fields[] = $turnId;

        $turnName = new MTextField('turnName', $this->getFormValue('turnName',$this->turnName->value), '', 20);
        $turnName->setReadOnly(true);
		
		$turnLabel = new MText('turnLabel', _M('Turn',$module) . ':');
       // $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId = new MHiddenField('unitId', $this->getFormValue('unitId',$this->unitId->value), '', FIELD_ID_SIZE);
		$validators[] = new MRequiredValidator('unitId');
		$fields[] = $unitId;

        $hctTurnUnit = new MHContainer('hctTurnUnit', array($unitLabel,$unitName,$turnLabel,$turnName),'&nbsp;');
        $hctTurnUnit->setShowLabel(true);
		$fields[]  = $hctTurnUnit;
		$fields[] = new MSeparator();
		//$radSituationValue = MIOLO::_request('radSituation','POST');
		
		$msgEnroll = _M('The next learning period will be informed.\\n If you wish to reprint a Graduation Contract, try to choose the option Reprint.',$module); 
		$msgNoContract = _M('Theres no contract selected.\\n Please, try to select one first.',$module);
        $optE   = new MOption('optE', 'E', _M('Enrolled', $module), false);
		$onClickE =	'
			if( document.getElementById(\'contractId\').value == \'\') 
			{ 
				alert(\''.$msgNoContract.'\'); 
				return false; 
			} 
			else 
			{
				alert(\''.$msgEnroll.'\');
				document.'.$this->getName().'.submit();
			}';
		$optE->addAttribute('onClick',$onClickE);
        $opts[] = $optE;
		$optR = new MOption('optR', 'R', _M('Reprint',$module),false);
		$optR->addAttribute('onClick','document.'. $this->getName() . '.submit();');
		$opts[] = $optR;
        if ( MODULE_SELECTIVEPROCESS_INSTALLED == 'YES' )
        {
			$optF   = new MOption('optF', 'F', _M('Freshmen', $module), false);
			//$msg    = _M('INFORMATION!\\nYou are trying to print the Contract of Rendering of Services for Freshmen\\n. This possible being, informs the code of the Selective Process in the field Selective Process.\\nMoreover, set the option beside for which the candidate classified.\\nWARNING: Executing this operation the Educational Services Contract\\nNumber (999999/99X) of the pupils will be recodified!!!', $module);
			$optF->addAttribute('onClick','document.' . $this->getName() . '.submit();');
			$opts[] = $optF;
		}
        $radSituationLabel = new MText('radSituationLabel', _M('Situation of pupil', $module) . ':');
        $radSituationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radSituationLabel->setClass('m-caption m-caption-required');
        $flds[]            = $radSituationLabel;
        $radSituation = new MRadioButtonGroup('radSituation', '', $opts, $this->getFormValue('radSituation', $this->radSituation->value), '', 'vertical');
        $radSituation->setShowLabel(false);
        $flds[]       = $radSituation;
        unset($opts);
        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        if ( is_null($this->getFormValue('periodId', $data->periodId)) ||
             strlen((string)$this->getFormValue('periodId', $data->periodId)) == 0 )
        {
            $periodIdValue = CURRENT_PERIOD_ID;
        }
        else
        {
            $periodIdValue = $this->getFormValue('periodId', $data->periodId);
        }

        $periodId = new MComboBox('periodId', $periodIdValue, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');

        $hctSituation = new MHContainer('hctSituation', $flds);
        $hctSituation->setShowLabel(false);
        $hctSituation->setAutoPostBack(true);
        unset($flds);
		//$fields[]     = $hctSituation;
		if(strlen((string)$radSituation->value) > 0)
		{
			switch(strtoupper($radSituation->value))
			{
				case 'R':
							
					break;
				case 'E':
					$data->courseId = $courseId->value;
					$data->couseVersion = $courseVersion->value;
					$data->turnId = $turnId->value;
					$data->unitId = $unitId->value;
					$data->endDate = date('d-m-Y');
					$data->periodId = CURRENT_PERIOD_ID;
					$businessLearningPeriod = $MIOLO->getBusiness($module,'BusLearningPeriod');
					$periods = $businessLearningPeriod->searchLearningPeriod($data);
					$learningPeriods = new MComboBox('learningPeriodId','',_M('Learning period',$module),$periods);
					$validators[] = new MRequiredValidator('learningPeriodId');
					$fields[] = $learningPeriods;
					break;
			}
		}
		$opts[] = new MOption('optNormal', 'normal', 'normal', true);
/*        $opts[] = new MOption('optProuni', 'prouni', 'prouni', false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType; */
	$fields[] = new Separator();
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->page->onLoad('document.' . $this->name . '.personId.focus()');
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
	    $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        $action = MIOLO::getCurrentAction();
	
        $cd->contractId         = MIOLO::_request('contractId'); 
	    $cd->personId		    = MIOLO::_request('personId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->situation          = MIOLO::_request('radSituation');
        $cd->periodId           = MIOLO::_request('periodId');
        set_time_limit(0);
		$busContract  = $MIOLO->getBusiness('academic','BusAcademicDocuments');
		$contract = $busContract->getInfos($cd);
        $contract->periodId = $cd->periodId;
//        $contract->contractText = 'teste';
        $MIOLO->getClass($module, 'RptContractDocument');
	    $report = new RptContractDocument($contract);
    }
}

?>
