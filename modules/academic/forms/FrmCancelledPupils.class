<?php

/**
 * Letter for cancelled pupils form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/06/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmCancelledPupils extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Cancelled pupils', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Cancelled pupils', $this->home, 'cancelledPupils-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $fields[] = new MSeparator();

        $business        = $MIOLO->getBusiness($module, 'BusPeriod');
        $currentPeriodId = new MComboBox('currentPeriodId', strlen((string)$this->getFormValue('currentPeriodId', $data->periodId))>0 ? $this->getFormValue('currentPeriodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Current period', $module), $business->listPeriod());  
        $currentPeriodId->setClass('m-caption m-caption-required');
        $validators[]    = new MRequiredValidator('currentPeriodId', '', 'required');
        $fields[]        = $currentPeriodId;
        $fields[]        = new MSeparator();

        $periodTextLabel = new MText('periodTextLabel', _M('Period of to be printed the letters', $module));
        $fields[]        = $periodTextLabel;
        $fields[]        = new MSeparator();        

        $lastPeriodIdOne = new MComboBox('lastPeriodIdOne', $this->getFormValue('lastPeriodIdOne', $data->periodId), _M('Last period one', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('lastPeriodIdOne');
        $fields[]        = $lastPeriodIdOne;
        $fields[]        = new MSeparator();

 
        $lastPeriodIdTwo = new MComboBox('lastPeriodIdTwo', $this->getFormValue('lastPeriodIdTwo', $data->periodId), _M('Last period two', $module), $business->listPeriod());
        $fields[]        = $lastPeriodIdTwo;
        $fields[]        = new MSeparator();
 
        $lastPeriodIdThree = new MComboBox('lastPeriodThree', $this->getFormValue('lastPeriodIdThree', $data->periodId), _M('Last period three', $module), $business->listPeriod());
        $fields[]          = $lastPeriodIdThree;
        $fields[]          = new MSeparator();
 
        $lastPeriodIdFour = new MComboBox('lastPeriodIdFour', $this->getFormValue('lastPeriodIdFour', $data->periodId), _M('Last period four', $module), $business->listPeriod());
        $fields[]         = $lastPeriodIdFour;
        $fields[]         = new MSeparator();
 
        $lastPeriodIdFive = new MComboBox('lastPeriodIdFive', $this->getFormValue('lastPeriodIdFive', $data->periodId), _M('Last period five', $module), $business->listPeriod());
        $fields[]         = $lastPeriodIdFive;
        $fields[]         = new MSeparator();
 
        $reingressionSemesterLabel = new MText('reingressionSemesterLabel', _M('Reingression semester', $module) . ':');
        $reingressionSemesterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reingressionSemesterLabel->setClass('m-caption m-caption-required');
        $flds[]                    = $reingressionSemesterLabel;

//         if ( ! strlen((string)$reingressionSemester) > 0 )
//         {
//             $reingressionSemester = CURRENT_PERIOD_ID;
//         }

        $reingressionSemester = new MTextField('reingressionSemester', $this->getFormValue('reingressionSemester', $reingressionSemester), '', 5);
        $flds[]               = $reingressionSemester;
        $validators[] = new MRequiredValidator('reingressionSemester', _M('Reingression semester', $module) , 'required');

        $hctReingressionSemester = new MContainer('$hctReingressionSemester', $flds);
        unset($flds);
        $fields[]                = $hctReingressionSemester;
        $fields[]                = new MSeparator();

        $reingressionDateLabel = new MText('reingressionDateLabel', _M('Request date for reingression', $module) . ':');
        $reingressionDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reingressionDateLabel->setClass('m-caption m-caption-required');
        $flds[]                = $reingressionDateLabel;

        $reingressionDateDay = new MTextField('reingressionDateDay', '', '', 2);
        $flds[]              = $reingressionDateDay;
        $validators[]        = new MIntegerValidator('reingressionDateDay', _M('Reingression day'), 'required');

        $reingressionDateLabel1 = new MText('reingressionDateLabel1', '/');
        $flds[]                 = $reingressionDateLabel1;

        $reingressionDateMonth = new MTextField('reingressionDateMonth', '', '', 2);
        $flds[]                = $reingressionDateMonth;
        $validators[]        = new MIntegerValidator('reingressionDateMonth', _M('Reingression month'), 'required');

        $reingressionDateLabel2 = new MText('reingressionDateLabel2', '/');
        $flds[]                 = $reingressionDateLabel2;

        $reingressionDateYear = new MTextField('reingressionDateYear', '', '', 5);
        $flds[]               = $reingressionDateYear;
        $validators[]        = new MIntegerValidator('reingressionDateYear', _M('Reingression year'), 'required');


        $hctReingressionDate = new MContainer('hctReingressionDate', $flds);
        unset($flds);
        $fields[]            = $hctReingressionDate; 
	$fields[]            = new MSeparator();

	$reingressionPeriodLabel = new MText('reingressionPeriodLabel', _M('Period for reingression', $module) . ':');
	$reingressionPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reingressionPeriodLabel->setClass('m-caption m-caption-required');
	$flds[]                  = $reingressionPeriodLabel;
     
	$reingressionPeriodDay = new MTextField('reingressionPeriodDay', '', '', 2);
	$flds[]             = $reingressionPeriodDay;
        $validators[]        = new MIntegerValidator('reingressionPeriodDay', _M('Reingression period day'), 'required');

 	$reingressionPeriodLabel1 = new MText('reingressionPeriodLabel1', '/');
        $flds[]                   = $reingressionPeriodLabel1;
		
        $selMonth = new MSelection('selMonth', $this->getFormValue('selMonth',$currDate['mon']), '', SAGU::listMonths());
        $flds[]   = $selMonth;
        $validators[]        = new MIntegerValidator('selMonth', _M('Reingression period month'), 'required');

 	$reingressionPeriodLabel2 = new MText('reingressionPeriodLabel2', _M('To', $module));
        $flds[]                   = $reingressionPeriodLabel2;

	$reingressionPeriodDay1 = new MTextField('reingressionPeriodDay1', '', '', 2);
	$flds[]              = $reingressionPeriodDay1;

        $validators[]        = new MIntegerValidator('reingressionPeriodDay1', _M('Reingression period day to'), 'required');

 	$reingressionPeriodLabel3 = new MText('reingressionPeriodLabel3', '/');
        $flds[]                   = $reingressionPeriodLabel3;	

        $selMonth1 = new MSelection('selMonth1', $this->getFormValue('selMonth1',$currDate['mon']), '', SAGU::listMonths());
        $flds[]   = $selMonth1;
        $validators[]        = new MIntegerValidator('selMonth1', _M('Reingression period month to'), 'required');

 	$reingressionPeriodLabel4 = new MText('reingressionPeriodLabel4', '/');
        $flds[]                   = $reingressionPeriodLabel4;

        $selYear = new MSelection('selYear', $this->getFormValue('selYear',$currDate['mon']), '', SAGU::listYears(date('Y'), date('Y')+10));
        $flds[] = $selYear;
        $validators[]        = new MIntegerValidator('selYear', _M('Reingression period year to'), 'required');

	$hctReingressionPeriod = new MContainer('hctReigressionPeriod', $flds);
	unset($flds);
        $fields[]              = $hctReingressionPeriod; 
        $fields[]              = new MSeparator(); 
 
        $firstCurricularComponentPayLabel = new MText('firstCurricularComponentPayLabel', _M('Pay date of first curricular component', $module) . ':');
        $firstCurricularComponentPayLabel->setWidth(FIELD_CONTAINER_SIZE);
        $firstCurricularComponentPayLabel->setClass('m-caption m-caption-required');
        $flds[]                          = $firstCurricularComponentPayLabel;

        $firstCurricularComponentPayDay = new MTextField('firstCurricularComponentPayDay', '', '', 2);
        $flds[]                         = $firstCurricularComponentPayDay; 
        $validators[]        = new MIntegerValidator('firstCurricularComponentPayDay', _M('First curricular component pay day'), 'required');

        $firstCurricularComponentPayLabel1 = new MText('firstCurricularComponentPayLabel1', '/');
        $flds[]                            = $firstCurricularComponentPayLabel1;
       
        $firstCurricularComponentPayMonth = new MTextField('firstCurricularComponentPayMonth', '', '', 2);
	$flds[]                           = $firstCurricularComponentPayMonth;         
        $validators[]        = new MIntegerValidator('firstCurricularComponentPayMonth', _M('First curricular component pay month'), 'required');

	$firstCurricularComponentPayLabel2 = new MText('firstCurricularComponentPayLabel2', '/');
        $flds[]                            = $firstCurricularComponentPayLabel2;

	$firstCurricularComponentPayYear = new MTextField('firstCurricularComponentPayYear', '', '', 5);
	$flds[]                          = $firstCurricularComponentPayYear;
        $validators[]        = new MIntegerValidator('firstCurricularComponentPayYear', _M('First curricular component pay year'), 'required');

	$hctfirstCurricularComponentPay = new MHContainer('hctfirstCurricularComponentPay', $flds);
        unset($flds);
        $fields[]                       = $hctfirstCurricularComponentPay;

        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

	$divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                           = MIOLO::getInstance();
        $module                          = MIOLO::getCurrentModule();
        $action                          = MIOLO::getCurrentAction();
        $cd->currentPeriodId             = MIOLO::_request('currentPeriodId');
        $cd->lastPeriodOne               = MIOLO::_request('lastPeriodIdOne');
        $cd->lastPeriodTwo               = MIOLO::_request('lastPeriodIdTwo');
        $cd->lastPeriodThree             = MIOLO::_request('lastPeriodThree');
        $cd->lastPeriodFour              = MIOLO::_request('lastPeriodIdFour');
        $cd->lastPeriodFive              = MIOLO::_request('lastPeriodIdFive');
        $cd->reingressionSemester        = MIOLO::_request('reingressionSemester');
        $cd->reingressionDateDay         = MIOLO::_request('reingressionDateDay');
        $cd->reingressionDateMonth	 = MIOLO::_request('reingressionDateMonth');
        $cd->reingressionDateYear        = MIOLO::_request('reingressionDateYear');
        $cd->reingressionPeriodDay       = MIOLO::_request('reingressionPeriodDay');
        $cd->reingressionPeriodDay1      = MIOLO::_request('reingressionPeriodDay1');
        $cd->selMonth                    = MIOLO::_request('selMonth');		
        $cd->selMonth1                   = MIOLO::_request('selMonth1');
        $cd->selYear                     = MIOLO::_request('selYear');
        $cd->curricularComponentPayDay   = MIOLO::_request('firstCurricularComponentPayDay');
        $cd->curricularComponentPayMonth = MIOLO::_request('firstCurricularComponentPayMonth');
        $cd->curricularComponentPayYear  = MIOLO::_request('firstCurricularComponentPayYear');
        $cd->fileType                    = MIOLO::_request('radFileType');
        $cd->emissionDate                = MIOLO::_request('emissionDate');

        //pega os dados da instituicao
        $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
        $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCancelledPupils = $MIOLO->getBusiness($module, 'BusCancelledPupils');
        $data         = $businessCancelledPupils->getPupilsCancelleds($cd);

        if ( is_array($data) && ( count($data) > 0 ) )
        {
            //pega os dados do aluno
    //         $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
    //         $physicalPerson         = $businessPhysicalPerson->getPhysicalPerson($cd->personId);
    
            //pega dados cidade do aluno 
    // 	$cd->cityId         = $physicalPerson->cityId;
    // 	$businessCityPerson = $MIOLO->getBusiness('basic', 'BusCity');
    // 	$cityPerson         = $businessCityPerson->getCity($cd->cityId);
    // 
    // 	//pega estado do aluno
    //         $cd->stateId   = $cityPesron->stateId;
    // 	$cd->countryId = $cityPerson->countryId;
    // 	$businessState = $MIOLO->getBusiness('basic', 'BusState'); 
    // 	$state         = $businessState->getState($cd->stateId, $cd->countryId);
    
            $MIOLO->uses('/core/AgataAPI.class');
            $MIOLO->uses('classes/sagu.class', 'basic');
    
            set_time_limit(0);
    
            $api = new AgataAPI;
    
            $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
            $api->setParameter('$emissionDate', SAGU::getDateByExtense($cd->emissionDate));
            $api->setParameter('$semester', $cd->reingressionSemester);
            $api->setParameter('$fakeName', $legalPerson->fakeName);
            $api->setParameter('$dateDay', $cd->reingressionDateDay);
            $api->setParameter('$dateMonth', SAGU::getMonth($cd->reingressionDateMonth));
            $api->setParameter('$dateYear', $cd->reingressionDateYear);
            $api->setParameter('$startReingressionPeriod', $cd->reingressionPeriodDay);
            $api->setParameter('$startMonth', SAGU::getMonth($cd->selMonth));
            $api->setParameter('$finalReingressionPeriod', $cd->reingressionPeriodDay1);
            $api->setParameter('$finalMonth', SAGU::getMonth($cd->selMonth1));
            $api->setParameter('$year', $cd->selYear);
            $api->setParameter('$curricularComponentPayDay', $cd->curricularComponentPayDay);
            $api->setParameter('$curricularComponentPayMonth', SAGU::getMonth($cd->curricularComponentPayMonth));
            $api->setParameter('$curricularComponentPayYear', $cd->curricularComponentPayYear);
    
    //         $api->setParameter('$personId', $physicalPerson->personId);
    //         $api->setParameter('$name', $physicalPerson->name);
    // 
    // 
    //         $api->setParameter('$institution', $legalPerson->name);
    // 
    //         $api->setParameter('$location', $physicalPerson->location);
    // 	$api->setParameter('$number', $physicalPerson->number);
    // 	$api->setParameter('$neighborhood', $physicalPerson->neighborhood);
    //         $api->setParameter('$city', $cityPerson->name);
    // 	$api->setParameter('$state', $state->name);
    // 	$api->setParameter('$zipcode', $cityPerson->zipcode);
    // 	$api->setParameter('$companyName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
    //         $api->setParameter('$periodId', $cd->periodId);
    //         $api->setParameter('$stateId', $city->stateId);
    
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/certified.sxw');
            $api->setDataArray($data);
    
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/cancelledPupilsDocument.sxw'));
    
            if ( $ok && $cd->fileType == 'pdf' )
            {
                $api->setOutputPath(TEMP_DIR . '/certified.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/certified.sxw');
            }
    
            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                //se inseriu o registro
                if ( $ok )
                {
                    $api->fileDialog();
                }
            }
        }
        else
        {
            $this->addError(_M('There are no pupils with contract unblock to this selected periods', $module));
        }
    }
}

?>
