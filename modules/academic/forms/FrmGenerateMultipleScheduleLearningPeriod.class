<?php

/**
 * GenerateMultipleScheduleLearningPeriod form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleScheduleLearningPeriod extends MForm
{
    var $turns;

    /**
     * Class constructor
     **/

    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Generate multiple schedule learning period', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('scheduleLearningPeriodId', $scheduleLearningPeriodId);

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;

        $periodId = $this->getFormValue('periodId', $MIOLO->_request('periodId'));
        $fields[] = new MHiddenField('periodId', $periodId);
        $fields[] = new MTextLabel('periodIdLabel', $periodId, _M('Period', $module));

        /*$business = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId = new MComboBox('periodId',
                                $this->getFormValue('periodId',$data->periodId),
                                _M('Period id',$module),
                                $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;*/

        $fields[] = new MSeparator('<hr>');

        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $this->turns = $business->listTurn();

        unset($turnIdOld);
        $x = 0;

        if (count($this->turns) > 0)
        {
            foreach ($this->turns as $turnData)
            {   
                list ($turnId, 
                      $turnDesc,
                      $turnShort,
                      $beginHour,
                      $endHour,
                      $charId) = $turnData;

                eval('$checkBox = new MCheckBox(\'check_' . $turnId . '\', 1, \''. $turnDesc . '\', false);');          
                $checkBox->setJsHint(_M('Click here to open the form for this turn',$module));
                $js       = 'ExpandRetractContainer(\'cntFields_' . $turnId . '\')';
                $checkBox->addAttribute('onchange', $js);
                $fields[] = $checkBox;

                eval('$flds[] = new MCalendarField(\'beginDate_' . $turnId . '\', $this->getFormValue(\'beginDate_' . $turnId . '\', $data->beginDate_' . $turnId . '), _M(\'Begin date\', $module), FIELD_DATE_SIZE);');
                eval('$validators[] = new MDATEDMYValidator(\'beginDate_' . $turnId . '\', \'\', \'optional\');');

                eval('$flds[] = new MCalendarField(\'endDate_' . $turnId . '\', $this->getFormValue(\'endDate_)'. $turnId . '\', $data->endDate_' . $turnId . '), _M(\'End date\', $module), FIELD_DATE_SIZE);');
                eval('$validators[] = new MDATEDMYValidator(\'endDate_' . $turnId . '\', \'\', \'optional\');');

                eval('$flds[] = new MTextField(\'beginHour_' . $turnId . '\',\'' . $beginHour . '\', _M(\'Begin hour\',$module), FIELD_TIME_SIZE);');
                eval('$validators[] = new MTimeValidator(\'beginHour_' . $turnId . '\', \'\', \'optional\');');

                eval('$flds[] = new MTextField(\'endHour_' . $turnId . '\',\'' . $endHour . '\', _M(\'End hour\',$module), FIELD_TIME_SIZE);');
                eval('$validators[] = new MTimeValidator(\'endHour_' . $turnId . '\', \'\', \'optional\');');

                $cntHours = new MHContainer('cntHours_' . $turnId, $flds);
                unset($flds);

                eval('$flds[] = new MTextField(\'minimumNumberLessons_' . $turnId . '\', $this->getFormValue(\'minimumNumberLessons_' . $turnId . '\', $data->minimumNumberLessons_' . $turnId . '), _M(\'Minimum number lessons\', $module), 4);');

                eval('$flds[] = new MTextField(\'numberHoursLessons_' . $turnId . '\', $this->getFormValue(\'numberHoursLessons_' . $turnId . '\', $data->numberHoursLessons_' . $turnId . '), _M(\'Number hours lessons\', $module), 4);');
                eval('$validators[] = new MIntegerValidator(\'numberHoursLessons_' . $turnId . '\', _M(\'Number hours lessons\', $module), \'optional\');');

                $cntOthers = new MVContainer('cntOthers_' . $turnId, $flds);

                $flds = array($description, $cntHours, $cntOthers);

                $cntAll = new MVContainer('cntAll_' . $turnId, $flds);

                $cntFields = new MBaseGroup('cntFields_' . $turnId, null, 'vertical');
                $cntFields->addControl($cntAll);
                $cntFields->addAttribute('style','display: none');
                unset($flds);

                $fields[] = $cntFields;
                $fields[] = new MSeparator('');
            }
        }

        $fields[] = new Separator('');

        $fields[] = new MButton('btnGenerate', _M('Generate', $module));

        $fields[] = new Separator('');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

        $js = 'function RetractContainer(cntName) {
                   document.getElementById(cntName).style.display = "none";
               }
               function ExpandContainer(cntName) {
                   document.getElementById(cntName).style.display = "block";
               }
               function ExpandRetractContainer(cntName) {
                   document.getElementById(cntName).style.display = (document.getElementById(cntName).style.display == "none" ? "block" : "none");
               }';
        $this->page->addJsCode($js);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $action          = MIOLO::getCurrentAction();

        $data            = $this->getData();

        $business        = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
        $business2       = $MIOLO->getBusiness($module, 'BusGenerateMultipleScheduleLearningPeriod');
        $business3       = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $business4       = $MIOLO->getBusiness('basic', 'BusTurn');

        $learningPeriods = unserialize(urldecode(stripslashes(MIOLO::_request('learningPeriods'))));
        $periodId        = $this->getFormValue('periodId');

        $registeredCounter = 0;
        $ignoredCounter    = 0;

        $business2->beginTransaction();

        if (count($this->turns) > 0)
        {
            //Obrigatoriedades
            foreach ($this->turns as $turnData )
            {
                list ($turnId, 
                      $turnDesc,
                      $turnShort,
                      $beginHour,
                      $endHour,
                      $charId) = $turnData;

                eval('$numberHoursLessons   = $data->numberHoursLessons_' . $turnId . ';');
                eval('$beginDate            = $data->beginDate_' . $turnId . ';');
                eval('$endDate              = $data->endDate_' . $turnId . ';');
                eval('$beginHour            = $data->beginHour_' . $turnId . ';');
                eval('$endHour              = $data->endHour_' . $turnId . ';');
                eval('$minimumNumberLessons = $data->minimumNumberLessons_' . $turnId . ';');
                eval('$check                = $data->check_' . $turnId . ';');

                if ( $check == 1 &&
                     ( strlen((string)$numberHoursLessons) == 0 || strlen((string)$beginDate) == 0 ||
                       strlen((string)$endDate) == 0 || strlen((string)$beginHour) == 0 ||
                       strlen((string)$endHour) == 0 || strlen((string)$minimumNumberLessons) == 0 ) )
                {
                    $msg  .= _M('Fields not typed to the turn', 'academic') . ' ' . $turnDesc;
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }

            foreach ($this->turns as $turnData)
            {
                list ($turnId, 
                      $turnDesc,
                      $turnShort,
                      $beginHour,
                      $endHour,
                      $charId) = $turnData;

                eval('$check = $data->check_' . $turnId . ';');

                if ($check == 1)
                {
                    eval('$sdata->beginDate            = $data->beginDate_' . $turnId . ';');
                    eval('$sdata->endDate              = $data->endDate_' . $turnId . ';');
                    eval('$sdata->beginHour            = $data->beginHour_' . $turnId . ';');
                    eval('$sdata->endHour              = $data->endHour_' . $turnId . ';');
                    eval('$sdata->minimumNumberLessons = $data->minimumNumberLessons_' . $turnId . ';');
                    eval('$sdata->numberHoursLessons   = $data->numberHoursLessons_' . $turnId . ';');

                    if ( is_array($learningPeriods) && (count($learningPeriods) > 0) )
                    {
                        foreach ($learningPeriods as $value)
                        {
                            $getLearningPeriod  = $business3->getLearningPeriod($value);

                            $getTurn            = $business4->getTurn($getLearningPeriod->turnId);

                            $sdata->description = _M('Turn', $module) . ' ' . 
                                                  $turnDesc . ' ' .
                                                  _M('course', $module) . ' ' .
                                                  $getLearningPeriod->courseId . ' ' . 
                                                  _M('version', $module). ' ' .
                                                  $getLearningPeriod->courseVersion . ' ' . 
                                                  _M('in the unit', $module) . ' ' .
                                                  $getLearningPeriod->unitId;

                            $sdata->turnId = $getLearningPeriod->turnId;

                            $sdata->learningPeriodId  = $value;

                            $checkExistence = $business->searchScheduleLearningPeriod($sdata);

                            if (count($checkExistence) > 0)
                            {
                                $ignoredCounter++;
                            }
                            else
                            {
                                $ok = $business->insertScheduleLearningPeriod($sdata);

                                if ( $ok )
                                {
                                    $registeredCounter++;
                                }
                            }
                        }
                    }
                }
            }
        }

        $ok = $business2->commit();

        if ( (($registeredCounter > 0) || ($ignoredCounter > 0)) && $ok )
        {
            $msg .= _M('@1 records inserted', $module, $registeredCounter) . '<br>' . 
                    _M('@1 records ignored' , $module, $ignoredCounter);

            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleScheduleLearningPeriodCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $opts['periodId']         = $periodId;
            $opts['learningPeriods']  = urlencode(serialize($learningPeriods));

            $msg  .= _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdScheduleLearningPeriod();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->description->value;

        return $data;

    } 

}

?>
