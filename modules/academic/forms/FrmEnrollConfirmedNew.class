<?php

/**
 * Enroll curricular components form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/10/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollConfirmedNew extends MForm
{
    var $enrollData;

    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $session     = $MIOLO->session;
        $loginUid    = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;

        $this->enrollData = unserialize(urldecode(stripslashes(MIOLO::_request('enrollData'))));

        parent::__construct(_M('Enroll confirmation', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

        if ( !( SAGU::authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess($module, ACD_ENROLL, false, true) ) )
        {
            $this->page->mGoto($MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) . ':enroll'));
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $learningPeriodId = $this->enrollData->learningPeriodId;
        $contractId       = $this->enrollData->contractId;

        $business             = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriod       = $business->getLearningPeriod($learningPeriodId);

        $fields[] = new MHiddenField('periodId', $learningPeriod->periodId);

        $fields[] = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId', $learningPeriodId));

        $txtPeriodId = new MTextField('txtPeriodId', $learningPeriod->periodId, _M('Period id',$module), FIELD_ID_SIZE);
        $txtPeriodId->setReadOnly(true);
        if (strlen((string)$this->enrollData->classId) > 0 )
        {
            $classId = new MTextField('classId', $this->getFormValue('classId', $this->enrollData->classId), _M('Class id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('className_', 'contractCourseId', 'contractCourseVersion', 'contractCourseName', 'limbo', 'turnDescription' ), $module, 'ClassCourse', null, array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
            $classId->setReadOnly(true);
            $className = new MTextField('className_', $this->getFormValue('className_', $this->enrollData->className), _M('Class name', $module), FIELD_DESCRIPTION_SIZE);
            $className->setReadOnly(true);
    
            $hctClass = new MHContainer('hctClass', array( $classId, $className));
        }
        if ( strlen((string)$this->enrollData->contractId) > 0 )
        {
            $fields[] = new MHiddenField('contractId', $this->getFormValue('contractId',$contractId));
            $txtContractId = new MTextField('txtContractId', $contractId, _M('Contract id',$module), FIELD_ID_SIZE);
            $txtContractId->setReadOnly(true);

            $business = $MIOLO->GetBusiness($module, 'BusContract');
            $contract = $business->getContract($contractId);

            $txtPersonId = new MTextField('txtPersonId', $contract->personId, _M('Person id',$module), FIELD_ID_SIZE);
            $txtPersonId->setReadOnly(true);
            $txtPersonName = new MTextField('txtPersonName', $contract->personName, _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
            $txtPersonName->setReadOnly(true);

            $cntLine1 = new MHContainer('cntLine1', array($txtPeriodId, $txtContractId, $txtPersonId, $txtPersonName));
        }

        $txtCourseId = new MTextField('txtCourseId', $this->enrollData->courseId, _M('Course id',$module), FIELD_ID_SIZE);
        $txtCourseId->setReadOnly(true);
        $txtCourseVersion = new MTextField('txtCourseVersion', $this->enrollData->courseVersion, _M('Course version',$module), FIELD_ID_SIZE);
        $txtCourseVersion->setReadOnly(true);
        $txtCourseName = new MTextField('txtCourseName', $this->enrollData->courseName, _M('Course name',$module), 60);
        $txtCourseName->setReadOnly(true);

        $cntLine2 = new MHContainer('cntLine2', array($txtCourseId, $txtCourseVersion, $txtCourseName));

        $cntContractInfo = new MBaseGroup('cntContractInfo', _M('Enroll details', $module), array($hctClass,$cntLine1, $cntLine2), 'vertical');

        $fields[] = $cntContractInfo;

        $cntSemester = new MVContainer('cntSemester');

        $oldSemester = '';
        $db = $MIOLO->getBusiness($module, 'BusEnrollNew');  
        //matricula seriada
        if ( $this->enrollData->courseType == 'SERIAL' )
        {
            //Individual
            if ( strlen((string)$this->enrollData->contractId) > 0 )
            {
                $ok = $db->beginTransaction();
                if ( $ok )
                {
                    foreach( $this->enrollData->groupId as $item => $value )
                    {
                        unset($obj);
                        $obj->groupId       = $item;
                        $obj->mode          = $value;
                        $obj->contractId    = $this->enrollData->contractId;
                        $obj->userName      = trim($MIOLO->getLogin()->id);
                        $obj->ipAddress     = trim($_SERVER['REMOTE_ADDR']);
                        $ok = $db->insertEnroll($obj);
                        if ( $ok )
                        {
                           $matriculas[$obj->contractId][$obj->groupId] = $ok;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                if ( count($matriculas) > 0 )
                {
                    if ( $db->checkMovimentContractForEnroll($this->enrollData) == 0 )
                    {
                        $db->insertMovimentContractForEnroll($this->enrollData);
                    }
                }
                $ok = $db->commit($ok);
            }
            //Turma
            else if ( strlen((string)$this->enrollData->classId) > 0 )
            {
                $contracts = $db->getPupilsInClass( $this->enrollData );
                $ok = $db->beginTransaction();
                if ( $ok )
                {
                    foreach( $contracts as $contractId )
                    {
                        foreach( $this->enrollData->groupId as $item => $value )
                        {
                            unset($obj);
                            $obj->groupId       = $item;
                            $obj->mode          = $value;
                            $obj->contractId    = $contractId;
                            $obj->periodId      = $this->enrollData->periodId;
                            $obj->userName      = trim($MIOLO->getLogin()->id);
                            $obj->ipAddress     = trim($_SERVER['REMOTE_ADDR']);
                            $ok = $db->insertClassEnroll($obj);
                            if ( $ok > 5 )
                            {
                                $matriculas[$obj->contractId][$obj->groupId] = $ok-5;
                            }
                            else
                            {
                                $naoMatriculas[$obj->contractId][$obj->groupId] = $ok;
                            }
                        }
                        if ( count($matriculas[$contractId]) > 0 )
                        {
                            if ( $db->checkMovimentContractForEnroll($obj) == 0 )
                            {
                                $db->insertMovimentContractForEnroll($obj);
                            }
                        }
                    }
                    if (count($matriculas) > 0 )
                    {

                        $ok = $db->commit(true);
                    }
                    else
                    {
                        $ok = $db->commit(false);
                    }

                    if ( count($naoMatriculas) > 0 )
                    {
                        foreach ( $naoMatriculas as $contractId => $disciplinas )
                        {
                            $this->addError ( 'Contrato '. $contractId. ' Não Matriculado');
                        }
                    }
                }
            }
        }
        if ( strlen((string)$this->enrollData->contractId) > 0 )
        {
            foreach ( $matriculas as $contract => $value )
            {
                if ( count($value) == 0 )
                {
                    break;
                }
                foreach ( $value as $groupId => $null )
                {
                    $dtGroup->groupId = $groupId;
                    $groupInfos = $db->getGroupInfo($dtGroup);
                    $groupInfo = $groupInfos[0];
                    
                    $txtStatus = new MText('txtStatus_' . $curriculumId );
                    $txtStatus->setBold(true);
                    $txtStatus->setValue('[ ' . _M('ENROLLED', $module) . ' ]');
                    $txtStatus->color = CURRICULUM_STATUS_COLOR_ENROLLED;
                    $txtStatus->addBoxStyle('width', '20%');
                    $txtCurricularComponentId = new MText('txtCurricularcomponentId_' . $curriculumId, "$groupInfo->curricularComponentId/$groupInfo->curricularComponentVersion");
                    $txtCurricularComponentId->setWidth(70);

                    $txtCurricularComponentName = new MText('txtCurricularcomponentName_' . $curriculumId, "$groupInfo->curricularComponentName");

                    $cntCurriculum = new MHContainer('cntCurriculum_' . $curriculumId, array($txtStatus, $txtCurricularComponentId, $txtCurricularComponentName));

                    $cntGroups = new MBaseGroup('cntGroups_' . $curriculumId, null, 'vertical');

                    $txtVacancies = new MText('txtVacancies_' . $groupId, _M('Vacant', $module) . ": $groupInfo->totalEnrolled/$groupInfo->vacant");
                    $txtVacancies->setWidth(600);

                    $cntGroup = new MHContainer('cntGroup_' . $groupId, array($txtVacancies));

                    $cntGroups->addControl($cntGroup);

                    if ( count($groupInfo->schedule) > 0 )
                    {
                        $cntSchedules = new MVContainer('cntSchedules_' . $groupId);
                        foreach ( $groupInfo->schedule as $schedule )
                        {
                            $filters             = new AcdScheduleProfessor();
                            $filters->scheduleId = $schedule->scheduleId;
                            $businessScheduleProfessor = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
                            unset($professors);
                            if ( strlen((string)$schedule->professorName) > 0 )
                            {
                                $professors                = $businessScheduleProfessor->searchScheduleProfessor($filters);
                            }

                            // schedule first column
                            $txtUnit = new MText('txtUnit_' . $schedule->scheduleId, _M('Unit', $module) . ": $schedule->unitDescription");
                            $txtWeekDay = new MText('txtWeekDay_' . $schedule->scheduleId, _M('Week day', $module) . ": $unit->weekDayDescription");
                            $txtPhysicalResource = new MText('txtPhysicalResource_' . $schedule->scheduleId, _M('Physical resource', $module) . ": $schedule->physicalResourceDescription");
                            $cntScheduleCol1 = new MVContainer('cntScheduleCol1_' . $schedule->scheduleId, array($txtUnit, $txtWeekDay, $txtPhysicalResource));

                            // schedule second column
                            $txtTurn = new MText('txtTurn_' . $schedule->scheduleId, _M('Turn', $module) . ": $schedule->turnDescription");
                            $txtBeginEndDate = new MText('txtBeginEndDate_' . $schedule->scheduleId, _M('Begin/End date', $module) . ": $schedule->beginDate - $schedule->endDate");
                            $txtBeginEndHour = new MText('txtBeginEndHour_' . $schedule->scheduleId, _M('Begin/End hour', $module) . ": $schedule->beginHour - $schedule->endHour");
                            $cntScheduleCol2 = new MVContainer('cntScheduleCol2_' . $schedule->scheduleId, array($txtTurn, $txtBeginEndDate, $txtBeginEndHour));

                            //$cntScheduleCol3 = new MVContainer('cntScheduleCol3_' . $schedule->scheduleId, array($txtTurn, $txtBeginEndDate, $txtBeginEndHour));

                            $cntSchedule = new MHContainer('cntSchedule_' . $schedule->scheduleId, array($cntScheduleCol1, $cntScheduleCol2, $cntScheduleCol3));

                            $cntSchedules->addControl($cntSchedule);
                            if ( count($professors)>0 )
                            {
                                unset($txtProfessor);
                                foreach ( $professors as $professor )
                                {
                                    $txtProfessor[] = new MText('txtProfessor_' . $scheduleId, _M('Professor', $module) . ": {$professor[2]}");
    
                                //Dados para e-mail - professor
                                    eval('$professorNameAux'.$key.' = $professor[2];');
                                }
                                $cntProfessor = new MVContainer('cntProfessor_' . $scheduleId, $txtProfessor);
                                $cntSchedules->addControl($cntProfessor);
                            }
        
                            //Dados para e-mail do professor - turma
                            eval('$diaAux'.$key.'             = $weekDayDescription;');
                            eval('$turnAux'.$key.'            = $turnDescription;');
        
                            eval('$horarioAux'.$key.'         = $beginHour . " - " . $endHour;');
                            eval('$salaAux'.$key.'            = $physicalResourceDescription;');
                            eval('$campusAux'.$key.'          = $unitDescription;');

                        }
                        $cntGroups->addControl($cntSchedules);
                    }

                    //Dados para e-mail da disciplina - turma
                    eval('$curricularComponentIdAux'.$key.'   =  $curricularComponentId;');
                    eval('$curricularComponentDescAux'.$key.' =  $curricularComponentName;');

        
                    if ( $oldSemester != $groupInfo->semester )
                    {
                        if ( $groupInfo->semester == '0' )
                        {
                            $txtSemester = new MText('txtSemester_' . $groupInfo->semester, _M('Optional curricular component', $module));
                        }
                        else
                        {
                            $txtSemester = new MText('txtSemester_' . $groupInfo->semester, _M('Semester', $module) . ' ' . $groupInfo->semester);
                        }
                        $txtSemester->setBold(true);
                        $cntSemester->addControl($txtSemester);
                        $oldSemester = $groupInfo->semester;
                    }

                    $cntSemester->addControl($cntCurriculum);
                    $cntSemester->addControl($cntGroups);
                } 
            }
        }
        else if ( strlen((string)$this->enrollData->classId) > 0 )
        {
            foreach ( $this->enrollData->groupId as $groupId => $null )
            {
                $dtGroup->groupId = $groupId;
                $groupInfos = $db->getGroupInfo($dtGroup);
                $groupInfo = $groupInfos[0];
    
                $txtStatus = new MText('txtStatus_' . $curriculumId );
                $txtStatus->setBold(true);
                $txtStatus->setValue('[ ' . _M('ENROLLED', $module) . ' ]');
                $txtStatus->color = CURRICULUM_STATUS_COLOR_ENROLLED;
                $txtStatus->addBoxStyle('width', '20%');
                $txtCurricularComponentId = new MText('txtCurricularcomponentId_' . $curriculumId, "$groupInfo->curricularComponentId/$groupInfo->curricularComponentVersion");
                $txtCurricularComponentId->setWidth(70);

                $txtCurricularComponentName = new MText('txtCurricularcomponentName_' . $curriculumId, "$groupInfo->curricularComponentName");

                $cntCurriculum = new MHContainer('cntCurriculum_' . $curriculumId, array($txtStatus, $txtCurricularComponentId, $txtCurricularComponentName));

                $cntGroups = new MBaseGroup('cntGroups_' . $curriculumId, null, 'vertical');

                $txtVacancies = new MText('txtVacancies_' . $groupId, _M('Vacant', $module) . ": $groupInfo->totalEnrolled/$groupInfo->vacant");
                $txtVacancies->setWidth(600);

                $cntGroup = new MHContainer('cntGroup_' . $groupId, array($txtVacancies));

                $cntGroups->addControl($cntGroup);

                if ( count($groupInfo->schedule) > 0 )
                {
                    $cntSchedules = new MVContainer('cntSchedules_' . $groupId);
                    foreach ( $groupInfo->schedule as $schedule )
                    {
                        $filters             = new AcdScheduleProfessor();
                        $filters->scheduleId = $schedule->scheduleId;
                        $businessScheduleProfessor = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
                        unset($professors);
                        if ( strlen((string)$schedule->professorName) > 0 )
                        {
                            $professors                = $businessScheduleProfessor->searchScheduleProfessor($filters);
                        }

                        // schedule first column
                        $txtUnit = new MText('txtUnit_' . $schedule->scheduleId, _M('Unit', $module) . ": $schedule->unitDescription");
                        $txtWeekDay = new MText('txtWeekDay_' . $schedule->scheduleId, _M('Week day', $module) . ": $unit->weekDayDescription");
                        $txtPhysicalResource = new MText('txtPhysicalResource_' . $schedule->scheduleId, _M('Physical resource', $module) . ": $schedule->physicalResourceDescription");
                        $cntScheduleCol1 = new MVContainer('cntScheduleCol1_' . $schedule->scheduleId, array($txtUnit, $txtWeekDay, $txtPhysicalResource));

                        // schedule second column
                        $txtTurn = new MText('txtTurn_' . $schedule->scheduleId, _M('Turn', $module) . ": $schedule->turnDescription");
                        $txtBeginEndDate = new MText('txtBeginEndDate_' . $schedule->scheduleId, _M('Begin/End date', $module) . ": $schedule->beginDate - $schedule->endDate");
                        $txtBeginEndHour = new MText('txtBeginEndHour_' . $schedule->scheduleId, _M('Begin/End hour', $module) . ": $schedule->beginHour - $schedule->endHour");
                        $cntScheduleCol2 = new MVContainer('cntScheduleCol2_' . $schedule->scheduleId, array($txtTurn, $txtBeginEndDate, $txtBeginEndHour));

                        //$cntScheduleCol3 = new MVContainer('cntScheduleCol3_' . $schedule->scheduleId, array($txtTurn, $txtBeginEndDate, $txtBeginEndHour));

                        $cntSchedule = new MHContainer('cntSchedule_' . $schedule->scheduleId, array($cntScheduleCol1, $cntScheduleCol2, $cntScheduleCol3));

                        $cntSchedules->addControl($cntSchedule);
                        if ( count($professors)>0 )
                        {
                            unset($txtProfessor);
                            foreach ( $professors as $professor )
                            {
                                $txtProfessor[] = new MText('txtProfessor_' . $scheduleId, _M('Professor', $module) . ": {$professor[2]}");
    
                                //Dados para e-mail - professor
                                eval('$professorNameAux'.$key.' = $professor[2];');
                            }
                            $cntProfessor = new MVContainer('cntProfessor_' . $scheduleId, $txtProfessor);
                            $cntSchedules->addControl($cntProfessor);
                        }
        
                        //Dados para e-mail do professor - turma
                        eval('$diaAux'.$key.'             = $weekDayDescription;');
                        eval('$turnAux'.$key.'            = $turnDescription;');
        
                        eval('$horarioAux'.$key.'         = $beginHour . " - " . $endHour;');
                        eval('$salaAux'.$key.'            = $physicalResourceDescription;');
                        eval('$campusAux'.$key.'          = $unitDescription;');

                    }
                    $cntGroups->addControl($cntSchedules);
                }

                //Dados para e-mail da disciplina - turma
                eval('$curricularComponentIdAux'.$key.'   =  $curricularComponentId;');
                eval('$curricularComponentDescAux'.$key.' =  $curricularComponentName;');

        
                if ( $oldSemester != $groupInfo->semester )
                {
                    if ( $groupInfo->semester == '0' )
                    {
                        $txtSemester = new MText('txtSemester_' . $groupInfo->semester, _M('Optional curricular component', $module));
                    }
                    else
                    {
                        $txtSemester = new MText('txtSemester_' . $groupInfo->semester, _M('Semester', $module) . ' ' . $groupInfo->semester);
                    }
                    $txtSemester->setBold(true);
                    $cntSemester->addControl($txtSemester);
                    $oldSemester = $groupInfo->semester;
                }

                $cntSemester->addControl($cntCurriculum);
                $cntSemester->addControl($cntGroups);
            } 
        }
        
        $fields[] = $cntSemester;
        $returnTo = substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';

        $sep1 = new MSeparator();
        $controls[] = $sep1;

        $vars       = array ( 'enrollData' => urlencode(serialize($this->enrollData)) );

        $prevUrl    = $MIOLO->getActionURL($module, $returnTo, null, $vars);
        $btnPrev  = new MButton('btnPrev', '<< ' . _M('Previous', $module), $prevUrl);
        $controls[] = $btnPrev;

        $btnPrint = new MButton('btnConfirmationPrint', _M('Print confirmation', $module));
        $controls[] = $btnPrint;

        if ( (int)($this->enrollData->invoiceId) > 0 )
        {
            $btnPrintInvoice = new MButton('btnPrintInvoice', _M('Print enroll fee', 'finance'), $MIOLO->getActionURL('finance', 'main:process:printInvoice&&event=submit_button_click&_invoiceId=' . $this->enrollData->invoiceId));
            $controls[] = $btnPrintInvoice;
        }

        $btnExit = new MButton('btnExit', _M('Exit', $module), $MIOLO->getActionURL($module,'main:process'));
        $controls[] = $btnExit;

        $sep2    = new MSeparator();
        $controls[] = $sep2;
        $cntButtons = new MDiv('cntButtons', $controls, null, 'align=center');

        $fields[] = $cntButtons;

        // Controls wether an email confirmation has been sent or not
        $mailSent = new MHiddenField('mailSent', $this->getFormValue('mailSent', 'no'));
        $fields[] = $mailSent;

        $this->setFields($fields);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        //Envio de e-mail de confirmação ao aluno
        $businessEmail  = $MIOLO->getBusiness('basic', 'BusEmail');
        $getEmail       = $businessEmail->getEmail(ACD_ENROLL_CONFIRMED_EMAIL_ID);

        $businessUnit   = $MIOLO->getBusiness('basic', 'BusUnit');
        $getUnit        = $businessUnit->getUnit($learningPeriod->unitId);

        if ( strlen((string)$this->enrollData->contractPersonId) > 0 )
        {
            $businessPhysicaPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
            $getPerson = $businessPhysicaPerson->getPhysicalPerson($this->enrollData->contractPersonId);
        }

        //Dados para envio do e-mail
        // Send email only if it hasn't been sent during this enroll yet
        if ( $this->getFormValue('mailSent', 'no') == 'no' )
        {
            $searchData  = array("\$PERIODID",
                                 "\$PERSONNAME",
                                 "\$PERSONID",
                                 "\$COURSEDESC",
                                 "\$CAMPUSDESC");

            $replaceData = array($this->enrollData->periodId,
                                 $this->enrollData->contractPersonName,
                                 $this->enrollData->contractPersonId,
                                 $this->enrollData->contractCourseName,
                                 $getUnit->description);

            $subjectNew = str_replace($searchData, $replaceData, $getEmail->subject);

            $body = "<html><head><title>".$subjectNew."</title></head>" ;

            $optionsAux .= "<table border=\"1\"><tr>\n" .
                "<td><b>Código</b></td>" .
                "<td><b>Descrição da Disciplina</b></td>" .
                "<td><b>Professor</b></td>" .
                "<td align=\"center\"><b>Dia da Semana</b></td>" .
                "<td align=\"center\"><b>Turno</b></td>" .
                "<td align=\"center\"><b>Horário</b></td>" .
                "<td align=\"center\"><b>Sala</b></td>" .
                "<td align=\"center\"><b>Campus</b></td></tr>";

            for ($x=0; $x < count($data); $x++)
            {
                eval('$cod1 = $curricularComponentIdAux'.$x.';');
                eval('$cod2 = $curricularComponentDescAux'.$x.';');
                eval('$cod3 = $professorNameAux'.$x.';');
                eval('$cod4 = $diaAux'.$x.';');
                eval('$cod5 = $turnAux'.$x.';');
                eval('$cod6 = $horarioAux'.$x.';');
                eval('$cod7 = $salaAux'.$x.';');
                eval('$cod8 = $campusAux'.$x.';');

            $optionsAux .= "<tr>\n" .
                "<td><Font face=\"Verdana\" size=\"2\"><b>$cod1</b></td>" .
                "<td><Font face=\"Verdana\" size=\"1\">$cod2</b></td>" .
                "<td><Font face=\"Verdana\" size=\"1\">$cod3</b></td>" .
                "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod4</td>" .
                "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod5</td>" .
                "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod6</td>" .
                "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod7</td>" .
                "<td align=\"center\"><Font face=\"Verdana\" size=\"1\">$cod8</td></tr>";
            }

            $optionsAux .= "</table>";

            $searchData[]  = "$#CURRICULARCOMPONENTTABLE#$";

            $replaceData[] = $optionsAux;

            $body = "<body>";

            $body .= str_replace($searchData, $replaceData, $getEmail->body);

            $body .= "</body></html>";

            $subject = $subjectNew;

            $recipient = $this->enrollData->contractPersonName . ' <' . $getPerson->email . '>';

            $from      = str_replace($searchData, $replaceData, $getEmail->from);

            $host = strtolower($getEmail->server);

            if ( strlen((string)trim($host)) > 0 && strlen((string)$getEmail->port) > 0 )
            {
                $fp = @fsockopen($host, $getEmail->port);

                if ( $fp )
                {
                       fputs($fp,"HELO ".$host."\n" .
                            "MAIL FROM: $from\n" .
                            "RCPT TO: {$getPerson->email}\n" .
                            "DATA\n" .
                            "TO: {$getPerson->email}\n" .
                            "FROM: $from\n" .
                            "SUBJECT: $subject\n" .
                            "MIME-Version: {$getEmail->mimeVersion}\n" .
                            "Content-Type: {$getEmail->contentType}\n" .
                            "$body\n" .
                            ".\n" .
                            "QUIT\n");

                    fclose($fp);

                    // get to this point means the email was sent to the server, so we can
                    // mark the mailSent field as 'yes' and stop sending more emails when the
                    // user, for example, clicks the Print confirmation button.
                    $mailSent->setValue('yes');
                }
            }
        }
        //fim do trecho de envio de e-mail
        
    }

    public function btnConfirmationPrint_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData(); //get form's data
        $data->emitionDate = date(MASK_DATE_PHP);
        $data->courseName = $data->txtCourseName;
        $MIOLO->getClass($module, 'RptEnrollConfirmationDocument'); //get the RptEnrollConfirmation class

        $report = new RptEnrollConfirmationDocument($data); //instanciate the class
    }

}

?>
