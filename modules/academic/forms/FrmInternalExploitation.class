<?php

/**
 * InternalExploitation form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/11/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course
 **/
class FrmInternalExploitation extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar  = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnPrint');

        $fields[] = $toolBar;

        if ($function == 'insert')
        {
            $exploitationEnrollId = MIOLO::_request('exploitationEnrollId');
            $contractId           = MIOLO::_request('contractId');
            $curriculumId         = MIOLO::_request('curriculumId');
       
            if ( (strlen((string)$exploitationEnrollId) > 0) && (strlen((string)$contractId)) && (strlen((string)$curriculumId) > 0))
            {   
                $business               = $MIOLO->GetBusiness($module, 'BusEnroll');
                $exploitationEnrollData = $business->getEnroll($exploitationEnrollId);

                $business         = $MIOLO->GetBusiness($module, 'BusGroup');
                $enrollGroupData  = $business->getGroup($exploitationEnrollData->groupId);

                $business             = $MIOLO->GetBusiness($module, 'BusCurriculum');
                $enrollCurriculumData = $business->getCurriculum($enrollGroupData->curriculumId);
                $curriculumData       = $business->getCurriculum($curriculumId);

                $business                      = $MIOLO->GetBusiness($module, 'BusCurricularComponent');
                $enrollCurricularComponentData = $business->getCurricularComponent($enrollCurriculumData->curricularComponentId, $enrollCurriculumData->curricularComponentVersion);
                $curricularComponentData       = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                $business           = $MIOLO->GetBusiness($module, 'BusContract');
                $enrollContractData = $business->getContract($exploitationEnrollData->contractId);
                $contractData       = $business->getContract($contractId);

                $business         = $MIOLO->GetBusiness($module, 'BusCourse');
                $enrollCourseData = $business->getCourse($enrollContractData->courseId);
                $courseData       = $business->getCourse($contractData->courseId);

                $business   = $MIOLO->GetBusiness('basic', 'BusPhysicalPerson');
                $personData = $business->getPhysicalPerson($contractData->personId);
                
                $business = $MIOLO->getBusiness($module, 'BusInternalExploitation');
                
                $filters->curriculumId = $curriculumId;
                $filters->contractId   = $contractId;
                
                $exploitationSearch = $business->searchExploitation($filters);
               
                if (strlen((string)$exploitationSearch[0][5]) > 0)
                {
                    $exploitationSummary = $business->getEnrollExploitationSummary($exploitationSearch[0][5]);
                    
                    $exploitationData = $business->getEnrollExploitationData($exploitationSearch[0][2]);
                }
                else
                {
                    $exploitationSummary->remainingNumberHours = $curricularComponentData->academicNumberHours;
                }
                
                $exploitableSummary = $business->getEnrollExploitableSummary($exploitationEnrollId);
                
                $fields[] = new MHiddenField('contractId', $contractId);
                $fields[] = new MHiddenField('exploitationEnrollId', $exploitationEnrollId);
                $fields[] = new MHiddenField('curriculumId', $curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                $fields[] = new MHiddenField('exploitableNumberHours', $exploitableSummary->remainingNumberHours);
            }
            else
            {
                $msg = _M('No enroll, contract or curriculum id got. Did you use the right procedure to access this form? The selected curricular component(s) are registered in course curriculum?', $module);
                $this->addError($msg);
            }
        }
        elseif ($function == 'update')
        {
            $exploitationId = MIOLO::_request('exploitationId');
            
            if (strlen((string)$exploitationId) > 0)
            {
                $busExploitation  = $MIOLO->getBusiness($module, 'BusInternalExploitation');
                $dataExploitation = $busExploitation->getInternalExploitation($exploitationId);
                
                $business               = $MIOLO->getBusiness($module, 'BusEnroll');
                $enrollData             = $business->getEnroll($dataExploitation->enrollId);
                $exploitationEnrollData = $business->getEnroll($dataExploitation->exploitationEnrollId);
                
                $business           = $MIOLO->getBusiness($module, 'BusLearningPeriod');
                $learningPeriodData = $business->getLearningPeriod($enrollData->learningPeriodId);

                $business         = $MIOLO->getBusiness($module, 'BusGroup');
                $enrollGroupData  = $business->getGroup($exploitationEnrollData->groupId);

                $business             = $MIOLO->getBusiness($module, 'BusCurriculum');
                $enrollCurriculumData = $business->getCurriculum($enrollGroupData->curriculumId);
                $curriculumData       = $business->getCurriculum($enrollData->curriculumId);

                $business                      = $MIOLO->getBusiness($module, 'BusCurricularComponent');
                $enrollCurricularComponentData = $business->getCurricularComponent($enrollCurriculumData->curricularComponentId, $enrollCurriculumData->curricularComponentVersion);
                $curricularComponentData       = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                $business           = $MIOLO->getBusiness($module, 'BusContract');
                $enrollContractData = $business->getContract($exploitationEnrollData->contractId);
                $contractData       = $business->getContract($enrollData->contractId);

                $business         = $MIOLO->getBusiness($module, 'BusCourse');
                $enrollCourseData = $business->getCourse($enrollContractData->courseId);
                $courseData       = $business->getCourse($contractData->courseId);

                $business   = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
                $personData = $business->getPhysicalPerson($contractData->personId);
                
                $filters->curriculumId = $enrollData->curriculumId;
                $filters->contractId   = $enrollData->contractId;
                
                $exploitationSearch = $busExploitation->searchExploitation($filters);
               
                $exploitationSummary = $busExploitation->getEnrollExploitationSummary($dataExploitation->enrollId);
                    
                $exploitationData = $busExploitation->getEnrollExploitationData($dataExploitation->enrollId);
                
                $exploitableSummary = $busExploitation->getEnrollExploitableSummary($dataExploitation->exploitationEnrollId);
                
                $fields[] = new MHiddenField('exploitationId', $exploitationId);
                $fields[] = new MHiddenField('contractId', $enrollData->contractId);
                $fields[] = new MHiddenField('exploitationEnrollId', $dataExploitation->exploitationEnrollId);
                $fields[] = new MHiddenField('curriculumId', $enrollData->curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                $fields[] = new MHiddenField('exploitableNumberHours', $exploitableSummary->remainingNumberHours);
                $fields[] = new MHiddenField('pastExploitationNumberHours', $dataExploitation->exploitationNumberHours);
                $fields[] = new MHiddenField('enrollId', $dataExploitation->enrollId);
                
                $data->periodId                = $learningPeriodData->periodId;
                $data->exploitationNumberHours = $dataExploitation->exploitationNumberHours;
                $data->exploitationCredits     = $dataExploitation->exploitationCredits;
            }
            else
            {
                $msg = _M('No exploitation id got. Did you use the right procedure to access this form?', $module);
                $this->addError($msg);
            }
        }

        $fields[] = new MHiddenField('limbo', null);
        
        
        $fields[] = new MTextLabel('personId', $personData->personId . ' - ' . $personData->name, _M('Person',$module));
        $fields[] = new MSeparator('');

        unset($flds);
        $flds[] = new MTextLabel('courseId', $contractData->courseId . '/' . $contractData->courseVersion . ' - ' . $courseData->name, _M('Course',$module));
        $flds[] = new MTextLabel('curricularComponentId', $curricularComponentData->curricularComponentId . '/' . $curricularComponentData->curricularComponentVersion . ' - ' . $curricularComponentData->name, _M('Curricular component',$module));
        $flds[] = new MTextLabel('academicNumberHours', $curricularComponentData->academicNumberHours, _M('Total number hours',$module));
        $color  = $exploitationSummary->remainingNumberHours > 0 ? 'green' : 'red';
        
        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $flds[] = new MTextLabel('remainingNumberHours', (string) $exploitationSummary->remainingNumberHours, _M('Remaining number hours',$module), $color);
        
        $bsg1            = new BaseGroup('bsg1', _M('Course curricular component data',$module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        $fields[]        = $bsg1;
        
        if (count($exploitationData) > 0)
        {
            $gridFilters->home = $action;
            $gridFilters->readOnly = true;
            
            $gridExploitations = $MIOLO->getUI()->getGrid($module, 'GrdExploitationSearch', $gridFilters);
            $gridExploitations->setData($exploitationData);
            
            $fields[] = $gridExploitations;
        }
        
        $fields[] = new MSeparator('');
        
        unset($flds);
        $flds[] = new MTextLabel('enrollCourseId', $enrollContractData->courseId . '/' . $enrollContractData->courseVersion . ' - ' . $enrollCourseData->name, _M('Course',$module));
        $flds[] = new MTextLabel('enrollComponentId', $enrollCurricularComponentData->curricularComponentId . '/' . $enrollCurricularComponentData->curricularComponentVersion . ' - ' . $enrollCurricularComponentData->name, _M('Curricular component',$module));
        $flds[] = new MTextLabel('enrollNote', $exploitationEnrollData->finalNote, _M('Final note',$module));
        $flds[] = new MTextLabel('enrollConcept', $exploitationEnrollData->concept, _M('Concept',$module));
        $flds[] = new MTextLabel('enrollFreq', $exploitationEnrollData->frequency, _M('Frequency',$module));
        $flds[] = new MTextLabel('enrollAcademicNumberHours', $enrollCurricularComponentData->academicNumberHours, _M('Total number hours',$module));
        $color  = $exploitableSummary->remainingNumberHours > 0 ? 'green' : 'red';
        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $flds[] = new MTextLabel('enrollRemainingNumberHours', (string) $exploitableSummary->remainingNumberHours, _M('Remaining number hours',$module), $color);
        
        $bsg2            = new BaseGroup('bsg2', _M('Exploitation curricular component data',$module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        $fields[]        = $bsg2;
        
        $fields[] = new MSeparator('');
        unset($flds);
        
        if ($function == 'insert')
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $validators[] = new MRequiredValidator('periodId', _M('Period',$module));
            $fields[] = $periodId;
        }
        else
        {
            $fields[] = new MTextLabel('periodId', $data->periodId, _M('Period',$module));
        }
        
        $exploitationNumberHours = new MTextField('exploitationNumberHours', $this->GetFormValue('exploitationNumberHours', $data->exploitationNumberHours), _M('Number hour exploitation', $module), 10);
        $validators[] = new MRequiredValidator('exploitationNumberHours', _M('Number hour exploitation',$module));
        $fields[]               = $exploitationNumberHours;

        $exploitationCredits = new MTextField('exploitationCredits', $this->GetFormValue('exploitationCredits', $data->exploitationCredits), _M('Credits exploitation', $module), 10);
        $fields[]               = $exploitationCredits;

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.periodId.focus()');
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        $checkNumberHours = $data->curriculumNumberHours < $data->exploitableNumberHours ? $data->curriculumNumberHours : $data->exploitableNumberHours;
        
        if ( ($function == 'update') && (isset($data->pastExploitationNumberHours)) )
        {
            $checkNumberHours += $data->pastExploitationNumberHours;
        }
        
        if ($data->exploitationNumberHours > $checkNumberHours)
        {
            $msg = _M('You\'re allowed to exploit up to @1 hours for the selected data.', $module, $checkNumberHours);
            $this->addError($msg);
        }
        else
        {
            try
            {
                $business = $MIOLO->getBusiness($module, 'BusInternalExploitation');
                
                if ($function == 'update')
                {
                    $business->updateInternalExploitation($data);
                    $msg = MSG_RECORD_UPDATED;
                    $goto = $MIOLO->getActionURL($module, 'main:register:enroll', null, array('enrollId'=>$data->enrollId, 'function'=>'update'));
                }
                else
                {
                    $business->insertInternalExploitation($data);
                    $msg = _M('Exploitation registered.', $module);
                    $goto = $MIOLO->getActionURL($module, $action, null, array('function'=>'search'));
                }
                
                $MIOLO->information($msg, $goto);
            }
            catch (Exception $e)
            {
                $msg = _M('Error executing requested operation. ',$module) . $e->getMessage();
                $this->addError($msg);
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $exploitationId = MIOLO::_request('exploitationId');
        
        try
        {
            $busExploitation  = $MIOLO->getBusiness($module, 'BusExploitation');
            $exploitationData = $busExploitation->getExploitation($exploitationId);
        }
        catch (Exception $e)
        {
            $msg = _M('Error getting exploitation data. ', $module) . $e->getMessage();
            $this->addError($msg);
        }
        
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'exploitationId'=>$exploitationId);

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        
        unset($opts);
        $opts['function'] = 'update';
        $opts['enrollId'] = $exploitationData->enrollId;
        
        $gotoNo  = $MIOLO->getActionURL($module, 'main:register:enroll', null, $opts);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_request('exploitationId');
        
        try
        {
            $busExploitation  = $MIOLO->getBusiness($module, 'BusExploitation');
            $exploitationData = $busExploitation->getExploitation($exploitationId);
            
            $busEnroll  = $MIOLO->getBusiness($module, 'BusEnroll');
            $enrollData = $busEnroll->getEnroll($exploitationData->enrollId);
            
            $busContract  = $MIOLO->getBusiness($module, 'BusContract');
            $contractData = $busContract->getContract($enrollData->contractId);
            
            $busExploitation->deleteExploitation($exploitationId);
            $goto = $MIOLO->getActionURL($module, 'main', null, array('personId'=>$contractData->personId));
            $msg  = MSG_RECORD_DELETED;
            $MIOLO->information($msg, $goto);
        }
        catch (Exception $e)
        {
            $msg  = _M('Error executing requested operation.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }
        /**
        $business = $MIOLO->getBusiness($module, 'BusEnroll');
        $ok = $business->deleteEnroll($this->enrollId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
         **/
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->contractId                  = MIOLO::_request('contractId');
        $data->curriculumId                = MIOLO::_request('curriculumId');
        $data->exploitationEnrollId        = MIOLO::_request('exploitationEnrollId');
        $data->exploitationNumberHours     = MIOLO::_request('exploitationNumberHours');
        $data->exploitationCredits         = MIOLO::_request('exploitationCredits');
        $data->periodId                    = MIOLO::_request('periodId');
        $data->exploitationId              = MIOLO::_request('exploitationId');
        
        $data->curriculumNumberHours       = MIOLO::_request('curriculumNumberHours');
        $data->exploitableNumberHours      = MIOLO::_request('exploitableNumberHours');
        $data->pastExploitationNumberHours = MIOLO::_request('pastExploitationNumberHours');
        $data->enrollId                    = MIOLO::_request('enrollId');

        return $data;
    }

}

?>
