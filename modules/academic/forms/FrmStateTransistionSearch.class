<?php

/**
 *
 * This file handles the connection and actions for acdStateTransistion table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdStateTransistion table
 */
class FrmStateTransistionSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('State transistion', $this->home, 'stateTransistion-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $beginStateLabelS = new MText('beginStateLabelS', _M('Begin state' ,$module) . ':');
        $beginStateLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $beginStateLabelS; 
        
        $beginStateIdS = new MLookupTextField('beginStateIdS', $this->getFormValue('beginStateIdS', $data->beginStateIdS), _M('Begin state id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'beginStateDescriptionS', $module, 'StatesContract', null, null, true);
        $flds[] = $beginStateIdS;
        $validators[] = new MIntegerValidator('beginStateIdS', '', 'optional');

        $beginStateDescriptionS = new MTextField('beginStateDescriptionS', $this->getFormValue('beginStateDescriptionS', $data->beginStateDescriptionS), _M('Begin state description',$module), FIELD_DESCRIPTION_SIZE);
        $beginStateDescriptionS->setReadOnly(true);
        $flds[] = $beginStateDescriptionS;
        
        $hctBeginStateS = new MHContainer('hctBeginStateS', $flds);
        $hctBeginStateS->setShowLabel(false);
        $fields[] = $hctBeginStateS;
        unset($flds);
        
        $endStateLabelS = new MText('endStateLabelS', _M('End state', $module) . ':');
        $endStateLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $endStateLabelS;

        $endStateIdS = new MLookupTextField('endStateIdS', $this->getFormValue('endStateIdS', $data->endStateIdS), _M('End state id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'endStateDescriptionS', $module, 'StatesContract', null, null, true);
        $flds[] = $endStateIdS;
        $validators[] = new MIntegerValidator('endStateIdS', '', 'optional');

        $endStateDescriptionS = new MTextField('endStateDescriptionS', $this->getFormValue('endStateDescriptionS', $data->endStateDescriptionS), _M('End state description',$module), FIELD_DESCRIPTION_SIZE);
        $endStateDescriptionS->setReadOnly(true);
        $flds[] = $endStateDescriptionS;
        
        $hctEndStateS = new MHContainer('hctEndStateS', $flds);
        $hctEndStateS->setShowLabel(false);
        $fields[] = $hctEndStateS;
        unset($flds);

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->beginStateId  = $this->beginStateIdS->value;
        $filters->endStateId    = $this->endStateIdS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdStateTransistionSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusStateTransistion');
        $data = $business->searchStateTransistion($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.beginStateIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
