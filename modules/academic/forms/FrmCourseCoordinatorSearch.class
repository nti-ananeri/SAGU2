<?php

/**
 *
 * This file handles the connection and actions for acdCourseCoordinator table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 31/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCourseCoordinator table
 */
class FrmCourseCoordinatorSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course coordinator', $this->home, 'courseCoordinator-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $courseLabel = new MText('courseLabel', _M('Course id',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
//                'courseVersionS,courseNameS', $module, 'CourseVersion',
                'courseVersionS,courseNameS,unitIdS,limbo,turnIdS,limbo', $module, 'CourseOccurrence',
                null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        //$fields[] = $courseIdS;

        //$limbo = new MHiddenField('limbo', '');
        //$fields[] = $limbo;

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value,'', FIELD_ID_SIZE);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));
        //$fields[] = $courseVersionS;

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setJsHint(_M('Enter the course name',$module));
        //$fields[] = $courseNameS;

        $hctCourseName = new MHContainer('hctCourseName', array($courseLabel, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseName->setShowLabel(true);
        $fields[]  = $hctCourseName;




        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnIdS = new MComboBox('turnIdS',
                                $this->GetFormValue('turnIdS',$data->turnIdS),
                                _M('Turn',$module),
                                $business->listTurn());
        $fields[] = $turnIdS;

        $business = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitIdS = new MComboBox('unitIdS',
                                $this->GetFormValue('unitIdS',$data->unitIdS),
                                _M('Unit',$module),
                                $business->listUnit());
        $fields[] = $unitIdS;
        
        $coordinatorLabelS = new MText('coordinatorLabel', _M('Coordinator', $module) . ':');
        $coordinatorLabelS->setWidth(FIELD_CONTAINER_SIZE);
        
        $coordinatorIdS = new MLookupTextField('coordinatorIdS', $this->getFormValue('coordinatorIdS', $data->coordinatorIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'coordinatorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        //$fields[] = $coordinatorIdS;
        $validators[] = new MIntegerValidator('coordinatorIdS', '', 'optional');

        $coordinatorNameS = new MTextField('coordinatorNameS', $this->coordinatorNameS->value, _M('Coordinator name',$module), FIELD_DESCRIPTION_SIZE);
        $coordinatorNameS->setJsHint(_M('Enter the coordinator name',$module));
        //$fields[] = $coordinatorNameS;
        
        $hctCoordinatorS = new MHContainer('hctCoordinatorS', array($coordinatorLabelS, $coordinatorIdS, $coordinatorNameS));
        $hctCoordinatorS->setShowLabel(false);
        $fields[] = $hctCoordinatorS;

        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDateS->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('End date',$module), FIELD_DATE_SIZE);
        $endDateS->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->courseId        = $this->courseIdS->value;
        $filters->courseVersion   = $this->courseVersionS->value;
        $filters->courseName      = $this->courseNameS->value;
        $filters->turnId          = $this->turnIdS->value;
        $filters->turnDescription = $this->turnDescriptionS->value;
        $filters->unitId          = $this->unitIdS->value;
        $filters->unitDescription = $this->unitDescriptionS->value;
        $filters->coordinatorId   = $this->coordinatorIdS->value;
        $filters->coordinatorName = $this->coordinatorNameS->value;
        $filters->beginDate       = $this->beginDateS->value;
        $filters->endDate         = $this->endDateS->value;
        $filters->isSendEmail     = $this->isSendEmailS->value;
        $filters->level           = $this->levelS->value;
        $filters->email           = $this->emailS->value;
        $filters->expirationLevel = $this->expirationLevelS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCourseCoordinatorSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusCourseCoordinator');
        $data = $business->searchCourseCoordinator($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.courseIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
