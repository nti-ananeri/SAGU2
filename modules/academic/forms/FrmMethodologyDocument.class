<?php

/**
 * Methodology document form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 29/05/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmMethodologyDocument extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Methodology', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Methodology', $this->home, 'methodology-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[]  = $contractId;

        $fields[]   = new MSeparator();

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;


        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $this->courseId->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName = new MTextField('courseName', null, '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]                = $learningPeriodLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('limbo', 'courseId', 'courseVersion', 'limbo' , 'unitId', 'learningPeriodDescription', 'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' , 'limbo' , 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module), 'required');
        $flds[]           = $learningPeriodId;
 
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        unset($flds);
        $fields[]          = $hctLearningPeriod;
 
        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), _M('Unit id',$module), $business->listUnit());
        $unitId->setJsHint(_M('Enter the unit code',$module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[]     = $unitId;

        $moneyValueLabel = new MText('moneyValueLabel', _M('Value',$module) . ':');
        $moneyValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]          = $moneyValueLabel;

        $moneyValue = new MTextField('moneyValue', '', '', 10);
        $moneyValue->setJsHint(_M('Enter the value',$module));
        $flds[]     = $moneyValue;

        $hctValue = new MHContainer('hctValue', $flds);
        $hctValue->setShowLabel(false);
        $fields[] = $hctValue;
        unset($flds);

        $parcelsLabel = new MText('parcelsLabel', _M('Parcels',$module) . ':');
        $parcelsLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]       = $parcelsLabel;

        $parcels      = new MTextField('parcels', '', '', 10);
        $parcels->setJsHint(_M('Enter the parcels',$module));
        $flds[]       = $parcels;

        $hctParcels = new MHContainer('hctParcels', $flds);
        $hctParcels->setShowLabel(false);
        $fields[]   = $hctParcels;
        unset($flds);      

        $durationLabel = new MText('durationLabel', _M('Duration',$module) . ':');
        $durationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]        = $durationLabel;      
        
        $selMonth = new MSelection('selMonth', $this->getFormValue('selMonth',$currDate['mon']), _M('Duration',$module), SAGU::listMonths());
        $flds[]   = $selMonth; 
         
        $lastLabel = new MText('lastLabel', _M('Of the',$module));
        $flds[]    = $lastLabel; 
        
        $selYear = new MSelection('selYear', $this->getFormValue('selYear', $currDate['mon']), _M('Duration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]  = $selYear;        

		$middleLabel = new MText('middleLabel', _M('To',$module));
        $flds[]      = $middleLabel; 
        
        $selMonth1 = new MSelection('selMonth1', $this->getFormValue('selMonth1',$currDate['mon']), _M('Duration',$module), SAGU::listMonths());
        $flds[]    = $selMonth1;

        $lastLabel1 = new MText('lastLabel1', _M('Of the',$module));
        $flds[]     = $lastLabel1; 
        
        $selYear1 = new MSelection('selYear1', $this->getFormValue('selYear1', $currDate['mon']), _M('Duration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]   = $selYear1; 

        $hctDuration = new MHContainer('hctDuration', $flds);
        $hctDuration->setShowLabel(false);
        $fields[]    = $hctDuration;
        unset($flds);  
 
        $expirationDateLabel = new MText('expirationDateLabel', _M('Expiration of the first parcel',$module) . ':');
        $expirationDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $expirationDateLabel;
        
        $expirationDateDay = new MTextField('expirationDateDay', '', '', 1);
        $expirationDateDay->addAttribute('maxlength', '2');
		$flds[]            =  $expirationDateDay;
        
        $expirationDateLabel1 = new MText('expirationDateLabel1', '/');
        $flds[]               = $expirationDateLabel1;
        
        $expirationDateMonth = new MTextField('expirationDateMonth', '', '', 1);
        $expirationDateMonth->addAttribute('maxlength', '2');
		$flds[]              =  $expirationDateMonth;                

        $expirationDateLabel2 = new MText('expirationDateLabel2', '/');
        $flds[]               = $expirationDateLabel2;
        
        $expirationDateYear = new MTextField('expirationDateYear', '', '', 3);
        $expirationDateYear->addAttribute('maxlength', '4');
		$flds[]             =  $expirationDateYear;         

        $hctExpirationDate = new MHContainer('hctExpirationDate', $flds);
        $hctExpirationDate->setShowLabel(false);
        $fields[]            = $hctExpirationDate;
        unset($flds); 
        
        $nextParcelsLabel = new MText('nextParcelsLabel', _M('Next parcel start in',$module) . ':');
        $nextParcelsLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $nextParcelsLabel;      

        $nextParcelMonth = new MSelection('nextParcelMonth', $this->getFormValue('nextParcelMonth',$currDate['mon']), _M('Expiration',$module), SAGU::listMonths());
        $flds[]    = $nextParcelMonth;

        $lastLabel1 = new MText('lastLabel', _M('Of the',$module));
        $flds[]     = $lastLabel; 
        
        $nextParcelYear = new MSelection('nextParcelYear', $this->getFormValue('nextParcelYear',$currDate['mon']), _M('Expiration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]   = $nextParcelYear; 

        $hctNextParcels = new MHContainer('hctNextParcels', $flds);
        $hctNextParcels->setShowLabel(false);
        $fields[]       = $hctNextParcels;
        unset($flds);

        $dateCancellationLabel = new MText('dateCancellationLabel', _M('Cancellation limit date',$module) . ':');
        $dateCancellationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $dateCancellationLabel;
        
        $dateCancellationDay = new MTextField('dateCancellationDay', '', '', 1);
        $dateCancellationDay->addAttribute('maxlength', '2');
		$flds[]           =  $dateCancellationDay;

        $dateCancellationLabel1 = new MText('dateCancellationLabel1', '/');
        $flds[]                 = $dateCancellationLabel1;
        
        $dateCancellationMonth = new MTextField('dateCancellationMonth', '', '', 1);
        $dateCancellationMonth->addAttribute('maxlength', '2');
		$flds[]            =  $dateCancellationMonth;                

        $dateCancellationLabel2 = new MText('dateCancellationLabel2', '/');
        $flds[]                 = $dateCancellationLabel2;
        
        $dateCancellationYear = new MTextField('dateCancellationYear', '', '', 3);
        $dateCancellationYear->addAttribute('maxlength', '4');
		$flds[]            =  $dateCancellationYear;         

        $hctDateCancellation = new MHContainer('hctDateCancellation', $flds);
        $hctDateCancellation->setShowLabel(false);
        $fields[]            = $hctDateCancellation;
        unset($flds); 
        $fields[] = new MSeparator();

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $personLabel;

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array(/*'contractId', 'personId', */'personName'/*, 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'unitId'*/), 'basic', 'PhysicalPerson', null, null, true);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $flds[]       = $personId;

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);


        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                     = MIOLO::getInstance();
        $module                    = MIOLO::getCurrentModule();
        $action                    = MIOLO::getCurrentAction();
        $cd->contractId            = MIOLO::_request('contractId');
        $cd->personId              = MIOLO::_request('personId');
        $cd->courseId              = MIOLO::_request('courseId');
        $cd->courseName            = MIOLO::_request('courseName');
        $cd->courseVersion         = MIOLO::_request('courseVersion');
        $cd->unitId                = MIOLO::_request('unitId');
        $cd->learningPeriodId      = MIOLO::_request('learningPeriodId');
        $cd->selectiveProcessId    = MIOLO::_request('selectiveProcessId');
        $cd->fileType              = MIOLO::_request('radFileType');
//        $cd->situation             = MIOLO::_request('radSituation');
        $cd->optionId              = MIOLO::_request('radOption');
        $cd->monthDuration         = MIOLO::_request('selMonth');
        $cd->yearDuration          = MIOLO::_request('selYear');
        $cd->monthDuration1        = MIOLO::_request('selMonth1');
        $cd->yearDuration1         = MIOLO::_request('selYear1');
        $cd->moneyValue            = MIOLO::_request('moneyValue');
        $cd->parcels               = MIOLO::_request('parcels');
        $cd->expirationDateDay     = MIOLO::_request('expirationDateDay');
        $cd->expirationDateMonth   = MIOLO::_request('expirationDateMonth');
        $cd->expirationDateYear    = MIOLO::_request('expirationDateYear');
        $cd->nextParcelMonth       = MIOLO::_request('nextParcelMonth');
        $cd->nextParcelYear        = MIOLO::_request('nextParcelYear');
        $cd->dateCancellationDay   = MIOLO::_request('dateCancellationDay');
        $cd->dateCancellationMonth = MIOLO::_request('dateCancellationMonth');
        $cd->dateCancellationYear  = MIOLO::_request('dateCancellationYear');

        set_time_limit(0);
  /*      if ( strlen((string)$cd->situation) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Select the respective situation option',$module) . '!');
            $lblMsg1->color = 'red';
            $sep1           = new Separator('');
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1,$sep1));
            $this->divError->addControl($cntErrors);
        }
        else*/if ( /*$cd->situation == 'F' && ( strlen((string)$cd->selectiveProcessId) == 0 ||*/ strlen((string)$cd->unitId) == 0 || strlen((string)$cd->courseId) == 0 ) //)
        {
            $lblMsg1        = new MText('lblMsg1', '');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        elseif ( /*$cd->situation != 'F' &&*/ ( strlen((string)$cd->learningPeriodId) == 0 || strlen((string)$cd->unitId) == 0 || strlen((string)$cd->courseId) == 0 ) )
        {
            $lblMsg1        = new MText('lblMsg1', '');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $businessContractDocument = $MIOLO->getBusiness($module, 'BusContractDocument');

            $data = $businessContractDocument->getMethodologyContractDocument($cd);

//             if ( $data[0][22] == true || $data[0][9] < 18 )
//             {
//                 $contractResource = 'additiveTermMinor.sxw';
//             }
//             else
//             {
//                 $contractResource = 'additiveTerm.sxw';
//             }

            $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
            $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

            $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
            $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

            $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
            $city         = $businessCity->getCity($legalPerson->cityId);

            $businessCountry = $MIOLO->getBusiness('basic', 'BusCountry');
            $country         = $businessCountry->getCountry($city->countryId);

            if ( count($data) > 0 )
            {
                $MIOLO->uses('/core/AgataAPI.class');

                $api = new AgataAPI;

                $api->setParameter('$courseName', $cd->courseName);
                $api->setParameter('$companyId', $company->companyId);
                $api->setParameter('$companyName', $company->name);
                $api->setParameter('$companyTypeDescription', $company->companyTypeDescription);
                $api->setParameter('$cnpj', $legalPerson->cnpj);
                $api->setParameter('$fakeName', $legalPerson->fakeName);
                $api->setParameter('$companyCity', $city->name);
                $api->setParameter('$companyStateId', $city->stateId);
                $api->setParameter('$companyLocation', $legalPerson->location);
                $api->setParameter('$companyNumber', $legalPerson->number);
                $api->setParameter('$acronym', $company->acronym);
                $api->setParameter('$currencySymbol', $country->currencySymbol);
                $api->setParameter('$monthDuration1', $cd->monthDuration1);
                $api->setParameter('$yearDuration1', $cd->yearDuration1);
                $api->setParameter('$monthDuration', $cd->monthDuration);
                $api->setParameter('$yearDuration', $cd->yearDuration);

                $api->setParameter('$descriptionMoney', SAGU::getExtensiveNumber(SAGU::formatNumber($cd->moneyValue), 'REAL', 'REAIS'));
                $api->setParameter('$moneyValue', $cd->moneyValue);

                $api->setParameter('$parcelsValue', SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true));
                $api->setParameter('$descriptionParcelsValue', SAGU::getExtensiveNumber(SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true)) );

                $api->setParameter('$descriptionParcels', SAGU::extensive($cd->parcels));
                $api->setParameter('$parcels', $cd->parcels);

                $api->setParameter('$expirationDateDay', $cd->expirationDateDay);
                $api->setParameter('$expirationDateMonth', $cd->expirationDateMonth);
                $api->setParameter('$expirationDateYear', $cd->expirationDateYear);

                $api->setParameter('$nextParcelsMonth', $cd->nextParcelMonth);
                $api->setParameter('$nextParcelsYear', $cd->nextParcelYear);

                $api->setParameter('$dateCancellationDay', $cd->dateCancellationDay);
                $api->setParameter('$dateCancellationMonth', $cd->dateCancellationMonth);
                $api->setParameter('$dateCancellationYear', $cd->dateCancellationYear);

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(TEMP_DIR . '/contract.sxw');
                $api->setDataArray($data);

                $api->setImageReplace('figura1', SAGUFile::getPhotoPath($company->personId));

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/methodologyContract.sxw'));

                if ( $ok && $cd->fileType == 'pdf' )
                {
                    $api->setOutputPath(TEMP_DIR . '/contract.pdf');
                    $ok = $api->openOffice2pdf(TEMP_DIR . '/contract.sxw');
                }

                if ( !$ok )
                {
                    $lblAgataError        = new MText('lblMsg1', $api->getError());
                    $lblAgataError->color = 'red';
                    $sep1                  = new Separator('');
                    $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                    $this->divError->addControl($cntErrors);
                }
                else
                {
                    $api->fileDialog();
                }
            }
        }
    }
}

?>
