<?php

/**
 *
 * This file handles the connection and actions for acdEvent table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdEvent table
 */
class FrmEventSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Event', $this->home, 'event-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('eventIdS', $this->getFormValue('eventIdS', $eventIdS));

        $descriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS',$data->descriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the description',$module));
        $fields[] = $descriptionS;

        //$hctDescriptionS = new MHContainer('hctDescriptionS', $flds);
        //$hctDescriptionS->setShowLabel(true);
        //$fields[]  = $hctDescriptionS;
        //unset($flds);
        
/*        $beginDateS = new MCalendarField('beginDateS', $this->getFormValue('beginDateS',$data->beginDateS), _M('Begin date',$module), 18);
        $beginDateS->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $flds[] = $beginDateS;

        $hctBeginDateS = new MHContainer('hctBeginDateS', $flds);
        $fields[]          = $hctBeginDateS;
        unset($flds);
        
        $endDateS = new MCalendarField('endDateS', $this->getFormValue('endDateS',$data->endDateS), _M('End date',$module), 18);
        $endDateS->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $flds[] = $endDateS;

        $hctEndDateS = new MHContainer('hctEndDateS', $flds);
        $fields[]          = $hctEndDateS;
        unset($flds);
*/        
        $accountSchemeLabelS = new MText('accountSchemeLabelS', _M('Account scheme', $module) . ':');
        $accountSchemeLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $accountSchemeLabelS;
        
        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->getFormValue('accountSchemeIdS',$data->accountSchemeIdS), _M('Account scheme',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'accountSchemeDescriptionS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdS->setJsHint(_M('Enter the account scheme code',$module));
        $flds[]         = $accountSchemeIdS;

        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->getFormValue('accountSchemeDescriptionS',$data->accountSchemeDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescriptionS->setReadOnly(true);
        $flds[]         = $accountSchemeDescriptionS;

        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', $flds);
        $hctAccountSchemeS->setShowLabel(false);
        $fields[]  = $hctAccountSchemeS;
        unset($flds);

        $costCenterLabelS = new MText('costCenterLabelS', _M('Cost center', $module) . ':');
        $costCenterLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $costCenterLabelS;

        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), _M('Cost center',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Enter the cost center code',$module));
        $flds[]         = $costCenterIdS;

        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$data->costCenterDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $costCenterDescriptionS->setReadOnly(true);
        $flds[]         = $costCenterDescriptionS;

        $hctCostCenterS = new MHContainer('hctCostCenterS', $flds);
        $hctCostCenterS->setShowLabel(false);
        $fields[]  = $hctCostCenterS;
        unset($flds);
        
        $policyLabelS = new MText('policyLabelS', _M('Policy', $module) . ':');
        $policyLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $policyLabelS;
        
        $policyIdS = new MLookupTextField('policyIdS', $this->getFormValue('policyIdS',$data->policyIdS), _M('Policy',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'policyDescriptionS', 'finance', 'Policy', null, null, true);
        $policyIdS->setJsHint(_M('Enter the policy code',$module));
        $flds[]         = $policyIdS;
        $validators[] = new MIntegerValidator('policyIdS', '', 'optional');

        $policyDescriptionS = new MTextField('policyDescriptionS', $this->getFormValue('policyDescriptionS',$data->policyDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $policyDescriptionS->setReadOnly(true);
        $flds[]         = $policyDescriptionS;

        $hctPolicyS = new MHContainer('hctPolicyS', $flds);
        $hctPolicyS->setShowLabel(false);
        $fields[]  = $hctPolicyS;
        unset($flds);
        
        $incomeSourceLabelS = new MText('incomeSourceLabelS', _M('Income source', $module) . ':');
        $incomeSourceLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $incomeSourceLabelS;
        
        $incomeSourceIdS = new MLookupTextField('incomeSourceIdS', $this->getFormValue('incomeSourceIdS',$data->incomeSourceIdS), _M('Income source',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'incomeSourceDescriptionS', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceIdS->setJsHint(_M('Enter the income source code',$module));
        $flds[]         = $incomeSourceIdS;
        $validators[] = new MIntegerValidator('incomeSourceIdS', '', 'optional');

        $incomeSourceDescriptionS = new MTextField('incomeSourceDescriptionS', $this->getFormValue('incomeSourceDescriptionS',$data->incomeSourceDescriptionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescriptionS->setReadOnly(true);
        $flds[]         = $incomeSourceDescriptionS;

        $hctIncomeSourceS = new MHContainer('hctIncomeSourceS', $flds);
        $hctIncomeSourceS->setShowLabel(false);
        $fields[]  = $hctIncomeSourceS;
        unset($flds);

        $inscriptionFeeS = new MTextField('inscriptionFeeS', $this->getFormValue('inscriptionFeeS',$data->inscriptionFeeS), _M('Inscription fee',$module), 18, _M('Value: 0.00', $module));
        $inscriptionFeeS->setJsHint(_M('Enter the inscription fee',$module));
        //$validators[] = new MRegExpValidator('inscriptionFeeS','', '[0-9]+\.[0-9]{2}');
        $fields[] = $inscriptionFeeS;
        $validators[] = new MFloatValidator('inscriptionFeeS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->eventId         = $this->eventIdS->value;
        $filters->description     = $this->descriptionS->value;
        $filters->accountSchemeId = $this->accountSchemeIdS->value;
        $filters->costCenterId    = $this->costCenterIdS->value;
        $filters->policyId        = $this->policyIdS->value;
        $filters->incomeSourceId  = $this->incomeSourceIdS->value;
        $filters->inscriptionFee  = $this->inscriptionFeeS->value;

        unset($this->eventIdS->value);


        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdEventSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusEvent');
        $data = $business->searchEvent($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);  

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.curriculumOutIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }

}

?>
