<?php

/**
 * Enroll cancellation form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate an enroll cancellation
 **/
class FrmEnrollCancelation extends MForm
{
    var $enrollData;

    /**
     * Class constructor
     **/
    function __construct()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $fields[] = new MHiddenField('limbo', '');

        parent::__construct(_M('Enroll cancellation', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }
    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person', $module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Enter the person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract', $module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractLabel;
        $contractLabel->setClass('m-caption m-caption-required');

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;
        $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->enrollData->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Enter the course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Enter the course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Enter the course name',$module));
        $flds[]             = $contractCourseName;  

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), _M('Parcels number',$module), FIELD_ID_SIZE);
        $parcelsNumber->setJsHint(_M('Enter the parcels number',$module));
        //$parcelsNumber->setReadOnly(true);
        //$validators[]  = new MRegExpValidator('parcelsNumber', '', POSSIBLE_PARCELS_NUMBER);
        $fields[]      = $parcelsNumber;

        $business = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period id',$module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId','', 'required');
        $fields[] = $periodId;
        
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]              = $learningPeriodLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period', $module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));
        $flds[]           = $learningPeriodId;

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(false);
        $fields[]          = $hctLearningPeriod;
        unset($flds);

        $fields[] = new Separator('');
        
        $fields[] = new MHiddenField('contractTurnId', $this->contractTurnId->value);
        $fields[] = new MHiddenField('contractUnitId', $this->contractUnitId->value);

        //Buttons
        $fields[]     = new MButton('btnList', _M('Search', $module));

        $this->setFields($fields);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click list
     **/
    public function btnList_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getData();

        $business = $MIOLO->getBusiness($module, 'BusEnrollCancelation');
        $enrolls  = $business->listPersonEnrolls($data->contractId, $data->periodId);

        $grid = $MIOLO->getUI()->getGrid($module,'GrdEnrollCancellation', null);
        $grid->setData($enrolls);

        $this->addField(new MSeparator());       
        $this->addField($grid);
        $this->addField(new MSeparator());
    }

    public function btnEnrollCancel_click()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        unset($validators);

        $data = $this->getData();

        $busEnroll = $MIOLO->getBusiness($module, 'BusEnroll');

        // fields needed to process the cancellation process
        $enrollId      = new MHiddenField('enrollId', $this->getFormValue('enrollId'));
        $fields[]      = $enrollId;
        $contractId    = new MHiddenField('contractId', $this->getFormValue('contractId'));
        $fields[]      = $contractId;
        $periodId      = new MHiddenField('periodId', $this->getFormValue('periodId'));
        $fields[]      = $periodId;
        $contractCourseId = new MHiddenField('contractCourseId', $this->getFormValue('contractCourseId'));
        $fields[]      = $contractCourseId;
        $learningPeriodId = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId'));
        $fields[]      = $learningPeriodId;

        $restantParcels = $this->getFormValue('parcelsNumber');
        if (strlen((string)$restantParcels) == 0)
        {
            $restantParcels = $busEnroll->getPeriodRestantParcels($this->getFormValue('contractId'), $this->getFormValue('learningPeriodId'));
        }
        
        $parcelsNumber = new MHiddenField('parcelsNumber', $restantParcels);
        $fields[]      = $parcelsNumber;

        $contractPerson = new MTextLabel('person', $this->getFormValue('contractPersonId') . ' - ' . $this->getFormValue('contractPersonName'), _M('Person', $module));
        $fields[]       = $contractPerson;

        $contract = new MTextLabel('contract', $this->getFormValue('contractId') . ' - ' . $this->getFormValue('contractCourseId') . '/' . $this->getFormValue('contractCourseVersion') . ' ' . $this->getFormValue('contractCourseName'), _M('Contract', $module));
        $fields[] = $contract;

        $parcelsNumber = new MTextLabel('parcels', $restantParcels, _M('Parcels number',$module));
        $fields[]      = $parcelsNumber;

        $business = $MIOLO->getBusiness($module,'BusPeriod');
        $period   = $business->getPeriod($this->getFormValue('periodId'));
        $periodId = new MTextLabel('period', $this->getFormValue('periodId') . ' - ' . $period->description, _M('Period id',$module));
        $fields[] = $periodId;

        $business            = $MIOLO->getBusiness($module, 'BusReasonCancellation');
        $reasonCancellations = $business->listReasonCancellation();

        $reasonCancellation  = new MComboBox('reasonCancellationId', $this->getFormValue('reasonCancellation'), _M('Cancellation reason id', $module), $reasonCancellations, true);
        $fields[]            = $reasonCancellation;
        $validators[]        = new MRequiredValidator('reasonCancellationId');

        $business = $MIOLO->getBusiness($module, 'BusEnrollCancelation');
        $enrolls  = $business->listPersonEnrolls($data->contractId, $data->periodId, $this->getFormValue('enrollId'));

        $grid = $MIOLO->getUI()->getGrid($module,'GrdEnrollCancellation', null);
        $grid->setData($enrolls);
        unset($grid->actions);

        $fields[] = new MSeparator();
        $fields[] = $grid;
        $fields[] = new MSeparator();

        //Buttons
        unset($opts);
        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';
        $backUrl    = $MIOLO->getActionURL($module, $action, null, $opts);

        $opts = array ( 'enrollId'=>$this->getFormValue('enrollId'),
                        'event'=>'btnEnrollCancelConfirmation_click');
        $confirmUrl    = $MIOLO->getActionURL($module, $action, null, $opts);
        $btn1[]     = new MButton('btnBack', _M('Back', $module), $backUrl);
        $btn1[]     = new MButton('btnConfirm', _M('Confirm enroll cancellation', $module));
        $div1       = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    public function btnConfirm_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();

        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';

        $enrollId              = $MIOLO->_request('enrollId');
        $reasonCancellationId  = $this->getFormValue('reasonCancellationId');
        
        $busEnrollCancellation = $MIOLO->getBusiness($module, 'BusEnrollCancelation');
        $busLearningPeriod     = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $busEnroll             = $MIOLO->getBusiness($module, 'BusEnroll');
        
        $busLearningPeriod->db = $busEnrollCancellation->db;
        $busEnroll->db         = $busEnrollCancellation->db;
        
        $transaction = $busEnrollCancellation->db->getTransaction();
        $transaction->_beginTransaction();
        
        $busEnrollCancellation->cancellEnroll($enrollId, $reasonCancellationId);
        
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
        $enrollData         = $busEnroll->getEnroll($enrollId);
        
        $data->groupId      = $enrollData->groupId;

        $busEnrollSummaryGen = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
        $busEnrollSummaryGen->db = $busEnrollCancellation->db;

        if ( (MODULE_FINANCE_INSTALLED == 'YES') && (strtoupper($learningPeriodData->isFinanceGenerate) == strtoupper(DB_TRUE)) )
        {
            //$busEnrollSummaryGen     = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
            //Gera os dados para a acdEnrollSummary (necessários para o módulo financeiro)
            //$busEnrollSummaryGen->generateEnrollSummaryToEnrollCancellationProcess($data);
        }

        if ( (count($busEnrollCancellation->getErrors()) > 0) || (count($busEnrollSummaryGen->getErrors())  > 0) || (count($busLearningPeriod->getErrors()) > 0) || (count($busEnroll->getErrors()) > 0) )
        {
            $transaction->_rollback();
            
            $msg  = _M('Error cancelling the enroll', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        else
        {
            $transaction->_commit();

/*
            //converte o resumo de matrícula em previsões
            if ( GENERATE_INC_FORECAST_ON_ENROLL_CANCELLATION == 'YES' )
            {
                $busFinance = $MIOLO->getBusiness('finance', 'BusIncomeForecast');
                $res        = $busFinance->generateIncomeForecast($data->learningPeriodId, $data->contractId,  count($enroll->groupId));
            }

            //converte as previsões em títulos
            if ( $res && GENERATE_INVOICE_ON_ENROLL_CANCELLATION == 'YES')
            {

                $businessRec = $MIOLO->getBusiness('finance', 'BusReceivableInvoicePupil');

                $dataInvoice->bankAccountId    = $busLearningPeriod->getLearningPeriodBankAccount($data->learningPeriodId);
                $dataInvoice->bankContractId   = $busLearningPeriod->getLearningPeriodBankContract($data->learningPeriodId);
                $dataInvoice->personId         = $data->personId;
                $dataInvoice->contractId       = $data->contractId;
                $dataInvoice->learningPeriodId = $data->learningPeriodId;

                //pega os meses e anos do período letivo
                $dates = $busFinance->getMonthAndYear($dataInvoice);

                if ( count($dates) > 0 )
                {
                    foreach ( $dates as $date )
                    {
                        list ( $dataInvoice->month, $dataInvoice->year ) = $date;
                        $businessRec->generateReceivableInvoices($dataInvoice);
                    }
                }
            }
*/
            $msg = _M('Enroll cancelled with success', $module);
            $goto = $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
    }
}

?>
