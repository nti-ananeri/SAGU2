<?php

class FrmEnrollServicesPupilUpdate extends MForm
{

    /**
     * Class constructor
     **/
    function __construct($data=null)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();

        parent::__construct(_M('Enroll services pupil update', $module) );

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');
        $event     = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

		$toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnNew');
        $fields[] = $toolBar;
        $data = $this->getTypesData(); 
		//Person Student
		$personLabel = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
 
		$personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'PersonPupils', null, null, true);
        $personId->setJsHint(_M('Enter the person code',$module));

        $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Person name',$module));
        $personName->setReadOnly(false);

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
		$fields[]  = $hctPerson;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        $businessTurn = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId   = new MSelection('turnId',
                                  $this->GetFormValue('turnId',$data->turnId),
                                  null,
                                  $businessTurn->listTurn());
        $turnId->setJsHint(_M('Turn id', $module));


        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        $businessUnit = $MIOLO->getBusiness('basic','BusUnit');
        $unitId   = new MSelection('unitId', $this->GetFormValue('unitId', $data->unitId), null, $businessUnit->listUnit());
        $unitId->setJsHint(_M('Unit id', $module));
        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        //data de alteracao
        $updateDateLabel = new MText('updateDateLabel', _M('Last modification', 'basic'). ':');
        $updateDateLabel->setWidth(FIELD_LABEL_SIZE);

        $updateDateFrom  = new MText('updateDateFrom', _M('from', 'finance'));

        $updateStartDate = new MCalendarField('updateStartDate', $this->updateStartDate->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('updateStartDate', _M('Update start date', $module), 'optional');

        $updateDateTo  = new MText('updateDateTo', _M('to', 'finance'));

        $updateEndDate = new MCalendarField('updateEndDate', $this->updateEndDate->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('updateEndDate', _M('Update end date', $module), 'optional');

        $hctUpdateDate = new MHContainer('hctUpdateDate', array($updateDateLabel, $updateDateFrom, $updateStartDate, $updateDateTo, $updateEndDate));
        $hctUpdateDate->setShowLabel(false);
        $fields[]         = $hctUpdateDate;

        $listYesNo = SAGU::listYesNo('1');
        $listYesNo[] = array(_M('Undefined', $module) , 'u');
        
        // Imprimir contratos já atualizados ?
        $listUpdatedContractsLabel = new MText('listUpdatedContractsLabel', _M('Print updated contracts',$module) . '?');
        $listUpdatedContractsLabel->setWidth(FIELD_CONTAINER_SIZE);

        $listUpdatedContracts      = new MRadioButtonGroup('listUpdatedContracts', '', $listYesNo ,  $this->GetFormValue('listUpdatedContracts',$data->listUpdatesContracts), null, 'horizontal');
        $listUpdatedContracts->SetShowLabel(false);
        $listUpdatedContracts->setAutoPostBack(false);

        $hctlistUpdatedContracts   = new MHContainer('hctlistUpdatedContracts', array($listUpdatedContractsLabel, $listUpdatedContracts));
        $fields[]             = $hctlistUpdatedContracts;

        // Imprimir títulos já pagos ?
        $listOpenInvoicesLabel = new MText('listOpenInvoicesLabel', _M('Print open invoice',$module) . '?');
        $listOpenInvoicesLabel->setWidth(FIELD_CONTAINER_SIZE);
        $listOpenInvoices      = new MRadioButtonGroup('listOpenInvoices', '', $listYesNo , $this->GetFormValue('listOpenInvoices',$data->listOpenInvoices), null, 'horizontal');
        $listOpenInvoices->SetShowLabel(false);
        $listOpenInvoices->setAutoPostBack(false);

        $hctListOpenInvoices   = new MHContainer('hctListOpenInvoices', array($listOpenInvoicesLabel, $listOpenInvoices));
        $fields[]             = $hctListOpenInvoices;
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));
        $fields[] = new Separator();
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
		$this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Print from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
		$MIOLO                  = MIOLO::getInstance();
		$module                 = MIOLO::getCurrentModule();
        $data   =   $this->getTypesData();     
        $class  =   'RptEnrollServicesPupilUpdate'; 
	    $MIOLO->getClass('academic', $class);
	    $report = new $class($data);
    }

    /**
     * Event triggered when user chooses Search 
     **/
    public function btnSearch_click($sender = null)
    {
		$MIOLO                  = MIOLO::getInstance();
		$module                 = MIOLO::getCurrentModule();
        $data = $this->getTypesData();
        $business   = $MIOLO->getBusiness($module, 'BusEnrollServicesPupilUpdate');
		$dataX      = $business->getPupils($data);
        $grd    = $MIOLO->getUI()->getGrid($module, 'GrdEnrollServicesPupilUpdate');
        $grd->setData($dataX);
		$this->addField($grd);
    }

    public function btnPrintContract_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$module = 'services';

        $cd->contractId         = MIOLO::_request('contractId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->situation          = MIOLO::_request('radSituation');
        set_time_limit(0);
		$busContract  = $MIOLO->getBusiness('academic','BusContractGraduation');
		$contract = $busContract->getContract($cd->contractId);

        $business = $MIOLO->getBusiness('services', 'BusEnroll');
        $businessDocument = $MIOLO->getBusiness('basic', 'BusDocument');
        $data     = $business->getPhysicalPerson($contract->contract->personId);
        if(!$data)
        {
            unset($business);
            $business = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
            $data     = $business->getPhysicalPerson($personId);
            $rg = $businessDocument->getDocument($personId, RG_CODE);
            $cpf = $businessDocument->getDocument($personId, CPF_CODE);
            $data->contentCPF = strlen((string)$cpf->content) > 0 ? SAGU::convertInCPFFormat($cpf->content) : "" ;
            $data->contentRG = $rg->content;
            $data->organRG = $rg->organ;
            $data->dateExpeditionRG = $rg->dataExpedition;
        }
        else
        {
            $data->contentCPF = strlen((string)$data->contentCPF) > 0 ? SAGU::convertInCPFFormat($data->contentCPF) : "" ;
        }
        $contract->contract->workPhone          = $data->workPhone;
        $contract->contract->cellPhone          = $data->cellPhone;
        $contract->contract->messagePhone       = $data->messagePhone;
        $contract->contract->residentialPhone   = $data->residentialPhone;
        $contract->contract->cityName           = $data->cityName;
        $contract->contract->neighborhood       = $data->neighborhood;
        $contract->contract->number             = $data->number;
        $contract->contract->location           = $data->location;
        $contract->contract->zipCode            = $data->zipCode;
        $contract->contract->cpf                = $data->contentCPF;
        $contract->contract->rg                 = $data->contentRG . ' / '. $data->organRG;
        $contract->contract->email              = $data->email;
	    $MIOLO->getClass('services', 'RptContractDocumentServices');
	    $report = new RptContractDocumentServices($contract);
    }

    public function btnPrintInvoice_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$module = 'services';
        $MIOLO->uses('classes/sagu.class','basic');
		$data->contractId = MIOLO::_request('contractId');
        $busEnroll = $MIOLO->getBusiness($module, 'BusEnroll');
        $invoiceId = $busEnroll->generateInvoice($data->contractId);
        if($invoiceId)
        {
            $opts      = array('event'=>'submit_button_click', 'invoiceId'=>$invoiceId);
            $page = $MIOLO->getActionURL('finance', "main:process:printInvoice", null, $opts);
            $this->page->mGoto($page);
        }
        else
        {
		    $returnTo = substr($action,0,strrpos($action,':')) ;
		    //$vars       = array ( 'page' => '2');
			$prevUrl    = $MIOLO->getActionURL($module, $returnTo, null, null);
            $MIOLO->Information(_M('Problemas com o boleto. Contate central de atendimento.',$module),$prevUrl);
        }
    }

    public function btnPrintInvoices_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$module = 'services';
        $MIOLO->uses('classes/sagu.class','basic');
		$data->contractId = MIOLO::_request('contractId');
        $busEnroll = $MIOLO->getBusiness('academic', 'BusEnrollServicesPupilUpdate');
        
        $invoiceIds = $busEnroll->getInvoicesPupil ( $data->contractId );

        foreach($invoiceIds as $item)
        {
            if((float)$item[2] > (float)MINIMAL_VALUE_TO_PRINT_INVOICE)
            {
                $filters->invoices[$item[1]]->invoiceId[] = $item[0];
            }
        }

        $RptPrintInvoice = 'RptPrintInvoicesInLot';
        $filters->printLeftHanded = 'f';
    
        if( count($filters->invoices) > 0 )
        {
            $MIOLO->getClass('finance', $RptPrintInvoice);
            $report = new $RptPrintInvoice($filters);
        }
        else
        {
		    $returnTo = substr($action,0,strrpos($action,':')) ;
		    //$vars       = array ( 'page' => '2');
			$prevUrl    = $MIOLO->getActionURL($module, $returnTo, null, null);
            $MIOLO->Information(_M('Problemas com o boleto. Contate central de atendimento.',$module),$prevUrl);
        }
    }

    public function tbBtnSave_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$module = 'academic';
        $selects = MIOLO::_request('selectGrdEnrollServicesPupilUpdate');
        $personId = MIOLO::_request('personId');
        if ( count($selects) > 0 )
        {
            $business   = $MIOLO->getBusiness($module, 'BusEnrollServicesPupilUpdate');
            $ok = $business->updatePersonData($selects);
            if ( $ok )
            {
                $goto = SAGU::getStackBackUrl();
                if ( count($selects) == 1 )
                {
                    $contractId = array_shift($selects);
                    $array = array('event'=>'btnSearch_click', 'personId'=>$personId);
                }
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $array );
                $caption = _M('Information',$module);
                $MIOLO->information(MSG_RECORD_UPDATED, $goto);
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error',$module);
                $this->addError( $msg, $goto, $caption );
            }
        }
        else
        {
		    $returnTo = substr($action,0,strrpos($action,':')) ;
			$prevUrl    = $MIOLO->getActionURL($module, $returnTo, null, null);
            $this->addError('N&atilde;o foi selecionado nenhuma pessoa para atualizar dados',$prevUrl);

        }
    }

    public function getTypesData()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$data->courseId         = MIOLO::_request('courseId');
		$data->courseVersion    = MIOLO::_request('courseVersion');
		$data->turnId           = MIOLO::_request('turnId');
		$data->personName       = MIOLO::_request('personName');
		$data->personId         = MIOLO::_request('personId');
        $data->unitId           = MIOLO::_request('unitId');
        $data->listUpdatedContracts = MIOLO::_request('listUpdatedContracts');
        $data->updateStartDate  = MIOLO::_request('updateStartDate');
        $data->updateEndDate    = MIOLO::_request('updateEndDate');
        $data->listOpenInvoices = MIOLO::_request('listOpenInvoices');
        if(  strlen((string)$data->listUpdatedContracts) == 0 )
        {
            $data->listUpdatedContracts = 'u';
        }

        if(  strlen((string)$data->listOpenInvoices) == 0 )
        {
            $data->listOpenInvoices = 'u';
        }
        
        return $data;
    }
}
