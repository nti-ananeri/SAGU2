<?php

/**
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/10/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmBoxLabel extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Box label', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Box label', $this->home, 'boxLabel-16x16.png', true);
        }
        //fim favoritos

        $fields[]   = $toolBar;

        $fields[]   = new MSeparator();
        $fields[]   = new MHiddenField('limbo', '');


        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]         = $periodId;


        $boxNumberLabel = new MText('boxNumberLabel', _M('Box number',$module) . ':');
        $boxNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $boxNumberLabel;

        $boxNumber = new MTextField('boxNumber', $this->getFormValue('boxNumber', $boxNumber), '', FIELD_ID_SIZE);
        //$sheet->setReadOnly(true);
        $boxNumber->setJsHint(_M('Box number',$module));
        $flds[]           = $boxNumber;

        $hctBoxNumber = new MHContainer('hctBoxNumber', $flds);
        $hctBoxNumber->setShowLabel(true);
        $fields[]    = $hctBoxNumber;
        unset($flds);

//         $businessDiploma = $MIOLO->getBusiness('academic', 'BusDiploma');
//         $registerNumber   = $businessDiploma->getNextRegisterNumber();
//         $sheet            = $businessDiploma->getNextPageNumber();
// 
// 
//         $registerNumberLabel = new MText('$registerNumberLabel', _M('Regiter id',$module) . ':');
//         $registerNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $registerNumberLabel->setClass('m-caption m-caption-required');
//         $flds[]           = $registerNumberLabel;
// 
//         $registerNumber = new MTextField('registerNumber', $this->getFormValue('registerNumber', $registerNumber), '', 10);
//         $registerNumber->setJsHint(_M('Enter the regiter id',$module));
//         $flds[]             = $registerNumber;
// 
//         $hctRegisterId = new MHContainer('hctRegisterId', $flds);
//         $hctRegisterId->setShowLabel(true);
//         $fields[]    = $hctRegisterId;
//         unset($flds);
// 
// 
//         $sheetLabel = new MText('sheetLabel', _M('Sheet',$module) . ':');
//         $sheetLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $sheetLabel->setClass('m-caption m-caption-required');
//         $flds[]           = $sheetLabel;
// 
//         $sheet = new MTextField('sheet', $this->getFormValue('sheet', $sheet), '', 10);
//         $sheet->setJsHint(_M('Enter the sheet number',$module));
//         $flds[]             = $sheet;
// 
//         $hctSheet = new MHContainer('hctSheet', $flds);
//         $hctSheet->setShowLabel(true);
//         $fields[]    = $hctSheet;
//         unset($flds);
// 
//         $bookLabel = new MText('bookLabel', _M('Book',$module) . ':');
//         $bookLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $bookLabel->setClass('m-caption m-caption-required');
//         $flds[]           = $bookLabel;
// 
//         $book = new MTextField('book', $this->getFormValue('book', $book), '', 10);
//         $book->setJsHint(_M('Enter the sheet number',$module));
//         $flds[]             = $book;
// 
//         $hctBook     = new MHContainer('hctBook', $flds);
//         $hctBook->setShowLabel(true);
//         $fields[]    = $hctBook;
//         unset($flds);
// 
// 
//         $protocolLabel = new MText('protocolLabel', _M('Protocol id',$module) . ':');
//         $protocolLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $protocolLabel->setClass('m-caption m-caption-required');
//         $flds[]           = $protocolLabel;
// 
//         $protocolId = new MTextField('protocolId', $this->getFormValue('protocolId', $protocolId), '', 10);
//         $protocolId->setJsHint(_M('Enter the protocol id',$module));
//         $flds[]             = $protocolId;
// 
//         $hctProtocol     = new MHContainer('hctProtocol', $flds);
//         $hctProtocol->setShowLabel(true);
//         $fields[]    = $hctProtocol;
//         unset($flds);
// 
//         $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', $data->emissionDate), _M('Emission date',$module), FIELD_DATE_SIZE);
//         $emissionDate->setJsHint(_M('Enter the emission date', $module));
//         $emissionDate->setValidator( new MDATEDMYValidator('emissionDate', '', 'required'));
//         //$validators[] = new MDATEDMYValidator('occurrenceDate', '', 'required');
//         $fields[] = $emissionDate;

        $btnPrintBoxLabel = new MButton('btnPrintBoxLabel',_M('Print box label document',$module));
        $btnPrintBoxLabel->attachEventHandler('click', 'tbBtnPrint_click', true);

        $fields[] = $btnPrintBoxLabel;

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                    = MIOLO::getInstance();
        $module                   = MIOLO::getCurrentModule();
        $action                   = MIOLO::getCurrentAction();

        $data->periodId           = MIOLO::_request('periodId');
        $data->boxNumber          = MIOLO::_request('boxNumber');
        $data->formationLevelId   = GRADUATION_FORMATION_LEVEL_ID;

        $MIOLO->uses('classes/RptBoxLabel.class', $module);

        $businessLearningPeriod   = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriods          = $businessLearningPeriod->searchLearningPeriod($data);

        $oldValue = 0;
        $keyLearningPeriod = 0;

        if ( is_array($learningPeriods) && (count($learningPeriods) > 0) )
        {
            foreach($learningPeriods as $key => $learningPeriod)
            {
                if ( $oldValue == $learningPeriod[8] )
                {

                }
                else
                {
                    $courseName[$keyLearningPeriod] .= $learningPeriod[7] . ' - ' . $learningPeriod[8];
                    $keyLearningPeriod++;
                }

                $oldValue = $learningPeriod[8];
            }
        }
        else
        {
            $msg  = _M('No learning period for this period',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        $data->courseName = $courseName;

        $report = new RptBoxLabel($data);

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }
}

?>
