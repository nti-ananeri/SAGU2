<?php


class FrmListingForSense extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Listings for sense', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $a = unserialize(urldecode(stripslashes(MIOLO::_request('filter'))));
        if ( is_array($a) )
        {
            $filter = $a;
        }

        if ( !is_array($filter) )
        {
            $filter = array();
        }

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Listings for sense', $this->home, 'listingForSense-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Enter the period code', $module));
        $fields[]       = $periodId;
        $validators[]   = new MRequiredValidator('periodId', _M('Period',$module));

        $fields[] = new Separator('');

        $reportOptions = array( 
										array(_M('Number of students for a reason, course and gender', $module), 1),
                                		array(_M('Number of students per period and gender', $module), 2),
                                		array(_M('Number of students by type of school scholarship', $module), 3),
                                		array(_M('Number of students per period, reason and course', $module), 4),
                                		array(_M('Number of students per period, grade and turn', $module), 5),
										array(_M('Number of students per period, stroke, turn and gender', $module), 6),
										array(_M('Number of students per period, grade, turn and gender',$module), 7),
										array(_M('Number of students per period, course, turn and curriculum number hours', $module), 8),
										array(_M('Number of students per period, stroke, empowerment and gender', $module), 9),
										array(_M('Number of students per period, course, gender and age range', $module), 10), 
										array(_M('Number of students per period, income mode, gender and turn', $module), 11),
										array(_M('Informação de alunos por periodo de movimentação contratual', $module), 12										)
										);

        $reportOption = new MRadioButtonGroup('reportOption', _M('Report option', $module), $reportOptions, strlen((string)$this->getFormValue('reportOption', $reportOption)) > 0 ? $this->getFormValue('reportOption',$reportOption) : 1 );
        $reportOption->setShowLabel(false);
        $fields[] = $reportOption;

        $fields[]          = $filter;

        $fields[] = new Separator('');
        $this->setValidators($validators);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter->periodId                   = $this->getFormValue('periodId');
		  $filter->optionId                   = $this->getFormValue('reportOption');
		        
        $busListingForSense = $MIOLO->getBusiness($module,'BusListingForSense');
        $data = $busListingForSense->getListingForSense($filter); 

        switch ($filter->optionId)
        {
            case 1:
                $reportX = 'RptStatusCourseSex';
                break;
            case 2:
				$reportX = 'RptSex';
                break;
           	case 3:
				$reportX = 'RptSchoolScolarship';
                break;
           	case 4:
				$reportX = 'RptPeriodStatusCourse';
                break;
             case 5:
				$reportX = 'RptPeriodDegreeTurn';
                break;
             case 6:
				$reportX = 'RptPeriodCourseTurnSex';
                break;
			 case 7:
			 	$reportX = 'RptPeriodTurnDegreeSex';
			 	break;
		 	case 8:
			 	$reportX = 'RptPeriodCourseTotalHours';
			 	break;
			case 9:
				$reportX = 'RptPeriodCourseHabilitySex';
				break;
			case 10:
				$reportX = 'RptPeriodCourseSexAge';
				break;
			case 11:
				$reportX = 'RptPeriodFormTicketTurnSex';
				break;
   			case 12:
				$reportX = 'RptPupilInformation';
				break;
            default:
            break;
        }
        
        $MIOLO->getClass($module,$reportX);
        $report = new $reportX($data,$filter);
        
    }

}

?>
