<?php

/**
 * Enroll term form
 *
 * @author Daniel Afonso Heisler [daniel@hsti.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/05/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmEnrollTerm extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Enroll term', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Enroll term', $this->home, 'enrollTerm-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $contractPersonLabel = new MText('contractLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'ActivePersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Enter the person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]        = $contractLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'ActiveContract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]     = $contractId;
        $validators[]     = new MRequiredValidator('contractId', _M('Contract',$module), 'required');

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Enter the course code',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Enter the course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Enter the course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]              = $learningPeriodLabel;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Learning period', $module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId'), true);
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));
        $flds[]           = $learningPeriodId;

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(false);
        $fields[]          = $hctLearningPeriod;
        unset($flds);

        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->page->onLoad('document.' . $this->name . '.personId.focus()');
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $cd->contractId       = MIOLO::_request('contractId');
        $cd->personId         = MIOLO::_request('contractPersonId');
        $cd->courseId         = MIOLO::_request('contractCourseId');
        $cd->courseVersion    = MIOLO::_request('contractCourseVersion');
        $cd->courseName       = MIOLO::_request('contractCourseName');
        $cd->learningPeriodId = MIOLO::_request('learningPeriodId');
        $cd->periodId         = MIOLO::_request('periodId');
        $cd->fileType         = MIOLO::_request('radFileType');

        set_time_limit(0);

        $db     = $MIOLO->getBusiness('academic', 'BusEnrollTerm');
        $data2  = $db->getPersonData($cd->personId);

        if ( count($data2) == 0 )
        {
            $this->addError(_M('There is no data for the information entered.', $module));
        }
        else
        {
            $MIOLO->uses('/core/AgataAPI.class');

            $api = new AgataAPI;

            $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
            $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);
            
            $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
            $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

            $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
            $city         = $businessCity->getCity($legalPerson->cityId);

            $businessContractDocument = $MIOLO->getBusiness($module, 'BusContractDocument');
            $data = $businessContractDocument->getGraduationContractDocument($cd);

            $businessLearningPeriod = $MIOLO->getBusiness('academic', 'BusLearningPeriod');
            $learningPeriod         = $businessLearningPeriod->getLearningPeriod($cd->learningPeriodId);

            $businessPersonSemester = $MIOLO->getBusiness('academic', 'BusEnroll');
            $personSemester         = $businessPersonSemester->getPersonSemester($cd->contractId, $cd->learningPeriodId);

            $businessClassPupil = $MIOLO->getBusiness('academic', 'BusClassPupil');
            $classId            = $businessClassPupil->getContractCurrentClass($cd);

            if ( strlen((string)$classId)>0 )
            { 
                $businessClass = $MIOLO->getBusiness('academic', 'BusClass');
                $class         = $businessClass->getClass($classId);
            }

            $api->setParameter('$year', date('Y'));
            $api->setParameter('$course', $cd->courseName);
            $api->setParameter('$periodId', $cd->periodId);
            $api->setParameter('$initialDate', $learningPeriod->beginDate);
            $api->setParameter('$finalDate', $learningPeriod->endDate); 
            $api->setParameter('$cityName', $city->name);
            $api->setParameter('$date', date('d/m/Y'));
            $api->setParameter('$semester', $personSemester);
            $api->setParameter('$institution', $legalPerson->fakeName);
            $api->setParameter('$companyName', $company->name);
            $api->setParameter('$classId', $class->name);

            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/academicEnrollTerm.sxw');
            $api->setDataArray($data2);

            $data3       = $db->listCurricularComponent($cd->courseId, $cd->courseVersion, $personSemester);
            $data4[0][0] = $data3;
            $api->setSubDataArray($data4);

            $api->setImageReplace('figura1', SAGUFile::getPhotoPath($company->personId));

            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/academicEnrollTerm.sxw'));

            if ( $ok && $cd->fileType == 'pdf' )
            {
                $api->setOutputPath(TEMP_DIR . '/academicEnrollTerm.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/academicEnrollTerm.sxw');
            }

            if ( !$ok )
            {
                $this->addError(_M('AGATA returned this error: @1.', $module, $api->getError()));
            }
            else
            {
                $api->fileDialog();
            }
        }
    }
}

?>
