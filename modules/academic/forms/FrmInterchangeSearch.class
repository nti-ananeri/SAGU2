<?php

/**
 *
 * This file handles the connection and actions for acdInterchange table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdInterchange table
 */
class FrmInterchangeSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Interchange', $this->home, 'interchange-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
/*        $contractIdS = new MLookupTextField('contractIdS', $this->contractIdS->value, _M('Contract id',$module), 10, null, null, 'contractPersonIdS,contractPersonNameS', $module, 'Contract', null, null, true);
        $fields[] = $contractIdS;

        $contractPersonIdS = new MTextField('contractPersonIdS', $this->contractPersonIdS->value, _M('Contract person id',$module), 15);
        $contractPersonIdS->setJsHint(_M('Enter the contract person code',$module));
        $fields[] = $contractPersonIdS;

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->contractPersonNameS->value, _M('Contract person name',$module), 25);
        $contractPersonNameS->setJsHint(_M('Enter the contract person name',$module));
        $fields[] = $contractPersonNameS; */
        
//         $personLabel = new MText('personLabel', _M('Person',$module) . ':');
//         $personLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $flds[]   = $personLabel;
// 
//         $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->scheduleShockUnblockSearch->contractPersonIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
//         $contractPersonIdS->setJsHint(_M('Enter the person code',$module));
//         $flds[]           = $contractPersonIdS;
//         $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');
// 
//         $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->scheduleShockUnblockSearch->contractPersonNameS), '', FIELD_DESCRIPTION_SIZE);
//         $contractPersonNameS->setReadOnly(true);
//         $flds[]             = $contractPersonNameS;
// 
//         $hctPersonS = new MHContainer('hctContractS', $flds);
//         $hctPersonS->setShowLabel(true);
//         $fields[]  = $hctPersonS;
//         unset($flds);

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $personLabel;

        $personIdS     = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $this->personIdS->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'personIdS', 'personNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
        $validators[] = new MIntegerValidator('personIdS', '', 'optional');
        $flds[]       = $personIdS;

        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS',$data->personNameS), '', FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);
        $flds[]             = $personNameS;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);


        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $contractLabel;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS',$data->contractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                array('personIdS', 'personNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'),
                $module, 'Contract', null, array('personId' => 'personIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', '', 'optional');
 
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$data->contractCourseIdS),'', FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $contractCourseIdS->setJsHint(_M('Course',$module));
        $flds[]           = $contractCourseIdS;

        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$data->contractCourseVersionS), '', FIELD_ID_SIZE);
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseVersionS->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersionS;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $courseNameLabel = new MText('courseNameLabel', _M('Course description',$module) . ':');
        $courseNameLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $courseNameLabel;

        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$data->contractCourseNameS), '', FIELD_DESCRIPTION_SIZE);
        $contractCourseNameS->setReadOnly(true);
        $contractCourseNameS->setJsHint(_M('Description',$module));
        $flds[]             = $contractCourseNameS;

        $hctCourseName = new MHContainer('hctCourseName', $flds);
        $hctCourseName->setShowLabel(true);
        $fields[]    = $hctCourseName;
        unset($flds);

//         $contractTurnId = new MHiddenField('contractTurnId', '');
//         $fields[]    = $contractTurnId;

        $fields[]  = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId', $contractTurnId));

//         $contractUnitId = new MHiddenField('contractUnitId', '');
//         $fields[]    = $contractUnitId;        

        $fields[]  = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId', $contractUnitId));


//         $interchangeTypeLabel = new MText('interchangeTypeLabel', _M('Interchange type id',$module) . ':');
//         $interchangeTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
//         $flds[]   = $interchangeTypeLabel;
// 
//         $interchangeTypeIdS = new MLookupTextField('interchangeTypeIdS', $this->getFormValue('interchangeTypeIdS',$this->data->interchangeTypeIdS->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('interchangeTypeIdS', 'interchangeTypeDescriptionS'), $module, 'InterchangeType', null, '', !$this->page->isPostBack());
//         $interchangeTypeIdS->setJsHint(_M('Enter the interchange type code',$module));
//         $flds[]           = $interchangeTypeIdS;
//         $validators[] = new MIntegerValidator('interchangeTypeIdS', '', 'optional');
// 
//         $interchangeTypeDescriptionS = new MTextField('interchangeTypeDescriptionS', $this->getFormValue('interchangeTypeDescriptionS',$this->data->interchangeTypeDescriptionS->value), '', FIELD_DESCRIPTION_SIZE);
//         $interchangeTypeDescriptionS->setReadOnly(true);
//         $flds[]             = $interchangeTypeDescriptionS;
// 
//         $hctInterchangeTypeS = new MHContainer('hctInterchangeTypeS', $flds);
//         $hctInterchangeTypeS->setShowLabel(true);
//         $fields[]  = $hctInterchangeTypeS;
//         unset($flds);

        $business           = $MIOLO->getBusiness($module,'BusInterchangeType');
        $interchangeTypeIdS = new MComboBox('interchangeTypeIdS', $this->getFormValue('interchangeTypeIdS', $data->interchangeTypeIdS), _M('Interchange type id',$module), $business->listInterchangeType());
        $interchangeTypeIdS->setJsHint(_M('Enter the interchange type code',$module));
        $fields[]           = $interchangeTypeIdS;

        $interchangeTypeComplementS = new MTextField('interchangeTypeComplementS', $this->getFormValue('interchangeTypeComplementS', $data->interchangeTypeComplementS->value), _M('Interchange type complement',$module), FIELD_DESCRIPTION_SIZE);
        $interchangeTypeComplementS->setJsHint(_M('Enter the interchange type',$module));
        $fields[] = $interchangeTypeComplementS;

        $activityInterchangeS = new MTextField('activityInterchangeS', $this->getFormValue('activityInterchangeS', $data->activityInterchangeS->value), _M('Activity carried through',$module), FIELD_DESCRIPTION_SIZE);
        $activityInterchangeS->setJsHint(_M('Enter the activity realized',$module));
        $fields[] = $activityInterchangeS;


        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDateS->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('End date',$module), FIELD_DATE_SIZE);
        $endDateS->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;
        
        $originCountryLabelS = new MText('originCountryLabelS', _M('Origin country', $module) . ':');
        $originCountryLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $originCountryLabelS;

        $originCountryIdS = new MLookupTextField('originCountryIdS', $this->originCountryIdS->value, _M('Origin country id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'originCountryNameS', 'basic', 'Country', null, null, true);
        $flds[] = $originCountryIdS;
        $validators[] = new MIntegerValidator('originCountryIdS', '', 'optional');

        $originCountryNameS = new MTextField('originCountryNameS', $this->originCountryNameS->value, _M('Origin country name',$module), FIELD_DESCRIPTION_SIZE);
        $originCountryNameS->setJsHint(_M('Enter the country name',$module));
        $originCountryNameS->setReadOnly(true);
        $flds[] = $originCountryNameS;
        
        $hctOriginCountryS = new MHContainer('hctOriginCountryS', $flds);
        $hctOriginCountryS->setShowLabel(false);
        $fields[] = $hctOriginCountryS;
        unset($flds);

        $originInstitutionLabelS = new MText('originInstitutionLabelS', _M('Origin institution', $module) . ':');
        $originInstitutionLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $originInstitutionLabelS;

        $originInstitutionIdS = new MLookupTextField('originInstitutionIdS', $this->originInstitutionIdS->value, _M('Origin institution id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'originInstitutionNameS', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'originCountryIdS'), true);
        $flds[] = $originInstitutionIdS;
        $validators[] = new MIntegerValidator('originInstitutionIdS', _M('Origin institution', $module), 'optional');

        $originInstitutionNameS = new MTextField('originInstitutionNameS', $this->originInstitutionNameS->value, _M('Origin institution name',$module), FIELD_DESCRIPTION_SIZE);
        $originInstitutionNameS->setJsHint(_M('Enter the origin institution name',$module));
        $originInstitutionNameS->setReadOnly(true);
        $flds[] = $originInstitutionNameS;
        
        $hctOriginInstitutionS = new MHContainer('hctOriginInstitutionS', $flds);
        $hctOriginInstitutionS->setShowLabel(false);
        $fields[] = $hctOriginInstitutionS;
        unset($flds);

        $destinationCountryLabelS = new MText('destinationCountryLabelS', _M('Destination country', $module) . ':');
        $destinationCountryLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $destinationCountryLabelS;

        $destinationCountryIdS = new MLookupTextField('destinationCountryIdS', $this->destinationCountryIdS->value, _M('Destination country id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'destinationCountryNameS', 'basic', 'Country', null, null, true);
        $flds[] = $destinationCountryIdS;
        $validators[] = new MIntegerValidator('destinationCountryIdS', '', 'optional');

        $destinationCountryNameS = new MTextField('destinationCountryNameS', $this->destinationCountryNameS->value, _M('Destination country name',$module), FIELD_DESCRIPTION_SIZE);
        $destinationCountryNameS->setJsHint(_M('Enter the country name',$module));
        $destinationCountryNameS->setReadOnly(true);
        $flds[] = $destinationCountryNameS;
        
        $hctDestinationCountryS = new MHContainer('hctDestinationCountryS', $flds);
        $hctDestinationCountryS->setShowLabel(false);
        $fields[] = $hctDestinationCountryS;
        unset($flds);

        $destinationInstitutionLabelS = new MText('destinationInstitutionLabelS', _M('Destination institution', $module) . ':');
        $destinationInstitutionLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $flds[] = $destinationInstitutionLabelS;

        $destinationInstitutionIdS = new MLookupTextField('destinationInstitutionIdS', $this->destinationInstitutionIdS->value, _M('Destination institution id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'destinationInstitutionNameS', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'destinationCountryIdS'), true);
        $flds[] = $destinationInstitutionIdS;
        $validators[] = new MIntegerValidator('destinationInstitutionIdS', _M('Destination institution',$module), 'optional');

        $destinationInstitutionNameS = new MTextField('destinationInstitutionNameS', $this->destinationInstitutionNameS->value, _M('Destination institution name',$module), FIELD_DESCRIPTION_SIZE);
        $destinationInstitutionNameS->setJsHint(_M('Enter the destination institution name',$module));
        $destinationInstitutionNameS->setReadOnly(true);
        $flds[] = $destinationInstitutionNameS;
        
        $hctDestinationInstitutionS = new MHContainer('hctDestinationInstitutionS', $flds);
        $hctDestinationInstitutionS->setShowLabel(false);
        $fields[] = $hctDestinationInstitutionS;
        unset($flds);

        $isRemuneratedLabelS = new MText('isRemuneratedLabelS', _M('Is remunerated',$module).':');
        $isRemuneratedLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $isRemuneratedS = new MRadioButtonGroup('isRemuneratedS', null, SAGU::listTrueFalse(1), $this->isRemuneratedS->value, null, 'horizontal');
        $isRemuneratedS->setShowLabel(false);

        $hctIsRemunerated = new MHContainer('hctIsRemunerated', array($isRemuneratedLabelS, $isRemuneratedS));
        $fields[] = $hctIsRemunerated;

        $fields[] = new MButton('btnSearch', _M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->personId                     = $this->personIdS->value;
        $filters->contractId                   = $this->contractIdS->value;
        $filters->interchangeTypeId             = $this->interchangeTypeIdS->value;
        $filters->interchangeTypeComplement    = $this->interchangeTypeComplementS->value;
        $filters->activityInterchange          = $this->activityInterchangeS->value;
//         $filters->contractPersonId   = $this->contractPersonIdS->value;
//         $filters->contractPersonName = $this->contractPersonNameS->value;
        $filters->beginDate                    = $this->beginDateS->value;
        $filters->endDate                      = $this->endDateS->value;
        $filters->origincountryId              = $this->origincountryIdS->value;
//         $filters->countryName        = $this->countryNameS->value;
        $filters->origininstitutionId          = $this->origininstitutionIdS->value;
//         $filters->institutionName    = $this->institutionNameS->value;
        $filters->destinationcountryId         = $this->destinationCountryIdS->value;
        $filters->destinationinstitutionId     = $this->destinationinstitutionIdS->value;
        $filters->isRemunerated                = $this->isRemuneratedS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdInterchangeSearch',$filters);


        $business = $MIOLO->getBusiness($module,'BusInterchange');
        $data = $business->searchInterchange($filters);

        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.contractIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
