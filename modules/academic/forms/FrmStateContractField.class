<?php

/**
 * StateContractField form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a stateContractField
 **/
class FrmStateContractField extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;


        $this->page->onLoad('document.' . $this->name . '.stateContractFieldId.focus();');

        if ( in_array($function, array('update', 'delete')) )
        {
            $stateContractFieldId = MIOLO::_request('stateContractFieldId');

            $fields[]  = new MTextLabel('stateContractFieldId', $stateContractFieldId, _M('State contract field id',$stateContractFieldId));
            $fields[]  = new MHiddenField('stateContractFieldId', $stateContractFieldId);

            $business = $MIOLO->getBusiness($module, 'BusStateContractField');
            $data      = $business->getStateContractField($stateContractFieldId);

            $data->stateContractFieldDescription = $data->description;
        }

        $stateContractLabel = new MText('stateContractLabel', _M('State contract',$module) . ':');
        $stateContractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]          = $stateContractLabel;
        $stateContractLabel->setClass('m-caption m-caption-required');

        $stateContractId = new MLookupTextField('stateContractId', $this->getFormValue('stateContractId',$data->stateContractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'stateContractDescription', $module, 'StateContract', null, null, true);
        $stateContractId->setJsHint(_M('Enter the state contract code',$module));
        $flds[]          = $stateContractId;
        $validators[] = new MIntegerValidator('stateContractId', _M('State contract',$module), 'required');

        $stateContractDescription = new MTextField('stateContractDescription', $this->getFormValue('stateContractDescription',$data->stateContractDescription), '', FIELD_DESCRIPTION_SIZE);
        $stateContractDescription->setReadOnly(true);
        $stateContractDescription->setJsHint(_M('State contract',$module));
        $flds[]             = $stateContractDescription;

        $hctStateContract = new MHContainer('hctStateContract', $flds);
        $hctStateContract->setShowLabel(true);
        $fields[]  = $hctStateContract;
        unset($flds);
        
        $stateContractFieldDescription = new MTextField('stateContractFieldDescription', $this->getFormValue('stateContractFieldDescription',$data->stateContractFieldDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $stateContractFieldDescription->setJsHint(_M('Enter the description',$module));
        $fields[]             = $stateContractFieldDescription;
        $validators[] = new MRequiredValidator('stateContractFieldDescription');
        
        //$hctDescription = new MHContainer('hctDescription', $flds);
        //$hctDescription->setShowLabel(true);
        //$fields[]  = $hctDescription;
        //unset($flds);
        
        $rows = new MTextField('rows', $this->getFormValue('rows',$data->rows), _M('Rows',$module), FIELD_DESCRIPTION_SIZE);
        $rows->setJsHint(_M('Enter the rows',$module));
        $validators[] = new MRegExpValidator('rows','','(^-?[0-9][0-9]*$)');
        $fields[]             = $rows;
        
        $columns = new MTextField('columns', $this->getFormValue('columns',$data->columns), _M('Columns',$module), FIELD_DESCRIPTION_SIZE);
        $columns->setJsHint(_M('Enter the columns',$module));
        $validators[] = new MRegExpValidator('columns','','(^-?[0-9][0-9]*$)');
        $fields[]             = $columns;
        
        $isLookupLabel = new MText('isLookupLabel', _M('Is it lookup',$module) . '?');
        $isLookupLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isLookupLabel;

        $isLookup = new MRadioButtonGroup('isLookup', null, SAGU::listTrueFalse(1), $this->getFormValue('isLookup', $data->isLookup), null, 'horizontal');
        $isLookup->setShowLabel(false);
        $flds[] = $isLookup;

        $hctIsLookup = new MHContainer('hctIsLookup', $flds);
        $fields[] = $hctIsLookup;
        unset($flds);

        $lookupName = new MTextField('lookupName', $this->getFormValue('lookupName', $data->lookupName), _M('Lookup name', $module), FIELD_DESCRIPTION_SIZE);
        $lookupName->setJsHint(_M('Enter the lookup method name',$module));
        $fields[]   = $lookupName;
        
        //$hctlookupName = new MHContainer('hctlookupName', $flds);
        //$hctlookupName->setShowLabel(true);
        //$fields[]  = $hctlookupName;
        //unset($flds);
        
        $lookupModule = new MTextField('lookupModule', $this->getFormValue('lookupModule', $data->lookupModule), _M('Lookup module', $module), FIELD_DESCRIPTION_SIZE);
        $lookupModule->setJsHint(_M('Enter the lookup module',$module));
        $fields[]     = $lookupModule;
        
        //$hctlookupModule = new MHContainer('hctlookupModule', $flds);
        //$hctlookupModule->setShowLabel(true);
        //$fields[]  = $hctlookupModule;
        //unset($flds);
        
        $fieldValidator = new MTextField('fieldValidator', $this->getFormValue('fieldValidator',$data->fieldValidator), _M('Field validator',$module), 50);
        $fieldValidator->setJsHint(_M('Enter the field validator',$module));
        $fields[]             = $fieldValidator;
        
        //$hctlookupModule = new MHContainer('hctlookupModule', $flds);
        //$hctlookupModule->setShowLabel(true);
        //$fields[]  = $hctlookupModule;
        //unset($flds);
        
        $isRequiredLabel = new MText('isRequiredLabel', _M('Is it required',$module) . '?');
        $isRequiredLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $isRequiredLabel;

        $isRequired = new MRadioButtonGroup('isRequired', null, SAGU::listTrueFalse(1), $this->getFormValue('isRequired', $data->isRequired) > 0 ? $this->getFormValue('isRequired', $data->isRequired) : DB_FALSE, null, 'horizontal');
        $isRequired->setShowLabel(false);
        $flds[] = $isRequired;

        $hctIsRequired = new MHContainer('hctIsRequiredS', $flds);
        $fields[] = $hctIsRequired;
        unset($flds);
        
        if ( $function == 'update' )         {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }


        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * StateContractField triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

/*        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        } */

    }

    /**
     * StateContractField triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'stateContractFieldId' => MIOLO::_request('stateContractFieldId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('stateContractFieldIdS' => MIOLO::_request('stateContractFieldId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * StateContractField triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusStateContractField');
        $ok = $business->deleteStateContractField($this->stateContractFieldId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * StateContractField triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusStateContractField');

        if ( $function == 'update' )
        {
            $ok  = $business->updateStateContractField($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertStateContractField($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('stateContractFieldIdS' => $data->stateContractFieldId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
            
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdStateContractField();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        
        $data->description = $this->stateContractFieldDescription->value;
        $data->isLookup = $this->getFormValue('isLookup');

        return $data;
    }

}

?>
