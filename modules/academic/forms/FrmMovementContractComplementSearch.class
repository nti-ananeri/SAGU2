<?php

/**
 *
 * This file handles the connection and actions for acdMovementContractComplement table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdMovementContractComplement table
 */
class FrmMovementContractComplementSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Movement contract complement', $this->home, 'movementContractComplement-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);

        $contractPersonIdS     = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS', $this->contractPersonIdS->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
        $validators[] = new MIntegerValidator('contractPersonIdS', '', 'optional');

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->contractPersonNameS->value, NULL, FIELD_DESCRIPTION_SIZE);
        $contractPersonNameS->setJsHint(_M('Person name',$module));

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonIdS, $contractPersonNameS));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;


        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $contractLabel;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                array('contractPersonIdS', 'contractPersonNameS', 'courseId', 'courseName', 'courseVersion'),
                $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[] = $contractIdS;

        $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', FIELD_ID_SIZE);
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Course code',$module));
        $flds[]   = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        $flds[]        = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));
        $flds[]             = $courseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);




//         $contractPersonIdS = new MTextField('contractPersonIdS', $this->contractPersonIdS->value, _M('Contract person id', $module), 10);
//         $contractPersonIdS->setJsHint(_M('Enter the contract person name',$module));
//         $fields[] = $contractPersonIdS;
// 
//         $contractPersonNameS = new MTextField('contractPersonNameS', $this->contractPersonNameS->value, _M('Contract person name', $module), 40);
//         $contractPersonNameS->setJsHint(_M('Enter the contract person name',$module));
//         $fields[] = $contractPersonNameS;

        $stateContractLabel= new MText('stateContractLabel', _M('State contract',$module) . ':');
        $stateContractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $stateContractLabel;

        $stateContractIdS = new MLookupTextField('stateContractIdS', $this->stateContractIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
                'stateDescriptionS', $module, 'StatesContract', null, null, true);
        $stateContractIdS->setJsHint(_M('State id',$module));
        $flds[]                = $stateContractIdS;
        $validators[] = new MIntegerValidator('stateContractIdS', '', 'optional');

        $stateDescriptionS = new MTextField('stateDescriptionS', $this->stateDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $stateDescriptionS->setJsHint(_M('Enter the state description',$module));
        $flds[]                = $stateDescriptionS;

        $hctState = new MHContainer('hctState', $flds);
        $hctState->setShowLabel(true);
        $fields[]    = $hctState;
        unset($flds);

        $stateContractFieldLabel= new MText('stateContractFieldLabel', _M('State contract field',$module) . ':');
        $stateContractFieldLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                = $stateContractFieldLabel;

        $stateContractFieldIdS = new MLookupTextField('stateContractFieldIdS', $this->stateContractFieldIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,limbo,stateContractFieldDescriptionS', $module, 'ContractStateField', null, null, true);
        $stateContractFieldIdS->setJsHint(_M('State contract field id',$module));
        $flds[]                = $stateContractFieldIdS;
        $validators[] = new MIntegerValidator('stateContractFieldIdS', '', 'optional');

        $stateContractFieldDescriptionS = new MTextField('stateContractFieldDescriptionS', $this->stateContractFieldDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $stateContractFieldDescriptionS->setJsHint(_M('Enter the state contract field description',$module));
        $flds[]                = $stateContractFieldDescriptionS;

        $hctStateContractField = new MHContainer('hctStateContractField', $flds);
        $hctStateContractField->setShowLabel(true);
        $fields[]    = $hctStateContractField;
        unset($flds);


        $valueS = new MTextField('valueS', $this->valueS->value, _M('Complement', $module), 40);
        $valueS->setJsHint(_M('Enter the value',$module));
        $fields[] = $valueS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->contractId                     = $this->contractIdS->value;
        $filters->contractPersonId               = $this->contractPersonIdS->value;
        $filters->contractPersonName             = $this->contractPersonNameS->value;
        $filters->stateContractId                = $this->stateContractIdS->value;
        $filters->stateDescription               = $this->stateDescriptionS->value;
        $filters->statesContractFieldId          = $this->statesContractFieldIdS->value;
        $filters->statesContractFieldDescription = $this->statesContractFieldDescriptionS->value;
        $filters->value                          = $this->valueS->value;

//         unset($this->contractIdS->value,
//               $this->stateContractIdS->value,
//               $this->stateTimeS->value,
//               $this->statesContractFieldIdS->value);


        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdMovementContractComplementSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusMovementContractComplement');

        $data     = $business->searchMovementContractComplement($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.contractIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
