<?php

/**
 * StatesContract form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a statesContract
 **/
class FrmStatesContract extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $stateContractId = $_GET['stateContractId'] ? $_GET['stateContractId'] : $_POST['stateContractId'];
            $fields[]  = new MTextLabel('stateContractId', $stateContractId, _M('Code', $module));
            $fields[]  = new MHiddenField('stateContractId', $stateContractId);

            $business = $MIOLO->getBusiness($module, 'BusStatesContract');
            $data     = $business->getStatesContract($stateContractId);
        }

	$statesContractDescription  = new MTextField('statesContractDescription', $this->getFormValue('statesContractDescription', $data->description), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $statesContractDescription->setJsHint(_M('Enter the state contract description', $module));
        $fields[]     = $statesContractDescription;
        $validators[] = new MRequiredValidator('statesContractDescription');


        $inOutTransition = new MSelection('inOutTransition', $this->getFormValue('inOutTransition', $data->inOutTransition), _M('Transition type', $module), SAGU::listInOutTransistion());
        $fields[]        = $inOutTransition;
        $validators[]    = new MRequiredValidator('inOutTransition', '', 'required');

        //needsReason
        $needsReasonLabel = new MText('needsReasonLabel', _M('Does it need reason',$module) . '?');
        $needsReasonLabel->setWidth(FIELD_CONTAINER_SIZE);

        $needsReason = $this->GetFormValue('needsReason',$data->needsReason) ? $this->GetFormValue('needsReason',$data->needsReason) : DB_FALSE;

        if (! isSet($needsReason) )
        {
            $needsReason = DB_FALSE;
        }

        $needsReason = new MRadioButtonGroup('needsReason', '', SAGU::listTrueFalse(1), $needsReason, null, 'horizontal');
        $needsReason->SetShowLabel(false);

        $hctNeedsReason = new MHContainer('hctNeedsReason', array($needsReasonLabel, $needsReason));
        $fields[]  = $hctNeedsReason;

        //isCloseContract
        $isCloseContractOptions = array( array(_M('Yes', $module), 't'),
                                         array(_M('No', $module), 'f')
                                       );

        $isCloseContractLabel = new MText('isCloseContractLabel', _M('Does it close contract',$module) . '?');
        $isCloseContractLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isCloseContract = $this->GetFormValue('isCloseContract',$data->isCloseContract);
        if ( ! isset($isCloseContract) )
        {
            //default false
            $isCloseContract = 'f';
        }
        $isCloseContract = new MRadioButtonGroup('isCloseContract', '', SAGU::listTrueFalse(1), $isCloseContract, null, 'horizontal');
        $isCloseContract->SetShowLabel(false);

        $hctIsCloseContract = new MHContainer('hctIsCloseContract', array($isCloseContractLabel, $isCloseContract));
        $fields[]  = $hctIsCloseContract;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification', $module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        $this->page->onLoad('document.' . $this->name . '.statesContractDescription.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $this->$var->value = $this->getFormValue($var . 'S', '');
            }
        }
        $this->statesContractDescription->value = $this->getFormValue('statesContractDescriptionS','');
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'stateContractId'=>MIOLO::_request('stateContractId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusStatesContract');
        $ok = $business->deleteStatesContract($this->stateContractId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusStatesContract');

        if ( $function == 'update' )
        {
            $ok  = $business->updateStatesContract($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertStatesContract($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('stateContractIdS'=>$data->stateContractId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts    = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question', $module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdStatesContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }

            $data->description = $this->statesContractDescription->value;
        }
        return $data;
    }

}

?>
