<?php

/**
 * Supervised Training form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmSupervisedTrainingRegister extends MForm
{
    public $addSupervisedTraining;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');

        $businessSupervisedTraining = $MIOLO->getBusiness($module, 'BusSupervisedTraining');
        $businessCurriculum              = $MIOLO->getBusiness($module, 'BusCurriculum');
        $businessPhysicalPerson          = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
        $businessContract                = $MIOLO->getBusiness($module, 'BusContract');
        $businessCurricularComponent     = $MIOLO->getBusiness($module, 'BusCurricularComponent');

        if ( $function == 'update' )
        {
            $supervisedTrainingId   = MIOLO::_request('supervisedTrainingId');

            $dataSupervisedTraining = $businessSupervisedTraining->getSupervisedTraining($supervisedTrainingId);
            $dataContract                = $businessContract->getContract($dataSupervisedTraining->contractId);
            $dataPerson                  = $businessPhysicalPerson->getPhysicalPerson($dataContract->personId);
            $dataCurriculum              = $businessCurriculum->getComplementaryActivityData($dataContract->courseId, $dataContract->courseVersion, $dataContract->turnId, $dataContract->unitId);
            $data                        = $dataSupervisedTraining;

            $data->contractId            = $dataContract->contractId;
            $data->personId              = $dataContract->personId;
            $data->personName            = $dataPerson->name;
            $data->contractCourseId      = $dataContract->courseId;
            $data->contractCourseVersion = $dataContract->courseVersion;
            $data->contractUnitId        = $dataContract->unitId;
            $data->contractTurnId        = $dataContract->turnId;
            $data->curriculumId          = $dataCurriculum->curriculumId;

            $opts   = array('function'              => $function,
                            'personId'              => $data->personId,
                            'personName'            => $data->personName,
                            'contractId'            => $data->contractId,
                            'contractCourseId'      => $data->contractCourseId,
                            'contractCourseVersion' => $data->contractCourseVersion,
                            'contractTurnId'        => $data->contractTurnId,
                            'contractUnitId'        => $data->contractUnitId,
                            'curriculumId'          => $data->curriculumId);
        }
        else
        {
            $enrollId              = MIOLO::_request('enrollId');
            $contractId            = MIOLO::_request('contractId');
            $personId              = MIOLO::_request('personId');
            $personName            = MIOLO::_request('personName');
            $contractCourseId      = MIOLO::_request('contractCourseId');
            $contractCourseVersion = MIOLO::_request('contractCourseVersion');
            $contractCourseName    = MIOLO::_request('contractCourseName');
            $contractTurnId        = MIOLO::_request('contractTurnId');
            $contractUnitId        = MIOLO::_request('contractUnitId');
            $curriculumId          = MIOLO::_request('curriculumId');

            $opts   = array('function'              => $function,
                            'enrollId'              => $enrollId,
                            'personId'              => $personId,
                            'personName'            => $personName,
                            'contractId'            => $contractId,
                            'contractCourseId'      => $contractCourseId,
                            'contractCourseVersion' => $contractCourseVersion,
                            'contractCourseName'    => $contractCourseName,
                            'contractTurnId'        => $contractTurnId,
                            'contractUnitId'        => $contractUnitId,
                            'curriculumId'          => $curriculumId);
        }

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action, null, $opts));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        $fields[] = $toolBar;


        if ( in_array($function, array('update', 'delete')) )
        {
            $toolBar->disableButton('tbBtnNew');
            $supervisedTrainingId = MIOLO::_request('supervisedTrainingId');
            $supervisedTrainingId = new MHiddenField('supervisedTrainingId', $supervisedTrainingId);
            $fields[] = $supervisedTrainingId;
        }

        if ( $function == 'update' )
        {
            $personLabel = new MText('personLabel', _M('Person',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personId    = new MTextLabel('personId', $dataContract->personId);
            $personName  = new MTextLabel('personName', $dataPerson->name);

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]                = $contractLabel;

            $contractId            = new MTextLabel('contractId', $dataEnroll->contractId);
            $contractCourseId      = new MTextLabel('contractCourseId', $dataContract->courseId);
            $contractCourseVersion = new MTextLabel('contractCourseVersion', $dataContract->courseVersion);
            $contractCourseName    = new MTextLabel('contractCourseName', $dataContract->courseName);;

            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $fields[]    = $hctContract;

            $contractCourseId = new MHiddenField('contractCourseId', $data->contractCourseId);
            $fields[]         = $contractCourseId;

            $contractCourseVersion = new MHiddenField('contractCourseVersion', $data->contractCourseVersion);
            $fields[]              = $contractCourseVersion;

            $contractTurnId = new MHiddenField('contractTurnId', $data->contractTurnId);
            $fields[]       = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', $data->contractUnitId);
            $fields[]       = $contractUnitId;

            $curriculumId   = new MHiddenField('curriculumId', $data->curriculumId);
            $fields[]       = $curriculumId;

            $personId       = new MHiddenField('personId', $data->personId);
            $fields[]       = $personId;

            $personName     = new MHiddenField('personName', $data->personName);
            $fields[]       = $personName;

            $contractId = new MHiddenField('contractId', $data->contractId);
            $fields[]   = $contractId;
        }
        elseif ( $function == 'insert' )
        {
            $personLabel = new MText('personLabel', _M('Person',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
            $validators[] = new MIntegerValidator('personId', '', 'optional');
            $personId->setReadOnly(true);

            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), NULL, FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Person name',$module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]                = $contractLabel;

            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $flds[]           = $contractId;
            $contractId->setReadOnly(true);
            $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');

            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId),'', FIELD_ID_SIZE);
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Course',$module));
            $flds[]           = $contractCourseId;

            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', FIELD_ID_SIZE);
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Course version',$module));
            $flds[]                = $contractCourseVersion;

            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', FIELD_DESCRIPTION_SIZE);
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Description',$module));
            $flds[]             = $contractCourseName;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $contractTurnId = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId',$data->contractTurnId));
            $fields[]       = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId',$data->contractUnitId));
            $fields[]       = $contractUnitId;

            $curriculumId = new MHiddenField('curriculumId', $this->getFormValue('curriculumId',$data->curriculumId));
            $fields[]     = $curriculumId;

            //periodo
            $periodId       = new MTextField('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period', $module), FIELD_ID_SIZE );
            $periodId->setReadOnly(true);
            $fields[]       = $periodId;

            //enroll id
            $enrollId = new MHiddenField('enrollId', strlen((string)$this->getFormValue('enrollId', $data->enrollId))>0 ? $this->getFormValue('enrollId', $data->enrollId) : $enrollId );
            $fields[] = $enrollId;

        }

        if ( in_array($function, array('update', 'insert')) )
        {
            //div de mensagens de erros
            $fields[] = new MSeparator('<hr>');
            $divError = new MDiv('divError', null, null, 'align=center');
            $fields[] = $divError;
            $fields[] = new MSeparator('');

            //estágio
            $description  = new MTextField('description', $this->getFormValue('description', $data->description), _M('Training',$module), FIELD_DESCRIPTION_SIZE);
            $fields[]     = $description;
            $validators[] = new MRequiredValidator('description');

            //instituicao
            $institutionLabel = new MText('institutionLabel', _M('Company',$module) . ':');
            $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);
            $institutionLabel->setClass('m-caption m-caption-required');

            $institutionId    = new MLookupTextField('institutionId', $this->getFormValue('institutionId', $data->institutionId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionName', 'basic', 'LegalPersonWork', null, null, true);
            $institutionId->setJsHint(_M('Enter the institution code',$module));
            $validators[]     = new MIntegerValidator('institutionId', _M('Company',$module), 'required');

            $institutionName  = new MTextField('institutionName', $this->institutionName->value, '', FIELD_DESCRIPTION_SIZE);
            $institutionName->setJsHint(_M('Institution name',$module));
            $institutionName->setReadOnly(true);

            $hctInstitution   = new MHContainer('hctInstitution', array($institutionLabel, $institutionId, $institutionName));
            $hctInstitution->setShowLabel(true);
            $fields[]         = $hctInstitution;

            //responsável supervisor
            $supervisorLabel = new MText('supervisorLabel', _M('Supervisor',$module) . ':');
            $supervisorLabel->setWidth(FIELD_CONTAINER_SIZE);
            $supervisorLabel->setClass('m-caption m-caption-required');

            $supervisorId    = new MLookupTextField('supervisorId', $this->getFormValue('supervisorId', $data->supervisorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'supervisorName', 'basic', 'PhysicalPerson', null, array('workId' => 'institutionId', 'workName' => 'institutionName'), true);
            $validators[]    = new MIntegerValidator('supervisorId', _M('Supervisor',$module), 'required');

            $supervisorName  = new MTextField('supervisorName', $this->supervisorName->value, '', FIELD_DESCRIPTION_SIZE);
            $supervisorName->setJsHint(_M('Supervisor',$module));
            $supervisorName->setReadOnly(true);

            $hctSupervisor   = new MHContainer('hctSupervisor', array($supervisorLabel, $supervisorId, $supervisorName));
            $hctSupervisor->setShowLabel(true);
            $fields[]        = $hctSupervisor;

            $beginDate = new MCalendarField('beginDate', strlen((string)$this->getFormValue('beginDate', $data->beginDate))>0 ? $this->getFormValue('beginDate', $data->beginDate) : date(MASK_DATE_PHP), _M('Begin date', $module), FIELD_DATE_SIZE);
            $beginDate->setJsHint(_M('Enter the begin date', $module));
            $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Begin date',$module), 'required'));
            $fields[]  = $beginDate;

            $endDate   = new MCalendarField('endDate', strlen((string)$this->getFormValue('endDate', $data->endDate))>0 ? $this->getFormValue('endDate', $data->endDate) : date(MASK_DATE_PHP), _M('End date', $module), FIELD_DATE_SIZE);
            $endDate->setJsHint(_M('Enter the end date', $module));
            $endDate->setValidator(new MDATEDMYValidator('endDate', _M('End date',$module), 'required'));
            $fields[]  = $endDate;

        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.description.focus();');

    }

    public function tbBtnNew_click($sender = null)
    {
    }

    public function tbBtnSearch_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $opts   = array('function' => 'search');
        $action = 'main:register:supervisedTraining:supervisedTraining';
        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $action  = 'main:register:supervisedTraining:supervisedTrainingRegister';
        $opts   = array('event'                     => 'tbBtnDelete_confirm',
                        'function'                  => 'delete',
                        'contractId'                => MIOLO::_request('contractId'),
                        'supervisedTrainingId' => MIOLO::_request('supervisedTrainingId')
                       );
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        $action  = 'main:register:supervisedTraining:supervisedTraining';
        $opts   = array('contractIdS'               => MIOLO::_request('contractId'),
                        'function'                  => 'search'
                       );
        $gotoNo  = $MIOLO->getActionURL( $module, $action, null, $opts );

        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO                      = MIOLO::getInstance();
        $module                     = MIOLO::getCurrentModule();
        $action                     = MIOLO::getCurrentAction();

        $business                   = $MIOLO->getBusiness($module, 'BusSupervisedTraining');
        $businessContract           = $MIOLO->getBusiness($module, 'BusContract');

        $data                       = $this->getTypesData();
        $getSupervisedTraining = $business->getSupervisedTraining($data->supervisedTrainingId);
        $getCotract                 = $businessContract->getContract(MIOLO::_request('contractId'));
        $ok                         = $business->deleteSupervisedTraining($data->supervisedTrainingId);

        if ( $ok )
        {
            $action = 'main:register:supervisedTraining:supervisedTraining';
            $opts = array ( 'contractIdS' => $getCotract->contractId );
            $msg  = MSG_RECORD_DELETED;
            $goto = $MIOLO->getActionURL($module, $action, NULL, $opts);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $action  = 'main:register:supervisedTraining:supervisedTraining';
            $opts    = array ( 'contractIdS' => $getCotract->contractId );
            $caption = _M('Error', $module);
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = $MIOLO->getActionURL($module, $action, NULL, $opts);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data                       = $this->getTypesData();
        $businessSupervisedTraining = $MIOLO->getBusiness($module, 'BusSupervisedTraining');

        if ( $function == 'update' )
        {
            $ok  = $businessSupervisedTraining->updateSupervisedTraining($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $businessSupervisedTraining->insertSupervisedTraining($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {

                //confirmação de atividade complementar na tela e redirecionamento para consulta
                if ( $function == 'update' )
                {
                    $opts   = array('function'    => 'search',
                                    'contractIdS' => $data->contractId);
                    $action  = 'main:register:supervisedTraining:supervisedTraining';
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    $opts    = array('function' => 'insert');

                    $action  = 'main:register:training:supervisedTraining';
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

                    $opts    = array('personIdS'              => $data->personId,
                                     'personNameS'            => $data->personName,
                                     'contractIdS'            => $data->contractId,
                                     'contractCourseIdS'      => $data->contractCourseId,
                                     'contractCourseVersionS' => $data->contractCourseVersion,
                                     'contractCourseNameS'    => $data->contractCourseName,
                                     'contractTurnIdS'        => $data->contractTurnId,
                                     'contractUnitIdS'        => $data->contractUnitId,
                                     'periodIdS'              => $data->periodId,
                                     'function'               => 'search');

                    $action  = 'main:register:training:supervisedTraining';
                    $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);

                    $caption = _M('Question',$module);

                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module). ' ' . $infoMsg . '. ';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdSupervisedTraining();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->personId              = MIOLO::_request('personId');
        $data->personName            = MIOLO::_request('personName');
        $data->contractCourseId      = MIOLO::_request('contractCourseId');
        $data->contractCourseVersion = MIOLO::_request('contractCourseVersion');
        $data->contractCourseName    = MIOLO::_request('contractCourseName');
        $data->contractTurnId        = MIOLO::_request('contractTurnId');
        $data->contractUnitId        = MIOLO::_request('contractUnitId');
        $data->enrollId              = MIOLO::_request('enrollId');
        $data->curriculumId          = MIOLO::_request('curriculumId');
        $data->description           = $this->description->value;
        $data->contractId            = $this->contractId->value;
        $data->beginDate             = $this->beginDate->value;
        $data->endDate               = $this->endDate->value;
        $data->institutionId         = $this->institutionId->value;
        $data->supervisorId          = $this->supervisorId->value;

        return $data;
    }

}

?>
