<?php

/**
 * Form to manipulate acdAcademicCalendarAdjustments table records
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmAcademicCalendarAdjustments extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar  = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $academicCalendarAdjustmentsId = $_GET['academicCalendarAdjustmentsId'] ? $_GET['academicCalendarAdjustmentsId'] : $_POST['academicCalendarAdjustmentsId'];
            $fields[] = new MTextLabel('academicCalendarAdjustmentsId', $academicCalendarAdjustmentsId, _M('Academic calendar adjustment id',$module));
            $fields[] = new MHiddenField('academicCalendarAdjustmentsId', $academicCalendarAdjustmentsId);

            $business = $MIOLO->getBusiness($module,'BusAcademicCalendarAdjustments');
            $data = $business->getAcademicCalendarAdjustments($academicCalendarAdjustmentsId);
        }

        //período
        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[]  = new MRequiredValidator('courseId', _M('Course', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //período letivo
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'learningPeriodId' => 'learningPeriodId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Learning period',$module), 'required');

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[]  = $hctLearningPeriod;

        //oferta
        $groupLabel = new MText('groupLabel', _M('Offered curricular component',$module) . ':');
        $groupLabel->setWidth(FIELD_CONTAINER_SIZE);
        $groupLabel->setClass('m-caption m-caption-required');

        $groupId = new MLookupTextField('groupId', $this->getFormValue('groupId', $data->groupId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'groupGroupName', $module, 'Group', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'learningPeriodId' => 'learningPeriodId'), false);
        $groupId->setJsHint(_M('Offered curricular component id',$module));
        $groupId->setAttribute('READONLY', '');
        $validators[] = new MIntegerValidator('groupId', _M('Offered curricular component',$module), 'required');

        $groupGroupName = new MTextField('groupGroupName', strlen((string)$this->getFormValue('groupGroupName', $data->groupGroupName)) > 0 ? $this->getFormValue('groupGroupName', $data->groupGroupName) : $getGroup->groupName , '', FIELD_DESCRIPTION_SIZE);
        $groupGroupName->setJsHint(_M('Offered curricular component name',$module));
        $groupGroupName->setReadOnly(true);

        $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupId, $groupGroupName));
        $hctGroup->setShowLabel(true);
        $fields[]  = $hctGroup;
/*
        //horários
        $scheduleLabel = new MText('scheduleLabel', _M('Schedule',$module) . ':');
        $scheduleLabel->setWidth(FIELD_CONTAINER_SIZE);
        $scheduleLabel->setClass('m-caption m-caption-required');

        $scheduleId = new MLookupTextField('scheduleId', $this->getFormValue('scheduleId', $data->scheduleId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'scheduleDescription', $module, 'Schedule', null, array('groupId' => 'groupId', 'periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'learningPeriodId' => 'learningPeriodId'), true);
        $scheduleId->setJsHint(_M('Schedule id',$module));
        $scheduleId->setAttribute('READONLY', '');
        $validators[] = new MIntegerValidator('scheduleId', _M('Schedule id',$module), 'required');

        $scheduleDescription = new MTextField('scheduleDescription', $this->getFormValue('scheduleDescription', $data->scheduleDescription), '', FIELD_DESCRIPTION_SIZE);
        $scheduleDescription->setJsHint(_M('Schedule',$module));
        $scheduleDescription->setReadOnly(true);

        $hctschedule = new MHContainer('hctschedule', array($scheduleLabel, $scheduleId, $scheduleDescription));
        $hctschedule->setShowLabel(true);
        $fields[]  = $hctschedule;
*/
        //professor do horário
        $professorLabel = new MText('professorLabel', _M('Professor',$module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
        $professorLabel->setClass('m-caption m-caption-required');

        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName, scheduleId', 'academic', 'ScheduleProfessor2', null, array('groupId' => 'groupId'), true);
        $professorId->setJsHint(_M('Professor id',$module));
//        $professorId->setAttribute('DISABLED', '');
        $professorId->setAttribute('READONLY', '');
        //professorId
        $validators[] = new MIntegerValidator('professorId', _M('Professor',$module), 'required');

        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Professor name',$module));

        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;

        $fields[] = new MHiddenField('scheduleId', $this->getFormvalue('scheduleId', $data->scheduleId));
        $fields[] = new MSeparator('<hr>');

        //dia da semana
        $business  = $MIOLO->getBusiness('basic', 'BusWeekDay');
        $weekDayId = new MSelection('weekDayId',
                                   $this->GetFormValue('weekDayId',$data->weekDayId),
                                   _M('Week day',$module),
                                   $business->listWeekDay());
        $validators[] = new MRequiredValidator('weekDayId');
        $fields[] = $weekDayId;

        //Turno
        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId   = new MSelection('turnId',
                                  $this->GetFormValue('turnId',$data->turnId),
                                  _M('Turn',$module),
                                  $business->listTurn());
        $validators[] = new MRequiredValidator('turnId');
        $fields[] = $turnId;

        //ocorrencia da data
        $occurrenceDate = new MCalendarField('occurrenceDate', $this->getFormValue('occurrenceDate', $data->occurrenceDate), _M('Occurrence date',$module), FIELD_DATE_SIZE);
        $occurrenceDate->setJsHint(_M('Enter the occurrence date', $module));
        $occurrenceDate->setValidator( new MDATEDMYValidator('occurrenceDate', '', 'required'));
        //$validators[] = new MDATEDMYValidator('occurrenceDate', '', 'required');
        $fields[] = $occurrenceDate;

        $inOut = new MSelection( 'inOut',
                                $this->GetFormValue('inOut',$data->inOut),
                                _M('In out',$module),
                                SAGU::listInOut());
        $validators[] = new MRequiredValidator('inOut');
        $fields[]     = $inOut;

        $fields[]     = new MHiddenField('limbo', '');;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->page->onLoad('document.' . $this->name . '.periodId.focus();');
        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'academicCalendarAdjustmentsId' => MIOLO::_request('academicCalendarAdjustmentsId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts    = array('academicCalendarAdjustmentsIdS' => MIOLO::_request('academicCalendarAdjustmentsId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusAcademicCalendarAdjustments');
        $ok = $business->deleteAcademicCalendarAdjustments($this->academicCalendarAdjustmentsId->value);

        if ( $ok )
        {
            $goto    = SAGU::getStackBackUrl();
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = SAGU::getStackBackUrl();
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusAcademicCalendarAdjustments');

        if ( $function == 'update' )
        {
            $ok  = $business->updateAcademicCalendarAdjustments($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertAcademicCalendarAdjustments($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('academicCalendarAdjustmentsIdS' => $data->academicCalendarAdjustmentsId);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto    = SAGU::getStackBackUrl();
                $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts    = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = SAGU::getStackBackUrl();
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdAcademicCalendarAdjustments();
        $data->academicCalendarAdjustmentsId = $this->academicCalendarAdjustmentsId->value;
        $data->learningPeriodId     = $this->learningPeriodId->value;
        $data->occurrenceDate       = $this->occurrenceDate->value;
        $data->weekDayId            = $this->weekDayId->value;
        $data->courseId             = $this->courseId->value;
        $data->courseVersion        = $this->courseVersion->value;
        $data->unitId               = $this->unitId->value;
        $data->turnId               = $this->turnId->value;
        $data->scheduleId           = $this->scheduleId->value;
        $data->professorId          = $this->professorId->value;
        $data->inOut                = $this->inOut->value;
        return $data;
    }

}

?>
