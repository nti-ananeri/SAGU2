<?php

/**
 *
 * This file handles the connection and actions for acdEvaluation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Rudi Uhrig Neto [rudi@solis.coop.br]
 * 
 * @since
 * Class created on 16/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdEvaluation table
 */
class FrmEvaluationSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Evaluation', $this->home, 'evaluation-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[]  = new MHiddenField('evaluationIdS', $evaluationIdS);

        //Professor
        $professorLabel = new MText('professorLabel', _M('Schedule professor id',$module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);

        $scheduleProfessorIdS = new MLookupTextField('scheduleProfessorIdS', $this->scheduleProfessorIdS->value, '' , FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,professorIdS, professorNameS', $module, 'ScheduleProfessor', null, null, true);
        $validators[] = new MIntegerValidator('scheduleProfessorIdS', '', 'optional');

        $professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorIdS->setReadOnly(true);
        $professorIdS->setJsHint(_M('Professor id',$module));

        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $professorNameS->setReadOnly(true);
        $professorNameS->setJsHint(_M('Professor name',$module));

        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $scheduleProfessorIdS, $professorIdS, $professorNameS));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;

        //Degree
        $degreeLabel = new MText('degreeLabel', _M('Academic degree',$module) . ':');
        $degreeLabel->setWidth(FIELD_CONTAINER_SIZE);

        $degreeIdS = new MLookupTextField('degreeIdS', $this->degreeIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,degreeDescriptionS', $module, 'Degree', null, null, true);
        $degreeIdS->setJsHint(_M('Degree id',$module));
        $validators[] = new MIntegerValidator('degreeIdS', '', 'optional');

        $degreeDescriptionS = new MTextField('degreeDescriptionS', $this->degreeDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $degreeDescriptionS->setJsHint(_M('Degree description',$module));
        $degreeDescriptionS->setReadOnly(true);

        $hctDegree = new MHContainer('hctDegree', array($degreeLabel, $degreeIdS, $degreeDescriptionS));
        $hctDegree->setShowLabel(true);
        $fields[]  = $hctDegree;

        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the description',$module));
        $fields[] = $descriptionS;

        $dateForecastS = new MCalendarField('dateForecastS', $this->dateForecastS->value, _M('Foreseen date',$module), FIELD_DATE_SIZE);
        $dateForecastS->setJsHint(_M('Enter the date forecast',$module));
        $validators[] = new MDATEDMYValidator('dateForecastS', '', 'optional');
        $fields[] = $dateForecastS;

        $weightS = new MTextField('weightS', $this->weightS->value, _M('Weight',$module), 15);
        $weightS->setJsHint(_M('Enter the weight',$module));
        $fields[] = $weightS;
        $validators[] = new MFloatValidator('weightS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->evaluationId            = $this->evaluationIdS->value;
        $filters->scheduleProfessorId     = $this->scheduleProfessorIdS->value;
        $filters->degreeId                = $this->degreeIdS->value;
        $filters->description             = $this->descriptionS->value;
        $filters->dateForecast            = $this->dateForecastS->value;
        $filters->weight                  = $this->weightS->value;

        unset($this->evaluationIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdEvaluationSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusEvaluation');
        $data = $business->searchEvaluation($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.evaluationIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
