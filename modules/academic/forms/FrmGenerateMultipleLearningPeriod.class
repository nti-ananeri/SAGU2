<?php

/**
 * GenerateMultipleLearningPeriod form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleLearningPeriod extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Generate multiple learning period', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $fields[] = new Separator('');
        $divError = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[] = $divError;
        $fields[] = new Separator('');

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[]          = $learningPeriodId;

        $data->periodId = MIOLO::_request('periodId');

        $periodId = new MTextLabel('periodId', $periodId, _M('Period id',$module));

        $fields[] = $periodId;

        $business         = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId', MIOLO::_request('formationLevelId')), _M('Formation level', $module), $business->listFormationLevel());
        $fields[]         = $formationLevelId;
        $validators[]     = new MRequiredValidator('formationLevelId', _M('Formation level', $module));

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required'));
        $fields[] = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->beginDate), _M('End date', $module), FIELD_DATE_SIZE);
        $endDate->setValidator( new MDATEDMYValidator('endDate', _M('End date', $module), 'required'));
        $fields[] = $endDate;

        $beginDateLessons = new MCalendarField('beginDateLessons', $this->getFormValue('beginDateLessons', $data->beginDateLessons), _M('Lessons begin date', $module), FIELD_DATE_SIZE);
        $beginDateLessons->setValidator( new MDATEDMYValidator('beginDateLessons', _M('Lessons begin date', $module)));
        $fields[] = $beginDateLessons;

        $weekEndExamsBegin = new MCalendarField('weekEndExamsBegin', $this->getFormValue('weekEndExamsBegin', $data->weekEndExamsBegin), _M('Exams begin date', $module), FIELD_DATE_SIZE);
        $weekEndExamsBegin->setValidator( new MDATEDMYValidator('weekEndExamsBegin', _M('Exams begin date', $module), 'optional'));
        $fields[] = $weekEndExamsBegin;

        $fields[]        = new MSeparator('');;

        $maxNoteLabel =  new MText('maxNoteLabel', _M('Max note',$module) . ':');
        $maxNoteLabel->setWidth(FIELD_CONTAINER_SIZE);
        $maxNoteLabel->setClass('m-caption m-caption-required');

        $maxNote      = new MTextField('maxNote', $this->getFormValue('maxNote', $data->maxNote), '', 10);
        $validators[] = new MRequiredValidator('maxNote', _M('Max note', $module));

        $maxNoteHint  = new MHint('maxNoteHint', _M('The greatest note that some pupil can be retrived.', $module));

        $hctMaxNote   = new MHContainer('hctMaxNote', array($maxNoteLabel, $maxNote, $maxNoteHint));
        $fields[] = $hctMaxNote;

        //médias
        $disapprovationWithoutExamLabel =  new MText('disapprovationWithoutExamLabel', _M('Disapprovation without exam',$module) . ':');
        $disapprovationWithoutExamLabel->setWidth(FIELD_CONTAINER_SIZE);
        $disapprovationWithoutExamLabel->setClass('m-caption m-caption-required');

        $disapprovationWithoutExam      = new MTextField('disapprovationWithoutExam', $this->getFormValue('disapprovationWithoutExam', $data->disapprovationWithoutExam), '', 10, '');
        $validators[] = new MRequiredValidator('disapprovationWithoutExam', _M('Disapprovation without exam', $module));

        $disapprovationWithoutExamHint  = new MHint('averageHint', _M('If the partial average is less than this note, the student is automatically disapproved without the ability to make the exam.', $module));

        $hctDisapprovationWithoutExam = new MHContainer('hctDisapprovationWithoutExam', array($disapprovationWithoutExamLabel, $disapprovationWithoutExam, $disapprovationWithoutExamHint));

        $averageLabel =  new MText('averageLabel', _M('Approvation without exam',$module) . ':');
        $averageLabel->setWidth(FIELD_CONTAINER_SIZE);
        $averageLabel->setClass('m-caption m-caption-required');

        $average      = new MTextField('average', $this->getFormValue('average', $data->average), '', 10, '');
        $validators[] = new MRequiredValidator('average', _M('Approvation without exam', $module));

        $averageHint  = new MHint('averageHint', _M('If the semester partial average is greater than or equal to this note is not necessary make the final exam.', $module));

        $hctAverage = new MHContainer('hctAverage', array($averageLabel, $average, $averageHint));

        $finalAverageLabel =  new MText('finalAverageLabel', _M('Approval',$module) . ':');
        $finalAverageLabel->setWidth(FIELD_CONTAINER_SIZE);
        $finalAverageLabel->setClass('m-caption m-caption-required');

        $finalAverage = new MTextField('finalAverage', $this->getFormValue('finalAverage', $data->finalAverage), '', 10);
        $validators[] = new MRequiredValidator('finalAverage', _M('Approval', $module));

        $finalAverageHint  = new MHint('finalAverageHint', _M('The student must have a final note greater than or equal to this note to be approved.', $module));

        $hctFinalAverage = new MHContainer('hctFinalAverage', array($finalAverageLabel, $finalAverage, $finalAverageHint));
        
        $averageWeightLabel =  new MText('averageWeightLabel', _M('Average weight',$module) . ':', 1);
        $averageWeightLabel->setWidth(FIELD_CONTAINER_SIZE);
        $averageWeightLabel->setClass('m-caption m-caption-required');

        $averageWeight = new MTextField('averageWeight', $this->getFormValue('averageWeight', $data->averageWeight ? $data->averageWeight : 1), '', 10);
        $validators[] = new MRequiredValidator('averageWeight', _M('Average weight', $module));

        $averageWeightHint  = new MHint('averageWeightHint', _M('Weight of the semester partial average to form the final note.', $module));

        $hctAverageWeight = new MHContainer('hctAverageWeight', array($averageWeightLabel, $averageWeight, $averageWeightHint));

        $examWeightLabel =  new MText('noteWeightLabel', _M('Exam weight',$module) . ':');
        $examWeightLabel->setWidth(FIELD_CONTAINER_SIZE);
        $examWeightLabel->setClass('m-caption m-caption-required');

        $examWeight = new MTextField('examWeight', $this->getFormValue('examWeight', $data->examWeight ? $data->examWeight : 1), '', 10);
        $validators[] = new MRequiredValidator('examWeight', _M('Exam weight', $module));

        $examWeightHint  = new MHint('averageWeightHint', _M('Weight of the exam note to form the final note.', $module));

        $hctExamWeight = new MHContainer('hctExamWeight', array($examWeightLabel, $examWeight, $examWeightHint));


        $flds            = array(
                                    new MSeparator(), $hctDisapprovationWithoutExam,
                                    new MSeparator(), $hctAverage,
                                    new MSeparator(), $hctFinalAverage,
                                    new MSeparator(), $hctAverageWeight,
                                    $hctExamWeight
                                 );

        $bsg1            = new BaseGroup('bsg1', _M('Averages',$module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        $fields[]        = $bsg1;

        $fields[] = new MSeparator('');

        $fields[]  = new MTextField('minimumFrequency', $this->getFormValue('minimumFrequency', $data->minimumFrequency), _M('Minimum frequency', $module), 10, '%');
        $validators[] = new MRequiredValidator('minimumFrequency', _M('Minimum frequency', $module));


        $minimumCreditsLabel =  new MText('minimumCreditsLabel', _M('Pupil is obliged to attend a course in curricular components', $module) . ':');
        //$minimumCreditsLabel->setWidth('500');
        $minimumCreditsLabel->setClass('m-caption m-caption-required');

        $minimumCredits      = new MTextField('minimumCredits', $this->getFormValue('minimumCredits', $data->minimumCredits), '', 10, '');
        //$validators[] = new MRequiredValidator('minimumCredits', _M('Pupil is obliged to attend a course in curricular components', $module));

        $validators[] = new MRegExpValidator('minimumCredits',_M('Pupil is obliged to attend a course in curricular components', module),'(^-?[0-9][0-9]*$)', 'required');

        $hctMinimumCredits = new MHContainer('hctMinimumCredits', array($minimumCreditsLabel, $minimumCredits));


        $minimumCreditsFreshmanLabel =  new MText('minimumCreditsFreshmanLabel', _M('Freshman pupil is obliged to attend a course in curricular components', $module) . ':');
        //$minimumCreditsFreshmanLabel->setWidth('500');
        $minimumCreditsFreshmanLabel->setClass('m-caption m-caption-required');

        $minimumCreditsFreshman      = new MTextField('minimumCreditsFreshman', $this->getFormValue('minimumCreditsFreshman', $data->minimumCreditsFreshman), '', 10);
        //$validators[] = new MRequiredValidator('minimumCreditsFreshman', _M('Freshman pupil is obliged to attend a course in curricular components', $module));

        $validators[] = new MRegExpValidator('minimumCreditsFreshman',_M('Freshman pupil is obliged to attend a course in curricular components', $module),'(^-?[0-9][0-9]*$)', 'required');

        $hctMinimumCreditsFreshman = new MHContainer('hctMinimumCreditsFreshman', array($minimumCreditsFreshmanLabel, $minimumCreditsFreshman));

        $fields[]        = new MSeparator('');

        $minimumCreditsTurnLabel =  new MText('minimumCreditsTurnLabel', _M('Pupil is obliged to attend a course in curricular components of the course in the respective turn to can to attend a course curricular components in other turns', $module) . ':');
        //$minimumCreditsTurnLabel->setWidth('500');
        $minimumCreditsTurnLabel->setClass('m-caption m-caption-required');

        $minimumCreditsTurn  = new MTextField('minimumCreditsTurn', $this->getFormValue('minimumCreditsTurn', $data->minimumCreditsTurn), '', 10);

        $validators[] = new MRegExpValidator('minimumCreditsTurn',_M('Minimum credits turn', $module),'(^-?[0-9][0-9]*$)', 'required');

        $bsg2            = new BaseGroup('bsg2', _M('Minimum mumber of academid credits',$module), array(new MSeparator(), $hctMinimumCredits, new MSeparator(), $hctMinimumCreditsFreshman, new MSeparator(), $minimumCreditsTurnLabel, new MSeparator(), $minimumCreditsTurn), 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        $fields[]        = $bsg2;

        $fields[]        = new MSeparator('');

        if ( MODULE_FINANCE_INSTALLED == 'YES' )
        {
            $isFinanceGenerateLabel = new MText('isFinanceGenerateLabel', _M('Generate finance',$module) . '?');
            $isFinanceGenerateLabel->setClass('m-caption m-caption-required');
            $isFinanceGenerateLabel->setWidth(FIELD_CONTAINER_SIZE);

            $isFinanceGenerate_ = $this->GetFormValue('isFinanceGenerate',$data->isFinanceGenerate) ? $this->GetFormValue('isFinanceGenerate',$data->isFinanceGenerate) : DB_FALSE;
            $isFinanceGenerate = new MRadioButtonGroup('isFinanceGenerate', '', SAGU::listYesNo('1'), $isFinanceGenerate_, null, 'horizontal');
            $isFinanceGenerate->SetShowLabel(false);
            $isFinanceGenerate->setAutoPostBack(true);

            $hctIsFinanceGenerate = new MHContainer('hctIsFinanceGenerate', array($isFinanceGenerateLabel, $isFinanceGenerate));
            $fields[]  = $hctIsFinanceGenerate;

            if ( $isFinanceGenerate_ == DB_TRUE )
            {

                if ( strlen((string)$this->getFormValue('courseId', $data->courseId))>0 )
                {
                    $businessCourse = $MIOLO->getBusiness('academic', 'BusCourse');
                    $course         = $businessCourse->getCourse($this->getFormValue('courseId', $data->courseId));
                }

                $policyLabel = new MText('policyLabel', _M('Policy', $module) . ':');
                $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
                $policyLabel->setClass('m-caption m-caption-required');

                $policyId = new MLookupTextField('policyId', strlen((string)$this->getFormValue('policyId',$data->policyId))>0 ? $this->getFormValue('policyId',$data->policyId) : $course->policyId, _M('Policy',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
                $validators[] = new MRequiredValidator('policyId');
                $policyId->setJsHint(_M('Enter the policy code',$module));

                $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
                $policyDescription->setReadOnly(true);
        
                $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
                $hctPolicy->setShowLabel(false);
                $fields[]  = $hctPolicy;

                //conta bancária
                $businessBankAccount = $MIOLO->getBusiness('finance', 'BusBankAccount');
                $dataBankAccount     = $businessBankAccount->listBankAccount();

                $bankAccountIdLabel  = new MText('bankAccountIdLabel', _M('Bank account', 'finance').':');
                $bankAccountIdLabel->setWidth(FIELD_CONTAINER_SIZE);

                //$course->bankAccountId = strlen((string)$course->bankAccountId)>0 ? $course->bankAccountId : DEFAULT_BANK_ACCOUNT_ID;
                $bankAccountId       = new Mselection('bankAccountId', strlen((string)$this->getFormValue('bankAccountId',$data->bankAccountId))>0 ? $this->getFormValue('bankAccountId',$data->bankAccountId) : $course->bankAccountId, '', $dataBankAccount, false);
                $bankAccountId->setAutoSubmit(true);

                $hctBankAccount      = new MHContainer('hctBankAccountId', array($bankAccountIdLabel, $bankAccountId));
                $hctBankAccount->setShowLabel(true);
                $fields[]            = $hctBankAccount;

                if ( strlen((string)$this->getFormValue('bankAccountId', $data->bankAccountId))>0 )
                {
                    //contrato
                    $businessBankAccountContract = $MIOLO->getBusiness('finance', 'BusBankAccountContract');
                    $dataBankAccountContract     = $businessBankAccountContract->listBankAccountContract($this->getFormValue('bankAccountId', $data->bankAccountId));

                    $bankContractIdLabel  = new MText('bankContractIdLabel', _M('Bank contract', 'finance').':');
                    $bankContractIdLabel->setWidth(FIELD_CONTAINER_SIZE);

                    $bankContractId       = new Mselection('bankContractId', $this->getFormValue('bankContractId', $data->bankContractId), '', $dataBankAccountContract, false);

                    $hctBankAccountContract      = new MHContainer('hctBankAccountContract', array($bankContractIdLabel, $bankContractId));
                    $hctBankAccountContract->setShowLabel(true);
                    $fields[]                  = $hctBankAccountContract;
                }

                $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), _M('Parcels number', $module), FIELD_ID_SIZE);
                $validators[]  = new MRequiredValidator('parcelsNumber');
                $validators[]  = new MRegExpValidator('parcelsNumber', _M('Parcels number',$module), POSSIBLE_PARCELS_NUMBER);
                $fields[]      = $parcelsNumber;
            }

        }

        $fields[] = new Separator('');
        $fields[] = new MButton('btnGenerate', _M('Generate', $module));
        $fields[] = new Separator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

    }
    
    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $data             = $this->getTypesData();
        $business         = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $business2        = $MIOLO->getBusiness($module, 'BusGenerateMultipleLearningPeriod');

        $courses          = unserialize(urldecode(stripslashes(MIOLO::_request('courses'))));
        $periodId         = $this->getFormValue('periodId');
        $formationLevelId = MIOLO::_request('formationLevelId');

        $x = 0;

        $businessCourse = $MIOLO->getBusiness($module, 'BusCourse');

        //percorre os cursos em busca das informações financeiras
        if ( $data->isFinanceGenerate == DB_TRUE )
        {
            $courseIncomeSourceNull = array();
            foreach ( $courses as $value )
            {
                list($courseId, $courseVersion, $turnId, $unitId) = explode(";", $value);
                $courseData = $businessCourse->getCourse($courseId);
                if ( strlen((string)$courseData->incomeSourceId) == 0 )
                {
                    $courseIncomeSourceNull[] = $courseId;
                }
            }
        }

        //pesquisa se os cursos tem origem financeira, no caso do período letivo ser com financeiro
        if ( $data->isFinanceGenerate == DB_TRUE && count($courseIncomeSourceNull)>0 )
        {

            $msg           = _M('The course(s): @1 haven\'t financial origin registered, in such a way, is not possible to create a learning period with generation of finance for the same.', $module, implode(', ', $courseIncomeSourceNull));
            $lblMsg        = new MText('lblMsg', $msg);
            $lblMsg->color = 'red';

            $fields[] = $lblMsg;
            $fields[] = new Separator('');

            $this->divError->addControl($fields);

        }
        else
        {
            $business2->beginTransaction();

            foreach ( $courses as $value )
            {
                list($courseId, $courseVersion, $turnId, $unitId) = explode(";", $value);

                $data->courseId      = $courseId;
                $data->courseVersion = $courseVersion;
                $data->turnId        = $turnId;
                $data->unitId        = $unitId;
                $data->version       = $courseVersion;
                $data->description   = _M('Period', $module)  . ' ' . $data->periodId . ' ' .
                                       _M('Course', $module)  . ' ' . $courseId       . ' ' .
                                       _M('Version', $module) . ' ' . $courseVersion  . ' ' .
                                       _M('Turn', $module)    . ' ' . $turnId         . ' ' .
                                       _M('Unit', $module)    . ' ' . $unitId;

                $data->previousLearningPeriodId = $business->getPreviousLearningPeriod($courseId, $courseVersion, $unitId, $turnId);

                $ok  = $business->insertLearningPeriod($data);

                if ( $ok )
                {
                    $x++;
                }
            }

            $business2->commit();

            $msg = _M('@1 records inserted', $module, $x);

            if ( $x > 0 )
            {
                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleLearningPeriodCourse';
                $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts['periodId']         = $periodId;
                $opts['courses']          = urlencode(serialize($courses));
                $opts['formationLevelId'] = $formationLevelId;

                $msg  = _M('Error executing requested operation.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdLearningPeriod();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->learningPeriodDescription->value;

        return $data;
    } 

}

?>
