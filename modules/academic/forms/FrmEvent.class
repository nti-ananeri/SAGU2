<?php

/**
 * Event form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 06/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a event
 **/
class FrmEvent extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;


        $this->page->onLoad('document.' . $this->name . '.eventDescription.focus();');

        if ( in_array($function, array('update', 'delete')) )
        {
            $eventId = MIOLO::_request('eventId');

            $fields[]  = new MTextLabel('eventId', $eventId, _M('Event id', $module));
            $fields[]  = new MHiddenField('eventId', $eventId);

            $business = $MIOLO->getBusiness($module, 'BusEvent');
            $data      = $business->getEvent($eventId);
        }

        $eventDescription = new MMultiLineField('eventDescription', $this->getFormValue('eventDescription',$data->description), _M('Description',$module), 40, 2, 40);
        $eventDescription->setJsHint(_M('Enter the description',$module));
        $fields[] = $eventDescription;
        $validators[] = new MRequiredValidator('eventDescription');

        //$hctDescription = new MHContainer('hctDescription', $flds);
        //$hctDescription->setShowLabel(true);
        //$fields[]  = $hctDescription;
        //unset($flds);
        
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', '', 'required'));
        $fields[] = $beginDate;

        //$hctBeginDate = new MHContainer('hctBeginDate', $flds);
        //$fields[]      = $hctBeginDate;
        //unset($flds);

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', '', 'required'));
        $fields[] = $endDate;

        //$hctEndDate = new MHContainer('hctEndDate', $flds);
        //$fields[]   = $hctEndDate;
        //unset($flds);

        $accountSchemeLabel = new MText('accountSchemeLabel', _M('Account scheme', $module) . ':');
        $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$accountSchemeLabel->setClass('m-caption m-caption-required');
        $flds[] = $accountSchemeLabel;

        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), _M('Account scheme',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'accountSchemeDescription', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeId->setJsHint(_M('Enter the account scheme code',$module));
        //$validators[] = new MIntegerValidator('accountSchemeId', _M('Account scheme',$module));
        $flds[]         = $accountSchemeId;

        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setReadOnly(true);
        $flds[]         = $accountSchemeDescription;

        $hctAccountScheme = new MHContainer('hctAccountScheme', $flds);
        $hctAccountScheme->setShowLabel(false);
        $fields[]  = $hctAccountScheme;
        unset($flds);

        $costCenterLabel = new MText('costCenterLabel', _M('Cost center', $module) . ':');
        $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$costCenterLabel->setClass('m-caption m-caption-required');
        $flds[] = $costCenterLabel;

        $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId), _M('Cost center',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Enter the cost center code',$module));
        $flds[]         = $costCenterId;

        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$data->costCenterDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $flds[]         = $costCenterDescription;

        $hctCostCenter = new MHContainer('hctCostCenter', $flds);
        $hctCostCenter->setShowLabel(false);
        $fields[]  = $hctCostCenter;
        unset($flds);
        
        $policyLabel = new MText('policyLabel', _M('Policy', $module) . ':');
        $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$policyLabel->setClass('m-caption m-caption-required');
        $flds[] = $policyLabel;
        
        $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId',$data->policyId), _M('Policy',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
        $policyId->setJsHint(_M('Enter the policy code',$module));
        $flds[]         = $policyId;
        $validators[] = new MIntegerValidator('policyId', _M('Policy',$module), 'optional');

        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $policyDescription->setReadOnly(true);
        $flds[]         = $policyDescription;

        $hctPolicy = new MHContainer('hctPolicy', $flds);
        $hctPolicy->setShowLabel(false);
        $fields[]  = $hctPolicy;
        unset($flds);

        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Income source', $module) . ':');
        $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$incomeSourceLabel->setClass('m-caption m-caption-required');
        $flds[] = $incomeSourceLabel;
        
        $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId',$data->incomeSourceId), _M('Income source',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'incomeSourceDescription', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Enter the income source code',$module));
        $flds[]         = $incomeSourceId;
        $validators[] = new MIntegerValidator('incomeSourceId', _M('Income source',$module), 'optional');

        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescription->setReadOnly(true);
        $flds[]         = $incomeSourceDescription;

        $hctIncomeSource = new MHContainer('hctIncomeSource', $flds);
        $hctIncomeSource->setShowLabel(false);
        $fields[]  = $hctIncomeSource;
        unset($flds);

        $inscriptionFee = new MTextField('inscriptionFee', $this->getFormValue('inscriptionFee',$data->inscriptionFee), _M('Inscription fee',$module), 18, _M('Value: 0.00', $module));
        $inscriptionFee->setJsHint(_M('Enter the inscription fee',$module));
//         $validators[] = new MRegExpValidator('inscriptionFee','', '[0-9]+\.[0-9]{2}');
        $fields[] = $inscriptionFee;
        $validators[] = new MFloatValidator('inscriptionFee', _M('Inscription fee',$module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $hctInscriptionFee = new MHContainer('hctInscriptionFee', $flds);
        $fields[]  = $hctInscriptionFee;
        unset($flds);
        
        if ( $function == 'update' )         {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        if (MODULE_FINANCE_INSTALLED == 'YES')
        {
            //$validators[] = new MRequiredValidator('costCenterId');
            //$validators[] = new MRequiredValidator('incomeSourceId');
            //$validators[] = new MRequiredValidator('policyId');
            //$validators[] = new MRequiredValidator('accountSchemeId');
        }
        
        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'eventId' => MIOLO::_request('eventId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('eventIdS' => MIOLO::_request('eventId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusEvent');
        $ok = $business->deleteEvent($this->eventId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusEvent');

        if ( $function == 'update' )
        {
            $ok  = $business->updateEvent($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertEvent($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('eventIdS' => $data->eventId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdEvent();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        $data->description = $this->eventDescription->value;

        return $data;
    }

}

?>
