<?php

/**
 * Degree form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a degree
 **/
class FrmDegree extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $degreeId = $_GET['degreeId'] ? $_GET['degreeId'] : $_POST['degreeId'];
            $fields[] = new MTextLabel('degreeId', $degreeId, _M('Degree id',$module));
            $fields[] = new MHiddenField('degreeId', $degreeId);

            $business = $MIOLO->getBusiness($module,'BusDegree');
            $data = $business->getDegree($degreeId);
        }
        
        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
        
        if ( in_array($function,array('update','delete')) )
        {
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');
        }
        else
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId', 'periodId' => 'periodId');
        }
        $this->page->onLoad('document.' . $this->name . '.courseId.focus();');

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module).':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescription->setReadOnly(true);

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctlearningPeriod->setShowLabel(true);
        $fields[]  = $hctlearningPeriod;

        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Description',$module),FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the description',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        //data final
        $finalDateLabel = new MText('finalDateLabel', _M('Final date',$module) . ':');
        $finalDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $finalDateLabel->setClass('m-caption m-caption-required');

        $finalDate      = new MCalendarField('finalDate', $this->getFormValue('finalDate', $data->finalDate), null, FIELD_DATE_SIZE);
        $finalDate->setJsHint(_M('Enter the delivery final date',$module));
        $validators[]   = new MDATEDMYValidator('finalDate', _M('Final date',$module), 'required');

        $hctFinalDate   = new MHContainer('hctFinalDate', array($finalDateLabel, $finalDate, $hctFinalDate));
        $hctFinalDate->setShowLabel(true);
        $fields[]       = $hctFinalDate;

        //data limite
        $limitDateLabel = new MText('limitDateLabel', _M('Limit date',$module) . ':');
        $limitDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $limitDateLabel->setClass('m-caption m-caption-required');

        $limitDate      = new MCalendarField('limitDate', $this->getFormValue('limitDate', $data->limitDate), null, FIELD_DATE_SIZE);
        $limitDate->setJsHint(_M('Enter the delivery limit date',$module));
        $validators[]   = new MDATEDMYValidator('limitDate', _M('Limit date',$module), 'required');

        $hctLimitDate   = new MHContainer('hctLimitDate', array($limitDateLabel, $limitDate, $hctLimitDate));
        $hctLimitDate->setShowLabel(true);
        $fields[]       = $hctLimitDate;

        $degreeNumberOpts = array(1=>'1', 2=>'2', 3=>'3', 4=>'4', 5=>'5', 6=>'6', 7=>'7', 8=>'8', 9=>'9', 10=>'10', 11=>'11', 12=>'12', 13=>'13', 14=>'14', 15=>'15', 16=>'16', 17=>'17', 18=>'18', 19=>'19', 20=>'20');
        
        $degreeNumber = new MSelection('degreeNumber', $this->getFormValue('degreeNumber', $data->degreeNumber), _M('Degree number', $module), $degreeNumberOpts);
        $validators[] = new MIntegerValidator('degreeNumber', '', 'required');
        $fields[]     = $degreeNumber;

        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight ? $data->weight : 1), _M('Weight',$module), 10);
        $weight->setJsHint(_M('Enter the weight',$module));
        $fields[] = $weight;
        $validators[] = new MRequiredValidator('weight', _M('Weight',$module));

        //max note
        
        $maxNoteLabel =  new MText('maxNoteLabel', _M('Max note',$module) . ':');
        $maxNoteLabel->setWidth(FIELD_CONTAINER_SIZE);
        $maxNoteLabel->setClass('m-caption m-caption-required');

        $maxNote      = new MTextField('maxNote', $this->getFormValue('maxNote', $data->maxNote), '', 10);
        $validators[] = new MRequiredValidator('maxNote', _M('Max note', $module));

        $maxNoteHint  = new MHint('maxNoteHint', _M('The greatest note that some pupil can be retrived.', $module));

        $hctMaxNote   = new MHContainer('hctMaxNote', array($maxNoteLabel, $maxNote, $maxNoteHint));
        $fields[]     = $hctMaxNote;

        $opts = array( array(_M("Concept", $module), "t"),
                       array(_M("Note", $module), "f") );

        $conceptLabel = new MText('conceptLabel', _M('Evaluation type',$module) . ':');
        $conceptLabel->setWidth(FIELD_CONTAINER_SIZE); 
        $conceptLabel->setClass('m-caption m-caption-required');

        $concept = $this->GetFormValue('concept',$data->concept);
        $concept = new MRadioButtonGroup('concept', '', $opts, $concept ? $concept : DB_FALSE, null, 'horizontal');
        $concept->SetShowLabel(false);

        $hctConcept = new MHContainer('hctConcept', array($conceptLabel, $concept));
        $fields[]  = $hctConcept;

        $opts = array( array(_M("Yes", $module), "t"),
                       array(_M("No", $module), "f") );

        $isSubstitutiveLabel = new MText('isSubstitutive', _M('Is substitutive ?',$module) . ':');
        $isSubstitutiveLabel->setWidth(FIELD_CONTAINER_SIZE); 
        $isSubstitutiveLabel->setClass('m-caption m-caption-required');

        $isSubstitutive = $this->GetFormValue('isSubstitutive',$data->isSubstitutive);
        $isSubstitutive = new MRadioButtonGroup('isSubstitutive', '', $opts, $isSubstitutive ? $isSubstitutive : DB_FALSE, null, 'horizontal');
        $isSubstitutive->SetShowLabel(false);

        $hctIsSubstitutive = new MHContainer('hctIsSubstitutive', array($isSubstitutiveLabel, $isSubstitutive));
        $fields[]  = $hctIsSubstitutive;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        //$this->setValidators($validators);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'degreeId' => MIOLO::_request('degreeId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('degreeIdS' => MIOLO::_request('degreeId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusDegree');
        $ok = $business->deleteDegree($this->degreeId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusDegree');

        if ( $function == 'update' )
        {
            $ok  = $business->updateDegree($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertDegree($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('degreeIdS' => $data->degreeId);

           if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdDegree();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    }

}

?>

