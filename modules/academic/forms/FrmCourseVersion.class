<?php

/**
 * Course version form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 30/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course version
 **/
class FrmCourseVersion extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $courseId = $_GET['courseId'] ? $_GET['courseId'] : $_POST['courseId'];
            $fields[] = new MTextLabel('courseId', $courseId, _M('Course id',$module));
            $fields[] = new MHiddenField('courseId', $courseId);
            $courseVersion = $_GET['courseVersion'] ? $_GET['courseVersion'] : $_POST['courseVersion'];
            $fields[]      = new MTextLabel('courseVersion', $courseVersion, _M('Course version',$module));
            $fields[]      = new MHiddenField('courseVersion', $courseVersion);
            
            $business = $MIOLO->getBusiness($module,'BusCourseVersion');
            $data = $business->getCourseVersion($courseId, $courseVersion);

            $this->page->onLoad('document.' . $this->name . '.courseVersionTypeId.focus();');
        }
        else
        {
            //Course
            $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
            $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
            $courseLabel->setClass('m-caption m-caption-required');

            $courseId = new MLookupTextField('courseId', $this->courseId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
                        'courseName', $module, 'Course', null, null, true);
            $courseId->setJsHint(_M('Enter the course code',$module));
            $validators[] = new MRequiredValidator('courseId', _M('Course',$module));

            $courseName = new MTextField('courseName', $this->courseName->value, '', FIELD_DESCRIPTION_SIZE);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Course name',$module));

            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]  = $hctCourse;

            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), _M('Course version',$module), 15);
            $fields[] = $courseVersion;
            $validators[] = new MIntegerValidator('courseVersion', _M('Version', $module), 'required');
            
            $this->page->onLoad('document.' . $this->name . '.courseId.focus()');
        }
        
        $businessCourseVersionType = $MIOLO->getBusiness('academic', 'BusCourseVersionType');
        $courseVersionTypeId = new MComboBox( 'courseVersionTypeId', $this->getFormValue('courseVersionTypeId',$data->courseVersionTypeId), _M('Course version type',$module), $businessCourseVersionType->listCourseVersionType());
        $validators[] = new MRequiredValidator('courseVersionTypeId');
        $fields[] = $courseVersionTypeId;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $fields[] = $beginDate;

        if ( in_array($function,array('update','delete')) )
        {
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
            $validators[] = new MDATEDMYValidator('endDate', '', 'optional');
            $fields[] = $endDate;
        }

        $semesterTotal = new MTextField('semesterTotal', $this->getFormValue('semesterTotal', $data->semesterTotal), _M('Semester total',$module), 15);
        $validators[] = new MRegExpValidator('semesterTotal','','(^-?[0-9][0-9]*$)');
        $fields[] = $semesterTotal;

        $credits = new MTextField('credits', $this->getFormValue('credits', $data->credits), _M('Credits',$module), 15);
        $fields[] = $credits;

        $hourTotal = new MTextField('hourTotal', $this->getFormValue('hourTotal', $data->hourTotal), _M('Hour total',$module), 15);
        $fields[] = $hourTotal;

        $hourRequired = new MTextField('hourRequired', $this->getFormValue('hourRequired', $data->hourRequired), _M('Hour required',$module), 15);
        $fields[] = $hourRequired;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S', '');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'courseId'=>MIOLO::_request('courseId'),
                        'courseVersion'=>MIOLO::_request('courseVersion'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('courseIdS'=>MIOLO::_request('courseId'),
                        'courseVersionS'=>MIOLO::_request('courseVersion'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCourseVersion');
        $ok = $business->deleteCourseVersion($this->courseId->value, $this->courseVersion->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCourseVersion');

        if ( $function == 'update' )
        {
            $ok  = $business->updateCourseVersion($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCourseVersion($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('courseIdS'=>$data->courseId,
                          'courseVersionS'=>$data->courseVersion);
            
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdCourseVersion();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    }

}

?>
