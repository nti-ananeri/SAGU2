<?php

/**
 * Physical person lookup form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
if ( count($constants)>0 )
{
    foreach ( $constants as $cnt )
    {
        define($cnt[0],$cnt[1]);
    }
}

/**
 * Form to manipulate a city lookup
 **/
class FrmGroupLookup extends MForm
{

    function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = MIOLO::getCurrentModule();

        parent::__construct( _M('Curricular component insertion', $module) );

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }


    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$courseLabel->setClass('m-caption m-caption-required');

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$turnLabel->setClass('m-caption m-caption-required');

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        //$validators[]    = new MRequiredValidator('turnId', _M('Turn', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$unitLabel->setClass('m-caption m-caption-required');

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        //$validators[]    = new MRequiredValidator('unitId', _M('Unit', $module));

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $curriculumCourseId = new MHiddenField('curriculumCourseId', $curriculumCourseId);
        $fields[] = $curriculumCourseId;

        $curriculumCourseVersion = new MHiddenField('curriculumCourseVersion', $curriculumCourseVersion);
        $fields[] = $curriculumCourseVersion;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,curriculumCourseId,curriculumCourseVersion,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId'=>'periodId'), true);
        $validators[]     = new MIntegerValidator('learningPeriodId', _M('Learning period', $module), 'required');

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);

        $fields[] = $hctLearningPeriod;
        
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]                   = $curricularComponentLabel;

        $curriculumCurricularComponentId = new MLookupTextField('curriculumCurricularComponentId', $this->getFormValue('curriculumCurricularComponentId ', $data->curriculumCurricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curriculumCurricularComponentVersion, curriculumCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $flds[]                = $curriculumCurricularComponentId;

        $curriculumCurricularComponentVersion = new MTextField('curriculumCurricularComponentVersion', $this->getFormValue('curriculumCurricularComponentVersion', $data->curriculumCurricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curriculumCurricularComponentVersion;

        $curriculumCurricularComponentName = new MTextField('curriculumCurricularComponentName', $this->getFormValue('curriculumCurricularComponentName', $data->curriculumCurricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curriculumCurricularComponentName->setReadOnly(true);
        $flds[]                  = $curriculumCurricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);
        
        $business  = $MIOLO->getBusiness($module, 'BusRegimen');
        $regimenId = new MComboBox('regimenId', $this->getFormValue('regimenId', $data->regimenId), _M('Regimen', $module), $business->listRegimen());
        $fields[]  = $regimenId;
        $validators[]     = new MIntegerValidator('regimenId', '', 'required');

        $vacant = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), _M('Vacant', $module), 10);
        $vacant->setJsHint(_M('Enter the vacant', $module));
        $validators[] = new MRegExpValidator('vacant','','(^-?[0-9][0-9]*$)');
        $fields[] = $vacant;

        $isUseWebDailyLabel = new MText('isUseWebDaily', _M('Does it use web daily',$module) .'?');
        $isUseWebDailyLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isUseWebDailyLabel->setClass('m-caption m-caption-required');

        $isUseWebDaily = new MRadioButtonGroup('isUseWebDaily', null, SAGU::listYesNo(1), $this->getFormValue('isUseWebDaily', 'f'), null, 'horizontal');
        $isUseWebDaily->setShowLabel(false);

        $hctIsUseWebDaily = new MHContainer('hctIsUseWebDaily', array($isUseWebDailyLabel, $isUseWebDaily));
        $fields[] = $hctIsUseWebDaily;

        $classLabel = new MText('classLabel', _M('Class',$module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]     = $classLabel;

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Class id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('className_'), $module, 'Class', null, null, true);
        $flds[]  = $classId;
        
        $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Class name', $module), FIELD_DESCRIPTION_SIZE);
        $className->setReadOnly(true);
        $flds[]    = $className;
        
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;
        unset($flds);

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

        $this->addButton( new formButton('tbBtnSave' , _M('Save', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Back', $module), 'history.go(-1)'));
    }

    function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusGroup');

        $businessCurriculum                   = $MIOLO->getBusiness($module, 'BusCurriculum');
        $filters->courseId                    = $data->curriculumCourseId;
        $filters->courseVersion               = $data->curriculumCourseVersion;
        $filters->curricularComponentId       = $data->curriculumCurricularComponentId;
        $filters->curricularComponentVersion  = $data->curriculumCurricularComponentVersion;
        $curriculum = $businessCurriculum->searchCurriculum($filters);

        $data->curriculumId = $curriculum[0][0];

        if ( count($curriculum) == 0 )
        {
            $this->addError(_M('No curriculum found for this course and curricular component.', $module));
        }
        elseif ( $groupId = $business->insertGroup($data) )
        {
            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$groupId}','{$data->groupName}')" );
        }
        else
        {
            $this->addError(_M('Error inserting new group.',$module));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdGroup();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'groupName' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->groupName->value;

        return $data;
    }

}
?>
