<?php

/**
 * EvaluationEnroll form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a evaluationEnroll
 **/
class FrmEvaluationEnroll extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $evaluationId = MIOLO::_request('evaluationId');
            $enrollId      = MIOLO::_request('enrollId');

            $business = $MIOLO->getBusiness($module,'BusEvaluationEnroll');
            $data     = $business->getEvaluationEnroll($evaluationId,$enrollId);
        }

        $limbo = new MHiddenField('limbo');
        $fields[] = $limbo;
        
        $professorLabel = new MText('professorLabel', _M('Professor', $module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);

        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), _M('Professor id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, array('personId' => 'professorId'), true);
        $professorId->setJsHint(_M('Enter the professor code',$module));
        //$flds[] = $professorId;
        $validators[] = new MIntegerValidator('professorId', _M('Professor', $module), 'optional');

        $professorName = new MTextField('professorName', $this->professorName->value, _M('Professor name',$module), FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Professor name',$module));
        //$flds[] = $professorName;
        
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(false);
        $fields[] = $hctProfessor;
        
        $evaluationLabel = new MText('evaluationLabel', _M('Evaluation', $module) . ':');
        $evaluationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $evaluationLabel->setClass('m-caption m-caption-required');
        
        $evaluationId = new MTextField('evaluationId', $this->getFormValue('evaluationId', $data->evaluationId),'', FIELD_ID_SIZE);
        $evaluationId->setReadOnly(true);
        $validators[] = new MRequiredValidator('evaluationId', _M('Evaluation', $module));
        
        $scheduleProfessorId = new MLookupField('scheduleProfessorId', $this->getFormValue('scheduleProfessorId', $data->scheduleProfessorId), null, null, 'professorId, professorName, limbo, limbo, limbo, periodId, limbo, limbo, limbo, limbo, limbo, limbo, limbo, curricularComponentId, curricularComponentVersion, curricularComponentName, evaluationId, evaluationDescription', $module, 'Evaluation', null, array('professorId' => 'professorId'), true);
        
        $evaluationDescription = new MTextField('evaluationDescription', $this->getFormValue('evaluationDescription', $data->evaluationDescription), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $evaluationDescription->setReadOnly(true);
        //$flds[] = $evaluationDescription;
        
        $hctEvaluation = new MHContainer('hctEvaluation', array($evaluationLabel, $evaluationId, $scheduleProfessorId, $evaluationDescription));
        $hctEvaluation->setShowLabel(false);
        $fields[]  = $hctEvaluation;
        unset($flds);
        
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component', $module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $curricularComponentId = new MTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), '', FIELD_ID_SIZE);
        $curricularComponentId->setReadOnly(true);
        
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), '', FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);

        $hctCurricularComponent = new MHContainer('hctEvaluation', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);
        
        $periodId = new MHiddenField('periodId');
        $fields[] = $periodId;

        $enrolLabel = new MText('enrolLabel', _M('Enroll', $module) . ':');
        $enrolLabel->setWidth(FIELD_CONTAINER_SIZE);
        $enrolLabel->setClass('m-caption m-caption-required');

        $enrollId = new MLookupTextField('enrollId', $this->getFormValue('enrollId', $data->enrollId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, enrollCurriculumDescription', $module, 'Enroll', null, array('periodId'=>'periodId', 'curricularComponentId'=>'curricularComponentId', 'curricularComponentVersion'=>'curricularComponentVersion'), true);
        $enrollId->setJsHint(_M('Enter the enroll code',$module));
        $validators[] = new MIntegerValidator('enrollId', _M('Enroll', $module), 'required');

        $enrollCurriculumDescription = new MTextField('enrollCurriculumDescription', $this->getFormValue('enrollCurriculumDescription', $data->enrollCurriculumDescription), '', FIELD_DESCRIPTION_SIZE);
        $enrollCurriculumDescription->setReadOnly(true);
        $enrollCurriculumDescription->setJsHint(_M('Enroll curricular component description',$module));

        $hctEnroll = new MHContainer('hctEnroll', array($enrolLabel, $enrollId, $enrollCurriculumDescription));
        $hctEnroll->setShowLabel(true);
        $fields[]  = $hctEnroll;

        $note = new MTextField('note', $this->getFormValue('note',$data->note), _M('Grade',$module), 18);
        $note->setJsHint(_M('Enter the grade',$module));
        $fields[] = $note;
        $validators[] = new MFloatValidator('note', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $concept = new MTextField('concept', $this->getFormValue('concept',$data->concept), _M('Concept',$module), 18);
        $concept->setJsHint(_M('Enter the concept',$module));
        $fields[] = $concept;

        $descritive = new MMultiLineField('descritive', $this->getFormValue('descritive', $data->descritive), _M('Descritive', $module), 100, 2, 50);
        $descritive->setJsHint(_M('Enter the descritive',$module));
        $fields[] = $descritive;

        $isNotAppearLabel = new MText('isNotAppearLabel', _M('Is it absent',$module) . '?');
        $isNotAppearLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isNotAppearLabel->setClass('m-caption m-caption-required');
        $flds[] = $isNotAppearLabel;

        $isNotAppear = $this->getFormValue('isNotAppear', $data->isNotAppear);
        $isNotAppear = new MRadioButtonGroup('isNotAppear', null, SAGU::listTrueFalse(1), $isNotAppear ? $isNotAppear : DB_FALSE, null, 'horizontal');
        $isNotAppear->setShowLabel(false);
        $flds[] = $isNotAppear;

        $hctIsNotAppear = new MHContainer('hctIsNotAppear', $flds);
        $fields[] = $hctIsNotAppear;
        unset($flds);

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $this->page->onLoad('document.' . $this->name . '.evaluationEnrollDescription.focus();');

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S', '');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'      => 'tbBtnDelete_confirm',
                        'function'     => 'delete',
                        'evaluationId' => MIOLO::_request('evaluationId'),
                        'enrollId'     => MIOLO::_request('enrollId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('evaluationIdS'=>MIOLO::_request('evaluationId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $evaluationId = MIOLO::_request('evaluationId');
        $enrollId      = MIOLO::_request('enrollId');

        $business = $MIOLO->getBusiness($module, 'BusEvaluationEnroll');
        $ok = $business->deleteEvaluationEnroll($evaluationId, $enrollId);

        if ( $ok )
        {
            $opts = array('evaluationIdS'=>$data->evaluationId
                          );
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusEvaluationEnroll');

        if ( $function == 'update' )
        {
            $ok  = $business->updateEvaluationEnroll($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertEvaluationEnroll($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('evaluationIdS'=>$data->evaluationId,
                          'enrollIdS'=>$data->enrollId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdEvaluationEnroll();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }

}

?>
