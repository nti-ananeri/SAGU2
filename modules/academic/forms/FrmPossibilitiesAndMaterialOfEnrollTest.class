<?php

/**
 * Possibilities and material of enroll form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *$optionsLabel = new MText('optionsLabel', _M('Situation of pupil', $module) . ':');
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmPossibilitiesAndMaterialOfEnrollTest extends MForm
{
    var $currentPage;
    var $business;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusPossibilitiesAndMaterialOfEnroll');
        parent::__construct(_M('Course\'s pupils enroll material', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        //$this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $this->setAction('main');
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        if ( (strlen((string)$function) == 0) || ($function == null) )
        {
            $fields[]  = new MHiddenField('limbo2');

            $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
            $period         = $businessPeriod->listPeriod();

            $courseLabel2 = new MText('courseLabel2', _M('Course', $module) . ':');
            $courseLabel2->setWidth(FIELD_CONTAINER_SIZE);
            $courseLabel2->setClass('m-caption m-caption-required');
            $flds4[]      = $courseLabel2;

            $courseId2    = new MLookupTextField('courseId2', $this->getFormValue('courseId2'), _M('Course code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion2, courseName2, unitId2, limbo2, turnId2', $module, 'CourseOccurrence', null, null, !$this->page->isPostBack());
            $flds4[]      = $courseId2;
            $validators[] = new MRequiredValidator('courseId2', _M('Course code',$module));

            $courseVersion2 = new MTextField('courseVersion2', $this->getFormValue('courseVersion2'), _M('Course version',$module), FIELD_ID_SIZE);
            $courseVersion2->setJsHint(_M('Enter the course version',$module));
            $courseVersion2->setReadOnly(true);
            $flds4[]        = $courseVersion2;
            //$validators[]   = new MRequiredValidator('courseVersion2');

            $courseName2 = new MTextField('courseName2', $this->getFormValue('courseName2'), _M('Course name',$module), FIELD_DESCRIPTION_SIZE);
            $courseName2->setJsHint(_M('Enter the course name',$module));
            $courseName2->setReadOnly(true);
            $flds4[]     = $courseName2;

            $hctCourse2 = new MHContainer('hctCourse2', $flds4);
            $hctCourse2->setShowLabel(false);
            $fields[]   = $hctCourse2;
            unset($flds4);

            $business = $MIOLO->getBusiness('basic', 'BusTurn');
            $turnId2  = new MComboBox('turnId2',
                                      $this->GetFormValue('turnId2'),
                                      _M('Turn',$module),
                                      $business->listTurn());
            $fields[] = $turnId2;

            $business = $MIOLO->getBusiness('basic', 'BusUnit');
            $unitId2  = new MComboBox('unitId2',
                                      $this->GetFormValue('unitId2'),
                                      _M('Unit',$module),
                                      $business->listUnit());
            $fields[] = $unitId2;


            $businessPeriod1 = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId1 = new MComboBox('periodId1', strlen((string)$this->getFormValue('periodId1', $data->periodId1))>0 ? $this->getFormValue('periodId1', $data->periodId1) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod1->listPeriod(), true );
            $fields[] = $periodId1;


            $learningPeriodIdLabel2 = new MText('learningPeriodIdLabel2', _M('Learning period',$module) . ':');
            $learningPeriodIdLabel2->setWidth(FIELD_CONTAINER_SIZE);
            $learningPeriodIdLabel2->setClass('m-caption m-caption-required');
            $flds2[] = $learningPeriodIdLabel2;

            $learningPeriodId2 = new MLookupTextField('learningPeriodId2', $this->getFormValue('learningPeriodId2'), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodName2', $module, 'LearningPeriod', null, array('periodId' => 'periodId1', 'courseId' => 'courseId2', 'courseVersion' => 'courseVersion2', 'turnId' => 'turnId2', 'unitId' => 'unitId2'), true);
            $learningPeriodId2->setJsHint(_M('Enter the learning period code',$module));
            $validators[]      = new MRequiredValidator('learningPeriodId2', _M('Learning period',$module), 'required');
            $flds2[]           = $learningPeriodId2;

            $learningPeriodName2 = new MTextField('learningPeriodName2', $this->getFormValue('learningPeriodName2'), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
            $learningPeriodName2->setReadOnly(true);
            $flds2[]             = $learningPeriodName2;

            $hctLearningPeriod2 = new MHContainer('hctLearningPeriod2', $flds2);
            $hctLearningPeriod2->setShowLabel(false);
            $fields[]           = $hctLearningPeriod2;
            unset($flds2);

            $fields[] = new Separator ('');

            $options = array( 
                              array(_M('Enrolled', $module), 'E'),
                              array(_M('Other', $module), 'O'),
                              array(_M('Freshmen', $module), 'F')
                            );

            $optionsLabel2 = new MText('optionsLabel2', _M('Situation of pupil', $module) . ':');
            $optionsLabel2->setWidth(FIELD_CONTAINER_SIZE);
            $flds4[]       = $optionsLabel2;

            if ( $this->getFormValue('options2', $options2) == NULL )
            {
                $options2 = 'E';
            }

            $options2     = new MRadioButtonGroup('options2', _M('Situation of pupil', $module), $options, $this->getFormValue('options2', $options2), '', 'vertical');
            $options2->setShowLabel(false);
            $flds4[]      = $options2;
            //$validators[] = new MRequiredValidator('options2');

            $opt2          = $this->getFormValue('options2');
            $course2       = $this->getFormValue('courseId2');
            $reportOpt2    = $this->getFormValue('reportOption2');
            $periodValue2  = $this->getFormValue('selectiveProccessId2');
            $personValue2  = $this->getFormValue('personId2');
            $reportOption2 = $this->getFormValue('reportOption2');

            $flds4[] = new Separator ('');
            
            $emissionLabel2 = new MText('emissionLabel2', _M('Emission',$module) . ':');
            $emissionLabel2->setWidth(FIELD_CONTAINER_SIZE);
            //$emissionLabel->setClass('m-caption m-caption-required');
            $flds7[] = $emissionLabel2;
            
            $emissionDate2 = new MCalendarField('emissionDate2', strlen((string)$this->getFormValue('emissionDate2'))>0 ? $this->getFormValue('emissionDate2') : date(MASK_DATE_PHP), _M('Date', $module), FIELD_DATE_SIZE);
            $flds7[]       = $emissionDate2;
            //$validators[]  = new DateDMYValidator('emissionDate2', null, 'required');

            $emissionTime2 = new MTextField('emissionTime2', strlen((string)$this->getFormValue('emissionTime2'))>0 ? $this->getFormValue('emissionTime2') : date(MASK_TIME_PHP), _M('Hour', $module), FIELD_DATE_SIZE);
            $flds7[]       = $emissionTime2;

            $hctDateTime2 = new MHContainer('hctDateTime2', $flds7);
            $hctDateTime2->setShowLabel(true);
            $fields[]     = $hctDateTime2;

            $fields[] = new Separator ('');
            
            $hctOptions2 = new MHContainer('hctOptions2', $flds4);
            $hctOptions2->setShowLabel(false);
            $fields[]    = $hctOptions2;

            $btnAll2 = new MButton('btnAll2',_M('Print reports', $module));
            $btnAll2->attachEventHandler('click', 'listClickAll');
            $fields[] = $btnAll2;

        }

        $fields[] = new Separator('');

        if ( count($validators) > 0 )
        {
            //$this->setValidators($validators);
        }

        $this->page->setAction($MIOLO->getActionURL($module, $action));
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    public function listClickAll( $sender=NULL )
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusPossibilitiesAndMaterialOfEnroll');

        $courseId         = MIOLO::_request('courseId2');
        $learningPeriodId = MIOLO::_request('learningPeriodId2');

        if ( ! (strlen((string)$courseId) > 0) )
        {
            $stringOptions[] = _M('Required course code', $module);
        }
        if ( ! (strlen((string)$learningPeriodId) > 0) )
        {
            $stringOptions[] = _M('Required learning period code', $module);
        }

        $this->currentPage = 1;

        $flagFaultRequired = false;

        if ( is_array($stringOptions) )
        {
            foreach ( $stringOptions as $key => $stringOption )
            {
                    $lblMsg1 = new MText('lblMsg1', $stringOption);
                    $lblMsg1->color = 'red';

                    $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
                    $this->divError->addControl($cntErrors);
                    $flagFaultRequired = true;
            }
        }

        if ( ! $flagFaultRequired )
        {
            $data = array (
                            MIOLO::_request('contractId2'),
                            MIOLO::_request('courseId2'),
                            MIOLO::_request('courseVersion2'),
                            MIOLO::_request('turnId2'),
                            MIOLO::_request('unitId2'),
                            MIOLO::_request('personId2'),
                            MIOLO::_request('learningPeriodId2'),
                            MIOLO::_request('options2'),
                            MIOLO::_request('isListener2'),
                            MIOLO::_request('emissionDate2'),
                            MIOLO::_request('emissionTime2'),
                            MIOLO::_request('contractPeriodId2')
                        );

            $MIOLO->getClass($module, 'RptAllEnrollMaterial');

            $report = new RptAllEnrollMaterial($data);
        }
    }
}

?>
