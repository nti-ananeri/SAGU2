<?php

/**
 * Course enroll certified form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmSemesterCertified extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Semester certified', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');        
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Semester certified', $this->home, 'certified-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[]  = $contractId;

        $fields[] = new MSeparator();

        $personLabel  = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]       = $personLabel;

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
        $validators[] = new MIntegerValidator('personId', _M('Person',$module), 'required');
        $flds[]       = $personId;

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

        $hctPerson    = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]        = $contractLabel;

        $contractId    = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[]  = new MRequiredValidator('contractId', _M('Contract',$module), 'required');
        $flds[]        = $contractId;

        $courseId      = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId), '', FIELD_ID_SIZE);
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Course code',$module));
        $flds[]        = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        $flds[]        = $courseVersion;

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));
        $flds[]        = $courseName;

        $hctContract   = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]      = $hctContract;
        unset($flds);
        $fields[] = new MSeparator('');

        $cursedSemesterLabel = new MText('cursedSemesterLabel', _M('Put manually the number of cursed semester',$module) . '?');
        $cursedSemesterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $cursedSemesterLabel;
        
        $cursedSemesterCheckBox = new MCheckBox('cursedSemesterCheckBox', 'Yes', '', false, _M('Yes, put manually',$module), '2'); 
        $cursedSemesterCheckBox->setWidth(150);
        $flds[]                 = $cursedSemesterCheckBox;
       
        $numberSemesterLabel    = new MText('numberSemesterLabel', _M('Number of semesters',$module) . ':');
        $flds[]                 = $numberSemesterLabel;
        
        $numberSemester   = new MTextField('numberSemester', '', '', 5);
        $flds[]           = $numberSemester;

        $hctcursedSemester = new MHContainer('hctcursedSemester', $flds);
        unset($flds);
        $fields[]          = $hctcursedSemester;
        $fields[]          = new MSeparator;
       
        $stampLabel          = new MText('stampLabel', _M('Stamp',$module) . ':');
        $stampLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $stampLabel;

        $employeeId         = new MLookupTextField('employeeId', $this->getFormValue('employeeId', $this->employeeId), null, 10, null, null, array('employeeId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);
        $employeeId->setJsHint(_M('Enter the employee id',$module));
        $flds[]              = $employeeId;

        $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName', $data->employeeName), null, 20);
        $employeeName->setJsHint(_M('Employee function',$module));
        $employeeName->setReadOnly(true);
        $flds[]              = $employeeName;

        $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription', $data->functionDescription), null, 20);
        $functionDescription->setJsHint(_M('Employee function',$module));
        $flds[]              = $functionDescription;
        $functionDescription->setReadOnly(true);

        $sector              = new MTextField('sector', $this->getFormValue('sector', $data->sector), null, 20);
        $sector->setJsHint(_M('Employee sector',$module));
        $sector->setReadOnly(true);
        $flds[]              = $sector;

        $hctStamp            = new MHContainer('hctStamp', $flds);
        $hctStamp->setShowLabel(false);
        $fields[]            = $hctStamp;
        unset($flds);

        $opts[] = new MOption('optGraduation', 'G', _M('Graduation', $module), true);
        $opts[] = new MOption('optTechnician', 'T', _M('Technician', $module), false);

        $radOptionLabel = new MText('radOptionLabel', _M('Certified type', $module) . ':');
        $radOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radOptionLabel->setClass('m-caption m-caption-required');
        $flds[]         = $radOptionLabel;

        $radOption = new MRadioButtonGroup('radOption', '', $opts, $this->getFormValue('radOption', $this->radOption->value), '', 'vertical');
        $radOption->setShowLabel(false);
        $flds[]    = $radOption;
        unset($opts);
        
        $hctOption = new MHContainer('hctOption', $flds);
        $hctOption->setShowLabel(false);
        unset($flds);
        $fields[]  = $hctOption;
                
        $opts[] = new MOption('optNo', 'N', _M('No', $module), true);
        $opts[] = new MOption('optYes', 'Y', _M('Yes', $module), false);

        $radOptionLabel = new MText('radOptionLabel', _M('Description of cursed curricular component in semester', $module) . ':');
        $radOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radOptionLabel->setClass('m-caption m-caption-required');
        $flds[]         = $radOptionLabel;

        $radOption2 = new MRadioButtonGroup('radOption2', '', $opts, 2, '', 'horizontal', '');
        $flds[]    = $radOption2;
        unset($opts);
        
        $hctOption = new MHContainer('hctOption', $flds);
        $hctOption->setShowLabel(false);
        unset($flds);
        $fields[]  = $hctOption;
        $fields[] = new MSeparator();

        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $emissionDate = new MCalendarField('emissionDate', strlen((string)$this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->contractId              = MIOLO::_request('contractId');
        $cd->personId                = MIOLO::_request('personId');
        $cd->courseId                = MIOLO::_request('courseId');
        $cd->courseVersion           = MIOLO::_request('courseVersion');
        $cd->fileType                = MIOLO::_request('radFileType');
        $cd->certifiedType           = MIOLO::_request('radOption');
        $cd->curricularComponentType = MIOLO::_request('radOption2');
        $cd->cursedSemesterCheckBox  = MIOLO::_request('cursedSemesterCheckBox');
        $cd->stampName               = MIOLO::_request('employeeName');
        $cd->functionDescription     = MIOLO::_request('functionDescription');
        $cd->sector                  = MIOLO::_request('sector');
        $cd->emissionDate            = MIOLO::_request('emissionDate');

         $month = date('m');
         $year  = date('Y');
         if ( $month > 6 )
         {
           $string = 'segundo semestre de ' . $year;
           $letterSemester = 'B';
         }
         else
         {
           $string = 'primeiro semestre de ' . $year;
           $letterSemester = 'A';
         }
         $cd->periodId = $string;
         $cd->periodId2 = $year . $letterSemester;

        if ( strlen((string)$cd->contractId) == 0 || strlen((string)$cd->emissionDate) == 0 || strlen((string)$cd->periodId2) == 0)
        {
            $lblMsg1        = new MText('lblMsg1', '');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            //verificar se é um aluno ouvinte(daí deve aparecer um erro)
            $businessContract = $MIOLO->getBusiness($module, 'BusContract');
            $contract         = $businessContract->getContract($cd->contractId);

            if ( $contract->isListener == DB_TRUE )
            {
                $lblMsg1        = new MText('lblMsg1', _M('This is a pupil listener', $module) . '!');
                $lblMsg1->color = 'red';
                $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                //pega os dados da instituicao
                $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
                $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

                $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
                $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

                $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
                $city         = $businessCity->getCity($legalPerson->cityId);

                //pega os dados do aluno
                $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
                $physicalPerson         = $businessPhysicalPerson->getPhysicalPerson($cd->personId);
                //pega a sequencia de atestados
                $cd->dateIssue       = $cd->emissionDate;
                $cd->certifiedTypeId = CERTIFIED_SEMESTER;

                //pega total de créditos do aluno 
                $businessCoursedCredits = $MIOLO->getBusiness($module, 'BusEnroll');
                $coursedCredits         = $businessCoursedCredits->getCoursedTotalCredits($cd->contractId);

                //pega total de créditos do curso
                $businessTotalCredits = $MIOLO->getBusiness($module, 'BusCourseVersion');

                $totalCredits         = $businessTotalCredits->           getCourseVersionTotalCredits($cd->courseId, $cd->courseVersion);

                //pega total de semestres do curso
                $businessTotalSemester = $MIOLO->getBusiness($module, 'BusCourseVersion');
                $totalSemester        = $businessTotalSemester->           getCourseVersionTotalSemester($cd->courseId, $cd->courseVersion);

                //créditos por semestre
                if ( ( $totalCredits > 0 ) && ( $totalSemester > 0 ) )
                {
                    $creditsSemester = ($totalCredits / $totalSemester);
                }
                else
                {
                    $creditsSemester = '' ;
                }

                $semesterConverter[1]  = _M('first', $module);
                $semesterConverter[2]  = _M('second', $module);
                $semesterConverter[3]  = _M('third', $module);
                $semesterConverter[4]  = _M('fourth', $module);
                $semesterConverter[5]  = _M('fifth', $module);
                $semesterConverter[6]  = _M('sixth', $module);
                $semesterConverter[7]  = _M('seventh', $module);
                $semesterConverter[8]  = _M('eighth', $module);
                $semesterConverter[9]  = _M('nineth', $module);
                $semesterConverter[10] = _M('tenth', $module);
                $semesterConverter[11] = _M('eleventh', $module);
                $semesterConverter[12] = _M('twelfth', $module);
                $semesterConverter[13] = _M('thirteenth', $module);
                $semesterConverter[14] = _M('fourteenth', $module);
                $semesterConverter[15] = _M('fifteenth ', $module); 

                if( $cd->cursedSemesterCheckBox == 'Yes' )
                {
                    $cd->numberSemester = $semesterConverter[MIOLO::_request('numberSemester')];
                }
                else
                {
                    if ( ( $coursedCredits > 0 ) && ( $creditsSemester > 0 ) )
                    {
                        $cd->numberSemester = ($coursedCredits / $creditsSemester);
                        $cd->numberSemester = ceil($cd->numberSemester);
                        $cd->numberSemester = $semesterConverter[$cd->numberSemester];
                    }
                    else
                    {
                        $cd->numberSemester = '';
                    }
                }


                $businessCertified = $MIOLO->getBusiness($module, 'BusCertified');
                $certifiedNumber   = $businessCertified->getSequence($cd);

                $MIOLO->uses('/core/AgataAPI.class');

                $api = new AgataAPI;
               

                $api->setParameter('$certifiedNumber', $certifiedNumber);
                if ( $cd->certifiedType == 'G' )
                {
                    $api->setParameter('$departament', 'PROEN');
                    $api->setParameter('$companySector', 'SECRETARIA GERAL DO ' . strtoupper($company->companyTypeDescription) . ' ' . strtoupper($legalPerson->fakeName));
                }
                elseif ( $cd->certifiedType == 'T' )
                {
                    $api->setParameter('$departament', 'CEP/PROEN');
                    $api->setParameter('$companySector', 'SECRETARIA DO ' . strtoupper($company->companyTypeDescription) . ' - CEP - ' . strtoupper($legalPerson->fakeName));
                }
                $api->setParameter('$institution', $legalPerson->name);
                $api->setParameter('$personId', $physicalPerson->personId);
                $api->setParameter('$name', $physicalPerson->name);
                $api->setParameter('$companyName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                $api->setParameter('$semester', $cd->numberSemester);
                $api->setParameter('$courseName', $contract->courseName);
                $api->setParameter('$periodId', $cd->periodId);
                $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
                $api->setParameter('$stateId', $city->stateId);
                $api->setParameter('$stampName', SAGU::getCapitulatetString($cd->stampName));
                $api->setParameter('$functionDescription', SAGU::getCapitulatetString($cd->functionDescription));
                $api->setParameter('$sector', SAGU::getCapitulatetString($cd->sector));
                $api->setParameter('$emissionDate', SAGU::getDateByExtense($cd->emissionDate));

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(TEMP_DIR . '/certified.sxw');
                $api->setDataArray($null);

                $businessEnroll = $MIOLO->getBusiness($module, 'BusEnroll');
                $data           = $businessEnroll->getCurricularComponentsEnrolled($cd->contractId, $cd->periodId2);

                              
                 if ( $cd->curricularComponentType == 'N' )
                 {
                    $contractResource = 'semesterCertifiedNo.sxw';
                 }
                 elseif ( $cd->curricularComponentType == 'Y' ) 
                 {
                    $contractResource = 'semesterCertifiedYes.sxw';
                    $array[0][1] = $data;
                    $api->setSubDataArray($array);
                 }
                

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/') . $contractResource);

                if ( $ok && $cd->fileType == 'pdf' )
                {
                    $api->setOutputPath(TEMP_DIR . '/certified.pdf');
                    $ok = $api->openOffice2pdf(TEMP_DIR . '/certified.sxw');
                }

                //se não conseguiu gerar o arquivo
                if ( !$ok )
                {
                    $lblAgataError        = new MText('lblMsg1', $api->getError());
                    $lblAgataError->color = 'red';
                    $sep1                 = new Separator('');
                    $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                    $this->divError->addControl($cntErrors);
                }
                else
                {
                    //insere a sequencia nos atestados
                    $ok = $businessCertified->insertCertified($cd);

                    //se inseriu o registro
                    if ( $ok )
                    {
                        $api->fileDialog();
                    }
                }
            }
        }
    }
}

?>
