<?php

/**
 * Enroll confirmation report form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 06/02/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollConfirmationReport extends MForm
{
    var $reportData;

    /**
     * Class constructor
     **/
    function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        parent::__construct(_M('Enroll confirmation', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO        = MIOLO::getInstance();
        $module       = MIOLO::getCurrentModule();
        $action       = MIOLO::getCurrentAction();

        $toolbar = new MToolBar('toolbar');
        $toolbar->disableButton('tbBtnNew');
        $toolbar->disableButton('tbBtnDelete');
        $toolbar->disableButton('tbBtnSave');
        $toolbar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $action, null, array('event' => 'bookmark'));
        $toolbar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Enroll confirmation', $action, 'enrollConfirmation-16x16.png', true);
        }
        //fim favoritos
        
        $fields[] = $toolbar;

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;
        
        $courseLabel = new MText('courseLabel', _M('Course',$module));
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $this->reportData->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->reportData->courseVersion), _M('Course version',$module), FIELD_ID_SIZE);
        //$courseVersion->setReadOnly(true);

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $this->reportData->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;
        
        $turnLabel = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $this->reportData->turnId), _M('Turn id',$module), FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $this->reportData->turnDescription), _M('Turn description', $module), FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;
        
        $unitLabel = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $unitId = new MTextField('unitId', $this->getFormValue('unitId', $this->reportData->unitId), _M('Unit id', $module), FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $this->reportData->unitDescription), _M('Unit description', $module), FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[] = $hctUnit;
        
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $this->enrollData->learningPeriodId), _M('Learning period', $module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module));

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->reportData->learningPeriodDescription), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;
        
        $adjustmentLimit = new MTextField('adjustmentLimit', $this->getFormValue('adjustmentLimit', $this->reportData->adjustmentLimit), _M('Adjustment date limit to avoid auto cancellation', $module), 30);
        //$fields[] = $adjustmentLimit;
        
        $internetAdjustmentPeriod = new MTextField('internetAdjustmentPeriod', $this->getFormValue('internetAdjustmentPeriod', $this->reportData->internetAdjustmentPeriod), _M('Internet adjustment period', $module), 30);
        $fields[] = $internetAdjustmentPeriod;
        
        $labsAdjustmentPeriod = new MTextField('labsAdjustmentPeriod', $this->getFormValue('labsAdjustmentPeriod', $this->reportData->labsAdjustmentPeriod), _M('Laboratories adjustment period', $module), 30);
        $fields[] = $labsAdjustmentPeriod;
        
        $recessPeriod = new MTextField('recessPeriod', $this->getFormValue('recessPeriod', $this->reportData->recessPeriod), _M('Recess period', $module), 30);
        $fields[] = $recessPeriod; 
        
        $emitionDate = new MCalendarField('emitionDate', date(MASK_DATE_PHP), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('emitionDate', '', 'optional');
        $fields[] = $emitionDate;

        $documentNumber = new MTextField('documentNumber', $this->getFormValue('documentNumber', $this->reportData->documentNumber), _M('Document number', $module), 30);
        $fields[] = $documentNumber;

        $personHint  = new MText('personHint', _M('To generate for one pupil only, fill the following field.',$module));
        $fields[] = $personHint;

        $contractLabel = new MText('contractLabel', _M('Contract',$module));
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]        = $contractLabel;
        
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->reportData->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $flds[]           = $contractId;
        
        $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->reportData->contractPersonId), _M('Person',$module), FIELD_ID_SIZE);
        $contractPersonId->setReadOnly(true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;
        
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->reportData->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Enter the person name',$module));
        $flds[]             = $contractPersonName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);
        
        $fields[] = new MSeparator();
        
        if (count($validators) > 0)
        {
            $this->setValidators($validators);
        }   
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click print
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData(); //get form's data
        $class = 'RptEnrollConfirmationDocument'; 
        $MIOLO->getClass($module, $class); //get the RptEnrollConfirmation class

        $report = new $class($data); //instanciate the class
    }
}

?>
