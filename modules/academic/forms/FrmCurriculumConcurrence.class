<?php

/**
 * Curriculum concurrence form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a curriculumConcurrence
 **/
class FrmCurriculumConcurrence extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        //courseOut
        $cOutCourseInstruction = new MTextLabel('textLabel', _M('Select here the curricular component that if is coursed, hind the "In" curricular component at are would course',$module).'.');

        $cOutCourseOutLabel = new MText('cOutCourseOutLabel', _M('Course id',$module) . ':');
        $cOutCourseOutLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cOutCourseOutLabel->setClass('m-caption m-caption-required');

        $cOutCourseId = new MLookupTextField('cOutCourseId', $this->cOutCourseId->value, '', FIELD_ID_SIZE, null, null, 'cOutCourseVersion, cOutCourseName, cOutCourseUnitId, cOutCourseUnitDescription, cOutCourseTurnId, cOutCourseTurnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'cOutCourseId'), true);
        $validators[] = new MRequiredValidator('cOutCourseId', _M('Course out id',$module));

        $fields[] = new MHiddenField('cOutCourseUnitId', $cOutCourseUnitId);
        $fields[] = new MHiddenField('cOutCourseTurnId', $cOutCourseTurnId);

        $cOutCourseName = new MTextField('cOutCourseName', $this->cOutCourseName->value, '', FIELD_DESCRIPTION_SIZE);
        $cOutCourseName->setJsHint(_M('Enter the curriculum course name',$module));
        $cOutCourseName->setReadOnly(true);

        $cOutCourseVersion = new MTextField('cOutCourseVersion', $this->cOutCourseVersion->value, '', 5);
        $cOutCourseVersion->setJsHint(_M('Enter the curriculum course version',$module));
        //$cOutCourseVersion->setReadOnly(true);

        $cOutCourseUnitDescription = new MTextField('cOutCourseUnitDescription', $this->cOutCourseUnitDescription->value, '', 8);
        $cOutCourseUnitDescription->setJsHint(_M('Curriculum course unit description',$module));
        $cOutCourseUnitDescription->setReadOnly(true);

        $cOutCourseTurnDescription = new MTextField('cOutCourseTurnDescription', $this->cOutCourseTurnDescription->value, '', 8);
        $cOutCourseTurnDescription->setJsHint(_M('Curriculum course unit description',$module));
        $cOutCourseTurnDescription->setReadOnly(true);

        $hctcOutCourse = new MHContainer('hctcOutCourse', array($cOutCourseOutLabel, $cOutCourseId, $cOutCourseName, $cOutCourseVersion, $cOutCourseUnitDescription, $cOutCourseTurnDescription));
        $hctcOutCourse->setShowLabel(true);
        //$fields[]  = $hctcOutCourse;

        $cOutCurricularComponentLabel = new MText('cOutCurricularComponentLabel', _M('Curricular component id',$module) . ':');
        $cOutCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cOutCurricularComponentLabel->setClass('m-caption m-caption-required');

        $cOutCurricularComponentId = new MLookupTextField('cOutCurricularComponentId', $this->cOutCurricularComponentId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cOutCurricularComponentVersion,cOutCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $validators[] = new MRequiredValidator('cOutCurricularComponentId', _M('Curricular component out id',$module));

        $cOutCurricularComponentVersion = new MTextField('cOutCurricularComponentVersion', $this->cOutCurricularComponentVersion->value, '', FIELD_ID_SIZE);
        $cOutCurricularComponentVersion->setJsHint(_M('Enter the curriculum curricular component version',$module));
        $cOutCurricularComponentVersion->setReadOnly(true);

        $cOutCurricularComponentName = new MTextField('cOutCurricularComponentName', $this->cOutCurricularComponentName->value, '', FIELD_DESCRIPTION_SIZE);
        $cOutCurricularComponentName->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $cOutCurricularComponentName->setReadOnly(true);

        $hctcOutCurricularComponent = new MHContainer('hctcOutCurricularComponent', array($cOutCurricularComponentLabel, $cOutCurricularComponentId, $cOutCurricularComponentVersion, $cOutCurricularComponentName));
        $hctcOutCurricularComponent->setShowLabel(true);
        //$fields[]  = $hctcOutCurricularComponent;

        $separator = new Separator('');

        $fields[]  = new MBaseGroup('bgOut', _M('Out', $module), array($separator, $cOutCourseInstruction, $separator, $hctcOutCourse, $separator, $hctcOutCurricularComponent, $separator));

        //courseIn
        $cInCourseInstruction = new MTextLabel('textLabel1', _M('Select here the curricular component that dont will can are would course if the "Out" curricular component is coursed',$module).'.');

        $cCourseInLabel = new MText('cCourseInLabel', _M('Course id',$module) . ':');
        $cCourseInLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cCourseInLabel->setClass('m-caption m-caption-required');

        $cInCourseId = new MLookupTextField('cInCourseId', $this->cInCourseId->value, '', FIELD_ID_SIZE, null, null, 'cInCourseVersion, cInCourseName, cInCourseUnitId, cInCourseUnitDescription, cInCourseTurnId, cInCourseTurnDescription', $module, 'CourseOccurrence', null, null, true);
        $validators[] = new MRequiredValidator('cInCourseId', _M('Course in id',$module));

        $fields[] = new MHiddenField('cInCourseUnitId', $cInCourseUnitId);
        $fields[] = new MHiddenField('cInCourseTurnId', $cInCourseTurnId);

        $cInCourseName = new MTextField('cInCourseName', $this->cInCourseName->value, '', FIELD_DESCRIPTION_SIZE);
        $cInCourseName->setJsHint(_M('Enter the curriculum course name',$module));
        $cInCourseName->setReadOnly(true);

        $cInCourseVersion = new MTextField('cInCourseVersion', $this->cInCourseVersion->value, '', 5);
        $cInCourseVersion->setJsHint(_M('Enter the curriculum course version',$module));
        //$cInCourseVersion->setReadOnly(true);

        $cInCourseUnitDescription = new MTextField('cInCourseUnitDescription', $this->cInCourseUnitDescription->value, '', 8);
        $cInCourseUnitDescription->setJsHint(_M('Curriculum course unit description',$module));
        $cInCourseUnitDescription->setReadOnly(true);

        $cInCourseTurnDescription = new MTextField('cInCourseTurnDescription', $this->cInCourseTurnDescription->value, '', 8);
        $cInCourseTurnDescription->setJsHint(_M('Curriculum course unit description',$module));
        $cInCourseTurnDescription->setReadOnly(true);

        $hctcInCourse = new MHContainer('hctcInCourse', array($cCourseInLabel, $cInCourseId, $cInCourseName, $cInCourseVersion, $cInCourseUnitDescription, $cInCourseTurnDescription));
        $hctcOutCourse->setShowLabel(true);
        //$fields[]  = $hctcInCourse;

        $cInCurricularComponentLabel = new MText('cInCurricularComponentLabel', _M('Curricular component id',$module) . ':');
        $cInCurricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cInCurricularComponentLabel->setClass('m-caption m-caption-required');

        $cInCurricularComponentId = new MLookupTextField('cInCurricularComponentId', $this->cInCurricularComponentId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cInCurricularComponentVersion, cInCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $validators[] = new MRequiredValidator('cInCurricularComponentId', _M('Curricular component in id',$module));

        $cInCurricularComponentVersion = new MTextField('cInCurricularComponentVersion', $this->cInCurricularComponentVersion->value, '', FIELD_ID_SIZE);
        $cInCurricularComponentVersion->setJsHint(_M('Enter the curriculum curricular component version',$module));
        $cInCurricularComponentVersion->setReadOnly(true);

        $cInCurricularComponentName = new MTextField('cInCurricularComponentName', $this->cInCurricularComponentName->value, '', FIELD_DESCRIPTION_SIZE);
        $cInCurricularComponentName->setJsHint(_M('Enter the curriculum curricular component name',$module));
        $cInCurricularComponentName->setReadOnly(true);

        $hctcInCurricularComponent = new MHContainer('hctcInCurricularComponent', array($cInCurricularComponentLabel, $cInCurricularComponentId, $cInCurricularComponentVersion, $cInCurricularComponentName));
        $hctcInCurricularComponent->setShowLabel(true);
        //$fields[]  = $hctcInCurricularComponent;

        $fields[] = new Separator('');

        $fields[]  = new MBaseGroup('bgIn', _M('In', $module), array($separator, $cInCourseInstruction, $separator, $hctcInCourse, $separator, $hctcInCurricularComponent, $separator));

        $fields[] = new Separator('');

        $this->setFields($fields);
        //$this->setValidators($validators);

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();

        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'curriculumOutId' => MIOLO::_request('curriculumOutId'),
                        'curriculumInId' =>  MIOLO::_request('curriculumInId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
//         $opts1   = array('curriculumOutIdS' => $data->curriculumOutId,
//                         'curriculumInIdS' => $data->curriculumInId);
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $curriculumOutId = MIOLO::_request('curriculumOutId');
        $curriculumInId  = MIOLO::_request('curriculumInId');

        $business = $MIOLO->getBusiness($module, 'BusCurriculumConcurrence');
        $ok = $business->deleteCurriculumConcurrence($curriculumOutId, $curriculumInId);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCurriculumConcurrence');
        
        if ( ( strlen((string)$data->curriculumOutId) > 0 ) &&
             ( strlen((string)$data->curriculumInId) > 0 ) )
        {
            if ( $function == 'update' )
            {
                $ok  = $business->updateCurriculumConcurrence($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok  = $business->insertCurriculumConcurrence($data);
                $msg = MSG_RECORD_INSERTED;
            }
            $currMessage = '';
        }
        else
        {
            $currMessage = _M('Impossible to find the correct curriculum for', $module) . ' ' . $this->cOutCurricularComponentId->value . '(' . $this->cOutCurricularComponentVersion->value . ') ' . _M('or', $module) . ' ' . $this->cInCurricularComponentId->value . '(' . $this->cInCurricularComponentVersion->value . ').';        
            $ok = false;
        }
        
        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('curriculumOutIdS' => $data->curriculumOutId,
                          'curriculumInIdS' => $data->curriculumInId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module) . ' ' . $currMessage;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = new AcdCurriculumConcurrence();

        $businessCurriculum = $MIOLO->getBusiness($module,'BusCurriculum');

        //curriculumOut
        $filters1->courseId                   = $this->cOutCourseId->value;
        $filters1->courseVersion              = $this->cOutCourseVersion->value;
        $filters1->unitId                     = $this->cOutCourseUnitId->value;
        $filters1->turnId                     = $this->cOutCourseTurnId->value;
        $filters1->curricularComponentId      = $this->cOutCurricularComponentId->value;
        $filters1->curricularComponentVersion = $this->cOutCurricularComponentVersion->value;

        $searchCurriculum   = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $data->curriculumOutId = $searchCurriculum[0][0];
        }


        //curriculumIn
        $filters2->courseId                   = $this->cInCourseId->value;
        $filters2->courseVersion              = $this->cInCourseVersion->value;
        $filters2->unitId                     = $this->cInCourseUnitId->value;
        $filters2->turnId                     = $this->cInCourseTurnId->value;
        $filters2->curricularComponentId      = $this->cInCurricularComponentId->value;
        $filters2->curricularComponentVersion = $this->cInCurricularComponentVersion->value;

        $searchCurriculum1   = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchCurriculum1) == 1 )
        {
            $data->curriculumInId = $searchCurriculum1[0][0];
        }

        return $data;
    }

}

?>
