<?php

/**
 * GenerateMultipleDegree form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleDegree extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Generate multiple degree', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('degreeId', $degreeId);

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;

        $periodId = $_GET['periodId'] ? $_GET['periodId'] : $_POST['periodId'];
        $fields[] = new MTextLabel('periodId', $periodId, _M('Period',$module));
        $fields[] = new MHiddenField('periodId', $periodId);
        $fields[] = new Separator('');

        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $validators[]   = new MRequiredValidator('description');
        $description->setJsHint(_M('Enter the description',$module));
        $fields[] = $description;

        $limitDate = new MCalendarField('limitDate', $this->getFormValue('limitDate', $data->limitDate), _M('Limit date',$module), FIELD_DATE_SIZE);
        $limitDate->setJsHint(_M('Enter the limit date',$module));
        $limitDate->setClass('m-caption m-caption-required');
        $validators[] = new MDATEDMYValidator('limitDate');
        $validators[] = new MRequiredValidator('limitDate');
        $fields[] = $limitDate;

        $finalDate = new MCalendarField('finalDate', $this->getFormValue('finalDate', $data->limitDate), _M('Final date',$module), FIELD_DATE_SIZE);
        $finalDate->setJsHint(_M('Enter the final date',$module));
        $finalDate->setClass('m-caption m-caption-required');
        $validators[] = new MDATEDMYValidator('finalDate');
        $validators[] = new MRequiredValidator('finalDate');
        $fields[] = $finalDate;


        $degreeNumberOpts = array(1=>'1', 2=>'2', 3=>'3', 4=>'4', 5=>'5', 6=>'6', 7=>'7', 8=>'8', 9=>'9', 10=>'10', 11=>'11', 12=>'12', 13=>'13', 14=>'14', 15=>'15', 16=>'16', 17=>'17', 18=>'18', 19=>'19', 20=>'20');

        $degreeNumber = new MSelection('degreeNumber', $this->getFormValue('degreeNumber', $data->degreeNumber), _M('Degree number', $module), $degreeNumberOpts);
        $validators[] = new MIntegerValidator('degreeNumber', '', 'required');
        $fields[]     = $degreeNumber;
        
        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight ? $data->weight : 1), _M('Weight',$module), 10);
        $weight->setJsHint(_M('Enter the weight',$module));
        $fields[] = $weight;
        $validators[] = new MRequiredValidator('weight', _M('Weight',$module));

        $conceptLabel = new MText('conceptLabel', _M('Concept',$module));
        $conceptLabel->setWidth(FIELD_LABEL_SIZE);
        $conceptLabel->setClass('m-caption m-caption-required');

        $concept = $this->GetFormValue('concept',$data->concept);
        if(!isset($concept))
        {
            $concept = 'f';
        }
        $concept = new MRadioButtonGroup('concept', '', SAGU::listYesNo(1), $concept, null, 'horizontal');
        $concept->SetShowLabel(false);

        $hctConcept = new MHContainer('hctConcept', array($conceptLabel, $concept));
        $fields[]  = $hctConcept;


        $isSubstitutiveLabel = new MText('isSubstitutive', _M('Is substitutive ?',$module) . ':');
        $isSubstitutiveLabel->setWidth(FIELD_CONTAINER_SIZE); 
        $isSubstitutiveLabel->setClass('m-caption m-caption-required');

        $isSubstitutive = $this->GetFormValue('isSubstitutive',$data->isSubstitutive);
        $isSubstitutive = new MRadioButtonGroup('isSubstitutive', '', SAGU::listYesNo(1), $isSubstitutive ? $isSubstitutive : DB_FALSE, null, 'horizontal');
        $isSubstitutive->SetShowLabel(false);

        $hctIsSubstitutive = new MHContainer('hctIsSubstitutive', array($isSubstitutiveLabel, $isSubstitutive));
        $fields[]  = $hctIsSubstitutive;

        $maxNoteLabel =  new MText('maxNoteLabel', _M('Max note',$module) . ':');
        $maxNoteLabel->setWidth(FIELD_CONTAINER_SIZE);
        $maxNoteLabel->setClass('m-caption m-caption-required');

        $maxNote      = new MTextField('maxNote', $this->getFormValue('maxNote', $data->maxNote), '', 10);
        $validators[] = new MRequiredValidator('maxNote', _M('Max note', $module));

        $maxNoteHint  = new MHint('maxNoteHint', _M('The greatest note that some pupil can be retrived.', $module));

        $hctMaxNote   = new MHContainer('hctMaxNote', array($maxNoteLabel, $maxNote, $maxNoteHint));
        $fields[]     = $hctMaxNote;

        $fields[] = new Separator('');

        $fields[]     = new MButton('btnGenerate', _M('Generate', $module));

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $action          = MIOLO::getCurrentAction();

        $data            = $this->getTypesData();
        $business        = $MIOLO->getBusiness($module, 'BusDegree');
        $business2       = $MIOLO->getBusiness($module, 'BusGenerateMultipleDegree');

        $learningPeriods = unserialize(urldecode(stripslashes(MIOLO::_request('learningPeriods'))));
        $periodId        = $this->getFormValue('periodId');

        $x         = 0;

        $business2->beginTransaction();

        foreach ( $learningPeriods as $value )
        {
            $data->learningPeriodId  = $value;

            $data->description       =  $this->description->value;

            $ok  = $business->insertDegree($data);

            if ( $ok )
            {
                $x++;
            }
        }

        $business2->commit();

        $msg = _M('@1 records inserted', $module, $x);

        if ( $x > 0 )
        {
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleDegreeCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $opts['periodId']        = $periodId;
            $opts['learningPeriods'] = urlencode(serialize($learningPeriods));

            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdDegree();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    } 
}

?>
