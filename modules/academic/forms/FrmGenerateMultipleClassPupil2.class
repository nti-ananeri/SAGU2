<?php

/**
 * Complementary Activities form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 12/03/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate multiple complementary activities
 **/
class FrmGenerateMultipleClassPupil2 extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[]       = $toolBar;

        $courseId       = $MIOLO->_request('courseId');
        $courseVersion  = $MIOLO->_request('courseVersion');
        $turnId         = $MIOLO->_request('turnId');
        $unitId         = $MIOLO->_request('unitId');

        $businessCourse = $this->manager->getBusiness($module,'BusCourse');

        $businessTurn   = $this->manager->getBusiness('basic','BusTurn');
        $businessUnit   = $this->manager->getBusiness('basic','BusUnit');

        $courseData     = $businessCourse->getCourse($courseId);
        $turnData       = $businessTurn->getTurn($turnId);
        $unitData       = $businessUnit->getUnit($unitId);

        $fields[]  = new MTextLabel('lbcourseId', $courseId . ' - ' . $courseData->shortName, _M('Course id', $module));

        $fields[]  = new MTextLabel('lbcourseVersion', $courseVersion, _M('Course version', $module));
        $fields[]  = new MTextLabel('lbturnId', $turnId . ' - ' . $turnData->description, _M('Turn id', $module));
        $fields[]  = new MTextLabel('lbunitId', $unitId . ' - ' . $unitData->description, _M('Unit id', $module));

        $fields[]  = new MHiddenField('courseId', $courseId);
        $fields[]  = new MHiddenField('courseVersion', $courseVersion);
        $fields[]  = new MHiddenField('turnId', $turnId);
        $fields[]  = new MHiddenField('unitId', $unitId);

        //Class
        $classLabel   = new MText('classLabel', _M('Class',$module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        $classLabel->setClass('m-caption m-caption-required');

        $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId'), true);
        $classId->setJsHint(_M('Enter the class id',$module));

        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Class name',$module));

        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;
        $validators[] = new MRequiredValidator('classId', _M('Class', $module), 'required');
        //end class

        $beginDate    = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date', $module));
        $fields[]     = $beginDate;
        $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Begin date',$module), 'required'));


        $endDate    = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the begin date', $module));
        $fields[]     = $endDate;
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('End date',$module), 'optional'));

        $fields[] = new Separator('');

        $fields[] = new MButton('btnGenerate', _M('Generate', $module));

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $business         = $MIOLO->getBusiness($module, 'BusClassPupil');

        $data             = $this->getTypesData();

        $contractIds = unserialize(urldecode(stripslashes(MIOLO::_request('contractIds'))));

        $x = 0;

        $business->beginTransaction();

        foreach ( $contractIds as $contractId )
        {
            unset($filters1);
            unset($searchPupil);

            $filters1->classId    = $data->classId;
            $filters1->beginDate  = $data->beginDate;
            $filters1->contractId = $contractId;

            $searchPupil          = $business->searchClassPupil($filters1);

            $filters1->endDate    = $data->endDate;

            if ( is_array($searchPupil) && (count($searchPupil) > 0) )
            {
                //Update
                $ok = $business->updateClassPupil($filters1);
            }
            else
            {
                //Insert
                $ok = $business->insertClassPupil($filters1);
            }

            if ( $ok == true )
            {
                $x++;
            }
            else
            {
                $ok = false;
                break;
            }
        }

        if ( $ok == true )
        {
            $business->commit();

            $msg = _M('@1 records inserted', $module, $x);

            if ( $x > 0 )
            {
                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleClassPupil';
                $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts['courseId']       = $data->courseId;
                $opts['courseVersion']  = $data->courseVersion;
                $opts['turnId']         = $data->turnId;
                $opts['unitId']         = $data->unitId;
                $opts['contractIds']    = urlencode(serialize($contractIds));

                $msg  = _M('Error executing requested operation. Verify if the dates is correct', $module) . '.';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }

    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdClassPupil();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }
}

?>
