<?php

/**
 *
 * This file handles the connection and actions for acdSchedule table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdSchedule table
 */
class FrmScheduleSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert(_M('Schedule', $module), $this->home, 'schedule-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        
        $groupLabelS = new MText('groupLabelS', _M('Offered curricular component', $module) . ':');
        $groupLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $groupLabelS;

        $groupIdS = new MLookupTextField('groupIdS', $this->groupIdS->value, _M('Offered curricular component id',$module), FIELD_ID_SIZE, null, null, 'groupGroupNameS', $module, 'Group', null, null, true);
        $flds[] = $groupIdS;
        $validators[] = new MIntegerValidator('groupIdS', '', 'optional');

        $groupGroupNameS = new MTextField('groupGroupNameS', $this->groupGroupNameS->value, _M('Offered curricular component name',$module), FIELD_DESCRIPTION_SIZE);
        $groupGroupNameS->setJsHint(_M('Enter the offered curricular component name',$module));
        $flds[] = $groupGroupNameS;
        
        $hctGroupS = new MHContainer('hctGroupS', $flds);
        $hctGroupS->setShowLabel(false);
        $fields[] = $hctGroupS;
        unset($flds);

        $business = $MIOLO->getBusiness('basic','BusUnit');
        $opts     = $business->listUnit();
        $unitIdS  = new MComboBox('unitIdS', $this->unitIdS->value, _M('Unit id',$module), $opts);
        $fields[] = $unitIdS;

        $business   = $MIOLO->getBusiness('basic','BusWeekDay');
        $opts       = $business->listWeekDay();
        $weekDayIdS = new MComboBox('weekDayIdS', $this->weekDayIdS->value, _M('Week day id',$module), $opts);
        $fields[]   = $weekDayIdS;

        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Learning period', $module));
        $learningPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $learningPeriodLabelS;
        
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->learningPeriodIdS->value, _M('Learning period id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo,courseIdS,limbo,limbo,limbo,learningPeriodDescriptionS', $module, 'LearningPeriod', null, null, true);
        $flds[] = $learningPeriodIdS;

        $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->learningPeriodDescriptionS->value, _M('Learning period description',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescriptionS->setJsHint(_M('Enter the learning period description',$module));
        $flds[] = $learningPeriodDescriptionS;
        
        $hctLearningPeriodS = new MHContainer('hctLearningPeriodS', $flds);
        $hctLearningPeriodS->setShowLabel(false);
        $fields[] = $hctLearningPeriodS;
        
        $fields[] = new MHiddenField('courseIdS', $data->courseIdS);

//         $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date', $module), 13);
//         $beginDateS->setJsHint(_M('Enter the begin date',$module));
//         $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
//         $fields[] = $beginDateS;
//  
//         $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('End date', $module), 13);
//         $endDateS->setJsHint(_M('Enter the end date',$module));
//         $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
//         $fields[] = $endDateS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->scheduleId                  = $this->scheduleIdS->value;
        $filters->groupId                     = $this->groupIdS->value;
        $filters->groupGroupName              = $this->groupGroupNameS->value;
        $filters->subGroup                    = $this->subGroupS->value;
        $filters->turnId                      = $this->turnIdS->value;
        $filters->unitId                      = $this->unitIdS->value;
        $filters->weekDayId                   = $this->weekDayIdS->value;
        $filters->physicalResourceId          = $this->physicalResourceIdS->value;
        $filters->physicalResourceVersion     = $this->physicalResourceVersionS->value;
        $filters->physicalResourceDescription = $this->physicalResourceDescriptionS->value;
        $filters->numCredits                  = $this->numCreditsS->value;
        $filters->discounting                 = $this->discountingS->value;
        $filters->beginDate                   = $this->beginDateS->value;
        $filters->endDate                     = $this->endDateS->value;
        $filters->numberHoursLessons          = $this->numberHoursLessonsS->value;
        $filters->weight                      = $this->weightS->value;
//         $filters->operationId                 = $this->operationIdS->value;
//         $filters->operationDescription        = $this->operationDescriptionS->value;
         $filters->leaderId                   = $this->leaderIdS->value;
         $filters->leaderName                 = $this->leaderNameS->value;
         $filters->learningPeriodId           = $this->learningPeriodIdS->value;


        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusSchedule');
        $data = $business->searchSchedule($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;


        if (strlen((string)$this->courseIdS->value) > 0)
        {
            $busCourse = $MIOLO->getBusiness($module, 'BusCourse');
            $courseData = $busCourse->getCourse($this->courseIdS->value);
            $grdResults->setTitle(_M('Course', $module) . ': ' . $courseData->courseId . ' - ' . $courseData->name);
        }

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.scheduleIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
