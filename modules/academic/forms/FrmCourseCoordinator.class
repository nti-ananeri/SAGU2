<?php

/**
 * Course coordinator form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course coordinator
 **/
class FrmCourseCoordinator extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $courseId = $_GET['courseId'] ? $_GET['courseId'] : $_POST['courseId'];
            $courseVersion = $_GET['courseVersion'] ? $_GET['courseVersion'] : $_POST['courseVersion'];
            $turnId   = $_GET['turnId'] ? $_GET['turnId'] : $_POST['turnId'];
            $unitId   = $_GET['unitId'] ? $_GET['unitId'] : $_POST['unitId'];
            $coordinatorId = $_GET['coordinatorId'] ? $_GET['coordinatorId'] : $_POST['coordinatorId'];

            $business = $MIOLO->getBusiness($module,'BusCourseCoordinator');
            $data = $business->getCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId);

            $courseName    = $this->getFormValue('courseName', $data->courseName);
            $fields[] = new MTextLabel('courseId', $courseId . ' - ' . $courseName, _M('Course id',$module));
            $fields[] = new MHiddenField('courseId', $courseId);
            $fields[]      = new MHiddenField('courseName', $courseName);

            $fields[]      = new MTextLabel('courseVersion', $courseVersion, _M('Course version',$module));
            $fields[]      = new MHiddenField('courseVersion', $courseVersion);

            $turnDescription    = $this->getFormValue('turnDescription', $data->turnDescription);
            $fields[] = new MTextLabel('turnId', $turnId . ' - ' . $turnDescription, _M('Turn id',$module));
            $fields[] = new MHiddenField('turnId', $turnId);
            $fields[]      = new MHiddenField('turnDescription', $turnDescription);

            $unitDescription    = $this->getFormValue('unitDescription', $data->unitDescription);
            $fields[] = new MTextLabel('unitId', $unitId . ' - ' . $unitDescription, _M('Unit id',$module));
            $fields[] = new MHiddenField('unitId', $unitId);
            $fields[]      = new MHiddenField('unitDescription', $unitDescription);

            $coordinatorName    = $this->getFormValue('coordinatorName', $data->coordinatorName);
            $fields[]      = new MTextLabel('coordinatorId', $coordinatorId . ' - ' . $coordinatorName, _M('Coordinator id',$module));
            $fields[]      = new MHiddenField('coordinatorId', $coordinatorId);
            $fields[]      = new MHiddenField('coordinatorName', $coordinatorName);

            $this->page->onLoad('document.' . $this->name . '.beginDate.focus();');
        }
        else
        {
            //Course
            $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
            $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
            $courseLabel->setClass('m-caption m-caption-required');
    
            $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                    'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
            $courseId->setJsHint(_M('Enter the course code',$module));
            $validators[] = new MRequiredValidator('courseId', _M('Course',$module));
    
            $fields[] = new MHiddenField('limbo', $limbo);
    
            $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Course name',$module));

            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
            //$courseVersion->setReadOnly(true);
            //$validators[] = new MRequiredValidator('courseVersion', _M('Course version', $module));
            //$fields[] = $courseVersion;
    
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]  = $hctCourse;
    
            //Turn
            $turnLabel = new MText('turnLabel', _M('Turn',$module) . ':');
            $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
            $turnLabel->setClass('m-caption m-caption-required');

            $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
            $turnId->setReadOnly(true);
            $turnId->setJsHint(_M('Turn id',$module));
            $validators[] = new MRequiredValidator('turnId', _M('Turn', $module));

            $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
            $turnDescription->setReadOnly(true);
            $turnDescription->setJsHint(_M('Turn description',$module));
 
            $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
            $hctTurn->setShowLabel(true);
            $fields[]  = $hctTurn;

            //Unit
            $unitLabel = new MText('unitLabel', _M('Unit',$module) . ':');
            $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
            $unitLabel->setClass('m-caption m-caption-required');

            $unitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', FIELD_ID_SIZE);
            $unitId->setReadOnly(true);
            $unitId->setJsHint(_M('Unit id',$module));
            $validators[] = new MRequiredValidator('unitId', _M('Unit', $module));

            $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
            $unitDescription->setReadOnly(true);
            $unitDescription->setJsHint(_M('Unit description',$module));

            $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
            $hctUnit->setShowLabel(true);
            $fields[]  = $hctUnit;

           //Coordinator
            $coordinatorLabel = new MText('coordinatorLabel', _M('Coordinator',$module) . ':');
            $coordinatorLabel->setWidth(FIELD_CONTAINER_SIZE);
            $coordinatorLabel->setClass('m-caption m-caption-required');

//            $coordinatorId = new MLookupTextField('coordinatorId', $this->getFormValue('coordinatorId', $data->coordinatorId), '', 10, null, null, 'coordinatorName', 'basic', 'PhysicalPerson', null, null, true);
            $coordinatorId = new MLookupTextField('coordinatorId', $this->getFormValue('coordinatorId', $data->coordinatorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'coordinatorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
            $coordinatorId->setJsHint(_M('Coordinator id',$module));
//             $validators[] = new MRequiredValidator('coordinatorId');
            $validators[] = new MIntegerValidator('coordinatorId', _M('Coordinator',$module), 'required');

            $coordinatorName = new MTextField('coordinatorName', $this->getFormValue('coordinatorName', $data->coordinatorName), '', FIELD_DESCRIPTION_SIZE);
            $coordinatorName->setJsHint(_M('Coordinator name',$module));
            $coordinatorName->setReadOnly(true);

            $hctCoordinator = new MHContainer('hctCoordinator', array($coordinatorLabel, $coordinatorId, $coordinatorName));
            $hctCoordinator->setShowLabel(true);
            $fields[]  = $hctCoordinator;

            $this->page->onLoad('document.' . $this->name . '.courseId.focus();');
        }

        $opts = array (
                        '1' => _M('One',$module),
                        '2' => _M('Thwo',$module),
                        '3' => _M('Three',$module),
                        '4' => _M('Four',$module),
                        '5' => _M('Five',$module),
                        '6' => _M('Six',$module),
                        '7' => _M('Seven',$module),
                        '8' => _M('Eight',$module),
                        '9' => _M('Nine',$module),
                        '10' => _M('Ten',$module)
                      );

        $level = new MComboBox('level', $this->getFormValue('level', $data->level), _M('Hierarchic level',$module), $opts);
        $level->setJsHint(_M('Enter the level',$module));
        $fields[] = $level;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'optional');
        $fields[] = $beginDate;

        if ( in_array($function,array('update','delete')) )
        {
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
            $endDate->setJsHint(_M('Enter the end date',$module));
            $validators[] = new MDATEDMYValidator('endDate', '', 'optional');
            $fields[] = $endDate;
        }

        $isSendEmailLabel = new MText('isSendEmailLabel', _M('Send e-mail',$module) . '?');
        $isSendEmailLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isSendEmailLabel->setClass('m-caption m-caption-required');

        $isSendEmailOptions = array( 
                                     array(_M('Yes', $module), 't'),
                                     array(_M('No', $module), 'f')
                                   );
        
        $isSendEmail = strlen((string)$this->getFormValue('isSendEmail', $data->isSendEmail)) > 0 ? $this->getFormValue('isSendEmail', $data->isSendEmail) : DB_FALSE;
        $isSendEmail = new MRadioButtonGroup('isSendEmail', null, SAGU::listTrueFalse(1), $isSendEmail, null, 'horizontal');
        $isSendEmail->setShowLabel(false);

        $hctIsSendEmail = new MHContainer('hctIsSendEmail', array($isSendEmailLabel, $isSendEmail));
        $fields[] = $hctIsSendEmail;

        $email = new MTextField('email', $this->getFormValue('email', $data->email), _M('E-mail',$module), 30);
        $email->setJsHint(_M('Enter the e-mail',$module));
        $fields[] = $email;

        $expirationLevel = new MTextField('expirationLevel', $this->getFormValue('expirationLevel', $data->expirationLevel), _M('Expiration level',$module), 12, _M('hours:minutes',$module));
        $expirationLevel->setJsHint(_M('Enter the expiration level',$module));
        $fields[] = $expirationLevel;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        /*
        $this->courseId->value        = $this->getFormValue('courseIdS', '');
        $this->courseVersion->value   = $this->getFormValue('courseVersionS', '');
        $this->turnId->value          = $this->getFormValue('turnIdS', '');
        $this->unitId->value          = $this->getFormValue('unitIdS', '');
        $this->coordinatorId->value   = $this->getFormValue('coordinatorIdS', '');
        $this->beginDate->value       = $this->getFormValue('beginDateS', '');
        $this->endDate->value         = $this->getFormValue('endDateS', '');
        $this->level->value           = $this->getFormValue('levelS', '');
        $this->isSendEmail->value     = $this->getFormValue('isSendEmailS', '');
        $this->email->value           = $this->getFormValue('emailS', '');
        $this->expirationLevel->value = $this->getFormValue('expirationLevelS', '');
        $this->userName->value        = $this->getFormValue('userNameS', '');
        $this->dateTime->value        = $this->getFormValue('dateTimeS', '');
        $this->ipAddress->value       = $this->getFormValue('ipAddressS', '');
        */

        /*
        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'      => 'delete',
                        'courseId'      => MIOLO::_request('courseId'),
                        'courseVersion' => MIOLO::_request('courseVersion'),
                        'turnId'        => MIOLO::_request('turnId'),
                        'unitId'        => MIOLO::_request('unitId'),
                        'coordinatorId' => MIOLO::_request('coordinatorId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('courseIdS'      => MIOLO::_request('courseId'),
                        'courseVersionS' => MIOLO::_request('courseVersion'),
                        'turnIdS'        => MIOLO::_request('turnId'),
                        'unitIdS'        => MIOLO::_request('unitId'),
                        'coordinatorIdS' => MIOLO::_request('coordinatorId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCourseCoordinator');
        $ok = $business->deleteCourseCoordinator($this->courseId->value, $this->courseVersion->value, $this->turnId->value, $this->unitId->value, $this->coordinatorId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCourseCoordinator');

        if ( $function == 'update' )
        {
            $ok  = $business->updateCourseCoordinator($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCourseCoordinator($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('courseIdS'      => $data->courseId,
                          'courseVersionS' => $data->courseVersion,
                          'turnIdS'        => $data->turnId,
                          'unitIdS'        => $data->unitId,
                          'coordinatorIdS' => $data->coordinatorId);
            
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdCourseCoordinator();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    }

}

?>
