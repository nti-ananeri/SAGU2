<?php

/**
 * Masters document form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmMastersDocument extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Masters', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Masters', $this->home, 'masters-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[]  = $contractId;

        $fields[] = new MSeparator();

        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $this->courseId->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName'), $module, 'CourseVersion', null, array('courseId' => 'courseId', 'formationLevelId' => 'formationLevelId'), true);
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));
        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName = new MTextField('courseName',$this->getFormValue('courseName', $this->courseName->value), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Learning period',$module) . ':');
        $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]                = $learningPeriodLabel;

//         $formationLevelId = new MHiddenField('formationLevelId', GRADUATE_FORMATION_LEVEL_ID);
//         $fields[] = $formationLevelId;

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('limbo', 'courseId', 'courseVersion', 'limbo', 'unitId', 'learningPeriodDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo','limbo', 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'formationLevelId' => 'formationLevelId'), true);
        $learningPeriodId->setJsHint(_M('Enter the learning period code',$module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Learning period',$module), 'required');
        $flds[]           = $learningPeriodId;

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescription->setJsHint(_M('Learning period description',$module));
        $learningPeriodDescription->setReadOnly(true);
        $flds[]                    = $learningPeriodDescription;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        unset($flds);
        $fields[]          = $hctLearningPeriod;

        $formationLevelId = new MHiddenField('formationLevelId', MASTER_FORMATION_LEVEL_ID);
        $fields[] = $formationLevelId;
 
        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), _M('Unit id',$module), $business->listUnit());
        $unitId->setJsHint(_M('Enter the unit code',$module));
        $validators[] = new MRequiredValidator('unitId', _M('Unit id',$module));
        $fields[]     = $unitId;

        $moneyValueLabel = new MText('moneyValueLabel', _M('Value',$module) . ':');
        $moneyValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $moneyValueLabel;

        $moneyValue      = new MTextField('moneyValue', '', '', 10);
        $moneyValue->setJsHint(_M('Enter the value',$module));
        $flds[]       = $moneyValue;
        $validators[] = new MFloatValidator('moneyValue');

        $hctValue = new MHContainer('hctValue', $flds);
        $hctValue->setShowLabel(false);
        $fields[]  = $hctValue;
        unset($flds);

        $parcelsLabel = new MText('parcelsLabel', _M('Parcels',$module) . ':');
        $parcelsLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $parcelsLabel;

        $parcels      = new MTextField('parcels', '', '', 10);
        $parcels->setJsHint(_M('Enter the parcels',$module));
        $flds[]       = $parcels;

        $hctParcels = new MHContainer('hctParcels', $flds);
        $hctParcels->setShowLabel(false);
        $fields[]   = $hctParcels;
        unset($flds);      

        $durationLabel = new MText('durationLabel', _M('Duration',$module) . ':');
        $durationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $durationLabel;      

        $durationMonth = new MSelection('durationMonth', $this->getFormValue('durationMonth',$currDate['mon']), _M('Duration',$module), SAGU::listMonths());
        $flds[]   = $durationMonth; 

        $middleLabel = new MText('middleLabel', _M('Of the',$module));
        $flds[]       = $middleLabel; 

        $durationYear = new MSelection('durationYear', $this->getFormValue('durationYear',$currDate['mon']), _M('Duration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]     = $durationYear;

        $middleLabel1 = new MText('middleLabel1', _M('To',$module));
        $flds[]    = $middleLabel1; 

        $durationMonth1 = new MSelection('durationMonth1', $this->getFormValue('durationMonth1',$currDate['mon']), _M('Duration',$module), SAGU::listMonths());
        $flds[] = $durationMonth1; 

        $middleLabel2 = new MText('middleLabel2', _M('Of the',$module));
        $flds[]    = $middleLabel2; 

        $durationYear1 = new MSelection('durationYear1', $this->getFormValue('durationYear1',$currDate['mon']), _M('Duration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]     = $durationYear1;

        $hctDuration = new MHContainer('hctDuration', $flds);
        $hctDuration->setShowLabel(false);
        $fields[]  = $hctDuration;
        unset($flds);  
 
        $expirationLabel = new MText('expirationLabel', _M('Expiration of the first parcel',$module) . ':');
        $expirationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $expirationLabel;      

        $expirationMonth = new MSelection('expirationMonth', $this->getFormValue('expirationMonth',$currDate['mon']), _M('Expiration',$module), SAGU::listMonths());
        $flds[]     = $expirationMonth;

        $lastLabel = new MText('lastLabel', _M('Of the',$module));
        $flds[]    = $lastLabel; 

        $expirationYear = new MSelection('expirationYear', $this->getFormValue('expirationYear',$currDate['mon']), _M('Expiration',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $flds[] = $expirationYear; 

        $hctExpiration = new MHContainer('hctExpiration', $flds);
        $hctExpiration->setShowLabel(false);
        $fields[]  = $hctExpiration;
        unset($flds);

        $personLabel = new MText('personLabel', _M('Person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $personLabel;

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('personName'), 'basic', 'PhysicalPerson', null, null, true);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $flds[]       = $personId;

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);


        $opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->contractId         = MIOLO::_request('contractId');
        $cd->personId           = MIOLO::_request('personId');
        $cd->courseId           = MIOLO::_request('courseId');
        $cd->courseVersion      = MIOLO::_request('courseVersion');
        $cd->courseName         = MIOLO::_request('courseName');
        $cd->unitId             = MIOLO::_request('unitId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->moneyValue         = MIOLO::_request('moneyValue');
        $cd->parcels            = MIOLO::_request('parcels');
        $cd->durationMonth      = MIOLO::_request('durationMonth');
        $cd->durationYear       = MIOLO::_request('durationYear');
        $cd->durationMonth1     = MIOLO::_request('durationMonth1');
        $cd->durationYear1      = MIOLO::_request('durationYear1');
        $cd->expirationMonth    = MIOLO::_request('expirationMonth');
        $cd->expirationYear     = MIOLO::_request('expirationYear');
        $businessContractDocument = $MIOLO->getBusiness($module, 'BusContractDocument');
        $data = $businessContractDocument->getMastersContractDocument($cd);

        $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
        $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCountry = $MIOLO->getBusiness('basic', 'BusCountry');
        $country         = $businessCountry->getCountry($city->countryId);

        if ( count($data) > 0 )
        {
            $MIOLO->uses('/core/AgataAPI.class');
            $MIOLO->uses('classes/sagu.class', 'basic');

            $api = new AgataAPI;

            set_time_limit(0);

            $api->setParameter('$companyId', $company->companyId);
            $api->setParameter('$companyName', $company->name);
            $api->setParameter('$cnpj', $legalPerson->cnpj);
            $api->setParameter('$companyTypeDescription', $company->companyTypeDescription);
            $api->setParameter('$fakeName', $legalPerson->fakeName);
            $api->setParameter('$companyCity', $city->name);
            $api->setParameter('$companyStateId', $city->stateId);
            $api->setParameter('$companyLocation', $legalPerson->location);
            $api->setParameter('$companyNumber', $legalPerson->number);
            $api->setParameter('$acronym', $company->acronym);
            $api->setParameter('$currencySymbol', $country->currencySymbol);
            $api->setParameter('$courseName', $cd->courseName);
            $api->setParameter('$moneyValue', $cd->moneyValue);
            $api->setParameter('$descriptionMoney', SAGU::getExtensiveNumber(SAGU::formatNumber($cd->moneyValue), 'REAL', 'REAIS'));

            $parcelsValue = SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true);
            $api->setParameter('$parcelsValue', $parcelsValue);
            $api->setParameter('$descriptionParcelsValue', SAGU::getExtensiveNumber(SAGU::formatNumber($parcelsValue), 'REAL', 'REAIS'));

            $api->setParameter('$restParcelsDescription', SAGU::getExtensiveNumber($cd->parcels - 1));
            $api->setParameter('$restParcels', $cd->parcels - 1);

            $api->setParameter('$parcelsDescription', SAGU::extensive($cd->parcels));
            $api->setParameter('$parcels', $cd->parcels);

            $api->setParameter('$durationMonth1', SAGU::getMonth($cd->durationMonth1));
            $api->setParameter('$durationYear1', $cd->durationYear1);
            $api->setParameter('$durationMonth', SAGU::getMonth($cd->durationMonth));
            $api->setParameter('$durationYear', $cd->durationYear);
            $api->setParameter('$expirationMonth', SAGU::getMonth($cd->expirationMonth));
            $api->setParameter('$expirationYear', $cd->expirationYear);

            $api->setLanguage($MIOLO->getConf('i18n.language'));

            $api->setOutputPath(TEMP_DIR . '/contract.sxw');
            $api->setDataArray($data);

            $api->setImageReplace('figura1', SAGUFile::getPhotoPath($company->personId));

            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/mastersContract.sxw'));

            if ( $ok && $cd->fileType == 'pdf' )
            {
                $api->setOutputPath(TEMP_DIR . '/contract.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/contract.sxw');
            }

            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                $api->fileDialog();
            }
        }
    }
}

?>
