<?php

/**
 * GenerateMultiplePeriodEnrollDate form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultiplePeriodEnrollDate extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Generate multiple enroll periods', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('periodEnrollDateId', $this->getFormValue('periodEnrollDateId', $data->periodEnrollDateId));

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;

        $periodId = $this->getFormValue('periodId', $MIOLO->_request('periodId'));
        $fields[] = new MHiddenField('periodId', $periodId);
        $fields[] = new MTextLabel('periodIdLabel', $periodId, _M('Period', $module));

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', '', 'required'));
        $fields[]         = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $endDate->setValidator( new MDATEDMYValidator('endDate', '', 'required'));
        $fields[]       = $endDate;

        $maturityDate = new MCalendarField('maturityDate', $this->getFormValue('maturityDate', $data->maturityDate), _M('Maturity date', $module), FIELD_DATE_SIZE);
        $maturityDate->setValidator( new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required'));
        $validators[]   = new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required');
        $fields[]       = $maturityDate;

        $isInternetLabel = new MText('isInternetLabel', _M('Allow internet subscription',$module) . '?');
        $isInternetLabel->setWidth(FIELD_LABEL_SIZE);
        $isInternetLabel->setClass('m-caption m-caption-required');

        $isInternet = $this->GetFormValue('isInternet',$data->isInternet);
        if (! isset($isInternet) )
        {
            $isInternet = 'f';
        }
        $isInternet = new MRadioButtonGroup('isInternet', '', SAGU::listYesNo(1), $isInternet, null, 'horizontal');
        $isInternet->SetShowLabel(false);

        $hctIsInternet = new MHContainer('hctIsInternet', array($isInternetLabel, $isInternet));
        $fields[]  = $hctIsInternet;
        
        $isAdjustmentLabel = new MText('isAdjustmentLabel', _M('Is it an adjustment period',$module) . '?');
        $isAdjustmentLabel->setWidth(FIELD_LABEL_SIZE);
        $isAdjustmentLabel->setClass('m-caption m-caption-required');

        $isAdjustment = $this->GetFormValue('isAdjustment',$data->isAdjustment);
        if (! isset($isAdjustment) )
        {
            $isAdjustment = 'f';
        }
        $isAdjustment = new MRadioButtonGroup('isAdjustment', '', SAGU::listYesNo(1), $isAdjustment, null, 'horizontal');
        $isAdjustment->SetShowLabel(false);

        $hctIsAdjustment = new MHContainer('hctIsAdjustment', array($isAdjustmentLabel, $isAdjustment));
        $fields[]  = $hctIsAdjustment;

        $isSelectiveProcLabel = new MText('isSelectiveProcLabel', _M('Is it a period for freshmen',$module) . '?');
        $isSelectiveProcLabel->setWidth(FIELD_LABEL_SIZE);
        $isSelectiveProcLabel->setClass('m-caption m-caption-required');

        $isSelectiveProc = $this->GetFormValue('isSelectiveProc',$data->isSelectiveProc);
        if (! isset($isSelectiveProc) )
        {
            $isSelectiveProc = 'f';
        }
        $isSelectiveProc = new MRadioButtonGroup('isSelectiveProc', '', SAGU::listYesNo(1), $isSelectiveProc, null, 'horizontal');        $isSelectiveProc->SetShowLabel(false);

        $hctIsSelectiveProc = new MHContainer('hctIsSelectiveProc', array($isSelectiveProcLabel, $isSelectiveProc));
        $fields[]  = $hctIsSelectiveProc;

        //isAcademic
        $isAcademicLabel = new MText('isAcademicLabel', _M('Is it a period for academic enroll',$module).':');
        $isAcademicLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isAcademicLabel->setClass('m-caption m-caption-required');

        $isAcademic = $this->GetFormValue('isAcademic',$data->isAcademic);
        $isAcademic = new MRadioButtonGroup('isAcademic', '', SAGU::listTrueFalse(1), $isAcademic ? $isAcademic : DB_FALSE, null, 'horizontal');
        $isAcademic->SetShowLabel(false);
        
        $hctIsAcademic = new MHContainer('hctIsAcademic', array($isAcademicLabel, $isAcademic));
        $fields[]  = $hctIsAcademic;

        //isFinance
        $isFinanceLabel = new MText('isFinanceLabel', _M('Is it a period for finance enroll',$module).':');
        $isFinanceLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isFinanceLabel->setClass('m-caption m-caption-required');

        $isFinance = $this->GetFormValue('isFinance',$data->isFinance);
        $isFinance = new MRadioButtonGroup('isFinance', '', SAGU::listTrueFalse(1), $isFinance ? $isFinance : DB_FALSE, null, 'horizontal');
        $isFinance->SetShowLabel(false);
        
        $hctIsFinance = new MHContainer('hctIsFinance', array($isFinanceLabel, $isFinance));
        $fields[]  = $hctIsFinance;

        $fields[] = new Separator('');

        $fields[]     = new MButton('btnGenerate', _M('Generate', $module));

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data      = $this->getTypesData();
        $business  = $MIOLO->getBusiness($module, 'BusPeriodEnrollDate');
        $business2 = $MIOLO->getBusiness($module, 'BusGenerateMultiplePeriodEnrollDate');
        $business3 = $MIOLO->getBusiness($module, 'BusLearningPeriod');

        $learningPeriods = unserialize(urldecode(stripslashes(MIOLO::_request('learningPeriods'))));

        $periodId = $this->getFormValue('periodId');

        $x = 0;

        $business2->beginTransaction();

        foreach ( $learningPeriods as $value )
        {
             $getLearningPeriod = $business3->getLearningPeriod($value);

             $data->learningPeriodId  = $value;
             $data->description       = _M('Enroll period for course', $module) . ' ' . 
                                         $getLearningPeriod->courseId . '-' . $getLearningPeriod->courseVersion . ' ' . 
                                        _M('of period', $module) . ' ' . $periodId;

            $ok  = $business->insertPeriodEnrollDate($data);

            if ( $ok )
            {
                $x++;
            }
        }

        $business2->commit();

        $msg = _M('@1 records inserted', $module, $x);

        if ( $x > 0 )
        {
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultiplePeriodEnrollDateCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $opts['periodId']         = $periodId;
            $opts['learningPeriods'] = urlencode(serialize($learningPeriods));

            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdPeriodEnrollDate();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->periodEnrollDateDescription->value;

        return $data;
    } 

}

?>
