<?php

/**
 * Diverse consultation form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a classification
 **/
class FrmDiverseConsultation extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Assorted queries', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO                       = MIOLO::getInstance();
        $module                      = MIOLO::getCurrentModule();
        $action                      = MIOLO::getCurrentAction();
        $function                    = MIOLO::_request('function');

        $businessDiverseConsultation = $MIOLO->getBusiness($module, 'BusDiverseConsultation');
        $businessContract            = $MIOLO->getBusiness($module, 'BusContract');

        $contractPersonLabel = new MText('contractLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]              = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, strlen((string)$this->contractId->value) == 0 ? array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', null, 'contractUnitId') : null, $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Enter the person code',$module));
        $flds[]           = $contractPersonId;
        $validators[]     = new MIntegerValidator('contractPersonId', _M('Person',$module), 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Person name',$module));
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]        = $contractLabel;

        $contractId_ = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', null, 'contractUnitId'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId_->setJsHint(_M('Enter the contract code',$module));
        $flds[]     = $contractId_;
        $validators[]     = new MIntegerValidator('contractId', _M('Contract',$module), 'optional');

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Course id',$module));
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Course name',$module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $fields[] = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId', $data->contractTurnId));
        $fields[] = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId', $data->contractUnitId));

        $business = $MIOLO->getBusiness($module,'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $business->listPeriod(), true );
        $fields[] = $periodId;

        $business = $MIOLO->getBusiness($module, 'BusEnroll');
        $statusId = new MComboBox('statusId', $this->getFormValue('statusId'), _M('Status id', $module), $business->listEnrollStatus() );
        $statusId->setJsHint(_M('Enter here the status', $module));
        $fields[] = $statusId;

        $businessDocumentType = $MIOLO->getBusiness('basic', 'BusDocumentType');
        $rg                   = $businessDocumentType->getDocumentType(RG_CODE);
        $cpf                  = $businessDocumentType->getDocumentType(CPF_CODE);
        $ele                  = $businessDocumentType->getDocumentType(ELECTORAL_TITLE_CODE);

        $searchForData = array( 
                                array($rg->documentTypeId,  SAGU::getCapitulatetString($rg->name)),
                                array($cpf->documentTypeId, SAGU::getCapitulatetString($cpf->name)),
                                array($ele->documentTypeId, SAGU::getCapitulatetString($ele->name)),
                                array('carPlate',           _M('Car plate', $module)),
                                array('cellPhone',          _M('Cell Phone', $module)),
                                array('residentialPhone',   _M('Residential Phone', $module)),
                                array('workPhone',          _M('Work Phone', $module)),
                                array('email',              _M('E-mail', $module)),
                                array('fatherName',         _M('Father name', $module)),
                                array('motherName',         _M('Mother name', $module))
                              );

        $searchFor = new MSelection('searchFor', $this->getFormValue('searchFor', $data->searchFor), _M('Search for', $module), $searchForData);

        $fields[] = new MSeparator();

        $contentSearchFor = new MTextField('contentSearchFor', $this->getFormValue('contentSearchFor'), ' ', FIELD_DESCRIPTION_SIZE);

        $searchForLabel = new MText('searchForLabel', _M('Search for', $module) . ':');
        $searchForLabel->setWidth(FIELD_CONTAINER_SIZE);

        $cntSearchFor = new MHContainer('cntSearchFor', array($searchForLabel, $searchFor, $contentSearchFor));
        $cntSearchFor->setShowLabel(false);
        $fields[] = $cntSearchFor;

        $fields[] = new MButton('btnSearch',_M('Search',$module));
        $fields[] = new MSeparator();

        $filterContract->personId   = $this->getFormValue('contractPersonId');
        $filterContract->contractId = $this->getFormValue('contractId');
        $filterContract->courseId   = $this->getFormValue('contractCourseId');
        $filterContract->courseVersion = $this->getFormValue('contractCourseVersion');
        $filterContract->unitId     = $this->getFormValue('contractUnitId');
        $filterContract->turnId     = $this->getFormValue('contractTurnId');
        $searchFor                  = $this->getFormValue('searchFor');
        $contentSearchFor           = $this->getFormValue('contentSearchFor');

        if ( strlen((string)$filterContract->personId) > 0 )
        {

            $dataGrid3 = $businessContract->searchContract($filterContract);
            if ( is_null($dataGrid3) )
            {
                $errors[] = _M('No contracts found for this person.', $module);
            }
            else
            {
                $flds[] = new MSeparator();
                $flds[] = new MLink('lnk1', '', $MIOLO->getActionURL($module, $action . ':process:exploitation:externalExploitation', null, array('contractPersonIdS' => "{$filterContract->personId}")), _M('New individual exploitation', $module));

    //            $flds[] = new MLink('lnk2', '', $MIOLO->getActionURL($module, $action . ':register:specialRegimen', null, array('personId' => "{$filterContract->personId}")), _M('Curricular components in special regimen', $module), '_new');
                $flds[] = new MOpenWindow('lnk2', _M('Curricular components in special regimen', $module), $MIOLO->getActionURL($module, $action . ':register:specialRegimen', null, array('personId' => "{$filterContract->personId}")));

                if ( MODULE_FINANCE_INSTALLED == 'YES' )
                {
                    $actionPupilSituation = $MIOLO->getActionURL($module, $action . ':pupilSituation', null, array('personId' => "{$contractPersonId->value}"/*, 'function' => 'search'*/));

                    $flds[] = new MOpenWindow('lnk3', _M('Pupil situation', $module), $actionPupilSituation);
    //                $flds[] = new MLink('lnk3', '', $actionPupilSituation, _M('Pupil situation', $module));
                }
                $flds[] = new MSeparator();

                $bsg1        = new BaseGroup('bsg1', null, $flds, 'horizontal');
                $bsg1->width = '70%';
                $bsg1->align = 'center';
                $bsg1->addboxstyle('align', 'center');
                $div1        = new MDiv('div1', $flds, null, 'align=center');
                $fields[]    = $div1;
                unset($flds);

                foreach ( $dataGrid3 as $d )
                {
                    if ( @array_search($d[0], $contractId) === false )
                    {
                        $contractId[] = $d[0];
                    }
                }

                //disciplinas matriculadas
                $filter2->periodId   = $this->getFormValue('periodId');
                $filter2->statusId   = $this->getFormValue('statusId');
                $filter2->contractId = $contractId;

                if ( $filter2->periodId )
                {
                    $fields[]    = new MSeparator();
                    $dataGrid2   = $businessDiverseConsultation->getCurricularComponentCoursed($filter2);

                    $grdResults2 = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentRegistered');

                    $grdResults2->setData($dataGrid2);

                    $fields[]    = $grdResults2;
                    $fields[]    = new MSeparator();
                }

                //disciplinas cursadas
                $filter1->contractId    = $contractId;
                $filter1->notInPeriodId = $this->getFormValue('periodId');
                $filter1->statusId      = $this->getFormValue('statusId');

                $dataGrid1              = $businessDiverseConsultation->getCurricularComponentCoursed($filter1);
                $grdResults1            = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentCoursed');

                $grdResults1->setData($dataGrid1);

                $fields[]               = $grdResults1;
                $fields[]               = new MSeparator();
                
                //aproveitamentos
                $filterExp->periodId    = MIOLO::_request('periodId');
                $filterExp->personId    = MIOLO::_request('contractPersonId');
                $dataGridExp            = $businessDiverseConsultation->getCurricularComponentExploited($filterExp->personId ? $filterExp->personId : $this->getFormValue('contractPersonId'));
                $grdResultsExp          = $MIOLO->getUI()->getGrid($module, 'GrdDiverseConsultationCurricularComponentExploited', $filterExp);

                $grdResultsExp->setData($dataGridExp);

                $fields[]               = $grdResultsExp;
                $fields[]               = new MSeparator();
                
                //proficiências
                $filter1->proficiency = true;
                $dataGrid4            = $businessDiverseConsultation->getCurricularComponentCoursed($filter1);
                $grdResults4          = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationProficiency');
                $grdResults4->setData($dataGrid4);

                $fields[]             = $grdResults4;
                $fields[]             = new MSeparator();

                //atividades complementares
                if ( count($contractId)>0 )
                {
                    $aux = array();
                    foreach ( $contractId as $rowContractId )
                    {
                        $filterComplActiv->contractId = $rowContractId;
                        $businessComplActiv           = $MIOLO->getBusiness($module, 'BusComplementaryActivities');
                        $dataGridComplActiv           = $businessComplActiv->searchComplementaryActivities($filterComplActiv);

                        if ( count($dataGridComplActiv)>0 )
                        {
                            foreach ( $dataGridComplActiv as $rowComplActiv )
                            {
                                list ( $_complementaryActivitiesId,
                                       $_contractId,
                                       $_complementaryActivity,
                                       $_institutionId,
                                       $_complementaryActivitiesCategoryId,
                                       $_complementaryActivitiesCategoryDescription,
                                       $_curriculumId,
                                       $_periodId,
                                       $_totalHours,
                                       $_totalCredits,
                                       $_degree,
                                       $_concept,
                                       $_observation) = $rowComplActiv;

                                $aux[] = array($_complementaryActivitiesId, $_complementaryActivity, $_totalHours, $_totalCredits, $_degree,$_concept, $_periodId, $_complementaryActivitiesCategoryId, $_complementaryActivitiesCategoryDescription, $_contractId);
                            }
                        }
                    }

                    $grdResultsComplActiv = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesSearch');

                    $grdResultsComplActiv->setData($aux);
                    unset($aux);

                    $fields[]                     = $grdResultsComplActiv;
                    $fields[]                     = new MSeparator();
                }

                //Movimentações contratuais
                $busMovContract = $MIOLO->getBusiness($module, 'BusMovementContract');
                $busMovCompl    = $MIOLO->getBusiness($module, 'BusMovementContractComplement');
                if ( count($dataGrid3) > 0 )
                {
                    foreach ( $dataGrid3 as $contract )
                    {
                        $contractData[] = $contract;
                        $contractMovs = $busMovContract->getMovementContractSummary($contract[0]);
                        
                        if ( count($contractMovs) > 0 )
                        {
                            foreach ( $contractMovs as $movement )
                            {
                                $desc           = $movement[0] . ' - ' . $movement[1];
                                
                                if ($movement[2] == STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM)
                                {
                                    $movCompl = $busMovCompl->getMovementContractComplement($contract[0], $movement[2], INTERNAL_TRANSFER_FROM_COURSE_FIELD_ID, $movement[0]);
                                }
                                elseif ($movement[2] == STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO)
                                {
                                    $movCompl = $busMovCompl->getMovementContractComplement($contract[0], $movement[2], INTERNAL_TRANSFER_TO_COURSE_FIELD_ID, $movement[0]);
                                }
                                                                
                                if (strlen((string)$movCompl->value) > 0)
                                {
                                    $desc .= ' ' . $movCompl->value;
                                }
                                
                                $contractData[] = array(null, null, null, null, $desc);
                                unset($movCompl);
                            }
                        }
                    }
                }

                $grdResults3 = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationContract');
                $grdResults3->setData($contractData);

                $fields[]    = $grdResults3;
                $fields[]    = new MSeparator();
            }
        }
        elseif ( $searchFor && $contentSearchFor )
        {
            if ( ereg('^[0-9]*$', $searchFor) )
            {
                $filter->documentTypeId = $searchFor;
                $filter->content        = $contentSearchFor;
            }
            else
            {
                $filter->$searchFor = $contentSearchFor;
            }
            $dataGrid1   = $businessDiverseConsultation->searchPerson($filter);

            $grdResults1 = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationPerson');
            $grdResults1->setData($dataGrid1);

            $fields[]    = $grdResults1;
        }

        if ( count($errors) > 0 )
        {
            for ( $i=0; $i<count($errors); $i++ )
            {
                $errorMsgs[$i] = new MText('errorMsg' . $i, $errors[$i]);
                $errorMsgs[$i]->color = 'red';
            }
            $fields[] = new MSeparator();
            $divError = new MDiv('divError', $errorMsgs, null, 'align="center"');
            $fields[] = $divError;
            $fields[] = new MSeparator();
        }

        $this->setFields($fields);
        $this->setValidators($validators);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');
    }

}

?>
