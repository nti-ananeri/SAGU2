<?php

/**
 *
 * This file handles the connection and actions for acdCurriculum table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdCurriculum table
 */
class FrmCurriculumSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Curriculum matrix', $this->home, 'curriculum-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[]  = new MHiddenField('curriculumIdS', $this->getFormValue('curriculumIdS', $curriculumIdS));

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $courseLabelS = new MText('courseLabelS', _M('Course',$module) . ':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionS,courseNameS,courseUnitIdS,limbo,courseTurnIdS', $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, '', FIELD_ID_SIZE);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value,'', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setJsHint(_M('Enter the course name',$module));

        $hctCourseS = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $fields[]   = $hctCourseS;

        $busUnit  = $MIOLO->getBusiness('basic', 'BusUnit');
        $optsUnit = $busUnit->listUnit();
        $courseUnitIdS  = new MComboBox('courseUnitIdS', $this->courseUnitIdS->value, _M('Unit id',$module), $optsUnit);
        $courseUnitIdS->setJsHint(_M('Unit id',$module));
        $fields[] = $courseUnitIdS;

        $busTurn  = $MIOLO->getBusiness('basic', 'BusTurn');
        $optsTurn = $busTurn->listTurn();
        $courseTurnIdS  = new MComboBox('courseTurnIdS', $this->courseTurnIdS->value, _M('Turn id',$module), $optsTurn);
        $courseTurnIdS->setJsHint(_M('Turn id',$module));
        $fields[] = $courseTurnIdS;

        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Curricular component',$module) . ':');
        $curricularComponentLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $curricularComponentIdS = new MLookupTextField('curricularComponentIdS', $this->curricularComponentIdS->value, '', FIELD_ID_SIZE, null, null, 'curricularComponentVersionS,curricularComponentNameS', $module, 'CurricularComponent', null, null, !$this->page->isPostBack());
        $curricularComponentIdS->setJsHint(_M('Enter the curricular component code',$module));

        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->curricularComponentVersionS->value, '', FIELD_ID_SIZE);
        $curricularComponentVersionS->setJsHint(_M('Enter the curricular component version',$module));

        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->curricularComponentNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $curricularComponentNameS->setJsHint(_M('Enter the curricular component name',$module));

        $hctCurricularComponentS = new MHContainer('hctCurricularComponentS', array($curricularComponentLabelS, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
        $hctCurricularComponentS->setShowLabel(true);
        $fields[]   = $hctCurricularComponentS;

        $business = $MIOLO->getBusiness($module,'BusCurriculumType');
        $opts = $business->listCurriculumType();
        $curriculumTypeIdS = new MComboBox('curriculumTypeIdS', $this->curriculumTypeIdS->value, _M('Curriculum type id',$module), $opts);
        $curriculumTypeIdS->setJsHint(_M('Curriculum type',$module));
        $fields[] = $curriculumTypeIdS;

        $sortOrder = new MSelection('sortOrder', NULL, _M('Order by', $module), NULL, false);
        $opts = array(
                       array( 'semester',            _M('Semester', $module) ),
                       array( 'curricularComponent', _M('Curricular component description', $module) )
                     );
        $sortOrder->options = $opts;
        $sortOrder->setValue($this->getFormValue('sortOrder', $opts[0][0]));
        $fields[] = $sortOrder;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        $this->page->onLoad('document.' . $this->name . '.courseIdS.focus()');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }

    public function btnSearch_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // get filters values
        $filters->curriculumId               = $this->curriculumIdS->value;
        $filters->courseId                   = $this->courseIdS->value;
        $filters->courseVersion              = $this->courseVersionS->value;
        $filters->courseUnitId               = $this->courseUnitIdS->value;
        $filters->courseTurnId               = $this->courseTurnIdS->value;
        $filters->courseName                 = $this->courseNameS->value;
        $filters->curricularComponentId      = $this->curricularComponentIdS->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionS->value;
        $filters->curricularComponentName    = $this->curricularComponentNameS->value;
        $filters->curriculumTypeId           = $this->curriculumTypeIdS->value;
        //$filters->masterCurriculumId         = $this->masterCurriculumIdS->value;

        unset($this->curriculumIdS->value);
        $ui = $MIOLO->getUI();

        $title = _M('Not included in the totals', $module);
        for ( $i=0; $i<2; $i++ )
        {
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCurriculumSearch',$filters);
            $business = $MIOLO->getBusiness($module,'BusCurriculum');
            if ( $i != 0 )
            {
                $grdResults->setTitle(_M('Other curriculum curricular components', $module));
                $data = $business->searchCurriculumFormSearch($filters, true, $this->getFormValue('sortOrder'));
            }
            else
            {
                $grdResults->setTitle(_M('Obligatory curriculum', $module));
                $data = $business->searchCurriculumFormSearch($filters, false, $this->getFormValue('sortOrder'));
            }

            $totalAcademicCredits      = 0;
            $totalLessonHours          = 0;
            $totalCurricularComponents = 0;
            for ( $j=0; $j<count($data); $j++ )
            {
                if ( strlen((string)$data[$j][8]) == 0 )
                {
                    $totalAcademicCredits += $data[$j][6];
                    $totalLessonHours     += $data[$j][7];
                    $totalCurricularComponents++;
                }
                else
                {
                    $data[$j][1] = '<img src="' . $ui->getImage($module, 'red.png') . '" alt="' . $title . '" title="' . $title . '">' . $data[$j][1];
                }
            }

            $grdResults->setData($data);

            $this->addField($grdResults);
            $this->addField(new MTextLabel('lblTotalCredits', $totalAcademicCredits, _M('Total of academic credits', $module)));
            $this->addField(new MTextLabel('lblTotalCredits', $totalLessonHours, _M('Total of lesson hours', $module)));
            $this->addField(new MTextLabel('lblTotalCredits', $totalCurricularComponents, _M('Total of curricular components', $module)));

        }

        $this->addField(new MSeparator());

    }

}

?>
