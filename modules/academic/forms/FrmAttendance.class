<?php

/**
 * PupilListing form
 *
 * @author Leovan Tavares da Silva [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmAttendance extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Attendance and Examination act', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');       

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_REQUEST('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Attendance list', $this->home, 'attendance-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId       = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod() );

        $periodId->setJsHint(_M('Select a period', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = new Separator('');

        //Course
        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseLabel->setClass('m-caption m-caption-required');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, limbo, limbo, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), _M('Course version',$module), FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);

        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]  = $hctCourse;

        $turnLabelS = new MText('turnLabelS', _M('Turn',$module) . ':');
        $turnLabelS->setWidth(FIELD_LABEL_SIZE);
    
        //Turn
        $turnId  = new MTextField('turnId', $this->getFormValue('turnId', $data->turnIdS), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id',$module));
        //$validators[] = new MIntegerValidator('turnId', '', 'optional');

        $turnDescription  = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description',$module));

        $hctTurn = new MHContainer('hctTurn', array( $turnLabelS, $turnId, $turnDescription) );
        $hctTurn->setShowLabel(true);
        $fields[]  = $hctTurn;

        //Class
        $classLabel   = new MText('classLabel', _M('Class',$module) . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$classLabel->setClass('m-caption m-caption-required');

        $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'className_', $module, 'Class', null, array("courseId" => "courseId", "courseVersion" => "courseVersion", "turnId" => "turnId"), true);
        $classId->setJsHint(_M('Enter the class id',$module));

        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', FIELD_DESCRIPTION_SIZE);
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Class name',$module));

        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;
        //$validators[] = new MRequiredValidator('classId', _M('Class', $module), 'required');
        //end class

        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(MASK_DATE_PHP)    ), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;

/*
        $printModeLabel = new MText('printModeLabel', _M('Print mode', $module) . ':');
        $printModeLabel->setWidth(FIELD_CONTAINER_SIZE);

        $printModeOptions = array ( array(_M('By curricular component', $module), 1),
                                    array (_M('By day, turn and unit', $module), 2));

        $printMode = $this->GetFormValue('printMode', $data->printMode);
        $printMode = new MRadioButtonGroup('printMode', '', $printModeOptions, $printMode, null, 'horizontal');
        $printMode->setShowLabel(false);

        $hctPrintMode = new MHContainer('hctPrintMode', array($printModeLabel, $printMode));
        $fields[] = $hctPrintMode;
*/

        $fields[] = new MHiddenField('printMode', $this->getFormValue('printMode', 1));
        $fields[] = new MHiddenField('limbo', $this->getFormValue('limbo'));
        $fields[] = new Separator('');

        $btnList = new MButton('btnList', _M('Next', $module));
        $divButtons = new MDiv('divButtons', array($btnList), null, 'align=center');
        $fields[] = $divButtons;

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $MIOLO->uses('classes/msuspendedform.class', 'basic');
        $htmlFields .=  '<table align="left" border=0>' . 
                        '<tr><th align="left" width="100px">' . 
                        '<font face="arial" size=2>' . _M('Learning days', $module) . ':</font>' .
                        '</th><th width="100px"><input type="text" id = "textFieldParam1" name="textFieldParam1"></th></tr>' .
                        '<tr><th align="left" width="100px">' . 
                        '<font face="arial" size=2>' . _M('Results final verification date', $module) . ':</font>' .
                        '</th><th width="100px"><input id="textFieldParam2" type="text" name="textFieldParam2" onkeypress="return MIOLO_Validate_Mask(_validator_datedmy,event)"></th></tr>' .
                        '<tr><th colspan="2"><input type="submit" value="' . _M('Continue', $module) . '"></th></tr></table><br>';

        //$size = '200px';
        $suspendedForm = new MSuspendedForm('finalResultActForm', _M('Report parameters', $module), $htmlFields);

        $this->page->addJsCode($suspendedForm->generateJsCode());

        $this->page->addJsCode("var _validator_datedmy        = new MIOLO_Validator();
                                    _validator_datedmy.id     = 'datedmy';
                                    _validator_datedmy.form   = '$this->id';
                                    _validator_datedmy.field  = 'textFieldParam2';
                                    _validator_datedmy.label  = '';
                                    _validator_datedmy.min    = '10';
                                    _validator_datedmy.max    = '10';
                                    _validator_datedmy.type   = 'optional';
                                    _validator_datedmy.chars  = '/0123456789';
                                    _validator_datedmy.mask   = '99/99/9999';
                                    _validator_datedmy.msgerr = '';
                                    _validator_datedmy.checker = 'MIOLO_Validate_Check_DATEDMY';");
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function btnList_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //$data = $this->getTypesData();

        $classId         = $MIOLO->_REQUEST('classId');
        $periodId        = $MIOLO->_REQUEST('periodId');
        $courseId        = $MIOLO->_REQUEST('courseId');
        $courseVersion   = $MIOLO->_REQUEST('courseVersion');
        $turnId          = $MIOLO->_REQUEST('turnId');
        $turnDescription = $MIOLO->_REQUEST('turnDescription');
        $printMode       = $MIOLO->_REQUEST('printMode');

        $data->emissionDate = $MIOLO->_REQUEST('emissionDate');
        $data->printMode    = $MIOLO->_REQUEST('printMode');//$printMode;
        $data->courseId     = $MIOLO->_REQUEST('courseId');//$printMode;

        $business = $MIOLO->getBusiness($module, 'BusAttendance');

        //listagem por disciplina
        if ( $printMode == 1 )
        {

            if ( ACADEMIC_REGISTER_LAYER_INDIVIDUAL == 'YES' )
            {
                $listingData = $business->listCurricularComponentGroups($periodId, $courseId, $courseVersion, $classId, $turnId);
            }
            elseif ( ACADEMIC_REGISTER_LAYER_INDIVIDUAL == 'NO' )
            {
                $listingData = $business->listCurricularComponentGroupsSummary($periodId, $courseId, $courseVersion, $classId, $turnId);
            }
                
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdAttendanceCurricularComponents', $data);
            $grid->setData($listingData);
            $this->addField($grid);
        }
        /*elseif ( $printMode == 2 )
        {
            $listingData = $business->listCourseWeekdaysTurnsUnits($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdAttendanceWeekdayUnitTurn', $data);
            $grid->setData($listingData);

            //###GRID///is_array($listingData) ? $grid->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

            $this->addField($grid);
        }*/
    }

    public function attendanceReport($sender = null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusAttendance');

        $data->emissionDate = $MIOLO->_REQUEST('emissionDate');
        $data->printMode    = $MIOLO->_REQUEST('printMode');

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId      = $this->getFormValue('courseId', $MIOLO->_REQUEST('courseId'));
            $courseVersion = $this->getFormValue('courseVersion', $MIOLO->_REQUEST('courseVersion'));
            $periodId      = $this->getFormValue('periodId', $MIOLO->_REQUEST('periodId'));
            $weekdayId     = $MIOLO->_REQUEST('weekdayId');
            
            $unitId        = $MIOLO->_REQUEST('unitId');
            $turnId        = $MIOLO->_REQUEST('turnId');

            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }

        if ( DEFAULT_ATTENDANCE_LIST_LAYOUT == 2 )
        {
            $class = 'RptCallListInLotNeri';
        }
        else
        {
            $class = 'RptAttendanceList';
        }
        
        $MIOLO->uses("classes/$class.class", $module);

        eval('$report = new ' . $class . '($data);');

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

    public function examinationAct($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusAttendance');
        
        $data->emissionDate = $MIOLO->_request('emissionDate');
        $data->printMode    = $MIOLO->_request('printMode');

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId      = $this->getFormValue('courseId', $MIOLO->_request('courseId'));
            $courseVersion = $this->getFormValue('courseVersion', $MIOLO->_request('courseVersion'));
            $periodId      = $this->getFormValue('periodId', $MIOLO->_request('periodId'));
            $weekdayId     = $MIOLO->_request('weekdayId');
            $unitId        = $MIOLO->_request('unitId');
            $turnId        = $MIOLO->_request('turnId');
            
            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }

        $MIOLO->uses('classes/RptExaminationAct.class', $module);
        
        $report = new RptExaminationAct($data);
        exit;

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }
    
    
    public function totalAct($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusAttendance');
        
        $data->emissionDate = $MIOLO->_request('emissionDate');
        $data->printMode    = $MIOLO->_request('printMode');

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId      = $this->getFormValue('courseId', $MIOLO->_request('courseId'));
            $courseVersion = $this->getFormValue('courseVersion', $MIOLO->_request('courseVersion'));
            $periodId      = $this->getFormValue('periodId', $MIOLO->_request('periodId'));
            $weekdayId     = $MIOLO->_request('weekdayId');
            $unitId        = $MIOLO->_request('unitId');
            $turnId        = $MIOLO->_request('turnId');
            
            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }

        $MIOLO->uses('classes/RptTotalAct.class', $module);
        
        $report = new RptTotalAct($data);
        exit;

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }
    
    public function attachedLeaf($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusAttendance');

        $data->emissionDate = $this->emissionDate->value;//$this->getFormValue('emissionDate', $MIOLO->_request('emissionDate'));
        $data->printMode    = $this->printMode->value;//$this->getFormValue('printMode', $MIOLO->_request('printMode'));

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId       = $this->getFormValue('courseId', $MIOLO->_REQUEST('courseId'));
            $courseVersion  = $this->getFormValue('courseVersion', $MIOLO->_REQUEST('courseVersion'));
            $periodId       = $this->getFormValue('periodId', $MIOLO->_REQUEST('periodId'));
            $weekdayId      = $MIOLO->_REQUEST('weekdayId');
            $unitId         = $MIOLO->_REQUEST('unitId');
            $turnId         = $MIOLO->_REQUEST('turnId');

            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }

        $MIOLO->uses('classes/RptAttachedLeaf.class', $module);
       
        $report = new RptAttachedLeaf($data);
        exit;
        
        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

    public function finalResultAct($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusAttendance');
        
        
        $data->periodId          = $this->getFormValue('periodId', $MIOLO->_REQUEST('periodId-value'));
        $data->courseId          = $this->getFormValue('courseId', $MIOLO->_REQUEST('courseId-value'));      
        $data->courseVersion     = $this->getFormValue('courseVersion', $MIOLO->_REQUEST('courseVersion-value'));
        $data->emissionDate      = $MIOLO->_REQUEST('emissionDate');
        $data->printMode         = $MIOLO->_REQUEST('printMode');
        $data->learningDays      = $this->getFormValue('textFieldParam1', $MIOLO->_REQUEST('textFieldParam1'));
        $data->finalVerification = $this->getFormValue('textFieldParam2', $MIOLO->_REQUEST('textFieldParam2'));

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId       = $this->getFormValue('courseId', $MIOLO->_REQUEST('courseId'));
            $courseVersion  = $this->getFormValue('courseVersion', $MIOLO->_REQUEST('courseVersion'));
            $periodId       = $this->getFormValue('periodId', $MIOLO->_REQUEST('periodId'));
            $weekdayId      = $MIOLO->_REQUEST('weekdayId');
            $unitId         = $MIOLO->_REQUEST('unitId');
            $turnId         = $MIOLO->_REQUEST('turnId');
            
            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }
       
        $MIOLO->uses('classes/RptFinalResultAct.class', $module);
        
        $report = new RptFinalResultAct($data);
        exit;
        
        $opt['periodId']      = $MIOLO->_request('periodId');
        $opt['courseId']      = $MIOLO->_request('courseId');
        $opt['courseVersion'] = $MIOLO->_request('courseVersion');
        $opt['printMode']     = $MIOLO->_request('printMode');
        $opt['event']         = 'btnList_click';
         
        $action = $MIOLO->getActionURL($module, 'main:document:examinationAct', null, $opt);
        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

    public function signatureList($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusAttendance');
        
        $data->emissionDate = $MIOLO->_request('emissionDate');
        $data->printMode    = $MIOLO->_request('printMode');

        if ( $data->printMode == 1 )
        {
            $groupId[]        = array($MIOLO->_REQUEST('groupId'));
            $data->groupId    = $groupId;
            $data->scheduleId = $MIOLO->_REQUEST('scheduleId');
            $data->scheduleProfessorId = $MIOLO->_REQUEST('scheduleProfessorId');
        }
        elseif ( $data->printMode == 2 )
        {
            $courseId      = $this->getFormValue('courseId', $MIOLO->_request('courseId'));
            $courseVersion = $this->getFormValue('courseVersion', $MIOLO->_request('courseVersion'));
            $periodId      = $this->getFormValue('periodId', $MIOLO->_request('periodId'));
            $weekdayId     = $MIOLO->_request('weekdayId');
            $unitId        = $MIOLO->_request('unitId');
            $turnId        = $MIOLO->_request('turnId');
            
            $data->groupId = $business->listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId);
        }

        $MIOLO->uses('classes/RptSignatureList.class', $module);
        
        $report = new RptSignatureList($data);
        exit;

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }
    
}

?>
