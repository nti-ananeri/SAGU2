<?php

/**
 * Letter professor form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmLetterProfessor extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Letter for professors', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');        
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->enableButton('tbBtnPrint');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Letter for professors', $this->home, 'letterProfessor-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[] = new MSeparator();	

        $fields[] = new MHiddenField('limbo', '');	

        $business = $MIOLO->getBusiness($module, 'BusPeriod');
        $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
		$fields[] = $periodId;
            
        $beginLessonLabel = new MText('beginLessonLabel', _M('Lessons begin',$module) . ':');
        $beginLessonLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $beginLesson = new MTextField('beginLesson', $this->getFormValue('beginLesson', $data->beginLesson) ? $this->getFormValue('beginLesson', $data->beginLesson) : ACD_LETTER_PROFESSOR_BEGIN_DATE, '', FIELD_DESCRIPTION_SIZE);
        
        $hctBeginLesson = new MHContainer('hctBeginLesson', array($beginLessonLabel, $beginLesson));
        $hctBeginLesson->setShowLabel(false);
        $fields[]       = $hctBeginLesson;
		
        $meetingDateLabel = new MText('meetingDateLabel', _M('Meeting date',$module) . ':');
        $meetingDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $meetingDate = new MTextField('meetingDate', $this->getFormValue('meetingDate', $data->meetingDate) > 0 ? $this->getFormValue('meetingDate', $data->meetingDate) : ACD_LETTER_PROFESSOR_METTING_DATE , '', 20);
        
        $hctMeetingDate = new MHContainer('hctMeetingDate', array($meetingDateLabel, $meetingDate));
        $hctMeetingDate->setShowLabel(false);
        $fields[]       = $hctMeetingDate;

        $meetingHourLabel = new MText('meetingHourLabel', _M('Meeting hour',$module) . ':');
        $meetingHourLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $meetingHour = new MTextField('meetingHour', $this->getFormValue('meetingHour', $data->meetingHour) > 0 ? $this->getFormValue('meetingHour', $data->meetingHour) : ACD_LETTER_PROFESSOR_METTING_HOUR, '', 17);
        
        $hctMeetingHour = new MHContainer('hctMeetingHour', array($meetingHourLabel, $meetingHour));
        $hctMeetingHour->setShowLabel(false);
        $fields[]       = $hctMeetingHour;

        $meetingPlaceLabel = new MText('meetingPlaceLabel', _M('Meeting place',$module) . ':');
        $meetingPlaceLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $meetingPlace = new MTextField('meetingPlace', $this->getFormValue('meetingPlace', $data->meetingPlace) > 0 ? $this->getFormValue('meetingPlace', $data->meetingPlace) : ACD_LETTER_PROFESSOR_METTING_PLACE, '', FIELD_DESCRIPTION_SIZE);
        
        $hctMeetingPlace = new MHContainer('hctMeetingPlace', array($meetingPlaceLabel, $meetingPlace));
        $hctMeetingPlace->setShowLabel(false);
        $fields[]       = $hctMeetingPlace;

        $deliveryContentsLabel = new MText('deliveryContentsLabel', _M('Delivery of contents',$module) . ':');
        $deliveryContentsLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $deliveryContents = new MTextField('deliveryContents', $this->getFormValue('deliveryContents', $data->deliveryContents) > 0 ? $this->getFormValue('deliveryContents', $data->deliveryContents) : ACD_LETTER_PROFESSOR_DELIVERY_CONTENTS, '', FIELD_DESCRIPTION_SIZE);
        
        $hctDeliveryContents = new MHContainer('hctDeliveryContents', array($deliveryContentsLabel, $deliveryContents));
        $hctDeliveryContents->setShowLabel(false);
        $fields[]       = $hctDeliveryContents;

        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(MASK_DATE_PHP)	), _M('Emission date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;

        $numberCraftLabel = new MText('numberCraftLabel', _M('Number craft',$module) . ':');
        $numberCraftLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $numberCraft = new MTextField('numberCraft', $this->getFormValue('numberCraft', $data->numberCraft), '', 5);
        
        $hctnumberCraft = new MHContainer('hctnumberCraft', array($numberCraftLabel, $numberCraft));
        $hctnumberCraft->setShowLabel(false);
        $fields[]       = $hctnumberCraft;

        $business         = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $formationLevelId = new MSelection('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Formation level', $module), $business->listFormationLevel());
        $validators[]     = new MRequiredValidator('formationLevelId');
		$fields[]         = $formationLevelId;

        $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
            
        $professorId  = new MLookupTextField('professorId', $this->getFormValue('professorId',$data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Enter the professor code',$module));
          
        $professorName = new MTextField('professorName', $this->professorName->value, '', FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
    
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[]   = $hctProfessor;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);

        $description = new MText('description', 'Obs.: ' . _M('The field professor is not required but serves to print the letter of curricular component of the only professor',$module) . '.');
        $fields[]    = $description;
		$fields[]    = new MSeparator;

        unset($opts);
		$opts[] = new MOption('optPdf', 'pdf', 'pdf', true);
        $opts[] = new MOption('optSxw', 'sxw', 'sxw', false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('File type',$module) . ':');
        $radFileTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $radFileTypeLabel->setClass('m-caption m-caption-required');

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, 2, '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->periodId           = MIOLO::_request('periodId');
        $cd->personId           = MIOLO::_request('professorId');
        $cd->professorName      = MIOLO::_request('professorName');
        $cd->beginLesson        = MIOLO::_request('beginLesson');
        $cd->meetingDate        = MIOLO::_request('meetingDate');
        $cd->meetingHour        = MIOLO::_request('meetingHour');
        $cd->meetingPlace       = MIOLO::_request('meetingPlace');
        $cd->deliveryContents   = MIOLO::_request('deliveryContents');
        $cd->numberCraft        = MIOLO::_request('numberCraft');
        $cd->emissionDate       = MIOLO::_request('emissionDate');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->formationLevelId   = MIOLO::_request('formationLevelId');

        set_time_limit(0);

        $newDate = explode('/', $cd->emissionDate);
        $day     = $newDate[0];	
        $month   = $newDate[1];	
        $year    = $newDate[2];

        if ( $month{0} == 0 )
        {
           $newMonth = $month{1};

           $transMonth[1]    = _M('january', $module); 
           $transMonth[2]    = _M('february', $module);
           $transMonth[3]    = _M('march', $module);
           $transMonth[4]    = _M('april', $module);
           $transMonth[5]    = _M('may', $module);
           $transMonth[6]    = _M('june', $module);
           $transMonth[7]    = _M('july', $module);
           $transMonth[8]    = _M('august', $module);
           $transMonth[9]    = _M('september', $module);
           $descriptionMonth = $transMonth[$newMonth];
        }
        elseif ($month{0} == 1 )
        {
            $transMonth[10]  = _M('october', $module);
            $transMonth[11]  = _M('november', $module);
            $transMonth[12]  = _M('december', $module);
            $decriptionMonth = $transMonth[$month];		
        }

        $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
        $company         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $businessLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessPhysicalPerson = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');

        $businessCity = $MIOLO->getBusiness('basic', 'BusCity');
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCountry = $MIOLO->getBusiness('basic', 'BusCountry');
        $country         = $businessCountry->getCountry($city->countryId);

        $businessLetterProfessor = $MIOLO->getBusiness($module, 'BusLetterProfessor');

        $MIOLO->uses('/core/AgataAPI.class');

        $api = new AgataAPI;

        $api->setParameter('$fakeName', $legalPerson->fakeName);
        $api->setParameter('$companyCity', $city->name);
        $api->setParameter('$companyStateId', $city->stateId);
        $api->setParameter('$companyLocation', $legalPerson->location);
        $api->setParameter('$semester', $cd->periodId);
        $api->setParameter('$beginLesson', $cd->beginLesson);
        $api->setParameter('$meetingDate', $cd->meetingDate);	
        $api->setParameter('$meetingHour', $cd->meetingHour);
        $api->setParameter('$meetingPlace', $cd->meetingPlace);	
        $api->setParameter('$deliveryContents', $cd->deliveryContents);
        $api->setParameter('$numberCraft', $cd->numberCraft);
        $api->setParameter('$day', $day);
        $api->setParameter('$month', $descriptionMonth);
        $api->setParameter('$year', $year);	

        $api->setLanguage($MIOLO->getConf('i18n.language'));
        $api->setOutputPath(TEMP_DIR . '/letterProfessor.sxw');


        if ( strlen((string)$cd->personId) > 0 )
        {
            $datasProfessor = $businessLetterProfessor->getProfessorFromPeriod($cd->periodId, $cd->formationLevelId, $cd->personId);
            $api->setDataArray($datasProfessor);

//             $api->setParameter('$professorName', $professorData->name);
//             $api->setParameter('$location',      $professorData->location);
//             $api->setParameter('$number',        $professorData->number);
//             $api->setParameter('$complement',    $professorData->complement);
//             $api->setParameter('$quarter',       $professorData->neighborhood);
//             $api->setParameter('$cityName',      $professorData->cityName);
//             $api->setParameter('$zipCode',       $professorData->zipCode);

            $data                     = $businessLetterProfessor->getCurricularComponentByProfessor($cd->personId, $cd->periodId);

            $array[0][1] = $data;
            $api->setSubDataArray($array);
        }
        else
        {
            $datasProfessor = $businessLetterProfessor->getProfessorFromPeriod($cd->periodId, $cd->formationLevelId);
            $api->setDataArray($datasProfessor);

            foreach ( $datasProfessor as $key => $dataProfessor )
            {
                /*$api->setParameter('$professorName', $dataProfessor[1]);
                $api->setParameter('$location',      $dataProfessor[2]);
                $api->setParameter('$number',        $dataProfessor[3]);
                $api->setParameter('$complement',    $dataProfessor[4]);
                $api->setParameter('$quarter',       $dataProfessor[5]);
                $api->setParameter('$cityName',      $dataProfessor[6]);
                $api->setParameter('$zipCode',       $dataProfessor[7]);*/

                $data                     = $businessLetterProfessor->getCurricularComponentByProfessor($dataProfessor[0], $cd->periodId);

                if ($data)
                {
                    $array[0][$key] = $data;
                }
                else
                {
                     $array[0][$key] = array(array(''));
                }
            }

            $api->setSubDataArray($array);
        }


        $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/letterProfessor.sxw'));

        if ( $ok && $cd->fileType == 'pdf' )
        {
            $api->setOutputPath(TEMP_DIR . '/letterProfessor.pdf');
            $ok = $api->openOffice2pdf(TEMP_DIR . '/letterProfessor.sxw');
        }

        if ( !$ok )
        {
            $lblAgataError        = new MText('lblMsg1', $api->getError());
            $lblAgataError->color = 'red';
            $sep1                 = new Separator('');
            $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $api->fileDialog();
        }
    }
}

?>
