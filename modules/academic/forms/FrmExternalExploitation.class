<?php

/**
 * External exploitation insertion, edition and deletion control
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/11/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course
 **/
class FrmExternalExploitation extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar  = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnPrint');

        $fields[] = $toolBar;
        
        if ($function == 'insert')
        {
            $curriculumId = MIOLO::_request('curriculumId');
            $contractId   = MIOLO::_request('contractId');
            
            if ( (strlen((string)$contractId) > 0) && (strlen((string)$curriculumId) > 0) )
            {    
                $business     = $MIOLO->getBusiness($module, 'BusContract');
                $contractData = $business->getContract($contractId);
                
                $business       = $MIOLO->getBusiness($module, 'BusCurriculum');
                $curriculumData = $business->getCurriculum($curriculumId);
                
                $business       = $MIOLO->getBusiness($module, 'BusCurricularComponent');
                $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);
                
                $business       = $MIOLO->getBusiness($module, 'BusCourse');
                $courseData     = $business->getCourse($contractData->courseId);
                
                $business       = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
                $personData     = $business->getPhysicalPerson($contractData->personId);
                
                $filters->curriculumId = $curriculumId;
                $filters->contractId   = $contractId;
                
                $business = $MIOLO->getBusiness($module, 'BusExternalExploitation');
                
                $exploitationSearch = $business->searchExploitation($filters);
                
                if (strlen((string)$exploitationSearch[0][5]) > 0)
                {
                    $exploitationSummary = $business->getEnrollExploitationSummary($exploitationSearch[0][5]);
                    
                    $exploitationData = $business->getEnrollExploitationData($exploitationSearch[0][5]);
                }
                else
                {
                    $exploitationSummary->remainingNumberHours = $curricularComponentData->totalNumberHours;
                }
                
                $fields[] = new MHiddenField('contractId', $contractId);
                $fields[] = new MHiddenField('curriculumId', $curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
            }
            else
            {
                $msg = _M('No contract or curriculum id got. Did you use the right procedure to access this form?', $module);
                $this->addError($msg);
            }
        }
        elseif ($function == 'update')
        {
            $exploitationId = MIOLO::_request('exploitationId');
            
            if (strlen((string)$exploitationId) > 0)
            {
                $busExploitation = $MIOLO->getBusiness($module, 'BusExternalExploitation');
                $data            = $busExploitation->getExternalExploitation($exploitationId);
                
                $business   = $MIOLO->getBusiness($module, 'BusEnroll');
                $enrollData = $business->getEnroll($data->enrollId);
                
                $business     = $MIOLO->getBusiness($module, 'BusContract');
                $contractData = $business->getContract($enrollData->contractId);
                
                $business       = $MIOLO->getBusiness($module, 'BusCurriculum');
                $curriculumData = $business->getCurriculum($enrollData->curriculumId);
                
                $business                = $MIOLO->getBusiness($module, 'BusCurricularComponent');
                $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);
                
                $business   = $MIOLO->getBusiness($module, 'BusCourse');
                $courseData = $business->getCourse($contractData->courseId);
                
                $business   = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
                $personData = $business->getPhysicalPerson($contractData->personId);
                
                $business           = $MIOLO->getBusiness($module, 'BusLearningPeriod');
                $learningPeriodData = $business->getLearningPeriod($enrollData->learningPeriodId);
                
                $exploitationSummary = $busExploitation->getEnrollExploitationSummary($data->enrollId);
                $exploitationData    = $busExploitation->getEnrollExploitationData($data->enrollId);
                
                $fields[] = new MHiddenField('exploitationId', $exploitationId);
                $fields[] = new MHiddenField('contractId', $enrollData->contractId);
                $fields[] = new MHiddenField('curriculumId', $enrollData->curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                $fields[] = new MHiddenField('pastExploitationNumberHours', $data->exploitationNumberHours);
                $fields[] = new MHiddenField('enrollId', $data->enrollId);
            }
            else
            {
                $msg = _M('No exploitation id got. Did you use the right procedure to access this form?', $module);
                $this->addError($msg);
            }
        }
        
        $fields[] = new MHiddenField('limbo', null);
        
        
        $fields[] = new MTextLabel('personId', $personData->personId . ' - ' . $personData->name, _M('Person',$module));
        $fields[] = new MSeparator('');

        unset($flds);
        $flds[] = new MTextLabel('courseId', $contractData->courseId . '/' . $contractData->courseVersion . ' - ' . $courseData->name, _M('Course',$module));
        $flds[] = new MTextLabel('curricularComponentId', $curricularComponentData->curricularComponentId . '/' . $curricularComponentData->curricularComponentVersion . ' - ' . $curricularComponentData->name, _M('Curricular component',$module));
        $flds[] = new MTextLabel('academicNumberHours', $curricularComponentData->totalNumberHours, _M('Total number hours',$module));
        $color  = $exploitationSummary->remainingNumberHours > 0 ? 'green' : 'red';
        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $flds[] = new MTextLabel('remainingNumberHours', (string) $exploitationSummary->remainingNumberHours, _M('Remaining number hours',$module), $color);
        
        if ($function == 'update')
        {
            $flds[] = new MTextLabel('periodId', $learningPeriodData->periodId, _M('Exploitation period',$module));
        }
        
        $bsg1            = new BaseGroup('bsg1', _M('Course curricular component data',$module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        $fields[]        = $bsg1;
        unset($flds);
        
        if (count($exploitationData) > 0)
        {
            $gridFilters->home = $action;
            $gridFilters->readOnly = true;
            
            $gridExploitations = $MIOLO->getUI()->getGrid($module, 'GrdExploitationSearch', $gridFilters);
            $gridExploitations->setData($exploitationData);
            
            $fields[] = $gridExploitations;
        }
        
        $fields[] = new MSeparator('');
        
        $exploitationInstitutionLabel = new MText('exploitationInstitutionLabel', _M('Exploitation institution', $module) . ':');
        $exploitationInstitutionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $exploitationInstitutionLabel->setClass('m-caption m-caption-required');

        $exploitationInstitutionId = new MLookupTextField('exploitationInstitutionId', $this->getFormValue('exploitationInstitutionId', $data->institutionId), _M('Exploitation institution id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'exploitationInstitutionName', 'basic', 'LegalPersonInstitution', null, null, true);
        $validators[] = new MIntegerValidator('exploitationInstitutionId', '', 'required');

        $exploitationInstitutionName = new MTextField('exploitationInstitutionName', $this->getFormValue('exploitationInstitutionName', $this->exploitationInstitutionName->value), _M('Exploitation institution name', $module), FIELD_DESCRIPTION_SIZE);
        $exploitationInstitutionName->setReadOnly(true);

        $hctExploitationInstitution = new MHContainer('hctExploitationInstitution', array($exploitationInstitutionLabel, $exploitationInstitutionId, $exploitationInstitutionName));
        $hctExploitationInstitution->setShowLabel(false);
        $flds[] = $hctExploitationInstitution;
        
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('Course', $module), FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Enter the course',$module));
        $flds[] = $courseName;
        
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), _M('Curricular component', $module), FIELD_DESCRIPTION_SIZE);
        $courseName->setJsHint(_M('Enter the course',$module));
        $flds[] = $curricularComponentName;
        
        $numberHours = new MTextField('numberHours', $this->getFormValue('numberHours',$data->numberHours), _M('Number hours', $module), 10);
        $numberHours->setJsHint(_M('Enter the exploitation curricular component number hours',$module));
        $flds[] = $numberHours;
        
        $credits = new MTextField('credits', $this->getFormValue('credits',$data->credits), _M('Credits', $module), 10);
        $credits->setJsHint(_M('Enter the exploitation curricular component credits',$module));
        $flds[] = $credits;

        $finalNote = new MTextField('finalNote', $this->getFormValue('finalNote',$data->finalNote), _M('Final degree', $module), 10);
        $finalNote->setJsHint(_M('Enter the final degree',$module));
        $flds[] = $finalNote;
        
        $period = new MTextField('period', $this->getFormValue('period', $data->period), _M('Period', $module), 10);
        $period->setJsHint(_M('Enter the period when the curricular component were coursed',$module));
        $flds[] = $period;
        
        $bsg2            = new BaseGroup('bsg2', _M('Exploitation curricular component data',$module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        $fields[]        = $bsg2;
        unset($flds);
        
        if ($function == 'insert')
        {
            $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $this->periodId->value))>0 ? $this->getFormValue('periodId', $this->periodId->value) : CURRENT_PERIOD_ID, _M('Exploitation period',$module), $businessPeriod->listPeriod(), true );
            $validators[] = new MRequiredValidator('periodId', _M('Exploitation period',$module));
            $fields[] = $periodId;
        }

        $numberHourExploitation = new MTextField('numberHourExploitation', $this->getFormValue('numberHourExploitation', $data->exploitationNumberHours), _M('Number hour exploitation', $module), 10);
        $numberHourExploitation->setJsHint(_M('Enter the exploitation number of hours',$module));
        $validators[] = new MRequiredValidator('numberHourExploitation', _M('Number hour exploitation',$module));
        $fields[] = $numberHourExploitation;

        $creditsExploitation = new MTextField('creditsExploitation', $this->getFormValue('creditsExploitation', $data->exploitationCredits), _M('Credits exploitation', $module), 10);
        $creditsExploitation->setJsHint(_M('Enter the exploitation credits',$module));
        $fields[] = $creditsExploitation;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $exploitationId = MIOLO::_request('exploitationId');
        
        try
        {
            $busExploitation  = $MIOLO->getBusiness($module, 'BusExploitation');
            $exploitationData = $busExploitation->getExploitation($exploitationId);
        }
        catch (Exception $e)
        {
            $msg = _M('Error getting exploitation data. ', $module) . $e->getMessage();
            $this->addError($msg);
        }
        
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'exploitationId'=>$exploitationId);

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        
        unset($opts);
        $opts['function'] = 'update';
        $opts['enrollId'] = $exploitationData->enrollId;
        
        $gotoNo  = $MIOLO->getActionURL($module, 'main:register:enroll', null, $opts);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_request('exploitationId');
        
        try
        {
            $busExploitation  = $MIOLO->getBusiness($module, 'BusExploitation');
            $exploitationData = $busExploitation->getExploitation($exploitationId);
            
            $busEnroll  = $MIOLO->getBusiness($module, 'BusEnroll');
            $enrollData = $busEnroll->getEnroll($exploitationData->enrollId);
            
            $busContract  = $MIOLO->getBusiness($module, 'BusContract');
            $contractData = $busContract->getContract($enrollData->contractId);
            
            $busExploitation->deleteExploitation($exploitationId);
            $goto = $MIOLO->getActionURL($module, 'main', null, array('personId'=>$contractData->personId));
            $msg  = MSG_RECORD_DELETED;
            $MIOLO->information($msg, $goto);
        }
        catch (Exception $e)
        {
            $msg  = _M('Error executing requested operation.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        
        if ( ($function == 'update') && (isset($data->pastExploitationNumberHours)) ) 
        {
            $checkNumberHours = $data->curriculumNumberHours + $data->pastExploitationNumberHours;
        }
        else
        {
            $checkNumberHours = $data->curriculumNumberHours;
        }
        
        if ($data->exploitationNumberHours > $checkNumberHours)
        {
            $msg = _M('You\'re allowed to exploit up to @1 hours for the selected curricular component.', $module, $checkNumberHours);
            $this->addError($msg);
        }
        else
        {
            try
            {
                $business = $MIOLO->getBusiness($module, 'BusExternalExploitation');
                
                if ($function == 'update')
                {
                    $business->updateExternalExploitation($data);
                    $msg  = MSG_RECORD_UPDATED;
                    $goto = $MIOLO->getActionURL($module, 'main:register:enroll', null, array('enrollId'=>$data->enrollId, 'function'=>'update'));
                }
                else
                {
                    $business->insertExternalExploitation($data);
                    $msg  = _M('Exploitation registered.', $module);
                    $data2->contractIdS = $data->contractId;
                    $data2->event = 'btnSearch:click';

                    $goto = $MIOLO->getActionURL($module, $action, null, array('function' => 'search', 'event' => 'btnSearch:click', 'contractIdS' => $data->contractId));
                }
                
                $MIOLO->information($msg, $goto);
            }
            catch (Exception $e)
            {
                $msg = _M('Error executing requested operation. ',$module) . $e->getMessage();
                $this->addError($msg);
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->contractId              = MIOLO::_request('contractId');
        $data->curriculumId            = MIOLO::_request('curriculumId');
        $data->exploitationNumberHours = MIOLO::_request('numberHourExploitation');
        $data->exploitationCredits     = MIOLO::_request('creditsExploitation');  
        $data->institutionId           = MIOLO::_request('exploitationInstitutionId');
        $data->courseName              = MIOLO::_request('courseName');
        $data->curricularComponentName = MIOLO::_request('curricularComponentName');
        $data->finalNote               = MIOLO::_request('finalNote');
        $data->numberHours             = MIOLO::_request('numberHours');
        $data->credits                 = MIOLO::_request('credits');
        $data->period                  = MIOLO::_request('period');
        $data->periodId                = MIOLO::_request('periodId');
        
        $data->exploitationId              = MIOLO::_request('exploitationId');
        $data->curriculumNumberHours       = MIOLO::_request('curriculumNumberHours');
        $data->pastExploitationNumberHours = MIOLO::_request('pastExploitationNumberHours');
        $data->enrollId                    = MIOLO::_request('enrollId');

        return $data;
    }
}



?>
