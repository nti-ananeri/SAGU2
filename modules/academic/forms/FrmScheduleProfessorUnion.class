<?php

/**
 * Form to manipulate acdScheduleProfessor table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmScheduleProfessorUnion extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        //if ( MIOLO::_request('function') == 'insert' )
        //{
            parent::__construct(_M('Insert schedule professor union', $module));
        //}
        //else
        //{
            //parent::__construct(_M('Update grouped schedule professor', $module));
        //}
       if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
            $this->defineFields();
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
            $this->eventHandler();
        }

    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        //$toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnBack');

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        
        $fields[] = $toolBar;

        $physicalResourceLabelS = new MText('physicalResourceLabelS', _M('Physical resource id',$module) . ':');
        $physicalResourceLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $physicalResourceLabelS->setClass('m-caption m-caption-required');

        $physicalResourceId = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId', $data->physicalResourceId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', 'institutional', 'PhysicalResource', null, null, true);
        $physicalResourceId->setJsHint(_M('Physical resource code',$module));
        $validators[] = new MIntegerValidator('physicalResourceId', _M('Physical resource id',$module), 'required');

        $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), '', 8);
        $physicalResourceVersion->setReadOnly(true);
        $physicalResourceVersion->setJsHint(_M('Physical resource version', $module));

        $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), '', FIELD_DESCRIPTION_SIZE);
        $physicalResourceDescription->setReadOnly(true);

        $hctPhysicalResource = new MHContainer('hctPhysicalResource', array($physicalResourceLabelS, $physicalResourceId, $physicalResourceVersion, $physicalResourceDescription));
        $fields[]   = $hctPhysicalResource;
        
        //Professor

        $professorLabel = new MText('professorlabel', _M('Professor',$module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
        $professorLabel->setClass('m-caption m-caption-required');

        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, $params, true);
        $professorId->setJsHint(_M('Professor id',$module));
        $validators[] = new MIntegerValidator('professorId', _M('Professor',$module), 'optional');

        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Professor name',$module));
        
        $hctProfessor = new MHContainer('hctProfessor', array( $professorLabel, $professorId, $professorName) );
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;
        
        //Curricular Component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Curricular component',$module) . ':');
        $curricularComponentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[]                   = $curricularComponentLabel;

        /*if ( $function == 'update' )
        {
            $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion'), false);
        }
        else
        {*/
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Code',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion'), true);
//        }
        $flds[]                = $curricularComponentId;
        $validators[]          = new MRequiredValidator('curricularComponentId', _M('Curricular component',$module));

        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Version',$module), FIELD_ID_SIZE);
        $curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curricularComponentVersion;

        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $curricularComponentName->setReadOnly(true);
        $flds[]                  = $curricularComponentName;

        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        //Period
        $businessPeriod = $MIOLO->getBusiness($module,'BusPeriod');
        if ( is_null($this->getFormValue('periodId', $data->periodId)) ||
             strlen((string)$this->getFormValue('periodId', $data->periodId)) == 0 )
        {
            $periodIdValue = CURRENT_PERIOD_ID;
        }
        else
        {
            $periodIdValue = $this->getFormValue('periodId', $data->periodId);
        }
        $periodLabel = new MText('periodLabel', _M('Period', $module));
        $periodLabel->setWidth(FIELD_CONTAINER_SIZE);

        $periodId = new MComboBox('periodId', $periodIdValue, null, $businessPeriod->listPeriod(), true );
        $fields[] = new MHContainer('hctPeriod', array($periodLabel, $periodId));
        $validators[] = new MRequiredValidator('periodId');

        //Turn
        $turnLabel = new MText('turnLabel', _M('Turn', $module));
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
        $turnLabel->setClass('m-caption m-caption-required');
        $business = $MIOLO->getBusiness('basic', 'BusTurn');
        $turnId = new MComboBox( 'turnId',
                                    $this->GetFormValue('turnId',$data->turnId),
                                    null,
                                    $business->listTurn());
        $validators[] = new MRequiredValidator('turnId');
        $fields[] = new MHContainer('hctTurn', array($turnLabel, $turnId));

        //Button
        $btnCurricularComponent   = new MButton('btnCurricularComponents', _M('Carregar disciplinas', $module), 'callGetCurricularComponents();');

        $fields[] = new MHContainer('hctCurricularComponents',array($btnCurricularComponent));
        //Div with entrys
        $divContent = new MDiv('divContent', null, null);
        $divContent->setWidth('98%');
        $fields[] = $divContent;
        
        /*if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }*/

        $fields[] = new Separator('');

        $btn[]    = new MButton('tbBtnSave',   _M('Save and exit', $module));
        $div1     = new MDiv('div1', $btn, null, 'align=center');
        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $MIOLO->getRequiredJS4Ajax();
        // Ajax calls
        $this->page->addScript('x/x_core.js');
        $this->page->addScript('cpaint/cpaint.inc.js');
        $this->page->addScript('m_lookup_ajax.js');
        $this->page->addScript('m_grid.js');
        $this->addStyleFile('m_grids.css');
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());

        $code = '
            function callGetCurricularComponents() 
            {
                
                if ( 
                        (xGetElementById(\'physicalResourceId\').value.length>0) && 
                        (xGetElementById(\'physicalResourceVersion\').value.length > 0) && 
                        (xGetElementById(\'professorId\').value.length > 0) && 
                        (xGetElementById(\'curricularComponentId\').value.length > 0) && 
                        (xGetElementById(\'curricularComponentVersion\').value.length > 0) && 
                        (xGetElementById(\'turnId\').value.length > 0) )
                {
                    xGetElementById(\'divContent\').style.display = \'\';
                    var args = new Array(
							xGetElementById(\'physicalResourceId\').value, 
							xGetElementById(\'physicalResourceVersion\').value,
                            xGetElementById(\'professorId\').value, 
							xGetElementById(\'curricularComponentId\').value, 
							xGetElementById(\'curricularComponentVersion\').value,
                            xGetElementById(\'periodId\').value,
                            xGetElementById(\'turnId\').value);
                    xGetElementById(\'divContent\').innerHTML = \'Loading...<img src="/images/loading.gif"/>\';
                    cpaint_call("' . $url . '", "POST", "ajax_btnGetCurricularComponents", args, returnCurricularComponents, "TEXT");
                }
                else
                {
                    alert(\''._M('Error, please check the select combos', $module).'\');
                }
            } 

            function returnCurricularComponents(result) 
            {
                xGetElementById(\'divContent\').innerHTML = result;
                MIOLO_parseAjaxJavascript(result);
                elX = xGetElementById(\'divContent\');
                elX = elX.getElementsByTagName(\'div\');
                for (x=0;x< elX.length; x++)
                {
                    if (elX[x].className == \'m-form-box\')
                    {
                        elX[x].parentNode.removeChild(elX[x]);
                    }
                }
            }
        ';
        $this->page->AddJsCode($code);
    }

    function ajax_btnGetCurricularComponents($go)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $args = explode(',', $go[0]);
        
        // Parse values to a little object
        $data->physicalResourceId         	= $args[0];
        $data->physicalResourceVersion      = $args[1];
        $data->professorId		            = $args[2];
        $data->curricularComponentId		= $args[3];
        $data->curricularComponentVersion	= $args[4];
        $data->periodId                     = $args[5];
        $data->turnId                       = $args[6];
        
        $business = $MIOLO->getBusiness($module, 'BusScheduleProfessorUnion');
        $list = $business->listScheduleProfessorUsingFilters($data);

        //Primary scheduleid
        $fields[] = new Separator('');
        $fields[] = new Separator('');
        $primaryScheduleProfessorIdLabel = new MText('primaryScheduleProfessorIdLabel',_M('Primary schedule professor id', $module).':');
        $primaryScheduleProfessorIdLabel->setWidth(FIELD_CONTAINER_SIZE+30);
        $primaryScheduleProfessorIdLabel->setClass('m-caption m-caption-required');
        
        $primaryScheduleProfessorId = new MComboBox( 'primaryScheduleProfessorId',
                                    $this->GetFormValue('primaryScheduleProfessorId',$data->primaryScheduleProfessorId),
                                    null,
                                    $list);
        $validators[] = new MRequiredValidator('primaryScheduleProfessorId');
        $fields[] = new MHContainer('hctPrimaryScheduleProfessorId', array($primaryScheduleProfessorIdLabel, $primaryScheduleProfessorId));
        
        //Secondary scheduleid
        /*$secondaryScheduleProfessorIdLabel = new MText('secondaryScheduleProfessorIdLabel',_M('Secondary schedule professor id', $module).':');
        $secondaryScheduleProfessorIdLabel->setWidth(FIELD_CONTAINER_SIZE+30);
        $secondaryScheduleProfessorIdLabel->setClass('m-caption m-caption-required');
        $secondaryScheduleProfessorId = new MComboBox( 'secondaryScheduleProfessorId',
                                    $this->GetFormValue('secondaryScheduleProfessorId',$data->secondaryScheduleProfessorId),
                                    null,
                                    $list);
        $validators[] = new MRequiredValidator('secondaryScheduleProfessorId');
        $fields[] = new MHContainer('hctSecondaryScheduleProfessorId', array($secondaryScheduleProfessorIdLabel, $secondaryScheduleProfessorId));*/
        $filters->scheduleProfessorId = $data->professorId;

            
        if ( count($list) > 0 )
        {
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleProfessorUnion',$filters);
            $grdResults->setData($list);

            $grdResults->setTitle(_M('Curricular components', $module));
        }
        $field[] = new MVContainer('vContainer', $fields);
        $field[] = $grdResults;
        $this->setShowPostButton(false);
        $this->manager->getTheme()->setContent($field);
    }

    public function tbBtnSave_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data->primaryScheduleProfessorId = $this->getFormValue('primaryScheduleProfessorId',$data->primaryScheduleProfessorId);
        $selectgridScheduleProfessorUnion = $this->getFormValue('selectgridScheduleProfessorUnion', $data->selectgridScheduleProfessorUnion);
        foreach($selectgridScheduleProfessorUnion as $item => $value)
    
        {
            if( $value != $data->primaryScheduleProfessorId )
            {
                $data->secondaryScheduleProfessorId[] = $value;
            }
        }
        $business = $MIOLO->getBusiness($module, 'BusScheduleProfessorUnion');

        if ( $function == 'update' )
        {
            $ok  = $business->updateScheduleProfessorUnion($data);
            $msg = MSG_RECORD_UPDATED;
            $opts    = array('function'=>'update');
        }
        else
        {
            $ok  = $business->insertScheduleProfessorUnion($data);
            $msg = MSG_RECORD_INSERTED;
            $opts    = array('function'=>'insert');
        }
        $goto    = SAGU::getStackBackUrl();
        $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $goto);
    }

    public function tbBtnDelete_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'primaryScheduleProfessorId' => MIOLO::_request('primaryScheduleProfessorId'),
                        'secondaryScheduleProfessorId' => MIOLO::_request('secondaryScheduleProfessorId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        $opts   = array('primaryScheduleProfessorId' => MIOLO::_request('primaryScheduleProfessorId'),
                            'secondaryScheduleProfessorId' => MIOLO::_request('secondaryScheduleProfessorId')
                            );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    public function tbBtnDelete_confirm()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data->primaryScheduleProfessorId = MIOLO::_request('primaryScheduleProfessorId');
        $data->secondaryScheduleProfessorId = MIOLO::_request('secondaryScheduleProfessorId');

        $business = $MIOLO->getBusiness($module, 'BusScheduleProfessorUnion');
        $ok = $business->deleteScheduleProfessorUnion($data);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}

?>
