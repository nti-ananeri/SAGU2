<?php

/**
 *
 * This file handles the connection and actions for acdCourseVersion table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCourseVersion table
 */
class FrmCourseVersionSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course version', $this->home, 'courseVersion-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

//        $courseIdS = new MTextField('courseIdS', $this->courseIdS->value, _M('Course id',$module), 10);
//        $courseIdS->setJsHint(_M('Enter the course id',$module));
//        $fields[] = $courseIdS;

//        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, _M('Course version',$module), 10);
//        $courseVersionS->setJsHint(_M('Enter the course version',$module));
//        $fields[] = $courseVersionS;

        //Course
        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
                    'courseNameS', $module, 'Course', null, null, true);
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name',$module));

        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseIdS, $courseNameS));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, _M('Course version',$module), FIELD_ID_SIZE);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));
        $fields[] = $courseVersionS;


        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDateS->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('End date',$module), FIELD_DATE_SIZE);
        $endDateS->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;

        $semesterTotalS = new MTextField('semesterTotalS', $this->semesterTotalS->value, _M('Semester total',$module), 10);
        $semesterTotalS->setJsHint(_M('Enter the semester total',$module));
        $fields[] = $semesterTotalS;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
//         $courseVersionTypeLabelS = new MText('courseVersionTypeLabelS', _M('Course version type', $module) . ':');
//         $courseVersionTypeLabelS->setWidth(FIELD_CONTAINER_SIZE);
//         
//         $courseVersionTypeIdS = new MLookupTextField('courseVersionTypeIdS', $this->courseVersionTypeIdS->value, _M('Course version type id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersionTypeDescriptionS', $module, 'CourseVersionType', null, null, true);
//         //$fields[] = $courseVersionTypeIdS;
//         $validators[] = new MIntegerValidator('courseVersionTypeIdS', '', 'optional');
// 
//         $courseVersionTypeDescriptionS = new MTextField('courseVersionTypeDescriptionS', $this->courseVersionTypeDescriptionS->value, _M('Course version type description',$module), FIELD_DESCRIPTION_SIZE);
//         $courseVersionTypeDescriptionS->setJsHint(_M('Enter the course version type description',$module));
//         //$courseVersionTypeDescriptionS->setReadOnly(true);
//         //$fields[] = $courseVersionTypeDescriptionS;
//         
//         $hctCourseVersionTypeS = new MHContainer('hctCourseVersionTypeS', array($courseVersionTypeLabelS, $courseVersionTypeIdS, $courseVersionTypeDescriptionS));
//         $hctCourseVersionTypeS->setShowLabel(false);
//         $fields[] = $hctCourseVersionTypeS;


        $businessCourseVersionType = $MIOLO->getBusiness('academic', 'BusCourseVersionType');
        $courseVersionTypeIdS = new MComboBox( 'courseVersionTypeIdS',
                                $this->getFormValue('courseVersionTypeIdS',$data->courseVersionTypeIdS),
                                _M('Course version type',$module),
                                $businessCourseVersionType->listCourseVersionType());
        $fields[] = $courseVersionTypeIdS;


        $creditsS = new MTextField('creditsS', $this->creditsS->value, _M('Credits',$module), 10);
        $creditsS->setJsHint(_M('Enter the credits',$module));
        $fields[] = $creditsS;

        $hourTotalS = new MTextField('hourTotalS', $this->hourTotalS->value, _M('Hour total',$module), 10);
        $hourTotalS->setJsHint(_M('Enter the hour total',$module));
        $fields[] = $hourTotalS;

        $hourRequiredS = new MTextField('hourRequiredS', $this->hourRequiredS->value, _M('Hour required',$module), 10);
        $hourRequiredS->setJsHint(_M('Enter the hour required',$module));
        $fields[] = $hourRequiredS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->courseId                     = $this->courseIdS->value;
        $filters->courseVersion                = $this->courseVersionS->value;
        $filters->beginDate                    = $this->beginDateS->value;
        $filters->endDate                      = $this->endDateS->value;
        $filters->semesterTotal                = $this->semesterTotalS->value;
        $filters->courseVersionTypeId          = $this->courseVersionTypeIdS->value;
        $filters->courseVersionTypeDescription = $this->courseVersionTypeDescriptionS->value;
        $filters->credits                      = $this->creditsS->value;
        $filters->hourTotal                    = $this->hourTotalS->value;
        $filters->hourRequired                 = $this->hourRequiredS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCourseVersionSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusCourseVersion');
        $data = $business->searchCourseVersion($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.courseIdS.focus();');
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
