<?php

/**
 * Form to manipulate acdScheduleProfessor table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmScheduleProfessor extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Register schedule professor', $module));
        }
        else
        {
            parent::__construct(_M('Update schedule professor', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        //$toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnBack');

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnNew');
            $toolBar->disableButton('tbBtnSave');
            $toolBar->disableButton('tbBtnDelete');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        
        if (INCREASE_SECURITY_LEVEL == 'YES')
        {
            $toolBar->disableButton('tbBtnDelete');
        }
        
        $fields[] = $toolBar;

        $scheduleId = MIOLO::_request('scheduleId');
        if ( $function == 'update' )
        {
            $professorId = MIOLO::_request('professorId');
            $scheduleProfessorId = MIOLO::_request('scheduleProfessorId');
            $busScheduleProfessor = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $data = $busScheduleProfessor->getScheduleProfessorByScheduleProfessorId($scheduleProfessorId);
        }

        $busSchedule  = $MIOLO->getBusiness($module, 'BusSchedule');
        $scheduleData = $busSchedule->getSchedule($scheduleId);

        $busGroup  = $MIOLO->getBusiness($module, 'BusGroup');
        $groupData = $busGroup->getGroup($scheduleData->groupId);

        $busCurricularComponent  = $MIOLO->getBusiness($module, 'BusCurricularComponent');
        $curricularComponentData = $busCurricularComponent->getCurricularComponent($groupData->curriculumCurricularComponentId,$groupData->curriculumCurricularComponentVersion);
        $busUnit = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitData = $busUnit->getUnit($scheduleData->unitId);

        $fields[] = new MHiddenField('scheduleId', $scheduleId);
        $fields[] = new MHiddenField('scheduleProfessorId', $scheduleProfessorId);
        $fields[] = new MHiddenField('scheduleLearningPeriodId', $scheduleData->scheduleLearningPeriodId);
        $fields[] = new MHiddenField('groupId', $groupData->groupId);
        $fields[] = new MHiddenField('groupName', $curricularComponentData->shortName);
        $fields[] = new MHiddenField('learningPeriodId', $groupData->learningPeriodId);
        // fields used by professor lookup
        $fields[] = new MHiddenField('curriculumCurricularComponentId', $groupData->curriculumCurricularComponentId);
        $fields[] = new MHiddenField('curriculumCurricularComponentVersion', $groupData->curriculumCurricularComponentVersion);
        $fields[] = new MTextLabel('group', $groupData->groupId . ' ' . $curricularComponentData->shortName, _M('Offered curricular component', $module));

        $fields[] = new MTextLabel('schedule', $scheduleId, _M('Schedule id', $module));
        $fields[] = new MTextLabel('unit', $scheduleData->unitId . ' ' . $unitData->description, _M('Unit', $module));
        $fields[] = new MTextLabel('scheduleLearningPeriod', $scheduleData->scheduleLearningPeriodId . ' ' . $scheduleData->scheduleLearningPeriodDescription, _M('Schedule learning period', $module));

        $professorLabel = new MText('professorlabel', _M('Professor',$module) . ':');
        $professorLabel->setWidth(FIELD_CONTAINER_SIZE);
        $professorLabel->setClass('m-caption m-caption-required');
        $params = array('curricularComponentId'      => 'curriculumCurricularComponentId',
                        'curricularComponentVersion' => 'curriculumCurricularComponentVersion'); 
        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, $params, true);
        $professorId->setJsHint(_M('Professor id',$module));
        $validators[] = new MIntegerValidator('professorId', _M('Professor',$module), 'optional');

        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', FIELD_DESCRIPTION_SIZE);
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Professor name',$module));
        
        $hctProfessor = new MHContainer('hctProfessor', array( $professorLabel, $professorId, $professorName) );
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;
        
        

        $isInstitutionalEvaluationLabel = new MText('isInstitutionalEvaluationLabel', _M('Is it institutional evaluation',$module) . '?');
        $isInstitutionalEvaluationLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isInstitutionalEvaluation = new MRadioButtonGroup('isInstitutionalEvaluation', null, SAGU::listYesNo(1), $this->getFormValue('isInstitutionalEvaluation', $data->isInstitutionalEvaluation) ? $this->getFormValue('isInstitutionalEvaluation', $data->isInstitutionalEvaluation) : DB_TRUE, null, 'horizontal');
        $isInstitutionalEvaluation->setShowLabel(false);

        $hctIsInstitutionalEvaluation = new MHContainer('hctIsInstitutionalEvaluation', array($isInstitutionalEvaluationLabel, $isInstitutionalEvaluation));
        $fields[] = $hctIsInstitutionalEvaluation;

        if ( strlen((string)$this->getFormValue('weight','')) == 0 )
        {
            $weightValue = $data->weight;
        }
        else
        {
            $weightValue = $this->getFormValue('weight');
        }
        $weight = new MTextField('weight', $weightValue, _M('Weight', $module), 15, _M('from 0 to 100', $module));
        $weight->setJsHint(_M('Enter the weight',$module));
        $fields[] = $weight;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        //$validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', '', 'optional') );
        $fields[] = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', '', 'optional') );
        $fields[] = $endDate;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        if ( $function == 'insert' )
        {
            $btn[]    = new MButton('btnMoreOne',  _M('Save and offer other curricular component', $module));
            $btn[]    = new MButton('btnSchedule', _M('Save and insert other schedule', $module));
            $btn[]    = new MButton('btnMore',     _M('Save and insert other professor', $module));
            $btn[]    = new MButton('tbBtnSave',   _M('Save and exit', $module));
            $div1     = new MDiv('div1', $btn, null, 'align=center');
            $fields[] = $div1;
            
            $filters->scheduleId = $this->getFormValue('scheduleId', $data->scheduleId);

            $busScheduleProfessor  = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $scheduleProfessorData = $busScheduleProfessor->searchScheduleProfessor($filters);

            if ( count($scheduleProfessorData) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module,'GrdScheduleProfessorSearch',$filters);
                $grdResults->setData($scheduleProfessorData);

                $grdResults->setTitle(_M('Professors', $module));
                $fields[] = new MSeparator();
                $fields[] = $grdResults;
            }
        }
        elseif ( $function == 'update' )
        {
            $btn[]    = new MButton('btnMore',    _M('Save and insert other professor', $module));

            $btn[]    = new MButton('btnExit',    _M('Exit', $module));
            $div1     = new MDiv('div1', $btn, null, 'align=center');
            $fields[] = $div1;
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user clicks the insert other group button
     **/
    public function btnSchedule_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $data             = $this->getTypesData();
        
        if (strlen((string)$data->professorId) == 0)
        {
            $msg = _M('You must inform a valid professor to continue', $module);
            
            $this->addInfo($msg);
        }
        else
        {
            $business         = $MIOLO->getBusiness($module, 'BusScheduleProfessor');

            $businessScheduleProfessor      = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $businessScheduleLearningPeriod = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
            $businessSchedule               = $MIOLO->getBusiness($module, 'BusSchedule');

            $dataSchedule                   = $businessSchedule->getSchedule($data->scheduleId);
            $dataScheduleLearningPeriod     = $businessScheduleLearningPeriod->getScheduleLearningPeriod($dataSchedule->scheduleLearningPeriodId);

            if( $event === 'btnSchedule_click')
            {
                $scheduleConflict = MIOLO::_request('scheduleConflict');

                if ( strToUpper($scheduleConflict) == strToUpper('false'))
                {
                        $scheduleConflict = false;
                }
                elseif ( strToUpper($scheduleConflict) == strToUpper('true'))
                {
                        $scheduleConflict = true;
                }
            }

            if ( !isSet($scheduleConflict) )
            {
                $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
            }

            if ( count($businessScheduleProfessor->getErrors()) > 0 )
            {
                $msg  = _M('Error executing requested operation.', $module);

                $opts   = array('function'                  => 'insert',
                                'scheduleId'                => $data->scheduleId,
                                'groupId'                   => $data->groupId,
                                'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                'weight'                    => $data->weight,
                                'professorId'               => $data->professorId,
                                'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId
                                );

                $goto = $MIOLO->getActionURL( $module, $action, null, $opts );

                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
            else
            {
                if ( $scheduleConflict == true ) //Have schedule conflict
                {
                    $msg = _M('Already exist one group in this schedule, to this respective date or interval date, to this respective professor. Do you want INSERT exactly thus?', $module);
                    $caption = _M('Question',$module);

                    $opts   = array('event'                     => 'btnSchedule_click',
                                    'function'                  => 'insert',
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $data->professorId,
                                    'scheduleConflict'          => 'false',
                                    'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId);

                    $opts1  = array('function'                  => 'insert',
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $data->professorId,
                                    'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId);

                    $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

                    $goto    = SAGU::getStackBackUrl();

                    $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts1);

                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
                elseif ( $scheduleConflict === false )
                {
                    $businessScheduleProfessor->insertScheduleProfessor($data);
                }

                $this->page->mGoto($MIOLO->getActionURL($module, 'main:process:group:schedule', null, array('groupId'=>$data->groupId, 'learningPeriodId'=>$data->learningPeriodId, 'function'=>'insert')));
            }
        }
    }
    /**
     * Event triggered when user clicks the insert other button
     **/
    public function btnMore_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $data                           = $this->getTypesData();
        
        if (strlen((string)$data->professorId) == 0)
        {
            $msg = _M('You must inform a valid professor to continue', $module);
            
            $this->addInfo($msg);
        }
        else
        {
            $businessScheduleProfessor      = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $businessScheduleLearningPeriod = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
            $businessSchedule               = $MIOLO->getBusiness($module, 'BusSchedule');

            $dataSchedule                   = $businessSchedule->getSchedule($data->scheduleId);

            $dataScheduleLearningPeriod     = $businessScheduleLearningPeriod->getScheduleLearningPeriod($dataSchedule->scheduleLearningPeriodId);

            if ( $function == 'insert' )
            {
                if( $event === 'btnMore_click' )
                {
                    $scheduleConflict = MIOLO::_request('scheduleConflict');

                    if ( strToUpper($scheduleConflict) == strToUpper('false'))
                    {
                            $scheduleConflict = false;
                    }
                    elseif ( strToUpper($scheduleConflict) == strToUpper('true'))
                    {
                            $scheduleConflict = true;
                    }
                }

                if ( !isSet($scheduleConflict) )
                {
                    $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                }

                if ( count($businessScheduleProfessor->getErrors()) > 0 )
                {
                    $msg  = _M('Error executing requested operation.', $module);

                    $opts   = array('function'                  => $function,
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $data->professorId,
                                    'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                    'groupName'                 => $data->groupName
                                    );

                    $goto = $MIOLO->getActionURL( $module, $action, null, $opts );

                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                    $caption = _M('Error',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
                else
                {
                    if ( $scheduleConflict == true ) //Have schedule conflict
                    {
                        $msg = _M('Already exist one group in this schedule, to this respective date or interval date, to this respective professor. Do you want INSERT exactly thus?', $module);
                        $caption = _M('Question',$module);

                        $opts   = array('event'                     => 'btnMore_click',
                                        'function'                  => 'insert',
                                        'scheduleId'                => $data->scheduleId,
                                        'groupId'                   => $data->groupId,
                                        'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                        'weight'                    => $data->weight,
                                        'professorId'               => $data->professorId,
                                        'scheduleConflict'          => 'false',
                                        'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                        'groupName'                 => $data->groupName);

                        $opts1  = array('function'                  => $function,
                                        'scheduleId'                => $data->scheduleId,
                                        'groupId'                   => $data->groupId,
                                        'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                        'weight'                    => $data->weight,
                                        'professorId'               => $data->professorId,
                                        'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                        'groupName'                 => $data->groupName);

                        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

                        $goto    = SAGU::getStackBackUrl();

                        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts1);

                        $MIOLO->question($msg, $gotoYes, $gotoNo);
                    }
                    elseif ( $scheduleConflict === false )
                    {
                        if ( $function == 'insert' )
                        {
                            $businessScheduleProfessor->insertScheduleProfessor($data);
                        }
                        elseif ( $function == 'update' )
                        {
                            $businessScheduleProfessor->updateScheduleProfessor($data);
                        }
                    }

                    $opts = array('scheduleId' => $data->scheduleId, 'groupId' => $data->groupId, 'scheduleLearningPeriodId' => $dataScheduleLearningPeriod->scheduleLearningPeriodId, 'groupName' => $data->groupName, 'function'=>'insert');

                    if ( $function == 'insert' )
                    {
                        $msg = _M('Professor inserted', $module);
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    elseif ( $function == 'update' )
                    {
                        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
                    }
                }
            }
            elseif ( $function == 'update' )
            {
                if ( $data->professorIdOld =! $data->professorId )     //UPDATE com checagem de horário
                {
                    if( $event === 'btnMore_click' )
                    {
                        $scheduleConflict = MIOLO::_request('scheduleConflict');

                        if ( strToUpper($scheduleConflict) == strToUpper('false'))
                        {
                                $scheduleConflict = false;
                        }
                        elseif ( strToUpper($scheduleConflict) == strToUpper('true'))
                        {
                                $scheduleConflict = true;
                        }
                    }

                    if ( !isSet($scheduleConflict) )
                    {
                        $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                    }

                    if ( count($businessScheduleProfessor->getErrors()) > 0 )
                    {
                        $msg  = _M('Error executing requested operation.', $module);

                        $opts   = array('function'                  => $function,
                                        'scheduleId'                => $data->scheduleId,
                                        'groupId'                   => $data->groupId,
                                        'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                        'weight'                    => $data->weight,
                                        'professorId'               => $data->professorId,
                                        'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                        'groupName'                 => $data->groupName
                                        );

                        $goto = $MIOLO->getActionURL( $module, $action, null, $opts );

                        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                        $caption = _M('Error',$module);
                        $MIOLO->error( $msg, $goto, $caption );
                    }
                    else
                    {
                        if ( $scheduleConflict == true ) //Have schedule conflict
                        {
                            $msg = _M('Already exist one group in this schedule, to this respective date or interval date, to this respective professor. Do you want INSERT exactly thus?', $module);
                            $caption = _M('Question',$module);

                            $opts   = array('event'                     => 'btnMore_click',
                                            'function'                  => 'update',
                                            'scheduleId'                => $data->scheduleId,
                                            'groupId'                   => $data->groupId,
                                            'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                            'weight'                    => $data->weight,
                                            'professorId'               => $data->professorId,
                                            'scheduleConflict'          => 'false',
                                            'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                            'groupName'                 => $data->groupName);

                            $opts1  = array('function'                  => $function,
                                            'scheduleId'                => $data->scheduleId,
                                            'groupId'                   => $data->groupId,
                                            'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                            'weight'                    => $data->weight,
                                            'professorId'               => $data->professorId,
                                            'scheduleLearningPeriodId'  => $dataScheduleLearningPeriod->scheduleLearningPeriodId,
                                            'groupName'                 => $data->groupName);

                            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

                            $goto    = SAGU::getStackBackUrl();

                            $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts1);

                            $MIOLO->question($msg, $gotoYes, $gotoNo);
                        }
                        elseif ( ($scheduleConflict =! true) || ($scheduleConflict === null) )
                        {
                            $businessScheduleProfessor->updateScheduleProfessor($data);

                            $opts = array('scheduleId' => $data->scheduleId, 'groupId' => $data->groupId, 'scheduleLearningPeriodId' => $dataScheduleLearningPeriod->scheduleLearningPeriodId, 'groupName' => $data->groupName, 'scheduleProfessorId' => $data->scheduleProfessorId, 'professorId' => $data->professorId, 'beginDate' => $data->beginDate, 'endDate' => $data->endDate, 'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation, 'weight' => $data->weight, 'function'=>'insert');

                            $msg = _M('Professor updated', $module);
                            $caption = _M('Information', $module);
                            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                        }
                    }
                }
                else
                {
                    //UPDATE normal
                    $businessScheduleProfessor->updateScheduleProfessor($data);

                    $opts = array('scheduleId' => $data->scheduleId, 'groupId' => $data->groupId, 'scheduleLearningPeriodId' => $dataScheduleLearningPeriod->scheduleLearningPeriodId, 'groupName' => $data->groupName, 'scheduleProfessorId' => $data->scheduleProfessorId, 'professorId' => $data->professorId, 'beginDate' => $data->beginDate, 'endDate' => $data->endDate, 'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation, 'weight' => $data->weight, 'function'=>'insert');

                    $msg = _M('Professor updated', $module);
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
            }
        }
    }
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        
        if (strlen((string)$data->professorId) == 0)
        {
            $msg = _M('You must inform a valid professor to continue', $module);
            
            $this->addInfo($msg);
        }
        else
        {
            $opts   = array('event'    => 'tbBtnDelete_confirm',
                            'function' => 'delete',
                            'scheduleProfessorId' => MIOLO::_request('scheduleProfessorId'),
                            'scheduleId' => MIOLO::_request('scheduleId'),
                            'professorId' => MIOLO::_request('professorId'));

            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

            // This return the primary key to the search form so that user
            // can see the record he would delete
            $opts   = array('scheduleIdS' => MIOLO::_request('scheduleId'),
                            'professorIdS' => MIOLO::_request('professorId'));
            $goto    = SAGU::getStackBackUrl();
            $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            $caption = _M('Question',$module);
            $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
        }
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        //$action = MIOLO::getCurrentAction();

        $action = 'main:process:group:group';

        $business = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
        $ok = $business->deleteScheduleProfessor($this->scheduleProfessorId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $data     = $this->getTypesData();
        
        if (strlen((string)$data->professorId) == 0)
        {
            $msg = _M('You must inform a valid professor to continue', $module);
            
            $this->addInfo($msg);
        }
        else
        {
            $businessScheduleProfessor      = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $businessScheduleLearningPeriod = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
            $businessSchedule               = $MIOLO->getBusiness($module, 'BusSchedule');

            $dataSchedule                   = $businessSchedule->getSchedule($data->scheduleId);
            $dataScheduleLearningPeriod     = $businessScheduleLearningPeriod->getScheduleLearningPeriod($dataSchedule->scheduleLearningPeriodId);

            $filters1->scheduleProfessorId  = $data->scheduleProfessorId;
            $dataScheduleProfessor          = $businessScheduleProfessor->searchScheduleProfessor($filters1);

            $scheduleConflict               = MIOLO::_request('scheduleConflict');

            if( $event === 'tbBtnSave:click')
            {
                if ( strToUpper($scheduleConflict) == strToUpper('false'))
                {
                        $scheduleConflict = false;
                }
                elseif ( strToUpper($scheduleConflict) == strToUpper('true'))
                {
                        $scheduleConflict = true;
                }
            }

            if ( $function == 'insert' )
            {
                if ( !isSet($scheduleConflict) && ($data->professorId != $dataScheduleProfessor[0][1]))
                {
                    $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                }
            }
            elseif ( $function == 'update' )
            {
                if ( !isSet($scheduleConflict))
                {
                    $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                }
            }

            if ( count($businessScheduleProfessor->getErrors()) > 0 )
            {
                $msg  = _M('Error executing requested operation.', $module);

                $opts   = array('function'                  => 'update',
                                'scheduleId'                => $data->scheduleId,
                                'groupId'                   => $data->groupId,
                                'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                'weight'                    => $data->weight,
                                'professorId'               => $data->professorId,
                                'scheduleProfessorId'       => $data->scheduleProfessorId
                                );

                $goto = $MIOLO->getActionURL( $module, $action, null, $opts );

                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
            else
            {
                if ( $scheduleConflict === true ) //Have schedule conflict
                {
                    $msg = _M('Already exist one group in this schedule, to this respective date or interval date, to this respective professor. Do you want INSERT exactly thus?', $module);
                    $caption = _M('Question',$module);

                    $opts   = array('event'                     => 'tbBtnSave_click',
                                    'function'                  => $function,
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $data->professorId,
                                    'scheduleConflict'          => 'false',
                                    'scheduleProfessorId'       => $data->scheduleProfessorId,
                                    'scheduleLearningPeriodId'  => $dataSchedule->scheduleLearningPeriodId);

                    $opts1  = array('function'                  => $function,
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $dataScheduleProfessor[0][1],
                                    'scheduleProfessorId'       => $data->scheduleProfessorId,
                                    'scheduleLearningPeriodId'  => $dataSchedule->scheduleLearningPeriodId);

                    $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

                    $goto    = SAGU::getStackBackUrl();

                    $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts1);

                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
                else
                {
                    //Update - Hoje é executado apenas o update aqui
                    if ( $function == 'update' )
                    {
                        $ok  = $businessScheduleProfessor->updateScheduleProfessor($data);
                        $msg = MSG_RECORD_UPDATED;
                    }
                    elseif ( $function == 'insert' )
                    {
                        $businessScheduleProfessor->insertScheduleProfessor($data);

                        $opts = array('scheduleId' => $data->scheduleId, 'groupIdS' => $data->groupId, 'scheduleLearningPeriodId' => $dataSchedule->scheduleLearningPeriodId, 'groupName' => $data->groupName, 'function'=>'search');

                        $action = 'main:process:group:group';
                        
                        $businessProfessor = $MIOLO->getBusiness('basic', 'BusPhysicalPersonProfessor');
                        $professorData     = $businessProfessor->getPhysicalPersonProfessor($data->professorId);
                        
                        $msg = _M('Registered group', $module) . ' ' . $data->groupId . ' - ' . $data->groupName . ' - ' . $data->scheduleLearningPeriod . ' - ' . _M('Professor', $module) . ': ' . $professorData->name;
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                }

                if ( $ok )
                {
                    // This returns the primary key data to the search form
                    // so that the user can see the inserted/updated record.
                    $opts = array('scheduleId'  => $data->scheduleId, 
                                  'professorId' => $data->professorId,
                                  'scheduleProfessorId' => $data->scheduleProfessorId,
                                  'function'    => $function);

                    if ( $function == 'update' )
                    {
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    else
                    {
                        unset($opts);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
     
                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Question',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                else
                {
                    $msg  = _M('Error executing requested operation.',$module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }


                $this->page->mGoto($MIOLO->getActionURL($module, $action, null, array('scheduleId'=>$data->scheduleId, 'groupId' => $data->groupId, 'professorId' => $data->professorId, 'function'=>'update')));
            }
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function BtnMoreOne_click($sender=NULL)
    {
        $MIOLO                          = MIOLO::getInstance();
        $module                         = MIOLO::getCurrentModule();
        $action                         = MIOLO::getCurrentAction();
        $function                       = MIOLO::_request('function');
        $event                          = MIOLO::_request('event');

        $data                           = $this->getTypesData();

        if (strlen((string)$data->professorId) == 0)
        {
            $msg = _M('You must inform a valid professor to continue', $module);
            
            $this->addInfo($msg);
        }
        else
        {
            $businessScheduleProfessor      = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
            $businessScheduleLearningPeriod = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
            $businessSchedule               = $MIOLO->getBusiness($module, 'BusSchedule');

            $dataSchedule                   = $businessSchedule->getSchedule($data->scheduleId);
            $dataScheduleLearningPeriod     = $businessScheduleLearningPeriod->getScheduleLearningPeriod($dataSchedule->scheduleLearningPeriodId);

            $filters1->scheduleProfessorId  = $data->scheduleProfessorId;
            $dataScheduleProfessor          = $businessScheduleProfessor->searchScheduleProfessor($filters1);

            $scheduleConflict               = MIOLO::_request('scheduleConflict');

            if( $event === 'BtnMoreOne:click')
            {
                if ( strToUpper($scheduleConflict) == strToUpper('false'))
                {
                        $scheduleConflict = false;
                }
                elseif ( strToUpper($scheduleConflict) == strToUpper('true'))
                {
                        $scheduleConflict = true;
                }
            }

            if ( $function == 'insert' )
            {
                if ( !isSet($scheduleConflict) && ($data->professorId != $dataScheduleProfessor[0][1]))
                {
                    $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                }
            }
            elseif ( $function == 'update' )
            {
                if ( !isSet($scheduleConflict))
                {
                    $scheduleConflict = $businessScheduleProfessor->scheduleConflict($data->professorId, $dataScheduleLearningPeriod->learningPeriodId, $data->scheduleId);
                }
            }

            if ( count($businessScheduleProfessor->getErrors()) > 0 )
            {
                $msg  = _M('Error executing requested operation.', $module);

                $opts   = array('function'                  => $function,
                                'scheduleId'                => $data->scheduleId,
                                'groupId'                   => $data->groupId,
                                'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                'weight'                    => $data->weight,
                                'professorId'               => $data->professorId,
                                'scheduleProfessorId'       => $data->scheduleProfessorId,
                                'beginDate'                 => $data->beginDate,
                                'endDate'                   => $data->endDate
                                );

                $goto = $MIOLO->getActionURL( $module, $action, null, $opts );

                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
            else
            {
                if ( $scheduleConflict === true ) //Have schedule conflict
                {
                    $msg = _M('Already exist one group in this schedule, to this respective date or interval date, to this respective professor. Do you want INSERT exactly thus?', $module);
                    $caption = _M('Question',$module);

                    $opts   = array('event'                     => 'BtnMoreOne_click',
                                    'function'                  => $function,
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $data->professorId,
                                    'scheduleConflict'          => 'false',
                                    'scheduleProfessorId'       => $data->scheduleProfessorId,
                                    'scheduleLearningPeriodId'  => $dataSchedule->scheduleLearningPeriodId);

                    $opts1  = array('function'                  => $function,
                                    'scheduleId'                => $data->scheduleId,
                                    'groupId'                   => $data->groupId,
                                    'isInstitutionalEvaluation' => $data->isInstitutionalEvaluation,
                                    'weight'                    => $data->weight,
                                    'professorId'               => $dataScheduleProfessor[0][1],
                                    'scheduleProfessorId'       => $data->scheduleProfessorId,
                                    'scheduleLearningPeriodId'  => $dataSchedule->scheduleLearningPeriodId);

                    $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

                    $goto    = SAGU::getStackBackUrl();

                    $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts1);

                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
                else
                {
                    //Update - Hoje é executado apenas o update aqui
                    if ( $function == 'update' )
                    {
                        $ok  = $businessScheduleProfessor->updateScheduleProfessor($data);
                        $msg = MSG_RECORD_UPDATED;
                    }
                    elseif ( $function == 'insert' )
                    {
                        $businessScheduleProfessor->insertScheduleProfessor($data);

                        $opts = array('scheduleId' => $data->scheduleId, 'groupId' => $data->groupId, 'scheduleLearningPeriodId' => $dataSchedule->scheduleLearningPeriodId, 'groupName' => $data->groupName, 'function'=>'insert');

                        $action = 'main:process:group:group';

                        $msg = _M('Professor inserted', $module);
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                }

                if ( $ok )
                {
                    // This returns the primary key data to the search form
                    // so that the user can see the inserted/updated record.
                    $opts = array('scheduleId'  => $data->scheduleId, 
                                  'professorId' => $data->professorId,
                                  'scheduleProfessorId' => $data->scheduleProfessorId,
                                  'function'    => $function);

                    if ( $function == 'update' )
                    {
                        $caption = _M('Information', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    else
                    {
                        unset($opts);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
     
                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Question',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                else
                {
                    $msg  = _M('Error executing requested operation.',$module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }


                $this->page->mGoto($MIOLO->getActionURL($module, $action, null, array('scheduleId'=>$data->scheduleId, 'groupId' => $data->groupId, 'professorId' => $data->professorId, 'function'=>'update')));
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();

        $data = new AcdScheduleProfessor();
        $data->scheduleProfessorId       = $this->scheduleProfessorId->value;
        $data->scheduleLearningPeriodId  = $this->scheduleLearningPeriodId->value;
        $data->scheduleId                = $this->scheduleId->value;
        $data->groupId                   = $this->groupId->value;
        $data->groupName                 = $this->groupName->value;
        $data->learningPeriodId          = $this->learningPeriodId->value;
        $data->isInstitutionalEvaluation = $this->isInstitutionalEvaluation->value;
        $data->weight                    = $this->weight->value;
        $data->beginDate                 = $this->beginDate->value;
        $data->endDate                   = $this->endDate->value;

        $business                = $MIOLO->getBusiness($module, 'BusScheduleProfessor');
        $searchScheduleProfessor = $business->searchScheduleProfessor($data);

        $data->professorId               = $this->professorId->value;
        
        $data->scheduleLearningPeriod    = $this->scheduleLearningPeriod->value;

        if ( is_array($searchScheduleProfessor) )
        {
            $data->professorIdOld = $searchScheduleProfessor[0][1]; //Coloco o professorId old aqui, para não dar problema no search
        }
        return $data;
    }

    public function btnExit_click()
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();

        $data             = $this->getTypesData();
        $businessSchedule = $MIOLO->getBusiness($module, 'BusSchedule');

        $dataSchedule     = $businessSchedule->getSchedule($data->scheduleId);

        $action   = 'main:process:group:group';

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, array('groupIdS' => $dataSchedule->groupId, 'professorIdS' => $data->professorId)));
    }
}

?>
