<?php

/**
 * Form to manipulate acdMovementContractComplement table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmMovementContractComplement extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $contractId = $_GET['contractId'] ? $_GET['contractId'] : $_POST['contractId'];
            $stateTime  = $_GET['stateTime']  ? $_GET['stateTime']  : $_POST['stateTime'];
            $stateContractId = $_GET['stateContractId'] ? $_GET['stateContractId'] : $_POST['stateContractId'];
            $stateContractFieldId = $_GET['stateContractFieldId'] ? $_GET['stateContractFieldId'] : $_POST['stateContractFieldId'];

            $business = $MIOLO->getBusiness($module,'BusMovementContractComplement');
            $data = $business->getMovementContractComplement($contractId, $stateContractId, $stateContractFieldId, $stateTime);
            $fields[] = new MHiddenField('contractId', $contractId);
            $fields[] = new MHiddenField('stateTime', $stateTime);
            $fields[] = new MHiddenField('stateContractId', $stateContractId);
            $fields[] = new MHiddenField('stateContractFieldId', $stateContractFieldId);

            $fields[] = new MTextLabel('contractId', $contractId, _M('Contract id',$module));
            $fields[] = new MTextLabel('contractPersonId', $data->contractPersonId, _M('Contract person id',$module));
            $fields[] = new MTextLabel('contractPersonName', $data->contractPersonName, _M('Contract person name',$module));
            $fields[] = new MTextLabel('stateContractId', $stateContractId, _M('State id',$module));
            $fields[] = new MTextLabel('stateDescription', $data->stateDescription, _M('State description',$module));
            $fields[] = new MTextLabel('stateContractFieldId', $stateContractFieldId, _M('State contract field id',$module));
            $fields[] = new MTextLabel('stateContractFieldDescription', $data->stateContractFieldDescription, _M('State contract field description',$module));
            $fields[] = new MTextLabel('stateTime', $data->stateTime, _M('Time',$module));

            $this->page->onLoad('document.' . $this->name . '.value.focus();');
        }
        else
        {

            $personLabel = new MText('personLabel', _M('Person',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $contractPersonId     = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());

            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), NULL, FIELD_DESCRIPTION_SIZE);
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Person name',$module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonId, $contractPersonName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel= new MText('contractLabel', _M('Contract',$module) . ':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractLabel->setClass('m-caption m-caption-required');
            $flds[]                = $contractLabel;

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $flds[] = $contractId;
            $validators[] = new MIntegerValidator('contractId', _M('Contract',$module), 'required');
            $contractId->setAutoPostBack(true);

            $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', FIELD_ID_SIZE);
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Course code',$module));
            $flds[]   = $courseId;

            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', FIELD_ID_SIZE);
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Course version',$module));
            $flds[]        = $courseVersion;

            $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Course name',$module));
            $flds[]             = $courseName;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $fields[] = new MHiddenField('limbo');

            //movimentacao contratual
            $movementContractLabel = new MText('movementContractLabel', _M('Movement contract',$module) . ':');
            $movementContractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]                = $movementContractLabel;

            $movementContractId = new MLookupField('movementContractId', $this->getFormValue('movementContractId', $data->movementContractId), '', '', 'limbo, limbo, stateContractId, stateDescription, stateTime', $module, 'MovementContract', null, array('contractId' => 'contractId'), false);
            $movementContractId->setJsHint(_M('Movement contract',$module));
            $flds[]             = $movementContractId;

            $hctMovementContract = new MHContainer('hctMovementContract', $flds);
            $hctMovementContract->setShowLabel(true);
            $fields[]            = $hctMovementContract;
            unset($flds);

            //estado contratual
            $stateContractLabel= new MText('stateContractLabel', _M('State contract',$module) . ':');
            $stateContractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $stateContractLabel->setClass('m-caption m-caption-required');
            $flds[]                = $stateContractLabel;

            $stateContractId = new MLookupTextField('stateContractId', $this->getFormValue('stateContractId', $data->stateContractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'stateDescription, stateTime', $module, 'StatesContract', null, null, true);
            $validators[]    = new MRequiredValidator('stateContractId', _M('State contract',$module), 'required');
            $stateContractId->setJsHint(_M('State contract id',$module));
            $flds[]          = $stateContractId;
            $validators[]    = new MIntegerValidator('stateContractId', _M('State contract',$module), 'optional');

            $stateDescription = new MTextField('stateDescription', $this->stateDescription->value, '', FIELD_DESCRIPTION_SIZE);
            $stateDescription->setReadOnly(true);
            $stateDescription->setJsHint(_M('State contract description',$module));
            $flds[]                = $stateDescription;

            $hctStateContract = new MHContainer('hctStateContract', $flds);
            $hctStateContract->setShowLabel(true);
            $fields[]    = $hctStateContract;
            unset($flds);

            //tempo
            $stateTime  = $this->getFormValue('stateTime', $data->stateTime);
            $stateTime  = new MTextField('stateTime', $stateTime, _M('State time',$module), FIELD_DATE_SIZE);
            $stateTime->setReadOnly(true);
            $fields[]   = $stateTime;

            $stateContractFieldLabel= new MText('stateContractFieldLabel', _M('State contract field',$module) . ':');
            $stateContractFieldLabel->setWidth(FIELD_CONTAINER_SIZE);
            $stateContractFieldLabel->setClass('m-caption m-caption-required');
            $flds[]                = $stateContractFieldLabel;

            $stateContractFieldId = new MLookupTextField('stateContractFieldId', $this->getFormValue('stateContractFieldId', $data->stateContractFieldId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, stateContractFieldDescription', $module, 'ContractStateField', null, null, true);
            $stateContractFieldId->setJsHint(_M('State contract field id',$module));
            $validators[] = new MIntegerValidator('stateContractFieldId', _M('State contract field',$module), 'required');
            $flds[]                = $stateContractFieldId;

            $stateContractFieldDescription = new MTextField('stateContractFieldDescription', $this->getFormValue('stateContractFieldDescription', $data->stateContractFieldDescription), '', FIELD_DESCRIPTION_SIZE);
            $stateContractFieldDescription->setReadOnly(true);
            $stateContractFieldDescription->setJsHint(_M('State contract field description',$module));
            $flds[]                = $stateContractFieldDescription;

            $hctStateContractField = new MHContainer('hctStateContractField', $flds);
            $hctStateContractField->setShowLabel(true);
            $fields[]    = $hctStateContractField;
            unset($flds);

        }

        $value = new MTextField('value', $this->getFormValue('value', $data->value), _M('Complement', $module), 40);
        $value->setJsHint(_M('Enter the value',$module));
        $validators[] = new MRequiredValidator('value', _M('Complement', $module));
        $fields[] = $value;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'                => 'tbBtnDelete_confirm',
                        'function'             => 'delete',
                        'contractId'           => MIOLO::_request('contractId'),
                        'stateTime'            => MIOLO::_request('stateTime'),
                        'stateContractId'      => MIOLO::_request('stateContractId'),
                        'stateContractFieldId' => MIOLO::_request('stateContractFieldId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('contractIdS'            => MIOLO::_request('contractId'),
                        'stateTimeS'             => MIOLO::_request('stateTime'),
                        'stateContractIdS'       => MIOLO::_request('stateContractId'),
                        'stateContractFieldIdS ' => MIOLO::_request('stateContractFieldId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusMovementContractComplement');
        $ok = $business->deleteMovementContractComplement($this->contractId->value, $this->stateContractId->value, $this->stateContractFieldId->value, $this->stateTime->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusMovementContractComplement');

        if ( $function == 'update' )
        {
            $ok  = $business->updateMovementContractComplement($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertMovementContractComplement($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.

            $opts = array('contractIdS'=> $data->contractId,
                'stateContractIdS' => $data->stateContractId,
                'stateTimeS' => $data->stateTime,
                'stateContractFieldIdS' => $data->stateContractFieldId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdMovementContractComplement();
        $data->contractId           = $this->contractId->value;
        $data->stateContractId      = $this->stateContractId->value;
        $data->stateContractFieldId = $this->stateContractFieldId->value;
        $data->stateTime            = $this->stateTime->value;
        $data->value                = $this->value->value;

        return $data;
    }

}

?>
