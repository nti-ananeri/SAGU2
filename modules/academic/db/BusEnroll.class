<?php
/**
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to pass information back to the form
 **/
class EnrollCurriculumStatus
{
    // text describing the status
    public $status;
    // translated text describing the status
    public $text;
    // color to be used when displaying status
    public $color;
    // a boolean to indicate whether to display or not the groups for a curriculum entry
    public $showGroup;
}

/**
 * Class to manipulate the acdEnroll table
 **/
class BusinessAcademicBusEnroll extends Business
{

    var $db;

    function BusinessAcademicBusEnroll()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    public function beginTransaction()
    {
        return $this->db->execute('BEGIN TRANSACTION');
    }
    
    public function endTransaction()
    {
        return $this->db->execute('COMMIT');
    }   

    /**
     * Return a specific record from the database
     *
     * @param $enrollId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEnroll($enrollId)
    {
        $sql = 'SELECT enrollId,
                       contractId,
                       groupId,
                       curriculumId,
                       TO_CHAR(dateEnroll,\'' . MASK_DATE . '\'),
                       TO_CHAR(hourEnroll,\'' . MASK_TIME . '\'),
                       TO_CHAR(dateCancellation,\'' . MASK_DATE . '\'),
                       TO_CHAR(hourCancellation,\'' . MASK_TIME . '\'),
                       reasonCancellationId,
                       note,
                       examNote,
                       finalNote,
                       concept,
                       textEvaluation,
                       frequency,
                       obsExploitation,
                       exploitationInstitutionId,
                       numberHourExploitation,
                       creditsExploitation,
                       isShowDocumentEndCourse,
                       statusId,
                       frequencyAlertEmail,
                       isInternet,
                       ip,
                       isConfirm,
                       isSetFree,
                       complement,
                       obsExploitation,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress,
                       isExploitation,
                       learningPeriodId,
                       isAdaptation,
                       isDependence,
                       CASE WHEN ( verifyEnrollAbsence(enrollId) > 0 ) THEN verifyEnrollAbsence(enrollId) ELSE 0 END,
                       CASE WHEN ( getgroupofferedhours(groupId) > 0 ) THEN getgroupofferedhours(groupId) ELSE 0 END
                  FROM acdEnroll
                 WHERE enrollId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $enrollId));

        $enroll = new acdEnroll();
        list ( $enroll->enrollId,
               $enroll->contractId,
               $enroll->groupId,
               $enroll->curriculumId,
               $enroll->dateEnroll,
               $enroll->hourEnroll,
               $enroll->dateCancellation,
               $enroll->hourCancellation,
               $enroll->reasonCancellationId,
               $enroll->note,
               $enroll->examNote,
               $enroll->finalNote,
               $enroll->concept,
               $enroll->textEvaluation,
               $enroll->frequency,
               $enroll->obsExploitation,
               $enroll->exploitationInstitutionId,
               $enroll->numberHourExploitation,
               $enroll->creditsExploitation,
               $enroll->isShowDocumentEndCourse,
               $enroll->statusId,
               $enroll->frequencyAlertEmail,
               $enroll->isInternet,
               $enroll->ip,
               $enroll->isConfirm,
               $enroll->isSetFree,
               $enroll->complement,
               $enroll->obsExploitation,
               $enroll->userName,
               $enroll->dateTime,
               $enroll->ipAddress,
               $enroll->isExploitation,
               $enroll->learningPeriodId,
               $enroll->isAdaptation,
               $enroll->isDependence,
               $enroll->absence,
               $enroll->totalHoursOffered ) = $result[0];

        return $enroll; 
    }

    /**
     * Update enroll
     *
     * @param $data (Object): Object containing all data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEnroll($data)
    {

        $this->db->execute('BEGIN');
        $data->isAdaptation = strlen((string)$data->isAdaptation)>0 ? $data->isAdaptation : DB_FALSE;
        $data->isDependence = strlen((string)$data->isDependence)>0 ? $data->isDependence : DB_FALSE;
        $sql = 'UPDATE acdEnroll
                   SET note = ?,';
        if ( $data->examNote == '--' )
        {
            $sql .= 'examNote = NULL, ';
            $args = array ( $data->note,
                        $data->finalNote,
                        $data->concept,
                        $data->textEvaluation,
                        $data->frequency,
                        $data->obsExploitation,
                        $data->exploitationInstitutionId,
                        $data->numberHourExploitation,
                        $data->creditsExploitation,
                        $data->isShowDocumentEndCourse,
                        $data->statusId,
                        $data->frequencyAlertEmail,
                        $data->isInternet,
                        $data->isConfirm,
                        $data->isSetFree,
                        $data->complement,
                        $data->isAdaptation,
                        $data->isDependence );

        }
        else
        {
            $sql .= 'examNote = ?, ';
            $args = array ( $data->note,
                        $data->examNote,
                        $data->finalNote,
                        $data->concept,
                        $data->textEvaluation,
                        $data->frequency,
                        $data->obsExploitation,
                        $data->exploitationInstitutionId,
                        $data->numberHourExploitation,
                        $data->creditsExploitation,
                        $data->isShowDocumentEndCourse,
                        $data->statusId,
                        $data->frequencyAlertEmail,
                        $data->isInternet,
                        $data->isConfirm,
                        $data->isSetFree,
                        $data->complement,
                        $data->isAdaptation,
                        $data->isDependence );

        }
        $sql .= '
                       finalNote = ?,
                       concept = ?,
                       textEvaluation = ?,
                       frequency = ?,
                       obsExploitation = ?,
                       exploitationInstitutionId = ?,
                       numberHourExploitation = ?,
                       creditsExploitation = ?,
                       isShowDocumentEndCourse = ?,
                       statusId = ?,
                       frequencyAlertEmail = ?,
                       isInternet = ?,
                       isConfirm = ?,
                       isSetFree = ?,
                       complement = ?,
                       isAdaptation = ?,
                       isDependence = ?,';

        if ( strlen((string)$data->reasonCancellationId)>0 )
        {
            $sql   .= ' reasonCancellationId = ? ';
            $args[] = $data->reasonCancellationId;
        }
        else
        {
            $sql .= ' reasonCancellationId = NULL ';
        }

        $sql   .= '         WHERE enrollId = ?';
        $args[] = $data->enrollId;

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $data->statusId == ENROLL_STATUS_ENROLLED )
        {
            //coleta os dias que essa disciplina já teve aula
            $sql = 'SELECT frequencyDate, 
                           scheduleId, 
                           turnId
                      FROM acdFrequenceEnroll
                     WHERE enrollId IN ( SELECT DISTINCT enrollId
                                           FROM acdEnroll
                                          WHERE groupId IN ( SELECT groupId
                                                               FROM acdEnroll
                                                              WHERE enrollId = ? ) )
                  GROUP BY frequencyDate, 
                           scheduleId, 
                           turnId';
            unset($args);
            $args[] = $data->enrollId;

            $result2 = $this->db->query(SAGU::prepare($sql, $args));

            if ( count($result2)>0 )
            {
                foreach ( $result2 as $row2 )
                {
                    $sql = 'SELECT count(*)
                              FROM acdFrequenceEnroll
                             WHERE enrollId      = ?
                               AND turnId        = ?
                               AND scheduleId    = ?
                               AND frequencyDate = ?';
                    $args = array ( $data->enrollId,
                                    $row2[2],
                                    $row2[1],
                                    $row2[0] );

                    $result3 = $this->db->query(SAGU::prepare($sql, $args));
                    if ( ! ($result3[0][0] > 0) )
                    {
                        $sql = 'INSERT INTO acdFrequenceEnroll
                                            ( enrollId,
                                              turnId,
                                              scheduleId,
                                              frequencyDate,
                                              frequency ) 
                                    VALUES ( ?, ?, ?, ?, ? )';
                        $args = array ( $data->enrollId,
                                        $row2[2],
                                        $row2[1],
                                        $row2[0],
                                        0 );

                        $result = $this->db->execute(SAGU::prepare($sql, $args));
                    }
                }
            }
        }
        if ( is_array($data->degreeNote) )
        {
            if ( count($data->degreeNote) > 0 )
            {
                foreach ( $data->degreeNote as $degreeId => $value )
                {
                    unset($args);
                    $sql = 'SELECT * FROM acdDegreeEnroll WHERE enrollId = ?::integer AND degreeId = ?::integer';
                    $args[] = $data->enrollId;
                    $args[] = $degreeId;
                    $vconsulta = $this->db->query(SAGU::prepare($sql, $args));
                    unset($args);
                    if ( count($vconsulta) > 0 )
                    {
                        if ( $value == '--' )
                        {
                            $sql = 'UPDATE acdDegreeEnroll SET note = null, isnotpresent = true WHERE degreeId = ?::integer AND enrollId = ?::integer';
    
                            $args[] = $degreeId;
                            $args[] = $data->enrollId;
                        }
                        else
                        {
                            $sql = 'UPDATE acdDegreeEnroll SET note = ?, isnotpresent = false WHERE degreeId = ?::integer AND enrollId = ?::integer';
                            $args[] = $value;
                            $args[] = $degreeId;
                            $args[] = $data->enrollId;
                        }   
                    }
                    else
                    {
                        if ( $value == '--' )
                        {
                            $sql = 'INSERT INTO acdDegreeEnroll ( degreeId, enrollId, isNotPresent ) VALUES ( ?::integer, ?::integer, TRUE ) ';
                            $args[] = $degreeId;
                            $args[] = $data->enrollId;
                        }
                        else
                        {
                            $sql = 'INSERT INTO acdDegreeEnroll ( note, degreeId, enrollId, isNotPresent ) VALUES ( ?::float, ?::integer, ?::integer, FALSE ) ';
                            $args[] = $value;
                            $args[] = $degreeId;
                            $args[] = $data->enrollId;
                        }   
                    }
                    $this->db->execute(SAGU::prepare($sql, $args));

                }
            }
        }
        $this->db->execute('COMMIT');

        return $result;
    }

    /**
     * Returns the specified contract's curriculum
     **/
    function getContractCurriculum($contractId=null, $learningPeriodId=null)
    {
        $freeSeminariesIds = explode(',', str_replace(' ', '', FREE_SEMINARY_CURRICULAR_COMPONENT_IDS));

        if (count($freeSeminariesIds) > 0)
        {
            foreach ($freeSeminariesIds as $freeSem)
            {
                $freeSem = '\'' . $freeSem . '\'';

                $freeSeminariesNew[] = $freeSem;
            }
        }

        $freeSeminariesIds = implode(',', $freeSeminariesNew);

        $sql = 'SELECT B1.semester,
                       B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       C1.name AS curricularComponentName,
                       B1.curriculumId,
                       C1.curricularComponentGroupId,
                       B1.curricularComponentGroupElectiveId,
                       B1.curricularComponentTypeId ';

        if ( strlen((string)$contractId)>0 )
        {
            $sql .= ' FROM acdContract A1
                INNER JOIN acdCurriculum B1
                        ON (    B1.courseId = A1.courseId
                            AND B1.courseVersion = A1.courseVersion
                            AND B1.unitId = A1.unitId
                            AND B1.turnId = A1.turnId
                            AND (    B1.endDate IS NULL
                                  OR B1.endDate > now()))';
        }
        else
        {
            $sql .= ' FROM acdCurriculum A1
                INNER JOIN acdCurriculum B1
                        ON (    A1.curriculumId = B1.curriculumId
                            AND B1.courseId = A1.courseId
                            AND B1.courseVersion = A1.courseVersion
                            AND B1.unitId = A1.unitId
                            AND B1.turnId = A1.turnId
                            AND (    B1.endDate IS NULL
                                  OR B1.endDate > now()))';
        }

        $sql .= 'INNER JOIN acdCurricularComponent C1
                         ON (    C1.curricularComponentId = B1.curricularComponentId
                             AND C1.curricularComponentVersion = B1.curricularComponentVersion ) ';

        if ( strlen((string)$contractId)>0 )
        {
            $sql .= ' WHERE A1.contractId = ?';
            $args = array ( $contractId, $learningPeriodId);
        }
        else
        {
            $sql .= ' WHERE A1.courseId = (SELECT courseId FROM acdLearningPeriod WHERE learningperiodId = ?)
                        AND A1.courseVersion = (SELECT courseVersion FROM acdLearningPeriod WHERE learningperiodId = ?)
                        AND A1.turnId = (SELECT turnId FROM acdLearningPeriod WHERE learningperiodId = ?)
                        AND A1.unitId = (SELECT unitId FROM acdLearningPeriod WHERE learningperiodId = ?)';
            $args = array ( $learningPeriodId, $learningPeriodId, $learningPeriodId, $learningPeriodId, $learningPeriodId);
        }

        $sql .= '  AND (   C1.endDate IS NULL
                        OR C1.endDate > (SELECT beginDate FROM acdLearningPeriod WHERE learningperiodId = ?) )
                   AND ( (B1.curriculumTypeId IN (' . CURRICULUM_TYPE_NON_OPTIONAL . ') AND (B1.semester <> 0)) OR
                         (B1.curricularComponentId IN (' . $freeSeminariesIds . ')) )
              ORDER BY CASE WHEN B1.semester = 0 THEN 9999 ELSE B1.semester END,
                       C1.name';

        $result = $this->db->query(SAGU::prepare($sql,$args));

        return $result;
    }

    /**
     * Returns the specified curricular components groups for the specified learning period
     **/
    function getGroups($curricularComponentId, $curricularComponentVersion, $learningPeriodId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';

        $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);

        $sql = 'SELECT A1.groupId,
                       B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       A1.vacant,
                       A1.totalEnrolled
                  FROM acdGroup A1
            INNER JOIN acdCurriculum B1
                    ON (B1.curriculumId = A1.curriculumId)
            INNER JOIN acdLearningPeriod C1
                    ON (C1.learningPeriodId = A1.learningPeriodId)
                       -- este EXISTS faz com que somente disciplinas com horario sejam exibidas
                 WHERE EXISTS (SELECT \'X\'
                                 FROM acdSchedule X
                                WHERE X.groupId = A1.groupId)
                   AND B1.curricularComponentId = ?
                   AND B1.curricularComponentVersion = ?
                   AND C1.periodId = ?
                   AND A1.isCancellation = \'' . DB_FALSE . '\'';

        $args = array (
                        $curricularComponentId,
                        $curricularComponentVersion,
                        $learningPeriodData->periodId
                      );

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Returns the curricular components that has groups registered 
     * for the specified learning period and class
     **/
    function getClassGroupsCurricularComponents($learningPeriodId, $classId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';

        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
/*
        $sql = 'SELECT B1.semester,
                       B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       C1.name AS curricularComponentName,

                       B1.curriculumId,
                       C1.curricularComponentGroupId,
                       B1.curricularComponentGroupElectiveId,
                       B1.curricularComponentTypeId
                  FROM acdContract A1
            INNER JOIN acdCurriculum B1
                    ON (B1.courseId = A1.courseId
                        AND B1.courseVersion = A1.courseVersion
                        AND B1.unitId = A1.unitId
                        AND B1.turnId = A1.turnId
                        AND (B1.endDate IS NULL
                             OR B1.endDate > now()))
            INNER JOIN acdCurricularComponent C1
                    ON (C1.curricularComponentId = B1.curricularComponentId
                        AND C1.curricularComponentVersion = B1.curricularComponentVersion),
                       acdLearningPeriod D1
                 WHERE A1.contractId = ?
                   AND D1.learningPeriodId = ?
                   AND (C1.endDate IS NULL
                        OR C1.endDate > D1.beginDate)
                   AND ( (B1.curriculumTypeId IN (' . CURRICULUM_TYPE_NON_OPTIONAL . ') AND (B1.semester <> 0)) OR
                         (B1.curricularComponentId IN (' . $freeSeminariesIds . ')) )
              ORDER BY CASE WHEN B1.semester = 0 THEN 9999 ELSE B1.semester END,
                       C1.name';

        $args = array ( $contractId, $learningPeriodId);
*/
        $sql    = "SELECT isDependence FROM acdClass WHERE classId = ?";
        $args   = array ( $classId);
        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] == DB_FALSE )
        {
            $sql = 'SELECT DISTINCT
                           B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           D1.name,
                           D1.curricularComponentGroupId,
                           B1.curriculumId,
                           d1.curricularComponentGroupId,
                           B1.curricularComponentGroupElectiveId,
                           B1.curricularComponentTypeId                       
                      FROM acdGroup A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                INNER JOIN acdLearningPeriod C1
                        ON (C1.learningPeriodId = A1.learningPeriodId)
                INNER JOIN acdCurricularComponent D1
                        ON (D1.curricularComponentId = B1.curricularComponentId AND
                            D1.curricularComponentVersion = B1.curricularComponentVersion)
                     WHERE C1.periodId = ?
                       AND A1.classId = ?
                       AND B1.semester = getClassPeriod(?, ?)
                       AND A1.isCancellation = \'' . DB_FALSE . '\' ';

            $args = array (
                            $learningPeriodData->periodId,
                            $classId,
                            $classId,
                            $learningPeriodId
                          );
        }
        else
        {
            $sql = 'SELECT DISTINCT
                           B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           D1.name,
                           D1.curricularComponentGroupId,
                           B1.curriculumId,
                           d1.curricularComponentGroupId,
                           B1.curricularComponentGroupElectiveId,
                           B1.curricularComponentTypeId                       
                      FROM acdGroup A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                INNER JOIN acdLearningPeriod C1
                        ON (C1.learningPeriodId = A1.learningPeriodId)
                INNER JOIN acdCurricularComponent D1
                        ON (D1.curricularComponentId = B1.curricularComponentId AND
                            D1.curricularComponentVersion = B1.curricularComponentVersion)
                     WHERE C1.periodId = ?
                       AND A1.classId = ?
                       AND A1.isCancellation = \'' . DB_FALSE . '\' ';

            $args = array (
                            $learningPeriodData->periodId,
                            $classId
                          );
        }

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Returns the groups of a curricular component
     **/
    function getClassCurricularComponentGroups($curricularComponentId, $curricularComponentVersion, $learningPeriodId, $classId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';

        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);

        $sql    = "SELECT isDependence FROM acdClass WHERE classId = ?";
        $args   = array ( $classId);

        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] == DB_FALSE )
        {
            $sql = 'SELECT A1.groupId,
                           B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           A1.vacant,
                           A1.totalEnrolled
                      FROM acdGroup A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                INNER JOIN acdLearningPeriod C1
                        ON (C1.learningPeriodId = A1.learningPeriodId)
                INNER JOIN acdCurricularComponent D1
                        ON (D1.curricularComponentId = B1.curricularComponentId AND
                            D1.curricularComponentVersion = B1.curricularComponentVersion)
                     WHERE EXISTS (SELECT \'X\'
                      FROM acdSchedule X
                     WHERE X.groupId = A1.groupId)
                       AND C1.periodId = ?
                       AND A1.classId = ?
                       AND B1.curricularComponentId = ?
                       AND B1.curricularComponentVersion = ?
                       AND B1.semester = getClassPeriod(?, ?)
                       AND A1.isCancellation = \'' . DB_FALSE . '\'';

            $args = array (
                            $learningPeriodData->periodId,
                            $classId,
                            $curricularComponentId,
                            $curricularComponentVersion,
                            $classId,
                            $learningPeriodId
                          );
        }
        else
        {
            $sql = 'SELECT A1.groupId,
                           B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           A1.vacant,
                           A1.totalEnrolled
                      FROM acdGroup A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                INNER JOIN acdLearningPeriod C1
                        ON (C1.learningPeriodId = A1.learningPeriodId)
                INNER JOIN acdCurricularComponent D1
                        ON (D1.curricularComponentId = B1.curricularComponentId AND
                            D1.curricularComponentVersion = B1.curricularComponentVersion)
                     WHERE EXISTS (SELECT \'X\'
                      FROM acdSchedule X
                     WHERE X.groupId = A1.groupId)
                       AND C1.periodId = ?
                       AND A1.classId = ?
                       AND B1.curricularComponentId = ?
                       AND B1.curricularComponentVersion = ?
                       AND A1.isCancellation = \'' . DB_FALSE . '\'';

            $args = array (
                            $learningPeriodData->periodId,
                            $classId,
                            $curricularComponentId,
                            $curricularComponentVersion
                          );
        }

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Obtain the available groups of a curricular component in dependent status
     **/
    function getDependentGroups($curricularComponentId, $curricularComponentVersion, $learningPeriodId, $classId)
    {
        $groups = $this->getGroups($curricularComponentId, $curricularComponentVersion, $learningPeriodId);
        /*if ( count($groups) > 0 )
        {
            $classGroups = $this->getClassGroups($learningPeriodId, $classId);
            
            if ( count($classGroups) > 0 )
            {
                foreach ($groups as $groupData)
                {
                    $showIt = true;
                    
                    foreach ($classGroups as $classGroupData)
                    {
                        if ($this->hasShockingSchedule($groupData[0], $classGroupData[0]) )
                        {
                            $showIt = false;
                        }
                    }
                    
                    if ( $showIt )
                    {
                        $result[] = $groupData;
                    }
                }
            }
        }
        
        if (count($result) > 0)
        {
            return $result;
        }
        else
        {
            return null;
        }*/
        return $groups;
    }

    /**
     * Obtain the group schedule
     **/
    function getSchedules($groupId)
    {
        $sql = 'SELECT C1.scheduleId,
                       TO_CHAR(D1.beginDate,\'' . MASK_DATE . '\') AS endHour,
                       D1.beginHour,
                       TO_CHAR(D1.endDate,\'' . MASK_DATE . '\') AS endDate,
                       D1.endHour,
                       D1.turnId,
                       E1.description AS turnDescription,
                       E1.beginHour AS turnBeginHour,
                       E1.endHour AS turnEndHour,
                       C1.unitId,
                       F1.description AS unitDescription,
                       C1.weekDayId,
                       G1.description AS weekDayDescription,
                       C1.physicalResourceId,
                       C1.physicalResourceVersion,
                       H1.description AS physicalResourceDescription
                  FROM acdSchedule C1
            INNER JOIN acdScheduleLearningPeriod D1
                    ON (D1.scheduleLearningPeriodId = C1.scheduleLearningPeriodId)
            INNER JOIN basTurn E1
                    ON (E1.turnId = D1.turnId)
            INNER JOIN basUnit F1
                    ON (F1.unitId = C1.unitId)
             LEFT JOIN basWeekDay G1
                    ON (G1.weekDayId = C1.weekDayId)
             LEFT JOIN insPhysicalResource H1
                    ON (H1.physicalResourceId = C1.physicalResourceId
                        AND H1.physicalResourceVersion = C1.physicalResourceVersion )
                 WHERE C1.groupId = ?';

        $args = array (
                        $groupId
                      );

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Obtain the professors data for a specified schedule id
     **/
    public function getScheduleProfessors($scheduleId)
    {
        $sql = 'SELECT I1.professorId,
                       J1.name AS professorName
                  FROM acdScheduleProfessor I1
            INNER JOIN ONLY basPhysicalPersonProfessor J1
                    ON (J1.personId = I1.professorId)
                 WHERE I1.scheduleId = ?';

        $args = array (
                        $scheduleId
                      );

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Returns the status of a specified curricular component for the specified contract
     **/
    function getCurricularComponentStatus($contractId, $curricularComponentId, $curricularComponentVersion, $learningPeriodId, $curriculumId)
    {
        global $MIOLO;
        $module = 'academic';

        $sql = 'SELECT B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       A1.curriculumId
                  FROM acdEnroll A1
            INNER JOIN acdCurriculum B1
                    ON (B1.curriculumId = A1.curriculumId)
                 WHERE A1.contractId    = ?
                   AND B1.curricularComponentId = ?
                   AND B1.curricularComponentVersion = ?
                   AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')';

        $args = array (
                        $contractId,
                        $curricularComponentId,
                        $curricularComponentVersion
                      );

        $result = $this->db->query(SAGU::prepare($sql,$args));
        $status = new EnrollCurriculumStatus();

        // this will be the default status
        $status->status = 'FREE';
        $status->text = _M('LIBERATED', $module);
        $status->color = CURRICULUM_STATUS_COLOR_FREE;
        $status->showGroups = true;
        
        $freeSeminaries = explode(',', str_replace(' ', '', FREE_SEMINARY_CURRICULAR_COMPONENT_IDS));
        
        if (in_array($curricularComponentId, $freeSeminaries))
        {
            return $status;
        }
        
        if ( count($result) > 0 )
        {
            $status->status = 'COURSED';
            $status->text = _M('COURSED', $module);
            $status->color = CURRICULUM_STATUS_COLOR_COURSED;
            $status->showGroups = false;
            
            return $status;
        }
        
        if (strlen((string)$curriculumId) > 0)
        {
            if ( $this->isDependent($contractId, $curriculumId) )
            {
                $status->status = 'FREE';
                $status->text   = _M('DEPENDENT', $module);
                $status->color  = CURRICULUM_STATUS_COLOR_DEPENDENT;
                $status->showGroups = true;
                
                return $status;
            }
            
            $sql = ' SELECT curriculumInId,
                            curriculumOutId
                       FROM acdCurriculumConcurrence
                      WHERE curriculumInId = ?
                         OR curriculumOutId = ? ';
                      
            $resCon = $this->db->query(SAGU::prepare($sql, array($curriculumId, $curriculumId)));
            
            if (count($resCon) > 0)
            {
                foreach ($resCon as $concurrentCurriculum)
                {
                    $sql = 'SELECT enrollId
                              FROM acdEnroll
                             WHERE contractId = ?
                               AND curriculumId = ?
                               AND statusId IN ('. ENROLL_STATUS_APPR_OR_EXC . ')';
                               
                    $resApr1 = $this->db->query(SAGU::prepare($sql, array($contractId, $concurrentCurriculum[0])));
                    
                    $resApr2 = $this->db->query(SAGU::prepare($sql, array($contractId, $concurrentCurriculum[1])));
                    
                    if ( (count($resApr1) > 0) || (count($resApr2) > 0) )
                    {
                        $status->status = 'NON COURSED';
                        $status->text = _M('UNAVAILABLE', $module);
                        $status->color = CURRICULUM_STATUS_COLOR_NON_COURSED;
                        $status->showGroups = false;
                        
                        return $status;
                    }
                }
            }
        }

        if ( ! $this->isFreeForEnroll($curricularComponentId, $curricularComponentVersion, $contractId, $learningPeriodId) )
        {
            $status->status = 'BLOCKED';
            $status->text   = _M('BLOCKED', $module);
            $status->color  = CURRICULUM_STATUS_COLOR_BLOCKED;
            $status->showGroups = false;
            
            if (strlen((string)$curriculumId) > 0)
            {
                if ( $this->isUnblocked($contractId, $learningPeriodId, $curriculumId) )
                {
                    $status->status = 'FREE';
                    $status->text   = _M('UNBLOCKED', $module);
                    $status->color  = CURRICULUM_STATUS_COLOR_UNBLOCKED;
                    $status->showGroups = true;
                }
            }
            
            return $status;
        }
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT A.enrollId
                    FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdLearningPeriod D
                    ON (D.learningPeriodId = B.learningPeriodId)
                 WHERE A.contractId = ?
                   AND C.curricularComponentId = ?
                   AND C.curricularComponentVersion = ?
                   AND D.periodId <> ?
                   AND A.statusId = ' . ENROLL_STATUS_ENROLLED;
                    
        $args = array( $contractId,
                        $curricularComponentId,
                        $curricularComponentVersion,
                        $learningPeriodData->periodId);
        
        $res = $this->db->query(SAGU::prepare($sql, $args));
        
        if (count($res) > 0)
        {
            $status->status = 'COURSING';
            $status->text = _M('COURSING', $module);
            $status->color = CURRICULUM_STATUS_COLOR_COURSING;
            $status->showGroups = false;   
        }

        return $status;
    }
    
    function getClassCurricularComponentStatus($contractId, $classId, $curricularComponentId, $curricularComponentVersion, $learningPeriodId, $curriculumId)
    {
        global $MIOLO;
        $module = 'academic';
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        //Status padrão
        $status->status = 'FREE';
        $status->text = _M('LIBERATED', $module);
        $status->color = CURRICULUM_STATUS_COLOR_FREE;
        $status->showGroups = true;
        
        $freeSeminaries = explode(',', str_replace(' ', '', FREE_SEMINARY_CURRICULAR_COMPONENT_IDS));
        
        //Testa se é seminário livre
        if (in_array($curricularComponentId, $freeSeminaries))
        {
            return $status;
        }
        
        //Verifica se a disciplina já foi cursada
        $sql = 'SELECT B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       A1.curriculumId
                  FROM acdEnroll A1
            INNER JOIN acdCurriculum B1
                    ON (B1.curriculumId = A1.curriculumId)
                 WHERE A1.contractId    = ?
                   AND B1.curricularComponentId = ?
                   AND B1.curricularComponentVersion = ?
                   AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')';

        $args = array (
                        $contractId,
                        $curricularComponentId,
                        $curricularComponentVersion
                      );
        $result = $this->db->query(SAGU::prepare($sql,$args));
        
        if (count($result) > 0)
        {
            $status->status = 'COURSED';
            $status->text = _M('COURSED', $module);
            $status->color = CURRICULUM_STATUS_COLOR_COURSED;
            $status->showGroups = false;   
        }
        else
        {
            //Verifica se é dependente nesta disciplina
            $sql = 'SELECT B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           A1.curriculumId
                      FROM acdEnroll A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                     WHERE A1.contractId = ?
                       AND B1.curricularComponentId = ?
                       AND B1.curricularComponentVersion = ?
                       AND A1.statusId IN (' . ENROLL_STATUS_DEPENDENT . ', ' . ENROLL_STATUS_DEPENDENT_FOR_LACKS . ')';
                       
            $result = $this->db->query(SAGU::prepare($sql, $args));
            
            if (count($result) > 0)
            {
                $status->status     = 'DEPENDENT';
                $status->text       = _M('DEPENDENT', $module);
                $status->color      = CURRICULUM_STATUS_COLOR_FREE;
                $status->showGroups = true;
            }
            else
            {
                //Verifica se esta disciplina é oferecida para esta turma neste período
                $sql = 'SELECT A1.groupId
                          FROM acdGroup A1
                    INNER JOIN acdCurriculum B1
                            ON (B1.curriculumId = A1.curriculumId)
                    INNER JOIN acdLearningPeriod C1
                            ON (C1.learningPeriodId = A1.learningPeriodId)
                         WHERE B1.curricularComponentId = ?
                           AND B1.curricularComponentVersion = ?
                           AND C1.periodId = ?
                           AND A1.classId = ?';
                           
                $args = array ($curricularComponentId,
                               $curricularComponentVersion,
                               $learningPeriodData->periodId,
                               $classId);
                               
                $result = $this->db->query(SAGU::prepare($sql, $args));
                
                if (count($result) > 0)
                {
                    //Verifica os pré-requisitos
                    $sql = 'SELECT A.conditionCurriculumId,
                                   A.credits,
                                   A.numberHour,
                                   A.educationAreaId
                              FROM acdCondition A
                             WHERE A.curriculumId = ?
                               AND type = \'P\'';
                               
                    $args = array ($curriculumId);
                    
                    $result = $this->db->query(SAGU::prepare($sql, $args));
                    
                    if (count($result) > 0)
                    {
                        $blocked = false;
                        foreach ($result as $res)
                        {
                            list ($conditionCurriculumId,
                                  $credits,
                                  $numberHours,
                                  $educationAreaId) = $res;
                                  
                            //Disciplina pré-requisito
                            if (isset($conditionCurriculumId))
                            {
                                $sql = 'SELECT enrollId
                                          FROM acdEnroll
                                         WHERE curriculumId = ?
                                           AND contractId = ?
                                           AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                                $args = array ($conditionCurriculumId, $contractId);
                                
                                $result2 = $this->db->query(SAGU::prepare($sql, $args));
                                
                                if (count($result2) == 0)
                                {
                                    $blocked == true;
                                }
                            }
                            
                            //Número mínimo de créditos
                            if ($credits > 0)
                            {
                                $sql = 'SELECT SUM(C.academicCredits)
                                          FROM acdEnroll A
                                    INNER JOIN acdCurriculum B
                                            ON (B.curriculumId = A.curriculumId)
                                    INNER JOIN acdCurricularComponent C
                                            ON (C.curricularComponentId = B.curricularComponentId AND
                                                C.curricularComponentVersion = B.curricularComponentId)
                                         WHERE A.contractId = ?
                                           AND C.educationAreaId = ?
                                           AND A.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                                $args = array($contractId, $educationAreaId);
                                
                                $result2 = $this->db->query(SAGU::prepare($sql, $args));
                                
                                if ($result2[0][0] < $credits)
                                {
                                    $blocked = true;
                                }
                            }
                            
                            //Carga horária mínima
                            if ($numberHours > 0)
                            {
                                $sql = 'SELECT SUM(C.academicNumberHours)
                                          FROM acdEnroll A
                                    INNER JOIN acdCurriculum B
                                            ON (B.curriculumId = A.curriculumId)
                                    INNER JOIN acdCurricularComponent C
                                            ON (C.curricularComponentId = B.curricularComponentId AND
                                                C.curricularComponentVersion = B.curricularComponentId)
                                         WHERE A.contractId = ?
                                           AND C.educationAreaId = ?
                                           AND A.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                                $args = array($contractId, $educationAreaId);
                                
                                $result2 = $this->db->query(SAGU::prepare($sql, $args));
                                
                                if ($result2[0][0] < $numberHours)
                                {
                                    $blocked = true;
                                }
                            }
                        }
                        
                        if ($blocked)
                        {
                            if ($this->isUnblocked($contractId, $learningPeriodId, $curriculumId))       
                            {
                                //Desbloqueada
                                $status->status = 'FREE';
                                $status->text = _M('UNBLOCKED', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_UNBLOCKED;
                                $status->showGroups = true;
                            }
                            else
                            {
                                //Bloqueada
                                $status->status = 'BLOCKED';
                                $status->text = _M('BLOCKED', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_BLOCKED;
                                $status->showGroups = false;
                            }
                        }
                    }
                }
                else
                {
                    //Indisponivel
                    $status->text       =  _M('UNAVAILABLE', $module);
                    $status->color      = CURRICULUM_STATUS_COLOR_NON_COURSED;
                    $status->status     = 'NON COURSED';
                    $status->showGroups = false;
                }
            }
        }
        
        $sql = 'SELECT A.enrollId
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdLearningPeriod D
                    ON (D.learningPeriodId = B.learningPeriodId)
                 WHERE A.contractId = ?
                   AND C.curricularComponentId = ?
                   AND C.curricularComponentVersion = ?
                   AND D.periodId <> ?
                   AND A.statusId = ' . ENROLL_STATUS_ENROLLED;
                    
        $args = array( $contractId,
                       $curricularComponentId,
                       $curricularComponentVersion,
                       $learningPeriodData->periodId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        if (count($result) > 0)
        {
            $status->status = 'COURSING';
            $status->text = _M('COURSING', $module);
            $status->color = CURRICULUM_STATUS_COLOR_COURSING;
            $status->showGroups = false;   
        }
        
        return $status;
    }

    /**
     * Returns the status of a specified elective curricular component for the specified contract
     **/
    function getElectiveCurricularComponentStatus($contractId, $curricularComponentId, $curricularComponentVersion, $learningPeriodId, $curriculumId, $curricularComponentGroupElectiveId, $courseId, $courseVersion)
    {
        $module = 'academic';

        $sql = 'SELECT B1.curricularComponentId,
                       B1.curricularComponentVersion,
                       A1.curriculumId
                  FROM acdEnroll A1
            INNER JOIN acdCurriculum B1
                    ON (B1.curriculumId = A1.curriculumId)
                 WHERE A1.contractId    = ?
                   AND B1.curricularComponentId = ?
                   AND B1.curricularComponentVersion = ?
                   AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')';

        $args = array (
                        $contractId,
                        $curricularComponentId,
                        $curricularComponentVersion
                      );
        $result = $this->db->query(SAGU::prepare($sql,$args));
        $status = new EnrollCurriculumStatus();

        // this will be the default status
        $status->status = 'FREE';
        $status->text = _M('LIBERATED', $module);
        $status->color = CURRICULUM_STATUS_COLOR_FREE;
        $status->showElective = true;

        if ( count($result) > 0 )
        {
            $status->status = 'COURSED';
            $status->text = _M('COURSED', $module);
            $status->color = CURRICULUM_STATUS_COLOR_COURSED;
            $status->showElective = false;
        }
        else
        {
            $sql = 'SELECT B1.curricularComponentId,
                           B1.curricularComponentVersion,
                           A1.curriculumId
                      FROM acdEnroll A1
                INNER JOIN acdCurriculum B1
                        ON (B1.curriculumId = A1.curriculumId)
                     WHERE A1.contractId    = ?
                       AND B1.curricularComponentId = ?
                       AND B1.curricularComponentVersion = ?
                       AND A1.statusId IN (' . ENROLL_STATUS_ENROLLED . ')';
                       
            $args = array (
                            $contractId,
                            $curricularComponentId,
                            $curricularComponentVersion
                          );
                          
            $resultEnr = $this->db->query(SAGU::prepare($sql,$args));
            
            if (count($resultEnr) > 0)
            {
                $status->status = 'ENROLLED';
                $status->text = _M('ENROLLED', $module);
                $status->color = CURRICULUM_STATUS_COLOR_ENROLLED;
                $status->showElective = true;
                
                return $status;
            }
            
            //Seleciona todas as disciplinas da eletiva
            $sql = ' SELECT B.curricularComponentId,
                            B.curricularComponentVersion,
                            B.curriculumId
                       FROM acdCurricularComponent A
                 INNER JOIN acdCurriculum B
                         ON (A.curricularComponentId = B.curricularComponentId AND
                             A.curricularComponentVersion = B.curricularComponentVersion)';
                      
            if ($curricularComponentGroupElectiveId != NO_GROUP_ELECTIVE_ID)
            {                      
                $sql .=' WHERE B.curricularComponentGroupDocumentEndCourseId = ? ';
                      
                $result = $this->db->query(SAGU::prepare($sql, array($curricularComponentGroupElectiveId)));
            }
            else
            {
                $result = $this->db->query($sql);   
            }

            //Verifica se as disciplinas foram cursadas
            if ( count($result) > 0 )
            {
                $free = false;
                for ( $x=0; $x<count($result) && !$free; $x++ )
                {
                    $sql = ' SELECT B1.curricularComponentId,
                                    B1.curricularComponentVersion,
                                    A1.curriculumId
                               FROM acdEnroll A1
                         INNER JOIN acdCurriculum B1
                                 ON (B1.curriculumId = A1.curriculumId)
                              WHERE A1.contractId    = ?
                                AND B1.curricularComponentId = ?
                                AND B1.curricularComponentVersion = ?
                                AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')';

                    $result2 = $this->db->query(SAGU::prepare($sql, array($contractId, $result[$x][0], $result[$x][1])));
                    if ( count($result2) <= 0 )
                    {                        
                        if ( ! $this->isFreeForEnroll($result[$x][0], $result[$x][1], $contractId, $learningPeriodId) )
                        {
                            if ( ! $this->isUnblocked($contractId, $learningPeriodId, $result[$x][2]) )
                            {
                                $status->status = 'NON COURSED';
                                $status->text = _M('UNAVAILABLE', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_NON_COURSED;
                                $status->showElective = false;
                            }
                            else
                            {
                                $status->status = 'FREE';
                                $status->text = _M('LIBERATED', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_FREE;
                                $status->showElective = true;
                                $free = true;
                            }
                        }
                        else
                        {
                            $groups = $this->getGroups($result[$x][0], $result[$x][1], $learningPeriodId);
                            
                            if ( count($groups) > 0 )
                            {
                                $status->status = 'FREE';
                                $status->text = _M('LIBERATED', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_FREE;
                                $status->showElective = true;
                                $free = true;
                            }
                            else
                            {
                                $status->status = 'NON COURSED';
                                $status->text = _M('UNAVAILABLE', $module);
                                $status->color = CURRICULUM_STATUS_COLOR_NON_COURSED;
                                $status->showElective = false;
                            }
                        }
                    }
                }
            }
            else
            {
                $status->status = 'NON COURSED';
                $status->text = _M('UNAVAILABLE', $module);
                $status->color = CURRICULUM_STATUS_COLOR_NON_COURSED;
                $status->showElective = false;
            }
        }

        return $status;
    }

    /**
     * DEPRECATED: Returns the pupil enroll material (all curriculum and curricular components status)
     **/
    function getEnrollMaterial($contractId, $periodId, $entireCurriculum=null)
    {
        echo('This function is DEPRECATED.');
        $sql = '    SELECT A.curriculumId,
                           A.semester,
                           A.curricularComponentId,
                           A.curricularComponentVersion,
                           A.curricularComponentName,
                           B.curricularComponentId IS NOT NULL AS isApproved,
                           D.groupId IS NOT NULL AS isEnrolled,
                           D.dateCancellation IS NOT NULL AS isCancelled,
                           C.groupId,
                           C.vacant,
                           C.totalEnrolled,
                           C.scheduleId,
                           TO_CHAR(C.beginDate,\'' . MASK_DATE . '\') AS beginDate,
                           TO_CHAR(C.endDate,\'' . MASK_DATE . '\') AS endDate,
                           C.turnId,
                           C.turnDescription,
                           C.beginHour,
                           C.endHour,
                           C.unitId,
                           C.unitDescription,
                           C.weekDayId,
                           C.weekDayDescription,
                           C.physicalResourceId,
                           C.physicalResourceVersion,
                           C.physicalResourceDescription,
                           C.professorId,
                           C.professorName
                      -- obter curriculo do contrato
                      FROM (    SELECT B1.semester,
                                       B1.curricularComponentId,
                                       B1.curricularComponentVersion,
                                       C1.name AS curricularComponentName,
                                       B1.curriculumId
                                  FROM acdContract A1
                            INNER JOIN acdCurriculum B1
                                    ON (B1.courseId = A1.courseId
                                        AND B1.courseVersion = A1.courseVersion
                                        AND B1.endDate IS NULL)
                            INNER JOIN acdCurricularComponent C1
                                    ON (C1.curricularComponentId = B1.curricularComponentId
                                        AND C1.curricularComponentVersion = B1.curricularComponentVersion)
                                 WHERE A1.contractId = ?) A
                 -- verificar aprovacao
                 LEFT JOIN (    SELECT DISTINCT C1.curricularComponentId,
                                       C1.curricularComponentVersion,
                                       A1.curriculumId
                                  FROM acdEnroll A1
                            INNER JOIN acdGroup B1
                                    ON (B1.groupId = A1.groupId)
                            INNER JOIN acdCurriculum C1
                                    ON (C1.curriculumId = B1.curriculumId)
                                 WHERE A1.contractId = ?
                                   AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')) B
                        ON (B.curriculumId = A.curriculumId)
                 -- listar oferecidas para cada disciplina do curriculo
                 LEFT JOIN (    SELECT A1.groupId,
                                       B1.curricularComponentId,
                                       B1.curricularComponentVersion,
                                       A1.vacant,
                                       A1.totalEnrolled,
                                       C1.scheduleId,
                                       D1.beginDate,
                                       D1.beginHour,
                                       D1.endDate,
                                       D1.endHour,
                                       D1.turnId,
                                       E1.description AS turnDescription,
                                       E1.beginHour AS turnBeginHour,
                                       E1.endHour AS turnEndHour,
                                       C1.unitId,
                                       F1.description AS unitDescription,
                                       C1.weekDayId,
                                       G1.description AS weekDayDescription,
                                       C1.physicalResourceId,
                                       C1.physicalResourceVersion,
                                       H1.description AS physicalResourceDescription,
                                       I1.professorId,
                                       J1.name AS professorName
                                  FROM acdGroup A1
                            INNER JOIN acdCurriculum B1
                                    ON (B1.curriculumId = A1.curriculumId)
                            INNER JOIN acdSchedule C1
                                    ON (C1.groupId = A1.groupId)
                            INNER JOIN acdScheduleLearningPeriod D1
                                    ON (D1.scheduleLearningPeriodId = C1.scheduleLearningPeriodId)
                            INNER JOIN basTurn E1
                                    ON (E1.turnId = D1.turnId)
                            INNER JOIN basUnit F1
                                    ON (F1.unitId = C1.unitId)
                            INNER JOIN basWeekDay G1
                                    ON (G1.weekDayId = C1.weekDayId)
                            INNER JOIN insPhysicalResource H1
                                    ON (H1.physicalResourceId = C1.physicalResourceId
                                        AND H1.physicalResourceVersion = C1.physicalResourceVersion)
                            INNER JOIN acdScheduleProfessor I1
                                    ON (I1.scheduleId = C1.scheduleId)
                            INNER JOIN ONLY basPhysicalPersonProfessor J1
                                    ON (J1.personId = I1.professorId)
                                 WHERE A1.learningPeriodId = ?) C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                 -- identificar matriculadas
                 LEFT JOIN (    SELECT A1.groupId, A1.dateCancellation
                                  FROM acdEnroll A1
                                 WHERE A1.contractId = ?) D
                        ON (D.groupId = C.groupId)
                  ORDER BY CASE WHEN A.semester = 0 THEN 9999 ELSE A.semester END,
                           A.curricularComponentName,
                           C.groupId,
                           C.scheduleId,
                           C.professorName';

        $args = array (
                        $contractId,
                        $contractId,
                        $periodId,
                        $contractId
                      );

        $result = $this->db->query(SAGU::prepare($sql,$args));
        //$this->db->close();

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEnroll($data)
    {
        $sql      = 'SELECT NEXTVAL(\'seq_enrollid\')';
        $enrollId = $this->db->query($sql);

        $data->enrollId = $enrollId[0][0];

        $sql = 'INSERT INTO acdEnroll
                            (enrollId,
                             contractId,
                             groupId,
                             curriculumId,
                             dateEnroll,
                             hourEnroll,
                             dateCancellation,
                             hourCancellation,
                             reasonCancellationId,
                             note,
                             examNote,
                             finalNote,
                             concept,
                             textEvaluation,
                             frequency,
                             obsExploitation,
                             exploitationInstitutionId,
                             numberHourExploitation,
                             creditsExploitation,
                             isShowDocumentEndCourse,
                             statusId,
                             frequencyAlertEmail,
                             isInternet,
                             ip,
                             isConfirm,
                             isSetFree,
                             complement,
                             isAdaptation,
                             isDependence )
                     VALUES (?,?,?,?,
                             TO_DATE(?, \'' . MASK_DATE . '\'), TO_TIMESTAMP(?, \'' . MASK_TIME . '\'),
                             TO_DATE(?, \'' . MASK_DATE . '\'), TO_TIMESTAMP(?, \'' . MASK_TIME . '\'),
                             ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

        $data->isAdaptation = strlen((string)$data->isAdaptation)>0 ? $data->isAdaptation : DB_FALSE;
        $data->isDependence = strlen((string)$data->isDependence)>0 ? $data->isDependence : DB_FALSE;

        $args = array( $data->enrollId,
                       $data->contractId,
                       $data->groupId,
                       $data->curriculumId,
                       $data->dateEnroll,
                       $data->hourEnroll,
                       $data->dateCancellation,
                       $data->hourCancellation,
                       $data->reasonCancellationId,
                       $data->note,
                       $data->examNote,
                       $data->finalNote,
                       $data->concept,
                       $data->textEvaluation,
                       $data->frequency,
                       $data->obsExploitation,
                       $data->exploitationInstitutionId,
                       $data->numberHourExploitation,
                       $data->creditsExploitation,
                       $data->isShowDocumentEndCourse,
                       $data->statusId,
                       $data->frequencyAlertEmail,
                       $data->isInternet,
                       $data->ip,
                       $data->isConfirm,
                       $data->isSetFree,
                       $data->complement,
                       $data->isAdaptation,
                       $data->isDependence );

        if ( strlen((string)$data->enrollId) > 0 )
        {
            $result = $this->db->execute(SAGU::prepare($sql, $args));
            unset($args);

            /*
             * Insere as frequencias
             */
            $filter->groupId = $data->groupId;

            $sql = 'SELECT A.scheduleId
                      FROM acdSchedule A
                INNER JOIN acdGroup B
                        ON (B.groupId = A.groupId)
                     WHERE B.groupId  = ?';

            $args[]    = $filter->groupId;
            $schedules = $this->db->query(SAGU::prepare($sql, $args));
            unset($args);

            //se tiver horários
            if ( count($schedules)>0 )
            {
                foreach ( $schedules as $schedule )
                {
                    $filter->scheduleId     = $schedule[0];

                    $sql = 'SELECT A.scheduleProfessorId,
                                   A.professorId
                              FROM acdScheduleProfessor A
                        INNER JOIN acdSchedule B
                                ON (B.scheduleId = A.scheduleId)
                             WHERE B.scheduleId  = ?';

                    $args[]             = $filter->scheduleId;
                    $scheduleProfessors = $this->db->query(SAGU::prepare($sql, $args));
                    unset($args);

                    //se tiverem professores para os horários
                    if ( count($scheduleProfessors)>0 )
                    {
                        foreach ( $scheduleProfessors as $professor )
                        {
                            $filter->professorId    = $professor[1];

                            $sql  = 'SELECT DISTINCT scheduleId,
                                                     TO_CHAR(frequencydate, \'' . MASK_DATE . '\') as frequencydate,
                                                     turnId
                                                FROM acdFrequenceEnroll
                                               WHERE scheduleId     = ?
                                            ORDER BY frequencydate';
                            $args        = array($filter->scheduleId);
                            $frequencies = $this->db->query(SAGU::prepare($sql, $args));
                            unset($args);
                            //se tiver frequencias, registra as mesmas
                            if ( count($frequencies) > 0 )
                            {
                                $frq->enrollId = $data->enrollId;
                                foreach ( $frequencies as $frequence )
                                {
                                    $frq->scheduleId    = $frequence[0];
                                    $frq->frequencyDate = $frequence[1];
                                    $frq->turnId        = $frequence[2];
                                    $frq->frequency     = 0;


                                    $args = array($frq->scheduleId,
                                                  $frq->frequencyDate,
                                                  $frq->turnId,
                                                  $frq->enrollId,
                                                  $frq->frequency);

                                    //Verifica se a frequência já foi lançada
                                    $sql = 'SELECT count(*) FROM acdFrequenceEnroll WHERE scheduleId = ? AND frequencyDate = TO_DATE(?,\''. MASK_DATE .'\') AND turnId = ? AND enrollId = ? AND frequency = ?';
                                    $res = $this->db->query(SAGU::prepare($sql,$args));
                                    $res = $res[0][0];
                                    if ( $res == 0 )
                                    {
                                        $sql  = 'INSERT INTO acdFrequenceEnroll
                                                         (scheduleId,
                                                          frequencyDate,
                                                          turnId,
                                                          enrollId,
                                                          frequency)
                                                  VALUES (?, TO_DATE(?,\'' . MASK_DATE . '\'), ?, ?, ?)';
                                        $res = $this->db->execute(SAGU::prepare($sql, $args));
                                    }
                                    unset($args);
                                }
                            }
                        }
                    }
                }
            }
        }

        return $result ? $data->enrollId : false;
    }

    /**
     *
     * Generate data for acdEnrollSummary table from the enroll data
     *
     * @param $data (object): an object containing the data
     *
     * @return: TRUE if success, otherwise FALSE
     *
     **/
    public function generateEnrollSummary($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = $MIOLO->getBusiness($module, 'BusEnrollSummary');
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $contractData = $busContract->getContract($data->contractId);
        
        $busCourseVersion  = $MIOLO->getBusiness($module, 'BusCourseVersion');
        $courseVersionData = $busCourseVersion->getCourseVersion($contractData->courseId, $contractData->courseVersion);
        
        $serialEnrollProcess = false;
        
        if ( in_array($courseVersionData->courseVersionTypeId, explode(',', str_replace(' ', '', SERIAL_ENROLL_TYPE_IDS) ) ) )
        {
            $serialEnrollProcess = true;
        }
        
        //Obtem informações do periodo letivo e políticas
        $sql = 'SELECT parcelsNumber,
                       policyId
                  FROM acdLearningPeriod
                 WHERE learningPeriodId = ?';
                 
        $finInfo = $this->db->query(SAGU::prepare($sql, $data->learningPeriodId));
        
        $busPolicy  = $MIOLO->getBusiness('finance', 'BusPolicy');

        $policyData = $busPolicy->getPolicy($finInfo[0][1]);
        
        //Obtém número de parcelas
        if ( strlen((string)$data->parcelsNumber) > 0 )
        {
            $parcelsNumber = $data->parcelsNumber;
        }
        else
        {
            $parcelsNumber = strlen((string)$contractData->parcelsNumber)>0 ? $contractData->parcelsNumber : $finInfo[0][0];
        }
        
        $enrollSummary = new acdEnrollSummary();
        $enrollSummary->contractId       = $data->contractId;
        $enrollSummary->learningPeriodId = $data->learningPeriodId;
        $enrollSummary->parcelsNumber    = $parcelsNumber;
        $enrollSummary->isProcessed      = DB_FALSE;
        $enrollSummary->isValue          = DB_FALSE;
        $enrollSummary->recordDate       = date(MASK_DATE_PHP);
        
        //Obtém os incentivos para determinado contrato
        $sql = 'SELECT A.valueIsPercent,
                       A.value,
                       A.supporterId,
                       A.agglutinate,
                       C.operationId,
                       C.needAdjustAuthorization,
                       C.sendInvoices,
                       C.generateCredits,
                       CASE WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finFinancialAid) 
                            THEN 1
                            ELSE 2 END as financialAid
                  FROM finIncentive A
            INNER JOIN ONLY finIncentiveType C
                    ON ( A.incentiveTypeId = C.incentiveTypeId )
            INNER JOIN finOperation B
                    ON ( B.operationId     = C.operationId )
                 WHERE ((A.endDate = null AND 
                         A.cancellationDate = null) OR A.endDate > date(now()))
                   AND now() BETWEEN A.startDate AND A.endDate
                   AND C.generateCredits   = TRUE
                   AND A.contractId        = ?';

        $incentives = $this->db->query(SAGU::prepare($sql, $data->contractId));

        $isFinAid = false;
        for ( $i = 0; $i < count($incentives) && $isFinAid == false; $i++ )
        {
            if ( $incentives[$i][8] == 1 )
            {
                $isFinAid = true;
            }
        }
        
        //Obtém os dados referentes as disciplinas (créditos e descontos)
        if ( count($data->groupId) > 0 )
        {
            //seriado
            if ( $serialEnrollProcess )
            {
                $enrollSummary->multiplier = number_format(1, 8, '.', '');
                //$enrollSummary->isValue    = DB_TRUE; 
                
                $busPrice  = $MIOLO->getBusiness('finance', 'BusPrice');
                $priceData = $busPrice->getLastPrice($data->learningPeriodId);
                
                //se for menos que o mínimo de disciplinas o valor é por disciplina
                if ( count($data->groupId) < $priceData->minimumCurricularComponent )
                {
                    $incentivesValue = count($data->groupId) * $priceData->curricularComponentPrice;
                    // numero de disciplina vezes o valor da disciplina e,
                    // dividido pelo valor do curso pq depois ele multiplica pelo valor do curso,
                    // então é apenas para anular esse cálculo
                    $enrollSummary->multiplier = number_format( ( count($data->groupId) * $priceData->curricularComponentPrice ) / $priceData->value, 8, '.','');
                }
                else
                {
                    $incentivesValue = $priceData->value;
                }
            }
            //creditos
            else
            {
                $financeCredits = 0;
                foreach ( $data->groupId as $groupId )
                {               
                    //Créditos
                    $sql = 'SELECT C.financeCredits
                              FROM acdGroup A
                        INNER JOIN acdCurriculum B
                                ON (B.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent C
                                ON (C.curricularComponentId = B.curricularComponentId AND
                                    C.curricularComponentVersion = B.curricularComponentVersion)
                                WHERE A.groupId = ?';
                                
                    $result = $this->db->query(SAGU::prepare($sql, $groupId));
                    
                    $financeCredits += $result[0][0];
                    
                    //Descontos
                    if ( !$isFinAid )
                    {
                        $sql = ' SELECT discounting,
                                        numCredits,
                                        operationId
                                   FROM acdSchedule
                                  WHERE groupId = ? ';
                                    
                        $discounts = $this->db->query(SAGU::prepare($sql, $groupId));
                        
                        if ( count($discounts) > 0 )
                        {
                            foreach ( $discounts as $disc )
                            {
                                if ( $disc[0] > 0 )
                                {
                                    if ( $disc[1] > 0 )
                                    {
                                        $numCredits = $disc[1];
                                    }
                                    else
                                    {
                                        $numCredits = $result[0][0];
                                    }
                                    
                                    //Monta os dados dos descontos e os insere na tabela acdEnrollSummary
                                    $enrollSummary->multiplier       = number_format($numCredits*($disc[0]/100), 8, '.', '');
                                    $enrollSummary->operationId      = $disc[2];
                                    
                                    $x = $business->insertEnrollSummary($enrollSummary);
                                    
                                    $totalDiscount += $enrollSummary->multiplier;
                                }
                            }
                        }
                    }
                }

                $enrollSummary->multiplier = $financeCredits;
                //Verifica sobre quantos créditos o incentivo será aplicado (créditos totais menos os descontos)
                $incentivesValue = number_format($financeCredits, 8) - $totalDiscount;

            } //fim da coleta dos dados das disciplinas do modelo seriado e credito

            //Monta os dados referentes a mensalidade e insere no resumo de matrícula
            $enrollSummary->operationId = $policyData->operationId;
        
            $business->insertEnrollSummary($enrollSummary);
        }
        
        //Processa os incentivos
        if ( count($incentives) > 0 )
        {

            foreach ( $incentives as $inc )
            {   
                if ( $inc[0] == DB_TRUE )
                {
                    $multiplier = $incentivesValue * ($inc[1]/100);
                }
                else
                {
                    $multiplier = $inc[1];
                }
                
                if ( $serialEnrollProcess )
                {
                    $enrollSummary->isValue = DB_TRUE;
                }
                
                //Atualiza os dados necessários para enviar a acdEnrollSummary
                $enrollSummary->multiplier       = number_format($multiplier, 8,'.','');
                $enrollSummary->operationId      = $inc[4];
                $business->insertEnrollSummary($enrollSummary);
            }
        }
        
        if ( (count($business->getErrors()) > 0) || (count($this->getErrors()) > 0) )
        {
            return false;
        }
        else
        {   
            return true;
        }
    }
    
    /**
     * Simulate enroll summary data generation process 
     *
     * @return Return and array representing the enroll summary data.
     *
     **/
    public function generateFakeEnrollSummary($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fakeEnrollSummary = array();

        $business = $MIOLO->getBusiness($module, 'BusEnrollSummary');

        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

        if ( strlen((string)$data->contractId)>0 )
        {
            $busContract  = $MIOLO->getBusiness($module, 'BusContract');
            $contractData = $busContract->getContract($data->contractId);

            $busCourseVersion  = $MIOLO->getBusiness($module, 'BusCourseVersion');
            $courseVersionData = $busCourseVersion->getCourseVersion($contractData->courseId, $contractData->courseVersion);
        }
        elseif ( strlen((string)$data->classId)>0 )
        {
            $busCourseVersion  = $MIOLO->getBusiness($module, 'BusCourseVersion');
            $courseVersionData = $busCourseVersion->getCourseVersion($learningPeriodData->courseId, $learningPeriodData->courseVersion);
        }

        $serialEnrollProcess = false;
        if ( in_array($courseVersionData->courseVersionTypeId, explode(',', str_replace(' ', '', SERIAL_ENROLL_TYPE_IDS) ) ) )
        {
            $serialEnrollProcess = true;
        }

        //Obtem informações do periodo letivo e políticas
        $sql = 'SELECT parcelsNumber,
                       policyId
                  FROM acdLearningPeriod
                 WHERE learningPeriodId = ?';

        $finInfo = $this->db->query(SAGU::prepare($sql, $data->learningPeriodId));

        $busPolicy  = $MIOLO->getBusiness('finance', 'BusPolicy');

        $policyData = $busPolicy->getPolicy($finInfo[0][1]);

        //Obtém número de parcelas
        if ( strlen((string)$data->parcelsNumber) > 0 )
        {
            $parcelsNumber = $data->parcelsNumber;
        }
        else
        {
            $parcelsNumber = strlen((string)$contractData->parcelsNumber)>0 ? $contractData->parcelsNumber : $finInfo[0][0];
        }

        $enrollSummary = new acdEnrollSummary();
        $enrollSummary->contractId       = $data->contractId;
        $enrollSummary->learningPeriodId = $data->learningPeriodId;
        $enrollSummary->parcelsNumber    = $parcelsNumber;
        $enrollSummary->isProcessed      = DB_FALSE;
        $enrollSummary->isValue          = DB_FALSE;
        $enrollSummary->recordDate       = date(MASK_DATE_PHP);

        if ( $data->contractId )
        {
            //Obtém os incentivos para determinado contrato
            $sql = 'SELECT A.valueIsPercent,
                           A.value,
                           A.supporterId,
                           A.agglutinate,
                           C.operationId,
                           C.needAdjustAuthorization,
                           C.sendInvoices,
                           C.generateCredits,
                           CASE WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finFinancialAid) 
                                THEN 1
                                ELSE 2 END as financialAid
                      FROM finIncentive A
                INNER JOIN ONLY finIncentiveType C
                        ON ( A.incentiveTypeId = C.incentiveTypeId )
                INNER JOIN finOperation B
                        ON ( B.operationId     = C.operationId )
                     WHERE ((A.endDate = null AND 
                             A.cancellationDate = null) OR A.endDate > date(now()))
                       AND now() BETWEEN A.startDate AND A.endDate
                       AND C.generateCredits   = TRUE
                       AND A.contractId        = ?';

            $incentives = $this->db->query(SAGU::prepare($sql, $data->contractId));
        }

        $isFinAid = false;
        for ( $i = 0; $i < count($incentives) && $isFinAid == false; $i++ )
        {
            if ( $incentives[$i][8] == 1 )
            {
                $isFinAid = true;
            }
        }

        //Obtém os dados referentes as disciplinas (créditos e descontos)
        if ( count($data->groupId) > 0 )
        {
            //seriado
            if ( $serialEnrollProcess )
            {
                $enrollSummary->multiplier = number_format(1, 8, '.', '');

                //$enrollSummary->isValue    = DB_TRUE; 
                
                $busPrice  = $MIOLO->getBusiness('finance', 'BusPrice');
                $priceData = $busPrice->getLastPrice($data->learningPeriodId);

                //se for menos que o mínimo de disciplinas o valor é por disciplina
                if ( count($data->groupId) < $priceData->minimumCurricularComponent )
                {
                    $incentivesValue = count($data->groupId) * $priceData->curricularComponentPrice;
                    // numero de disciplina vezes o valor da disciplina e,
                    // dividido pelo valor do curso pq depois ele multiplica pelo valor do curso,
                    // então é apenas para anular esse cálculo
                    $enrollSummary->multiplier = number_format( ( count($data->groupId) * $priceData->curricularComponentPrice ) / $priceData->value, 8, '.','');
                }
                else
                {
                    $incentivesValue = $priceData->value;
                }
            }
            //creditos
            else
            {
                $financeCredits = 0;
                foreach ( $data->groupId as $groupId )
                {               
                    //Créditos
                    $sql = 'SELECT C.financeCredits
                              FROM acdGroup A
                        INNER JOIN acdCurriculum B
                                ON (B.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent C
                                ON (C.curricularComponentId = B.curricularComponentId AND
                                    C.curricularComponentVersion = B.curricularComponentVersion)
                                WHERE A.groupId = ?';
                                
                    $result = $this->db->query(SAGU::prepare($sql, $groupId));
                    
                    $financeCredits += $result[0][0];
                    
                    //Descontos
                    if ( !$isFinAid )
                    {
                        $sql = ' SELECT discounting,
                                        numCredits,
                                        operationId
                                   FROM acdSchedule
                                  WHERE groupId = ? ';
                                    
                        $discounts = $this->db->query(SAGU::prepare($sql, $groupId));
                        
                        if ( count($discounts) > 0 )
                        {
                            foreach ( $discounts as $disc )
                            {
                                if ( $disc[0] > 0 )
                                {
                                    if ( $disc[1] > 0 )
                                    {
                                        $numCredits = $disc[1];
                                    }
                                    else
                                    {
                                        $numCredits = $result[0][0];
                                    }
                                    
                                    //Monta os dados dos descontos e os insere na tabela acdEnrollSummary
                                    $enrollSummary->multiplier       = number_format($numCredits*($disc[0]/100), 8, '.', '');
                                    $enrollSummary->operationId      = $disc[2];
                                    
                                    $fakeEnrollSummary[] = clone($enrollSummary);
                                    //$x = $business->insertEnrollSummary($enrollSummary);
                                    
                                    $totalDiscount += $enrollSummary->multiplier;
                                }
                            }
                        }
                    }
                }
                
                $enrollSummary->multiplier = $financeCredits;
                //Verifica sobre quantos créditos o incentivo será aplicado (créditos totais menos os descontos)
                $incentivesValue = number_format($financeCredits, 8) - $totalDiscount;

            } //fim da coleta dos dados das disciplinas do modelo seriado e credito

            //Monta os dados referentes a mensalidade e insere no resumo de matrícula
            $enrollSummary->operationId = $policyData->operationId;

            $fakeEnrollSummary[] = clone($enrollSummary);

            //$business->insertEnrollSummary($enrollSummary);
        }

        //Processa os incentivos
        if ( count($incentives) > 0 )
        {

            foreach ( $incentives as $inc )
            {   
                if ( $inc[0] == DB_TRUE )
                {
                    $multiplier = $incentivesValue * ($inc[1]/100);
                }
                else
                {
                    $multiplier = $inc[1];
                }
                
                if ( $serialEnrollProcess )
                {
                    $enrollSummary->isValue = DB_TRUE;
                }
                
                //Atualiza os dados necessários para enviar a acdEnrollSummary
                $enrollSummary->multiplier       = number_format($multiplier, 8,'.','');
                $enrollSummary->operationId      = $inc[4];
                $fakeEnrollSummary[] = clone($enrollSummary);
                //$business->insertEnrollSummary($enrollSummary);
            }
        }
        return $fakeEnrollSummary;
    }

    public function insertPersonEnrollNew($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $contractData = $busContract->getContract($data->contractId);

        $busCourse  = $MIOLO->getBusiness($module, 'BusCourse');
        $courseData = $busCourse->getCourse($contractData->courseId);

        //caso o gnuteca esteja instalado, insere o vinculo do aluno
        if ( MODULE_GNUTECA_INSTALLED == 'YES' )
        {
            $sql = 'SELECT COUNT(*) 
                      FROM basPersonLink
                     WHERE personId     = ?
                       AND linkid       = ?
                       AND datevalidate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args = array( $contractData->personId,
                           DEFAULT_LINK_STUDENT,
                           $learningPeriodData->endDate );

            $link = $this->db->query(SAGU::prepare($sql, $args));

            if ( $link[0][0] < 1 )
            {
                $sql = 'INSERT INTO basPersonLink 
                                    ( personid, linkid, datevalidate ) 
                             VALUES ( ?, ?, TO_DATE(?,\'' . MASK_DATE . '\') )';

                $args = array( $contractData->personId,
                               DEFAULT_LINK_STUDENT,
                               $learningPeriodData->endDate );
        
                $this->db->execute(SAGU::prepare($sql, $args));
            }
        }

        //informações da taxa de matrícula
        if ( ( strtoupper($learningPeriodData->isFinanceGenerate ) == strtoupper(DB_TRUE) ) &&
             ( MODULE_FINANCE_INSTALLED == 'YES') )
        {

            //inclui os defines do finance
            $business = $MIOLO->getBusiness('basic','BusConfig');
            $constants = $business->getModuleValues('finance');
            foreach ( $constants as $cnt )
            {
                define($cnt[0],$cnt[1]);
            }

            //inclui os defines do accountancy
            $business = $MIOLO->getBusiness('basic','BusConfig');
            $constants = $business->getModuleValues('accountancy');
            foreach ( $constants as $cnt )
            {
                define($cnt[0],$cnt[1]);
            }

            //verifica se ja tem a taxa de matrícula
            $busReceivableInvoice = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
            $haveEnrollFee        = $busReceivableInvoice->haveEnrollFee($contractData->personId, $learningPeriodData->beginDate, $learningPeriodData->endDate, $contractData->courseId, $contractData->courseVersion, $contractData->unitId);

            /* cria um título TAXA DE MATRICULA caso o mesmo aidna não exista
               (apenas monta os dados para inserção do título) */
            if ( $haveEnrollFee != true )
            {
                //Preço do curso
                $args = array( $learningPeriodData->learningPeriodId,
                               $learningPeriodData->beginDate,
                               $learningPeriodData->endDate
                             );
                $business = $MIOLO->getBusiness('finance', 'BusPrice');
                $price    = $business->getPrice($args);

                //Vencimento da taxa de matrícula
                $maturityDate         = $busReceivableInvoice->generateMaturityDate($learningPeriodData->beginDate, strlen((string)$contractData->maturityDay) ? $contractData->maturityDay : MATURITY_DAY);

                //Pega a operação de taxa de matrícula
                $busDefaultOperations = $MIOLO->getBusiness('finance', 'BusDefaultOperations');
                $defaultOperations    = $busDefaultOperations->getDefaultOperations();

                /* DADOS DO TITULO */
                $invoice->data->contractId      = $contractData->contractId;
                $invoice->data->personId        = $contractData->personId;
                $invoice->data->incomeSourceId  = ENROLL_INCOME_SOURCE_ID;;
                $invoice->data->bankAccountId   = $busLearningPeriod->getLearningPeriodBankAccount($data->learningPeriodId);
                $invoice->data->bankContractId  = $busLearningPeriod->getLearningPeriodBankContract($data->learningPeriodId);
                $invoice->data->emissionDate    = date(MASK_DATE_PHP);
                $invoice->data->parcelNumber    = 1;
                $invoice->data->courseId        = $contractData->courseId;
                $invoice->data->courseVersion   = $contractData->courseVersion;
                $invoice->data->unitId          = $contractData->unitId;
                $invoice->data->automaticDebit  = DB_FALSE;
                $invoice->data->accountSchemeId = DEFAULT_TAX_ACCOUNT_SCHEME_ID;
                $invoice->data->costCenterId    = DEFAULT_TAX_COST_CENTER_ID;
                $invoice->data->value           = $price->enrollValue;
                $invoice->data->maturityDate    = $maturityDate;
                $invoice->data->periodId        = $learningPeriodData->periodId;

                $pi = $busContract->getContractPolicyId($contractData->contractId);
                $invoice->data->policyId        = strlen((string)$pi)>0 ? $pi : DEFAULT_ENROLL_TAX_POLICY_ID;

                /* DADOS DO LANCAMENTO */
                $invoice->entry->costCenterId = DEFAULT_TAX_COST_CENTER_ID;
                $invoice->entry->isAccounted  = DB_FALSE;
                $invoice->entry->creationType = AUTOMATIC_ENTRY_CREATION_TYPE;
                $invoice->entry->value        = $price->enrollValue;
                $invoice->entry->entryDate    = date(MASK_DATE_PHP);
                $invoice->entry->operationId  = $defaultOperations->enrollTaxOperation;

            }
        }
        
        $transaction = $this->db->getTransaction();
        $transaction->_begintransaction();
        
        //Obtém as disciplinas nas quais o aluno já está matriculado
        $sql = 'SELECT enrollId
                  FROM acdEnroll
                 WHERE groupId IN ( SELECT groupId
                                      FROM acdGroup A
                                INNER JOIN acdLearningPeriod B
                                        ON (B.learningPeriodId = A.learningPeriodId)
                                     WHERE B.periodId = ? )
                   AND contractId = ?
                   AND enrollId NOT IN (SELECT enrollId FROM acdcomplementaryactivities)';
        
        $args = array( $learningPeriodData->periodId,
                       $data->contractId );
        
        $pupilEnrolls = $this->db->query(SAGU::prepare($sql, $args));

        //Limpa os registros referentes a matricula ja existente
        if (count($pupilEnrolls) > 0)
        {
            $business2 = $MIOLO->getBusiness($module, 'BusFrequenceEnroll');
            $business3 = $MIOLO->getBusiness($module, 'BusEvaluationEnroll');
            
            $business2->db = $this->db;
            $business3->db = $this->db;
            foreach ( $pupilEnrolls as $pupilEnroll )
            {
                $enrollId = $pupilEnroll[0];
                $business3->deleteEvaluationEnroll(null, $enrollId);
                $business2->deleteFrequenceEnroll($enrollId);
                $this->deleteEnroll($enrollId);
            }
        }
        
        //$busEnrollSummary = $MIOLO->getBusiness($module, 'BusEnrollSummary');
        //$busEnrollSummary->deleteEnrollSummary($data->contractId, $data->learningPeriodId);
        
        $busGroup = $MIOLO->getBusiness($module, 'BusGroup');
        
        //Monta os dados referentes a nova matricula
        if (count($data->groupId) > 0)
        {
            $enroll = new acdEnroll();
            $enroll->contractId = $data->contractId;
            $enroll->statusId   = ENROLL_STATUS_ENROLLED;
            $enroll->ip         = $_SERVER['REMOTE_ADDR'];
            $enroll->dateEnroll = date(MASK_DATE_PHP);
            $enroll->hourEnroll = date(MASK_DATE_PHP);

            foreach ($data->groupId as $groupId => $limbo)
            {
                $groupData = $busGroup->getGroup($groupId);
                
                $enroll->groupId      = $groupId;            
                $enroll->curriculumId = $groupData->curriculumId;

                if ( $data->curriculumIdOld[$groupData->curriculumId] )
                {
                    $enroll->curriculumId = $data->curriculumIdOld[$groupData->curriculumId];
                }

                $this->insertEnroll($enroll);
            }
        }

        //Verifica se ja possui a movimentação de matricula
        $sql = 'SELECT A.stateContractId,
                       A.contractId,
                       A.stateTime
                  FROM acdMovementContract A,
                       acdLearningPeriod B
                 WHERE A.contractId = ?
                   AND B.learningPeriodId = ?
                   AND A.stateTime BETWEEN B.beginDate AND B.endDate
              ORDER BY A.stateTime DESC LIMIT 1';
              
        $args = array( $data->contractId, 
                       $data->learningPeriodId );
        
        $actualState = $this->db->query(SAGU::prepare($sql, $args));

        //Se necessário, insere a movimentação contratual
        if ($actualState[0][0] != STATE_CONTRACT_ID_ENROLLED)
        {
            $movementContract                   = new acdMovementContract();
            $movementContract->contractId       = $data->contractId;
            $movementContract->stateContractId  = STATE_CONTRACT_ID_ENROLLED;
            $movementContract->reasonId         = $data->reasonId;
            $movementContract->learningPeriodId = $data->learningPeriodId;
            $movementContract->stateTime        = date(MASK_TIMESTAMP_PHP);
            
            $busMovementContract     = $MIOLO->getBusiness($module, 'BusMovementContract');
            $busMovementContract->db = $this->db;
            $busMovementContract->insertMovementContract($movementContract);
        }
        //Senão, apenas atualiza a data da movimentação de matricula existente
        else
        {
            $movementContract->contractId       = $actualState[0][1];
            $movementContract->stateContractId  = $actualState[0][0];
            $movementContract->stateTimeOld     = $actualState[0][2];
            $movementContract->stateTimeNew     = date(MASK_TIMESTAMP_PHP);
            
            $busMovementContract     = $MIOLO->getBusiness($module, 'BusMovementContract');
            $busMovementContract->db = $this->db;
            $busMovementContract->updateStateTimeMovementContract($movementContract);
        }
        
        //Verifica se deve gerar financeiro e se o módulo finance está instalado
        if ((strtoupper($learningPeriodData->isFinanceGenerate) == strtoupper(DB_TRUE)) &&
            (MODULE_FINANCE_INSTALLED == 'YES'))
        {
            $busEnrollSummaryGen     = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
            $busEnrollSummaryGen->db = $this->db;
            //Gera os dados para a acdEnrollSummary (necessários para o módulo financeiro)

            $busEnrollSummaryGen->generateEnrollSummaryInEnrollPeriod($data);

            //insere a taxa de matrícula
            if ( $haveEnrollFee != true )
            {
                $invoiceId = $this->insertEnrollFee($invoice);
            }
        }

        if ( count($this->getErrors()) > 0 )
        {
            $transaction->_rollback();
            return false;
        }
        else
        {
            $transaction->_commit();
            return strlen((string)$invoiceId)>0 ? $invoiceId : true;
        }
    }
    
    /**
     * Insert enrolls for all the class pupils
     * 
     * @param $data (object): an object containing the data
     *
     * @return: $status (object): an object containing the status details of the operation
     *
     **/
    public function insertClassEnroll($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busGroup            = $MIOLO->getBusiness($module, 'BusGroup');
        $busLearningPeriod   = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $busClassPupil       = $MIOLO->getBusiness($module, 'BusClassPupil');

        $status->ok             = true;
        $status->numberInserted = 0;

        $filters->classId = $data->classId;

        //Not search pupils that have endDate on the class
        $filters->notHaveEndDate = DB_TRUE;

        //Obtem os alunos pertencentes a turma
        $classPupils = $busClassPupil->searchClassPupil($filters);

        if (count($classPupils))
        {
            $transaction = $this->db->getTransaction();
            $transaction->_beginTransaction();
            
            foreach ($classPupils as $classPupil)
            {
                $cantEnroll = false;
                
                list ( $classId,
                       $name,
                       $contractId,
                       $contractCourseId,
                       $contractCourseVersion,
                       $courseShortName,
                       $personId,
                       $personName,
                       $learningPeriodBeginDate,
                       $classBeginDate,
                       $classEndDate ) = $classPupil;

                //dependências
                $totalDep = $this->getTotalDependent($contractId, $data->learningPeriodId);
                $sql = 'SELECT A.maximumDependent
                          FROM acdCourseOccurrence A
                    INNER JOIN acdContract B
                            ON (     A.courseId = B.courseId
                                 AND A.courseVersion = B.courseVersion
                                 AND A.unitId = B.unitId
                                 AND A.turnId = B.turnId )
                         WHERE B.contractId = ?';
                $res_ = $this->db->query(SAGU::Prepare($sql, $contractId));
                $maximumDependent = strlen((string)$res_[0][0])>0 ? $res_[0][0] : 0;

                //fnanceiro
                if ( $this->getPersonBalance($personId) > 0  )
                {
                    if ( !@in_array($contractId, $status->errors) )
                    {
                        $status->errors[] = $contractId;
                    }
                }
                elseif ( $totalDep > $maximumDependent )
                {
                    if ( !@in_array($contractId, $status->errors) )
                    {
                        $status->errors[] = $contractId;
                    }
                }
                //academico
                elseif ( count($data->groupId) > 0 )
                {
                    foreach ( $data->groupId as $groupId => $groupId_ )
                    {
                        $groupData = $busGroup->getGroup($groupId);
                        
                        $groupStatus = $this->getCurricularComponentStatus($contractId, $groupData->curriculumCurricularComponentId, $groupData->curriculumCurricularComponentVersion, $data->learningPeriodId, $groupData->curriculumId);
                        
                        if ( $groupStatus->status != 'FREE' )
                        {
                            //Indica que este aluno não pode ser matriculado e adiciona o contrato na lista de erros da matricula
                            $cantEnroll = true;
                            
                            if (!@in_array($contractId, $status->errors))
                            {
                                $status->errors[] = $contractId;
                            }
                        }

                        //verifica os pré-requisitos
                        if ( $this->hasCondition($groupId, $contractId) == true )
                        {
                            //Indica que este aluno não pode ser matriculado e adiciona o contrato na lista de erros da matricula
                            $cantEnroll = true;
                            
                            if (!@in_array($contractId, $status->errors))
                            {
                                $status->errors[] = $contractId;
                            }
                        }

                    }//foreach group

                    if ( ! $cantEnroll )
                    {

                            //Monta o objeto para inserir a matricula do aluno
                            $enrollData->learningPeriodId = $data->learningPeriodId;
                            $enrollData->contractId       = $contractId;
                            $enrollData->parcelsNumber    = $data->parcelsNumber;
                            $enrollData->groupId          = $data->groupId;
                            $enrollData->isSerialEnrollProcess = $data->isSerialEnrollProcess;
                            $enrollData->curriculumIdOld       = $data->curriculumIdOld;
                            $this->insertPersonEnrollNew($enrollData);

                            if (count($this->getErrors()) > 0)
                            {
                                $status->ok = false;
                            }
                            else
                            {
                                $status->numberInserted++;
                            }
                    }
                }
            }
            
            if ( $status->ok == false )
            {
                $transaction->_rollBack();
            }
            else
            {
                $transaction->_commit();
            }
        }
        
        return $status;
    }

    function hasCondition($groupId, $contractId)
    {
       //pega a disciplina do currículo
       $sql  = 'SELECT curriculumId,
                       learningPeriodId
                  FROM acdGroup
                 WHERE groupId = ?';

       $args = array ($groupId);
       $res  = $this->db->query(SAGU::prepare($sql, $args));
       list ( $curriculumId, $learningPeriodId ) = $res[0];

       //Verifica os pré-requisitos
       $sql  = 'SELECT A.conditionCurriculumId,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId
                  FROM acdCondition A
                 WHERE A.curriculumId = ?
                   AND type = \'P\'';
                               
       $args = array ($curriculumId);
       $res  = $this->db->query(SAGU::prepare($sql, $args));

       if ( count($res) > 0 )
       {
           $blocked = false;
           foreach ( $res as $res_ )
           {
               list ( $conditionCurriculumId,
                      $credits,
                      $numberHours,
                      $educationAreaId ) = $res_;

                //Disciplina pré-requisito
                if ( strlen((string)$conditionCurriculumId)>0 )
                {
                    $sql = 'SELECT enrollId
                              FROM acdEnroll
                             WHERE curriculumId = ?
                               AND contractId = ?
                               AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                    $args = array ($conditionCurriculumId, $contractId);
                    $res2 = $this->db->query(SAGU::prepare($sql, $args));
                                
                    if ( count($res2) == 0 )
                    {
                        $blocked = true;
                    }
                }

                //Número mínimo de créditos
                if ( $credits > 0 )
                {
                    $sql = 'SELECT SUM(C.academicCredits)
                              FROM acdEnroll A
                        INNER JOIN acdCurriculum B
                                ON (B.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent C
                                ON (C.curricularComponentId = B.curricularComponentId AND
                                    C.curricularComponentVersion = B.curricularComponentId)
                             WHERE A.contractId = ?
                               AND C.educationAreaId = ?
                               AND A.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                    $args = array($contractId, $educationAreaId);
                                
                    $result2 = $this->db->query(SAGU::prepare($sql, $args));
                                
                    if ($result2[0][0] < $credits)
                    {
                        $blocked = true;
                    }
                }
                           
                //Carga horária mínima
                if ( $numberHours > 0 )
                {
                    $sql = 'SELECT SUM(C.academicNumberHours)
                              FROM acdEnroll A
                        INNER JOIN acdCurriculum B
                                ON (B.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent C
                                ON (C.curricularComponentId = B.curricularComponentId AND
                                    C.curricularComponentVersion = B.curricularComponentId)
                             WHERE A.contractId = ?
                               AND C.educationAreaId = ?
                               AND A.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED .')';
                                           
                    $args = array($contractId, $educationAreaId);
                    $result2 = $this->db->query(SAGU::prepare($sql, $args));

                    if ($result2[0][0] < $numberHours)
                    {
                        $blocked = true;
                    }
                }

                if ( $blocked == true )
                {
                    $sql = 'SELECT curricularComponentUnblockId
                              FROM acdCurricularComponentUnblock
                             WHERE contractId = ?
                               AND learningPeriodId = ?
                               AND curriculumId = ?
                               AND isConditionBreak = ? ';

                    $args = array($contractId, $learningPeriodId, $curriculumId, 't');
                    $result = $this->db->query(SAGU::prepare($sql, $args));

                    if ( strlen((string)$result[0][0]) == 0 )
                    {
                        return true;
                    }
                }
            } //foreach
            return false;
        }
        else
        {
            return false;
        }
    }

    /* AJUSTE DE MATRÍCULAS OU REMATRÍCULA, e MATRÍCULA OU REMATRÍCULA FORA DE PERÍODO (para funcionários)*/
    public function updatePersonEnrollNew($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);

        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $contractData = $busContract->getContract($data->contractId);

        $busCourse  = $MIOLO->getBusiness($module, 'BusCourse');
        $courseData = $busCourse->getCourse($contractData->courseId);

        //caso o gnuteca esteja instalado, insere o vinculo do aluno
        if ( MODULE_GNUTECA_INSTALLED == 'YES' )
        {
            $sql = 'SELECT COUNT(*) 
                      FROM basPersonLink
                     WHERE personId     = ?
                       AND linkid       = ?
                       AND datevalidate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args = array( $contractData->personId,
                           DEFAULT_LINK_STUDENT,
                           $learningPeriodData->endDate );

            $link = $this->db->query(SAGU::prepare($sql, $args));

            if ( $link[0][0] < 1 )
            {
                $sql = 'INSERT INTO basPersonLink 
                                    ( personid, linkid, datevalidate ) 
                             VALUES ( ?, ?, TO_DATE(?,\'' . MASK_DATE . '\') )';

                $args = array( $contractData->personId,
                               DEFAULT_LINK_STUDENT,
                               $learningPeriodData->endDate );
        
                $this->db->execute(SAGU::prepare($sql, $args));
            }
        }

        //informações da taxa de matrícula
        if ( ( strtoupper($learningPeriodData->isFinanceGenerate ) == strtoupper(DB_TRUE) ) &&
             ( MODULE_FINANCE_INSTALLED == 'YES') )
        {

            //inclui os defines do finance
            $business = $MIOLO->getBusiness('basic','BusConfig');
            $constants = $business->getModuleValues('finance');
            foreach ( $constants as $cnt )
            {
                define($cnt[0],$cnt[1]);
            }

            //inclui os defines do accountancy
            $business = $MIOLO->getBusiness('basic','BusConfig');
            $constants = $business->getModuleValues('accountancy');
            foreach ( $constants as $cnt )
            {
                define($cnt[0],$cnt[1]);
            }

            //verifica se ja tem a taxa de matrícula
            $busReceivableInvoice = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
            $haveEnrollFee        = $busReceivableInvoice->haveEnrollFee($contractData->personId, $learningPeriodData->beginDate, $learningPeriodData->endDate, $contractData->courseId, $contractData->courseVersion, $contractData->unitId);

            /* cria um título TAXA DE MATRICULA caso o mesmo aidna não exista
               (apenas monta os dados para inserção do título) */
            if ( $haveEnrollFee != true )
            {
                //Preço do curso
                $args = array( $learningPeriodData->learningPeriodId,
                               $learningPeriodData->beginDate,
                               $learningPeriodData->endDate
                             );
                $business = $MIOLO->getBusiness('finance', 'BusPrice');
                $price    = $business->getPrice($args);

                //Vencimento da taxa de matrícula
                $maturityDate         = $busReceivableInvoice->generateMaturityDate($learningPeriodData->beginDate, strlen((string)$contractData->maturityDay) ? $contractData->maturityDay : MATURITY_DAY);

                //Pega a operação de taxa de matrícula
                $busDefaultOperations = $MIOLO->getBusiness('finance', 'BusDefaultOperations');
                $defaultOperations    = $busDefaultOperations->getDefaultOperations();

                /* DADOS DO TITULO */
                $invoice->data->contractId      = $contractData->contractId;
                $invoice->data->personId        = $contractData->personId;
                $invoice->data->incomeSourceId  = ENROLL_INCOME_SOURCE_ID;
                $invoice->data->bankAccountId   = $busLearningPeriod->getLearningPeriodBankAccount($data->learningPeriodId);
                $invoice->data->bankContractId  = $busLearningPeriod->getLearningPeriodBankContract($data->learningPeriodId);
                $invoice->data->emissionDate    = date(MASK_DATE_PHP);
                $invoice->data->parcelNumber    = 1;
                $invoice->data->courseId        = $contractData->courseId;
                $invoice->data->courseVersion   = $contractData->courseVersion;
                $invoice->data->unitId          = $contractData->unitId;
                $invoice->data->automaticDebit  = DB_FALSE;
                $invoice->data->accountSchemeId = DEFAULT_TAX_ACCOUNT_SCHEME_ID;
                $invoice->data->costCenterId    = DEFAULT_TAX_COST_CENTER_ID;
                $invoice->data->value           = $price->enrollValue;
                $invoice->data->maturityDate    = $maturityDate;

                $pi = $busContract->getContractPolicyId($contractData->contractId);
                $invoice->data->policyId        = strlen((string)$pi)>0 ? $pi : DEFAULT_ENROLL_TAX_POLICY_ID;

                $invoice->data->periodId        = $learningPeriodData->periodId;

                /* DADOS DO LANCAMENTO */
                $invoice->entry->costCenterId = DEFAULT_TAX_COST_CENTER_ID;
                $invoice->entry->isAccounted  = DB_FALSE;
                $invoice->entry->creationType = AUTOMATIC_ENTRY_CREATION_TYPE;
                $invoice->entry->value        = $price->enrollValue;
                $invoice->entry->entryDate    = date(MASK_DATE_PHP);
                $invoice->entry->operationId  = $defaultOperations->enrollTaxOperation;

            }
        }

        $transaction = $this->db->getTransaction();
        $transaction->_begintransaction();
        
        //Obtém as discplinas nas quais o aluno já está matriculado
        $sql = 'SELECT enrollId,
                       groupId
                  FROM acdEnroll
                 WHERE groupId IN ( SELECT groupId
                                      FROM acdGroup A
                                INNER JOIN acdLearningPeriod B
                                        ON (B.learningPeriodId = A.learningPeriodId)
                                     WHERE B.periodId = ? )
                   AND statusId NOT IN (' . ENROLL_STATUS_CANCELLED . ')
                   AND isadaptation = false
                   AND isdependence = false
                   AND contractId = ?
                   AND enrollId NOT IN (SELECT enrollId FROM acdComplementaryActivities)';
                   
        $args = array( $learningPeriodData->periodId,
                       $data->contractId );
        
        $pupilEnrolls = $this->db->query(SAGU::prepare($sql, $args));
        
        if ( count($pupilEnrolls) > 0 )
        {
            foreach ( $pupilEnrolls as $pupilEnroll )
            {
                //Verifica se o aluno está se matriculando na turma selecionada
                $groupIndex = in_array($pupilEnroll[1], $data->groupId);
                
                if ( !$groupIndex ) //Se não, cancela a matricula já existente
                {
                    $data->cancelledGroupId[] = $pupilEnroll[1];
                    
                    $dateCancellation = date(MASK_DATE_PHP);
                    $hourCancellation = date(MASK_DATE_PHP);
                    
                    $sql = 'UPDATE acdenroll SET statusId = ' . ENROLL_STATUS_CANCELLED . ',
                                                 dateCancellation = TO_DATE(?, \'' . MASK_DATE . '\'),
                                                 hourCancellation = TO_TIMESTAMP(?, \'' . MASK_TIME . '\'),
                                                 reasonCancellationId = ' . INTERNET_ADJUSTMENT_REASON . '
                                           WHERE enrollId = ?
                                             AND contractId = ?
                                             AND groupId = ? ';
                    
                    $args = array( $dateCancellation, 
                                   $hourCancellation, 
                                   $pupilEnroll[0], 
                                   $data->contractId, 
                                   $pupilEnroll[1]);
                    
                    $this->db->execute(SAGU::prepare($sql, $args));
                }
                else //Se sim, exclui a turma da lista, pois ela já existe e não precisa ser inserida novamente
                {
                    $data->groupId = array_diff($data->groupId, array($pupilEnroll[1]));
                }
            }
        }
        
        //Verifica se deve gerar financeiro e se o módulo finance está instalado
        if ( ( strtoupper($learningPeriodData->isFinanceGenerate ) == strtoupper(DB_TRUE) ) &&
             ( MODULE_FINANCE_INSTALLED == 'YES') )
        {
            $busEnrollSummaryGen     = $MIOLO->getBusiness($module, 'BusEnrollSummaryGeneration');
            $busEnrollSummaryGen->db = $this->db;

            //Gera os dados para a acdEnrollSummary (necessários para o módulo financeiro)
            $busEnrollSummaryGen->generateEnrollSummaryInAdjustmentPeriod($data);

            //insere a taxa de matrícula
            if ( $haveEnrollFee != true )
            {
                //$this->insertEnrollFee($invoice);
                $invoiceId = $this->insertEnrollFee($invoice);
            }

        }
        
        //Prepara dados e insere as matrículas
        $busGroup     = $MIOLO->getBusiness($module, 'BusGroup');
        $busGroup->db = $this->db;
        
        //Insere as matrículas
        if ( count($data->groupId) > 0 )
        {
            $enroll = new acdEnroll();
            $enroll->contractId = $data->contractId;
            $enroll->statusId   = ENROLL_STATUS_ENROLLED;
            $enroll->ip         = $_SERVER['REMOTE_ADDR'];
            $enroll->dateEnroll = date(MASK_DATE_PHP);
            $enroll->hourEnroll = date(MASK_DATE_PHP);

            foreach ( $data->groupId as $groupId => $limbo )
            {
                $groupData = $busGroup->getGroup($groupId);
                $enroll->groupId      = $groupId;
                $enroll->curriculumId = $groupData->curriculumId;
                
                if ( $data->curriculumIdOld[$groupData->curriculumId] )
                {
                    $enroll->curriculumId = $data->curriculumIdOld[$groupData->curriculumId];
                }

                $this->insertEnroll($enroll);
            }
        }

        //Verifica se ja possui a movimentação de matricula
        $sql = 'SELECT A.stateContractId,
                       A.contractId,
                       A.stateTime 
                  FROM acdMovementContract A,
                       acdLearningPeriod B
                 WHERE A.contractId = ?
                   AND B.learningPeriodId = ?
                   AND A.stateTime BETWEEN B.beginDate AND B.endDate
              ORDER BY A.stateTime DESC LIMIT 1';
              
        $args = array( $data->contractId, 
                       $data->learningPeriodId );
        
        $actualState = $this->db->query(SAGU::prepare($sql, $args));
        
        //Se necessário, insere a movimentação contratual
        if ($actualState[0][0] != STATE_CONTRACT_ID_ENROLLED)
        {
            //Insere a movimentação contratual
            $movementContract                   = new acdMovementContract();
            $movementContract->contractId       = $data->contractId;
            $movementContract->stateContractId  = STATE_CONTRACT_ID_ENROLLED;
            $movementContract->reasonId         = $data->reasonId;
            $movementContract->learningPeriodId = $data->learningPeriodId;
            $movementContract->stateTime        = date(MASK_TIMESTAMP_PHP);

            $busMovementContract     = $MIOLO->getBusiness($module, 'BusMovementContract');
            $busMovementContract->db = $this->db;
            $busMovementContract->insertMovementContract($movementContract);
        }
        //Senão, apenas atualiza a data da movimentação de matricula existente
        else
        {
            $movementContract->contractId       = $actualState[0][1];
            $movementContract->stateContractId  = $actualState[0][0];
            $movementContract->stateTimeOld     = $actualState[0][2];
            $movementContract->stateTimeNew     = date(MASK_TIMESTAMP_PHP);
            
            $busMovementContract     = $MIOLO->getBusiness($module, 'BusMovementContract');
            $busMovementContract->db = $this->db;
            $busMovementContract->updateStateTimeMovementContract($movementContract);
        }
        
        if ( count($this->getErrors()) > 0 )
        {
            $transaction->_rollback();
            return false;
        }
        else
        {
            $transaction->_commit();
            return strlen((string)$invoiceId)>0 ? $invoiceId : true;
        }
    }
    
    /**
     * Checks the minimum credits
     *
     * @param $data (object): object containing the data to be checked
     *
     * @return (boolean): True if reaches the minimum credits, otherwise false
     *
     **/
    public function checkMinimumCreditsCondition($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if ( count($data->groupId)>0 )
        {
            foreach ( $data->groupId as $groupId )
            {
                $sql = 'SELECT C.academicCredits
                          FROM acdGroup A
                    INNER JOIN acdCurriculum B
                            ON (B.curriculumId = A.curriculumId)
                    INNER JOIN acdCurricularComponent C
                            ON (C.curricularComponentId = B.curricularComponentId AND
                                C.curricularComponentVersion = B.curricularComponentVersion)
                         WHERE A.groupId = ? ';

                $result                 = $this->db->Query(SAGU::prepare($sql, $groupId));

                $totalAcademicCredits += $result[0][0];
            }
        }
        
        $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
        
        //Verifica número de créditos);
        
        if ($data->reasonId == SELECTIVE_PROCESS_REASON_ID)
        {
            $minCredits = $learningPeriodData->minimumCreditsFreshman;
        }
        else
        {
            $minCredits = $learningPeriodData->minimumCredits;
        }
        
        if ($minCredits > $totalAcademicCredits)
        {
            $busMinCreditsUnblock  = $MIOLO->getBusiness($module, 'BusMinimumCreditsUnblock');
            
            $minimumCreditsUnblock = $busMinCreditsUnblock->searchMinimumCreditsUnblock($data);
            
            if (count($minimumCreditsUnblock) == 0)
            {
               return false;
            }
        }
        return true;
    }
    
    /**
     * Checks the turn minimum credits
     *
     * @param $data (object): object containing the data to be checked
     *
     * @return (boolean): True if reaches the turn minimum credits, otherwise false
     *
     **/
    public function checkTurnMinimumCreditsCondition($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
                
        if (count($data->groupId) > 0)
        {
            $busContract  = $MIOLO->getBusiness($module, 'BusContract');
            $contractData = $busContract->getContract($data->contractId);
                        
            //Obtem o semestre que possibilita cursar disciplinas em outro turno, caso exista esse dado
            $freeOtherTurns = explode( ',', str_replace(' ', '', FREE_OTHER_TURN_SEMESTERS) );
            
            unset($anotherTurnSemester);
            
            if ( count($freeOtherTurns) > 0 )
            {
                foreach ( $freeOtherTurns as $freeTurnData )
                {
                    $freeTurnCourseData = explode('=>', $freeTurnData);
                    
                    if ($freeTurnCourseData[0] == $contractData->courseId)
                    {
                        $anotherTurnSemester = $freeTurnCourseData[1];
                    }
                }
            }
            
            //Obtem o numero de creditos em que o aluno se matriculou no turno de seu curso
            foreach ( $data->groupId as $groupId )
            {
                $sql = 'SELECT C.academicCredits,
                               E.turnId
                          FROM acdGroup A
                    INNER JOIN acdCurriculum B
                            ON (B.curriculumId = A.curriculumId)
                    INNER JOIN acdCurricularComponent C
                            ON (C.curricularComponentId = B.curricularComponentId AND
                                C.curricularComponentVersion = B.curricularComponentVersion)
                    INNER JOIN acdSchedule D
                            ON (D.groupId = A.groupId)
                    INNER JOIN acdScheduleLearningPeriod E
                            ON (E.scheduleLearningPeriodId = D.scheduleLearningPeriodId)
                         WHERE A.groupId = ? ';

                $result = $this->db->Query(SAGU::prepare($sql, $groupId));

                if ($result[0][1] == $contractData->turnId)
                {
                    $totalTurnCredits += $result[0][0];
                }
            }
        
            $busGroup           = $MIOLO->getBusiness($module, 'BusGroup');
            $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
            $busCurriculum      = $MIOLO->getBusiness($module, 'BusCurriculum');
            
            foreach ( $data->groupId as $groupId )
            {
                $groupData = $busGroup->getGroup($groupId);
                
                $sql = 'SELECT C.turnId
                          FROM acdGroup A
                    INNER JOIN acdSchedule B
                            ON (B.groupId = A.groupId)
                    INNER JOIN acdScheduleLearningPeriod C
                            ON (C.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                         WHERE A.groupId = ?';
                                    
                $result = $this->db->query(SAGU::prepare($sql, $groupId));
                
                if ($result[0][0] != $contractData->turnId)
                {
                    $curriculumData = $busCurriculum->getCurriculum($groupData->curriculumId);
                    
                    //Verifica se o semestre da disciplina permite que ela seja cursada em 
                    //turno diferente
                    if ( ($curriculumData->semester >= $anotherTurnSemester) && (strlen((string)$anotherTurnSemester) > 0) )
                    {
                        
                    }
                    else
                    {
                        $learningPeriodData = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
                        
                        //Verifica número de créditos para cursar disciplina em outro turno
                        if ($learningPeriodData->minimumCreditsTurn > 0 &&
                            $learningPeriodData->minimumCreditsTurn > $totalTurnCredits)
                        {   
                            $busMinTurnUnblock         = $MIOLO->getBusiness($module, 'BusMinimumTurnUnblock');
                            $minimumTurnUnblock        = $busMinTurnUnblock->searchMinimumTurnUnblock($data);
                            
                            if (count($minimumTurnUnblock) == 0)
                            {
                                return false;
                            }
                            $showIt = true;
                        }
                    }
                }
            }
            return true;
        }
    }
    
    /**
     * Update the number of enrolled pupils on the specified groupId
     *
     * @param $groupId (string): Group id to be updated
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAcdGroupTotalEnrolled($groupId)
    {
        $sql = 'UPDATE acdGroup
                   SET totalEnrolled = (SELECT COUNT(*)
                                          FROM acdEnroll
                                         WHERE groupId = ?
                                           AND dateCancellation IS NULL) 
                 WHERE groupId = ?';

        $args = array ( $groupId, $groupId );
        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$this->db->close();

        return $result;
    }


    /**
     * Delete a record
     *
     * @param $enrollId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEnroll($enrollId)
    {
        $sql = 'DELETE FROM acdEnroll 
                      WHERE enrollId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $enrollId));
        //$this->db->close();

        return $result;
    }

    /**
     * Check if the two groups have shocking schedules
     *
     * @param $groupId1 (integer): First group id
     * @param $groupId2 (integer): Second group id
     *
     * @return (boolean): True if some shock was found, otherwise False
     *
     **/
    public function hasShockingSchedule($groupId1, $groupId2)
    {
        $sql = 'SELECT COUNT(*) > 0 AS occursAtSameTime
                  FROM (SELECT A.groupId,
                               B.weekDayId,
                               C.beginDate,
                               C.beginHour,
                               C.endDate,
                               C.endHour,
                               A.regimenId,
                               D.curricularComponentTypeId
                          FROM acdGroup A,
                               acdSchedule B,
                               acdScheduleLearningPeriod C,
                               acdCurriculum D
                         WHERE B.groupId = A.groupId
                           AND C.scheduleLearningPeriodId = B.scheduleLearningPeriodId
                           AND A.curriculumId = D.curriculumId
                           AND A.groupId = ?) A,
                       (SELECT A.groupId,
                               B.weekDayId,
                               C.beginDate,
                               C.beginHour,
                               C.endDate,
                               C.endHour,
                               A.regimenId,
                               D.curricularComponentTypeId
                          FROM acdGroup A,
                               acdSchedule B,
                               acdScheduleLearningPeriod C,
                               acdCurriculum D
                         WHERE B.groupId = A.groupId
                           AND C.scheduleLearningPeriodId = B.scheduleLearningPeriodId
                           AND A.curriculumId = D.curriculumId
                           AND A.groupId = ?) B
                 WHERE B.weekDayId = A.weekDayId
                   AND B.beginDate <= A.endDate
                   AND B.beginHour <= A.endHour
                   AND B.endDate >= A.beginDate
                   AND B.endHour >= A.beginHour
                   AND (B.regimenId NOT IN (' . SPECIAL_REGIMEN . ') 
                        AND A.regimenId NOT IN (' . SPECIAL_REGIMEN . '))
                   AND (B.curricularComponentTypeId <> ' . CURRICULAR_COMPONENT_TYPE_TRAINING . ' 
                        AND A.curricularComponentTypeId <> ' . CURRICULAR_COMPONENT_TYPE_TRAINING . ')'; 

        $args = array($groupId1, $groupId2);

        $result = $this->db->query(SAGU::prepare($sql, $args));
        //$db->close();

        return ($result[0][0] == DB_TRUE);
    }

    public function isEnrolled($contractId, $groupId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM acdEnroll
                 WHERE contractId = ?
                   AND groupId = ?
                   AND statusId IN (' . ENROLL_STATUS_ENROLLED . ')';

        $args = array($contractId, $groupId);
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return ($result[0][0] > 0);
    }

    public function groupIdEnrolledElective($contractId, $curriculumId, $learningPeriodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT A.groupId,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       D.name as curricularComponentName
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON ( A.groupId = B.groupId )
            INNER JOIN acdCurriculum C
                    ON ( B.curriculumId = C.curriculumId )
            INNER JOIN acdCurricularComponent D
                    ON ( C.curricularComponentId = D.curricularComponentId )
            INNER JOIN acdLearningPeriod E
                    ON (E.learningPeriodId = B.learningPeriodId)
                 WHERE A.contractId = ?
                   AND A.curriculumId = ?
                   AND E.periodId = ?
                   AND A.statusId IN (' . ENROLL_STATUS_ENROLLED . ')';

        $args = array($contractId, $curriculumId, $learningPeriodData->periodId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function isEnrolledPerson($personId, $selectiveProcessId, $courseId, $courseVersion)
    {
        $sql = ' SELECT COUNT(*)
                   FROM acdEnroll C
             INNER JOIN acdGroup D
                     ON (D.groupId = C.groupId)
             INNER JOIN acdLearningPeriod E
                     ON (E.learningPeriodId = D.learningPeriodId)
             INNER JOIN acdContract F
                     ON ( F.contractId = C.contractId)
             INNER JOIN basPhysicalPersonStudent G
                     ON ( F.personId = G.personId )
             INNER JOIN acdCurriculum H
                     ON ( D.curriculumId = H.curriculumId )
                  WHERE F.personId = ?
                    AND E.periodId = ?
                    AND H.courseId = ?
                    AND H.courseVersion = ?
                    AND statusId = 1';//(' . ENROLL_STATUS_ENROLLED . ')';

        $args = array($personId, $selectiveProcessId, $courseId, $courseVersion);
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return ($result[0][0] > 0);
    }

    public function isUnblocked($contractId, $learningPeriodId, $curriculumId)
    {
        $sql = 'SELECT curricularComponentUnblockId
                  FROM acdCurricularComponentUnblock
                 WHERE contractId = ?
                   AND learningPeriodId = ?
                   AND curriculumId = ?
                   AND isConditionBreak = ? ';

        $args = array($contractId, $learningPeriodId, $curriculumId, 't');
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return (strlen((string)$result[0][0]) > 0);
    }
    
    public function isDependent($contractId, $curriculumId)
    {
        $sql = 'SELECT enrollId
                  FROM acdEnroll
                 WHERE contractId = ?
                   AND curriculumId = ?
                   AND statusId IN (' . ENROLL_STATUS_DEPENDENT . ', ' . ENROLL_STATUS_DEPENDENT_FOR_LACKS . ')
                   AND curriculumId NOT IN (SELECT curriculumId 
                                              FROM acdEnroll
                                             WHERE contractId = ?
                                               AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . '))';
                                               
        $args = array ($contractId, $curriculumId, $contractId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        if (count($result) > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function hasDependencies($contractId)
    {
        $sql = 'SELECT enrollId
                  FROM acdEnroll
                 WHERE contractId = ?
                   AND statusId IN (' . ENROLL_STATUS_DEPENDENT . ', ' . ENROLL_STATUS_DEPENDENT_FOR_LACKS . ')
                   AND curriculumId NOT IN (SELECT curriculumId
                                              FROM acdEnroll
                                             WHERE contractId = ?
                                               AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . '))';
                                               
        $args = array($contractId, $contractId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        if (count($result) > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public function isScheduleShock($contractId, $learningPeriodId, $curriculumId)
    {
        $sql = 'SELECT curricularComponentUnblockId
                  FROM acdCurricularComponentUnblock
                 WHERE contractId = ?
                   AND learningPeriodId = ?
                   AND curriculumId = ?
                   AND isScheduleShock = ? ';

        $args = array($contractId, $learningPeriodId, $curriculumId, 't');
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return (strlen((string)$result[0][0]) > 0);
    }

    public function isFreeForEnroll($curricularComponentId, $curricularComponentVersion, $contractId, $learningPeriodId)
    {
        global $MIOLO;
        $module = 'academic';
    
        $retVal = true;

        $sql    = 'SELECT courseId,
                          courseVersion,
                          unitId,
                          turnId
                     FROM acdContract
                    WHERE contractId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $contractId));

        list ( $courseId,
               $courseVersion,
               $unitId,
               $turnId ) = $result[0];

        $sql    = 'SELECT A.curriculumId
                     FROM acdCurriculum A,
                          acdLearningPeriod B
                    WHERE A.courseId      = ?
                      AND A.courseVersion = ?
                      AND A.unitId        = ?
                      AND A.turnId        = ?
                      AND A.curricularComponentId      = ?
                      AND A.curricularComponentVersion = ?
                      AND B.learningPeriodId           = ?
                      AND (A.endDate IS NULL
                           OR A.endDate > B.beginDate)';

        $args   = array (
                          $courseId,
                          $courseVersion,
                          $unitId,
                          $turnId,
                          $curricularComponentId,
                          $curricularComponentVersion,
                          $learningPeriodId
                        );

        $result = $this->db->query(SAGU::prepare($sql, $args));
        $curriculumId = $result[0][0];

        if ( isset($curriculumId) )
        {
            $busCurriculum = $MIOLO->getBusiness($module, 'BusCurriculum');
            
            $curriculumData = $busCurriculum->getCurriculum($curriculumId);
            
            if ($curriculumData->curricularComponentTypeId == CURRICULAR_COMPONENT_TYPE_TRAINING)
            {
                $busCourse = $MIOLO->getBusiness($module, 'BusCourse');
                
                $courseData = $busCourse->getCourse($courseId);
                
                if (strlen((string)$courseData->percTrainingPeriod) > 0)
                {
                    $sql = 'SELECT sum(B.academicNumberHours)
                              FROM acdCurriculum A
                        INNER JOIN acdCurricularComponent B
                                ON (B.curricularComponentId = A.curricularComponentId AND
                                    B.curricularComponentVersion = A.curricularComponentVersion)
                             WHERE A.courseId = ?
                               AND A.courseVersion = ?
                               AND A.unitId = ?
                               AND A.turnId = ?
                               AND A.curriculumTypeId IN (' . CURRICULUM_TYPE_NON_OPTIONAL . ')';   
                    
                    $args = array( $courseId,
                                   $courseVersion,
                                   $unitId,
                                   $turnId );
                    
                    $result = $this->db->query(SAGU::prepare($sql, $args));
                    
                    $totalHours = $result[0][0];
                    
                    $sql = 'SELECT sum(C.academicNumberHours)
                              FROM acdEnroll A
                        INNER JOIN acdCurriculum B
                                ON (B.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent C
                                ON (C.curricularComponentId = B.curricularComponentId AND
                                    C.curricularComponentVersion = B.curricularComponentVersion)
                             WHERE A.contractId = ?
                               AND B.courseId = ?
                               AND B.courseVersion = ?
                               AND B.turnId = ?
                               AND B.unitId = ?
                               AND A.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')
                               AND B.curriculumTypeId IN (' . CURRICULUM_TYPE_NON_OPTIONAL . ')';
                               
                    $args = array( $contractId,
                                   $courseId,
                                   $courseVersion,
                                   $turnId,
                                   $unitId );
                                   
                    $result = $this->db->query(SAGU::prepare($sql, $args));
                    
                    $pupilHours = $result[0][0];
                    
                    if ($pupilHours < (($courseData->percTrainingPeriod / 100) * $totalHours) )
                    {
                        return false;
                    }
                }
            }
            
            $sql = 'SELECT A.conditionCurriculumId,
                           A.credits,
                           A.numberHour,
                           A.educationAreaId
                      FROM acdCondition A
                     WHERE A.curriculumId = ?
                       AND A.type = \'P\'';

            $result = $this->db->query(SAGU::prepare($sql, $curriculumId));

            for ( $i=0; $i<count($result); $i++ )
            {
                list ( $conditionCurriculumId,
                       $academicCredits,
                       $academicNumberHours,
                       $educationAreaId ) = $result[$i];

                /**
                 * Verifica se a disciplina requisito foi cursada
                 **/
                if ( isset($conditionCurriculumId) )
                {
                    $sql = 'SELECT enrollId
                              FROM acdEnroll
                             WHERE contractId = ?
                               AND curriculumId = ?
                               AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ', ' . ENROLL_STATUS_ENROLLED . ')';
//                               AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ', ' . ENROLL_STATUS_ENROLLED . ', ' . ENROLL_STATUS_DEPENDENT . ', ' . ENROLL_STATUS_DEPENDENT_FOR_LACKS . ')';

                    $args = array ( $contractId, $conditionCurriculumId );

                    $result2 = $this->db->query(SAGU::prepare($sql, $args));

                    if ( count($result2) == 0 )
                    {
                        $retVal = false;
                    }
                }

                /**
                 * Se for necessario um numero minimo de horas ou creditos cursados
                 **/
                if ( $academicNumberHours > 0 || $academicCredits > 0 )
                {

                    $ref = ( $academicCredits > 0 ) ? 'academicCredits' : 'academicNumberHours';

                    $sql = 'SELECT SUM(' . $ref . ')
                              FROM acdCurricularComponent
                             WHERE curricularComponentId IN ( 
                                   SELECT curricularComponentId
                                     FROM acdCurriculum
                                    WHERE curriculumId IN (
                                          SELECT CASE WHEN ( LENGTH(curriculumId) > 0 ) 
                                                      THEN curriculumid
                                                      ELSE ( SELECT curriculumId
                                                               FROM acdGroup
                                                              WHERE acdEnroll.groupId = groupId )
                                                       END
                                            FROM acdEnroll
                                           WHERE contractId = ?
                                             AND statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED . ') ) )
                               AND educationAreaId = ?';
                               
                    $args    = array ( $contractId, $educationAreaId );

                    $result2 = $this->db->query(SAGU::prepare($sql, $args));

                    if ( $result2[0][0] < $$ref )
                    {
                        $retVal = false;
                    }

                }

            }
        }

        return $retVal;
    }
    
    /**
     * List all disciplines coursed or in course for a contract 
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @return (array): Array with disciplines coursed
     *
     */
    public function getEnrollHistoric($contractId)
    {
        $db = $this->getDatabase();
        $sql = '    SELECT C.curricularComponentId || \' - \' || C.name,
                           TRIM(TO_CHAR(C.academicCredits, \''.MASK_REAL_2.'\')),
                           C.academicnumberHours,
                           CASE WHEN statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')
                                THEN CASE WHEN (finalNote IS NOT NULL AND finalNote != 0)
                                          THEN TRIM(TO_CHAR(finalNote, \''.MASK_REAL_2.'\')) 
                                          ELSE concept
                                     END
                                ELSE \'M\' END,
                           E.periodId,
                           A.obsExploitation
                      FROM acdEnroll A
                INNER JOIN acdCurriculum B
                        ON (B.curriculumId = A.curriculumId)
                INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = B.curricularComponentId)
                INNER JOIN acdGroup D
                        ON (D.groupId = A.groupId)
                INNER JOIN acdLearningPeriod E
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE contractId = ?
                       AND statusId in (' . ENROLL_STATUS_APPR_OR_EXC . ') 
                  ORDER BY C.name ';
        $args   = array($contractId);
        $result = $db->query(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Get the total hours coursed for a contract 
     *
     * @author: William Prigol Lopes (william@solis.coop.br)
     *
     * @param: $contractId (int) Contract information
     *
     * @return: Total hours coursed about this contract
     *
     */
    public function getCoursedTotalHours($contractId)
    {
        $db = $this->getDatabase();
        $sql = '    SELECT sum(academicnumberhours)
                      FROM acdEnroll A 
                INNER JOIN acdCurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId) 
                INNER JOIN acdGroup D 
                        ON (D.groupId = A.groupId) 
                INNER JOIN acdLearningPeriod E 
                        ON (E.learningPeriodId = D.learningPeriodId) 
                     WHERE contractId = ?
                       AND statusId in ('.ENROLL_STATUS_APPR_OR_EXC.') ';
        $args = array($contractId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }
    

    /**
     * Get the total credits coursed for a contract 
     *
     * @author: William Prigol Lopes (william@solis.coop.br)
     *
     * @param: $contractId (int) Contract information
     *
     * @return: Total hours coursed about this contract
     *
     */
    public function getCoursedTotalCredits($contractId)
    {
        $db = $this->getDatabase();
        $sql = '    SELECT sum(academiccredits)
                      FROM acdEnroll A 
                INNER JOIN acdCurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId) 
                INNER JOIN acdGroup D 
                        ON (D.groupId = A.groupId)
                INNER JOIN acdLearningPeriod E 
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE contractId = ?
                       AND statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.') ';
        $args = array($contractId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }
    
    /**
     * Get the total credits enrolled for a contract 
     *
     * @author: William Prigol Lopes (william@solis.coop.br)
     *
     * @param: $contractId (int) Contract information
     *
     * @return: Total hours coursed about this contract
     *
     */
    public function getEnrolledTotalCredits($contractId)
    {
        $db = $this->getDatabase();
        $sql = '    SELECT SUM(academicCredits)
                      FROM acdEnroll A 
                INNER JOIN acdCurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId) 
                INNER JOIN acdGroup D 
                        ON (D.groupId = A.groupId) 
                INNER JOIN acdLearningPeriod E 
                        ON (E.learningPeriodId = D.learningPeriodId) 
                     WHERE contractId = ?
                       AND statusId IN (' . ENROLL_STATUS_ENROLLED . ')';
        $args = array($contractId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];

    }
    
    /**
     * Get the total credits enrolled for a contract
     *
     * @author: William Prigol Lopes (william@solis.coop.br)
     *
     * @param: $contractId (int) Contract information
     *
     * @return: Total hours coursed about this contract
     *
     */
    public function getEnrolledTotalHours($contractId)
    {
        $db = $this->getDatabase();
        $sql = '    SELECT SUM(academicNumberHours)
                      FROM acdEnroll A
                INNER JOIN acdCurriculum B
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId)
                INNER JOIN acdGroup D
                        ON (D.groupId = A.groupId)
                INNER JOIN acdLearningPeriod E
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE contractId = ?
                       AND statusId IN (' . ENROLL_STATUS_ENROLLED . ')';
        $args = array($contractId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];

    }

    function getEnrollConfirmation($contractId, $learningPeriodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT B.semester,
                       B.curricularComponentId,
                       B.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.curriculumId,
                       D.groupId,
                       D.vacant,
                       D.totalEnrolled
                  FROM acdEnroll A
            INNER JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId
                        AND C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN acdGroup D
                    ON (D.groupId = A.groupId)
            INNER JOIN acdLearningPeriod E
                    ON (E.learningPeriodId = D.learningPeriodId)
                 WHERE A.contractId = ?
                   AND E.periodId = ?
                   AND A.statusId IN(' . ENROLL_STATUS_ENROLLED . ')
                  ORDER BY CASE WHEN B.semester = 0 THEN 9999 ELSE B.semester END,
                           C.name,
                           A.groupId';

        $args = array (
                        $contractId,
                        $learningPeriodData->periodId
                      );

        $result = $this->db->query(SAGU::prepare($sql,$args));

        return $result;
    }

    function getEnrollConfirmationOld($contractId, $periodId)
    {
        $sql = '    SELECT A.curriculumId,
                           A.semester,
                           A.curricularComponentId,
                           A.curricularComponentVersion,
                           A.curricularComponentName,
                           B.curricularComponentId IS NOT NULL AS isApproved,
                           D.groupId IS NOT NULL AS isEnrolled,
                           D.dateCancellation IS NOT NULL AS isCancelled,
                           C.groupId,
                           C.vacant,
                           C.totalEnrolled,
                           C.scheduleId,
                           TO_CHAR(C.beginDate,\'' . MASK_DATE . '\') AS beginDate,
                           TO_CHAR(C.endDate,\'' . MASK_DATE . '\') AS endDate,
                           C.turnId,
                           C.turnDescription,
                           C.beginHour,
                           C.endHour,
                           C.unitId,
                           C.unitDescription,
                           C.weekDayId,
                           C.weekDayDescription,
                           C.physicalResourceId,
                           C.physicalResourceVersion,
                           C.physicalResourceDescription,
                           C.professorId,
                           C.professorName
                      -- obter curriculo do contrato
                      FROM (    SELECT B1.semester,
                                       B1.curricularComponentId,
                                       B1.curricularComponentVersion,
                                       C1.name AS curricularComponentName,
                                       B1.curriculumId
                                  FROM acdContract A1
                            INNER JOIN acdCurriculum B1
                                    ON (B1.courseId = A1.courseId
                                        AND B1.courseVersion = A1.courseVersion
                                        AND B1.endDate IS NULL)
                            INNER JOIN acdCurricularComponent C1
                                    ON (C1.curricularComponentId = B1.curricularComponentId
                                        AND C1.curricularComponentVersion = B1.curricularComponentVersion)
                                 WHERE A1.contractId = ?) A
                 -- verificar aprovacao
                 LEFT JOIN (    SELECT DISTINCT C1.curricularComponentId,
                                       C1.curricularComponentVersion,
                                       A1.curriculumId
                                  FROM acdEnroll A1
                            INNER JOIN acdGroup B1
                                    ON (B1.groupId = A1.groupId)
                            INNER JOIN acdCurriculum C1
                                    ON (C1.curriculumId = B1.curriculumId)
                                 WHERE A1.contractId = ?
                                   AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ')) B
                        ON (B.curriculumId = A.curriculumId)
                 -- listar oferecidas para cada disciplina do curriculo
                 LEFT JOIN (    SELECT A1.groupId,
                                       B1.curricularComponentId,
                                       B1.curricularComponentVersion,
                                       A1.vacant,
                                       A1.totalEnrolled,
                                       C1.scheduleId,
                                       D1.beginDate,
                                       D1.beginHour,
                                       D1.endDate,
                                       D1.endHour,
                                       D1.turnId,
                                       E1.description AS turnDescription,
                                       E1.beginHour AS turnBeginHour,
                                       E1.endHour AS turnEndHour,
                                       C1.unitId,
                                       F1.description AS unitDescription,
                                       C1.weekDayId,
                                       G1.description AS weekDayDescription,
                                       C1.physicalResourceId,
                                       C1.physicalResourceVersion,
                                       H1.description AS physicalResourceDescription,
                                       I1.professorId,
                                       J1.name AS professorName
                                  FROM acdGroup A1
                            INNER JOIN acdCurriculum B1
                                    ON (B1.curriculumId = A1.curriculumId)
                            INNER JOIN acdSchedule C1
                                    ON (C1.groupId = A1.groupId)
                            INNER JOIN acdScheduleLearningPeriod D1
                                    ON (D1.scheduleLearningPeriodId = C1.scheduleLearningPeriodId)
                            INNER JOIN basTurn E1
                                    ON (E1.turnId = D1.turnId)
                            INNER JOIN basUnit F1
                                    ON (F1.unitId = C1.unitId)
                            INNER JOIN basWeekDay G1
                                    ON (G1.weekDayId = C1.weekDayId)
                            INNER JOIN insPhysicalResource H1
                                    ON (H1.physicalResourceId = C1.physicalResourceId
                                        AND H1.physicalResourceVersion = C1.physicalResourceVersion)
                            INNER JOIN acdScheduleProfessor I1
                                    ON (I1.scheduleId = C1.scheduleId)
                            INNER JOIN ONLY basPhysicalPersonProfessor J1
                                    ON (J1.personId = I1.professorId)
                                 WHERE A1.learningPeriodId = ?) C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                 -- identificar matriculadas
                 INNER JOIN (    SELECT A1.groupId, A1.dateCancellation
                                  FROM acdEnroll A1
                                 WHERE A1.contractId = ?) D
                        ON (D.groupId = C.groupId)
                  ORDER BY A.curricularComponentName,
                           C.groupId,
                           C.scheduleId,
                           C.professorName';

        $args = array (
                        $contractId,
                        $contractId,
                        $periodId,
                        $contractId
                      );

        $result = $this->db->query(SAGU::prepare($sql,$args));
        //$this->db->close();

        return $result;
    }

    /**
     * Get enroll information specified by curriculum
     *
     * @param $curriculumId (int): Curriculum information
     * @param $contractId   (int): Contract information
     *
     * @return (array): Listing information
     * 
     */
    function listEnrollByCurriculum($curricularComponentId, $curricularComponentVersion, $contractId)
    {
        $sql = '     SELECT C.curriculumId,
                            A.academicCredits,
                            A.academicnumberHours,
                            CASE WHEN C.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.') 
                                 THEN trim(to_char(C.finalNote, \''.MASK_REAL_2.'\'))
                                 ELSE \'M\' 
                            END,
                            E.periodId,
                            CASE WHEN C.obsExploitation IS NOT NULL THEN true ELSE false END,
                            C.obsExploitation
                       FROM acdCurricularComponent A
                 INNER JOIN acdCurriculum B
                         ON (B.curricularComponentId = A.curricularComponentId)
                 INNER JOIN acdEnroll C
                         ON (C.curriculumId = B.curriculumId)
                 INNER JOIN acdGroup D
                         ON (D.groupId = C.groupId)
                 INNER JOIN acdLearningPeriod E
                         ON (E.learningPeriodId = D.learningPeriodId)
                      WHERE A.curricularComponentId = ?
                        AND A.curricularComponentVersion = ?
                        AND C.contractId = ? 
                        AND C.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.', '.ENROLL_STATUS_ENROLLED.') ';

        $args = array($curricularComponentId, $curricularComponentVersion, $contractId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result;
    }
    
    /**
     * Get the necessary data of a exploited curriculum
     *
     * @param $contractId   (int): Contract id
     * @param $curriculumId (int): Curriculum id
     *
     * @return (array): Array containing the data
     * 
     */
    function getCurriculumExploitationData($contractId, $curriculumId)
    {
        $sql = 'SELECT A.curriculumId,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       D.name as curricularComponentName,
                       A.creditsExploitation,
                       A.numberHourExploitation
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
                 WHERE A.contractId = ?
                   AND A.curriculumId = ?
                   AND A.exploitationType IS NOT NULL';
                   
        $args = array($contractId, $curriculumId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    /**
     * Get the hours and credits number of a curriculum that can be exploited
     *
     * @param $contractId   (int): Contract id
     * @param $curriculumId (int): Curriculum id
     *
     * @return (array): Array containing the data
     * 
     */
    function getNonExploitedHoursCredits($contractId, $curriculumId)
    {
        $sql = 'SELECT CASE WHEN sum(A.numberHourExploitation) >= D.academicNumberHours
                            THEN 0
                            ELSE D.academicNumberHours - sum(A.numberHourExploitation) END,
                       CASE WHEN sum(A.creditsExploitation) >= D.academicCredits
                            THEN 0
                            ELSE D.academicCredits - sum(A.creditsExploitation) END
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId)
                 WHERE A.contractId = ?
                   AND B.curriculumId = ?
                   AND A.exploitationType IS NOT NULL
              GROUP BY D.academicNumberHours, D.academicCredits';
              
        $args = array($contractId, $curriculumId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Check if a curricular component was coursed
     *
     * @param $contractId   (int): acdContract primary key
     * @param $curriculumId (int): acdCurriculum primary key
     *
     * @return (boolean): Return true or false
     * 
     */
    function checkIfCoursed($contractId, $curriculumId, $checkNumberHours = true)
    {
        $sql = 'SELECT count(A.curriculumId) > 0
                  FROM acdEnroll A
            INNER JOIN acdCurriculum B
                    ON ( A.curriculumId = B.curriculumId )
            INNER JOIN acdCurricularComponent C
                    ON ( B.curricularComponentId = C.curricularComponentId 
                         AND B.curricularComponentVersion = C.curricularComponentVersion )
                 WHERE A.contractId   = ?
                   AND B.curriculumId = ?
                   AND ((A.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.', '.ENROLL_STATUS_ENROLLED.')
                    ';

        $args   = array($contractId, $curriculumId);

        //verificação de horas em aproveitamentos
        if ( $checkNumberHours == true )
        {
            $sql .= ' AND C.academicNumberHours = (SELECT CASE WHEN 
                                                              sum(XY.exploitationNumberHours) > 0
                                                          THEN
                                                              sum(XY.exploitationNumberHours)
                                                          ELSE
                                                              C.academicNumberHours
                                                          END
                                                     FROM acdExploitation XY
                                                    WHERE XY.enrollId = A.enrollId)';
        }
        
        $sql .= ')';
        
        //Verificação de concorrências
        $sql .= ' OR A.curriculumId IN (SELECT CC.curriculumId 
                                         FROM acdCurriculum CC 
                                        WHERE CC.courseId = B.courseId
                                          AND (CC.curriculumId IN 
                                                          (SELECT CR.curriculumInId 
                                                             FROM acdCurriculumConcurrence CR 
                                                            WHERE CR.curriculumOutId IN (
                                                                     SELECT CE.curriculumId 
                                                                       FROM acdEnroll CE 
                                                                      WHERE CE.contractId =  \''.$contractId.'\'
                                                                        AND CE.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.'))
                                                           ) OR 
                                               CC.curriculumId IN (
                                                           SELECT CS.curriculumOutId 
                                                             FROM acdCurriculumConcurrence CS 
                                                            WHERE CS.curriculumInId IN (
                                                                     SELECT CF.curriculumId 
                                                                       FROM acdEnroll CF
                                                                      WHERE CF.contractId = \''.$contractId.'\' 
                                                                        AND CF.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.')))
               )) ';
               
        $sql .= ')';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] == DB_TRUE )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public function checkIfSubstituted($contractId, $learningPeriodId, $curriculumId)
    {
        $sql = 'SELECT curricularComponentId,
                       curricularComponentVersion
                  FROM acdCurricularComponentUnblock
                 WHERE contractId = ?
                   AND learningPeriodId = ?
                   AND curriculumId = ?
                   AND isSubstituted = ? ';

        $args = array($contractId, $learningPeriodId, $curriculumId, 't');
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        list ( $data->curricularComponentId,
               $data->curricularComponentVersion ) = $result[0];

        return $data;
    }

    public function listEnrollStatus()
    {
        $sql = 'SELECT statusId,
                       description
                  FROM acdEnrollStatus ';

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function listGroupEnrolledPeople($groupId)
    {
        $sql = 'SELECT A.enrollId,
                       B.courseId || \'/\' ||
                       B.courseVersion,
                       B.personId,
                       C.name,
                       C.email,
                       C.residentialPhone,
                       C.workPhone,
                       C.cellPhone
                  FROM acdEnroll A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
             LEFT JOIN ONLY basPhysicalPersonStudent C
                    ON (C.personId = B.personId)
                 WHERE A.groupId = ?
              ORDER BY C.name';
                 
        $result = $this->db->query(SAGU::prepare($sql, $groupId));
        
        return $result;
    }
    
    /**
     * Simulate the income forecasts generation process using an array representing
     * the acdEnrollSummary table. 
     *
     * @return Return and array representing the income forecasts.
     *
     **/
    public function simulateIncomeForecast($fakeEnrollSummary, $contractId, $learningPeriodId, $parcelsNumber, $finLearningPeriodId=null, $classId=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ( count($fakeEnrollSummary) > 0 )
        {
            $busContract       = $MIOLO->getBusiness($module, 'BusContract');
            $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');

            if ( strlen((string)$contractId)>0 )
            {
                $contractData = $busContract->getContract($contractId);
            }

            $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
            $totalParcelsNumber = $parcelsNumber;
            
            //Verificando número de parcelas
            if ( strlen((string)$totalParcelsNumber) == 0 )
            {
                $totalParcelsNumber = strlen((string)$contractData->parcelsNumber) ? $contractData->parcelsNumber : $learningPeriodData->parcelsNumber;
            }

            //Montando a data inicial das previsões
            $sql = 'SELECT TO_CHAR(TO_DATE(?, \'' . MASK_DATE . '\'), \'MM\'),
                           TO_CHAR(TO_DATE(?, \'' . MASK_DATE . '\'), \'YYYY\')';
            
            $args = array(  $learningPeriodData->beginDate,
                            $learningPeriodData->beginDate  );
            
            $parcelsBeginDate = $this->db->query(SAGU::prepare($sql, $args));

            if ( $parcelsBeginDate[0][0] == 12 )
            {
                $parcelsBeginDate[0][0] = 1;
                $parcelsBeginDate[0][1]++;
            }
            else
            {
                $parcelsBeginDate[0][0] += 1;
            }

            $contractData->maturityDay = $contractData->maturityDay ? $contractData->maturityDay : DEFAULT_MATURITYDAY;
            $parcelsBeginDate       = $parcelsBeginDate[0][1] . '-' . $parcelsBeginDate[0][0] . '-' . $contractData->maturityDay;

            $sql = 'SELECT TO_CHAR(TO_DATE(?, \'yyyy/mm/dd\'), \'' . MASK_DATE . '\')';
            
            $parcelsBeginDate = $this->db->query(SAGU::prepare($sql, $parcelsBeginDate));
            $parcelsBeginDate = $parcelsBeginDate[0][0];
            //Fim
            
            $busIncomeForecast  = $MIOLO->getBusiness('finance', 'BusIncomeForecast');
            
            if ( strlen((string)$finLearningPeriodId) == 0 )
            {
                $finLearningPeriodId = $learningPeriodId;
            }
            
            $defaultOperationId = $busIncomeForecast->getDefaultOperationIdForEnroll($finLearningPeriodId);

            foreach ( $fakeEnrollSummary as $enrollSummary )
            {
                if ( strlen((string)$contractId)>0 )
                {
                    $sql = "SELECT B.contractId,
                                   $enrollSummary->operationId, ";

                    if ( $enrollSummary->isValue == DB_TRUE )
                    {
                        $sql .= " $enrollSummary->multiplier AS value, ";
                    }
                    else
                    {
                        $sql .= "$enrollSummary->multiplier * C.value AS value, ";
                    }
                    $sql .=
                                 " TRIM(TO_CHAR(COALESCE(B.maturityDay,10),'00')) AS maturityDateDay,
                                   TRIM(TO_CHAR(D.beginDate,'MM')) AS maturityDateMonth,
                                   TRIM(TO_CHAR(D.beginDate,'YYYY')) AS maturityDateYear,
                                   $enrollSummary->parcelsNumber,
                                   D.learningPeriodId
                              FROM acdContract B,
                                   finPrice C,
                                   acdLearningPeriod D
                             WHERE B.contractId = ?
                               AND D.learningPeriodId = ?
                               AND C.learningPeriodId = ?
                          ORDER BY 1, 2";
            
                    $args = array($contractId, $learningPeriodId, $finLearningPeriodId);
                }
                elseif ( strlen((string)$classId)>0 )
                {
                    $sql = "SELECT B.contractId,
                                   $enrollSummary->operationId, ";

                    if ( $enrollSummary->isValue == DB_TRUE )
                    {
                        $sql .= " $enrollSummary->multiplier AS value, ";
                    }
                    else
                    {
                        $sql .= "$enrollSummary->multiplier * C.value AS value, ";
                    }
                    $sql .=
                                 " TRIM(TO_CHAR(COALESCE(B.maturityDay,10),'00')) AS maturityDateDay,
                                   TRIM(TO_CHAR(D.beginDate,'MM')) AS maturityDateMonth,
                                   TRIM(TO_CHAR(D.beginDate,'YYYY')) AS maturityDateYear,
                                   $enrollSummary->parcelsNumber,
                                   D.learningPeriodId
                              FROM acdContract B,
                                   finPrice C,
                                   acdLearningPeriod D
                             WHERE B.contractId IN ( SELECT contractId FROM acdClassPupil WHERE classId = ? LIMIT 1)
                               AND D.learningPeriodId = ?
                               AND C.learningPeriodId = ?
                          ORDER BY 1, 2";
            
                    $args = array($classId, $learningPeriodId, $finLearningPeriodId);
                }
                $result                 = $this->db->query(SAGU::prepare($sql, $args));
                $temporaryFakeIncomes[] = array($result[0][1], $result[0][6], $result[0][2]);
            }
            
            /* lista as parcelas na tela */
            $sql = 'SELECT * FROM getParcelsDates (?, ?, \'' . MASK_DATE . '\')';
            
            $args = array(  $parcelsBeginDate,
                            $totalParcelsNumber);

            $fakeIncomesDates = $this->db->query(SAGU::prepare($sql, $args));

            if ( count($temporaryFakeIncomes) > 0 )
            {
                foreach ( $temporaryFakeIncomes as $tmpFakeIncome )
                {
                    list (  $operationId,
                            $tmpParcelsNumber,
                            $value  ) = $tmpFakeIncome;

                    if ( strlen((string)$contractId)>0 )
                    {
                        $sql = "SELECT A.contractId,
                                       $operationId,
                                       (SELECT description FROM finOperation WHERE operationId = $operationId),
                                       (SELECT operationTypeId FROM finOperation WHERE operationId = $operationId),
                                       A.maturityDay,
                                       $value,
                                       $tmpParcelsNumber
                                  FROM acdContract A
                                 WHERE A.contractId = $contractId";
                             
                        $fakeIncome = $this->db->query($sql);
                    }
                    elseif ( strlen((string)$classId)>0 )
                    {
                        $sql = "SELECT A.contractId,
                                       $operationId,
                                       (SELECT description FROM finOperation WHERE operationId = $operationId),
                                       (SELECT operationTypeId FROM finOperation WHERE operationId = $operationId),
                                       A.maturityDay,
                                       $value,
                                       $tmpParcelsNumber
                                  FROM acdContract A
                                 WHERE A.contractId IN ( SELECT contractId FROM acdClassPupil WHERE classId = '$classId' LIMIT 1)";
                             
                        $fakeIncome = $this->db->query($sql);
                    }
                    
                    list (  $fakeContractId,
                            $fakeOperationId,
                            $fakeOperationDesc,
                            $fakeOperationTypeId,
                            $fakeMaturityDate,
                            $fakeValue,
                            $fakeParcelsNumber ) = $fakeIncome[0];
                            
                    $parcelsValue = $fakeValue / $fakeParcelsNumber;
                    
                    $parcelsCounter = $fakeParcelsNumber;
                    
                    if ( count($fakeIncomesDates) > 0 )
                    {
                        foreach ( $fakeIncomesDates as $fakeDate )
                        {
                            if ( $parcelsCounter > 0 )
                            {
                                $fakeMaturityDate      = $fakeDate[0];
                                $fakeValue             = $parcelsValue;

                                $fakeIncomeForecasts[] = array($fakeContractId, $fakeOperationId, $fakeOperationDesc, $fakeOperationTypeId, $fakeMaturityDate, $fakeValue, $fakeParcelsNumber);
                                $parcelsCounter--;
                            }
                        }
                    }
                }
            }
        }
        
        return $fakeIncomeForecasts;
    }
    
    public function isEnrolledInLearningPeriod($contractId, $learningPeriodId)
    {

        $sql = 'SELECT COUNT(*)
                  FROM acdEnroll A,
                       acdGroup B
                 WHERE A.groupId          = B.groupId
                   AND A.contractId       = ?
                   AND B.learningPeriodId = ?
                   AND A.statusId <> ' . ENROLL_STATUS_CANCELLED;

        unset($args);
        $args[] = $contractId;
        $args[] = $learningPeriodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    public function isEnrolledInPeriod($contractId, $periodId)
    {

        $sql = 'SELECT COUNT(*)
                  FROM acdEnroll A,
                       acdGroup B,
                       acdLearningPeriod C
                 WHERE A.groupId          = B.groupId
                   AND B.learningPeriodId = C.learningPeriodId
                   AND A.contractId       = ?
                   AND C.periodId         = ?
                   AND A.statusId <> ' . ENROLL_STATUS_CANCELLED;

        unset($args);
        $args[] = $contractId;
        $args[] = $periodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    public function getCurricularComponentsEnrolled($contractId, $periodId)
    {

        $sql = 'SELECT C.courseId,
                       C.courseVersion,
                       D.shortName as courseName,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       E.shortName as curricularComponentName,
                       TRIM(TO_CHAR(E.academicCredits, \'' . MASK_REAL_2 . '\')),
                       E.academicNumberHours,
                       G.shortDescription,
                       I.charId,
                       A.enrollId,
                       F.scheduleId
                  FROM acdEnroll A,
                       acdLearningPeriod B1,
                       acdGroup B
             LEFT JOIN acdSchedule F
                    ON ( B.groupId = F.groupId )
             LEFT JOIN basWeekDay G
                    ON ( F.weekDayId = G.weekDayId )
             LEFT JOIN acdScheduleLearningperiod H
                    ON ( F.scheduleLearningPeriodId = H.scheduleLearningPeriodId )
             LEFT JOIN basTurn I
                    ON ( I.turnId = H.turnId ),
                       acdCurriculum C,
                       acdCourse D,
                       acdCurricularComponent E
                 WHERE A.groupId = B.groupId
                   AND A.curriculumId = C.curriculumId
                   AND D.courseId = C.courseId
                   AND E.curricularComponentId = C.curricularComponentId
                   AND B.learningPeriodId = B1.learningPeriodId
                   AND A.statusId <> ?
                   AND A.contractId = ?
                   AND B1.periodId = ?
              ORDER BY G.weekDayId,
                       E.shortName';

        $args[] = ENROLL_STATUS_CANCELLED;
        $args[] = $contractId;
        $args[] = $periodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getContractHistory($contractId)
    {

        $module = is_null($module) ? 'academic' : $module;

        $sql = 'SELECT C.courseId,
                       C.courseVersion,
                       D.shortName as courseName,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       E.shortName as curricularComponentName,
                       TRIM(TO_CHAR(E.academicCredits, \'' . MASK_REAL_2 . '\')),
                       E.academicNumberHours,
                       A.statusId,
                       A.statusId,
                       TRIM(TO_CHAR(A.finalNote, \'' . MASK_REAL_2 . '\')),
                       B.curriculumId,
                       A.curriculumId,
                       \'\',
                       \'\',
                       \'\',
                       B1.periodId
                  FROM acdEnroll A,
                       acdLearningPeriod B1,
                       acdGroup B
             LEFT JOIN acdSchedule F
                    ON ( B.groupId = F.groupId )
             LEFT JOIN acdScheduleLearningperiod H
                    ON ( F.scheduleLearningPeriodId = H.scheduleLearningPeriodId ),
                       acdCurriculum C,
                       acdCourse D,
                       acdCurricularComponent E
                 WHERE A.groupId = B.groupId
                   AND A.curriculumId = C.curriculumId
                   AND D.courseId = C.courseId
                   AND E.curricularComponentId = C.curricularComponentId
                   AND B.learningPeriodId = B1.learningPeriodId
                   AND A.statusId IN(' . ENROLL_STATUS_APPR_OR_EXC . ')
                   AND A.contractId = ?
              ORDER BY B1.beginDate';

        $args[] = $contractId;
        $result = $this->db->query(SAGU::prepare($sql, $args));

        for ( $x=0; $x<count($result); $x++ )
        {

            $sql = 'SELECT A.curricularComponentId,
                           B.shortName
                      FROM acdCurriculum A,
                           acdCurricularComponent B
                     WHERE A.curricularComponentId      = B.curricularComponentId
                       AND A.curricularComponentVersion = B.curricularComponentVersion
                       AND A.curriculumId               = ?';

            $result2[$x] = $result[$x];
            if ( $result[$x][11] != $result[$x][12] )
            {
                $res = $this->db->query(SAGU::prepare($sql, $result[$x][11]));

                $result2[$x][13] = $res[0][0];
                $result2[$x][14] = $res[0][1];
                $result2[$x][15] = '[ ' . $res[0][0] . ' - ' . $res[0][1] . ' ]';
            }
            else
            {
                $result2[$x][13] = $result[0][3];
                $result2[$x][14] = $result[0][5];
                $result2[$x][15] = '';
            }

            if ( $result2[$x][8] == ENROLL_STATUS_EXCUSED )
            {
                $result2[$x][10] = _M('Exc.', $module);
            }
        }

        return $result2;
    }

    public function getContractHistoryFilter($contractId, $filter = null)
    {

        $module = is_null($module) ? 'academic' : $module;

        $sql = 'SELECT A.curriculumId,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       case when A.curriculumId != B.curriculumId then 
                                 E.shortName || \' [\' || P.shortName || \']\' 
                                 else E.shortName END as curricularComponentName,
                       TRIM(TO_CHAR(E.academicCredits, \'' . MASK_REAL_2 . '\')),
                       E.academicNumberHours,
                       A.statusId,
                       B1.periodId,
                       CASE WHEN A.statusId = '.ENROLL_STATUS_EXCUSED.'
                            THEN \'' . _M('Exc.', $module) . '\'
                            ELSE TO_CHAR(A.finalNote, \'999.00\')
                       END,
                       B.curriculumId
                  FROM acdEnroll A,
                       acdLearningPeriod B1,
                       acdGroup B
             LEFT JOIN acdSchedule F
                    ON ( B.groupId = F.groupId )
             LEFT JOIN acdScheduleLearningperiod H
                    ON ( F.scheduleLearningPeriodId = H.scheduleLearningPeriodId ),
                       acdCurriculum C,
                       acdCourse D,
                       acdCurricularComponent E,
                       acdCurricularComponent P,
                       acdCurriculum O
                 WHERE A.groupId = B.groupId
                   AND O.curriculumId = B.curriculumId
                   AND P.curricularComponentId = O.curricularComponentId
                   AND A.curriculumId = C.curriculumId
                   AND D.courseId = C.courseId
                   AND E.curricularComponentId = C.curricularComponentId
                   AND B.learningPeriodId = B1.learningPeriodId
                   AND A.statusId IN(' . ENROLL_STATUS_APPR_OR_EXC . ')
                   AND A.contractId = ?
                   AND O.curriculumTypeId <> ' . ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY;

        $args[] = $contractId;
        
        if ( is_array($filter->curriculumId) )
        {
           $curriculumns = implode(',', $filter->curriculumId);
           $sql .= '  AND A.curriculumId IN ('.$curriculumns.')'; 
        }
        
        elseif ( strlen((string)$filter->curriculumId) > 0 ) 
        {
           $sql .= ' AND A.curriculumId = ?';
           $args[] = $filter->curriculumId;
        }

        $sql .= ' ORDER BY B1.beginDate';

        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result;
    }

    public function getPeriodCurricularComponentsByStatus($contractId, $periodId, $statusId)
    {

        $sql = 'SELECT C.courseId,
                       C.courseVersion,
                       D.shortName as courseName,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       E.shortName as curricularComponentName,
                       TRIM(TO_CHAR(E.academicCredits, \'' . MASK_REAL_2 . '\')),
                       E.academicNumberHours,
                       G.shortDescription,
                       I.charId,
                       TRIM(TO_CHAR(A.finalNote, \'' . MASK_REAL_2 . '\'))
                  FROM acdEnroll A,
                       acdLearningPeriod B1,
                       acdGroup B
             LEFT JOIN acdSchedule F
                    ON ( B.groupId = F.groupId )
             LEFT JOIN basWeekDay G
                    ON ( F.weekDayId = G.weekDayId )
             LEFT JOIN acdScheduleLearningperiod H
                    ON ( F.scheduleLearningPeriodId = H.scheduleLearningPeriodId )
             LEFT JOIN basTurn I
                    ON ( I.turnId = H.turnId ),
                       acdCurriculum C,
                       acdCourse D,
                       acdCurricularComponent E
                 WHERE A.groupId = B.groupId
                   AND A.curriculumId = C.curriculumId
                   AND D.courseId = C.courseId
                   AND E.curricularComponentId = C.curricularComponentId
                   AND B.learningPeriodId = B1.learningPeriodId
                   AND A.statusId IN (' . $statusId . ')
                   AND A.contractId = ?
                   AND B1.periodId  = ?
              ORDER BY G.weekDayId,
                       E.shortName';

        $args[] = $contractId;
        $args[] = $periodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function checkLearningPeriodPrice($learningPeriodId)
    {   
        $sql = 'SELECT value FROM finPrice WHERE learningPeriodId = ?';
        
        $result = $this->db->query(SAGU::prepare($sql, $learningPeriodId));
        
        if (count($result) > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public function getInCourseCurricularComponentData($curricularComponentId, $curricularComponentVersion, $contractId, $learningPeriodId)
    {
        global $MIOLO;
        $module = 'academic';
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       D.periodId
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdLearningPeriod D
                    ON (D.learningPeriodId = B.learningPeriodId)
                 WHERE A.contractId = ?
                   AND C.curricularComponentId = ?
                   AND C.curricularComponentVersion = ?
                   AND D.periodId <> ?
                   AND A.statusId = ' . ENROLL_STATUS_ENROLLED;
                    
        $args = array( $contractId,
                       $curricularComponentId,
                       $curricularComponentVersion,
                       $learningPeriodData->periodId); 
                       
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        if ( count($result) > 0 )
        {
            $schedulesList = $professorsList = array();
            foreach ( $result as $res )
            {
                list( $enrollId,
                      $groupId,
                      $periodId ) = $res;
                      
                $sql = 'SELECT A.scheduleId,
                               C.shortDescription,
                               D.shortDescription
                          FROM acdSchedule A
                    INNER JOIN acdScheduleLearningPeriod B
                            ON (B.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
                    INNER JOIN basWeekday C
                            ON (C.weekdayId = A.weekdayId)
                    INNER JOIN basTurn D
                            ON (D.turnId = B.turnId)
                         WHERE A.groupId = ?';
                         
                $result2 = $this->db->query(SAGU::prepare($sql, $groupId));
                
                if ( count($result2) > 0 )
                {
                    foreach ($result2 as $res2)
                    {
                        list ( $scheduleId,
                               $weekday,
                               $turn ) = $res2;
                               
                        $schedule = $weekday . '-' . $turn;
                        
                        if ( !in_array($schedule, $schedulesList) )
                        {
                            $schedulesList[] = $schedule;
                            
                            $sql = 'SELECT B.name
                                      FROM acdScheduleProfessor A
                                INNER JOIN ONLY basPhysicalPersonProfessor B
                                        ON (B.personId = A.professorId)
                                     WHERE A.scheduleId = ?';
                                     
                            $result3 = $this->db->query(SAGU::prepare($sql, $scheduleId));
                            
                            if ( count($result3) > 0 )
                            {
                                foreach ($result3 as $res3)
                                {
                                    if ( strlen((string)$scheduleProfs) > 0 )
                                    {
                                        $scheduleProfs .= '/' . $res3[0];
                                    }
                                    else
                                    {
                                        $scheduleProfs = $res3[0];
                                    }
                                }
                                
                                $professorsList[] = $scheduleProfs;
                                unset($scheduleProfs);
                            }
                        }
                    }
                }
                
                $schedules  = implode('/', $schedulesList);
                $professors = implode(',', $professorsList);
                
                $return[] = array($groupId, $periodId, $schedules, $professors);
            }
        }
        
        return $return;
    }
    
    /**
     * Checks if a curricular component has groups in learning period
     *
     * @param $curricularComponentId      (int): curricular component id
     * @param $curricularComponentVersion (int): curricular component version
     * @param $larningPeriodId            (int): learning period id
     *
     * @return (boolean): Return true or false
     * 
     */
    function hasGroups($curricularComponentId, $curricularComponentVersion, $learningPeriodId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';
        
        $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT count(A1.groupId)
                  FROM acdGroup A1
            INNER JOIN acdCurriculum B1
                    ON (B1.curriculumId = A1.curriculumId)
            INNER JOIN acdLearningPeriod C1
                    ON (C1.learningPeriodId = A1.learningPeriodId)
                       -- este EXISTS faz com que somente disciplinas com horario sejam exibidas
                 WHERE EXISTS (SELECT \'X\'
                                 FROM acdSchedule X
                                WHERE X.groupId = A1.groupId)
                   AND B1.curricularComponentId = ?
                   AND B1.curricularComponentVersion = ?
                   AND C1.periodId = ?
                   AND A1.isCancellation = \'' . DB_FALSE . '\'';

        $args = array (
                        $curricularComponentId,
                        $curricularComponentVersion,
                        $learningPeriodData->periodId
                      );

        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ($result[0][0] > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    /**
     * Checks if a contract is enrolled in any group of a curricular component in learning period
     *
     * @param $contractId                 (int): contract id
     * @param $curricularComponentId      (int): curricular component id
     * @param $curricularComponentVersion (int): curricular component version
     *
     * @return (boolean): Return true or false
     * 
     */
    public function isEnrolledCurricularComponent($contractId, $curricularComponentId, $curricularComponentVersion)
    {
        $sql = 'SELECT count(A.groupId)
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
                 WHERE A.contractId = ?
                   AND C.curricularComponentId = ?
                   AND C.curricularComponentVersion = ?
                   AND A.statusId IN (' . ENROLL_STATUS_ENROLLED . ')';
        
        
        $args = array( $contractId, 
                       $curricularComponentId,
                       $curricularComponentVersion );
                       
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return ($result[0][0] > 0);
    }
    
    /**
     * Checks if a person has any contract that is not locked or closed
     *
     * @param $personId (int): person id
     *
     * @return (boolean): Return true or false
     * 
     */
    public function checkOpenedContractsExistence($personId)
    {
        $sql = 'SELECT A.contractId
                  FROM acdContract A
            INNER JOIN acdStateContract B
                    ON (B.stateContractId = getContractState(A.contractId))
                 WHERE B.isCloseContract = false
                   AND A.personId';
                   
        $args = array($personId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        return (count($result) > 0);
    }
    
    /**
     * Checks if a person is freshman
     *
     * @param $contractId (int): contract id
     *
     * @return (boolean): Return true or false
     * 
     */
    public function isFreshman($contractId)
    {
        $sql = 'SELECT getcontractstate(?) = ' . WRITING_STATE_CONTRACT;
                   
        $result = $this->db->query(SAGU::prepare($sql, $contractId));
        
        if ($result[0][0] == DB_TRUE)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function isVeteran($contractId)
    {
        $sql = 'SELECT getcontractstate(?) = ' . STATE_CONTRACT_ID_ENROLLED;
        
        $result = $this->db->query(SAGU::prepare($sql, $contractId));
        
        if ($result[0][0] == DB_TRUE)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function getEnrollContractMessages($learningPeriodId, $filters)
    {
        $sql = 'SELECT messagecontractrenewalid,
                       message,
                       font
                  FROM acdMessageContractRenewal
                 WHERE learningPeriodId = ? ';
                 
        $args[] = $learningPeriodId;
        
        if ( strlen((string)$filters->status) > 0 )
        {
            $sql   .= ' AND status = ? ';
            $args[] = $filters->status;
        }
        
        if ( strlen((string)$filters->isListener) > 0 )
        {
            $sql   .= ' AND isListener = ? ';
            $args[] = $filters->isListener;
        }

        $sql .= ' ORDER BY sequence ';

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getPeriodRestantParcels($contractId, $learningPeriodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        
        $busLearningPeriod  = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $sql = 'SELECT count(months)
                  FROM (SELECT DISTINCT EXTRACT(MONTH FROM maturitydate) as months 
                          FROM finincomeforecast 
                         WHERE contractid = ? 
                           AND isprocessed = \'' . DB_FALSE . '\'
                           AND maturityDate BETWEEN TO_DATE(?,\'' . MASK_DATE . '\') AND
                                                    TO_DATE(?,\'' . MASK_DATE . '\')) AS sel';
                        
        $args = array($contractId,
                      $learningPeriodData->beginDate,
                      $learningPeriodData->endDate);
                        
        $restantParcels = $this->db->query(SAGU::prepare($sql, $args));
        
        return $restantParcels[0][0];
    }

    public function updateCurriculumFromEnroll($data)
    {
        $sql = 'UPDATE acdEnroll
                   SET curriculumId = ?
                 WHERE enrollId     = ?';

        $args = array ( $data->curriculumId,
                        $data->enrollId );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    public function searchEnroll($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'SELECT A.enrollId,
                       C.contractId,
                       C.personId
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdContract C
                    ON (C.contractId = A.contractId)
            INNER JOIN acdLearningPeriod D
                    ON (B.learningPeriodId = D.learningPeriodId)';

        if ( strlen((string)$filters->groupId) > 0 )
        {
            $where .= ' AND B.groupId = ?';
            $args[] = $filters->groupId;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND D.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND D.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->statusId) > 0 )
        {
            $where .= ' AND A.statusId IN (' . $filters->statusId . ')';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.enrollId';

            $db = $this->db;
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function getPersonSemester($contractId, $learningPeriodId)
    {
        $sql = 'SELECT A.semester
                  FROM acdcurriculum A
            INNER JOIN acdgroup B
                    ON (A.curriculumid = B.curriculumid)
            INNER JOIN acdenroll C
                    ON (B.groupid = C.groupid)
                  WHERE C.contractid = ? 
                    AND B.learningperiodId = ?';

        $args = array ( $contractId,
                        $learningPeriodId );

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        
        $semester = $result[0][0] + 1;

        return $semester;
    }

    public function insertEnrollFee($invoice)
    {
        $sql       = 'SELECT nextval(\'seq_invoiceid\')';
        $invoiceId = $this->db->query($sql);
        $invoice->data->invoiceId = $invoiceId[0][0];

        $sqlInvoice = 'INSERT INTO finInvoice (invoiceId,
                                               personId,
                                               accountSchemeId,
                                               costCenterId,
                                               courseId,
                                               courseVersion,
                                               unitId,
                                               parcelNumber,
                                               emissionDate,
                                               maturityDate,
                                               value,
                                               policyId,
                                               automaticDebit,
                                               incomeSourceId,
                                               bankAccountId,
                                               bankContractId,
                                               periodId)
                                        VALUES (?,?,?,?,?,?,?,?,
                                                TO_DATE(?,\'' . MASK_DATE . '\'),
                                                TO_DATE(?,\'' . MASK_DATE . '\'),
                                                ?,?,?,?,?,?,?)';

        $args = array ($invoice->data->invoiceId,
                       $invoice->data->personId,
                       $invoice->data->accountSchemeId,
                       $invoice->data->costCenterId,
                       $invoice->data->courseId,
                       $invoice->data->courseVersion,
                       $invoice->data->unitId,
                       $invoice->data->parcelNumber,
                       $invoice->data->emissionDate,
                       $invoice->data->maturityDate,
                       $invoice->data->value,
                       $invoice->data->policyId,
                       $invoice->data->automaticDebit,
                       $invoice->data->incomeSourceId,
                       $invoice->data->bankAccountId,
                       $invoice->data->bankContractId,
                       $invoice->data->periodId);

        $this->db->execute(SAGU::prepare($sqlInvoice, $args));

        $sqlRInvoice = 'INSERT INTO finReceivableInvoice (invoiceId,
                                                          personId,
                                                          accountSchemeId,
                                                          costCenterId,
                                                          courseId,
                                                          courseVersion,
                                                          unitId,
                                                          parcelNumber,
                                                          emissionDate,
                                                          maturityDate,
                                                          value,
                                                          policyId,
                                                          automaticDebit,
                                                          incomeSourceId,
                                                          bankAccountId,
                                                          bankContractId,
                                                          periodId,
                                                          contractId)
                                                   VALUES (?,?,?,?,?,?,?,?,
                                                           TO_DATE(?,\'' . MASK_DATE . '\'),
                                                           TO_DATE(?,\'' . MASK_DATE . '\'),
                                                           ?,?,?,?,?,?,?,?)';
        $args[] = $invoice->data->contractId;

        $this->db->execute(SAGU::prepare($sqlRInvoice, $args));

        $sqlEntry = 'INSERT INTO finEntry (invoiceId,
                                           operationId,
                                           entryDate,
                                           value,
                                           costCenterId,
                                           isAccounted,
                                           creationType)
                                      VALUES (?,?,TO_DATE(?,\'' . MASK_DATE . '\'),
                                              ?,?,?,?)';

        $args = array ($invoice->data->invoiceId,
                       $invoice->entry->operationId,
                       $invoice->entry->entryDate,
                       $invoice->entry->value,
                       $invoice->entry->costCenterId,
                       $invoice->entry->isAccounted,
                       $invoice->entry->creationType);

        $this->db->execute(SAGU::prepare($sqlEntry, $args));


        /* verifica incentivos */
        if ( GENERATE_INCENTIVES_ON_ENROLL_TAX_INVOICE == 'YES' )
        {

            $sql = 'SELECT A.valueIsPercent,
                           A.value,
                           A.supporterId,
                           A.agglutinate,
                           C.operationId,
                           C.needAdjustAuthorization,
                           C.sendInvoices,
                           C.generateCredits,
                           CASE WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finFinancialAid) 
                                THEN 1
                                ELSE 2 END as financialAid,
                           A.costCenterId,
                           CASE WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finSupport) 
                                THEN ( SELECT collectionoperationid FROM finSupport where incentivetypeId = C.incentivetypeId )
                                WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finLoan) 
                                THEN ( SELECT collectionoperationid FROM finLoan where incentivetypeId = C.incentivetypeId )
                                ELSE NULL END AS collectionOperationId,
                           CASE WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finSupport) 
                                THEN ( SELECT accountSchemeId FROM finSupport where incentivetypeId = C.incentivetypeId )
                                WHEN A.incentiveTypeId IN (SELECT incentiveTypeId FROM finLoan) 
                                THEN ( SELECT accountSchemeId FROM finLoan where incentivetypeId = C.incentivetypeId )
                                ELSE NULL END AS accountSchemeId
                      FROM finIncentive A
                INNER JOIN ONLY finIncentiveType C
                        ON ( A.incentiveTypeId = C.incentiveTypeId )
                INNER JOIN finOperation B
                        ON ( B.operationId     = C.operationId )
                     WHERE ((A.endDate = null AND 
                             A.cancellationDate = null) OR A.endDate > date(now()))
                       AND now() BETWEEN A.startDate AND A.endDate
                       AND C.generateCredits   = TRUE
                       AND A.contractId        = ?';

                $incentives = $this->db->query(SAGU::prepare($sql, $invoice->data->contractId));

                //Processa os incentivos
                if ( count($incentives)>0 )
                {
                
                    $y = 1;
                    foreach ( $incentives as $inc )
                    {
                        if ( $inc[0] == DB_TRUE )
                        {
                            $incentivesValue = strlen((string)$invoice->entry->value)>0 ? $invoice->entry->value : 0;
                            $multiplier      = $incentivesValue * ($inc[1]/100);
                        }
                        else
                        {
                            $multiplier = $inc[1];
                        }

                        //lança o incentivo para o aluno
                        $args = array ($invoice->data->invoiceId,
                                       $inc[4],
                                       $invoice->entry->entryDate,
                                       strlen((string)number_format($multiplier, 8, '.', ''))>0 ? number_format($multiplier, 8, '.', '') : number_format('0', 8, '.', ''),
                                       strlen((string)$inc[9]) > 0 ? $inc[9] : $invoice->data->costCenterId,
                                       DB_FALSE,
                                       MANUAL_ENTRY_CREATION_TYPE);

                        $this->db->execute(SAGU::prepare($sqlEntry, $args));


                        /*
                         *  1 = Auxilio financeiro (bolsas internas)
                         *  2 = Patrocionio e financiamento (precisa de pessoa que pague)
                         */

                        //se tiver financiador ou patrocinador, lança o título e incentivo pra ele
                        if ( $inc[8] == 2 )
                        {

                            $sql       = 'SELECT nextval(\'seq_invoiceid\')';
                            $sInvoiceId = $this->db->query($sql);
                            $sInvoiceId = $sInvoiceId[0][0];

                            $args = array ($sInvoiceId,
                                           $inc[2],
                                           strlen((string)$inc[11])>0 ? $inc[11] : $invoice[$x]->data->accountSchemeId,
                                           $invoice->data->costCenterId,
                                           $invoice->data->courseId,
                                           $invoice->data->courseVersion,
                                           $invoice->data->unitId,
                                           $invoice->data->parcelNumber,
                                           $invoice->data->emissionDate,
                                           $invoice->data->maturityDate,
                                           $invoice->data->value,
                                           $invoice->data->policyId,
                                           $invoice->data->automaticDebit,
                                           $invoice->data->incomeSourceId,
                                           $invoice->data->bankAccountId,
                                           $invoice->data->bankContractId,
                                           $invoice->data->periodId );

                            //insere o titulo
                            $this->db->execute(SAGU::prepare($sqlInvoice, $args));

                            //insere o titulo a receber
                            $args[] = $invoice->data->contractId;
                            $this->db->execute(SAGU::prepare($sqlRInvoice, $args));

                            //lança o incentivo
                            $args = array ($sInvoiceId,
                                           $inc[10],
                                           $invoice->entry->entryDate,
                                           strlen((string)number_format($multiplier, 8, '.', ''))>0 ? number_format($multiplier, 8, '.', '') : number_format('0', 8, '.', ''),
                                           strlen((string)$inc[9]) > 0 ? $inc[9] : $invoice->data->costCenterId,
                                           DB_FALSE,
                                           MANUAL_ENTRY_CREATION_TYPE);

                            $this->db->execute(SAGU::prepare($sqlEntry, $args));
                        }
                        
                        $y++;
                    }
                }
            } //if dos incentivos
        
        return $invoice->data->invoiceId;
    }

    function getPersonBalance($personId)
    {
        $sql = 'SELECT sum(balanceWithPolicies(A.invoiceId, true))
                  FROM finReceivableInvoice A
                 WHERE A.personId = ?
                   AND A.maturityDate <= date(now())
              GROUP BY A.personId
                HAVING sum(balanceWithPolicies(A.invoiceId, true)) > ' .  MINIMAL_VALUE_TO_PRINT_INVOICE;

        $res = $this->db->query(SAGU::prepare($sql, $personId));
        return $res[0][0];
    }

    /**
     * Check if has enroll movimentation
     *
     * @param $contractId   (int): acdContract primary key
     * @param $learningPeriodId (int): acdLearningPeriod primary key
     *
     * @return (boolean): Return true or false
     * 
     */
    function checkIfHasEnrollMovement($contractId, $learningPeriodId)
    {
        $sql = 'SELECT stateContractId
                  FROM acdMovementContract 
                 WHERE contractId       = ? 
                   AND learningPeriodId IN (SELECT learningPeriodId
                                              FROM acdLearningPeriod
                                             WHERE periodId = (SELECT periodId
                                                                 FROM acdLearningPeriod
                                                                WHERE learningPeriodId = ?))
              ORDER BY statetime DESC
                 LIMIT 1';

        $args   = array($contractId, $learningPeriodId);
        $result = $this->db->query(SAGU::prepare($sql, $args));

        if ( $result[0][0] == STATE_CONTRACT_ID_ENROLLED )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Get the total of pupil dependent
     *
     * @param $contractId   (int): acdContract primary key
     * @param $learningPeriodId (int): acdLearningPeriod primary key
     *
     * @return (int): Return the total value
     * 
     */
    function getTotalDependent($contractId, $learningPeriodId)
    {
        $sql = 'SELECT sum(CASE WHEN E.statusId IS NOT NULL THEN 0 ELSE 1 END)
                  FROM acdContract A
            INNER JOIN acdClassPupil B
                    ON ( A.contractId = B.contractId )
            INNER JOIN acdCurriculum C
                    ON (     A.courseId      = C.courseId
                         AND A.courseVersion = C.courseVersion
                         AND A.unitId        = C.unitId
                         AND A.turnId        = C.turnid )
            INNER JOIN acdClass D
                    ON ( B.classId = D.classId )
             LEFT JOIN acdEnroll E
                    ON (     A.contractId   = E.contractid 
                         AND C.curriculumId = E.curriculumId 
                         AND E.statusId     IN (\'' . ENROLL_STATUS_ENROLLED . '\',
                                                \'' . ENROLL_STATUS_APPROVED . '\',
                                                \'' . ENROLL_STATUS_APPROVED_INEXAM . '\',
                                                \'' . ENROLL_STATUS_EXCUSED . '\') )
                 WHERE A.contractId = ?
                   AND C.semester < getClassPeriod(B.classId, ?)
                   AND C.semester > 0';

        $args   = array($contractId, $learningPeriodId);
        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }

    function getPupilDependencies($contractId, $learningPeriodId)
    {
        $sql = 'SELECT DISTINCT C.curricularComponentId,
                                C.curricularComponentVersion,
                                getCurricularComponentName(C.curricularComponentId)
                           FROM acdContract A
                     INNER JOIN acdClassPupil B
                             ON ( A.contractId = B.contractId )
                     INNER JOIN acdCurriculum C
                             ON (     A.courseId      = C.courseId
                                  AND A.courseVersion = C.courseVersion
                                  AND A.unitId        = C.unitId
                                  AND A.turnId        = C.turnid )
                     INNER JOIN acdClass D
                             ON ( B.classId = D.classId )
                      LEFT JOIN acdEnroll E
                             ON (     A.contractId   = E.contractid 
                                  AND C.curriculumId = E.curriculumId 
                                  AND E.statusId     IN (\'' . ENROLL_STATUS_ENROLLED . '\',
                                                         \'' . ENROLL_STATUS_APPROVED . '\',
                                                         \'' . ENROLL_STATUS_EXCUSED . '\') )
                          WHERE A.contractId = ?
                            AND C.semester < getClassPeriod(B.classId, ?)
                            AND C.semester > 0
                            AND CASE WHEN E.statusId IS NOT NULL THEN false ELSE true END = true
                       ORDER BY 1,2,3';

        $args   = array($contractId, $learningPeriodId);
        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result;
    }

    function getContractEnroll($contractId)
    {
        $MIOLO = MIOLO::getInstance();
        //inclui os defines do academic
        $business = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('academic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $sql = 'SELECT A.enrollId,
                       B.courseId,
                       B.courseVersion,
                       getcourseshortname(B.courseId) as course,
                       B.turnId,
                       getturndescription(B.turnId) as turn,
                       B.unitId,
                       getunitdescription(B.unitId) as unit,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       getcurricularcomponentshortname(C.curricularComponentId) as curricularComponent
                  FROM acdEnroll A
            INNER JOIN acdContract B
                    ON ( A.contractId = B.contractId )
            INNER JOIN acdCurriculum C
                    ON ( A.curriculumId = C.curriculumId )
            INNER JOIN acdGroup D
                    ON ( A.groupId = D.groupId )
                 WHERE A.contractId = ?
                   AND D.learningPeriodId IN ( SELECT learningperiodId
                                                 FROM acdLearningPeriod
                                                WHERE periodId = ? )
                   AND A.statusId IN (\'' . ENROLL_STATUS_ENROLLED . '\',
                                      \'' . ENROLL_STATUS_APPROVED . '\',
                                      \'' . ENROLL_STATUS_EXCUSED . '\',
                                      \'' . ENROLL_STATUS_DEPENDENT . '\',
                                      \'' . ENROLL_STATUS_DEPENDENT_FOR_LACKS . '\',
                                      \'' . ENROLL_STATUS_DISAPPROVED . '\',
                                      \'' . ENROLL_STATUS_DISAPPROVED_FOR_LACKS . '\')';

        return $this->db->query(SAGU::prepare($sql, array($contractId, CURRENT_PERIOD_ID) ));
    }

    public function getDegreesEnroll ( $enrollId )
    {
        $sql = ' SELECT 
                    A.enrollId, 
                    C.degreeId,
                    C.description,
                    C.degreeNumber,
                    CASE 
                        WHEN 
                            D.isNotPresent IS TRUE AND A.note IS NULL THEN \'--\' 
                        WHEN 
                            NOT A.note IS NULL THEN D.note::varchar
                        ELSE
                            \'--\'
                    END as note,
                    weight as peso,
                    maxNote
                FROM
                    acdEnroll A INNER JOIN
                    acdGroup B ON ( A.groupId = B.groupId ) INNER JOIN
                    acdDegree C ON ( C.learningPeriodId = B.learningPeriodId ) LEFT JOIN
                    acdDegreeEnroll D ON ( D.degreeId = C.degreeId AND D.enrollId = A.enrollId ) 
                WHERE
                    A.enrollId = ?::integer 
                ORDER BY
                	C.degreeNumber ';
        $args[] = $enrollId;

        return $this->db->query ( SAGU::prepare($sql, $args) );

    }
}

?>
