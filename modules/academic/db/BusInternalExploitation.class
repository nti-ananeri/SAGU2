<?php
/**
 *
 * Handles external exploitation data
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('db/BusExploitation.class', 'academic');
/**
 * Class to manipulate the acdExternalExploitation table
 **/
class BusinessAcademicBusInternalExploitation extends BusinessAcademicBusExploitation
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct();
    }
    
    /**
     * Gets an object that represents the internal exploitation data
     *
     * @param $exploitationId: Primary key of the desired register
     *
     * @return (object): An object containing the data
     **/
    public function getInternalExploitation($exploitationId)
    {
        $sql = 'SELECT exploitationId,
                       enrollId,
                       exploitationType,
                       exploitationEnrollId,
                       exploitationNumberHours,
                       exploitationCredits
                  FROM acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        list ($exploitationData->exploitationId,
              $exploitationData->enrollId,
              $exploitationData->exploitationType,
              $exploitationData->exploitationEnrollId,
              $exploitationData->exploitationNumberHours,
              $exploitationData->exploitationCredits) = $result[0];
              
        return $exploitationData;
    }
    
    /**
     * Searches for internal exploitation data on acdExploitation table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInternalExploitation($filters)
    {
        $sql = 'SELECT A.exploitationId,
                       A.exploitationType,
                       A.enrollId,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name,
                       A.exploitationEnrollId,
                       H.courseId || \'/\' || H.courseVersion,
                       G.curricularComponentId || \'/\' || G.curricularComponentVersion,
                       G.name,
                       A.exploitationNumberHours,
                       A.exploitationCredits
                  FROM acdExploitation A
            INNER JOIN acdEnroll B
                    ON (B.enrollId = A.enrollId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId      = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN acdEnroll E
                    ON (E.enrollId = A.exploitationEnrollId)
            INNER JOIN acdCurriculum F
                    ON (F.curriculumId = E.curriculumId)
            INNER JOIN acdCurricularComponent G
                    ON (G.curricularComponentId      = F.curricularComponentId AND
                        G.curricularComponentVersion = F.curricularComponentVersion)
            INNER JOIN acdContract H
                    ON (H.contractId = E.contractId)
            INNER JOIN acdGroup I
                    ON (I.groupId = E.groupId)
            INNER JOIN acdLearningPeriod J
                    ON (J.learningPeriodId = I.learningPeriodId)';
                    
        unset($where);
        if (strlen((string)$filters->exploitationId) > 0)
        {
            $where .= ' AND A.exploitationId = ?';
            $args[] = $filters->exploitationId;
        }
        if (strlen((string)$filters->enrollId) > 0)
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }
        if (strlen((string)$filters->curricularComponentId) > 0)
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if (strlen((string)$filters->curricularComponentVersion) > 0)
        {
            $where .= ' AND D.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if (strlen((string)$filters->curricularComponentName) > 0)
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if (strlen((string)$filters->periodId) > 0)
        {
            $where .= ' AND J.periodId = ?';
            $args[] = $filters->period;
        }
        if (strlen((string)$filters->learningPeriodId) > 0)
        {
            $where .= ' AND I.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if (strlen((string)$filters->contractId) > 0)
        {
            $where .= ' AND B.contractId = ?';
            $args[] = $filters->contractId;
        }
        if (strlen((string)$filters->exploitationEnrollId) > 0)
        {
            $where .= ' AND A.exploitationEnrollId = ?';
            $args[] = $filters->exploitationEnrollId;
        }
        
        $where .= ' AND A.exploitationType = \'I\'';
        
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY J.periodId, D.name';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Inserts a internal exploitation register on the exploitations table
     *
     * @param $data (object): Object with the data to be inserted
     *
     * @return True if succed, otherwise False
     **/
    public function insertInternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->contractId: código do contrato
         * $data->curriculumId: código da disciplina na matriz curricular
         * $data->exploitationEnrollId: código da matrícula da disciplina que está 
         *                              sendo aproveitada
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         * $data->periodId: código do período do aproveitamento
         **/
        
        $transaction = $this->db->getTransaction();
        $transaction->_beginTransaction();
        
        $data->exploitationType = 'I';
        $data->enrollId         = $this->getEnrollForExploitation($data->contractId, $data->curriculumId, $data->periodId);
        
        $sql = 'INSERT INTO acdExploitation
                           (enrollId,
                            exploitationType,
                            exploitationEnrollId,
                            exploitationNumberHours,
                            exploitationCredits)
                     VALUES (?, ?, ?, ?, ?)';
                     
        $args = array($data->enrollId,
                      $data->exploitationType,
                      $data->exploitationEnrollId,
                      $data->exploitationNumberHours,
                      $data->exploitationCredits);
                      
        $this->db->execute(SAGU::prepare($sql, $args));
        
        return $transaction->_commit();
    }
    
    /**
     * Updates a internal exploitation register of the exploitations table
     *
     * @param $data (object): Object with the data to be updated
     *
     * @return True if succed, otherwise False
     **/
    public function updateInternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->exploitationId: código do aproveitamento
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         **/
        
        $sql = 'UPDATE acdExploitation
                   SET exploitationNumberHours = ?,
                       exploitationCredits = ?
                 WHERE exploitationId = ?';
                 
        $args = array($data->exploitationNumberHours,
                      $data->exploitationCredits,
                      $data->exploitationId);
                      
        return $this->db->execute(SAGU::prepare($sql, $args));
    }
    
    /**
     * Searches for enrolls that can be exploited by a contract
     *
     * @param $contractId: Contract code
     *
     * @return (array): Array with the search results
     **/
    public function searchContractExploitableEnroll($contractId)
    {
        $sql = 'SELECT A.enrollId,
                       CASE WHEN (SELECT count(*) 
                                    FROM acdExploitation XX 
                                   WHERE XX.enrollId = A.enrollId) > 0
                       THEN 1
                       ELSE 0 END,
                       C.curricularComponentId || \'/\' || C.curricularComponentVersion,
                       C.name,
                       D.courseId || \'/\' || D.courseVersion,
                       C.academicNumberHours,
                       (SELECT CASE WHEN 
                                            sum(YY.exploitationNumberHours) > 0
                                    THEN
                                            sum(YY.exploitationNumberHours)
                                    ELSE
                                            0
                                    END
                          FROM acdExploitation YY
                         WHERE YY.exploitationEnrollId = A.enrollId) AS exploitedNumberHours
                  FROM acdEnroll A
            INNER JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN acdContract D    
                    ON (D.contractId = A.contractId)
            INNER JOIN acdCourse E
                    ON (E.courseId = D.courseId)
                 WHERE D.personId IN (SELECT personId 
                                        FROM acdContract 
                                       WHERE contractId = ?)
                   AND A.contractId <> ?
                   AND B.curriculumTypeId NOT IN (' . ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY . ', ' . ACD_CURRICULUM_TYPE_PROFICIENCY . ')
                   AND E.formationLevelId IN (SELECT BB.formationLevelId
                                                FROM acdContract AA
                                          INNER JOIN acdCourse BB
                                                  ON (BB.courseId = AA.courseId)
                                               WHERE AA.contractId = ?)
                   AND A.statusId IN (' . ENROLL_STATUS_APPROVED . ', ' . ENROLL_STATUS_EXCUSED . ', ' . ENROLL_STATUS_APPROVED_INEXAM . ')
                   AND C.academicNumberHours > (SELECT CASE WHEN 
                                                              sum(XY.exploitationNumberHours) > 0
                                                       THEN
                                                              sum(XY.exploitationNumberHours)
                                                       ELSE
                                                              0
                                                       END
                                                  FROM acdExploitation XY
                                                 WHERE XY.exploitationEnrollId = A.enrollId)';
                   
        $args = array($contractId, $contractId, $contractId);
        
        return $this->db->query(SAGU::prepare($sql, $args));
    }
    
    /**
     * Gets an exploitation data summary of an exploitable enroll
     *
     * @param $exploitationEnrollId: Primary key of the desired enroll
     *
     * @return (object): Object with the data
     **/
    public function getEnrollExploitableSummary($exploitableEnrollId)
    {
        $sql = 'SELECT C.academicNumberHours
                  FROM acdEnroll A
            INNER JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
                 WHERE A.enrollId = ?';
                 
        $args = array($exploitableEnrollId);
        
        $result1 = $this->db->query(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT sum(exploitationNumberHours)
                  FROM acdExploitation
                 WHERE exploitationEnrollId = ?';
                 
        $result2 = $this->db->query(SAGU::prepare($sql, $args));
        
        $exploitableSumm->totalNumberHours     = $result1[0][0];
        $exploitableSumm->exploitedNumberHours = $result2[0][0] > 0 ? $result2[0][0] : 0;
        $exploitableSumm->remainingNumberHours = $exploitableSumm->totalNumberHours - $exploitableSumm->exploitedNumberHours;
        
        return $exploitableSumm;
    }
//----------------------------||------------------------------//    
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    /*public function searchEnroll($filters)
    {
    
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::_request('module');

        $sql = 'SELECT A.enrollId,
                       NULL as "periodId",
                       NULL as exploitation,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       F.name,
                       C.courseId,
                       C.courseVersion,
                       E.name,
                       A.groupId
                  FROM acdEnroll A
             LEFT JOIN acdCurriculum C
                    ON ( A.curriculumId = C.curriculumId )
            INNER JOIN acdCourse E
                    ON ( C.courseId = E.courseId ) 
            INNER JOIN acdCurricularComponent F
                    ON ( C.curricularComponentId          = F.curricularComponentId 
                         AND C.curricularComponentVersion = F.curricularComponentVersion ) 
                 WHERE A.contractId IN ( SELECT DISTINCT contractId 
                                                    FROM acdContract 
                                                   WHERE personId IN ( SELECT personId
                                                                         FROM acdContract 
                                                                        WHERE contractId = ? )
                                                     AND contractId<> ? ) ';

        unset($args);
        $args[] = $filters->contractId;
        $args[] = $filters->contractId;

        if ( strlen((string)$filters->statusId) > 0 )
        {
            $sql .= '    AND A.statusId IN (' . $filters->statusId . ') ';
        }

        $sql .= ' ORDER BY E.name,
                           C.courseVersion,
                           F.name';

        $db      = $this->getDatabase();
        $result  = $db->query(SAGU::prepare($sql,$args));

        for ( $x=0; $x<count($result); $x++ )
        {
            unset($args);

            $sql      = 'SELECT DISTINCT B.periodId
                                    FROM acdGroup A,
                                         acdLearningPeriod B
                                   WHERE A.learningPeriodId = B.learningPeriodId
                                     AND A.groupId = ? ';
            $result2  = $db->query(SAGU::prepare($sql,$result[$x][9]));
            $result[$x][1] = $result2[0][0];
            

            $groupId = $result[$x][9];
            $sql      = 'SELECT groupId
                            FROM acdEnroll
                            WHERE exploitationType = \'I\' AND
                                contractId = ? AND
                                groupId = ?';
            $args[]        = $filters->contractId;
            $args[]        = $groupId;
            $result3       = $db->query(SAGU::prepare($sql,$args));
            if ( $result3[0][0] )
            {
                $str    = _M('Exploited', $module);
                $path = $MIOLO->getActionUrl($module, 'html:images:green.png');
                $string = new MImage('imgAgreement'.$x, $str, $path);
                $result[$x][2] = $string->generate();
            }
            else
            {
                $str    = _M('Not exploited', $module);
                $path = $MIOLO->getActionUrl($module, 'html:images:red.png');
                $string = new MImage('imgAgreement'.$x, $str, $path);
                $result[$x][2] = $string->generate();
            }

        }

        return $result;
    }

    public function searchEnrollFormGrid($filters)
    {
    
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::_request('module');

        $sql = 'SELECT A.enrollId,
                       NULL as "periodId",
                       NULL as exploitation,
                       C.curricularComponentId || \' / \' ||  C.curricularComponentVersion,
                       CASE WHEN C.curricularComponentId = J.curricularComponentId
                            THEN F.name
                            ELSE F.name || \' (\' || J.name || \')\'
                       END,
                       C.courseId || \' / \' ||  C.courseVersion,
                       E.name,
                       A.groupId
                  FROM acdEnroll A
             LEFT JOIN acdCurriculum C
                    ON ( A.curriculumId = C.curriculumId )
            INNER JOIN acdCourse E
                    ON ( C.courseId = E.courseId ) 
            INNER JOIN acdCurricularComponent F
                    ON ( C.curricularComponentId          = F.curricularComponentId 
                         AND C.curricularComponentVersion = F.curricularComponentVersion ) 
            INNER JOIN acdContract G
                    ON (G.contractId = A.contractId)
            INNER JOIN acdGroup H
                    ON (H.groupId = A.groupId)
            INNER JOIN acdCurriculum I
                    ON (I.curriculumId = H.curriculumId)
            INNER JOIN acdCurricularComponent J
                    ON (I.curricularComponentId      = J.curricularComponentId AND
                        I.curricularComponentVersion = J.curricularComponentVersion)
                 WHERE G.personId IN ( SELECT DISTINCT personId
                                                  FROM acdContract
                                                 WHERE contractId = ? )
                   AND C.curriculumTypeId NOT IN (? , ?) ';

        unset($args);

        //$args[] = $filters->contractId;
        $args[] = $filters->contractId;
        $args[] = ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY;
        $args[] = ACD_CURRICULUM_TYPE_PROFICIENCY;


        if ( strlen((string)$filters->statusId) > 0 )
        {
            $sql .= '    AND A.statusId IN (' . $filters->statusId . ') ';
        }

        $sql .= ' ORDER BY E.name,
                           C.courseVersion,
                           F.name';

        $db      = $this->getDatabase();
        $result  = $db->query(SAGU::prepare($sql,$args));

        for ( $x=0; $x<count($result); $x++ )
        {
            unset($args);

            $sql      = 'SELECT DISTINCT B.periodId
                                    FROM acdGroup A,
                                         acdLearningPeriod B
                                   WHERE A.learningPeriodId = B.learningPeriodId
                                     AND A.groupId = ? ';
            $result2  = $db->query(SAGU::prepare($sql,$result[$x][7]));
            $result[$x][1] = $result2[0][0];

            $groupId = $result[$x][7];

            $sql      = 'SELECT groupId
                           FROM acdEnroll
                          WHERE exploitationType = \'I\'
                            AND contractId = ?
                            AND groupId = ?';

            $args[]        = $filters->contractId;
            $args[]        = $groupId;
            $result3       = $db->query(SAGU::prepare($sql,$args));
            if ( $result3[0][0] )
            {
                $str    = _M('Exploited', $module);
                $path = $MIOLO->getActionUrl($module, 'html:images:green.png');
                $string = new MImage('imgAgreement'.$x, $str, $path);
                $result[$x][2] = $string->generate();
            }
            else
            {
                $str    = _M('Not exploited', $module);
                $path = $MIOLO->getActionUrl($module, 'html:images:red.png');
                $string = new MImage('imgAgreement'.$x, $str, $path);
                $result[$x][2] = $string->generate();
            }

        }

        return $result;
    }

    /**
     * Insert a new record into acdEnroll table
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **
    public function insertInternalExploitation($data)
    {
        $sql = 'INSERT INTO acdEnroll
                            (contractId,
                             groupId,
                             curriculumId,
                             dateEnroll,
                             hourEnroll,
                             dateCancellation,
                             hourCancellation,
                             reasonCancellationId,
                             note,
                             examNote,
                             finalNote,
                             concept,
                             textEvaluation,
                             frequency,
                             obsExploitation,
                             exploitationInstitutionId,
                             numberHourExploitation,
                             creditsExploitation,
                             isShowDocumentEndCourse,
                             statusId,
                             frequencyAlertEmail,
                             isInternet,
                             ip,
                             isConfirm,
                             isSetFree,
                             complement,
                             exploitationType)
                     VALUES (?,?,?,
                             TO_DATE(?, \'' . MASK_DATE . '\'), TO_TIMESTAMP(?, \'' . MASK_TIME . '\'),
                             TO_DATE(?, \'' . MASK_DATE . '\'), TO_TIMESTAMP(?, \'' . MASK_TIME . '\'),
                             ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,\'I\')';

        $args = array( $data->contractId,
                       $data->groupId,
                       $data->curriculumId,
                       $data->dateEnroll,
                       $data->hourEnroll,
                       $data->dateCancellation,
                       $data->hourCancellation,
                       $data->reasonCancellationId,
                       $data->note,
                       $data->examNote,
                       $data->finalNote,
                       $data->concept,
                       $data->textEvaluation,
                       $data->frequency,
                       $data->obsExploitation,
                       $data->exploitationInstitutionId,
                       $data->numberHourExploitation,
                       $data->creditsExploitation,
                       $data->isShowDocumentEndCourse,
                       $data->statusId,
                       $data->frequencyAlertEmail,
                       $data->isInternet,
                       $data->ip,
                       $data->isConfirm,
                       $data->isSetFree,
                       $data->complement);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Search if a enroll is a internal exploitation
     *
     * @param $enrollId (int): Search the respective enroll
     *
     * @return (boolean): True or false
     **
    public function searchEnrollExploitation($enrollId)
    {
        
    }*/

}

?>
