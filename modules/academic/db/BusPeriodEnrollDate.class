<?php
/**
 * Class to manipulate the acdPeriodEnrollDate table data.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusPeriodEnrollDate extends Business
{
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertPeriodEnrollDate($data)
    {
        $sql = 'INSERT INTO acdPeriodEnrollDate
                            (learningPeriodId,
                             description,
                             beginDate,
                             endDate,
                             isInternet,
                             isAdjustment,
                             isSelectiveProc,
                             isAcademic,
                             isFinance,
                             maturityDate)
                     VALUES (?,?,TO_DATE(?, \'' . MASK_DATE . '\'),TO_DATE(?, \'' . MASK_DATE . '\'),?,?,?,?,?,TO_DATE(?, \'' . MASK_DATE . '\'))                           ' ;

        $args = array($data->learningPeriodId,
                      $data->description,
                      $data->beginDate,
                      $data->endDate,
                      $data->isInternet,
                      $data->isAdjustment,
                      $data->isSelectiveProc,
                      $data->isAcademic,
                      $data->isFinance,
                      $data->maturityDate);

        $db = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($sql, $args));
        //$db->Close();

        return $result;
    }

    /**
     * List the available periods for enroll for a specific contractId
     * 
     * @param $data (object): acdPeriod object
     *
     * @return If the specified periodEnrollDateId exists, returns an object (period) containing its data. 
     * Otherwise, returns null.
     *
     **/
    public function listPeriodEnrollDate($contractId, $isFreshman=false)
    {
        $sql = 'SELECT A.learningPeriodId,
                       C.description
                  FROM acdPeriodEnrollDate A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdPeriod C
                    ON (C.periodId = B.periodId)
            INNER JOIN acdContract D
                    ON (D.courseId = B.courseId
                        AND D.courseVersion = B.courseVersion
                        AND D.turnId = B.turnId
                        AND D.unitId = B.unitId)
                 WHERE D.contractId = ?
                   AND date(now()) BETWEEN A.beginDate AND A.endDate ';
                   
        if ($isFreshman)
        {
            $sql .= ' AND (A.isSelectiveProc = \'' . DB_TRUE . '\' OR A.isAdjustment = \'' . DB_TRUE . '\') ';
        }
        else
        {
            $sql .= ' AND A.isSelectiveProc = \'' . DB_FALSE . '\' ';
        }
        
        $sql .= ' ORDER BY A.beginDate DESC,
                           C.description';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$contractId));
        //$db->Close();

        return $result; 
    }

   /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPeriodEnrollDateSearch()
    {
        $db  = $this->getDatabase();

        $sql = ' SELECT DISTINCT C.periodId,
                                 C.description
                            FROM acdPeriodEnrollDate A
                      INNER JOIN acdLearningPeriod B
                              ON (B.learningPeriodId = A.learningPeriodId)
                      INNER JOIN acdPeriod C
                              ON (C.periodId = B.periodId)
                        ORDER BY C.description DESC';

        $result = $db->query($sql);
        //$db->close();
        return $result;
    }
    
    function listCurriculumType()
    {
        $sql = 'SELECT A.curriculumTypeId,
                       A.description,
                       A.shortDescription
                  FROM acdCurriculumType A';

        $db     = $this->getDatabase();
        $result = $db->query($sql);
        //$db->close();

        return $result;

    }

    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified periodEnrollDateId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getPeriodEnrollDate($periodEnrollDateId)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.maturityDate, \'' . MASK_DATE . '\'),
                       A.isInternet,
                       A.isAdjustment,
                       A.isSelectiveProc,
                       A.isAcademic,
                       A.isFinance,
                       B.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                       FROM      acdPeriodEnrollDate A
                       LEFT JOIN acdLearningPeriod B 
                       ON        (A.learningPeriodId = B.learningPeriodId)  
                       WHERE     A.periodEnrollDateId = ?                  ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$periodEnrollDateId));
        //$db->Close();

        $period = new acdPeriodEnrollDate();

      // die();
        $period->periodEnrollDateId = $periodEnrollDateId;

        list ( $period->learningPeriodId,
               $period->periodEnrollDateDescription,
               $period->beginDate,
               $period->endDate,
               $period->maturityDate,
               $period->isInternet,
               $period->isAdjustment,
               $period->isSelectiveProc,
               $period->isAcademic,
               $period->isFinance,
               $period->learningPeriodDescription,
               $period->userName,
               $period->dateTime,
               $period->ipAddress ) = $result[0];
        return $period;
    }

    /**
    * Obtain the specified type from a learning period id data.
    * 
    * @param $data (integer): acdLearningPeriod primary key
    *
    * @return If the specified periodEnrollDate exists, returns an object (periodEnrollDate) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getCurrentPeriodEnrollDate($learningPeriodId)
    {
        $sql = 'SELECT A.periodEnrollDateId,
                       A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       A.isInternet,
                       A.isAdjustment,
                       A.isSelectiveProc,
                       A.isAcademic,
                       A.isFinance,
                       B.description,
                       TO_CHAR(A.maturityDate, \'' . MASK_DATE . '\')
                  FROM acdPeriodEnrollDate A
            INNER JOIN acdLearningPeriod B
                    ON ( A.learningPeriodId = B.learningPeriodId )
                 WHERE A.learningPeriodId = ?
                   AND date(now()) BETWEEN A.beginDate AND A.endDate';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$learningPeriodId));

        $period = new acdPeriodEnrollDate();

        list ( $period->periodEnrollDateId,
               $period->learningPeriodId,
               $period->periodEnrollDateDescription,
               $period->beginDate,
               $period->endDate,
               $period->isInternet,
               $period->isAdjustment,
               $period->isSelectiveProc,
               $period->isAcademic,
               $period->isFinance,
               $period->learningPeriodDescription,
               $period->maturityDate ) = $result[0];

        return $period; 
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchPeriodEnrollDate($data)
    {
            $sql = '  SELECT A.periodEnrollDateId,
                             A.learningPeriodId,
                             A.description,
                             TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                             TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                             A.isInternet,
                             A.isAdjustment,
                             A.isSelectiveProc,
                             A.isAcademic,
                             A.isFinance,
                             TO_CHAR(A.maturityDate, \'' . MASK_DATE . '\')
                       FROM  acdPeriodEnrollDate A
                       LEFT JOIN acdLearningPeriod B
                       ON (A.learningPeriodId = B.learningPeriodId)      ';

        if ( strlen((string)$data->learningPeriodId) > 0 )
        {
            $where .= '     AND A.learningPeriodId ILIKE ?';
            $args[] = $data->learningPeriodId;
        }

        if ( strlen((string)$data->periodEnrollDateDescription) > 0 )
        {
            $where .= '     AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $data->periodEnrollDateDescription.'%';
        }

        if ( strlen((string)$data->beginDateLessons) > 0 )
        {
            $where .= '     AND A.beginDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->beginDateLessons;
        }

        if ( strlen((string)$data->endDateLessons) > 0 )
        {
            $where .= '     AND A.endDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->endDateLessons;
        }

        if ( strlen((string)$data->isInternet) > 0 )
        {
            $where .= '     AND A.isInternet = ?';
            $args[] = $data->isInternet;
        }

        if ( strlen((string)$data->isAdjustment) > 0 )
        {
            $where .= '     AND A.isAdjustment = ?';
            $args[] = $data->isAdjustment;
        }

        if ( strlen((string)$data->isSelectiveProc) > 0 )
        {
            $where .= '     AND A.isSelectiveProc = ?';
            $args[] = $data->isSelectiveProc;
        }

        if ( strlen((string)$data->isAcademic) > 0 )
        {
            $where .= '     AND A.isAcademic = ?';
            $args[] = $data->isAcademic;
        }

        if ( strlen((string)$data->isFinance) > 0 )
        {
            $where .= '     AND A.isFinance = ?';
            $args[] = $data->isFinance;
        }
        
        if ( strlen((string)$data->formationLevelId) > 0 )
        {
            $where .= '     AND B.formationLevelId = ?';
            $args[] = $data->formationLevelId;
        }
        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '     AND B.periodId = ?';
            $args[] = $data->periodId;
        }
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '     AND B.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '     AND B.courseVersion = ?';
            $args[] = $data->courseVersion;
        }

        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.description';

            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
            //$db->Close();
        }
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updatePeriodEnrollDate($data)
    {
    
        $sql = 'UPDATE acdPeriodEnrollDate
                       SET learningPeriodId = ?,
                       description = ?,
                       beginDate = TO_DATE(?, \'' . MASK_DATE . '\'),  
                       endDate = TO_DATE(?, \'' . MASK_DATE . '\'),   
                       isInternet = ?,
                       isAdjustment = ?,
                       isSelectiveProc = ?,
                       isAcademic = ?,
                       isFinance = ?,
                       maturityDate = TO_DATE(?, \'' . MASK_DATE . '\')   
                       WHERE  periodEnrollDateId = ?                   ';


        $args = array($data->learningPeriodId,
                      $data->description,
                      $data->beginDate,
                      $data->endDate,
                      $data->isInternet,
                      $data->isAdjustment,
                      $data->isSelectiveProc,
                      $data->isAcademic,
                      $data->isFinance,
                      $data->maturityDate,
                      $data->periodEnrollDateId);

        $db = $this->getDatabase();

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$db->Close();

        return $result;
    }

    /**
     * Delete the specified peirod enroll date.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $periodEnrollDateId (int): Identifier of the period enroll date to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deletePeriodEnrollDate($periodEnrollDateId)
    {
        $delete = 'DELETE FROM acdPeriodEnrollDate
                    WHERE periodEnrollDateId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$periodEnrollDateId));

        //$db->Close();

        return $result;
    }

}

?>
