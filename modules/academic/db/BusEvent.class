<?php
/**
 *
 * This file handles the connection and actions for acdEvent table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdEvent table
 **/
class BusinessAcademicBusEvent extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEvent()
    {

    }
    
    /**
     * Return a specific record from the database
     *
     * @param $eventId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEvent($eventId)
    {
        $sql = 'SELECT A.eventId,
                       A.description,
                       TO_CHAR(A.beginDate, \''. MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \''. MASK_DATE . '\'),
                       A.accountSchemeId,
                       A.costCenterId,
                       A.policyId,
                       A.incomeSourceId,
                       TO_CHAR(A.inscriptionFee, \'' . MASK_REAL_2 . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM acdEvent A
                 WHERE eventId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $eventId));
        //$db->close();

        $event = new acdEvent();
        list ( $event->eventId,
               $event->description,
               $event->beginDate,
               $event->endDate,
               $event->accountSchemeId,
               $event->costCenterId,
               $event->policyId,
               $event->incomeSourceId,
               $event->inscriptionFee,
               $event->userName,
               $event->dateTime) = $result[0];

        return $event; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEvent($filters)
    {
        $sql= 'SELECT  A.eventId,
                       A.description,
                       TO_CHAR(A.beginDate, \''.MASK_DATE.'\'),
                       TO_CHAR(A.endDate, \''.MASK_DATE.'\'),
                       A.accountSchemeId,
                       B.description,
                       A.costCenterId,
                       C.description,
                       A.policyId,
                       D.description,
                       A.incomeSourceId,
                       E.description,
                       TO_CHAR(A.inscriptionFee, \'' . MASK_REAL_2 . '\')
                FROM acdEvent A
                LEFT JOIN accAccountScheme B
                    ON (A.accountSchemeId = B.accountSchemeId)
                LEFT JOIN accCostCenter C
                    ON (A.costCenterId = C.costCenterId)
                LEFT JOIN finPolicy D
                    ON (A.policyId = D.policyId)
                LEFT JOIN finIncomeSource E
                    ON (A.incomeSourceId = E.incomeSourceId) ';

        if ( strlen((string)$filters->eventId) > 0 )
        {
            $where .= ' AND A.eventId ILIKE ? ';
            $args[] = $filters->eventId.'%';
        }

        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description.'%';
        }

        if ( strlen((string)$filters->accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ? ';
            $args[] = $filters->accountSchemeId;
        }
        if ( strlen((string)$filters->costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId = ? ';
            $args[] = $filters->costCenterId;
        }
        if ( strlen((string)$filters->policyId) > 0 )
        {
            $where .= ' AND A.policyId = ? ';
            $args[] = $filters->policyId;
        }
        if ( strlen((string)$filters->incomeSourceId) > 0 )
        {
            $where .= ' AND A.incomeSourceId = ? ';
            $args[] = $filters->incomeSourceId;
        }
        if ( strlen((string)$filters->inscriptionFee) > 0 )
        {
            $where .= ' AND A.inscriptionFee = ? ';
            $args[] = $filters->inscriptionFee;
        }



        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEvent($data)
    {
        $sql = 'INSERT INTO acdEvent
                            (description,
                             beginDate,
                             endDate,
                             accountSchemeId,
                             costCenterId,
                             policyId,
                             incomeSourceId,
                             inscriptionFee)
                     VALUES (?,TO_DATE(?, \''.MASK_DATE.'\'),TO_DATE(?, \''.MASK_DATE.'\'),?,?,?,?,?) ';

        $args = array($data->description,
                        $data->beginDate,
                        $data->endDate,
                        $data->accountSchemeId,
                        $data->costCenterId,
                        $data->policyId,
                        $data->incomeSourceId,
                        $data->inscriptionFee );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateEvent($data)
    {
        $sql = 'UPDATE acdEvent
                   SET description = ?,
                       beginDate = TO_DATE(?, \''.MASK_DATE.'\'),
                       endDate = TO_DATE(?, \''.MASK_DATE.'\'),
                       accountSchemeId = ?,
                       costCenterId = ?,
                       policyId = ?,
                       incomeSourceId = ?,
                       inscriptionFee = ?
                 WHERE eventId = ? ';

        $args = array( $data->description,
                        $data->beginDate,
                        $data->endDate,
                        $data->accountSchemeId,
                        $data->costCenterId,
                        $data->policyId,
                        $data->incomeSourceId,
                        $data->inscriptionFee,
                        $data->eventId);
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $eventId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteEvent($eventId)
    {
        $sql = 'DELETE FROM acdEvent
                      WHERE eventId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $eventId));
        //$db->close();
        return $result;
    }
}
?>
