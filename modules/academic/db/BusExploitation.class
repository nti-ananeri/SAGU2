<?php
/**
 *
 * Handles exploitation data
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/08/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdExploitation table
 **/
class BusinessAcademicBusExploitation extends Business
{

    public $db;
    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Get an object that represents the register data
     * 
     * @param $exploitationId: Primary key of the desired register
     *
     * @return (object): An object containing the register data
     **/
    public function getExploitation($exploitationId)
    {
        $sql = 'SELECT exploitationId,
                       enrollId,
                       exploitationType,
                       exploitationEnrollId,
                       exploitationNumberHours,
                       exploitationCredits,
                       institutionId,
                       courseName,
                       curricularComponentName,
                       replace(finalNote, \',\', \'.\'),
                       numberHours,
                       credits,
                       period,
                       userName,
                       dateTime,
                       ipAddress
                  FROM acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        list ($exploitationData->exploitationId,
              $exploitationData->enrollId,
              $exploitationData->exploitationType,
              $exploitationData->exploitationEnrollId,
              $exploitationData->exploitationNumberHours,
              $exploitationData->exploitationCredits,
              $exploitationData->institutionId,
              $exploitationData->courseName,
              $exploitationData->curricularComponentName,
              $exploitationData->finalNote,
              $exploitationData->numberHours,
              $exploitationData->credits,
              $exploitationData->period,
              $exploitationData->userName,
              $exploitationData->dateTime,
              $exploitationData->ipAddress) = $result[0];
        
        return $exploitationData; 
    }
    
    /**
     * Do a search on the exploitations table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchExploitation($filters)
    {
        $sql = 'SELECT A.exploitationId,
                       E.contractId,
                       F.personId,
                       F.name,
                       A.exploitationType,
                       A.enrollId,
                       E.courseId || \'/\' || E.courseVersion,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name,
                       A.exploitationEnrollId,
                       J.curricularComponentId || \'/\' || J.curricularComponentVersion,
                       J.name,
                       A.exploitationNumberHours,
                       A.exploitationCredits,
                       A.institutionId,
                       K.name,
                       A.courseName,
                       A.curricularComponentName,
                       replace(A.finalNote, \',\', \'.\'),
                       A.numberHours,
                       A.credits,
                       A.period
                  FROM acdExploitation A
            INNER JOIN acdEnroll B
                    ON (B.enrollId = A.enrollId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId      = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN acdContract E
                    ON (E.contractId = B.contractId)
            INNER JOIN ONLY basPhysicalPerson F
                    ON (F.personId = E.personId)
             LEFT JOIN acdEnroll G
                    ON (G.enrollId = A.exploitationEnrollId)
             LEFT JOIN acdContract H
                    ON (H.contractId = G.contractId)
             LEFT JOIN acdCurriculum I
                    ON (I.curriculumId = G.curriculumId)
             LEFT JOIN acdCurricularComponent J
                    ON (J.curricularComponentId      = I.curricularComponentId AND
                        J.curricularComponentVersion = I.curricularComponentVersion)
             LEFT JOIN basLegalPerson K
                    ON (K.personId = A.institutionId)';
                 
        if ( strlen((string)$filters->exploitationId) > 0 )
        {
            $where .= ' AND A.exploitationId = ?';
            $args[] = $filters->exploitationId;
        }
        if ( strlen((string)$filters->contractId) > 0 )
        {
            $where .= ' AND B.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND F.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->personName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->personName . '%';
        }
        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND B.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen((string)$filters->exploitationType) > 0 )
        {
            $where .= ' AND A.exploitation = ?';
            $args[] = $filters->exploitationType;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY F.name, A.period, D.name';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Gets the current enroll id for exploitations, if it exists, or inserts a new one.
     *
     * @param $contractId: Contract code to be checked
     * @param $curriculumId: Curriculum code to be checked
     *
     * @return $enrollId: Code of the enroll got or inserted
     **/
    public function getEnrollForExploitation($contractId, $curriculumId, $periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql = 'SELECT enrollId,
                       learningPeriodId
                  FROM acdEnroll
                 WHERE contractId   = ?
                   AND curriculumId = ?
                   AND statusId IN (' . ENROLL_STATUS_EXCUSED . ')
                   AND enrollId IN (SELECT enrollId
                                      FROM acdExploitation)';
                                      
        $args = array($contractId, $curriculumId);
       
        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT A.learningPeriodId
                  FROM acdLearningPeriod A
            INNER JOIN acdContract B
                    ON (B.courseId = A.courseId AND
                        B.courseVersion = A.courseVersion AND
                        B.turnId = A.turnId AND
                        B.unitId = A.unitId)
                  WHERE B.contractId = ?
                    AND A.periodId = ?';
                    
        $args = array($contractId, $periodId);
      
        $resultLearning = $this->db->query(SAGU::prepare($sql, $args));
    
        if (count($resultLearning) != 1)
        {
            $sql = 'SELECT A.learningPeriodId
                      FROM acdLearningPeriod A
                INNER JOIN acdContract B
                        ON (B.courseId = A.courseId AND
                            B.courseVersion = A.courseVersion AND
                            B.turnId = A.turnId AND
                            B.unitId = A.unitId)
                INNER JOIN acdEnroll C
                        ON ( B.contractId = C.contractId )
                INNER JOIN acdGroup D
                        ON (     D.groupId = C.groupId
                             AND A.learningPeriodId = D.learningPeriodId )
                      WHERE B.contractId = ?
                        AND A.periodId = ?';
                    
            $args = array($contractId, $periodId);
      
            $resultLearning = $this->db->query(SAGU::prepare($sql, $args));

            if (count($resultLearning) != 1)
            {
                throw new Exception(_M('Could not get a learning period for the period @1. Access the learning period register to check the problem.', $module, $periodId));
            }
        }
        
        if (count($result) == 1)
        {
            if ($resultLearning[0][0] != $result[0][1])
            {
                $sql = 'UPDATE acdEnroll SET learningPeriodId = ? WHERE enrollId = ?';
                
                $args = array($resultLearning[0][0], $result[0][0]);
                
                $this->db->execute(SAGU::prepare($sql, $args));
            }
            
            return $result[0][0];
        }
        elseif (count($result) > 1)
        {
            throw new Exception(_M('There is multiple enroll registers for the selected curricular component. Access the pupil assorted queries to check the problem.', $module));
        }
        else
        {
            $sql = 'SELECT nextval(\'seq_enrollid\')';
                
            $enrollId = $this->db->query($sql);
            
            $sql = 'INSERT INTO acdEnroll
                                (enrollId,
                                contractId,
                                curriculumId,
                                statusId,
                                learningPeriodId,
                                isExploitation)
                            VALUES (?, ?, ?, ' . ENROLL_STATUS_EXCUSED . ', ?, \'' . DB_TRUE . '\')';
            
            $args = array($enrollId[0][0], $contractId, $curriculumId, $resultLearning[0][0]);
            
            if (!$this->db->execute(SAGU::prepare($sql, $args)))
            {
                throw new Exception(_M('Could not insert a enroll for the selected curricular component. Try again and if the problem continues happening, ask for technical suport.', $module));
            }
            
            return $enrollId[0][0];
        }
    }

    /**
     * Insert a new exploitation
     *
     * @param $data (object): An object containing the data to insert
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertExploitation($data)
    {
        

        return 'not implemented';
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateExternalExploitation($data)
    {
        
        return 'not implemented';
    }

    /**
     * Deletes a exploitation register of the exploitations table
     *
     * @param $exploitationId: Primary key of the desired register
     *
     * @return True if succed, otherwise False
     **/
    public function deleteExploitation($exploitationId)
    {
        $transaction = $this->db->getTransaction();
        $transaction->_beginTransaction();
        
        $sql = 'SELECT enrollId
                  FROM acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $enroll = $this->db->query(SAGU::prepare($sql, $args));
        
        $sql = 'DELETE FROM acdExploitation
                      WHERE exploitationId = ?';
        
        $this->db->execute(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT exploitationId
                  FROM acdExploitation
                 WHERE enrollId = ?';
                 
        $args = array($enroll[0][0]);
        
        if (count($this->db->query(SAGU::prepare($sql, $args))) == 0)
        {
            $sql = 'DELETE FROM acdEnroll
                          WHERE enrollId = ?';
                          
            $this->db->execute(SAGU::prepare($sql, $args));
        }
        
        return $transaction->_commit();
    }
    
    /**
     * Gets a summary of an enroll exploitation data
     *
     * @param $enrollId: Primary key of the desired enroll
     *
     * @return (object): Object with the data
     **/
    public function getEnrollExploitationSummary($enrollId)
    {
        $sql = 'SELECT (C.academicNumberHours+C.practiceHours)
                  FROM acdEnroll A
            INNER JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
                 WHERE A.enrollId = ?';
                 
        $args = array($enrollId);
        
        $result1 = $this->db->query(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT sum(exploitationNumberHours)
                  FROM acdExploitation
                 WHERE enrollId = ?';
                 
        $result2 = $this->db->query(SAGU::prepare($sql, $args));
        
        $exploitationSumm->totalNumberHours     = $result1[0][0];
        $exploitationSumm->exploitedNumberHours = $result2[0][0] > 0 ? $result2[0][0] : 0;
        $exploitationSumm->remainingNumberHours = $exploitationSumm->totalNumberHours - $exploitationSumm->exploitedNumberHours;
        
        return $exploitationSumm;
    }
    
    /**
     * Gets enroll exploitation data
     *
     * @param $enrollId: Primary key of the desired enroll
     *
     * @return (array): Search results
     **/
    public function getEnrollExploitationData($enrollId)
    {
        $sql = 'SELECT A.exploitationId,
                       A.exploitationType,
                       E.name as curricularComponentName,
                       I.name as courseName,
                       CASE WHEN B.groupId IS NOT NULL
                       THEN G.periodId
                       ELSE H.periodId END,
                       A.exploitationNumberHours,
                       CASE WHEN length(B.concept) > 0
                       THEN B.concept
                       ELSE 
                          CASE WHEN B.finalNote IS NOT NULL 
                               THEN ROUND(REPLACE(B.finalNote::varchar, \',\', \'.\')::NUMERIC, \'' . REAL_ROUND_VALUE . '\')::TEXT
                               ELSE ( SELECT ROUND(REPLACE(acdEnroll.finalNote::varchar, \',\', \'.\')::NUMERIC, \'' . REAL_ROUND_VALUE . '\')::TEXT
                                        FROM acdEnroll
                                       WHERE enrollId = A.exploitationEnrollId )
                                END
                       END
                  FROM acdExploitation A
            INNER JOIN acdEnroll B
                    ON (B.enrollId = A.exploitationEnrollId)
            INNER JOIN acdContract C
                    ON (C.contractId = B.contractId)
            INNER JOIN acdCourse I
                    ON (I.courseId = C.courseId)
            INNER JOIN acdCurriculum D
                    ON (D.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = D.curricularComponentId AND
                        E.curricularComponentVersion = D.curricularComponentVersion)
             LEFT JOIN acdGroup F
                    ON (F.groupId = B.groupId)
             LEFT JOIN acdLearningPeriod G
                    ON (G.learningPeriodId = F.learningPeriodId)
             LEFT JOIN acdLearningPeriod H
                    ON (H.learningPeriodId = B.learningPeriodId)
                 WHERE A.enrollId = ?
                   AND A.exploitationType = \'I\'
                 UNION 
                SELECT exploitationId,
                       exploitationType,
                       curricularComponentName,
                       courseName,
                       period,
                       exploitationNumberHours,
                       finalNote::TEXT
                  FROM acdExploitation 
                 WHERE enrollId = ?
                   AND exploitationType = \'E\'';
                 
        $args = array($enrollId, $enrollId);

        return $this->db->query(SAGU::prepare($sql, $args));
    }
}

?>
