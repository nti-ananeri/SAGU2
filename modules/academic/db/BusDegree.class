<?php
/**
 *
 * This file handles the connection and actions for acdDegree table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdDegree table
 **/
class BusinessAcademicBusDegree extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDegree()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $degreeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getDegree($degreeId)
    {
        $sql = 'SELECT A.degreeId,
                       A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.limitDate,\'' . MASK_DATE . '\') AS limitDate,
                       TO_CHAR(A.finalDate,\'' . MASK_DATE . '\') AS finalDate,
                       A.degreeNumber,
                       A.weight,
                       A.concept,
                       A.isSubstitutive,
                       A.maxNote,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdDegree A
                 WHERE A.degreeId = ?';

        $pk = array(
                     $degreeId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $degree = new AcdDegree();

        list ( $degree->degreeId,
               $degree->learningPeriodId,
               $degree->description,
               $degree->limitDate,
               $degree->finalDate,
               $degree->degreeNumber,
               $degree->weight,
               $degree->concept,
               $degree->isSubstitutive,
               $degree->maxNote,
               $degree->userName,
               $degree->dateTime,
               $degree->ipAddress ) = $result[0];

        return $degree; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchDegree($filters)
    {
        $sql = 'SELECT A.degreeId,
                       B.periodId,
                       C.shortName,
                       B.courseVersion,
                       D.description,
                       E.description,
                       A.description,
                       TO_CHAR(A.finalDate,\'' . MASK_DATE . '\') AS finalDate,
                       TO_CHAR(A.limitDate,\'' . MASK_DATE . '\') AS limitDate,
                       A.degreeNumber,
                       A.weight,
                       A.concept,
                       A.isSubstitutive,
                       A.maxNote,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdDegree A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)';

        if ( strlen((string)$filters->degreeId) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $filters->degreeId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->isSubstitutive) > 0 )
        {
            $where .= ' AND A.isSubstitutive = ?';
            $args[] = $filters->isSubstitutive;
        }
        if ( strlen((string)$filters->learningPeriodDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->learningPeriodDescription.'%';
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description.'%';
        }
        if ( strlen((string)$filters->limitDate) > 0 )
        {
            $where .= ' AND A.limitDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->limitDate;
        }
        if ( strlen((string)$filters->finalDate) > 0 )
        {
            $where .= ' AND A.finalDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->finalDate;
        }
        if ( strlen((string)$filters->degreeNumber) > 0 )
        {
            $where .= ' AND A.degreeNumber = ?';
            $args[] = $filters->degreeNumber;
        }
        if ( strlen((string)$filters->concept) > 0 )
        {
            $where .= ' AND A.concept = ?';
            $args[] = $filters->concept;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ?';
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.degreeNumber, 
                            A.description';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }
    
    public function searchDegreeQuality($filters)
    {
        $sql = 'SELECT A.degreeId,
                       B.periodId,
                       C.shortName,
                       B.courseVersion,
                       D.description,
                       E.description,
                       A.description,
                       TO_CHAR(A.finalDate,\'' . MASK_DATE . '\') AS finalDate,
                       TO_CHAR(A.limitDate,\'' . MASK_DATE . '\') AS limitDate,
                       A.degreeNumber,
                       A.weight,
                       A.concept,
                       A.isSubstitutive,
                       A.maxNote,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       (Select min(degreeid) from acdDegree where learningperiodId = A.LearningPeriodId and  degreenumber = a.degreenumber + 1) as degreeNumberQuality 
                  FROM acdDegree A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)  and A.degreenumber % 2 <> 0
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)';

        if ( strlen((string)$filters->degreeId) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $filters->degreeId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->isSubstitutive) > 0 )
        {
            $where .= ' AND A.isSubstitutive = ?';
            $args[] = $filters->isSubstitutive;
        }
        if ( strlen((string)$filters->learningPeriodDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->learningPeriodDescription.'%';
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description.'%';
        }
        if ( strlen((string)$filters->limitDate) > 0 )
        {
            $where .= ' AND A.limitDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->limitDate;
        }
        if ( strlen((string)$filters->finalDate) > 0 )
        {
            $where .= ' AND A.finalDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->finalDate;
        }
        if ( strlen((string)$filters->degreeNumber) > 0 )
        {
            $where .= ' AND A.degreeNumber = ?';
            $args[] = $filters->degreeNumber;
        }
        if ( strlen((string)$filters->concept) > 0 )
        {
            $where .= ' AND A.concept = ?';
            $args[] = $filters->concept;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ?';
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.degreeNumber, 
                            A.description';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDegree($data)
    {
        $sql = 'INSERT INTO acdDegree
                            (learningPeriodId,
                             description,
                             limitDate,
                             finalDate,
                             degreeNumber,
                             weight,
                             concept,
                             maxNote,
                             isSubstitutive)
                     VALUES (?,
                             ?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->learningPeriodId,
                       $data->description,
                       $data->limitDate,
                       $data->finalDate,
                       $data->degreeNumber,
                       $data->weight,
                       $data->concept,
                       $data->maxNote,
                       $data->isSubstitutive
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateDegree($data)
    {
        $sql = 'UPDATE acdDegree
                   SET learningPeriodId = ?,
                       description      = ?,
                       limitDate        = TO_DATE(?,\'' . MASK_DATE . '\'),
                       finalDate        = TO_DATE(?,\'' . MASK_DATE . '\'),
                       degreeNumber     = ?,
                       weight           = ?,
                       concept          = ?,
                       isSubstitutive   = ?,
                       maxNote   = ?
                 WHERE degreeId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->description,
                       $data->limitDate,
                       $data->finalDate,
                       $data->degreeNumber,
                       $data->weight,
                       $data->concept,
                       $data->isSubstitutive,
                       $data->maxNote,
                       $data->degreeId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $degreeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteDegree($degreeId)
    {
        $sql = 'DELETE FROM acdDegree
                      WHERE degreeId = ?';

        $pk = array(
                     $degreeId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    public function getDegreeByPeriodId($periodId)
    {
        $sql = 'SELECT DISTINCT degreeNumber
                           FROM acdDegree
                          WHERE learningPeriodId IN (SELECT learningPeriodId FROM acdLearningPeriod WHERE periodId = ?)
                       ORDER BY 1';

        $pk = array(
                     $periodId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));

        return $result; 
    }

}

?>
