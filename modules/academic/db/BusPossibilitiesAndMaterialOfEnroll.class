<?php
/**
 *
 * This file handles the connection and actions for basCenter table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusPossibilitiesAndMaterialOfEnroll extends Business
{

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCenter()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT centerId,
                       name
                  FROM acdCenter
              ORDER BY name ';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $centerId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
// --Dados necessários no formulário:
// --Período: 2006A
// --Curso: 2810
// --Versão do curso: 1
// --Campus: 1
// --Turno: 6
// --Pessoa: 5181
//
//
// -- Primeira coisa, deve-se pegar o contrato da pessoa:

//     public function otherData()
//     {
//         $MIOLO  = MIOLO::getInstance();
//         $module = MIOLO::getCurrentModule();
//
//         $db  = $this->getDatabase();
//         $sql = 'SELECT centerId,
//                        name
//                   FROM acdCenter
//               ORDER BY name ';
//         $ret = $db->query($sql);
//         //$db->close();
//         return $ret;
//     }

/**-- --
--
-- DISCIPLINAS CURSADAS
--
-- */

    public function personData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = '    SELECT DISTINCT getPhysicalPersonAge ( A.personId ),
                                    A.personId,
                                    A.name,
                                    A.location,
                                    A.complement,
                                    A.neighborhood,
                                    B.cityId,
                                    B.name,
                                    C.courseId,
                                    E.unitId,
                                    F.description,
                                    D.shortName,
                                    A.residentialPhone,
                                    A.workPhone,
                                    A.cellPhone,
                                    A.zipCode,
                                    A.carPlate,
                                    A.email
                          FROM ONLY basPhysicalPerson A
                         INNER JOIN basCity B
                                 ON ( A.cityId = B.cityId )
                         INNER JOIN acdContract C
                                 ON ( A.personId = C.personId )
                         INNER JOIN acdCourse D
                                 ON ( C.courseId = D.courseId )
                         INNER JOIN acdCourseOccurrence E
                                 ON ( E.courseId = D.courseId )
                         INNER JOIN basUnit F
                                 ON ( E.unitId = F.unitId )
                              WHERE C.contractId = ?; ';

        $db  = $this->getDatabase();

        $result = $db->query( SAGU::prepare($sql, $contractId) );

        return $result;
    }

    public function coursedCurricularComponent($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT E.periodId,
                        B.curricularComponentId,
                        B.curricularComponentVersion,
                        B.shortName,
                        CASE WHEN C.exploitationType = \'E\'
                             THEN CASE WHEN C.creditsExploitation > 0
                                       THEN C.creditsExploitation
                                       ELSE B.lessonCredits
                                  END
                             ELSE B.lessonCredits
                        END,
                        CASE WHEN C.exploitationType = \'E\'
                             THEN CASE WHEN C.numberHourExploitation > 0
                                       THEN C.numberHourExploitation
                                       ELSE B.lessonNumberHours
                                  END
                             ELSE B.lessonNumberHours
                        END,
                        round(C.finalNote::numeric, '.REAL_ROUND_VALUE.'),
                        C.statusId,
                        D2.curricularComponentId,
                        D2.curricularComponentVersion,
                        D3.shortName,
                        CASE WHEN D4.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                ELSE CASE WHEN D4.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                    THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                    ELSE NULL
                                END
                        END,
                        CASE WHEN C.exploitationtype = \'E\'
                             THEN \'' . _M('A', $module) . '\'
                             ELSE NULL
                        END,
                        CASE WHEN C.statusId = \'' . ENROLL_STATUS_ENROLLED . '\'
                             THEN \'' . _M('Enrol.', $module) . '\'
                             ELSE NULL
                        END
                   FROM acdCurriculum A
             INNER JOIN acdCurricularComponent B
                     ON ( A.curricularComponentId = B.curricularComponentId
                    AND A.curricularComponentVersion = B.curricularComponentVersion )
             INNER JOIN acdEnroll C
                     ON ( A.curriculumId = C.curriculumId
                    AND C.contractId = ? )
             INNER JOIN acdGroup D
                     ON ( C.groupId = D.groupId )
             INNER JOIN acdCurriculum D2
                     ON ( D.curriculumId = D2.curriculumId )
             INNER JOIN acdCurricularComponent D3
                     ON ( D2.curricularComponentId = D3.curricularComponentId
                    AND D2.curricularComponentVersion = D3.curricularComponentVersion )
             INNER JOIN acdCurriculumType D4
                     ON ( D2.curriculumTypeId = D4.curriculumTypeId )
             INNER JOIN acdLearningPeriod E
                     ON ( D.learningPeriodId = E.learningPeriodId )
                  WHERE A.courseId = ?
                    AND A.courseVersion = ?
                    AND A.turnId = ?
                    AND A.unitId = ?
                    AND A.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.', '. ACD_CURRICULUM_TYPE_PROFICIENCY.', '.ACD_CURRICULUM_TYPE_COMPLEMENT_LESSON_HOUR.')
                    AND C.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED . ',' . EXTERNAL_EXPLOITATION_DEFAULT_ENROLL_STATUS . ',' . ENROLL_STATUS_EXCUSED . ', ' . ENROLL_STATUS_DISAPPROVED . ', ' . ENROLL_STATUS_DISAPPROVED_FOR_LACKS . ')
               ORDER BY E.beginDate ASC,
                        A.semester,
                        B.shortName; ';

        $db  = $this->getDatabase();

        $args = array( $data[0],
                       $data[1],
                       $data[2],
                       $data[3],
                       $data[4] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function lessonHoursComplement($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT E.periodId,
                        B.curricularComponentId,
                        B.curricularComponentVersion,
                        B.shortName,
                        CASE WHEN C.exploitationType = \'E\'
                             THEN C.creditsExploitation
                             ELSE B.lessonCredits
                        END,
                        CASE WHEN C.exploitationType = \'E\'
                             THEN C.numberHourExploitation
                             ELSE B.lessonNumberHours
                        END,
                        round(C.finalNote::numeric, '.REAL_ROUND_VALUE.'),
                        C.statusId,
                        D2.curricularComponentId,
                        D2.curricularComponentVersion,
                        D3.shortName,
                        CASE WHEN D4.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                ELSE CASE WHEN D4.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                    THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                    ELSE NULL
                                END
                        END,
                        CASE WHEN C.exploitationtype = \'E\'
                             THEN \'' . _M('A', $module) . '\'
                             ELSE NULL
                        END,
                        CASE WHEN C.statusId = \'' . ENROLL_STATUS_ENROLLED . '\'
                             THEN \'' . _M('Enrol.', $module) . '\'
                             ELSE NULL
                        END,
                        D3.lessonNumberHours, --B.lessonNumberHours,
                        D3.lessoncredits,--B.lessoncredits,
                        A.courseId,
                        A.courseVersion
                   FROM acdCurriculum A
             INNER JOIN acdCurricularComponent B
                     ON ( A.curricularComponentId = B.curricularComponentId
                    AND A.curricularComponentVersion = B.curricularComponentVersion )
             INNER JOIN acdEnroll C
                     ON ( A.curriculumId = C.curriculumId
                    AND C.contractId = ? )
             INNER JOIN acdGroup D
                     ON ( C.groupId = D.groupId )
             INNER JOIN acdCurriculum D2
                     ON ( D.curriculumId = D2.curriculumId )
             INNER JOIN acdCurricularComponent D3
                     ON ( D2.curricularComponentId = D3.curricularComponentId
                    AND D2.curricularComponentVersion = D3.curricularComponentVersion )
             INNER JOIN acdCurriculumType D4
                     ON ( D2.curriculumTypeId = D4.curriculumTypeId )
             INNER JOIN acdLearningPeriod E
                     ON ( D.learningPeriodId = E.learningPeriodId )
                  WHERE A.courseId = ?
                    AND A.courseVersion = ?
                    AND A.turnId = ?
                    AND A.unitId = ?
                    AND A.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.', '. ACD_CURRICULUM_TYPE_PROFICIENCY.')
                    AND C.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . ENROLL_STATUS_ENROLLED . ',' . EXTERNAL_EXPLOITATION_DEFAULT_ENROLL_STATUS . ',' . ENROLL_STATUS_EXCUSED . ', ' . ENROLL_STATUS_DISAPPROVED . ')
                    AND A.curriculumTypeId IN ('.ACD_CURRICULUM_TYPE_COMPLEMENT_LESSON_HOUR.')
               ORDER BY E.beginDate ASC,
                        A.semester,
                        B.shortName; ';

        $db  = $this->getDatabase();

        $args = array( $data[0],
                       $data[1],
                       $data[2],
                       $data[3],
                       $data[4] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function possibilitiesOfEnroll($dataPos)
    {
       $MIOLO = MIOLO::getInstance();
       $module = MIOLO::getCurrentModule();

       $sql = ' SELECT DISTINCT B.curricularComponentId,
                                B.curricularComponentVersion,
                                C.shortName,
                                B.semester,
                                CASE WHEN D.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                     THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_MINIMUM.'\'
                                     ELSE CASE WHEN D.shortDescription = \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                          THEN \''.ACD_CURRICULUM_TYPE_SHORT_DESCRIPTION_COMPLEMENT.'\'
                                          ELSE NULL
                                     END
                                END,
                                C.academicNumberHours,
                                C.academicCredits,
                                B.curriculumTypeId,
                                B.curriculumId,
                                B.endDate
                           FROM acdCurriculum B
                     INNER JOIN acdCurricularComponent C
                             ON ( B.curricularComponentId = C.curricularComponentId
                            AND B.curricularComponentVersion = C.curricularComponentVersion )
                     INNER JOIN acdCurriculumType D
                             ON ( B.curriculumTypeId = D.curriculumTypeId )
                          WHERE B.courseId = ?
                            AND B.courseVersion = ?
                            AND B.turnId = ?
                            AND B.unitId = ?
                            AND B.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_PROFICIENCY.', '.ACD_CURRICULUM_TYPE_OPTATIVE.')
                            AND B.curriculumId NOT IN
                            (
                                SELECT curriculumId
                                FROM acdEnroll
                                WHERE contractId = ?
                                AND statusId IN (' . ENROLL_STATUS_ENROLLED . ',' . ENROLL_STATUS_APPROVED . ',' . ENROLL_STATUS_EXCUSED . ')
                                AND B.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.')
                            )
                        ORDER BY B.semester,
                                 C.shortName; ';

//                                 AND D.curriculumTypeId NOT IN (' . ENROLL_STATUS_APPR_OR_EXC . ',' . EXTERNAL_EXPLOITATION_DEFAULT_ENROLL_STATUS . ')


/*, ' . ACD_CURRICULUM_TYPE_PROFICIENCY . '*/
        $db  = $this->getDatabase();

        $args = array( $dataPos[1],
                       $dataPos[2],
                       $dataPos[3],
                       $dataPos[4],
                       $dataPos[0]);

        $result = $db->query( SAGU::prepare($sql, $args) );

        if ( count($result) > 0 )
        {
            $businessEnroll = $MIOLO->getBusiness($module, 'BusEnroll');

            $sqlConcurrence = ' SELECT curriculumInId,
                                       curriculumOutId
                                  FROM acdCurriculumConcurrence
                                 WHERE curriculumInId  = ?
                                    OR curriculumOutId = ? ';

            foreach ( $result as $r )
            {
                unset($args);

                $args[] = $r[8];
                $args[] = $r[8];

                $resCon = $db->query(SAGU::prepare($sqlConcurrence, $args));

                $isFreeFromConcurrenceCurriculum = true; // true if is possible to enroll in this curriculum

                if (count($resCon) > 0)
                {
                    foreach ($resCon as $concurrentCurriculum)
                    {
                        $sqlConcurrence2 = 'SELECT enrollId
                                              FROM acdEnroll
                                             WHERE contractId   = ?
                                               AND curriculumId = ?
                                               AND statusId IN ('. ENROLL_STATUS_APPR_OR_EXC . ')';

                        $resApr1 = $db->query(SAGU::prepare($sqlConcurrence2, array($dataPos[0], $concurrentCurriculum[0])));

                        $resApr2 = $db->query(SAGU::prepare($sqlConcurrence2, array($dataPos[0], $concurrentCurriculum[1])));

                        if ( (count($resApr1) > 0) || (count($resApr2) > 0) )
                        {
                            $isFreeFromConcurrenceCurriculum = false;
                        }
                    }
                }

                if ( $isFreeFromConcurrenceCurriculum ) //Possible enroll
                {
                    if ( $businessEnroll->isFreeForEnroll($r[0], $r[1], $dataPos[0], $dataPos[6]) )
                    {
                        if ( !(count($r[9]) > 0) )
                        {
                            //Somente lista as disciplinas que não possuem data de fim - $r[9]
                            $res->possibilitiesOfEnroll[]         = $r;
                        }
                    }
                    else
                    {
                        $res->nonCoursedCurricularComponent[] = $r;
                    }
                }
                else //Impossible enroll
                {
                }
            }

            return $res;
        }

        return $result;

    }
/**-- --
--
-- DISCIPLINAS NAO CURSADAS
--
-- Deve sem exibidas todas as disciplinas que no select anterior tiveram algum pré-requisito e não foram exibidas.
-- Não é nem necessário executar novamente a consulta
--*/

/**-- --
--
-- OUTRAS DISCIPLINAS CURSADAS
--
-- Devem ser exibidas todas as outras disciplinas que o aluno cursou que são de outro contrato
--
--*/

    public function otherCurricularComponent($dataPos)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db  = $this->getDatabase();

        $sql = '    SELECT F.periodId,
                           E.curricularComponentId,
                           E.curricularComponentVersion,
                           E.shortName,
                           CASE WHEN A.statusId = '.ENROLL_STATUS_ENROLLED.'
                                THEN \''._M('Enrol.', $module).'\'
                                ELSE CASE WHEN round(A.finalNote::numeric, '.REAL_ROUND_VALUE.') > 0
                                          THEN round(A.finalNote::numeric, '.REAL_ROUND_VALUE.') :: text
                                          ELSE A.concept :: text
                                      END
                           END,
                           A.statusId,
                           E.lessonCredits,
                           E.lessonNumberHours,
                           AB.curricularComponentId,
                           AB.curricularComponentVersion,
                           B.courseId,
                           F.beginDate,
                           D.semester,
                           CASE WHEN A.exploitationtype = \'E\'
                                THEN \'' . _M('A', $module) . '\'
                                ELSE NULL 
                           END
                      FROM acdEnroll A
                INNER JOIN acdContract B
                        ON (A.contractId = B.contractId)
                INNER JOIN acdGroup C
                        ON (C.groupId = A.groupId)
                INNER JOIN acdCurriculum D
                        ON (D.curriculumId = A.curriculumId)
                INNER JOIN acdCurricularComponent E
                        ON (E.curricularComponentId = D.curricularComponentId)
                INNER JOIN acdLearningPeriod F
                        ON (F.learningPeriodId = C.learningPeriodId)
                INNER JOIN acdCurriculum AA
                        ON (AA.curriculumId = C.curriculumId)
                INNER JOIN acdCurricularComponent AB
                        ON (AB.curricularComponentId = AA.curricularComponentId)
                INNER JOIN acdCourse AC
                        ON (AC.courseId = B.courseId)
                 LEFT JOIN acdComplementaryActivities AD
                        ON (AD.periodId = F.periodId)
                     WHERE B.personId = ?
                        AND D.curriculumId NOT IN (SELECT B.curriculumId
                                                     FROM acdContract A
                                               INNER JOIN acdCurriculum B
                                                       ON (A.courseId = B.courseId AND
                                                           A.courseVersion = B.courseVersion AND
                                                           A.turnId = B.turnId AND
                                                           A.unitId = B.unitId)
                                                     WHERE A.contractId = ?)
                        AND A.dateCancellation IS NULL
                        AND AC.formationLevelId = '.GRADUATION_FORMATION_LEVEL_ID.'
                        AND AD.enrollId <> A.enrollId
                        AND B.contractId NOT IN (SELECT DISTINCT A.contractId
                                                   FROM acdMovementContract A
                                             INNER JOIN acdContract B
                                                     ON (B.contractId = A.contractId)
                                                  WHERE B.personId = ? AND
                                                        A.stateContractId IN ('.STATE_CONTRACT_ID_CONCLUSION_ALL_CURRICULAR_COMPONENT.'))
        UNION
	        SELECT     F.periodId,
                           E.curricularComponentId,
                           E.curricularComponentVersion,
                           E.shortName,
                           CASE WHEN A.statusId = '.ENROLL_STATUS_ENROLLED.'
                                THEN \''._M('Enrol.', $module).'\'
                                ELSE CASE WHEN round(A.finalNote::numeric, '.REAL_ROUND_VALUE.') > 0
                                          THEN round(A.finalNote::numeric, '.REAL_ROUND_VALUE.') :: text
                                          ELSE A.concept :: text
                                      END
                           END,
                           A.statusId,
                           E.lessonCredits,
                           E.lessonNumberHours,
                           AB.curricularComponentId,
                           AB.curricularComponentVersion,
                           B.courseId,
                           F.beginDate,
                           D.semester,
                           CASE WHEN A.exploitationtype = \'E\'
                                THEN \'' . _M('A', $module) . '\'
                                ELSE NULL 
                           END
                  FROM acdEnroll A
            INNER JOIN acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdGroup C
                    ON (C.groupId = A.groupId)
            INNER JOIN acdCurriculum D
                    ON (D.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = D.curricularComponentId)
            INNER JOIN acdLearningPeriod F
                    ON (F.learningPeriodId = C.learningPeriodId)
                INNER JOIN acdCurriculum AA
                        ON (AA.curriculumId = C.curriculumId)
                INNER JOIN acdCurricularComponent AB
                        ON (AB.curricularComponentId = AA.curricularComponentId)
                INNER JOIN acdCourse AC
                        ON (AC.courseId = B.courseId)
                 LEFT JOIN acdComplementaryActivities AD
                        ON (AD.periodId = F.periodId)
                     WHERE B.personId = ?
                       AND D.curriculumId IN (SELECT B.curriculumId
                                                FROM acdContract A
                                          INNER JOIN acdCurriculum B
                                                  ON (A.courseId = B.courseId AND
                                                      A.courseVersion = B.courseVersion AND
                                                      A.turnId = B.turnId AND
                                                      A.unitId = B.unitId)
                                                WHERE A.contractId = ?
                                                  AND B.curriculumTypeId IN ('.ACD_CURRICULUM_TYPE_PROFICIENCY.', '.ACD_CURRICULUM_TYPE_OPTATIVE.'))
                       AND A.dateCancellation IS NULL
                       AND AC.formationLevelId = '.GRADUATION_FORMATION_LEVEL_ID.'
                       AND AD.enrollId <> A.enrollId
                       AND B.contractId NOT IN (SELECT DISTINCT A.contractId
                                                  FROM acdMovementContract A
                                            INNER JOIN acdContract B
                                                    ON (B.contractId = A.contractId)
                                                 WHERE B.personId = ? AND
                                                       A.stateContractId IN ('.STATE_CONTRACT_ID_CONCLUSION_ALL_CURRICULAR_COMPONENT.'))
               ORDER BY 11 ASC,
                        12,
                        3;';

        $args = array( $dataPos[5],
                       $dataPos[0],
                       $dataPos[5],
                       $dataPos[5],
                       $dataPos[0],
                       $dataPos[5]
                     );

        $result1 = $db->query( SAGU::prepare($sql, $args) );

        //Inicio do bloco inutilizado (por Leovan)
        $sqlResult2 = 'SELECT DISTINCT AB.curriculumId ,
                                       D.name
                                  FROM acdEnroll A
                            INNER JOIN acdGroup AB
                                    ON (AB.groupId = A.groupId)
                            INNER JOIN acdContract B
                                    ON (A.contractId = B.contractId)
                            INNER JOIN acdCurriculum C
                                    ON (A.curriculumId = C.curriculumId)
                            INNER JOIN acdCurricularComponent D
                                    ON (D.curricularComponentId = C.curricularComponentId)
                                 WHERE A.contractId = ?
                                   AND C.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.')
                                   AND C.curricularComponentId IN ( SELECT A.curricularComponentId
                                                                      FROM acdCurriculum A
                                                                INNER JOIN acdContract B
                                                                        ON (B.courseId = A.courseId)
                                                                     WHERE B.contractId = ?) 
                              ORDER BY D.name ;';

// AND AB.groupId NOT IN (SELECT B.groupId
//                                                             FROM acdEnroll A
//                                                       INNER JOIN acdGroup B
//                                                               ON (A.groupId = B.groupId)
//                                                            WHERE A.contractId = ?)


        $argsResult2 = array ($dataPos[0], $dataPos[0]);

        $result2 = $db->query( SAGU::prepare($sqlResult2, $argsResult2) );

        if ( is_array($result2) )
        {
            foreach ( $result2 as $curriculumId ) 
            {
                $sqlResult3 = 'SELECT F.periodId,
                                    D.curricularComponentId,
                                    D.curricularComponentVersion,
                                    D.shortName,
                                    round(A.finalNote::numeric, '.REAL_ROUND_VALUE.'),
                                    A.statusId,
                                    D.lessonCredits,
                                    D.lessonNumberHours,
                                    AB.curricularComponentId,
                                    AB.curricularComponentVersion,
                                    E.courseId,
                                    F.beginDate,
                                    C.semester
                                FROM acdEnroll A
                        INNER JOIN acdGroup B
                                ON (A.groupId = B.groupId)
                        INNER JOIN acdCurriculum C
                                ON (B.curriculumId = C.curriculumId)
                        INNER JOIN acdCurricularComponent D
                                ON (D.curricularComponentId = C.curricularComponentId)
                        INNER JOIN acdContract E
                                ON (E.contractId = A.contractId)
                        INNER JOIN acdLearningPeriod F
                                ON (F.learningPeriodId = B.learningPeriodId)
                        INNER JOIN acdCurriculum AA
                                ON (AA.curriculumId = A.curriculumId)
                        INNER JOIN acdCurricularComponent AB
                                ON (AB.curricularComponentId = AA.curricularComponentId)
                        INNER JOIN acdCourse AC
                                ON (AC.courseId = E.courseId)
                                WHERE E.personId = ?
                                AND A.dateCancellation IS NULL
                                AND B.curriculumId = ? 
                                AND D.academicNumberHours <> (SELECT DISTINCT D.academicNumberHours
                                                            FROM acdEnroll A
                                                        INNER JOIN acdCurriculum C
                                                                ON (A.curriculumId = C.curriculumId)
                                                        INNER JOIN acdCurricularComponent D
                                                                ON (D.curricularComponentId = C.curricularComponentId)
                                                        INNER JOIN acdContract E
                                                                ON (E.contractId = A.contractId)
                                                            WHERE E.personId = ? AND
                                                                C.curriculumId = ? AND
                                                                A.dateCancellation IS NULL)
                                AND AC.formationLevelId = '.GRADUATION_FORMATION_LEVEL_ID.'
                           ORDER BY F.beginDate ASC,
                                    C.semester,
                                    D.shortName;';
    // AND Q2.formationLevelId IN (' . GRADUATION_FORMATION_LEVEL_ID . ')
    
                unset($args3);
    
                $args3 = array( $dataPos[5],
                                $curriculumId[0],
                                $dataPos[5],
                                $curriculumId[0]);
    
                $result3 = $db->query( SAGU::prepare($sqlResult3, $args3) );
    
                if ( is_array($result3) )
                {
                    $result4[] = $result3[0];
                }
    
            }
        }

        if ( is_array($result4) && is_array($result1) )
        {
            $result4 = array_merge($result4, $result1);
        }
        elseif ( is_array($result1) )
        {
            $result4 = $result1;
        }
        //Fim do bloco inutilizado

        if ( is_array($result1) && ( count($result1) > 0 ) )
        {
            asort($result1);
        }

        return $result1; //ou return = $result4, para utilizar o resultado do foreach


//         $sql = ' SELECT E.periodId,
//                         C.curricularComponentId,
//                         C.curricularComponentVersion,
//                         C.shortName,
//                         A.finalNote,
//                         A.statusId,
//                         C.lessonCredits,
//                         C.lessonnumberhours,
//                         D2.curricularComponentId,
//                         D2.curricularComponentVersion,
//                         B.courseId,
//                         E.beginDate as beginDate,
//                         B.semester as semester
//                    FROM acdEnroll A
//              INNER JOIN acdCurriculum B
//                      ON ( A.curriculumId = B.curriculumId )
//              INNER JOIN acdCurricularComponent C
//                      ON ( B.curricularComponentId = C.curricularComponentId
//                     AND B.curricularComponentVersion = C.curricularComponentVersion )
//              INNER JOIN acdGroup D
//                      ON ( A.groupId = D.groupId )
//              INNER JOIN acdCurriculum D2
//                      ON ( D.curriculumId = D2.curriculumId )
//              INNER JOIN acdCurricularComponent D3
//                      ON ( D2.curricularComponentId = D3.curricularComponentId
//                     AND D2.curricularComponentVersion = D3.curricularComponentVersion )
//              INNER JOIN acdLearningPeriod E
//                      ON ( D.learningPeriodId = E.learningPeriodId )
//              INNER JOIN acdContract CC
//                      ON (CC.contractId = A.contractId)
//              INNER JOIN acdCourse CD
//                      ON (CD.courseId = CC.courseId)
//                   WHERE CC.personId = ?
//                    AND A.dateCancellation IS NULL
//                    AND A.contractId NOT IN (SELECT contractId
//                                               FROM acdContract
//                                              WHERE personId = ?
//                                                AND conclusionDate IS NOT NULL)
//                    AND ( (D.curriculumId NOT IN (SELECT A.curriculumId
//                                                     FROM acdCurriculum A
//                                               INNER JOIN acdContract B
//                                                       ON (A.courseId      = B.courseId AND
//                                                           A.courseVersion = B.courseVersion AND
//                                                           A.turnId        = B.turnId AND
//                                                           A.unitId        = B.unitId)
//                                                    WHERE B.contractId = ?
//                                                      AND (A.endDate IS NULL)
//                                                      AND  A.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_PROFICIENCY.', '.ACD_CURRICULUM_TYPE_OPTATIVE.') ))
//                                          OR (CC.courseId <> (SELECT courseId 
//                                                                FROM acdContract
//                                                               WHERE contractId = ? )) )
//                    AND CD.formationLevelId = '.GRADUATION_FORMATION_LEVEL_ID.';';

 //OR (CC.courseId <> ?)
//                    AND A.statusId IN (' . ENROLL_STATUS_APPROVED . ',' . ENROLL_STATUS_EXCUSED . ',' . ENROLL_STATUS_DISAPPROVED . ',' . ENROLL_STATUS_DISAPPROVED_FOR_LACKS . ')
//                    AND B.curriculumTypeId = 7; ';





        //return $result;

    }

    public function complementaryActivities ($dataPos)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT E.periodId,
                        C.curricularComponentId,
                        C.curricularComponentVersion,
                        C.shortName,
                        A.finalNote,
                        A.statusId,
                        D2.curricularComponentId,
                        D2.curricularComponentVersion,
                        F.description,
                        CASE WHEN round(F.degree::numeric, '.REAL_ROUND_VALUE.') > 0
                             THEN round(F.degree::numeric, 2)::text
                             ELSE F.concept
                        END,
                        F.totalHours,
                        F.totalCredits,
                        F.concept,
                        E.courseId
                   FROM acdEnroll A
             INNER JOIN acdCurriculum B
                     ON ( A.curriculumId = B.curriculumId )
             INNER JOIN acdCurricularComponent C
                     ON ( B.curricularComponentId = C.curricularComponentId
                    AND B.curricularComponentVersion = C.curricularComponentVersion )
             INNER JOIN acdGroup D
                     ON ( A.groupId = D.groupId )
             INNER JOIN acdCurriculum D2
                     ON ( D.curriculumId = D2.curriculumId )
             INNER JOIN acdCurricularComponent D3
                     ON ( D2.curricularComponentId = D3.curricularComponentId
                    AND D2.curricularComponentVersion = D3.curricularComponentVersion )
             INNER JOIN acdLearningPeriod E
                     ON ( D.learningPeriodId = E.learningPeriodId )
             INNER JOIN acdComplementaryActivities F
                     ON (F.enrollId = A.enrollId)
                  WHERE A.contractId = ?
                    AND A.statusId IN (' . ENROLL_STATUS_ENROLLED . ',' . ENROLL_STATUS_APPROVED . ',' . ENROLL_STATUS_EXCUSED . ')
                    AND B.curriculumTypeId IN (' . ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY . ')
               ORDER BY E.beginDate ASC,
                        B.semester,
                        C.shortName; ';

        $db  = $this->getDatabase();

        $args = array( $dataPos[0] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function hangingDocuments ($dataPos)
    {
        $MIOLO = MIOLO::getInstance();

        $businessDocument = $MIOLO->getBusiness('basic', 'BusDocument');
        $res = $businessDocument->checkMissingDocuments($dataPos[5], $dataPos[0]);

        if ( count($res) > 0 )
        {
            foreach ( $res as $k => $v )
            {
                $result[] = array ( $k,
                                    $v->documentName );
            }
        }

        return $result;
    }

    public function responsableLegal($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

		$sql = '    SELECT A.responsableLegalId,
		                   getPersonName(A.responsableLegalId)
		         FROM ONLY basPhysicalPerson A
		        INNER JOIN acdContract B
		                ON ( A.personId = B.personId )
		             WHERE B.contractId = ?';

        $db  = $this->getDatabase();

        $args = array( $data[0] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function footerMessages ($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT A.message,
                        A.font,
                        B.periodId,
                        C.value::numeric, 3
                   FROM acdMessageContractRenewal A
             INNER JOIN acdLearningPeriod B
                     ON ( A.learningPeriodId = B.learningPeriodId )
             INNER JOIN finPrice C
                     ON ( A.learningPeriodId = C.learningPeriodId )
                  WHERE A.status           = ?
                    AND A.learningPeriodId = ?
                    AND A.isListener       = ?
               ORDER BY A.sequence;' ;

        $db = $this->getDatabase();

        $args = array ( $data[7],
                        $data[6],
                        $data[8] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;

    }

    public function unitCity ($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = '    SELECT DISTINCT A.responsableLegalId,
                                    B.name
                          FROM ONLY basPhysicalPerson A
                         INNER JOIN basPerson B
                                 ON ( A.personId = B.personId )
                         INNER JOIN acdContract C
                                 ON ( A.personId = C.personId )
                         INNER JOIN basCompanyConf
                              WHERE C.contractId = ?; ';

        $db  = $this->getDatabase();

        $args = array( $data[0] );

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function allReports ($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT A.contractId,
                        A.courseId,
                        A.courseVersion,
                        B.name,
                        A.turnId,
                        C.description as turnDescription,
                        A.unitId,
                        D.description as unitDescription,
                        A.personId,
                        E.name
                   FROM acdContract A
             INNER JOIN acdCourse B
                     ON ( A.courseId = B.courseId )
             INNER JOIN basTurn C
                     ON ( A.turnId = C.turnId )
             INNER JOIN basUnit D
                     ON ( A.unitId = D.unitId )
        INNER JOIN ONLY basPerson E
                     ON (A.personId = E.personId)
             INNER JOIN acdLearningPeriod F
                     ON ( A.unitId = F.unitId )
             INNER JOIN acdMessageContractRenewal G
                     ON ( F.learningPeriodId = G.learningPeriodId )
                  WHERE A.contractId    >  ?
                    AND A.courseId         = ?
                    AND G.status           = ?
                    AND G.learningPeriodId = ?
                    AND G.isListener       = ?
               GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, E.name
               ORDER BY E.name, 3, 4; ';

        $db  = $this->getDatabase();

        $args = array ( $data[0], // contract
                        $data[1], // courseId
                        $data[7], // status
                        $data[6], // learningPer
                        $data[8] ); //isLis

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }


    public function selectPeople($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = '  SELECT A.personId
               FROM ONLY basPhysicalPerson A
              INNER JOIN acdContract B
                      ON ( A.personId = B.personId )
                   WHERE B.courseId      = ?
                     AND B.courseVersion = ?
                     AND B.turnId        = ?
                     AND B.unitId        = ? ;' ;

        $db = $this->getDatabase();

        $args = array( $data[1],
                       $data[2],
                       $data[3],
                       $data[4]
                     );

        $result = $db->query( SAGU::prepare($sql, $args) );

//         $contractFromSelect = $result;

        return $result;
    }

    public function selectContract($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT DISTINCT A.contractId,
                                 A.isListener,
                                 B.personId,
                                 B.name
                            FROM acdContract A
                 INNER JOIN ONLY basPhysicalPerson B
                              ON ( A.personId = B.personId ),
                                 acdMessageContractRenewal G
                           WHERE A.courseId         = ?
                             AND A.courseVersion    = ?
                             AND A.turnId           = ?
                             AND A.unitId           = ?';
        if ( $data[7] != 'I' )
        {
            $sql .= '        AND G.status           = ?';
        }
        $sql .= '            AND G.learningPeriodId = ?
                             AND A.isListener       = G.isListener
                             AND isContractOut(A.contractId) = \''.DB_FALSE.'\'
                        ORDER BY B.name ASC ; ' ;

        $db = $this->getDatabase();

        if ( $data[7] != 'I' )
        {
            $args = array( 
                           $data[1],
                           $data[2],
                           $data[3],
                           $data[4],
                           $data[7],
                           $data[6]
                         );
        }
        else
        {
            $args = array( 
                           $data[1],
                           $data[2],
                           $data[3],
                           $data[4],
                           $data[6]
                         );
        }

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function getOtherCourseFormated($currenctContractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = '  SELECT XA.contractId,
                         BC.shortName as courseName,
                         BD.description as turnDescription,
                         BE.description as unitDescription
                    FROM ( SELECT A.contractId,
                                  max(A.stateTime) as stateTime
                             FROM acdMovementContract A
                       INNER JOIN acdContract B
                               ON (A.contractId = B.contractId)
                            WHERE B.personId = ( SELECT AA.personId
                                                   FROM acdContract AA
                                                  WHERE AA.contractId = '.$currenctContractId.')
                                                    AND B.courseId || B.courseVersion || B.turnId || B.unitId <> ( SELECT AB.courseId || AB.courseVersion || AB.turnId || AB.unitId
                                                                       FROM acdContract AB
                                                                      WHERE AB.contractId = '.$currenctContractId.' )
                         GROUP BY A.contractId ) as XA
              INNER JOIN acdMovementContract BA
                      ON (BA.contractId = XA.contractId AND
                          BA.stateTime  = XA.stateTime)
              INNER JOIN acdContract BB
                      ON (BB.contractId = XA.contractId)
              INNER JOIN acdCourse BC
                      ON (BC.courseId = BB.courseId)
              INNER JOIN basTurn BD
                      ON (BD.turnId = BB.turnId)
              INNER JOIN basUnit BE
                      ON (BE.unitId = BB.unitId)
                   WHERE BA.stateContractId = '.STATE_CONTRACT_ID_CONCLUSION_ALL_CURRICULAR_COMPONENT.' ';

            if ( strlen((string)ACD_FORMATION_LEVEL_TO_FORMATION_COURSE) > 0 )
            {
                $sql .= 'AND BC.formationLevelId IN ( '.ACD_FORMATION_LEVEL_TO_FORMATION_COURSE.' ) ';
            }

        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

}
?>
