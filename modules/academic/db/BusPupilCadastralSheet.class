<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 22/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
class BusinessAcademicBusPupilCadastralSheet  extends Business
{
    public $db;

    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function __construct()
    {
        parent::__construct();
        $this->db = $this->getDatabase();
    }
    
    public function getHeaderContract($data)
    {
        $sql = 'SELECT DISTINCT
                    B.personId as personId,
                    B.name as personName,
                    TO_CHAR(B.dateBirth, ?),
                    CASE WHEN UPPER(B.sex) = \'M\' THEN \'MALE\' ELSE \'FEMALE\' END as sex,
                    ( COALESCE ( K.name, \'\') || \' - \' || COALESCE (L.name, \'\')) as naturalness,
                    M.nationality,
                    P.description as maritalDescription,
                    C.name as fatherName,
                    D.name as motherName,
                    B.location,
                    B.number,
                    B.zipcode,
                    B.complement,
                    B.neighborhood,
                    Q.name as city,
                    R.name as state,
                    B.email,
                    B.residentialPhone,
                    B.cellPhone,
                    B.workName,
                    B.locationWork,
                    B.neighborhoodWork,
                    B.complementWork,
                    S.name as workCity,
                    T.name as workState,
                    B.workPhone,
                    O.content as cpf,
                    G.content as identidade,
                    TO_CHAR(G.dateexpedition, ?) as dataExpedicaoIdentidade,
                    G.organ as orgaoIdentidade,
                    W.stateId as ufOrganIdentidade,
                    H.content as reservista,
                    TO_CHAR(H.dateexpedition, ?) as dataExpedicaoReservista,
                    H.organ as orgaoReservista,
                    I.content as tituloEleitor,
                    TO_CHAR(I.dateexpedition,?) as dataExpedicaoTitulo,
                    I.organ as organTitulo,
                    Z.stateId as ufTituloEleitor,
                    F.name as tipoEnsinoReferencia,
                    E.name as estabelecimento,
                    B.yearHs::varchar as anoConclusao,
                    N.name as cidadeEstabelecimento,
                    N.stateId as estadoEstabelecimento,
                    U.name as nomeFiador,
                    V.content as rgFiador,
                    A2.stateId as ufRgFiador,
                    X.content as cpfFiador,
                    U.location as enderecoFiador,
                    U.neighborhood as bairroFiador,
                    Y.name as cidadeFiador,
                    Y.stateId as estadoFiador,
                    U.residentialPhone as telefoneFiador,
                    U.cellPhone as celularFiador,
                    U.zipcode as cepFiador,
                    U.email as emailFiador,
                    U.number,
                    V.organ as organEmissorRgFiador,
                    TO_CHAR(V.dateexpedition,?) as dataExpedicaoRgFiador,
                    U.complement as complementoEnderecoFiador,
                    CASE WHEN UPPER(U.sex) = \'M\' THEN \'MALE\' ELSE \'FEMALE\' END as sexFiador,
                    ( COALESCE ( D2.name, \'\') || \' - \' || COALESCE (E2.name, \'\')) as naturalnessFiador,
                    F2.nationality as nationalityFiador,
                    TO_CHAR(U.dateBirth,?) as birthDateFiador,
                    C2.description,
                    H2.periodId,
                    G2.totalPoints,
                    ( SELECT acdStateContract.description FROM acdMovementContract INNER JOIN acdStateContract USING (stateContractId) WHERE contractId = A.contractId order by stateTime DESC LIMIT 1) as formaDeIngresso,
                    getCourseName(A.courseId) as courseName,
                    A.contractId,
                    B.sex as sexCharId,
                    extract(year from age(B.dateBirth)) as age,
                    getTurnDescription ( A.turnId ) as turnDescription,
                    J2.name as className
                FROM
                    acdContract A INNER JOIN
                    ONLY basPhysicalPersonStudent B ON ( A.personId = B.personId ) LEFT JOIN
                    ONLY basPerson C ON ( C.personId = B.fatherId ) LEFT JOIN
                    ONLY basPerson D ON ( D.personId = B.motherId ) LEFT JOIN
                    ONLY basLegalPerson E ON ( E.personId = B.institutionidhs ) LEFT JOIN
                    acdExternalCourse F ON ( F.externalcourseid = B.externalcourseidhs ) LEFT JOIN
                    basDocument G ON ( G.personId = B.personId AND G.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument H ON ( H.personId = B.personId AND H.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument I ON ( I.personId = B.personId AND I.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument O ON ( O.personId = B.personId AND O.documentTypeId = ?::integer ) LEFT JOIN
                    acdCourseVersion J ON ( J.courseId = A.courseId AND J.courseVersion = A.courseVersion ) LEFT JOIN
                    basCity K ON ( K.cityId = B.cityIdBirth ) LEFT JOIN
                    basState L ON ( L.stateId = K.stateId ) LEFT JOIN
                    basCountry M ON ( M.countryId = L.countryId ) LEFT JOIN
                    basCity N ON ( N.cityId = E.cityId ) LEFT JOIN
                    basMaritalStatus P ON ( P.maritalStatusId = B.maritalStatusId ) LEFT JOIN
                    basCity Q ON ( Q.cityId = B.cityId ) LEFT JOIN
                    basState R ON ( R.stateId = Q.stateId ) LEFT JOIN
                    basCity S ON ( S.cityId = B.cityIdWork ) LEFT JOIN
                    basState T ON ( T.stateId = S.stateId ) LEFT JOIN
                    ONLY basPhysicalPerson U ON ( U.personId = CASE WHEN B.responsableLegalId IS NULL THEN B.personId ELSE B.responsableLegalId END ) LEFT JOIN
                    basDocument V ON ( V.personId = U.personId AND V.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument X ON ( X.personId = U.personId AND X.documentTypeId = ?::integer ) LEFT JOIN
                    basCity Y ON ( Y.cityId = U.cityId ) LEFT JOIN
                    basCity W ON ( W.cityId = G.cityId ) LEFT JOIN
                    basCity Z ON ( Z.cityId = I.cityId ) LEFT JOIN
                    basCity A2 ON ( A2.cityId = V.cityId ) LEFT JOIN
                    basCity B2 ON ( B2.cityId = B.cityId ) LEFT JOIN
                    basMaritalStatus C2 ON ( C2.maritalStatusId = U.maritalStatusId ) LEFT JOIN
                    basCity D2 ON ( D2.cityId = U.cityIdBirth ) LEFT JOIN 
                    basState E2 ON ( E2.stateId = D2.stateId ) LEFT JOIN
                    basCountry F2 ON ( F2.countryId = E2.countryId ) LEFT JOIN
                    sprInscription G2 ON ( G2.inscriptionid = A.inscriptionselectiveprocid) LEFT JOIN
                    sprSelectiveProcess H2 ON ( H2.selectiveProcessId = G2.selectiveProcessId ) LEFT JOIN
                    acdclasspupil I2 on I2.contractId = A.contractId and I2.enddate is null LEFT JOIN
                    acdclass J2 on J2.classId = I2.classId 
                WHERE
                    1 = 1 ';
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_RG;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_MILITAR_SERVICE;
        $args[] = ELECTORAL_TITLE_CODE;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_CPF;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_RG;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_CPF;

        if ( strlen((string)$data->contractId) ) 
        {
            $sql .= ' AND A.contractId = ?::integer';
            $args[] = $data->contractId;
        }
        if ( count($data) > 0 )
        {
            $result = $this->db->query(SAGU::prepare($sql, $args));
            foreach ( $result as $resultado )
            {
                $obj->personalData->personId    = $resultado[0];
                $obj->personalData->name        = $resultado[1];
                $obj->personalData->birthDate   = $resultado[2];
                $obj->personalData->sex         = $resultado[3];
                $obj->personalData->naturalness = $resultado[4];
                $obj->personalData->nationality = $resultado[5];
                $obj->personalData->marital     = $resultado[6];
                $obj->personalData->fatherName  = $resultado[7];
                $obj->personalData->motherName  = $resultado[8];
                $obj->personalData->location    = $resultado[9];
                $obj->personalData->number      = $resultado[10];
                $obj->personalData->zipcode     = $resultado[11];
                $obj->personalData->complement  = $resultado[12];
                $obj->personalData->neighborhood= $resultado[13];
                $obj->personalData->city        = $resultado[14];
                $obj->personalData->state       = $resultado[15];
                $obj->personalData->email       = $resultado[16];
                $obj->personalData->phone       = $resultado[17];
                $obj->personalData->cellphone   = $resultado[18];
                $obj->personalData->courseName  = $resultado[67];
                $obj->personalData->contractId  = $resultado[68];
                $obj->personalData->sexCharId   = $resultado[69];
                $obj->personalData->age         = $resultado[70];
                $obj->workData->name            = $resultado[19];
                $obj->workData->location        = $resultado[20];
                $obj->workData->neighborhood    = $resultado[21];
                $obj->workData->complement      = $resultado[22];
                $obj->workData->city            = $resultado[23];
                $obj->workData->state           = $resultado[24];
                $obj->workData->phone           = $resultado[25];
                $obj->documents->cpf->content   = $resultado[26];
                $obj->documents->rg->content    = $resultado[27];
                $obj->documents->rg->date       = $resultado[28];
                $obj->documents->rg->organ      = $resultado[29];
                $obj->documents->rg->uf         = $resultado[30];
                $obj->documents->military->content    = $resultado[31];
                $obj->documents->military->date       = $resultado[32];
                $obj->documents->military->organ      = $resultado[33];
                $obj->documents->electoral->content    = $resultado[34];
                $obj->documents->electoral->date       = $resultado[35];
                $obj->documents->electoral->organ      = $resultado[36];
                $obj->documents->electoral->uf         = $resultado[37];
                $obj->schoolData->courseType        = $resultado[38];
                $obj->schoolData->school            = $resultado[39];
                $obj->schoolData->conclusionYear    = $resultado[40];
                $obj->schoolData->city              = $resultado[41];
                $obj->schoolData->uf                = $resultado[42]; 
                $obj->responsableData->name         = $resultado[43];
                $obj->responsableData->rg           = $resultado[44];
                $obj->responsableData->rgUf         = $resultado[45];
                $obj->responsableData->rgDate       = $resultado[57];
                $obj->responsableData->rgOrgan      = $resultado[56];
                $obj->responsableData->cpf          = $resultado[46];
                $obj->responsableData->location     = $resultado[47];
                $obj->responsableData->neighborhood = $resultado[48];
                $obj->responsableData->city         = $resultado[49];
                $obj->responsableData->uf           = $resultado[50];
                $obj->responsableData->phone        = $resultado[51];
                $obj->responsableData->cellphone    = $resultado[52];
                $obj->responsableData->zipcode      = $resultado[53];
                $obj->responsableData->email        = $resultado[54];
                $obj->responsableData->number       = $resultado[55];
                $obj->responsableData->complement   = $resultado[58];
                $obj->responsableData->sex          = $resultado[59];
                $obj->responsableData->naturalness  = $resultado[60];
                $obj->responsableData->nationality  = $resultado[61];
                $obj->responsableData->birthDate    = $resultado[62];
                $obj->responsableData->marital      = $resultado[63];
                $obj->selectiveProcess->periodId    = $resultado[64];
                $obj->selectiveProcess->totalPoins  = $resultado[65];
                $obj->selectiveProcess->ingressionForm  = $resultado[66];
                $obj->personalData->turnDescription = $resultado[71];
                $obj->personalData->className = $resultado[72];
                $result2[] = $obj;
                unset($obj);
            }
            return $result2;
        }
    }
    
    public function getClassPupils($data)
    {
        $sql = 'SELECT 
                        B.contractId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        C.personId,
                        C.name as personName,
                        getTurnDescription(B.turnId) as turnDescription,
                        getUnitDescription(B.unitId) as unitDescription,
                        getCourseName(B.courseId) as courseName
                FROM 
                    acdClassPupil A INNER JOIN 
                    acdContract B ON ( A.contractId = B.contractId ) INNER JOIN
                    ONLY basPhysicalPersonStudent C ON ( B.personId = C.personId )';
        $where = '';
        if ( $data->isActive == DB_TRUE )
        {
            $where .= '    AND NOT isContractOut(B.contractId)';
        }

        if ( strlen((string)$data->classId) > 0 )
        {
            $where .= '    AND A.classId = ? ';
            $args[] = $data->classId;
        }

        if( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND B.courseId = ?';
            $args[] = $data->courseId;
        }

        if( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND B.courseVersion = ?::integer';
            $args[] = $data->courseVersion;
        }

        if( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND B.unitId = ?::integer';
            $args[] = $data->unitId;
        }

        if( strlen((string)$data->turnId) > 0 )
        {
            $where .= '    AND B.turnId = ?::integer';
            $args[] = $data->turnId;
        }
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE '. substr($where,8);
            $sql .= ' ORDER BY C.name';
            $result = $this->db->query(SAGU::prepare($sql, $args));
        }
        foreach ( $result as $resultado )
        {
                        /*B.contractId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        C.personId,
                        C.name as personName,
                        getTurnDescription(B.turnId) as turnDescription,
                        getUnitDescription(B.unitId) as unitDescription,
                        getCourseName(B.courseId) as courseName*/
            $obj->contractId    = $resultado[0];
            $obj->courseId      = $resultado[1];
            $obj->courseVersion = $resultado[2];
            $obj->turnId        = $resultado[3];
            $obj->unitId        = $resultado[4];
            $obj->personId      = $resultado[5];
            $obj->personName    = $resultado[6];
            $obj->turnDescription = $resultado[7];
            $obj->unitDescription = $resultado[8];
            $obj->courseName    = $resultado[9];
            $result2[] = $obj;
            unset($obj);
        }
        return $result2;
    }

    public function getUnitContract($data){
    	
    	$sql = 'SELECT A.unitid 
    	          FROM acdcontract A
    	         WHERE A.contractid = ? ';    	
    	
        $result = $this->db->query(SAGU::prepare($sql, $data));
        
        return $result[0][0];
    	
    }
}
?>
