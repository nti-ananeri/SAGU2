<?php

/**
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseOccurrence table.
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @since
 * This class was created 2004/03/05
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 */

class BusinessAcademicBusCourseOccurrence extends Business
{

    /**
     * Creates a connection with the specified database. 
     * If no database is specified, assume the current module name.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $dbname (string): Specifies the database name to which we want to connect.
     *
     * @return (object): A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Obtain the specified courseOccurrence id data.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the course to be retrieved.
     * @param $courseVersion (int): Identifier of the course to be retrieved.
     * @param $turnId (int): Identifier of the course to be retrieved.
     * @param $unitId (int): Identifier of the course to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (courseOccurrence) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCourseOccurrence($courseId, $courseVersion, $turnId, $unitId)
    {

        $select = 'SELECT A.courseId,
                          C.shortName,
                          A.courseVersion,
                          A.turnId,
                          D.description,
                          A.unitId,
                          E.description,
                          TO_CHAR(A.authorizationDate,\'' . MASK_DATE . '\'),
                          A.status,
                          A.minimumConclusionCourse,
                          A.maximumConclusionCourse,
                          A.authorizationDocument,
                          A.maximumDependent,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                          A.ipAddress,
                          A.policyId,
                          A.policyIdForEnroll,
                          A.policyIdForReEnroll
                     FROM acdCourseOccurrence A
                LEFT JOIN acdCourseVersion B
                       ON (A.courseId = B.courseId 
                      AND  A.courseVersion = B.courseVersion)
                LEFT JOIN acdCourse C
                       ON (A.courseId = C.courseId 
                      AND  B.courseId = C.courseId)
                LEFT JOIN basTurn D
                       ON (A.turnId = D.turnId)
                LEFT JOIN basUnit E
                       ON (A.unitId = E.unitId)
                    WHERE A.courseId      = ?
                      AND A.courseVersion = ?
                      AND A.turnId        = ?
                      AND A.unitId        = ?';

        $args   = array($courseId,
                        $courseVersion,
                        $turnId,
                        $unitId);

        $db     = $this->getDatabase();
        $result = $db->Query(SAGU::Prepare($select,$args));

        //$db->Close();

        $course = new acdCourseOccurrence();

        list ( $course->courseId,
               $course->course,
               $course->courseVersion,
               $course->turnId,
               $course->turn,
               $course->unitId,
               $course->unit,
               $course->authorizationDate,
               $course->status,
               $course->minimumConclusionCourse,
               $course->maximumConclusionCourse,
               $course->authorizationDocument,
               $course->maximumDependent,
               $course->userName,
               $course->dateTime,
               $course->ipAddress,
               $course->policyId,
               $course->policyIdForEnroll,
               $course->policyIdForReEnroll ) = $result[0];

        return $course; 
    }

    /**
     * Search for course Occurrences.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param &$range Object containing the listing bounds. Used by the PageNavigator component.
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCourseOccurrence($data=null)
    {
        $select = 'SELECT A.courseId,
                          C.shortName,
                          A.courseVersion,
                          A.turnId,
                          D.description,
                          A.unitId,
                          E.description,
                          TO_CHAR(A.authorizationDate,\'' . MASK_DATE . '\'),
                          A.status,
                          A.minimumConclusionCourse,
                          A.maximumConclusionCourse,
                          A.authorizationDocument,
                          A.maximumDependent
                     FROM acdCourseOccurrence A
                LEFT JOIN acdCourseVersion B
                       ON (A.courseId = B.courseId 
                      AND  A.courseVersion = B.courseVersion)
                LEFT JOIN acdCourse C
                       ON (A.courseId = C.courseId 
                      AND  B.courseId = C.courseId)
                LEFT JOIN basTurn D
                       ON (A.turnId = D.turnId)
                LEFT JOIN basUnit E
                       ON (A.unitId = E.unitId)';

        $where  = '';
        unset($args);
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen((string)$data->turnId) > 0 )
        {
            $where .= '    AND   A.turnId = ?';
            $args[] = $data->turnId;
        }
        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND   A.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen((string)$data->courseOccurrenceId) > 0 )
        {
            $where .= '    AND   A.courseOccurrenceId = ?';
            $args[] = $data->courseOccurrenceId;
        }
        if ( strlen((string)$data->courseName) > 0 )
        {
            $where .= '    AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $data->courseName . '%';
        }


        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY C.name,
                                  A.courseId,
                                  A.courseVersion,
                                  A.turnId,
                                  A.unitId';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($select,$args));
            //$db->Close();
        }

        return $result;
    }

    /**
     * List all courseOccurrencess.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @return an array containing the select results.
     *
     */
    function listCourseOccurrence()
    {

        $select = 'SELECT A.courseId,
                          A.courseVersion,
                          A.turnId,
                          A.unitId,
                          TO_CHAR(A.authorizationDate,\'' . MASK_DATE . '\'),
                          A.status,
                          A.minimumConclusionCourse,
                          A.maximumConclusionCourse,
                          A.authorizationDocument,
                          A.maximumDependent,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                          A.ipAddress
                     FROM acdCourseOccurrence A
                 ORDER BY A.courseId,
                          A.courseVersion,
                          A.turnId,
                          A.unitId';

        $db     = $this->getDatabase();
        $result = $db->Query(SAGU::Prepare($select,$args));
        $db->Close();

        return $result;
    }

    /**
     * Insert a new acdCourseOccurrence.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $data (object): Object (course) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCourseOccurrence($data)
    {

        $db = $this->getDatabase();

        if ( isset($data->courseId) && isset($data->courseVersion) && isset($data->unitId) && isset($data->turnId) )
        {
            $insert = 'INSERT INTO acdCourseOccurrence
                                  ( courseId,
                                    courseVersion,
                                    turnId,
                                    unitId,
                                    authorizationDate,
                                    status,
                                    minimumConclusionCourse,
                                    maximumConclusionCourse,
                                    authorizationDocument,
                                    maximumDependent,
                                    policyId,
                                    policyIdForEnroll,
                                    policyIdForReEnroll )
                                    VALUES (?,?,?,?,TO_DATE(?,\'' . MASK_DATE .'\'),?,?,?,?,?,?,?,?)';
                            
            $args   = array($data->courseId,
                            $data->courseVersion,
                            $data->turnId,
                            $data->unitId,
                            $data->authorizationDate,
                            $data->status,
                            $data->minimumConclusionCourse,
                            $data->maximumConclusionCourse,
                            $data->authorizationDocument,
                            $data->maximumDependent,
                            $data->policyId,
                            $data->policyIdForEnroll,
                            $data->policyIdForReEnroll );

            $result = $db->execute(SAGU::prepare($insert,$args));
            //$db->Close();
            return $result;
        }
    }

    /**
     * Update the specified courseOccurence data.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCourseOccurrence($data)
    {
        $update = 'UPDATE acdCourseOccurrence
                      SET authorizationDate        = TO_DATE(?,\'' . MASK_DATE .'\'),
                          status                  = ?,
                          minimumConclusionCourse = ?,
                          maximumConclusionCourse = ?,
                          authorizationDocument   = ?,
                          maximumDependent        = ?,
                          policyId                = ?,
                          policyIdForEnroll       = ?,
                          policyIdForReEnroll     = ?
                    WHERE courseId                = ?
                      AND courseVersion           = ?
                      AND turnId                  = ?
                      AND unitId                  = ?';

        $db     = $this->getDatabase();

        $args   = array($data->authorizationDate,
                        $data->status,
                        $data->minimumConclusionCourse,
                        $data->maximumConclusionCourse,
                        $data->authorizationDocument,
                        $data->maximumDependent,
                        $data->policyId,
                        $data->policyIdForEnroll,
                        $data->policyIdForReEnroll,
                        $data->courseId,
                        $data->courseVersion,
                        $data->turnId,
                        $data->unitId);

        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->Close();

        return $result;
    }

    /**
     * Delete the specified courseOccurrence.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the course to be retrieved.
     * @param $courseVersion (int): Identifier of the course to be retrieved.
     * @param $turnId (int): Identifier of the course to be retrieved.
     * @param $unitId (int): Identifier of the course to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCourseOccurrence($courseId, $courseVersion, $turnId, $unitId)
    {
        $delete = 'DELETE FROM acdCourseOccurrence
                    WHERE courseId      = ?
                      AND courseVersion = ?
                      AND turnId        = ?
                      AND unitId        = ?';


        $db     = $this->getDatabase();

        $args   = array($courseId,
                        $courseVersion,
                        $turnId,
                        $unitId);

        $result = $db->Execute(SAGU::prepare($delete,$args));

        //$db->Close();

        return $result;
    }

}

?>
