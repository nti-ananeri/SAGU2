<?php
/**
 *
 * This file handles the connection and actions for acdFrequenceEnroll table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 03/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusFrequenceEnroll extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessAcademicBusFrequenceEnroll()
    {
        $this->db = $this->getDatabase();
    }
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function getTotalFrquenceEnroll($enrollId, $degreeId=null)
    {

        $sql = 'SELECT sum(A.frequency)
                  FROM acdFrequenceEnroll A
                 WHERE A.enrollId = ?';

        $args = array($enrollId);

        if ( strlen((string)$degreeId)>0 )
        {
            //pega a data final de frequencia
            $sql2 .= 'SELECT limitdate,
                             degreenumber,
                             learningPeriodId
                        FROM acdDegree
                       WHERE degreeId = ?';
            $args2[] = $degreeId;
            $result2 = $this->db->query(SAGU::prepare($sql2, $args2));

            if ( $result2[0][0] )
            {
                //pega a última data inicial de frequencia
                $sql3 .= 'SELECT limitdate,
                                 degreenumber
                            FROM acdDegree
                           WHERE degreeId IN ( SELECT degreeId
                                                 FROM acdDegree
                                                WHERE learningPeriodId = ?)
                             AND degreenumber < ?
                        ORDER BY degreenumber DESC
                           LIMIT 1';
                $args3[] = $result2[0][2];
                $args3[] = $result2[0][1];
                $result3 = $this->db->query(SAGU::prepare($sql3, $args3));
            }
                                                  
            $sql   .= ' AND A.frequencydate <= ?';
            $args[] = $result2[0][0];
            
            if ( $result3[0][0] )
            {
                $sql   .= ' AND A.frequencydate > ?';
                $args[] = $result3[0][0];
            }
        }

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result[0][0]; 
    }

    /**
     * Delete a record
     *
     * @param $enrollId (integer): Primary key for deletion
     * @param $scheduleId (integer): Primary key for deletion
     * @param $frequencyDate (date): Primary key for deletion
     * @param $turnId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFrequenceEnroll($enrollId, $scheduleId=NULL, $frequencyId=NULL, $turnId=NULL)
    {
        $sql = 'DELETE FROM acdFrequenceEnroll
                      WHERE enrollId   = ? ';

        $args[] = $enrollId;

        if ( strlen((string)$scheduleId)>0 )
        {
            $sql .= ' AND scheduleId = ? ';
            $args[] = $scheduleId;
        }

        if ( strlen((string)$frequencyDate)>0 )
        {
            $sql .= ' AND frequencyDate = to_date(?, \''.MASK_DATE.'\') ';
            $args[] = $frequencyDate;
        }

        if ( strlen((string)$turnId)>0 )
        {
            $sql .= ' AND turnId = ? ';
            $args[] = $turnId;
        }
        
        $result = $this->db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    public function getFrequenceDatesFromAcademicCalendar($scheduleId=null, $groupId, $periodId, $professorId=null)
    {
        $sql1 = 'SELECT A.* FROM (SELECT A.occurrenceDate,
                               max(A.dateTime),
                               C.scheduleLearningPeriodId
                          FROM acdAcademicCalendarAdjustments A
                    INNER JOIN acdLearningPeriod B
                            ON (A.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdScheduleLearningPeriod C
                            ON (C.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdSchedule D
                            ON (    C.scheduleLearningPeriodId = D.scheduleLearningPeriodId
                                AND A.scheduleId = D.scheduleId )
                    INNER JOIN acdScheduleProfessor E
                            ON (E.scheduleId = D.scheduleId)
                         WHERE B.periodId    = \'' . $periodId . '\' 
                           AND D.groupId = \'' . $groupId . '\' ';

        if ( $professorId )
        {
            $sql1 .= '      AND E.professorId = \''.$professorId.'\' ';
        }

        if ( $scheduleId )
        {
            $sql1 .= '      AND D.scheduleId  = \'' . $scheduleId . '\' ';
        }

        $sql1 .= '         AND inOut = \''.DB_FALSE.'\'
                           AND A.weekDayId = D.weekDayId
                      GROUP BY A.occurrenceDate, C.scheduleLearningPeriodId
                      ORDER BY A.occurrenceDate) A, acdScheduleLearningPeriod B WHERE A.scheduleLearningPeriodId = B.scheduleLearningPeriodId AND A.occurrenceDate BETWEEN B.beginDate AND B.endDate ORDER BY A.occurrenceDate::date';

        $result1 = $this->db->query($sql1);

        if ( is_array($result1) && (count($result1) > 0) )
        {
            foreach ( $result1 as $key1 => $value1 )
            {
                $string1 .= '\'' . $value1[0] . '\', ';
            }

            $string1 = substr($string1, 0, (strlen((string)$string1)-2));
        }

        $sql2 = 'SELECT A.* FROM (SELECT A.occurrenceDate,
                               D.groupId,
                               H.name as curricularComponentName,
                               I.name as professorName,
                               J.shortDescription as turnDescription,
                               K.shortDescription as weekDayDescription,
                               EXTRACT(DAY FROM A.occurrenceDate),
                               EXTRACT(MONTH FROM A.occurrenceDate),
                               J.turnId,
                               D.scheduleId,
                               C.scheduleLearningPeriodId,
			       E.beginDate,E.endDate
                          FROM acdAcademicCalendar A
                    INNER JOIN acdLearningPeriod B
                            ON (A.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdScheduleLearningPeriod C
                            ON (C.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdSchedule D
                            ON (C.scheduleLearningPeriodId = D.scheduleLearningPeriodId)
                    INNER JOIN acdScheduleProfessor E
                            ON (E.scheduleId = D.scheduleId)
                    INNER JOIN acdGroup F
                            ON (F.groupId = D.groupId)
                    INNER JOIN acdCurriculum G
                            ON (G.curriculumId = F.curriculumId)
                    INNER JOIN acdCurricularComponent H
                            ON (H.curricularComponentId      = G.curricularComponentId AND
                                H.curricularComponentVersion = G.curricularComponentVersion)
               INNER JOIN ONLY basPhysicalPersonProfessor I
                            ON (I.personId = E.professorId)
                    INNER JOIN basTurn J
                            ON (J.turnId = C.turnId)
                    INNER JOIN basWeekDay K
                            ON (K.weekDayId = A.weekDayId)
                         WHERE B.periodId    = \''.$periodId.'\'
                           AND D.groupId = \'' . $groupId . '\' ';

        if ( $professorId )
        {
            $sql2 .= '      AND E.professorId = \''.$professorId.'\' ';
        }

        if ( $scheduleId )
        {
            $sql2 .= '      AND D.scheduleId  = \'' . $scheduleId . '\' ';
        }

        if ( strlen((string)$string1) > 0)
        {
            $sql2 .= ' AND A.occurrenceDate NOT IN ('.$string1.') ';
        }

            $sql2 .= ' AND A.weekDayId = D.weekDayId
         UNION
                        SELECT A.occurrenceDate,
                               D.groupId,
                               H.name as curricularComponentName,
                               I.name as professorName,
                               J.shortDescription as turnDescription,
                               K.shortDescription as weekDayDescription,
                               EXTRACT(DAY FROM A.occurrenceDate),
                               EXTRACT(MONTH FROM A.occurrenceDate),
                               J.turnId,
                               D.scheduleId,
                               C.scheduleLearningPeriodId,
			       E.beginDate,E.endDate
                          FROM acdAcademicCalendarAdjustments A
                    INNER JOIN acdLearningPeriod B
                            ON (A.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdScheduleLearningPeriod C
                            ON (C.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdSchedule D
                            ON (    C.scheduleLearningPeriodId = D.scheduleLearningPeriodId
                                AND D.scheduleId = A.scheduleId)
                    INNER JOIN acdScheduleProfessor E
                            ON (E.scheduleId = D.scheduleId)
                    INNER JOIN acdGroup F
                            ON (F.groupId = D.groupId)
                    INNER JOIN acdCurriculum G
                            ON (G.curriculumId = F.curriculumId)
                    INNER JOIN acdCurricularComponent H
                            ON (H.curricularComponentId      = G.curricularComponentId AND
                                H.curricularComponentVersion = G.curricularComponentVersion)
               INNER JOIN ONLY basPhysicalPersonProfessor I
                            ON (I.personId = E.professorId)
                    INNER JOIN basTurn J
                            ON (J.turnId = C.turnId)
                    INNER JOIN basWeekDay K
                            ON (K.weekDayId = A.weekDayId)
                         WHERE B.periodId    = \''.$periodId.'\'
                           AND D.groupId = \'' . $groupId . '\' ';

        if ( $professorId )
        {
            $sql2 .= '      AND E.professorId = \''.$professorId.'\' ';
        }

        if ( $scheduleId )
        {
            $sql2 .= '      AND D.scheduleId  = \'' . $scheduleId . '\' ';
        }

        $sql2 .= '         AND inOut         = \''.DB_TRUE.'\'
                           AND A.weekDayId = D.weekDayId
                      ORDER BY 1) A, acdScheduleLearningPeriod B  WHERE A.scheduleLearningPeriodId = B.scheduleLearningPeriodId AND A.occurrenceDate BETWEEN A.beginDate AND A.endDate ORDER BY A.occurrenceDate::date';

        $result2 = $this->db->query($sql2);

        return $result2;
    }

    public function getFrequencesOfPupil($scheduleId=null, $enrollId, $groupId=null)
    {
        $sql = '    SELECT A.frequencyDate,
                           A.frequency
                      FROM acdFrequenceEnroll A
                     WHERE A.enrollId   = \''.$enrollId.'\'';

        if ( strlen((string)$scheduleId)>0 )
        {
            $sql .= ' AND A.scheduleId = \''.$scheduleId.'\'';
        }

        if ( strlen((string)$groupId)>0 )
        {
            $sql .= ' AND A.scheduleId IN ( SELECT scheduleId FROM acdSchedule WHERE groupId = \''. $groupId .'\') ';
        }

        $result = $this->db->query($sql);

        return $result;
    }

    public function getNumberHoursLesson($scheduleId)
    {
        $sql = '    SELECT B.numberHoursLessons
                      FROM acdSchedule A
                INNER JOIN acdScheduleLearningPeriod B
                        ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                     WHERE A.scheduleId = \''.$scheduleId.'\'';

        $result = $this->db->query($sql);

        return $result[0][0];
    }

    public function getFrquenceEnroll($enrollId, $scheduleId, $frequencyDate, $turnId)
    {
        $sql = 'SELECT enrollid,
                       scheduleId,
                       frequencyDate,
                       turnId,
                       frequency
                  FROM acdFrequenceEnroll
                 WHERE enrollId     = ?
                   AND scheduleId   = ?
                   AND frequencyDate = ?
                   AND turnId       = ?';

        $args = array($enrollId,
                      $scheduleId,
                      $frequencyDate,
                      $turnId);

        $result = $this->db->query(SAGU::prepare($sql, $args));

        $frequenceEnroll = new acdFrequenceEnroll();

        list ( $frequenceEnroll->enrollId,
               $frequenceEnroll->scheduleId,
               $frequenceEnroll->frequencyDate,
               $frequenceEnroll->turnId,
               $frequenceEnroll->frequency ) = $result[0];

        return $frequenceEnroll; 
    }

    public function getFrquenceContent($scheduleId, $frequencyDate, $turnId = NULL)
    {
        $sql  = 'SELECT scheduleId,
                        TO_CHAR(occurrenceDate,\'' . MASK_DATE . '\') as occurrenceDate,
                        turnId,
                        content
                   FROM acdFrequenceContent
                  WHERE scheduleId     = ?
                    AND occurrenceDate = TO_DATE(?,\'' . MASK_DATE . '\') ';
        $args = array( $scheduleId,
                       $frequencyDate );
        if ( strlen((string)$turnId) > 0 )
        {
            $sql .= ' AND turnId = ?::integer ';
            $args[] = $turnId;
        }
        
        $result = $this->db->query(SAGU::prepare($sql, $args));

        $frequenceContent = new AcdFrequenceContent();

        list ( $frequenceContent->scheduleId,
               $frequenceContent->occurrenceDate,
               $frequenceContent->turnId,
               $frequenceContent->content ) = $result[0];

        return $frequenceContent; 
    }
    public function getFrequenceContentCopy ( $groupId )
    {
        $sql = 'SELECT 
                    DISTINCT
                    TO_CHAR(max(I.occurrenceDate), \''. MASK_DATE .'\'),
                    CASE WHEN LENGTH(I.content) > 64 THEN SUBSTRING(I.content,1,66)|| \'...\' ELSE I.content END,
                    I.content
                FROM
                    acdFrequenceContent A INNER JOIN
                    acdSchedule B USING ( scheduleId ) INNER JOIN
                    acdGroup C USING ( groupId ) INNER JOIN
                    acdLearningPeriod D ON ( D.learningPeriodId = C.learningPeriodId ) INNER JOIN
                    acdCurriculum E ON ( E.curriculumId = C.curriculumId ) INNER JOIN
                    acdCurriculum F ON ( F.curricularComponentId = E.curricularComponentId ) INNER JOIN
                    acdGroup G ON ( G.curriculumId = F.curriculumId ) INNER JOIN
                    acdSchedule H ON ( H.groupId = G.groupId ) INNER JOIN
                    acdFrequenceContent I ON ( I.scheduleId = H.scheduleId ) INNER JOIN
                    acdLearningPeriod J ON ( J.learningPeriodId = G.learningPeriodId )
                WHERE
                    C.groupId = ?::integer
                AND D.periodId = ?
                AND J.periodId = D.periodId 
                GROUP BY
                    I.content
                ORDER BY
                    1';
        $args[] = $groupId;
        $args[] = CURRENT_PERIOD_ID;
        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result; 
    }
    public function insertFrequenceContent($data)
    {
        $sql  = 'INSERT INTO acdFrequenceContent
                             (scheduleId,
                              occurrenceDate,
                              turnId,
                              content)
                      VALUES (?, TO_DATE(?,\'' . MASK_DATE . '\'), ?, ?)';

        $args = array($data->scheduleId,
                      $data->occurrenceDate,
                      $data->turnId,
                      $data->content);

        $result = $this->db->execute(SAGU::prepare($sql, $args, false));

        return $result; 
    }

    public function updateFrequenceContent($data)
    {
        $sql  = 'UPDATE acdFrequenceContent
                    SET content        = ?
                  WHERE scheduleId     = ?
                    AND occurrenceDate = TO_DATE(?,\'' . MASK_DATE . '\')
                    AND turnId         = ?';

        $args = array($data->content,
                      $data->scheduleId,
                      $data->occurrenceDate,
                      $data->turnId);

        $result = $this->db->execute(SAGU::prepare($sql, $args, false));

        return $result; 
    }

    public function getRegisteredFrequence($scheduleId)
    {
        $sql  = 'SELECT DISTINCT scheduleId,
                                 TO_CHAR(frequencydate, \'' . MASK_DATE . '\') as frequencydate,
                                 turnId
                            FROM acdFrequenceEnroll
                           WHERE scheduleId     = ?
                        ORDER BY frequencydate';

        $args   = array($scheduleId);

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result; 
    }

    public function insertFrequenceEnroll($data)
    {
        $sql  = 'INSERT INTO acdFrequenceEnroll
                             (scheduleId,
                              frequencyDate,
                              turnId,
                              enrollId,
                              frequency)
                      VALUES (?, TO_DATE(?,\'' . MASK_DATE . '\'), ?, ?, ?)';

        $args = array($data->scheduleId,
                      $data->frequencyDate,
                      $data->turnId,
                      $data->enrollId,
                      $data->frequency);

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        return $result; 
    }

    public function getTotalAbsenceEnroll($enrollId, $degreeId=null)
    {

        //pega o total de horas menos as presencas
        $sql = 'SELECT sum(D.numberhourslessons - E.frequency)
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON ( A.groupId = B.groupId )
            INNER JOIN acdSchedule C
                    ON ( B.groupId = C.groupId)
            INNER JOIN acdScheduleLearningPeriod D
                    ON ( C.scheduleLearningPeriodId = D.scheduleLearningPeriodId )
            INNER JOIN (select enrollid, frequencydate, max(scheduleid) as scheduleid,max(frequency) as frequency from acdFrequenceEnroll group by 1,2) E
                    ON (     E.enrollId = A.enrollId 
                         AND E.scheduleId = C.scheduleId )
                 WHERE A.enrollId = ?';

        $args = array($enrollId);

        if ( strlen((string)$degreeId)>0 )
        {
            //pega a data final de frequencia
            $sql2 .= 'SELECT limitdate,
                             degreenumber,
                             learningPeriodId
                        FROM acdDegree
                       WHERE degreeId = ?';
            $args2[] = $degreeId;
            $result2 = $this->db->query(SAGU::prepare($sql2, $args2));

            if ( $result2[0][0] )
            {
                //pega a última data inicial de frequencia
                $sql3 .= 'SELECT limitdate,
                                 degreenumber
                            FROM acdDegree
                           WHERE degreeId IN ( SELECT degreeId
                                                 FROM acdDegree
                                                WHERE learningPeriodId = ?)
                             AND degreenumber < ?
                        ORDER BY degreenumber DESC
                           LIMIT 1';
                $args3[] = $result2[0][2];
                $args3[] = $result2[0][1];
                $result3 = $this->db->query(SAGU::prepare($sql3, $args3));
            }
                                                  
            $sql   .= ' AND E.frequencydate <= ?';
            $args[] = $result2[0][0];
            
            if ( $result3[0][0] )
            {
                $sql   .= ' AND E.frequencydate > ?';
                $args[] = $result3[0][0];
            }
        }

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    public function getProfessorsWithDailyDelayed($periodId, $limitDate)
    {
        $sql  = 'SELECT A.personId,
                        A.name,
                        F.curricularComponentId,
                        F.curricularComponentVersion,
                        F.shortName,
                        H.description,
                        G.beginHour,
                        G.endHour,
                        ( SELECT TO_CHAR(max(frequencyDate), \'' . MASK_DATE . '\')
                            FROM acdFrequenceEnroll
                           WHERE scheduleId = C.scheduleId ) as maxDate
                   FROM basPhysicalPersonProfessor A
             INNER JOIN acdScheduleProfessor B
                     ON ( A.personId = B.professorId )
             INNER JOIN acdSchedule C
                     ON ( B.scheduleId = C.scheduleId )
             INNER JOIN acdGroup D
                     ON (     C.groupId = D.groupId 
                          AND D.learningPeriodId IN ( SELECT learningPeriodId
                                                        FROM acdLearningPeriod
                                                       WHERE periodId = ?))
             INNER JOIN acdCurriculum E
                     ON ( D.curriculumId = E.curriculumId )
             INNER JOIN acdCurricularComponent F
                     ON (     E.curricularComponentId      = F.curricularComponentId
                          AND E.curricularComponentVersion = F.curricularComponentVersion )
             INNER JOIN acdScheduleLearningPeriod G
                     ON ( C.scheduleLearningPeriodId = G.scheduleLearningPeriodId )
             INNER JOIN basWeekDay H
                     ON ( H.weekDayId = C.weekDayId )
                  WHERE ( SELECT max(frequencyDate)
                            FROM acdFrequenceEnroll
                           WHERE scheduleId = C.scheduleId ) < TO_DATE(?, \'' . MASK_DATE . '\')
               ORDER BY A.name';

        $result = $this->db->query(SAGU::prepare($sql, array($periodId, $limitDate)));

        return $result; 
    }

    public function isFrequenceRegistered($data)
    {
        $sql  = 'SELECT CASE WHEN count(*) > 0 THEN TRUE ELSE FALSE END
                   FROM acdFrequenceEnroll
                  WHERE scheduleId    = ?
                    AND frequencyDate = TO_DATE(?, \'' . MASK_DATE . '\')
                    AND turnId        = ?
                    AND enrollid      = ?
                    AND frequency     = ?';

        $args = array($data->scheduleId,
                      $data->frequencyDate,
                      $data->turnId,
                      $data->enrollId,
                      $data->frequency);

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result[0][0]; 
    }
    
    public function verifyEnrollAbsence($enrollId, $groupIdFreq){
    	
    	$sql = "select case when verifyEnrollNoFrequency(?, ?) then '' else A.*::varchar end as absence from verifyEnrollAbsence(?) A";    	
    	
    	 $args = array($enrollId, $groupIdFreq, $enrollId);
    	
    	$result = $this->db->query(SAGU::prepare($sql, $args));
    	
    	return $result[0][0];
    } 
    

}

?>
