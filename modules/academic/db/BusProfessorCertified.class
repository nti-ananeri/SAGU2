<?php
/**
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/


/**
 * Class to manipulate the acdEnroll table
 **/
class BusinessAcademicBusProfessorCertified extends Business
{

    var $db;

    function BusinessAcademicBusProfessorCertified()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }


    function getProfessorCertified($periodId, $professorId)
    {
        $sql = '    SELECT G.shortName, 
                           G.academicnumberhours,
                           H.periodid, 
                           M.curricularComponentId,
                           D.totalEnrolled,
                           L.name 
                       FROM acdscheduleprofessor A 
                INNER JOIN basphysicalpersonprofessor B 
                        ON (A.professorid = B.personid) 
                INNER JOIN acdschedule C 
                        ON (A.scheduleid = C.scheduleid) 
                INNER JOIN acdgroup D 
                        ON (C.groupid = D.groupid) 
                INNER JOIN basweekday E 
                        ON (C.weekdayid = E.weekdayid) 
                INNER JOIN acdcurriculum F 
                        ON (D.curriculumid = F.curriculumid) 
                INNER JOIN acdcurricularcomponent G 
                        ON (F.curricularcomponentid = G.curricularcomponentid AND 
                            F.curricularcomponentversion = G.curricularcomponentversion) 
                INNER JOIN acdlearningperiod H 
                        ON (D.learningperiodid = H.learningperiodid)
                INNER JOIN basturn I 
                        ON (I.turnid = H.turnId)
                INNER JOIN acdCurriculum M
                        ON (M.curriculumId = D.curriculumId)
                INNER JOIN acdcourse L
                        ON (L.courseId = M.courseId) 
                     WHERE (A.professorid = ?) AND
                           (H.periodid = ?)
                  ORDER BY H.periodId';

        $args = array($professorId, $periodId);
        $db   = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

}

?>
