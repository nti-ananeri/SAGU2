<?php

/**
 * Class to manipulate the enroll
 **/
class BusinessAcademicBusEnrollNew extends Business
{
    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;
        return $MIOLO->getDatabase($module);
    }

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $module = is_null($module) ? 'academic' : $module;
        $this->db = $MIOLO->getDatabase($module);
    }
    
    public function beginTransaction()
    {
        return $this->db->execute('BEGIN TRANSACTION');
    }

    public function commit($ok = true)
    {
        if( $ok == true )
        {
            $result = $this->db->execute('COMMIT');
        }
        else
        {
            $this->db->execute('ROLLBACK');
        }
        return $result;
    }
    
    public function insertEnroll ( $data )
    {
        /*$sql = 
            "SELECT enrollpupil (
                {$data->contractId}::integer, --in contractid_ int4, 
                null::int, --in curriculumId_ int4, 
                {$data->groupId}::integer, --in groupid_ acdenroll.groupid%TYPE,
                '{$data->userName}'::varchar, --in username_ baslog.username%TYPE, 
                '{$data->ipAddress}'::inet, --in ipaddress_ baslog.ipaddress%TYPE,
                '{$data->periodId}'::varchar, --in periodid acdperiod.periodid%TYPE,
                false, --in isadaptation_ acdenroll.isadaptation%TYPE,
                true, --in isconfirm_ acdenroll.isconfirm%TYPE,
                true, --in issetfree_ acdenroll.issetfree%TYPE,
                true,--in isshowdocumentendcourse_ acdenroll.isshowdocumentendcourse%TYPE, 
                now()::timestamp,--in datetimeforenroll timestamp without time zone,
                false, --in isinternet_ acdenroll.isexploitation%TYPE,
                null::inet, --in ip_ acdenroll.ip%TYPE,
                false, --in isexploitation_ acdenroll.isexploitation%TYPE,
                null::char(1), --in exploitationtype_ acdenroll.exploitationtype%TYPE,
                null::text, --in obsexploitation_ acdenroll.obsexploitation%TYPE,
                null::float, --in creditsexploitation_ acdenroll.creditsexploitation%TYPE,
                null::float, --in numberhourexploitation_ acdenroll.numberhourexploitation%TYPE,
                null::int, --in exploitationinstitutionid_ acdenroll.exploitationinstitutionid%TYPE,
                false, --in checkDocuments BOOL,
                true, --in checkActiveContract BOOL,
                true, --in checkPreRequisite BOOL,    
                false)";*/

        
        $sql = ' SELECT enrollPupil ( ' . 
                $data->contractId .', '. 
                $data->groupId . ', \''. 
                $data->mode . '\', \''. 
                $data->userName . '\',\''.
                $data->ipAddress . '\') ';
        
        $result = $this->db->query($sql);
        
        return $result[0][0];
    }
    public function insertClassEnroll ( $data )
    {
        $sql = ' SELECT enrollClassPupil ( ' . 
                $data->contractId .', '. 
                $data->groupId . ', \''. 
                $data->mode . '\', \''. 
                $data->userName . '\',\''.
                $data->ipAddress . '\') ';
        $result = $this->db->query($sql);
        
        return $result[0][0];
    }

    public function getPupilsInClass ( $data )
    {
        $sql = 'SELECT 
                    contractId 
                FROM
                    acdClassPupil
                WHERE
                    NOT isContractOut(contractId)  ';
        if ( strlen((string)$data->classId) > 0 )
        {
            $sql .= ' AND classId ILIKE ? ';
            $args[] = $data->classId;
        }

        if ( strlen((string)$data->contractId) > 0 )
        {
            $sql .= ' AND contractId = ?::integer AND endDate IS NULL AND beginDate <= now()::date ';
            $args[] = $data->contractId;
        }
        
        if( count($args) > 0 )
        {   
            $result = $this->db->query(SAGU::prepare($sql,$args));                
        }
        if ( count($result) > 0 )
        {
            foreach( $result as $item => $value )
            {
                $res[] = $value[0];
            }
            return $res;
        }
    }

    public function getClassPupil ( $data )
    {
        $sql = 'SELECT 
                    classId 
                FROM
                    acdClassPupil
                WHERE
                    NOT isContractOut(contractId) ';
        if ( strlen((string)$data->classId) > 0 )
        {
            $sql .= ' AND classId ILIKE ? AND endDate IS NULL and beginDate <= now()::date  ';
            $args[] = $data->classId;
        }

        if ( strlen((string)$data->contractId) > 0 )
        {
            $sql .= ' AND contractId = ?::integer AND endDate IS NULL AND beginDate <= now()::date ';
            $args[] = $data->contractId;
        }
        
        if( count($args) > 0 )
        {   
            $result = $this->db->query(SAGU::prepare($sql,$args));                
        }
        if ( count($result) > 0 )
        {
            foreach( $result as $item => $value )
            {
                $res[] = $value[0];
            }
            return $res;
        }
    }

    public function getGroups ( $data )
    {
        $sql = 'SELECT DISTINCT  
                    C.curricularComponentId,
                    C.curricularComponentVersion,
                    A.groupId,
                    C.name,
                    C.shortName,
                    C.lessonNumberHours,
                    C.academicNumberHours,
                    A.classId,
                    B.curricularComponentGroupDocumentEndCourseId,
                    B.curricularComponentGroupElectiveId,
                    B.curriculumId,
                    B.curricularComponentTypeId,
                    B.semester,
                    B.masterCurriculumId,
                    B.curriculumTypeId
                FROM 
                    acdGroup A INNER JOIN
                    acdCurriculum B ON ( B.curriculumId = A.curriculumId ) INNER JOIN
                    acdCurricularComponent C ON ( C.curricularComponentId = B.curricularComponentId AND C.curricularComponentVersion = B.curricularComponentVersion ) INNER JOIN
                    acdLearningPeriod D ON ( D.learningPeriodId = A.learningPeriodId ) LEFT JOIN
                    acdSchedule E ON ( E.groupId = A.groupId ) LEFT JOIN
                    acdScheduleProfessor F ON ( F.scheduleId = E.scheduleId )
                WHERE 
                    1 = 1
                ';
        if ( strlen((string) $data->periodId ) > 0 )
        {
            $sql .= ' AND D.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen((string) $data->classId ) > 0 && !is_array($data->classId) )
        {
            $sql .= ' AND A.classId ILIKE ?';
            $args[] = $data->classId;
        }
        else if ( is_array($data->classId) )
        {
            $sql .= ' AND A.classId IN ( \''. implode("','", $data->classId) . '\')';
        }
        if ( strlen((string)$data->masterCurriculumId) > 0 )
        {
            $sql .= ' AND B.masterCurriculumId = ?::integer ';
            $args[] = $data->masterCurriculumId;
        }
        /*
        if ( strlen((string) $data->courseId ) > 0 )
        {
            $sql .= ' AND B.courseId ILIKE ?';
            $args[] = $data->courseId;
        }

        if ( strlen((string) $data->courseVersion ) > 0 )
        {
            $sql .= ' AND B.courseVersion = ?::integer';
            $args[] = $data->courseVersion;
        }
        */

        if ( strlen((string) $data->turnId ) > 0 && strlen((string)$data->classId) == 0 )
        {
            $sql .= ' AND B.turnId = ?::integer';
            $args[] = $data->turnId;
        }

        if ( strlen((string) $data->unitId ) > 0 )
        {
            $sql .= ' AND B.unitId = ?::integer';
            $args[] = $data->unitId;
        }
        
        if ( count( $args ) > 0 )
        {
            $sql .= ' ORDER BY B.semester, C.name ';
            $result = $this->db->query(SAGU::prepare($sql,$args));
        }

        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->curricularComponentId         = $linha[0];
                $obj->curricularComponentVersion    = $linha[1];
                $obj->groupId                       = $linha[2];
                $obj->curricularComponentName       = $linha[3];
                $obj->curricularComponentShortName  = $linha[4];
                $obj->lessonNumberHours             = $linha[5];
                $obj->academicNumberHours           = $linha[6];
                $obj->classId                       = $linha[7];
                $obj->curricularComponentGroupId    = $linha[8];
                $obj->curricularComponentGroupElectiveId = $linha[9];
                $obj->curriculumId                  = $linha[10];
                $obj->curricularComponentTypeId     = $linha[11];
                $obj->semester                      = $linha[12];
                $obj->masterCurriculumId            = $linha[13];
                $obj->curriculumTypeId              = $linha[14];
                $res[] = $obj;
            }
            return $res;
        }
        
    }
    
    public function getGroupInfo($data)
    {
        $sql = 'SELECT
                    DISTINCT 
                    A.groupId, 
                    B.curricularComponentId,
                    B.curricularComponentVersion,
                    A.vacant,
                    A.totalEnrolled,
                    F.scheduleId,
                    F.physicalResourceId,
                    F.physicalResourceVersion,
                    H.description,
                    I.beginHour,
                    I.endHour,
                    I.beginDate,
                    I.endDate,
                    J.description,
                    CASE 
                        WHEN G.professorId IS NULL THEN 
                            NULL 
                        ELSE
                            getPersonName(G.professorId)
                    END as personName,
                    C.name,
                    getTurnDescription(I.turnId) as turnDescription,
                    getUnitDescription(F.unitId) as unitDescription,
                    B.semester,
                    B.masterCurriculumId,
                    B.curriculumTypeId ';
                    if ( strlen((string)$data->contractId) > 0 )
                    {
                        $sql .= ' ,E.enrollId,CASE WHEN E.contractId IS NULL THEN FALSE ELSE TRUE END as isEnrolled ';
                    }

        $sql .= 'FROM
                    acdGroup A INNER JOIN 
                    acdCurriculum B ON (A.curriculumId = B.curriculumId) INNER JOIN
                    acdCurricularComponent C USING ( curricularComponentId, curricularComponentVersion ) INNER JOIN
                    acdLearningPeriod D ON ( A.learningPeriodId = D.learningPeriodId ) LEFT JOIN ';
                    if ( strlen((string)$data->contractId) > 0 )
                    {
                        $sql .='acdEnroll E ON ( E.groupId = A.groupId AND E.contractId = ?::integer ) LEFT JOIN';
                        $args[] = $data->contractId;
                    }
        $sql .='    acdSchedule F ON ( F.groupId = A.groupId ) LEFT JOIN
                    acdScheduleProfessor G ON ( G.scheduleId = F.scheduleId ) LEFT JOIN
                    insPhysicalResource H ON ( H.physicalResourceId = F.physicalResourceId AND H.physicalResourceVersion = F.physicalResourceVersion ) LEFT JOIN
                    acdScheduleLearningPeriod I ON ( I.scheduleLearningPeriodId = F.scheduleLearningPeriodId ) LEFT JOIN
                    basWeekDay J ON ( J.weekDayId = F.weekDayId )
                WHERE 
                    1 = 1 ';
                    
        if ( strlen((string)$data->groupId) > 0 )
        {
            $sql .= ' AND A.groupId = ?::integer ';
            $args[] = $data->groupId;
        }

        if ( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $result = $this->db->query($sql);
            if ( count($result) > 0 )
            {
                foreach( $result as $linhas => $linha )
                {
                    
                    if ( $obj && $obj->groupId != $linha[0] ) 
                    {
                        unset($obj);    
                        $res[] = $obj;
                    }
                    
                    $obj->groupId = $linha[0];
                    $obj->curricularComponentId = $linha[1];
                    $obj->curricularComponentVersion = $linha[2];
                    $obj->curricularComponentName = $linha[15];
                    $obj->vacant = $linha[3];
                    $obj->totalEnrolled = $linha[4];
                    $obj->semester      = $linha[18];
                    $obj->masterCurriculumId = $linha[19];
                    $obj->curriculumTypeId = $linha[20];
                    if( strlen((string)$data->contractId) > 0 )
                    {
                        $obj->isEnrolled    = $linha[22];
                        $obj->enrollId = $linha[21];
                    }
                    unset ($schedule);
                    
                    $schedule->scheduleId = $linha[5];
                    $schedule->physicalResourceId = $linha[6];
                    $schedule->physicalResourceVersion = $linha[7];
                    $schedule->physicalResourceDescription = $linha[8];                    
                    $schedule->beginHour = $linha[9];
                    $schedule->endHour = $linha[10];
                    $schedule->beginDate = $linha[11];
                    $schedule->endDate = $linha[12];
                    $schedule->weekDay = $linha[13];
                    $schedule->professorName = $linha[14];
                    $schedule->turnDescription = $linha[16];
                    $schedule->unitDescription = $linha[17];
                    $obj->schedule[] = $schedule;
                }
                $res[] = $obj;
                return $res;    
            }
        }
    }
    public function getEnrollInfo ( $data )
    {
        $sql = '    SELECT 
                        A.enrollId,
                        B.curriculumId,
                        CASE 
                            WHEN F.exploitationType = \'I\' THEN 
                            L.description  || \'&nbsp;<i><b>('.( _M('Internal exploitation', 'academic') ). ')</b></i>\'
                            WHEN F.exploitationType = \'E\' THEN 
                            C.description  || \'&nbsp;<i><b>('.( _M('External exploitation', 'academic') ). ')</b></i>\'
                            ELSE
                            C.description
                        END,    
                        D.lessonNumberHours,
                        D.academicNumberHours,
                        D.practiceHours,
                        COALESCE((G.finalNote::numeric(14,2))::text, F.finalNote::text, (A.finalNote::numeric(14,2))::text ),
                        ROUND(((100.00/COALESCE(N.lessonNumberHours, D.lessonNumberHours))*COALESCE(G.frequency, A.frequency,0))::numeric(14,2), 2)::varchar || \'%\',
                        COALESCE( K.periodId, I.periodId, E.periodId )
                    FROM
                        acdEnroll A INNER JOIN
                        acdCurriculum B ON ( A.curriculumId = B.curriculumId ) INNER JOIN
                        acdEnrollStatus C ON ( A.statusId = C.statusId ) INNER JOIN
                        acdCurricularComponent D ON ( B.curricularComponentId = D.curricularComponentId
                                                      AND B.curricularComponentVersion = D.curricularComponentVersion ) LEFT JOIN
                        acdLearningPeriod E ON ( A.learningPeriodId = E.learningPeriodId ) LEFT JOIN
                        acdExploitation F ON ( F.enrollId = A.enrollId ) LEFT JOIN
                        acdEnroll G ON( G.enrollId = F.exploitationEnrollId ) LEFT JOIN
                        acdGroup H ON ( G.groupId = H.groupId ) LEFT JOIN
                        acdLearningPeriod I ON ( I.learningPeriodId = H.learningPeriodId ) LEFT JOIN
                        acdGroup J ON ( A.groupId = J.groupId ) LEFT JOIN
                        acdLearningPeriod K ON ( K.learningPeriodId = J.learningPeriodId ) LEFT JOIN
                        acdEnrollStatus L ON ( L.statusId = G.statusId ) LEFT JOIN
                        acdCurriculum M ON ( M.curriculumId = H.curriculumId ) LEFT JOIN
                        acdCurricularComponent N ON ( N.curricularComponentId = M.curricularComponentId AND
                                                      N.curricularComponentVersion = M.curricularComponentVersion )
                    WHERE
                        1 = 1
                        ';
        if ( strlen((string)$data->enrollId) > 0 )
        {
            $sql .= ' AND A.enrollId = ?::integer';
            $args[] = $data->enrollId;
        }
        if ( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $result = $this->db->query($sql);
            if ( count($result) > 0 )
            {
                $obj->enrollId              = $result[0][0];
                $obj->curriculumId          = $result[0][1];
                $obj->status                = $result[0][2];
                $obj->lessonNumberHours     = $result[0][3];
                $obj->academicNumberHours   = $result[0][4];
                $obj->practiceHours         = $result[0][5];
                $obj->finalNote             = $result[0][6];
                $obj->frequency             = $result[0][7];
                $obj->periodId              = $result[0][8];
            }
            return $obj;
        }

    }
    public function getCurriculumInfo ( $data ) 
    {
        $sql = 'SELECT 
                    A.curriculumId,
                    A.semester,
                    B.name,
                    B.lessonNumberHours,
                    B.academicNumberHours,
                    B.practiceHours,
                    B.beginDate,
                    B.endDate,
                    B.curricularComponentId,
                    B.curricularComponentVersion,
                    C.curriculumLinkId,
                    E.name,
                    E.academicNumberHours,
                    E.practiceHours,
                    E.lessonNumberHours,
                    E.curricularComponentId,
                    E.curricularComponentVersion
                FROM 
                    acdCurriculum A INNER JOIN
                    acdCurricularComponent B ON ( B.curricularComponentId = A.curricularComponentId 
                                                  AND B.curricularComponentVersion = A.curricularComponentVersion ) LEFT JOIN
                    acdCurriculumLink C ON ( C.curriculumLinkId = A.curriculumId OR C.curriculumId = A.curriculumId ) LEFT JOIN
                    acdCurriculum D ON ( D.curriculumId = C.curriculumId ) LEFT JOIN
                    acdCurricularComponent E ON ( E.curricularComponentId = D.curricularComponentId 
                                                  AND E.curricularComponentVersion = D.curricularComponentVersion )
                WHERE
                    1 = 1 ';
        if ( strlen((string)$data->curriculumId) > 0 )
        {
            $sql .= ' AND A.curriculumId = ?::integer ';
            $args[] = $data->curriculumId;
        }

        if( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $result = $this->db->query($sql);
            if ( count($result) > 0 )
            {
                $x = 0;
                unset($obj);
                foreach( $result as $linha )
                {
                    if ( $x == 0 )
                    {
                        $x++;
                        $obj->curriculumId              = $linha[0];
                        $obj->semester                  = $linha[1];
                        $obj->curricularComponentName   = $linha[2];
                        $obj->lessonNumberHours         = $linha[3];
                        $obj->academicNumberHours       = $linha[4];
                        $obj->practiceHours       = $linha[5];
                        $obj->beginDate                 = $linha[6];
                        $obj->endDate                   = $linha[7];
                        $obj->curricularComponentId     = $linha[8];
                        $obj->curricularComponentVersion= $linha[9];
                        unset($obj2);
                        $obj2->curriculumId                 = $linha[10];
                        $obj2->curricularComponentName      = $linha[11];
                        $obj2->academicNumberHours          = $linha[12];
                        $obj2->practiceHours          = $linha[13];
                        $obj2->lessonNumberHours            = $linha[14];
                        $obj2->curricularComponentId        = $linha[15];
                        $obj2->curricularComponentVersion   = $linha[16];
                        $obj->links[] = $obj2;
                    }
                    else
                    {
                        unset($obj2);
                        $obj2->curriculumId                 = $linha[10];
                        $obj2->curricularComponentName      = $linha[11];
                        $obj2->academicNumberHours          = $linha[12];
                        $obj2->practiceHours          = $linha[13];
                        $obj2->lessonNumberHours            = $linha[14];
                        $obj2->curricularComponentId        = $linha[15];
                        $obj2->curricularComponentVersion   = $linha[16];
                        if ( !in_array($obj2, $obj->links) )
                        {
                            $obj->links[] = $obj2;
                        }
                    }
                }
                return $obj;
            }

        }
    }


    public function getContractCurriculumLink($data)
    {
        if ( strlen ( $data->curricularComponentId ) == 0 ||
             strlen((string) $data->curricularComponentVersion ) == 0 ||
             strlen((string) $data->courseVersion ) == 0 ||
             strlen((string) $data->courseId ) == 0 ||
             strlen((string) $data->turnId ) == 0 ||
             strlen((string) $data->unitId ) == 0 )
        {
            return NULL;
        }
        
        $sql = 'SELECT 
                    C.curricularComponentId,
                    C.curricularComponentVersion
                FROM 
                    acdCurriculumLink A INNER JOIN
                    acdCurriculum B ON ( A.curriculumId = B.curriculumId ) INNER JOIN
                    acdCurriculum C ON ( C.curriculumId = A.curriculumLinkId )
                WHERE
                    ( B.curricularComponentId = \'' . $data->curricularComponentId . '\'
                AND B.curricularComponentVersion = ' . $data->curricularComponentVersion . '
                AND B.courseVersion = ' . $data->courseVersion . '
                AND B.courseId = \'' . $data->courseId . '\'
                AND B.turnId = ' . $data->turnId . '
                AND B.unitId = ' . $data->unitId . ' ) OR                
                    ( C.curricularComponentId = \'' . $data->curricularComponentId . '\'
                AND C.curricularComponentVersion = ' . $data->curricularComponentVersion . '
                AND C.courseVersion = ' . $data->courseVersion . '
                AND C.courseId = \'' . $data->courseId . '\'
                AND C.turnId = ' . $data->turnId . '
                AND C.unitId = ' . $data->unitId . ' ) ';

        $result = $this->db->query($sql);                
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->curricularComponentId         = $linha[0];
                $obj->curricularComponentVersion    = $linha[1];
                $res[] = $obj;
            }
            return $res;
        }
                    
    }

    public function getContractCurriculumConcurrence($data)
    {
        $sql = 'SELECT 
                    C.curricularComponentId,
                    C.curricularComponentVersion
                FROM 
                    acdCurriculumConcurrence A INNER JOIN
                    acdCurriculum B ON ( A.curriculumInId = B.curriculumId ) INNER JOIN
                    acdCurriculum C ON ( A.curriculumOutId = C.curriculumId )
                WHERE
                    ( B.curricularComponentId = \'' . $data->curricularComponentId . '\'
                AND B.curricularComponentVersion = ' . $data->curricularComponentVersion . '
                AND B.courseVersion = ' . $data->courseVersion . '
                AND B.courseId = \'' . $data->courseId . '\'
                AND B.turnId = ' . $data->turnId . '
                AND B.unitId = ' . $data->unitId . ' ) ';

        $result = $this->db->query($sql);                
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->curricularComponentId         = $linha[0];
                $obj->curricularComponentVersion    = $linha[1];
                $res[] = $obj;
            }
            return $res;
        }
                    
    }

    public function getContractCurricularDisapproved($data)
    {
        $sql = 'SELECT 
                    * 
                FROM 
                    CurricularComponentDisapproved('.$data->contractId.') AS 
                    (   contractId integer , 
                        courseId varchar(10), 
                        courseVersion integer, 
                        turnId integer, 
                        unitId integer, 
                        semester integer, 
                        curricularComponentVersion integer, 
                        curricularComponentId varchar(10), 
                        curricularComponentName text,
                        statusId integer,
                        periodId varchar(10),
                        academicNumberHours float,
                        lessonNumberHours float,
                        finalNote varchar,
                        enrollDescription text,
                        curriculumId integer,
                        groupId integer,
                        enrollId integer ) ORDER BY 9';
        $result = $this->db->query($sql);
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->contractId                    = $linha[0];
                $obj->courseId                      = $linha[1];
                $obj->courseVersion                 = $linha[2];
                $obj->turnId                        = $linha[3];
                $obj->unitId                        = $linha[4];
                $obj->semester                      = $linha[5];
                $obj->curricularComponentId         = $linha[7];
                $obj->curricularComponentVersion    = $linha[6];
                $obj->curricularComponentName       = $linha[8];
                $obj->statusId                      = $linha[9];
                $obj->periodId                      = $linha[10];
                $obj->academicNumberHours           = $linha[11];
                $obj->lessonNumberHours             = $linha[12];
                $obj->finalNote                     = $linha[13];
                $obj->enrollDescription             = $linha[14];
                $obj->curriculumId                  = $linha[15];
                $obj->groupId                       = $linha[16];
                $obj->enrollId                      = $linha[17];
            $res[] = $obj;
            }
            return $res;
        }

    }

    public function getContractCurricularApproved($data)
    {
        $sql = 'SELECT 
                    * 
                FROM 
                    CurricularComponentApproved('.$data->contractId.') AS 
                    (   contractId integer , 
                        courseId varchar(10), 
                        courseVersion integer, 
                        turnId integer, 
                        unitId integer, 
                        semester integer, 
                        curricularComponentVersion integer, 
                        curricularComponentId varchar(10), 
                        curricularComponentName text,
                        statusId integer,
                        periodId varchar(10),
                        academicNumberHours float,
                        lessonNumberHours float,
                        finalNote varchar,
                        exploitationType char(1),
                        institutionName varchar(80),
                        enrollDescription text,
                        curriculumId integer,
                        enrollId integer ) ORDER BY 9';
        $result = $this->db->query($sql);
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->contractId                    = $linha[0];
                $obj->courseId                      = $linha[1];
                $obj->courseVersion                 = $linha[2];
                $obj->turnId                        = $linha[3];
                $obj->unitId                        = $linha[4];
                $obj->semester                      = $linha[5];
                $obj->curricularComponentId         = $linha[7];
                $obj->curricularComponentVersion    = $linha[6];
                $obj->curricularComponentName       = $linha[8];
                $obj->statusId                      = $linha[9];
                $obj->periodId                      = $linha[10];
                $obj->academicNumberHours           = $linha[11];
                $obj->lessonNumberHours             = $linha[12];
                $obj->finalNote                     = $linha[13];
                $obj->exploitationType              = $linha[14];
                $obj->institutionName               = $linha[15];
                $obj->enrollDescription             = $linha[16];
                $obj->curriculumId                  = $linha[17];
                $obj->enrollId                      = $linha[18];
                $obj->links                         = $this->getContractCurriculumLink($obj);
                $res[] = $obj;
            }
            return $res;
        }

    }

    public function getContractCurricularExternalExploitation($data)
    {
        $sql = 'SELECT 
                    B.contractId,
                    B.curriculumId
                FROM
                    acdExploitation A INNER JOIN
                    acdEnroll B ON ( A.enrollId = B.enrollId ) 
                WHERE
                    B.contractId = ' . $data->contractId . ' AND
                    A.exploitationType = \'E\' AND
                    B.statusId = ' . ENROLL_STATUS_EXCUSED;
        $result = $this->db->query($sql);
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->contractId                    = $linha[0];
                $obj->curriculumId                  = $linha[1];
                $res[] = $obj;
            }
            return $res;
        }

    }

    public function getContractCurricularEnrolled($data)
    {
        $sql = 'SELECT 
                    * 
                FROM 
                    CurricularComponentEnrolled('.$data->contractId.') AS 
                    (   contractId integer , 
                        courseId varchar(10), 
                        courseVersion integer, 
                        turnId integer, 
                        unitId integer, 
                        semester integer, 
                        curricularComponentVersion integer, 
                        curricularComponentId varchar(10), 
                        curricularComponentName text,
                        statusId integer,
                        periodId varchar(10),
                        academicNumberHours float,
                        lessonNumberHours float,
                        enrollDescription text,
                        curriculumId integer,
                        groupId integer,
                        enrollId integer ) ORDER BY 9';
        $result = $this->db->query($sql);
        if ( count($result) > 0 )
        {
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->contractId                    = $linha[0];
                $obj->courseId                      = $linha[1];
                $obj->courseVersion                 = $linha[2];
                $obj->turnId                        = $linha[3];
                $obj->unitId                        = $linha[4];
                $obj->semester                      = $linha[5];
                $obj->curricularComponentId         = $linha[7];
                $obj->curricularComponentVersion    = $linha[6];
                $obj->curricularComponentName       = $linha[8];
                $obj->statusId                      = $linha[9];
                $obj->periodId                      = $linha[10];
                $obj->academicNumberHours           = $linha[11];
                $obj->lessonNumberHours             = $linha[12];
                $obj->enrollDescription             = $linha[13];
                $obj->curriculumId                  = $linha[14];
                $obj->groupId                       = $linha[15];
                $obj->enrollId                      = $linha[16];
                $obj->links                         = $this->getContractCurriculumLink($obj);
                $res[] = $obj;
            }
            return $res;
        }

    }

    public function getContractCurricularNotCoursed($data)
    {

        $sql = 'SELECT 
                    * 
                FROM 
                    CurricularComponentNotCoursed('.$data->contractId.') AS 
                    (   contractId integer , 
                        courseId varchar(10), 
                        courseVersion integer, 
                        turnId integer, 
                        unitId integer, 
                        semester integer, 
                        curricularComponentVersion integer, 
                        curricularComponentId varchar(10), 
                        curricularComponentName text,
                        academicNumberHours float, 
                        lessonNumberHours float,
                        curriculumId integer ) ORDER BY 9';
        $result = $this->db->query($sql);
        if ( count($result) > 0 )
        {
            $res = $this->db->query('SELECT nextSemester(' . $data->contractId . ')');
            $semester = $res[0][0];
            unset($res);
            foreach( $result as $linhas => $linha )
            {
                unset($obj);
                $obj->contractId                    = $linha[0];
                $obj->courseId                      = $linha[1];
                $obj->courseVersion                 = $linha[2];
                $obj->turnId                        = $linha[3];
                $obj->unitId                        = $linha[4];
                $obj->semester                      = $linha[5];
                $obj->curricularComponentVersion    = $linha[6];
                $obj->curricularComponentId         = $linha[7];                
                $obj->curricularComponentName       = $linha[8];
                $obj->academicNumberHours           = $linha[9];
                $obj->lessonNumberHours             = $linha[10];
                $obj->curriculumId                  = $linha[11];
                $obj->links                         = $this->getContractCurriculumLink($obj);
                $obj->curriculumConcurrence         = $this->getContractCurriculumConcurrence($obj);
//                $obj->curriculumCondition         = $this->getContractCurriculumCondition($obj);
                $res[] = $obj;
            }
            $res['semester'] = $semester;
            return $res;
        }
    }
    
    public function getContractInfo($data)
    {
        $sql = 'SELECT
                    A.contractId,
                    CASE WHEN isContractOut(A.contractId) THEN FALSE ELSE TRUE END as isActive,
                    getPersonName(A.personId),
                    A.courseId,
                    A.courseVersion,
                    nextSemester(A.contractId) as nextSemester 
                FROM
                    acdContract A LEFT JOIN
                    acdClassPupil B ON ( A.classId = B.classId AND B.endDate IS NULL )
                WHERE 
                    1 = 1 ';
        if ( strlen((string)$data->contractId) >  0 )
        {
            
        }
           
    }
    
    public function isContractActive($contractId)
    {
        if(strlen((string)$contractId) > 0 )
        {
            $sql = 'SELECT 
                    isContractOut(' . $contractId . ') = FALSE '; 
            $return = $this->db->query( $sql );
            return $return[0][0];
        }   
    }

    public function pupilCourseType( $data )
    {
        $sql = ' SELECT 
                    CASE 
                        WHEN courseVersionTypeId IN ( '. ACD_COURSE_TYPE_ID_SERIAL . ') THEN \'SERIAL\'
                        WHEN courseVersionTypeId IN ( '. ACD_COURSE_TYPE_ID_CREDIT . ') THEN \'CREDIT\'
                    END as courseType
                FROM
                    acdContract A RIGHT JOIN
                    acdCourseVersion B ON ( B.courseId = A.courseId AND 
                                            B.courseVersion = A.courseVersion ) 
                WHERE 
                    1 = 1 ';

                    
        if ( strlen((string)$data->courseId) > 0 )
        {
            $sql .= ' AND B.courseId = ? ';
            $args[] = $data->courseId;
        }

        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $sql .= ' AND B.courseVersion = ?::integer ';
            $args[] = $data->courseVersion;
        }

        if ( strlen((string)$data->contractId) > 0 )
        {
            $sql .= ' AND A.contractId = ?::integer';
            $args[] = $data->contractId;
        }
        $sql .= ' LIMIT 1';
        if ( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $return = $this->db->query( $sql );
            return $return[0][0];
        }
    }
    public function checkMovimentContractForEnroll($data)
    {
        $sql = 'SELECT 
                    count(*) 
                FROM 
                    acdMovementContract 
                WHERE
                    contractId = ?::integer AND
                    learningPeriodId IN (SELECT learningPeriodId FROM acdLearningPeriod INNER JOIN acdContract USING ( courseId, courseVersion, turnId, unitId ) WHERE acdContract.contractId = ?::integer AND periodId = ? ) AND
                    stateContractId = '.STATE_CONTRACT_ID_ENROLLED;

        $args[] = $data->contractId;
        $args[] = $data->contractId;
        $args[] = $data->periodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result[0][0];

    }

    public function insertMovimentContractForEnroll($data)
    {
        $sql = 'INSERT INTO 
                    acdMovementContract ( contractId, 
                                          learningPeriodId, 
                                          stateTime,
                                          stateContractId )
                                 VALUES ( ?::integer, 
                                          (SELECT max(learningPeriodId) FROM acdLearningPeriod INNER JOIN acdContract USING ( courseId, courseVersion, turnId, unitId ) WHERE acdContract.contractId = ?::integer AND periodId = ? ),
                                          now(),
                                          '.STATE_CONTRACT_ID_ENROLLED.'
                                          )';

        $args[] = $data->contractId;
        $args[] = $data->contractId;
        $args[] = $data->periodId;

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        return $result;

    }
    public function getLearningPeriod ( $data )
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.periodId,
                       B.description,
                       A.courseId,
                       C.name,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.description,
                       A.formationLevelId,
                       A.previousLearningPeriodId,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginDateLessons, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.weekEndExamsBegin, \'' . MASK_DATE . '\'),
                       A.average,
                       A.finalAverage,
                       A.minimumFrequency,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       CASE WHEN length(A.policyId::varchar)>0 THEN A.policyId ELSE C.policyId END,
                       A.bankAccountId,
                       A.bankContractId,
                       A.parcelsNumber,
                       A.minimumCredits,
                       A.minimumCreditsFreshman,
                       A.minimumCreditsTurn,
                       A.isFinanceGenerate,
                       A.averageWeight,
                       A.examWeight,
                       A.disapprovationWithoutExam,
                       A.maxNote
                  FROM acdLearningPeriod A
             LEFT JOIN acdPeriod B ON (A.periodId = B.periodId)
             LEFT JOIN acdCourse C ON (A.courseId = C.courseId)
                 WHERE 1 = 1';


        if ( strlen((string)$data->periodId) > 0 )
        {
            $sql .= ' AND A.periodId = ? ';
            $args[] = $data->periodId;
        }

        if ( strlen((string)$data->courseId) > 0 )
        {
            $sql .= ' AND A.courseId = ? ';
            $args[] = $data->courseId;
        }

        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $sql .= ' AND A.courseVersion = ?::integer ';
            $args[] = $data->courseVersion;
        }

        if ( strlen((string)$data->turnId) > 0 )
        {
            $sql .= ' AND A.turnId = ?::integer ';
            $args[] = $data->turnId;
        }
        
        if ( strlen((string)$data->unitId) > 0 )
        {
            $sql .= ' AND A.unitId = ?::integer ';
            $args[] = $data->unitId;
        }
        if ( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $result = $this->db->query($sql);
            if ( count($result) > 0  )
            {
                $period = new acdLearningPeriod();

                list ( $period->learningPeriodId,
                       $period->periodId,
                       $period->periodDescription,
                       $period->courseId,
                   $period->courseName,
                   $period->courseVersion,
                   $period->turnId,
                   $period->unitId,
                       $period->learningPeriodDescription,
                   $period->formationLevelId,
                   $period->previousLearningPeriodId,
                   $period->beginDate,
                   $period->endDate,
                   $period->beginDateLessons,
                   $period->weekEndExamsBegin,
                   $period->average,
                   $period->finalAverage,
                   $period->minimumFrequency,
                   $period->userName,
                   $period->dateTime,
                   $period->ipAddress,
                   $period->policyId,
                   $period->bankAccountId,
                   $period->bankContractId,
                   $period->parcelsNumber,
                   $period->minimumCredits,
                   $period->minimumCreditsFreshman,
                   $period->minimumCreditsTurn,
                   $period->isFinanceGenerate,
                   $period->averageWeight,
                   $period->examWeight,
                   $period->disapprovationWithoutExam,
                   $period->maxNote) = $result[0];
                return $period;
            }
        }

    }

    public function checkEnrollParcel($data)
    {
        
        $sql = 'SELECT 
                    CASE 
                        WHEN D.startDate IS NULL THEN FALSE
                        ELSE TRUE
                    END as hasPriceForPeriod,
                    D.startDate,
                    CASE 
                        WHEN ( D.enrollValue = 0 OR D.enrollValue IS NULL ) THEN FALSE
                        ELSE TRUE
                    END as hasEnrollValueForPeriod,
                    D.enrollValue,
                    CASE 
                        WHEN NOT C.invoiceId IS NULL THEN balance(C.invoiceId)
                        ELSE 0
                    END as balanceInvoice,
                    CASE 
                        WHEN NOT C.invoiceId IS NULL THEN TRUE
                        ELSE FALSE
                    END as hasInvoice,
                    ( C.maturityDate < now()::date ) = TRUE as vencido,
                    D.minimumcurricularcomponent,
                    D.curricularcomponentprice,
                    D.value
                FROM
                    acdContract A LEFT JOIN
                    acdLearningPeriod B ON ( B.courseId = A.courseId AND
                                             B.courseVersion = A.courseVersion AND
                                             B.turnId = A.turnId AND
                                             B.unitId = A.unitId AND
                                             B.periodId = \''. $data->periodId . '\' ) LEFT JOIN
                    finReceivableInvoice C ON ( C.periodId = \''.$data->periodId.'\' AND
                                                C.contractId = A.contractId AND
                                                C.incomeSourceId IN ( ' . ENROLL_INCOME_SOURCE_ID . ', ' . ENROLL_READMISSION_INCOME_SOURCE_ID . ') ) LEFT JOIN
                    finPrice D ON ( D.learningPeriodId = B.learningPeriodId )
                WHERE
                    A.contractId = '.$data->contractId . '
                ORDER BY 
                    D.startDate
                LIMIT 1';
        $return = $this->db->query( $sql ) ;
        if ( count($return) > 0 )
        {
            $ret->temPrecoNoPeriodo         = $return[0][0];
            $ret->inicioDaVigenciaDoPreco   = $return[0][1];
            $ret->temTaxaDeMatricula        = $return[0][2];
            $ret->taxaDeMatricula           = $return[0][3];
            $ret->saldoTitulo               = $return[0][4];
            $ret->tituloGerado              = $return[0][5];
            $ret->vencido                   = $return[0][6];
            $ret->qntDisciplinasPrecoTotal  = $return[0][7];
            $ret->valorDisciplinaIsolada    = $return[0][8];
            $ret->valorPeriodo              = $return[0][9];
            return $ret;
        }
    }
    
    public function checkMonthlyParcels($data)
    {
        $sql = 'SELECT
                    A.invoiceId, 
                    A.contractId,
                    A.personId,
                    A.courseId,
                    A.courseVersion,
                    A.periodId,
                    A.maturityDate,
                    A.parcelNumber,
                    A.incomeSourceId,
                    getIncomeSourceDescription(A.incomeSourceId),
                    A.value
                FROM
                    finReceivableInvoice A
                WHERE
                    A.incomeSourceId = '.INCOME_SOURCE_ID;
        
        if ( strlen ( $data->personId ) > 0 )
        {
            $sql .=  ' AND A.personId = ?::integer ';
            $args[] = $data->personId;
        }

        if ( strlen ( $data->contractId ) > 0 )
        {
            $sql .=  ' AND A.contractId = ?::integer ';
            $args[] = $data->contractId;
        }
        
        if ( strlen ( $data->periodId ) >  0 )
        {
            $sql .=  ' AND A.periodId = ? ';
            $args[] = $data->periodId;
        }

        if ( strlen ( $data->courseId ) >  0 )
        {
            $sql .=  ' AND A.courseId = ? ';
            $args[] = $data->courseId;
        }

        if ( strlen ( $data->courseVersion ) >  0 )
        {
            $sql .=  ' AND A.courseVersion = ?::integer ';
            $args[] = $data->courseVersion;
        }

        if ( strlen ( $data->unitId ) >  0 )
        {
            $sql .=  ' AND A.unitId = ?::integer ';
            $args[] = $data->unitId;
        }
        
        if ( count($args) > 0 )
        {
            $sql = SAGU::prepare($sql, $args);
            $result = $this->db->query($sql);
            if ( count($result) > 0 )
            {
                foreach ( $result as $linhas => $linha )
                {
                    unset($obj);
                    $obj->invoiceId                 = $linha[0]; 
                    $obj->contractId                = $linha[1];
                    $obj->personId                  = $linha[2];
                    $obj->courseId                  = $linha[3];
                    $obj->courseVersion             = $linha[4];
                    $obj->periodId                  = $linha[5];
                    $obj->maturityDate              = $linha[6];
                    $obj->parcelNumber              = $linha[7];
                    $obj->incomeSourceId            = $linha[8];
                    $obj->incomeSourceDescription   = $linha[9];
                    $obj->value                     = $linha[10];
                    $res[$obj->invoiceId] = $obj;
                }
                return $res;
            }
        }
    }
}
?>
