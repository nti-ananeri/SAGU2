<?php
/**
 *
 * This file handles the connection and actions for acdContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 * Class edited on 15/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdContract table
 **/
class BusinessAcademicBusContractGraduation extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function getContract($contractId)
    {
		$sql = "SELECT 
			L.personid,
			L.name,
			L.shortname,
			L.cnpj,
			C.name||'-'||C.acronym,
			LC.name,
			LC.stateid,
			L.location,
			L.number,
			L.shortname,
			L.neighborhood,
			CO.contractid,
			CURO.courseversion,
			CUR.name,
			CT.description,		
            PS.personId,
			PS.name,
			(SELECT content FROM basdocument WHERE personid = PS.personid AND documentTypeId = (SELECT value FROM basConfig WHERE parameter = 'CPF_CODE')::integer) as cpf,
			(SELECT content FROM basdocument WHERE personid = PS.personid AND documentTypeId = (SELECT value FROM basConfig WHERE parameter = 'RG_CODE')::integer) as rg,
			PM.description,
			PS.location,
			PS.number,
			PS.neighborhood,
			PS.zipCode,
			PSC.name,
			PS.locationWork,
			PS.neighborhoodWork,
			PS.residentialphone,
			PS.cellphone,
			PS.workphone,
			PS.email,
			CO.maturityday,
			CO.parcelsNumber,
			PSR.name,
			(SELECT content FROM basdocument WHERE personid = PSR.personid AND documentTypeId =  (SELECT value FROM basConfig WHERE parameter = 'CPF_CODE')::integer) as cpf,
			(SELECT content FROM basdocument WHERE personid = PSR.personid AND documentTypeId =  (SELECT value FROM basConfig WHERE parameter = 'RG_CODE')::integer) as rg,
			PMR.description,
			PSR.location,
			PSR.number,
			PSR.neighborhood,
			PSR.zipCode,
			PSRC.name,
			PSR.locationWork,
			PSR.neighborhoodWork,
			PSR.residentialphone,
			PSR.cellphone,
			PSR.workphone,
			PSR.email
			FROM 
			acdcontract CO 
				INNER JOIN acdcourseoccurrence CURO ON CO.courseid = CURO.courseid AND CO.courseversion = CURO.courseversion AND  CO.turnid = CURO.turnid AND  CO.unitid = CURO.unitid 
				INNER JOIN acdcourse CUR ON CUR.courseid = CURO.courseid
				INNER JOIN basturn CT ON CT.turnid = CURO.turnid
				INNER JOIN basphysicalpersonstudent PS ON PS.personid = CO.personid
				 LEFT JOIN basmaritalstatus PM ON PS.maritalstatusid = PM.maritalstatusid
				 LEFT JOIN bascity PSC ON PSC.cityid = PS.cityid
				 LEFT JOIN basphysicalperson PSR ON PSR.personid = (CASE WHEN PS.responsablelegalid IS NULL THEN PS.personid ELSE PS.responsablelegalid END )
				 LEFT JOIN bascity PSRC ON PSRC.cityid = PSR.cityid
				 LEFT JOIN basmaritalstatus PMR ON PSR.maritalstatusid = PMR.maritalstatusid
				 INNER JOIN bascompanyconf C ON 1 = 1
				 INNER JOIN baslegalperson L ON C.personid = L.personid 
				 INNER JOIN bascity LC ON LC.cityid = L.cityid ";
		$sql .= " WHERE companyid = (SELECT value FROM basconfig WHERE parameter ILIKE 'DEFAULT_COMPANY_CONF')::integer"; 
		if($contractId)
		{
			$sql .= ' AND CO.contractId = '.$contractId;
		}
		$sql .= ' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48 ';

        $db     = $this->getDatabase();
        $result = $db->query($sql);
        
		list ( $contract->company->personId,
			   $contract->company->name,
               $contract->company->acronym,
			   $contract->company->cnpj,
			   $contract->company->fakeName,
			   $contract->company->cityName,
			   $contract->company->stateId,
			   $contract->company->location,
			   $contract->company->number,
			   $contract->company->shortname,
			   $contract->company->neighborhood,
			   $contract->contract->contractId,
               $contract->contract->courseVersion,
               $contract->contract->courseName,
               $contract->contract->turn,
               /*$contract->contract->unit,
   			   $contract->contract->learningPeriod,*/
               $contract->contract->personId,
		       $contract->contract->name,
			   $contract->contract->cpf,
			   $contract->contract->rg,
			   $contract->contract->maritalStatus,
			   $contract->contract->location,
			   $contract->contract->number,
			   $contract->contract->neighborhood,
			   $contract->contract->zipCode,
			   $contract->contract->cityName,
			   $contract->contract->locationWork,
			   $contract->contract->neighborhoodWork,
			   $contract->contract->residentialPhone,
			   $contract->contract->cellPhone,
			   $contract->contract->workPhone,
			   $contract->contract->email,
			   $contract->contract->maturityDay,
			   $contract->contract->parcelsNumber,
			   $contract->responsable->name,
			   $contract->responsable->cpf,
			   $contract->responsable->rg,
			   $contract->responsable->maritalStatus,
			   $contract->responsable->location,
			   $contract->responsable->number,
			   $contract->responsable->neighborhood,
			   $contract->responsable->zipcode,
			   $contract->responsable->cityName,
			   $contract->responsable->locationWork,
			   $contract->responsable->neighborhoodWork,
			   $contract->responsable->residentialPhone,
			   $contract->responsable->cellPhone,
			   $contract->responsable->workPhone,
			   $contract->responsable->email) = $result[0];
        return $contract; 
    }
}

?>
