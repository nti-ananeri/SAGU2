<?php
/**
 *
 * This file handles the connection and actions for acdCurriculumConcurrence table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCurriculumConcurrence table
 **/
class BusinessAcademicBusCurriculumConcurrence extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculumConcurrence()
    {
        return 'Not implemented';
    }
    
    /**
     *
     **/
    public function getCurriculumConcurrence()
    {
        return 'Not implemented'; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculumConcurrence($filters)
    {
        $sql = ' SELECT A.curriculumOutId,
                        B.courseId                          AS courseIdOut,
                        B.courseVersion                     AS courseVersionOut,
                        D.shortName                         AS courseNameOut,
                        B.curricularComponentId             AS curricularComponentIdOut,
                        B.curricularComponentVersion        AS curricularComponentVersionIdOut,
                        E.shortname                         AS curricularComponentNameOut,
                        A.curriculumInId,
                        B2.courseId                         AS courseIdIn,
                        B2.courseVersion                    AS courseVersionIn,
                        D2.shortName                        AS courseNameIn,
                        B2.curricularComponentId            AS curricularComponentIdIn,
                        B2.curricularComponentVersion       AS curricularComponentVersionIdIn,
                        E2.shortname                        AS curricularComponentNameIn
                   FROM acdCurriculumConcurrence A
             INNER JOIN acdCurriculum B
                     ON (A.curriculumOutId = B.curriculumId)
             INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
             INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId)
             INNER JOIN acdCurriculum B2
                     ON (A.curriculumInId = B2.curriculumId)
             INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
             INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) ';

        if ( strlen((string)$filters->curriculumOutId) > 0 )
        {
            $where .= ' AND A.curriculumOutId = ?';
            $args[] = $filters->curriculumOutId;
        }
        if ( strlen((string)$filters->curriculumInId) > 0 )
        {
            $where .= ' AND A.curriculumInId = ?';
            $args[] = $filters->curriculumInId;
        }
        //CurriculumOut
        if ( strlen((string)$filters->courseOutId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseOutId;
        }
        if ( strlen((string)$filters->courseOutVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseOutVersion;
        }
        if ( strlen((string)$filters->unitOutId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->unitOutId;
        }
        if ( strlen((string)$filters->turnOutId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->turnOutId;
        }
        if ( strlen((string)$filters->curricularComponentOutId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentOutId;
        }
        if ( strlen((string)$filters->curricularComponentOutVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentOutVersion;
        }
        //CurriculumIn
        if ( strlen((string)$filters->courseInId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseInId;
        }
        if ( strlen((string)$filters->courseInVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseInVersion;
        }
        if ( strlen((string)$filters->unitInId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->unitInId;
        }
        if ( strlen((string)$filters->turnInId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->turnInId;
        }
        if ( strlen((string)$filters->curricularComponentInId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentInId;
        }
        if ( strlen((string)$filters->curricularComponentInVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentInVersion;
        }

        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }


        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.curriculumOutId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function searchCurriculumConcurrenceFormGrid($filters)
    {
        $sql = ' SELECT A.curriculumOutId,
                        B.courseId || \' / \' || B.courseVersion as courseId_VersionOut,
                        D.shortName                         AS courseNameOut,
                        B.curricularComponentId || \' / \' || B.curricularComponentVersion as curricularComponentId_VersionOut,
                        E.shortname                         AS curricularComponentNameOut,
                        A.curriculumInId,
                        B2.courseId || \' / \' || B2.courseVersion as courseId_VersionIn,
                        D2.shortName                        AS courseNameIn,
                        B2.curricularComponentId || \' / \' || B2.curricularComponentVersion as curricularComponentId_VersionIn,
                        E2.shortname                        AS curricularComponentNameIn
                   FROM acdCurriculumConcurrence A
             INNER JOIN acdCurriculum B
                     ON (A.curriculumOutId = B.curriculumId)
             INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
             INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId)
             INNER JOIN acdCurriculum B2
                     ON (A.curriculumInId = B2.curriculumId)
             INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
             INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) ';

        if ( strlen((string)$filters->curriculumOutId) > 0 )
        {
            $where .= ' AND A.curriculumOutId = ?';
            $args[] = $filters->curriculumOutId;
        }
        if ( strlen((string)$filters->curriculumInId) > 0 )
        {
            $where .= ' AND A.curriculumInId = ?';
            $args[] = $filters->curriculumInId;
        }
        //CurriculumOut
        if ( strlen((string)$filters->courseOutId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseOutId;
        }
        if ( strlen((string)$filters->courseOutVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseOutVersion;
        }
        if ( strlen((string)$filters->unitOutId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->unitOutId;
        }
        if ( strlen((string)$filters->turnOutId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->turnOutId;
        }
        if ( strlen((string)$filters->curricularComponentOutId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentOutId;
        }
        if ( strlen((string)$filters->curricularComponentOutVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentOutVersion;
        }
        //CurriculumIn
        if ( strlen((string)$filters->courseInId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseInId;
        }
        if ( strlen((string)$filters->courseInVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseInVersion;
        }
        if ( strlen((string)$filters->unitInId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->unitInId;
        }
        if ( strlen((string)$filters->turnInId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->turnInId;
        }
        if ( strlen((string)$filters->curricularComponentInId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentInId;
        }
        if ( strlen((string)$filters->curricularComponentInVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentInVersion;
        }

        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }


        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.curriculumOutId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculumConcurrence($data)
    {
        $sql = 'INSERT INTO acdCurriculumConcurrence
                            (curriculumOutId,
                             curriculumInId)
                     VALUES (?,
                             ?)';

        $args = array( 
                       $data->curriculumOutId,
                       $data->curriculumInId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculumConcurrence($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $curriculumOutId (string): Primary key for deletion
     * @param $curriculumInId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculumConcurrence($curriculumOutId, $curriculumInId)
    {
        $sql = 'DELETE FROM acdCurriculumConcurrence
                      WHERE curriculumOutId = ?
                        AND curriculumInId  = ?';

        $pk = array(
                     $curriculumOutId,
                     $curriculumInId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }
   
    /**
     * Verify if a curriculum have a concurrence
     * 
     * @curriculumInId (int): Curriculum that entered in situation for a other
     * 
     * @return (int): Curriculum that out because the new curriculum.
     */
    public function ifHaveConcurrence($curriculumInId)
    {
        $sql = ' SELECT curriculumOutId
                   FROM acdCurriculumConcurrence
                  WHERE curriculumInId = ? ';

        $db = $this->getDatabase();
    
        $args = array($curriculumInId);
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
