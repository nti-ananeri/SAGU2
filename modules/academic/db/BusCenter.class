<?php
/**
 *
 * This file handles the connection and actions for basCenter table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusCenter extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCenter()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT centerId,
                       name   
                  FROM acdCenter   
              ORDER BY name ';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $centerId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCenter($centerId)
    {
        $sql = 'SELECT A.centerId,
                       A.name,
                       A.shortName,
                       A.directorId,
                       B.name AS directorName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCenter A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.directorId)
                 WHERE centerId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $centerId));
        //$db->close();

        $center = new acdCenter();
        list ( $center->centerId,
               $center->name,
               $center->shortName,
               $center->directorId,
               $center->directorName,
               $center->userName,
               $center->dateTime,
               $center->ipAddress ) = $result[0];

        return $center; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCenter($filters)
    {
        $sql= 'SELECT A.centerId,
                      A.name,
                      A.shortName,
                      A.directorId,
                      B.name AS directorName
                 FROM acdCenter A
       LEFT JOIN ONLY basPerson B
                   ON (B.personId = A.directorId)';

        if ( strlen((string)$filters->centerId) > 0 )
        {
            $where .= ' AND A.centerId = ? ';
            $args[] = $filters->centerId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name.'%';
        }
        if ( strlen((string)$filters->shortName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ';
            $args[] = $filters->shortName.'%';
        }
        if ( strlen((string)$filters->directorId) > 0 )
        {
            $where .= ' AND A.directorId = ? ';
            $args[] = $filters->directorId;
        }
        if ( strlen((string)$filters->directorName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->directorName .'%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY A.name,
                           A.shortName ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCenter($data)
    {
        $sql = 'INSERT INTO acdCenter
                            (name,
                             shortName,
                             directorId)
                     VALUES (?,?,?) ';

        $args = array( $data->name,
                       $data->shortName,
                       $data->directorId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateCenter($data)
    {
        $sql = 'UPDATE acdCenter
                   SET name       = ?,
                       shortName  = ?,
                       directorId = ?
                 WHERE centerId = ? ';

        $args = array( $data->name,
                       $data->shortName,
                       $data->directorId,
                       $data->centerId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteCenter($centerId)
    {
        $sql = 'DELETE FROM acdCenter
                      WHERE centerId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $centerId));
        //$db->close();
        return $result;
    }
}
?>
