<?php
/**
 *
 * This file handles the connection and actions for acdCondition table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCondition table
 **/
class BusinessAcademicBusCondition extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCondition()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $conditionId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCondition($conditionId)
    {
        $sql = 'SELECT A.conditionId,
                       A.curriculumId,
                       B.courseId                   AS curriculumCourseId,
                       B.courseVersion              AS curriculumCourseVersion,
                       C.name                       AS curriculumCourseName,
                       B.curricularComponentId      AS curriculumCurricularComponentId,
                       B.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       D.name                       AS curriculumCurricularComponentName,
                       A.conditionCurriculumId,
                       E.courseId                   AS conditionalCurriculumCourseId,
                       E.courseVersion              AS conditionalCurriculumCourseVersion, 
                       F.name                       AS conditionalCurriculumCourseName,
                       E.curricularComponentId      AS conditionalCurriculumCurricularComponentId,
                       E.curricularComponentVersion AS conditionalCurriculumCurricularComponentVersion,
                       G.name                       AS conditionalCurriculumCurricularComponentName,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description                AS educationAreaDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       I.description as curriculumTurnDescription,
                       J.description as curriculumUnitDescription
                  FROM acdCondition A
             LEFT JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN acdCurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = B.curricularComponentId
                        AND G.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)
            INNER JOIN basTurn I
                    ON (I.turnId = B.turnId)
            INNER JOIN basUnit J
                    ON (J.unitId = B.unitId)
                 WHERE A.conditionId = ?';

        $pk = array(
                     $conditionId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $condition = new AcdCondition();

        list ( $condition->conditionId,
               $condition->curriculumId,
               $condition->curriculumCourseId,
               $condition->curriculumCourseVersion,
               $condition->curriculumCourseName,
               $condition->curriculumCurricularComponentId,
               $condition->curriculumCurricularComponentVersion,
               $condition->curriculumCurricularComponentName,
               $condition->conditionCurriculumId,
               $condition->conditionalCurriculumCourseId,
               $condition->conditionalCurriculumCourseVersion,
               $condition->conditionalCurriculumCourseName,
               $condition->conditionalCurriculumCurricularComponentId,
               $condition->conditionalCurriculumCurricularComponentVersion,
               $condition->conditionalCurriculumCurricularComponentName,
               $condition->type,
               $condition->credits,
               $condition->numberHour,
               $condition->educationAreaId,
               $condition->educationAreaDescription,
               $condition->userName,
               $condition->dateTime,
               $condition->ipAddress,
               $condition->curriculumTurnDescription,
               $condition->curriculumUnitDescription ) = $result[0];

        return $condition; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCondition($filters)
    {
        $sql = 'SELECT A.conditionId,
                       A.curriculumId,
                       B.courseId                   AS curriculumCourseId,
                       B.courseVersion              AS curriculumCourseVersion,
                       C.name                       AS curriculumCourseName,
                       B.curricularComponentId      AS curriculumCurricularComponentId,
                       B.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       D.name                       AS curriculumCurricularComponentName,
                       A.conditionCurriculumId,
                       E.courseId                   AS conditionalCurriculumCourseId,
                       E.courseVersion              AS conditionalCurriculumCourseVersion, 
                       F.name                       AS conditionalCurriculumCourseName,
                       E.curricularComponentId      AS conditionalCurriculumCurricularComponentId,
                       E.curricularComponentVersion AS conditionalCurriculumCurricularComponentVersion,
                       G.name                       AS conditionalCurriculumCurricularComponentName,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description                AS educationAreaDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCondition A
                  
             LEFT JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
                        
             LEFT JOIN acdCurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = E.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = E.curricularComponentId
                        AND G.curricularComponentVersion = E.curricularComponentVersion)
                        
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)';

        if ( strlen((string)$filters->conditionId) > 0 )
        {
            $where .= ' AND A.conditionId = ?';
            $args[] = $filters->conditionId;
        }
        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->curriculumCourseId) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $filters->curriculumCourseId;
        }
        if ( strlen((string)$filters->curriculumCourseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->curriculumCourseVersion;
        }
        if ( strlen((string)$filters->curriculumCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curriculumCourseName . '%';
        }
        if ( strlen((string)$filters->curriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId ILIKE ?';
            $args[] = $filters->curriculumCurricularComponentId;
        }
        if ( strlen((string)$filters->curriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curriculumCurricularComponentVersion;
        }
        if ( strlen((string)$filters->curriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curriculumCurricularComponentName . '%';
        }
        if ( strlen((string)$filters->conditionCurriculumId) > 0 )
        {
            $where .= ' AND A.conditionCurriculumId = ?';
            $args[] = $filters->conditionCurriculumId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseId) > 0 )
        {
            $where .= ' AND E.courseId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCourseId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->conditionalCurriculumCourseVersion;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->conditionalCurriculumCourseName . '%';
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND E.curricularComponentVersion = ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentVersion;
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->conditionalCurriculumCurricularComponentName . '%';
        }
        if ( strlen((string)$filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }
        if ( strlen((string)$filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen((string)$filters->numberHour) > 0 )
        {
            $where .= ' AND A.numberHour = ?';
            $args[] = $filters->numberHour;
        }
        if ( strlen((string)$filters->educationAreaId) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $filters->educationAreaId;
        }
        if ( strlen((string)$filters->educationAreaDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(H.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->educationAreaDescription . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY C.name,
                            D.name,
                            F.name,
                            G.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function searchShortCondition($filters)
    {
        $sql = 'SELECT A.conditionId,
                       B.courseId || \'/\' || B.courseVersion,
                       B.curricularComponentId || \'/\' || B.curricularComponentVersion,
                       D.name,
                       E.courseId || \'/\' || E.courseVersion, 
                       E.curricularComponentId || \'/\' || E.curricularComponentVersion,
                       G.name,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description
                  FROM acdCondition A
             LEFT JOIN acdCurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN acdCurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = E.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = E.curricularComponentId
                        AND G.curricularComponentVersion = E.curricularComponentVersion)
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)';

        if ( strlen((string)$filters->conditionId) > 0 )
        {
            $where .= ' AND A.conditionId = ?';
            $args[] = $filters->conditionId;
        }
        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->curriculumCourseId) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $filters->curriculumCourseId;
        }
        if ( strlen((string)$filters->curriculumCourseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->curriculumCourseVersion;
        }
        if ( strlen((string)$filters->curriculumCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curriculumCourseName . '%';
        }
        if ( strlen((string)$filters->curriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId ILIKE ?';
            $args[] = $filters->curriculumCurricularComponentId;
        }
        if ( strlen((string)$filters->curriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curriculumCurricularComponentVersion;
        }
        if ( strlen((string)$filters->curriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curriculumCurricularComponentName . '%';
        }
        if ( strlen((string)$filters->conditionCurriculumId) > 0 )
        {
            $where .= ' AND A.conditionCurriculumId = ?';
            $args[] = $filters->conditionCurriculumId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseId) > 0 )
        {
            $where .= ' AND E.courseId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCourseId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->conditionalCurriculumCourseVersion;
        }
        if ( strlen((string)$filters->conditionalCurriculumCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->conditionalCurriculumCourseName . '%';
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentId;
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND E.curricularComponentVersion = ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentVersion;
        }
        if ( strlen((string)$filters->conditionalCurriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->conditionalCurriculumCurricularComponentName . '%';
        }
        if ( strlen((string)$filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }
        if ( strlen((string)$filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen((string)$filters->numberHour) > 0 )
        {
            $where .= ' AND A.numberHour = ?';
            $args[] = $filters->numberHour;
        }
        if ( strlen((string)$filters->educationAreaId) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $filters->educationAreaId;
        }
        if ( strlen((string)$filters->educationAreaDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(H.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->educationAreaDescription . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.curricularComponentId,
                            E.curricularComponentId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCondition($data)
    {
        $sql = 'INSERT INTO acdCondition
                            (curriculumId,
                             conditionCurriculumId,
                             type,
                             credits,
                             numberHour,
                             educationAreaId)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->curriculumId,
                       $data->conditionCurriculumId,
                       $data->type,
                       $data->credits,
                       $data->numberHour,
                       $data->educationAreaId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCondition($data)
    {
        $sql = 'UPDATE acdCondition
                   SET curriculumId          = ?,
                       conditionCurriculumId = ?,
                       type                  = ?,
                       credits               = ?,
                       numberHour            = ?,
                       educationAreaId       = ?
                 WHERE conditionId = ?';

        $args = array( 
                       $data->curriculumId,
                       $data->conditionCurriculumId,
                       $data->type,
                       $data->credits,
                       $data->numberHour,
                       $data->educationAreaId,
                       $data->conditionId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $conditionId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCondition($conditionId)
    {
        $sql = 'DELETE FROM acdCondition
                      WHERE conditionId = ?';

        $pk = array(
                     $conditionId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    /**
     * Check conditions from type 'C'
     *
     * @param $group (array): Array containing all groups
     * @param $contractId (integer): Student course and course version
     *
     * @return (String): True if succeed, otherwise False
     *
     **/
    public function checkGroupCondition($group, $contractId, $learningPeriodId=null, $form=null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = $this->getDatabase();
        
        $busEnroll = $MIOLO->getBusiness($module, 'BusEnroll');

        $error = false;
        
        if (count($group) > 0)
        {
            foreach ( $group as $groupId )
            {

                $sql    = 'SELECT curriculumId
                             FROM acdGroup
                            WHERE groupId = ?';

                $result = $db->query(SAGU::prepare($sql, $groupId));
                
                $curriculum[] = $result[0][0];

            }

            foreach ( $group as $groupId )
            {

                $sql    = 'SELECT curricularComponentId,
                                  curricularComponentVersion
                             FROM acdCurriculum
                            WHERE curriculumId IN (
                                  SELECT curriculumId
                                    FROM acdGroup
                                  WHERE groupId = ? )';

                $result = $db->query(SAGU::prepare($sql, $groupId));

                list ( $curricularComponentId,
                       $curricularComponentVersion ) = $result[0];

                $sql    = 'SELECT courseId,
                                  courseVersion,
                                  turnId,
                                  unitId
                             FROM acdContract
                            WHERE contractId = ?';

                $result = $db->query(SAGU::prepare($sql, $contractId));

                list ( $courseId,
                       $courseVersion,
                       $turnId,
                       $unitId ) = $result[0];

                $sql    = 'SELECT curriculumId
                             FROM acdCurriculum
                            WHERE courseId      = ?
                              AND courseVersion = ?
                              AND turnId        = ?
                              AND unitId        = ?
                              AND curricularComponentId      = ?
                              AND curricularComponentVersion = ?
                              AND endDate IS NULL';

                $args   = array (
                                  $courseId,
                                  $courseVersion,
                                  $turnId,
                                  $unitId,
                                  $curricularComponentId,
                                  $curricularComponentVersion
                                );

                $result = $db->query(SAGU::prepare($sql, $args));

                $curriculumId = $result[0][0];
                                    
                $filters->curriculumId = $curriculumId;
                $filters->type         = 'C';
                $result                = $this->searchCondition($filters);

                if ( $result == NULL )
                {
                    unset($filters->curriculumId);
                    $filters->conditionCurriculumId = $curriculumId;
                    $result                         = $this->searchCondition($filters);
                }

                unset($msg1);
                if ( count($result)>0 )
                {
                    foreach ( $result as $row2 )
                    {
                        if ( (in_array($row2[1],$curriculum) && !in_array($row2[8],$curriculum)) || 
                             (!in_array($row2[1],$curriculum) && in_array($row2[8],$curriculum)) )
                        {
                            if ($learningPeriodId != null)
                            {
                                if ( !$busEnroll->isUnblocked($contractId, $learningPeriodId, $row2[1]) && 
                                     !$busEnroll->isUnblocked($contractId, $learningPeriodId, $row2[8]) ) 
                                {
                                    $error = true;
                                }
                            }
                            else
                            {
                                $error = true;
                            }
                            
                            if ($error)
                            {
                                $msg1 .= _M('The curricular components below must be coursed together',$module) . '<br>';
                                $msg1 .= $row2[5] . '/' . $row2[6] . ' - ' . $row2[7] . '<br>';
                                $msg1 .= $row2[12] . '/' . $row2[13] . ' - ' . $row2[14] . '<br>';
                                $caption1 = _M('Condition error',$module);
                                
                                if ($form == null)
                                {
                                    $MIOLO->error( $msg1, 'RETURN', $caption1 );
                                }
                                else
                                {
                                    $form->addError( $msg1 );
                                }
                            }
                        }
                    }
                }
            }//foreach
        }    
        return $error;
    }
}

?>
