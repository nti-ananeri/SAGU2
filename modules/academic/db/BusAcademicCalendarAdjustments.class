<?php
/**
 *
 * This file handles the connection and actions for acdAcademicCalendarAdjustments table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdAcademicCalendarAdjustments table
 **/
class BusinessAcademicBusAcademicCalendarAdjustments extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listAcademicCalendarAdjustments()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $academicCalendarAdjustmentsId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getAcademicCalendarAdjustments($academicCalendarAdjustmentsId)
    {
        $sql = 'SELECT A.academicCalendarAdjustmentsId,
                       A.learningPeriodId,
                       TO_CHAR(A.occurrenceDate,\'' . MASK_DATE . '\'),
                       A.weekDayId,
                       A.turnId,
                       D.courseId,
                       D.courseVersion,
                       C.groupId,
                       A.scheduleId,
                       A.professorId,
                       A.inOut,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdAcademicCalendarAdjustments A
            INNER JOIN acdSchedule B
                    ON ( A.scheduleId = B.scheduleId )
            INNER JOIN acdGroup C
                    ON ( B.groupId = C.groupId )
            INNER JOIN acdLearningPeriod D
                    ON ( D.learningPeriodId = C.learningPeriodId )
                 WHERE A.academicCalendarAdjustmentsId = ?';

        $pk = array(
                     $academicCalendarAdjustmentsId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $academicCalendarAdjustments = new AcdAcademicCalendarAdjustments();

        list ( $academicCalendarAdjustments->academicCalendarAdjustmentsId,
               $academicCalendarAdjustments->learningPeriodId,
               $academicCalendarAdjustments->occurrenceDate,
               $academicCalendarAdjustments->weekDayId,
               $academicCalendarAdjustments->turnId,
               $academicCalendarAdjustments->courseId,
               $academicCalendarAdjustments->courseVersion,
               $academicCalendarAdjustments->groupId,
               $academicCalendarAdjustments->scheduleId,
               $academicCalendarAdjustments->professorId,
               $academicCalendarAdjustments->inOut,
               $academicCalendarAdjustments->userName,
               $academicCalendarAdjustments->dateTime,
               $academicCalendarAdjustments->ipAddress ) = $result[0];

        return $academicCalendarAdjustments; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchAcademicCalendarAdjustments($filters)
    {
        $sql = 'SELECT A.academicCalendarAdjustmentsId,
                       A.learningPeriodId,
                       TO_CHAR(A.occurrenceDate,\'' . MASK_DATE . '\'),
                       A.weekDayId,
                       B.description,
                       A.turnId,
                       D.description,
                       A.professorId,
                       E.name,
                       A.inOut,
                       G.name AS courseName,
                       F.courseversion,
                       F.unitId,
                       N.curricularComponentId,
                       N.name as curricularComponentDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.scheduleId
                  FROM acdAcademicCalendarAdjustments A
            INNER JOIN basWeekDay B
                    ON (B.weekDayId = A.weekDayId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
            INNER JOIN basPhysicalPersonProfessor E
                    ON (E.personId = A.professorId)
            INNER JOIN acdLearningPeriod F
                    ON (A.learningPeriodId = F.learningPeriodId)
            INNER JOIN acdCourse G
                    ON (F.courseId = G.courseId)
            INNER JOIN acdSchedule I
                    ON (I.scheduleId = A.scheduleId)
            INNER JOIN acdScheduleLearningPeriod H
                    ON (I.scheduleLearningPeriodId = H.scheduleLearningPeriodId)
            INNER JOIN acdScheduleProfessor J
                    ON (J.scheduleId  = I.scheduleId AND
                        J.professorId = A.professorId AND ( A.occurrenceDate >= J.beginDate AND A.occurrenceDate <= J.endDate))
            INNER JOIN acdGroup L
                    ON (L.groupId = I.groupId)
            INNER JOIN acdCurriculum M
                    ON (M.curriculumId = L.curriculumId)
            INNER JOIN acdCurricularComponent N
                    ON (N.curricularComponentId = M.curricularComponentId AND
                        N.curricularComponentVersion = M.curricularComponentVersion)';

        if ( strlen((string)$filters->academicCalendarAdjustmentsId) > 0 )
        {
            $where .= ' AND A.academicCalendarAdjustmentsId = ?';
            $args[] = $filters->academicCalendarAdjustmentsId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->occurrenceDate) > 0 )
        {
            $where .= ' AND A.occurrenceDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->occurrenceDate;
        }
        if ( strlen((string)$filters->weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId = ?';
            $args[] = $filters->weekDayId;
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ?';
            $args[] = $filters->professorId;
        }
        if ( strlen((string)$filters->inOut) > 0 )
        {
            $where .= ' AND A.inOut = ?';
            $args[] = $filters->inOut;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND F.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND F.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND F.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND F.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND N.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.occurrenceDate';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertAcademicCalendarAdjustments($data)
    {
        $sql = 'INSERT INTO acdAcademicCalendarAdjustments
                            (learningPeriodId,
                             occurrenceDate,
                             weekDayId,
                             turnId,
                             scheduleId,
                             professorId,
                             inOut)
                     VALUES (?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->learningPeriodId,
                       $data->occurrenceDate,
                       $data->weekDayId,
                       $data->turnId,
                       $data->scheduleId,
                       $data->professorId,
                       $data->inOut
                     );

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAcademicCalendarAdjustments($data)
    {
        $sql = 'UPDATE acdAcademicCalendarAdjustments
                   SET learningPeriodId = ?,
                       occurrenceDate   = TO_DATE(?,\'' . MASK_DATE . '\'),
                       weekDayId        = ?,
                       turnId           = ?,
                       professorId      = ?,
                       scheduleId       = ?,
                       inOut            = ?
                 WHERE academicCalendarAdjustmentsId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->occurrenceDate,
                       $data->weekDayId,
                       $data->turnId,
                       $data->professorId,
                       $data->scheduleId,
                       $data->inOut,
                       $data->academicCalendarAdjustmentsId
                     );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $academicCalendarAdjustmentsId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAcademicCalendarAdjustments($academicCalendarAdjustmentsId)
    {
        $sql = 'DELETE FROM acdAcademicCalendarAdjustments
                      WHERE academicCalendarAdjustmentsId = ?';

        $pk = array(
                     $academicCalendarAdjustmentsId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
