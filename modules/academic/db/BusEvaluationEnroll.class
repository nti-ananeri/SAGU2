<?php
/**
 *
 * This file handles the connection and actions for acdEvaluationEnroll table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 10/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdEvaluationEnroll table
 **/
class BusinessAcademicBusEvaluationEnroll extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessAcademicBusEvaluationEnroll()
    {
        $this->db = $this->getDatabase();
    }
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEvaluationEnroll()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $evaluationEnrollId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEvaluationEnroll($evaluationId,$enrollId)
    {
        $sql = 'SELECT C.professorId,
                       D.name AS professorName,
                       A.evaluationId,
                       A.enrollId,
                       A.note,
                       A.concept,
                       A.descritive,
                       A.isNotAppear,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdEvaluationEnroll A
             INNER JOIN acdEvaluation B
                     ON (A.evaluationId = B.evaluationId) 
              LEFT JOIN acdScheduleProfessor C
                     ON (B.scheduleProfessorId = C.scheduleProfessorId)
         LEFT JOIN ONLY basPhysicalPersonProfessor D
                     ON (D.personId = C.professorId)
                 WHERE A.evaluationId = ?
                   AND A.enrollId = ?';

        $db     = $this->getDatabase();
        
        $args = array($evaluationId,
                        $enrollId);

        $result = $this->db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $evaluationEnroll = new acdEvaluationEnroll();

        list ( $evaluationEnroll->professorId,
               $evaluationEnroll->professorName,
               $evaluationEnroll->evaluationId,
               $evaluationEnroll->enrollId,
               $evaluationEnroll->note,
               $evaluationEnroll->concept,
               $evaluationEnroll->descritive,
               $evaluationEnroll->isNotAppear,
               $evaluationEnroll->userName,
               $evaluationEnroll->dateTime,
               $evaluationEnroll->ipAddress ) = $result[0];

        return $evaluationEnroll; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEvaluationEnroll($filters)
    {
        $sql = 'SELECT A.evaluationId,
                        B.description,
                        A.enrollId,
                        A.note,
                        A.concept,
                        A.descritive,
                        A.isNotAppear,
                        B.scheduleProfessorId,
                        C.professorId,
                        D.name AS professorName
                   FROM acdEvaluationEnroll A
             INNER JOIN acdEvaluation B
                     ON (A.evaluationId = B.evaluationId) 
              LEFT JOIN acdScheduleProfessor C
                     ON (B.scheduleProfessorId = C.scheduleProfessorId)
         LEFT JOIN ONLY basPhysicalPersonProfessor D
                     ON (D.personId = C.professorId)';

        if ( strlen((string)$filters->evaluationId) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $filters->evaluationId;
        }
        if ( strlen((string)$filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }
        if ( strlen((string)$filters->note) > 0 )
        {
            $where .= ' AND A.note = ?';
            $args[] = $filters->note;
        }
        if ( strlen((string)$filters->concept) > 0 )
        {
            $where .= ' AND TO_ASCII(A.concept) ILIKE ?';
            $args[] = $filters->concept . '%';
        }
        if ( strlen((string)$filters->descritive) > 0 )
        {
            $where .= ' AND TO_ASCII(A.descritive) ILIKE TO_ASCII(?)';
            $args[] = $filters->descritive . '%';
        }
        if ( strlen((string)$filters->isNotAppear) > 0 )
        {
            $where .= ' AND A.isNotAppear = ?';
            $args[] = $filters->isNotAppear;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND C.professorId = ?';
            $args[] = $filters->professorId;
        }
        if ( strlen((string)$filters->professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->professorName . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.description';

            $db = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEvaluationEnroll($data)
    {
        $sql    = 'INSERT INTO acdEvaluationEnroll
                            (evaluationId,
                             enrollId ';
        $values = '?,?';

        $args = array( $data->evaluationId,
                       $data->enrollId     );

        if ( strlen((string)$data->note) > 0 )
        {
            $sql    .= ' , note ';
            $values .= ',?';
            $args[]  = $data->note;
        }

        if ( strlen((string)$data->concept) > 0 )
        {
            $sql    .= ' , concept ';
            $values .= ',?';
            $args[]  = $data->concept;
        }

        if ( strlen((string)$data->descritive) > 0 )
        {
            $sql    .= ' , descritive ';
            $values .= ',?';
            $args[]  = $data->descritive;
        }

        if ( strlen((string)$data->isNotAppear) > 0 )
        {
            $sql    .= ' , isNotAppear ';
            $values .= ',?';
            $args[]  = $data->isNotAppear;
        }

        $sql .= ' ) VALUES ( ' . $values. ' )' ;

        $db     = $this->getDatabase();

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEvaluationEnroll($data)
    {
        $sql = 'UPDATE acdEvaluationEnroll
                   SET note          = ? ';

        $args = array( $data->note );

        if ( strlen((string)$data->concept) > 0 )
        {
            $sql    .= ' , concept       = ? ';
            $args[]  = $data->concept;
        }

        if ( strlen((string)$data->descritive) > 0 )
        {
            $sql    .= ' , descritive       = ? ';
            $args[]  = $data->descritive;
        }

        if ( strlen((string)$data->isNotAppear) > 0 )
        {
            $sql    .= ' , isNotAppear       = ? ';
            $args[]  = $data->isNotAppear;
        }

        $sql .= ' WHERE evaluationId  = ?
                    AND enrollId      = ?';

        $args[] = $data->evaluationId;
        $args[] = $data->enrollId;

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $evaluationEnrollId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEvaluationEnroll($evaluationId=null,$enrollId)
    {
        $sql = 'DELETE FROM acdEvaluationEnroll
                      WHERE enrollId = ?';

        $args = array($enrollId);

        if ( strlen((string)$evaluationId) > 0 )
        {
            $sql .= ' AND evaluationId = ? ';
            $args[] = $evaluationId;
        }

        $db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

}

?>
