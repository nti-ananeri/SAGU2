<?php
/**
 * Class to manipulate the acdSupervisedTraining table data.
 *
 * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusSupervisedTraining extends Business
{
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
    * Obtain the specified supervised training id data.
    * 
    * @param $data (object): acdSupervisedTraining object
    *
    * @return If the specified supervisedTrainingId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getSupervisedTraining($supervisedTrainingId)
    {
        $sql = '  SELECT A.supervisedTrainingId,
                         A.enrollId,
                         E.contractId,
                         C.groupId,
                         F.personId,
                         F.name,
                         A.description,
                         A.institutionId,
                         G.name as institutionName,
                         TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                         TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                         A.supervisorId,
                         H.name as supervisorName,
                         A.userName,
                         TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                         A.ipAddress
                    FROM acdSupervisedTraining A 
              INNER JOIN acdEnroll B
                      ON ( A.enrollId = B.enrollId )
              INNER JOIN acdGroup C
                      ON ( B.groupId = C.groupId )
              INNER JOIN acdLearningPeriod D
                      ON ( C.learningPeriodId = D.learningPeriodId )
              INNER JOIN acdContract E
                      ON ( B.contractId = E.contractId )
              INNER JOIN basPhysicalPersonStudent F
                      ON ( E.personId = F.personId )
              INNER JOIN basLegalPerson G
                      ON ( A.institutionId = G.personId )
          LEFT JOIN ONLY basPhysicalPerson H
                      ON ( A.supervisorId = H.personId )
                   WHERE A.supervisedTrainingId = ?  ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $supervisedTrainingId));

        $var    = new acdSupervisedTraining();
        
        list ( $var->supervisedTrainingId,
               $var->enrollId,
               $var->contractId,
               $var->groupId,
               $var->personId,
               $var->personName,
               $var->description,
               $var->institutionId,
               $var->institutionName,
               $var->beginDate,
               $var->endDate,
               $var->supervisorId,
               $var->supervisorName,
               $var->userName,
               $var->dateTime,
               $var->ipAddress ) = $result[0];

        return $var;
    }

    /**
     * Search for supervised training.
     *
     * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the syarch results.
     *
     */
    function searchSupervisedTraining($data)
    {
        $sql = '  SELECT A.supervisedTrainingId,
                         A.enrollId,
                         E.contractId,
                         C.groupId,
                         F.personId,
                         F.name,
                         A.description,
                         A.institutionId,
                         G.name as institutionName,
                         TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                         TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                         A.supervisorId,
                         H.name as supervisorName,
                         A.userName,
                         TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                         A.ipAddress
                    FROM acdSupervisedTraining A 
              INNER JOIN acdEnroll B
                      ON ( A.enrollId = B.enrollId )
              INNER JOIN acdGroup C
                      ON ( B.groupId = C.groupId )
              INNER JOIN acdLearningPeriod D
                      ON ( C.learningPeriodId = D.learningPeriodId )
              INNER JOIN acdContract E
                      ON ( B.contractId = E.contractId )
              INNER JOIN basPhysicalPersonStudent F
                      ON ( E.personId = F.personId )
              INNER JOIN basLegalPerson G
                      ON ( A.institutionId = G.personId )
          LEFT JOIN ONLY basPhysicalPerson H
                      ON ( A.supervisorId = H.personId )';

        if ( strlen((string)$data->supervisedTrainingId) > 0 )
        {
            $where .= '     AND A.supervisedTrainingId = ?';
            $args[] = $data->supervisedTrainingId;
        }

        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '     AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $data->observation . '%';
        }

        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '     AND D.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen((string)$data->personId) > 0 )
        {
            $where .= '     AND F.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen((string)$data->contractId) > 0 )
        {
            $where .= '     AND E.contractId = ?';
            $args[] = $data->contractId;
        }

        if ( strlen((string)$data->groupId) > 0 )
        {
            $where .= '     AND C.groupId = ?';
            $args[] = $data->groupId;
        }

        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.beginDate';
            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
            //$db->Close();
        }        
        return $result;
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertSupervisedTraining($data)
    {
        $sql = 'INSERT INTO acdSupervisedTraining
                            (enrollId,
                             description,
                             institutionId,
                             beginDate,
                             endDate,
                             supervisorId)
                     VALUES (?,?,?,TO_DATE(?,\'' . MASK_DATE .'\'),TO_DATE(?,\'' . MASK_DATE .'\'),?)';

        $args = array($data->enrollId,
                      $data->description,
                      $data->institutionId,
                      $data->beginDate,
                      $data->endDate,
                      $data->supervisorId
                      );

        $db     = $this->getDatabase();
        $result = $db->Execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update the specified supervised training data.
     *
     * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateSupervisedTraining($data)
    {
        $sql = 'UPDATE acdSupervisedTraining                             
                   SET enrollId             = ?,
                       description          = ?,
                       institutionId        = ?,
                       beginDate            = TO_DATE(?,\'' . MASK_DATE .'\'),
                       endDate              = TO_DATE(?,\'' . MASK_DATE .'\'),
                       supervisorId         = ?
                 WHERE supervisedTrainingId = ? ';


        $args = array($data->enrollId,
                      $data->description,
                      $data->institutionId,
                      $data->beginDate,
                      $data->endDate,
                      $data->supervisorId,
                      $data->supervisedTrainingId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified supervised training.
     *
     * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
     *
     * @param $supervisedTrainingId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteSupervisedTraining($supervisedTrainingId)
    {
        $delete = 'DELETE FROM acdSupervisedTraining
                    WHERE supervisedTrainingId = ?';

        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$supervisedTrainingId));

        //$db->Close();

        return $result;
    }

    /**
    * Obtain the specified supervised training id data.
    * 
    * @param $enrollId (int): enroll code
    *
    * @return If the specified supervisedTrainingId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getSupervisedTrainingByEnrollId($enrollId)
    {
        $sql = '  SELECT A.supervisedTrainingId,
                         A.enrollId,
                         E.contractId,
                         C.groupId,
                         F.personId,
                         F.name,
                         A.description,
                         A.institutionId,
                         G.name as institutionName,
                         TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                         TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                         A.supervisorId,
                         H.name as supervisorName,
                         A.userName,
                         TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                         A.ipAddress
                    FROM acdSupervisedTraining A 
              INNER JOIN acdEnroll B
                      ON ( A.enrollId = B.enrollId )
              INNER JOIN acdGroup C
                      ON ( B.groupId = C.groupId )
              INNER JOIN acdLearningPeriod D
                      ON ( C.learningPeriodId = D.learningPeriodId )
              INNER JOIN acdContract E
                      ON ( B.contractId = E.contractId )
              INNER JOIN basPhysicalPersonStudent F
                      ON ( E.personId = F.personId )
              INNER JOIN basLegalPerson G
                      ON ( A.institutionId = G.personId )
               LEFT JOIN basPhysicalPerson H
                      ON ( A.supervisorId = H.personId )
                   WHERE A.enrollId = ?  ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $enrollId));

        $var    = new acdSupervisedTraining();
        
        list ( $var->supervisedTrainingId,
               $var->enrollId,
               $var->contractId,
               $var->groupId,
               $var->personId,
               $var->personName,
               $var->description,
               $var->institutionId,
               $var->institutionName,
               $var->beginDate,
               $var->endDate,
               $var->supervisorId,
               $var->supervisorName,
               $var->userName,
               $var->dateTime,
               $var->ipAddress ) = $result[0];

        return $var;
    }

    function setSupervisedTraining($data)
    {

        $db = $this->getDatabase();
        $ok = $db->execute('BEGIN TRANSACTION');

        if ( count($data->pupils) >= 0 )
        {
            foreach ( $data->pupils as $pupil )
            {
                $sql = 'SELECT supervisedTrainingId
                          FROM acdSupervisedTraining 
                         WHERE enrollId = ?';
                $res = $db->query(SAGU::prepare($sql, array($pupil->enrollId)));

                if ( strlen((string)$pupil->description) == 0 )
                {
                    continue;
                }

                //UPDATE
                if ( $res[0][0] > 0 )
                {
                    $sql = 'UPDATE acdSupervisedTraining                             
                               SET enrollId             = ?,
                                   description          = ?,
                                   institutionId        = ?,
                                   beginDate            = TO_DATE(?,\'' . MASK_DATE .'\'),
                                   endDate              = TO_DATE(?,\'' . MASK_DATE .'\'),
                                   supervisorId         = ?
                             WHERE supervisedTrainingId = ? ';


                    $args = array($pupil->enrollId,
                                  $pupil->description,
                                  $pupil->institutionId,
                                  $pupil->beginDate,
                                  $pupil->endDate,
                                  $pupil->supervisorId,
                                  $res[0][0] );

                    $sqls = SAGU::prepare($sql, $args);

                    for ( $i=0; $i<count($sqls); $i++ )
                    {
                        $ok = $db->execute($sqls[$i]);
                    }
                }
                //INSERT
                else
                {
                    $sql = 'INSERT INTO acdSupervisedTraining
                                        (enrollId,
                                         description,
                                         institutionId,
                                         beginDate,
                                         endDate,
                                         supervisorId)
                                 VALUES (?,?,?,TO_DATE(?,\'' . MASK_DATE .'\'),TO_DATE(?,\'' . MASK_DATE .'\'),?)';

                    $args = array($pupil->enrollId,
                                  $pupil->description,
                                  $pupil->institutionId,
                                  $pupil->beginDate,
                                  $pupil->endDate,
                                  $pupil->supervisorId
                                  );

                    $ok = $db->Execute(SAGU::prepare($sql, $args));
                }
            }
        }

        $ok = $db->execute('COMMIT');
        return $ok;
    }

}

   
?>
