<?php
/**
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusEnrollTerm extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPersonData($personId)
    {

        $sql = 'SELECT A.personId as mayricula,
                       A.name as nome_pessoa,
                       to_char(A.dateBirth, \''.MASK_DATE.'\') as dt_nascto,
                       D.nationality as nacionalidade,
                       E.name as naturalidade,
                       F.description as estado_civil,
                       A.sex,
                       \'\' as profissao,
                       G.description as origem_etnica,
                       H.description as deficiencia,
                       J.name as mae,
                       I.name as pai,
                       K.content as rg,
                       K.organ as orgao_expedidor,
                       to_char(K.dateexpedition, \''.MASK_DATE.'\') as data_expedicao,
                       L.content as titulo_eleitor,
                       \'\' as zona,
                       \'\' as secao,
                       M.content as cpf,
                       N.content as certificado_militar,
                       A.location as rua,
                       A.neighborhood as bairro,
                       B.name || \'/\' || C.stateId as bairo_estado,
                       A.zipCode as cep,
                       A.residentialPhone as fone_residencial,
                       A.cellPhone as fone_celular,
                       A.email as email,
                       A.locationWork as endereco_trabalho,
                       A.neighborhoodWork as bairro_trabalho,
                       O.name || \'/\' || O.stateId as cidade_estado_trabalho,
                       A.zipCodeWork as cep_trabalho,
                       A.workPhone as telefone_trabalho,
                       \'\' as celular_trabalho,
                       A.emailAlternative as email_trabalho,
                       Q.name as instituicao_ensino_medio,
                       P.yearhs as ano_conclusao_ensino_medio,
                       R.name || \'/\' || R.stateId as cidade_estado_ensino_medio
             FROM ONLY basPhysicalPerson A
            INNER JOIN basCity B
                    ON ( A.cityId = B.cityId )
            INNER JOIN basState C
                    ON ( B.stateId = C.stateId )
            INNER JOIN basCountry D
                    ON ( C.countryId = D.countryId )
             LEFT JOIN basCity E
                    ON ( A.cityId = E.cityId )
            INNER JOIN basMaritalStatus F
                    ON ( A.maritalStatusId = F.maritalStatusId )
             LEFT JOIN basEthnicOrigin G
                    ON ( A.ethnicOriginId = G.ethnicOriginId )
             LEFT JOIN basSpecialNecessity H
                    ON ( A.specialNecessityId = H.specialNecessityId )
             LEFT JOIN ONLY basPerson I
                    ON ( A.fatherId = I.personId )
             LEFT JOIN ONLY basPerson J
                    ON ( A.motherId = J.personId )
             LEFT JOIN basDocument K
                    ON (     A.personId = K.personId
                         AND K.documentTypeId = ' . DEFAULT_DOCUMENT_TYPE_ID_RG . ')
             LEFT JOIN basDocument L
                    ON (     A.personId = L.personId
                         AND L.documentTypeId = 4 )
             LEFT JOIN basDocument M
                    ON (     A.personId = M.personId
                         AND M.documentTypeId = ' . DEFAULT_DOCUMENT_TYPE_ID_CPF . ' )
             LEFT JOIN basDocument N
                    ON (     A.personId = N.personId
                         AND N.documentTypeId = 6 )
             LEFT JOIN basCity O
                    ON ( A.cityIdWork = O.cityId )
             LEFT JOIN ONLY basPhysicalPersonStudent P
                    ON ( A.personId = P.personId )
             LEFT JOIN ONLY basLegalPerson Q
                    ON ( Q.personId = P.institutionIdHs )
             LEFT JOIN basCity R
                    ON ( Q.cityId = R.cityId )
                 WHERE A.personId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result; 
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @param $courseVersion (integer): Primary key of the record to be retrieved
     * @param $semester (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function listCurricularComponent($courseId, $courseVersion, $semester)
    {

        $sql = 'SELECT B.curricularComponentId,
                       B.name
                  FROM acdCurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (     B.curricularComponentId      = A.curricularComponentId
                         AND B.curricularComponentVersion = A.curricularComponentVersion )
                 WHERE A.semester = ?
                   AND A.courseId = ?
                   AND A.courseVersion = ?
              ORDER BY 2';

        $args = array (
                        $semester,
                        $courseId,
                        $courseVersion
                       );
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result; 
    }
}
?>
