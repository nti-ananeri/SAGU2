<?php
/**
 *
 * This file handles the connection and actions for acdCourseCoordinator table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 31/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCourseCoordinator table
 **/
class BusinessAcademicBusCourseCoordinator extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseCoordinator()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @param $courseVersion (integer): Primary key of the record to be retrieved
     * @param $turnId (integer): Primary key of the record to be retrieved
     * @param $unitId (integer): Primary key of the record to be retrieved
     * @param $coordinatorId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS turnDescription,
                       A.coordinatorId,
                       E.name AS coordinatorName,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.level,
                       A.isSendEmail,
                       A.email,
                       A.expirationLevel,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCourseCoordinator A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
        LEFT JOIN ONLY basPerson E
                    ON (E.personId = A.coordinatorId)
                 WHERE A.courseId      = ?
                   AND A.courseVersion = ?
                   AND A.turnId        = ?
                   AND A.unitId        = ?
                   AND A.coordinatorId = ?';

        $pk = array ( $courseId,
                      $courseVersion,
                      $turnId,
                      $unitId,
                      $coordinatorId );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $courseCoordinator = new acdCourseCoordinator();

        list ( $courseCoordinator->courseId,
               $courseCoordinator->courseVersion,
               $courseCoordinator->courseName,
               $courseCoordinator->turnId,
               $courseCoordinator->turnDescription,
               $courseCoordinator->unitId,
               $courseCoordinator->unitDescription,
               $courseCoordinator->coordinatorId,
               $courseCoordinator->coordinatorName,
               $courseCoordinator->beginDate,
               $courseCoordinator->endDate,
               $courseCoordinator->level,
               $courseCoordinator->isSendEmail,
               $courseCoordinator->email,
               $courseCoordinator->expirationLevel,
               $courseCoordinator->userName,
               $courseCoordinator->dateTime,
               $courseCoordinator->ipAddress ) = $result[0];

        return $courseCoordinator; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseCoordinator($filters)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       A.courseId || \' / \' || A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS unitDescription,
                       A.coordinatorId,
                       E.name AS coordinatorName,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.level,
                       A.isSendEmail,
                       A.email,
                       A.expirationLevel
                  FROM acdCourseCoordinator A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
        LEFT JOIN ONLY basPerson E
                    ON (E.personId = A.coordinatorId)';
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->turnDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->turnDescription . '%';
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->unitDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(D.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->unitDescription . '%';
        }
        if ( strlen((string)$filters->coordinatorId) > 0 )
        {
            $where .= ' AND A.coordinatorId = ?';
            $args[] = $filters->coordinatorId;
        }
        if ( strlen((string)$filters->coordinatorName) > 0 )
        {
            $where .= ' AND TO_ASCII(E.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->coordinatorName . '%';
        }
        if ( strlen((string)$filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen((string)$filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->endDate;
        }
        if ( strlen((string)$filters->level) > 0 )
        {
            $where .= ' AND A.level = ?';
            $args[] = $filters->level;
        }
        if ( strlen((string)$filters->isSendEmail) > 0 )
        {
            $where .= ' AND A.isSendEmail = ?';
            $args[] = $filters->isSendEmail;
        }
        if ( strlen((string)$filters->email) > 0 )
        {
            $where .= ' AND A.email ILIKE ?';
            $args[] = $filters->email;
        }
        if ( strlen((string)$filters->expirationLevel) > 0 )
        {
            $where .= ' AND A.expirationLevel = ?';
            $args[] = $filters->expirationLevel;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseCoordinator($data)
    {
        $sql = 'INSERT INTO acdCourseCoordinator
                            (courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             coordinatorId,
                             beginDate,
                             endDate,
                             level,
                             isSendEmail,
                             email,
                             expirationLevel)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->coordinatorId,
                       $data->beginDate,
                       $data->endDate,
                       $data->level,
                       $data->isSendEmail,
                       $data->email,
                       $data->expirationLevel );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCourseCoordinator($data)
    {
        $sql = 'UPDATE acdCourseCoordinator
                   SET beginDate       = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endDate         = TO_DATE(?,\'' . MASK_DATE . '\'),
                       level           = ?,
                       isSendEmail     = ?,
                       email           = ?,
                       expirationLevel = ?
                 WHERE courseId      = ?
                   AND courseVersion = ?
                   AND turnId        = ?
                   AND unitId        = ?
                   AND coordinatorId = ?';

        $args = array( $data->beginDate,
                       $data->endDate,
                       $data->level,
                       $data->isSendEmail,
                       $data->email,
                       $data->expirationLevel,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->coordinatorId );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * @param $courseVersion (string): Primary key for deletion
     * @param $turnId (string): Primary key for deletion
     * @param $unitId (string): Primary key for deletion
     * @param $coordinatorId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId)
    {
        $sql = 'DELETE FROM acdCourseCoordinator
                      WHERE courseId      = ?
                        AND courseVersion = ?
                        AND turnId        = ?
                        AND unitId        = ?
                        AND coordinatorId = ?';

        $pk = array ( $courseId,
                      $courseVersion,
                      $turnId,
                      $unitId,
                      $coordinatorId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
