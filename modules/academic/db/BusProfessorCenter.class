<?php
/**
 *
 * This file handles the connection and actions for acdProfessorCenter table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdProfessorCenter table
 **/
class BusinessAcademicBusProfessorCenter extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $centerId (integer): Primary key of the record to be retrieved
     * @param $beginDate (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessorCenter($professorId, $centerId, $beginDate)
    {
        $sql = 'SELECT A.professorId,
                       B.name,
                       A.centerId,
                       C.name,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdProfessorCenter A
        LEFT JOIN ONLY basPhysicalPersonProfessor B
                    ON ( A.professorId = B.personId )
             LEFT JOIN acdCenter C
                    ON ( A.centerId = C.centerId  )
                 WHERE A.professorId = ?
                   AND A.centerId    = ?
                   AND A.beginDate   = TO_DATE(?, \'' . MASK_DATE . '\')';

        $args   = array ( $professorId,
                          $centerId,
                          $beginDate );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $professorCenter = new acdProfessorCenter();
        list ( $professorCenter->professorId,
               $professorCenter->name,
               $professorCenter->centerId,
               $professorCenter->name,
               $professorCenter->beginDate,
               $professorCenter->endDate,
               $professorCenter->userName,
               $professorCenter->dateTime,
               $professorCenter->ipAddress ) = $result[0];

        return $professorCenter; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessorCenter($filters)
    {
        $sql = 'SELECT A.professorId,
                       B.name,
                       A.centerId,
                       C.name,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdProfessorCenter A
       INNER JOIN ONLY basPhysicalPersonProfessor B
                    ON ( A.professorId = B.personId )
            INNER JOIN acdCenter C
                    ON ( A.centerId = C.centerId  ) ';

        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ? ';
            $args[] = $filters->professorId;
        }

        if ( strlen((string)$filters->professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen((string)$filters->centerId) > 0 )
        {
            $where .= ' AND A.centerId = ? ';
            $args[] = $filters->centerId;
        }

        if ( strlen((string)$filters->centerName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->centerName . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.beginDate, 
                                                               C.name, 
                                                               B.name';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql,$args));
            //$db->close();
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessorCenter($data)
    {
        $sql = 'INSERT INTO acdProfessorCenter
                            (professorId,
                             centerId,
                             beginDate,
                             endDate)
                     VALUES (?,?,TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'))';

        $args = array( $data->professorId,
                       $data->centerId,
                       $data->beginDate,
                       $data->endDate );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateProfessorCenter($data)
    {
        $sql = 'UPDATE acdProfessorCenter   
                   SET professorId = ?,
                       centerId    = ?,
                       beginDate   = TO_DATE(?, \'' . MASK_DATE . '\'),
                       endDate     = TO_DATE(?, \'' . MASK_DATE . '\')
                 WHERE professorId = ?
                   AND centerId    = ?
                   AND beginDate   = TO_DATE(?, \'' . MASK_DATE . '\')';

        $args = array( $data->professorId,
                       $data->centerId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professorIdOld,
                       $data->centerIdOld,
                       $data->beginDateOld );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $centerId (integer): Primary key of the record to be retrieved
     * @param $beginDate (integer): Primary key of the record to be retrieved
     *
     * @return (boolean): True if succeed, otherwise 
     **/
    public function deleteProfessorCenter($professorId, $centerId, $beginDate)
    {
        $sql = 'DELETE FROM acdProfessorCenter 
                      WHERE professorId = ?
                        AND centerId    = ?
                        AND beginDate   = TO_DATE(?, \'' . MASK_DATE . '\')';

        $args   = array ( $professorId,
                          $centerId,
                          $beginDate );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

}

?>
