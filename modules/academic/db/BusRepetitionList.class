<?php
/**
 *
 * This file handles the connection and actions for repetition listing
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class that provides methods for repetition listing
 **/
class BusinessAcademicBusRepetitionList extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function getRepetitionList($periodId, $formationLevelId, $type)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();

        if ($type == 1)
        {
            $sql = 'SELECT A.contractId,
                           G.personId,
                           G.name as personName,
                           D.curricularComponentId,
                           D.curricularComponentVersion,
                           D.name as curricularComponentName,
                           D.academicCredits,
                           E.periodId,
                           A.finalNote
                      FROM acdEnroll A
                INNER JOIN acdGroup B
                        ON (B.groupId = A.groupId)
                 LEFT JOIN acdCurriculum C
                        ON (C.curriculumId = B.curriculumId)
                INNER JOIN acdCurricularComponent D
                        ON (D.curricularComponentId = C.curricularComponentId AND
                            D.curricularComponentVersion = C.curricularComponentVersion)
                INNER JOIN acdLearningPeriod E
                        ON (E.learningPeriodId = B.learningPeriodId)
                INNER JOIN acdContract F
                        ON (F.contractId = A.contractId)
                INNER JOIN ONLY basPhysicalPersonStudent G
                        ON (G.personId = F.personId)
                 LEFT JOIN acdCourse H
                        ON (H.courseId = F.courseId)
                     WHERE E.periodId <> ?
                       AND A.statusId IN (' . ENROLL_STATUS_DISAPPROVED . ')
                       AND A.contractId IN (SELECT A.contractId
                                              FROM acdEnroll A
                                        INNER JOIN acdGroup B
                                                ON (B.groupId = A.groupId)
                                        INNER JOIN acdLearningPeriod C
                                                ON (C.learningPeriodId = B.learningPeriodId)
                                             WHERE C.periodId = ?)
                  ORDER BY personName, curricularComponentName, E.periodId';

            $args = array($periodId, $periodId);

            $result = $db->query(SAGU::prepare($sql, $args));
        }
        elseif ($type == 2)
        {
            $sql = 'SELECT F.courseId,
                           F.courseVersion,
                           H.shortName as courseShortName,
                           F.turnId,
                           getTurnDescription(F.turnId) as turnDescription,
                           F.unitId,
                           getUnitDescription(F.unitId) as unitDescription,
                           A.contractId,
                           G.personId,
                           G.name as personName,
                           D.curricularComponentId,
                           D.curricularComponentVersion,
                           D.name as curricularComponentName,
                           D.academicCredits,
                           E.periodId,
                           A.finalNote
                      FROM acdEnroll A
                INNER JOIN acdGroup B
                        ON (B.groupId = A.groupId)
                INNER JOIN acdCurriculum C
                        ON (C.curriculumId = B.curriculumId)
                INNER JOIN acdCurricularComponent D
                        ON (D.curricularComponentId = C.curricularComponentId )
                INNER JOIN acdLearningPeriod E
                        ON (E.learningPeriodId = B.learningPeriodId)
                INNER JOIN acdContract F
                        ON (F.contractId = A.contractId)
                INNER JOIN ONLY basPhysicalPersonStudent G
                        ON (G.personId = F.personId)
                INNER JOIN acdCourse H
                        ON (H.courseId = F.courseId)
                     WHERE E.periodId <> ?
                       AND A.statusId IN (' . ENROLL_STATUS_DISAPPROVED . ')
                       AND A.contractId IN (SELECT A.contractId
                                              FROM acdEnroll A
                                        INNER JOIN acdGroup B
                                                ON (B.groupId = A.groupId)
                                        INNER JOIN acdLearningPeriod C
                                                ON (C.learningPeriodId = B.learningPeriodId)
                                             WHERE C.periodId = ?)
                  ORDER BY F.courseId, D.curricularComponentId, personName, E.periodId';

            $args = array($periodId, $periodId);

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

}

?>
