<?php
/**
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate tables
 **/
class BusinessAcademicBusGroupsByRegimenAndWeekday extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    public function listGroupsByRegimenAndWeekday($filters)
    {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.groupId,
                       A.totalEnrolled,
                       A.curriculumId,
                       G.curricularComponentId,
                       G.curricularComponentVersion,
                       H.name,
                       B.courseId,
                       B.courseVersion,
                       D.shortName,
                       B.unitId,
                       E.description,
                       B.turnId,
                       F.description
                  FROM acdGroup A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCurriculum G
                    ON (G.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent H
                    ON (H.curricularComponentId = G.curricularComponentId AND
                        H.curricularComponentVersion = G.curricularComponentVersion)
            INNER JOIN acdSchedule C
                    ON (C.groupId = A.groupId)
            INNER JOIN acdCourse D
                    ON (D.courseId = B.courseId)
            INNER JOIN basUnit E
                    ON (E.unitId = B.unitId)
            INNER JOIN basTurn F
                    ON (F.turnId = B.turnId) ';
              
        if (strlen((string)$filters->periodId) > 0)
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if (strlen((string)$filters->courseId) > 0)
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen((string)$filters->courseVersion) > 0)
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen((string)$filters->turnId) > 0)
        {
            $where .= ' AND B.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen((string)$filters->weekdayId) > 0)
        {
            $where .= ' AND C.weekdayId = ? ';
            $args[] = $filters->weekdayId;
        }
        if (strlen((string)$filters->regimenId) > 0)
        {
            $where .= ' AND A.regimenId = ? ';
            $args[] = $filters->regimenId;
        }
        
        if (strlen((string)$where) > 0)
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.groupId ';
            $result = $db->query(SAGU::prepare($sql, $args));
            return $result;
        }
        
        return null;
    }
}
?>
