<?php
/**
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 11/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdgenerateMultipleLearningPeriod table
 **/
class BusinessAcademicBusGenerateMultipleLearningPeriod extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourses($filters)
    {
        //Esta funçao e diferente das demais geraçoes em lote
        //devido a pegar cursos por periodo, sem period letivo ainda
        //nas demais, este periodo letivo ja existe
        $sql = 'SELECT A.courseId || \';\' || A.courseVersion || \';\' || A.turnId || \';\' || A.unitId,
                       A.courseId,
                       A.courseVersion,
                       D.name,
                       B.description,
                       C.description,
                       E.learningPeriodId
                  FROM acdCourseOccurrence A
            INNER JOIN basTurn B
                    ON (B.turnId = A.turnId)
            INNER JOIN basUnit C
                    ON (C.unitId = A.unitId)
            INNER JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN acdLearningPeriod E
                    ON (E.courseId = A.courseId AND
                        E.courseVersion = A.courseVersion AND
                        E.turnId = A.turnId AND 
                        E.unitId = A.unitId AND
                        E.periodId = \''.$filters->periodId.'\')
                 WHERE A.status           = true
                   AND D.formationLevelId = ?';

        $args = array ( $filters->formationLevelId );

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function alreadyExists($courseId, $courseVersion, $turnId, $unitId, $periodId)
    {
            $sql = 'SELECT A.learningPeriodId
                      FROM acdLearningPeriod A
                     WHERE A.courseId      = \''.$courseId.'\'
                       AND A.courseVersion = \''.$courseVersion.'\'
                       AND A.turnId        = \''.$turnId.'\'
                       AND A.unitId        = \''.$unitId.'\'
                       AND A.periodId      = \''.$periodId.'\'';

        $db = $this->getDatabase();

        $result = $db->query($sql);

        if ( is_array($result) && (sizeof($result) > 0) )
        {
            return true;
        }

        return false;
    }


    public function beginTransaction()
    {

        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {

        $db = $this->getDatabase();
        $db->execute('COMMIT');

    }

}

?>
