<?php
/**
 *
 * This file handles the connection and actions for acdMovementContractComplement table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdMovementContractComplement table
 **/
class BusinessAcademicBusMovementContractComplement extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return the first record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFirstMovementContractComplement($contractId)
    {

        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . MASK_TIMESTAMP . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)
                 WHERE A.contractId            = ?
              ORDER BY A.stateTime
                 LIMIT 1';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $contractId));

        $movementContractComplement = new AcdMovementContractComplement();

        list (
               $movementContractComplement->contractId,
               $movementContractComplement->contractPersonId,
               $movementContractComplement->contractPersonName,
               $movementContractComplement->stateContractId,
               $movementContractComplement->stateDescription,
               $movementContractComplement->stateContractFieldId,
               $movementContractComplement->stateContractFieldDescription,
               $movementContractComplement->stateTime,
               $movementContractComplement->value,
               $movementContractComplement->userName,
               $movementContractComplement->dateTime,
               $movementContractComplement->ipAddress
             ) = $result[0];

        return $movementContractComplement; 
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $stateContractId (integer): Primary key of the record to be retrieved
     * @param $stateContractFieldId (integer): Primary key of the record to be retrieved
     * @param $stateTime (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getMovementContractComplement($contractId, $stateContractId, $stateContractFieldId, $stateTime)
    {

        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . MASK_TIMESTAMP . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)
                 WHERE A.contractId            = ?
                   AND A.stateContractId       = ?
                   AND A.stateContractFieldId  = ?
                   AND TO_CHAR(stateTime,\'' . MASK_TIMESTAMP . '\') = ?';

        $pk = array(
                     $contractId,
                     $stateContractId,
                     $stateContractFieldId,
                     $stateTime
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $movementContractComplement = new AcdMovementContractComplement();

        list (
               $movementContractComplement->contractId,
               $movementContractComplement->contractPersonId,
               $movementContractComplement->contractPersonName,
               $movementContractComplement->stateContractId,
               $movementContractComplement->stateDescription,
               $movementContractComplement->stateContractFieldId,
               $movementContractComplement->stateContractFieldDescription,
               $movementContractComplement->stateTime,
               $movementContractComplement->value,
               $movementContractComplement->userName,
               $movementContractComplement->dateTime,
               $movementContractComplement->ipAddress
             ) = $result[0];

        return $movementContractComplement; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMovementContractComplement($filters)
    {

        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . MASK_TIMESTAMP . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)';

        if ( strlen((string)$filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen((string)$filters->contractPersonId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $filters->contractPersonId;
        }
        if ( strlen((string)$filters->contractPersonName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->contractPersonName . '%';
        }
        if ( strlen((string)$filters->stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $filters->stateContractId;
        }
        if ( strlen((string)$filters->stateDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(D.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->stateDescription . '%';
        }
        if ( strlen((string)$filters->stateContractFieldId) > 0 )
        {
            $where .= ' AND A.stateContractFieldId = ?';
            $args[] = $filters->stateContractFieldId;
        }
        if ( strlen((string)$filters->stateContractFieldDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->stateContractFieldDescription . '%';
        }
        if ( strlen((string)$filters->value) > 0 )
        {
            $where .= ' AND A.value ILIKE ?';
            $args[] = $filters->value . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY C.name,
                            D.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertMovementContractComplement($data)
    {

        $sql = 'INSERT INTO acdMovementContractComplement
                            (contractId,
                             stateContractId,
                             stateContractFieldId,
                             stateTime,
                             value)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \'' . MASK_TIMESTAMP . '\'), ?)';

        $args = array(
                       $data->contractId,
                       $data->stateContractId,
                       $data->stateContractFieldId,
                       $data->stateTime,
                       $data->value
                     );

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateMovementContractComplement($data)
    {

        $sql = 'UPDATE acdMovementContractComplement
                   SET value = ?
                 WHERE contractId           = ?
                   AND stateContractId      = ?
                   AND stateContractFieldId = ?
                   AND TO_CHAR(stateTime,\'' . MASK_TIMESTAMP . '\') = ?';

        $args = array( 
                       $data->value,
                       $data->contractId,
                       $data->stateContractId,
                       $data->stateContractFieldId,
                       $data->stateTime
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (string): Primary key for deletion
     * @param $stateContractId (string): Primary key for deletion
     * @param $stateContractFieldId (string): Primary key for deletion
     * @param $stateTime (integer): Primary key of the record to be retrieved
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteMovementContractComplement($contractId, $stateContractId, $stateContractFieldId, $stateTime)
    {
        $sql = 'DELETE FROM acdMovementContractComplement
                 WHERE contractId           = ?
                   AND stateContractId      = ?
                   AND stateContractFieldId = ?
                   AND TO_CHAR(stateTime,\'' . MASK_TIMESTAMP . '\') = ?';

        $pk = array( 
                     $contractId,
                     $stateContractId,
                     $stateContractFieldId,
                     $stateTime
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
