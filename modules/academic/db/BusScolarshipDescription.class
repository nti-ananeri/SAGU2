<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 16/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
class BusinessAcademicBusScolarshipDescription  extends Business
{
    public $db;

    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function __construct()
    {
        parent::__construct();
        $this->db = $this->getDatabase();
    }
    public function verifyGroupAprovedState($data)
    {
        $result = false;
        $sql1 = 'SELECT  
                    C.periodId,
                    A.finalNote,
                    D.description,
                    A.statusId,
                    A.curriculumId,
                    B.curriculumId
                FROM 
                    acdEnroll A INNER JOIN 
                    acdGroup B ON (A.groupId = B.groupId) INNER JOIN
                    acdLearningPeriod C ON ( B.learningPeriodId = C.learningPeriodId ) INNER JOIN
                    acdEnrollStatus D ON ( A.statusId = D.statusId )
                WHERE 
                  NOT isExploitation AND
                  A.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.')';
        $sql = $sql1;
        if ( count($data) > 0 )
        {
            if ( strlen((string)$data->curriculumId) > 0 && strlen((string)$data->curriculumIdLink) > 0 )
            {
                $sql .= " AND  ( A.curriculumId IN ( $data->curriculumId ) OR A.curriculumId IN ( $data->curriculumIdLink ) OR B.curriculumId IN ( $data->curriculumId ) OR B.curriculumId IN ( $data->curriculumIdLink ) ) ";
            }
            else if ( strlen((string)$data->curriculumId) )
            {
                $sql .= " AND ( A.curriculumId IN ( $data->curriculumId )  OR B.curriculumId IN ( $data->curriculumId )) ";
            }
            $aprovado = $this->db->query(SAGU::prepare($sql, $args));
        }
        return $aprovado;
    }
    public function verifyGroupDisaprovedState($data)
    {
        $result = false;
        $sql1 = 'SELECT  
                    C.periodId,
                    A.finalNote,
                    D.description,
                    A.statusId,
                    A.curriculumId,
                    B.curriculumId
                FROM 
                    acdEnroll A INNER JOIN 
                    acdGroup B ON (A.groupId = B.groupId) INNER JOIN
                    acdLearningPeriod C ON ( B.learningPeriodId = C.learningPeriodId ) INNER JOIN
                    acdEnrollStatus D ON ( A.statusId = D.statusId )
                WHERE 
                  NOT isExploitation AND
                  A.statusId IN ('.ENROLL_STATUS_DISAPPROVED_INEXAM.', ' . ENROLL_STATUS_DISAPPROVED .  ', ' . ENROLL_STATUS_DISAPPROVED_FOR_LACKS .  ')';
        $sql = $sql1;
        if ( count($data) > 0 )
        {
            if ( strlen((string)$data->curriculumId) > 0 && strlen((string)$data->curriculumIdLink) > 0 )
            {
                $sql .= " AND  ( A.curriculumId IN ( $data->curriculumId ) OR A.curriculumId IN ( $data->curriculumIdLink ) OR B.curriculumId IN ( $data->curriculumId ) OR B.curriculumId IN ( $data->curriculumIdLink ) ) ";
            }
            else if ( strlen((string)$data->curriculumId) )
            {
                $sql .= " AND ( A.curriculumId IN ( $data->curriculumId )  OR B.curriculumId IN ( $data->curriculumId  ) ) ";
            }
            $reprovado = $this->db->query(SAGU::prepare($sql, $args));
        }
        return $reprovado;
    }

    public function verifyGroupExploitationState($data)
    {
        $result = false;
        $sql1 = 'SELECT  
                    CASE WHEN B.exploitationType = \'I\' THEN E.periodId ELSE \'EXTER\' END,
                    CASE WHEN B.exploitationType = \'I\' THEN C.finalNote::varchar ELSE B.finalNote END,
                    F.description,
                    F.statusId
                FROM 
                    acdEnroll A INNER JOIN 
                    acdExploitation B ON (A.enrollId = B.enrollId) LEFT JOIN
                    acdEnroll C ON ( C.enrollId = B.exploitationEnrollId ) LEFT JOIN
                    acdGroup D ON ( A.groupId = C.groupId ) LEFT JOIN
                    acdLearningPeriod E ON ( E.learningPeriodId = D.learningPeriodId ) LEFT JOIN
                    acdEnrollStatus F ON ( F.statusId = A.statusId )
                WHERE 
                  A.isExploitation ';
        $sql = $sql1;
        if ( count($data) > 0 )
        {
            if ( strlen((string)$data->curriculumId) )
            {
                $sql .= " AND ( A.curriculumId IN ( $data->curriculumId ) ) ";
            }
            $aproveitado = $this->db->query(SAGU::prepare($sql, $args));
        }
        return $aproveitado;
    }
    public function getHeaderContract($data)
    {
        $sql = 'SELECT DISTINCT
                    B.personId as personId,
                    B.name as personName,
                    TO_CHAR(B.dateBirth, ?),
                    C.name as fatherName,
                    D.name as motherName,
                    K.name as cityName,
                    L.name as stateName,
                    M.nationality,
                    G.content as identidade,
                    TO_CHAR(G.dateexpedition, ?) as dataExpedicaoIdentidade,
                    G.organ as orgaoIdentidade,
                    H.content as reservista,
                    TO_CHAR(H.dateexpedition, ?) as dataExpedicaoReservista,
                    H.organ as orgaoReservista,
                    I.content as tituloEleitor,
                    F.name as tipoEnsinoReferencia,
                    E.name as estabelecimento,
                    TO_CHAR(B.conclusiondatehs, ?) as dataConclusaoEnsinoReferencia,
                    N.name as localEstabelecimento,
                    J.courseId,
                    J.courseVersion,
                    J.hourtotal as cargaHorariaTotalCurso,
                    L.stateId
                FROM
                    acdContract A INNER JOIN
                    ONLY basPhysicalPersonStudent B ON ( A.personId = B.personId ) LEFT JOIN
                    ONLY basPerson C ON ( C.personId = B.fatherId ) LEFT JOIN
                    ONLY basPerson D ON ( D.personId = B.motherId ) LEFT JOIN
                    ONLY basLegalPerson E ON ( E.personId = B.institutionidhs ) LEFT JOIN
                    acdExternalCourse F ON ( F.externalcourseid = B.externalcourseidhs ) LEFT JOIN
                    basDocument G ON ( G.personId = B.personId AND G.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument H ON ( H.personId = B.personId AND H.documentTypeId = ?::integer ) LEFT JOIN
                    basDocument I ON ( I.personId = B.personId AND I.documentTypeId = ?::integer ) LEFT JOIN
                    acdCourseVersion J ON ( J.courseId = A.courseId AND J.courseVersion = A.courseVersion ) LEFT JOIN
                    basCity K ON ( K.cityId = B.cityIdBirth ) LEFT JOIN
                    basState L ON ( L.stateId = K.stateId ) LEFT JOIN
                    basCountry M ON ( M.countryId = L.countryId ) LEFT JOIN
                    basCity N ON ( N.cityId = E.cityId )
                WHERE
                    1 = 1 ';
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = MASK_DATE;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_RG;
        $args[] = DEFAULT_DOCUMENT_TYPE_ID_MILITAR_SERVICE;
        $args[] = ELECTORAL_TITLE_CODE;
        if ( strlen((string)$data->contractId) ) 
        {
            $sql .= ' AND A.contractId = ?::integer';
            $args[] = $data->contractId;
        }
        if ( count($data) > 0 )
        {
            $result = $this->db->query(SAGU::prepare($sql, $args));
            return $result;
        }
    }
    public function getCurriculum($data)
    {
        
        $statusId = ENROLL_STATUS_ENROLLED . ',' . ENROLL_STATUS_APPROVED . ','  . ENROLL_STATUS_DISAPPROVED . ',' . ENROLL_STATUS_DISAPPROVED_FOR_LACKS . ',' . ENROLL_STATUS_EXCUSED . ',' . ENROLL_STATUS_APPROVED_INEXAM . ',' . ENROLL_STATUS_DISAPPROVED_INEXAM;

        $disapproved[]  = ENROLL_STATUS_DISAPPROVED;
        $disapproved[]  = ENROLL_STATUS_DISAPPROVED_INEXAM;
        $disapproved[]  = ENROLL_STATUS_DISAPPROVED_FOR_LACKS;
        $enrolled[]     = ENROLL_STATUS_ENROLLED;

        $sql = 'SELECT 
                    COALESCE ( L.periodId, H.periodId, J.periodId ) as semestre,
                    A.serie as periodo,
--                    CASE WHEN LENGTH(A.name) > 40 THEN A.shortname ELSE A.name END as  disciplina,
                    A.name as disciplina,
                    A.lessonNumberHours as cargaHoraria,
                    CASE 
                        WHEN B.isExploitation THEN 
                            CASE WHEN E.finalNote::varchar IS NULL THEN D.finalNote::varchar ELSE E.finalNote::varchar  END
                        ELSE B.finalNote::varchar
                    END as notaFinal,
                        CASE WHEN C.description IS NULL THEN \'Not coursed\' ELSE C.description END as situacaoMatricula,
                    CASE 
                        WHEN B.isExploitation THEN 
                            CASE WHEN NOT E.finalNote::varchar IS NULL THEN \'INTERNO\' ELSE \'EXTERNO\'  END
                        ELSE \'SEM APROVEITAMENTO\'
                    END,
                    A.curriculumId,
                    B.statusId,
                    A.curricularComponentGroupElectiveId as grupoEletiva
                FROM
                    (   SELECT 
                    A.contractId, 
                    B.curriculumId,
                    C.curricularComponentId,
                    C.curricularComponentVersion,
                    B.semester as serie,
                    C.name,
                    C.shortname,
                    C.lessonNumberHours,
                    A.unitId,
                    A.courseId,
                    A.courseVersion,
                    A.turnId,
                    B.curricularComponentGroupElectiveId
                FROM 
                    acdContract A  RIGHT JOIN 
                    acdCurriculum B ON ( A.courseId = B.courseId AND A.courseVersion = B.courseVersion AND A.turnId = B.turnId AND A.unitId = B.unitId) INNER JOIN
                    acdCurricularComponent C ON ( C.curricularComponentId = B.curricularComponentId AND C.curricularComponentVersion = B.curricularComponentVersion ) 
                WHERE 
                    B.curricularComponentGroupDocumentEndCourseId IS NULL ) A LEFT JOIN
                    acdEnroll B ON (A.contractId = B.contractId AND A.curriculumId = B.curriculumId) LEFT JOIN
                    acdEnrollStatus C ON (C.statusId = B.statusId) LEFT JOIN
                    acdExploitation D ON (D.enrollId = B.enrollId ) LEFT JOIN
                    acdEnroll E ON (E.enrollId = D.exploitationEnrollId ) LEFT JOIN
                    acdGroup F ON ( F.groupId = B.groupId ) LEFT JOIN
                    acdLearningPeriod G ON ( F.learningPeriodId = G.learningPeriodId ) LEFT JOIN
                    acdLearningPeriod H ON ( H.learningPeriodId = B.learningPeriodId ) LEFT JOIN
                    acdGroup I ON ( I.groupId = F.groupId ) LEFT JOIN
                    acdLearningPeriod J ON ( J.learningPeriodId = I.learningPeriodId ) LEFT JOIN
                    acdLearningPeriod L ON ( L.learningPeriodId = E.learningPeriodId )
                WHERE 
                    ( B.statusId IN ( '.$statusId.' ) OR B.statusId IS NULL ) ';
        //$args[] = CURRICULAR_COMPONENT_TYPE_ELECTIVE;
       //die('<!--'.$sql.'-->'); 
        if( count($data) > 0 )
        {
            $where = '';
            if ( strlen((string)$data->courseId) > 0 )
            {
                $where .= ' AND A.courseId = ?';
                $args[] = $data->courseId;              
            }
            
            if ( strlen((string)$data->courseVersion) > 0 )
            {
                $where .= ' AND A.courseVersion = ?::integer';
                $args[] = $data->courseVersion;              
            }
            
            if ( strlen((string)$data->unitId) > 0 )
            {
                $where .= ' AND A.unitId = ?::integer';
                $args[] = $data->unitId;              
            }

            if ( strlen((string)$data->turnId) > 0 )
            {
                $where .= ' AND A.turnId = ?::integer';
                $args[] = $data->turnId;              
            }
            if ( strlen((string)$data->contractId) > 0 )
            {
                $where .= ' AND A.contractId = ?::integer';
                $args[] = $data->contractId;              
            }
            $sql .= $where;
            $sql .= ' GROUP BY 
                    1, 2, 3, 4, 5, 6, 7, 8, A.name, 9, 10
                ORDER BY 
                    A.serie, A.name';
            //die('<!--'.SAGU::prepare($sql,$args).'-->');
            $result = $this->db->query(SAGU::prepare($sql,$args)); 
            $sql = 'SELECT 
                    COALESCE ( L.periodId, H.periodId, J.periodId ) as semestre,
                    A.serie as periodo,
                    CASE WHEN LENGTH(A.name) > 40 THEN A.shortname ELSE A.name END as  disciplina,
                    A.lessonNumberHours as cargaHoraria,
                    CASE 
                        WHEN B.isExploitation THEN 
                            CASE WHEN E.finalNote::varchar IS NULL THEN D.finalNote::varchar ELSE E.finalNote::varchar  END
                        ELSE B.finalNote::varchar
                    END as notaFinal,
                        CASE WHEN C.description IS NULL THEN \'Not coursed\' ELSE C.description END as situacaoMatricula,
                    CASE 
                        WHEN B.isExploitation THEN 
                            CASE WHEN NOT E.finalNote::varchar IS NULL THEN \'INTERNO\' ELSE \'EXTERNO\'  END
                        ELSE \'SEM APROVEITAMENTO\'
                    END,
                    A.curriculumId,
                    B.statusId,
                    A.curricularComponentGroupDocumentEndCourseId as grupoEletiva
                FROM
                    (SELECT 
                    A.contractId, 
                    B.curriculumId,
                    C.curricularComponentId,
                    C.curricularComponentVersion,
                    B.semester as serie,
                    C.name,
                    C.shortname,
                    C.lessonNumberHours,
                    A.unitId,
                    A.courseId,
                    A.courseVersion,
                    A.turnId,
                    B.curricularComponentGroupDocumentEndCourseId
                FROM 
                    acdContract A  RIGHT JOIN 
                    acdCurriculum B ON ( A.courseId = B.courseId AND A.courseVersion = B.courseVersion AND A.turnId = B.turnId AND A.unitId = B.unitId) INNER JOIN
                    acdCurricularComponent C ON ( C.curricularComponentId = B.curricularComponentId AND C.curricularComponentVersion = B.curricularComponentVersion )
                WHERE 
                    ( NOT B.curricularcomponentgroupdocumentendcourseid IS NULL ) ) A LEFT JOIN
                    acdEnroll B ON (A.contractId = B.contractId AND A.curriculumId = B.curriculumId) LEFT JOIN
                    acdEnrollStatus C ON (C.statusId = B.statusId) LEFT JOIN
                    acdExploitation D ON (D.enrollId = B.enrollId ) LEFT JOIN
                    acdEnroll E ON (E.enrollId = D.exploitationEnrollId ) LEFT JOIN
                    acdGroup F ON ( F.groupId = B.groupId ) LEFT JOIN
                    acdLearningPeriod G ON ( F.learningPeriodId = G.learningPeriodId ) LEFT JOIN
                    acdLearningPeriod H ON ( H.learningPeriodId = B.learningPeriodId ) LEFT JOIN
                    acdGroup I ON ( I.groupId = F.groupId ) LEFT JOIN
                    acdLearningPeriod J ON ( J.learningPeriodId = I.learningPeriodId ) LEFT JOIN
                    acdLearningPeriod L ON ( L.learningPeriodId = E.learningPeriodId )
                WHERE 
                    ( B.statusId IN ( '.$statusId.' ) ) ';
            $sql .= $where;
            $sql .= ' GROUP BY 
                    1, 2, 3, 4, 5, 6, 7, 8, A.name, 9, 10
                ORDER BY 
                    A.serie, A.name';
            
            //die('<!--'.SAGU::prepare($sql,$args).'-->');

            $result3 = $this->db->query(SAGU::prepare($sql,$args));

            for($x = 0; $x < count($result); $x++)
            {
                if(count($result[$x]) > 0)
                {
                    for ($y = 0; $y < count($result3); $y++)
                    {
                        if ( $result[$x][9] == $result3[$y][9] )
                        {
                            for($xx = 0; $xx < count($result3[$y]); $xx++)
                            {
                                
                                if($xx != 2 )
                                {
                                    $result[$x][$xx] = $result3[$y][$xx];
                                }
                                else
                                {
                                    if( strlen((string)$data->notPrintDisapproved) > 0 && in_array($result3[$y][8], $disapproved) )
                                    {
                                        $result[$x][$xx] = $result[$x][$xx];
                                    }
                                    else if( strlen((string)$data->notPrintEnrolled) > 0 && $result3[$y][8] == ENROLL_STATUS_ENROLLED )
                                    {
                                    }
                                    else
                                    {
                                        $result[$x][$xx] = $result[$x][$xx]. ' ( ' . $result3[$y][$xx] .' )';
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        foreach ( $result as $result2 )
        {

            if ( strlen((string)$data->notPrintDisapproved) > 0 && in_array($result2[8], $disapproved) )
            {
                $result2[0] = NULL;//periodId
                $result2[4] = NULL;
                $result2[5] = 'Not coursed';//Enroll situation
                $result2[8] = NULL;//statusId
            }
            if ( strlen((string)$data->notPrintEnrolled) > 0 && $result2[8] == ENROLL_STATUS_ENROLLED )
            {
                $result2[0] = NULL;//periodId
                $result2[4] = NULL;
                $result2[5] = 'Not coursed';//Enroll situation
                $result2[8] = NULL;//statusId
            }
            if ( strlen((string)$data->printNotCoursed) > 0 )
            {
                $result4[] = $result2; 
            }
            else if ( $result2[8] != NULL )
            {
                $result4[] = $result2;
            }
        }
        //vd($result4);
        return $result4;
    }
    public function getClassPupils($data)
    {
        $sql = 'SELECT 
                        B.contractId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        C.personId,
                        C.name as personName,
                        getTurnDescription(B.turnId) as turnDescription,
                        getUnitDescription(B.unitId) as unitDescription,
                        getCourseName(B.courseId) as courseName
                FROM 
                    acdClassPupil A INNER JOIN 
                    acdContract B ON ( A.contractId = B.contractId ) INNER JOIN
                    ONLY basPhysicalPersonStudent C ON ( B.personId = C.personId )';
        $where = '';
        if ( $data->isActive == DB_TRUE )
        {
            $where .= '    AND NOT isContractOut(B.contractId)';
        }

        if ( strlen((string)$data->classId) > 0 )
        {
            $where .= '    AND A.classId = ? ';
            $args[] = $data->classId;
        }

        if( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND B.courseId = ?';
            $args[] = $data->courseId;
        }

        if( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND B.courseVersion = ?::integer';
            $args[] = $data->courseVersion;
        }

        if( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND B.unitId = ?::integer';
            $args[] = $data->unitId;
        }

        if( strlen((string)$data->turnId) > 0 )
        {
            $where .= '    AND B.turnId = ?::integer';
            $args[] = $data->turnId;
        }
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE '. substr($where,8);
            $sql .= ' ORDER BY C.name';
            $result = $this->db->query(SAGU::prepare($sql, $args));
        }
        if ( count($result) == 0 ) { return; }
        foreach ( $result as $resultado )
        {
                        /*B.contractId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        C.personId,
                        C.name as personName,
                        getTurnDescription(B.turnId) as turnDescription,
                        getUnitDescription(B.unitId) as unitDescription,
                        getCourseName(B.courseId) as courseName*/
            $obj->contractId    = $resultado[0];
            $obj->courseId      = $resultado[1];
            $obj->courseVersion = $resultado[2];
            $obj->turnId        = $resultado[3];
            $obj->unitId        = $resultado[4];
            $obj->personId      = $resultado[5];
            $obj->personName    = $resultado[6];
            $obj->turnDescription = $resultado[7];
            $obj->unitDescription = $resultado[8];
            $obj->courseName    = $resultado[9];
            $result2[] = $obj;
            unset($obj);
        }
        return $result2;
    }
}
?>
