<?php
/**
 *
 * This file handles the connection and actions for acdRestrictedDocuments table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdRestrictedDocuments table
 **/
class BusinessAcademicBusRestrictedDocuments extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $restrictedDocumentId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getRestrictedDocuments($restrictedDocumentId)
    {
        $sql = 'SELECT A.restrictedDocumentId,
                       A.documentTypeId,
                       B.name AS documentTypeName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.courseId,
                       A.courseVersion,
                       D.name AS courseName,
                       A.turnId,
                       E.description AS turnDescription,
                       A.unitId,
                       F.description AS unitDescription,
                       A.isIn,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdRestrictedDocuments A
             LEFT JOIN basDocumentType B 
                    ON (B.documentTypeId = A.documentTypeId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN basTurn E
                    ON (E.turnId = A.turnId)
             LEFT JOIN basUnit F
                    ON (F.unitId = A.unitId)
                 WHERE A.restrictedDocumentId = ?';

        $pk = array( $restrictedDocumentId );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $restrictedDocuments = new AcdRestrictedDocuments();

        list ( $restrictedDocuments->restrictedDocumentId,
               $restrictedDocuments->documentTypeId,
               $restrictedDocuments->documentTypeName,
               $restrictedDocuments->formationLevelId,
               $restrictedDocuments->formationLevelDescription,
               $restrictedDocuments->courseId,
               $restrictedDocuments->courseVersion,
               $restrictedDocuments->courseName,
               $restrictedDocuments->turnId,
               $restrictedDocuments->turnDescription,
               $restrictedDocuments->unitId,
               $restrictedDocuments->unitDescription,
               $restrictedDocuments->isIn,
               $restrictedDocuments->userName,
               $restrictedDocuments->dateTime,
               $restrictedDocuments->ipAddress ) = $result[0];

        return $restrictedDocuments; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchRestrictedDocuments($filters)
    {
        $sql = 'SELECT A.restrictedDocumentId,
                       A.documentTypeId,
                       B.name AS documentTypeName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.courseId,
                       A.courseVersion,
                       D.name AS courseName,
                       A.turnId,
                       E.description AS turnDescription,
                       A.unitId,
                       F.description AS unitDescription,
                       A.isIn,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdRestrictedDocuments A
             LEFT JOIN basDocumentType B 
                    ON (B.documentTypeId = A.documentTypeId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN basTurn E
                    ON (E.turnId = A.turnId)
             LEFT JOIN basUnit F
                    ON (F.unitId = A.unitId)';

        if ( strlen((string)$filters->restrictedDocumentId) > 0 )
        {
            $where .= ' AND A.restrictedDocumentId = ?';
            $args[] = $filters->restrictedDocumentId;
        }
        if ( strlen((string)$filters->documentTypeId) > 0 )
        {
            $where .= ' AND A.documentTypeId = ?';
            $args[] = $filters->documentTypeId;
        }
        if ( strlen((string)$filters->documentTypeName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->documentTypeName . '%';
        }
        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->formationLevelDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->formationLevelDescription . '%';
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->turnDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->turnDescription . '%';
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->unitDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(F.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->unitDescription . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertRestrictedDocuments($data)
    {
        $sql = 'INSERT INTO acdRestrictedDocuments
                            (documentTypeId,
                             formationLevelId,
                             courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             isIn)
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( 
                       $data->documentTypeId,
                       $data->formationLevelId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->isIn
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRestrictedDocuments($data)
    {

        $sql = 'UPDATE acdRestrictedDocuments
                   SET documentTypeId   = ?,
                       formationLevelId = ?,
                       courseId         = ?,
                       courseVersion    = ?,
                       turnId           = ?,
                       unitId           = ?,
                       isIn             = ?
                 WHERE restrictedDocumentId = ?';

        $args = array( 
                       $data->documentTypeId,
                       $data->formationLevelId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->isIn,
                       $data->restrictedDocumentId
                     );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $restrictedDocumentId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteRestrictedDocuments($restrictedDocumentId)
    {
        $sql = 'DELETE FROM acdRestrictedDocuments
                      WHERE restrictedDocumentId = ?';

        $pk = array( $restrictedDocumentId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
