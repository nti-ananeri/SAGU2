<?php
/**
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 19/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdgenerateMultipleAcademicCalendar table
 **/
class BusinessAcademicBusGenerateMultipleAcademicCalendar extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourses($filters)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.courseId,
                       A.courseVersion,
                       E.name,
                       C.description,
                       D.description,
                       A.learningPeriodId
                  FROM acdLearningPeriod A 
            INNER JOIN acdCourseOccurrence B
                    ON (A.courseId      = B.courseId AND
                        A.courseVersion = B.courseVersion AND
                        A.turnId        = B.turnId AND
                        A.unitId        = B.unitId)
             INNER JOIN basTurn C
                     ON (C.turnId = A.turnId)
             INNER JOIN basUnit D
                     ON (D.unitId = A.unitId)
             INNER JOIN acdCourse E
                     ON (E.courseId = A.courseId)';

        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND A.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND E.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->status) > 0 )
        {
            $where .= ' AND B.status = ? ';
            $args[] = $filters->status;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY E.shortname';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function alreadyExist($learningPeriodId)
    {
        $sql = 'SELECT A.academicCalendarId
                  FROM acdAcademicCalendar A
                 WHERE A.learningPeriodId = \''.$learningPeriodId.'\'';

        $db = $this->getDatabase();

        $result = $db->query($sql);

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDateWeek($beginDate, $endDate)
    {
        if ( strlen((string)$beginDate) > 0 &&
             strlen((string)$endDate)    > 0   )
        {
            $sql  = 'SELECT * FROM getDateIntervalWeek(?,
                                                       ?,
                                                       \'' . MASK_DATE . '\')';

            $args[] = $beginDate;
            $args[] = $endDate;

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

            $return = array();

            function convertDays(&$value, $key)
            {
                $MIOLO    = MIOLO::getInstance();
                $business = $MIOLO->getBusiness('basic', 'BusWeekDay');

                $daysWeek = $business->listWeekDay(); 

                switch ( substr($value[0],-1) )
                {
                    case 0:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_SUNDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';0', ';' . WEEK_DAY_SUNDAY_ID . ';' . $day,  $value);

                        break;

                    case 1:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_MONDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';1', ';' . WEEK_DAY_MONDAY_ID . ';' . $day,  $value);

                        break;

                    case 2:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_TUESDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';2', ';' . WEEK_DAY_TUESDAY_ID . ';' . $day,  $value);

                        break;

                    case 3:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_WEDNESDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';3', ';' . WEEK_DAY_WEDNESDAY_ID . ';' . $day,  $value);

                        break;

                    case 4:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_THURSDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';4', ';' . WEEK_DAY_THURSDAY_ID . ';' . $day, $value);

                        break;

                    case 5:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_FRIDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';5', ';' . WEEK_DAY_FRIDAY_ID . ';' . $day,   $value);

                        break;

                    case 6:
                        foreach ( $daysWeek as $dw )
                        {
                            if ( $dw[0] == WEEK_DAY_SATURDAY_ID )
                            {
                                $day = $dw[1];
                            }
                        }
                        $value = str_replace(';6', ';' . WEEK_DAY_SATURDAY_ID . ';' . $day, $value);

                        break;
                }
            }

            array_walk($result, 'convertDays');

            foreach ( $result as $id => $value )
            {
                list ($date, $dayWeek, $expensiveDayWeek) = explode(";", $value[0]);
                $return[] = array ($date . ';' . $dayWeek, $date, $expensiveDayWeek);
            }
            return $return;
        }

        return null;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMinorMajorDates($learningPeriods)
    {

        $sql = 'SELECT TO_CHAR(min(beginDate),\'' . MASK_DATE . '\')
                   FROM acdLearningPeriod';

        foreach ( $learningPeriods as $learningPeriod )
        {
            $where.= ' OR learningPeriodId = ? ';
            $args[] = $learningPeriod;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ( ' . substr($where, 3) . ' )';
            $db = $this->getDatabase();

            $minorDate = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }


        $sql = 'SELECT TO_CHAR(max(endDate),\'' . MASK_DATE . '\')
                   FROM acdLearningPeriod';

        foreach ( $learningPeriods as $learningPeriod )
        {
            $where.= ' OR learningPeriodId = ? ';
            $args[] = $learningPeriod;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ( ' . substr($where, 3) . ' )';
            $db = $this->getDatabase();

            $majorDate = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return array($minorDate[0][0], $majorDate[0][0]);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getBeginEndDate($learningPeriod)
    {
        $sql = 'SELECT TO_CHAR(beginDate,\'' . MASK_DATE . '\') AS beginDate,
                        TO_CHAR(endDate,\'' . MASK_DATE . '\') AS endDate
                 FROM acdLearningPeriod';

        if ( strlen((string)$learningPeriod) > 0 )
        {
            $where .= ' WHERE learningPeriodId = ? ';
            $args[] = $learningPeriod;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return array($result[0][0], $result[0][1]);
    }

    public function compareDates($mainDate, $beginDate, $endDate)
    {

        if ( strlen((string)$mainDate)  > 0 &&
             strlen((string)$beginDate) > 0 &&
             strlen((string)$endDate)   > 0   )
        {
            $sql  = 'SELECT isBetweenDates (?,
                                             ?,
                                             ?,
                                             \'' . MASK_DATE . '\')';
            $args[] = $mainDate;
            $args[] = $beginDate;
            $args[] = $endDate;

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            return $result[0][0];
        }
        return null;
    }

    public function beginTransaction()
    {

        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {
        $db = $this->getDatabase();
        $db->execute('COMMIT');
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getLearningPeriod($courseId, $courseVersion, $turnId, $unitId, $periodId)
    {
        $sql = 'SELECT B.learningPeriodId
                 FROM acdCourseOccurrence A
                 INNER JOIN acdLearningPeriod B
                    ON (A.courseId = B.courseId
                        AND A.courseVersion = B.courseVersion
                        AND A.unitId = B.unitId
                        AND A.turnId = B.turnId) ';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $turnId;
        }

        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $unitId;
        }

        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) ;
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0][0];
    }
}

?>
