<?php
/**
 *
 * This file handles the connection and actions for acdStateTransistion table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdStateTransistion table
 **/
class BusinessAcademicBusStateTransistion extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listStateTransistion()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $beginStateId (integer): Primary key of the record to be retrieved
     * @param $endStateId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStateTransistion($beginStateId, $endStateId)
    {
        $sql = 'SELECT A.beginStateId,
                       A.endStateId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdStateTransition A
                 WHERE A.beginStateId   = ?
                   AND A.endStateId     = ?';

        $pk = array(
                     $beginStateId,
                     $endStateId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $stateTransistion = new AcdStateTransistion();

        list ( $stateTransistion->beginStateId,
               $stateTransistion->endStateId,
               $stateTransistion->userName,
               $stateTransistion->dateTime,
               $stateTransistion->ipAddress ) = $result[0];

        return $stateTransistion; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchStateTransistion($filters)
    {
        $sql = 'SELECT A.beginStateId,
                       B.description,
                       A.endStateId,
                       C.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdStateTransition A
             LEFT JOIN acdStateContract B
                    ON (A.beginStateId = B.stateContractId)
             LEFT JOIN acdStateContract C
                    ON (A.endStateId = C.stateContractId)';

        if ( strlen((string)$filters->beginStateId) > 0 )
        {
            $where .= ' AND A.beginStateId = ?';
            $args[] = $filters->beginStateId;
        }
        if ( strlen((string)$filters->endStateId) > 0 )
        {
            $where .= ' AND A.endStateId = ?';
            $args[] = $filters->endStateId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.beginStateId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStateTransistion($data)
    {
        $sql = 'INSERT INTO acdStateTransition
                            (beginStateId,
                             endStateId)
                     VALUES (?,
                             ?)';

        $args = array( 
                       $data->beginStateId,
                       $data->endStateId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateStateTransistion($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $beginStateId (string): Primary key for deletion
     * @param $endStateId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteStateTransistion($beginStateId, $endStateId)
    {
        $sql = 'DELETE FROM acdStateTransition
                      WHERE beginStateId = ?
                        AND endStateId   = ? ';

        $pk = array(
                     $beginStateId,
                     $endStateId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
