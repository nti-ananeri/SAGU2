<?php

/**
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponentGroup table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 */

class BusinessAcademicBusCurricularComponentGroup extends Business
{

    /**
     * Creates a connection with the specified database. 
     * If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname (string): Specifies the database name to which we want to connect.
     *
     * @return (object): A database object.
     *
     */
    function getDatabase($dbname = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Obtain the specified curricularComponentGroup id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentGroupId (int): Identifier of the curriculum component group to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponentGroup) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCurricularComponentGroup($curricularComponentGroupId)
    {

        $select = 'SELECT A.name,
                          A.shortName,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . MASK_DATE . '\'),
                          A.ipAddress
                     FROM acdCurricularComponentGroup A
                    WHERE A.curricularComponentGroupId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select, $curricularComponentGroupId));

        //$db->Close();

        $curricular = new acdCurricularComponentGroup();

        list ( $curricular->curricularComponentGroupName,
               $curricular->shortName,
               $curricular->userName,
               $curricular->dateTime,
               $curricular->ipAddress ) = $result[0];

        return $curricular; 
    }

    /**
     * Search for curricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponentGroup($data=null)
    {

        $select = 'SELECT A.curricularComponentGroupId,
                          A.name,
                          A.shortName
                     FROM acdCurricularComponentGroup A ';

        $where  = '';
        unset($args);
        if ( strlen((string)$data->curricularComponentGroupId) > 0 )
        {
            $where .= '    AND   A.curricularComponentGroupId = ?';
            $args[] = $data->curricularComponentGroupId;
        }
        if ( strlen((string)$data->name) > 0 )
        {
            $where .= '    AND   TO_ASCII(A.name) ILIKE TO_ASCII(?)';
            $args[] = $data->name .'%';
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.name';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($select,$args));
            //$db->Close();
        }

        return $result;
    }

    /**
     * List all curricularComponentGroups.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @return an array containing the select results.
     *
     */
    function listCurricularComponentGroup()
    {

        $select = 'SELECT A.curricularComponentGroupId,
                          A.name,
                          A.shortName
                     FROM acdCurricularComponentGroup A
                 ORDER BY A.name';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select,$args));
        //$db->Close();

        return $result;
    }

    /**
     * Insert a new acdCurricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCurricularComponentGroup($data)
    {
        $db = $this->getDatabase();

        $insert = 'INSERT INTO acdCurricularComponentGroup
                                ( name,
                                shortName )
                                VALUES (?,?)';

        $args = array(  $data->name, 
                        $data->shortName);
        $result = $db->execute(SAGU::prepare($insert, $args));
        //$db->Close();
        return $result;
    }

    /**
     * Update the specified curricularComponentGroup data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCurricularComponentGroup($data)
    {
        $update = 'UPDATE acdCurricularComponentGroup
                      SET name      = ?,
                          shortName = ?
                    WHERE curricularComponentGroupId = ?';

        $db     = $this->getDatabase();

        $args   = array($data->name,
                        $data->shortName,
                        $data->curricularComponentGroupId,
                       );
        
        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->Close();

        return $result;
    }

    /**
     * Delete the specified curricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentGroupId (int): Identifier of the curricularComponentGroupId to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCurricularComponentGroup($curricularComponentGroupId)
    {
        $delete = 'DELETE FROM acdCurricularComponentGroup
                    WHERE curricularComponentGroupId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $curricularComponentGroupId));

        //$db->Close();

        return $result;
    }
}

?>
