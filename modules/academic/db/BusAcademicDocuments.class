<?php
/**
 *
 * This file handles the connection and actions for acdContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 * Class edited on 15/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdContract table
 **/
class objPerson
{
    var $personId;
    var $personTitle;
    var $name;
//    var $nome;
//    var $sexo;
    var $sex;
//    var $apelido;
    var $nickName;
    var $location;
//    var $enderecoLogradouro;
  //  var $enderecoNumero;
    var $number;
//    var $enderecoBairro;
    var $neighborhood;
//    var $enderecoCityId;
    var $cityId;
//    var $enderecoCep;
    var $zipCode;
//    var $enderecoComplemento;
    var $complement;
//    var $enderecoCidade;
    var $cityName;
//    var $enderecoStateId;
    var $stateId;
//    var $enderecoEstado;
    var $state;
    var $email;
//    var $emailAlternativo;
    var $emailAlternative;
//    var $dataNascimento;
    var $dateBirth;
//    var $nacionalidade;
    var $nationality;
//    var $estadoCivil;
    var $maritalStatus;
//    var $origemEtinica;
    var $ethnicOrigin;
    var $cpf;
    var $rg;
//    var $rgEmissao;
    var $rgEmissionDate;
//    var $rgOrgao;
    var $rgOrgan;
    var $rgCityId;
//    var $rgCidadeOrgao;
    var $rgCityOrgan;
//    var $rgUfOrgao;
    var $rgUf;
//    var $filiacaoMae;
    var $mother;
//    var $filiacaoPai;
    var $father;
    //var $telefoneCelular;
    var $mobile;
//    var $telefoneTrabalho;
    var $workPhone;
//    var $telefoneResidencial;
    var $residentialPhone;
//    var $telefoneParaMensagem;
    var $messagePhone;
//    var $placaCarro;
    var $carPlate;
//    var $trabalhoNome;
    var $workName;
//    var $trabalhoCityId;
    var $workCityId;
//    var $trabalhoCidade;
    var $workCityName;
//    var $trabalhoLogradouro;
    var $workLocation;
//    var $trabalhoCep;
    var $workZipCode;
//    var $trabalhoBairro;
    var $workNeighborhood;
//    var $trabalhoComplemento;
    var $workComplement;
//    var $dataFalecimento;
    var $deathDate;
//    var $necessidadeEspecial;
    var $specialNecessity;
//    var $descricaoNecessidadeEspecial;
    var $specialNecessityDescription;

}

class objContract
{
    var $contractId;
    var $courseId;
    var $courseVersion;
    var $turnId;
    var $unitId;
    var $formationLevelId;
    var $formationDate;
    var $formationPeriodId;
    var $conclusionDate;
    var $emendsDate;
    var $diplomaDate;
    var $inscriptionSelectiveProcId;
    var $maturityDay;
    var $isListener;
    var $isRequestAcademicDegree;
    var $obs;
    var $parcelsNumber;
    var $parcelsNumber2;
    var $policyId;
    var $policyIdForEnroll;
    var $policyIdForReEnroll;
    var $comments;
    var $monograph;
    var $serie;
    var $personId;
    var $unitLegalResponsable;
}

class objCourse
{
    var $name;
    var $shortName;
    var $acronym;
    var $courseBeginDate;
    var $recognitionDate;
    var $recognitionDocumentNumber;
    var $courseMoreInfo;
    var $courseEndDate;
    var $requirements;
    var $obs;
    var $inep;
    var $courseVersionBeginDate;
    var $courseVersionEndDate;
    var $semesterTotal;
    var $credits;
    var $hourTotal;
    var $hourRequired;
    var $authorizationDate;
    var $authorizationDocument;
    var $maximumDependent;
    var $turnDescription;
    var $unitDescription;
}

class objFinance
{
    var $policyId;
    var $policyIdForEnroll;
    var $policyIdForReEnroll;
    var $parcelValue;
    var $parcelValue2;
    var $courseValue;
    var $courseValue2;
    var $curricularComponentPrice;
    var $enrollValue;
    var $ncentiveValueIsPercent;
    var $incentiveValue;
    var $incentiveInValue;
    var $incentiveInPercent;
    var $startDate;
    var $endDate;
    var $incentiveDescription;
}

class objFinancePolicy
{
    var $description;
    var $interest;
    var $fine;
    var $discount;
    var $isDiscountInPercent;
    var $isFineInPercent;
    var $isInterestInPercent;
    var $isDiscountAtLastMonthDay;
    var $isFineInOriginalValue;
    var $discountInValue;
    var $fineInValue;
    var $interestInValue;
    var $discountInPercent;
    var $fineInPercent;
    var $interestInPercent;
}

class BusinessAcademicBusAcademicDocuments extends Business
{

    private $db;
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function __construct ( )
    {
        $this->db = $this->getDatabase();
    }

    public function getInfos($filters, $modules = array('basic', 'academic', 'finance'))
    {
		if ( in_array('finance', $modules) && ( strlen((string)$filters->contractId) > 0 || ( strlen((string)$filters->courseId) > 0 &&  strlen((string)$filters->courseVersion) > 0 && strlen((string)$filters->turnId) > 0 && strlen((string)$filters->unitId) > 0 ) ) )
        {
            if ( strlen((string)$filters->contractId) > 0 )
            {
                if ( strlen((string)$filters->periodId) > 0 )
                {
                    $periodId = $filters->periodId;
                }
                else
                {
                    $periodId = CURRENT_PERIOD_ID;
                }
                $sql = '
                SELECT
                    A.*,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(monthincentivediscountinvalue)))::numeric(14,2) as monthIncentiveDiscountInPercent,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(monthincentivefineinvalue)))::numeric(14,2) as monthIncentiveFineInPercent,
                    ((((case when parcelValue = 0 then 0 else 100/parcelValue end)*(monthincentiveinterestinvalue)))*30)::numeric(14,2) as monthIncentiveInterestInPercent,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(enrollIncentivediscountinvalue)))::numeric(14,2) as EnrollIncentiveDiscountInPercent,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(enrollIncentivefineinvalue)))::numeric(14,2) as enrollIncentiveFineInPercent,
                    ((((case when parcelValue = 0 then 0 else 100/parcelValue end)*(enrollIncentiveinterestinvalue)))*30)::numeric(14,2) as enrollIncentiveInterestInPercent,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(reEnrollIncentivediscountinvalue)))::numeric(14,2) as reEnrollIncentiveDiscountInPercent,
                    (((case when parcelValue = 0 then 0 else 100/parcelValue end)*(reEnrollIncentivefineinvalue)))::numeric(14,2) as reEnrollIncentiveFineInPercent,
                    ((((case when parcelValue = 0 then 0 else 100/parcelValue end)*(reEnrollIncentiveinterestinvalue)))*30)::numeric(14,2) as reEnrollIncentiveInterestInPercent
                FROM (
                    SELECT 
                        A.*,
                        B.description as monthIncentiveDescription,
                        B.monthlyInterest as monthIncentiveInterest,
                        B.fine as monthIncentiveFine,
                        B.discount as monthIncentiveDiscount,
                        B.isdiscountinpercent as monthIncentiveIsDiscountInPercent,
                        B.isfineinpercent as monthIncentiveIsFineInPercent,
                        B.ismonthlyinterestinpercent as monthIncentiveIsInterestInPercent,
                        B.isdiscountatlastmonthday as monthIncentiveIsDiscountAtLastMonthDay,
                        B.isfineinoriginalvalue as monthIncentiveIsFineInOriginalValue,
                        CASE 
                            WHEN B.discount = 0 THEN
                                0
                            WHEN B.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (((A.parcelValue-A.incentiveInValue)*(B.discount/100)))::numeric(14,2)
                            WHEN NOT B.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (B.discount)::numeric(14,2)
                        ELSE
                            0
                        END as monthIncentiveDiscountInValue,
                        CASE 
                            WHEN B.fine = 0 THEN
                                0
                            WHEN B.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                ((A.parcelValue-A.incentiveInValue)*(B.fine/100))::numeric(14,2)
                            WHEN NOT B.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                B.fine::numeric(14,2)
                            ELSE
                                0
                            END as monthIncentiveFineInValue,
                        CASE 
                            WHEN B.monthlyInterest = 0 THEN
                                0
                            WHEN B.isMonthlyInterestInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (((A.parcelValue-A.incentiveInValue)*(B.monthlyInterest/100))::numeric(14,2))/30
                            WHEN NOT B.isMonthlyInterestInPercent  AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                B.monthlyInterest::numeric(14,2)
                             ELSE
                                0
                        END as monthIncentiveInterestInValue,
                        C.description as enrollIncentiveDescription,
                        C.monthlyInterest as enrollIncentiveInterest,
                        C.fine as enrollIncentiveFine,
                        C.discount as enrollIncentiveDiscount,
                        C.isdiscountinpercent as enrollIncentiveIsDiscountInPercent,
                        C.isfineinpercent as enrollIncentiveIsFineInPercent,
                        C.ismonthlyinterestinpercent as enrollIncentiveIsInterestInPercent,
                        C.isdiscountatlastmonthday as enrollIncentiveIsDiscountAtLastMonthDay,
                        C.isfineinoriginalvalue as enrollIncentiveIsFineInOriginalValue,
                        CASE 
                        WHEN C.discount = 0 THEN
                            0
                        WHEN C.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                            (((A.parcelValue-A.incentiveInValue)*(C.discount/100)))::numeric(14,2)
                        WHEN NOT C.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                            (C.discount)::numeric(14,2)
                        ELSE
                            0
                        END as enrollIncentiveDiscountInValue,
                        CASE 
                            WHEN C.fine = 0 THEN
                                0
                            WHEN C.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                ((A.parcelValue-A.incentiveInValue)*(C.fine/100))::numeric(14,2)
                            WHEN NOT C.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                C.fine::numeric(14,2)
                             ELSE
                                0
                        END as enrollIncentiveFineInValue,
                        CASE 
                            WHEN C.monthlyInterest = 0 THEN
                                0
                            WHEN C.isMonthlyInterestInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (((A.parcelValue-A.incentiveInValue)*(C.monthlyInterest/100))::numeric(14,2))/30
                            WHEN NOT C.isMonthlyInterestInPercent  AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                C.monthlyInterest::numeric(14,2)
                            ELSE
                                0
                        END as enrollIncentiveInterestInValue,
                        D.description as reEnrollIncentiveDescription,
                        D.monthlyInterest as reEnrollIncentiveInterest,
                        D.fine as reEnrollIncentiveFine,
                        D.discount as reEnrollIncentiveDiscount,
                        D.isdiscountinpercent as reEnrollIncentiveIsDiscountInPercent,
                        D.isfineinpercent as reEnrollIncentiveIsFineInPercent,
                        D.ismonthlyinterestinpercent as reEnrollIncentiveIsInterestInPercent,
                        D.isdiscountatlastmonthday as reEnrollIncentiveIsDiscountAtLastMonthDay,
                        D.isfineinoriginalvalue as reEnrollIncentiveIsFineInOriginalValue,
                        CASE 
                            WHEN D.discount = 0 THEN
                                0
                            WHEN D.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (((A.parcelValue-A.incentiveInValue)*(D.discount/100)))::numeric(14,2)
                            WHEN NOT D.isdiscountinpercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (D.discount)::numeric(14,2)
                            ELSE
                                0
                        END as reEnrollIncentiveDiscountInValue,
                        CASE 
                            WHEN D.fine = 0 THEN
                                0
                            WHEN NOT D.isfineInPercent AND D.fine > 0 THEN
                                D.fine::numeric(14,2)                
                            WHEN D.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                ((A.parcelValue-A.incentiveInValue)*(D.fine/100))::numeric(14,2)
                            WHEN NOT D.isfineInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                D.fine::numeric(14,2)
                            ELSE
                                0
                        END as reEnrollIncentiveFineInValue,
                        CASE 
                            WHEN D.monthlyInterest = 0 THEN
                                0
                            WHEN D.isMonthlyInterestInPercent AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                (((A.parcelValue-A.incentiveInValue)*(D.monthlyInterest/100))::numeric(14,2))/30
                            WHEN NOT D.isMonthlyInterestInPercent  AND (A.parcelValue-A.incentiveInValue) > 0 THEN
                                D.monthlyInterest::numeric(14,2)
                            ELSE
                                0
                        END as reEnrollIncentiveInterestInValue
                    FROM (
                        SELECT
                            COALESCE(A.policyId, B.policyId, D.policyId) as policyId,
                            COALESCE(A.policyIdForEnroll, B.policyIdForEnroll, D.policyIdForEnroll) as policyIdForEnroll,
                            COALESCE(A.policyIdForReEnroll, B.policyIdForReEnroll, D.policyIdForReEnroll) as policyIdForReEnroll,
                            case when A.parcelsNumber = 0 then 0 else (coalesce(A.value,F.value) / COALESCE(A.parcelsNumber, E.parcelsNumber)) end as parcelValue,
                            case when A.parcelsNumber2 = 0 then 0 else (coalesce(A.value2,F.value2) / COALESCE(A.parcelsNumber2, E.parcelsNumber)) end as parcelValue2,
                            coalesce(A.value,F.value) as courseValue,
                            coalesce(A.value2,F.value2) as courseValue2,
                            F.curricularComponentPrice,
                            COALESCE(F.enrollValue,0) as enrollValue,
                            G.valueIsPercent as incentiveValueIsPercent,
                            COALESCE(G.value,0) as incentiveValue,
                            COALESCE((CASE 
                                WHEN G.valueIsPercent THEN
                                    case when A.parcelsNumber = 0 then 0 else (((coalesce(A.value,F.value) / COALESCE(A.parcelsNumber, E.parcelsNumber))/100)*G.value::numeric(14,2))::numeric(14,2) end
                                ELSE
                                (G.value)::numeric(14,2)
                            END), 0) as incentiveInValue,
                            COALESCE((CASE 
                                WHEN G.valueIsPercent THEN
                                    (G.value)::numeric(14,2)
                                ELSE
                                    case when A.parcelsNumber = 0 then 0 else ((100/(coalesce(A.value,F.value) / COALESCE(A.parcelsNumber, E.parcelsNumber)))*G.value::numeric(14,2))::numeric(14,2) end
                            END), 0) as incentiveInPercent,    
                            G.startDate,
                            G.endDate,
                            H.description as incentiveDescription
                        FROM
                            acdContract A INNER JOIN
                            acdCourse B ON ( A.courseId = B.courseId ) INNER JOIN
                            acdCourseVersion C ON ( C.courseId = A.courseId AND C.courseVersion = A.courseVersion ) INNER JOIN
                            acdCourseOccurrence D ON ( D.courseId = A.courseId AND
                                                       D.courseVersion = A.courseVersion AND
                                                       D.unitId = A.unitId AND
                                                       D.turnId = A.turnId ) LEFT JOIN
                            acdLearningPeriod E ON ( E.courseId = A.courseId AND
                                                     E.courseVersion = A.courseVersion AND
                                                     E.unitId = A.unitId AND
                                                     E.turnId = A.turnId AND 
                                                     E.periodId = \''.$periodId.'\') INNER JOIN
                            finPrice F ON ( F.learningPeriodId = E.learningPeriodId ) LEFT JOIN
                            finIncentive G ON ( G.contractId = A.contractId AND
                                                G.startDate <= E.endDate AND 
                                                G.endDate >= E.endDate ) LEFT JOIN
                            finIncentiveType H ON ( H.incentiveTypeId = G.incentivetypeId )
                        WHERE
                            A.contractId = '.$filters->contractId.'
                        ORDER BY 
                            F.endDate DESC
                        LIMIT 1 ) A LEFT JOIN 
                    finPolicy B ON ( B.policyId = A.policyId ) LEFT JOIN
                    finPolicy C ON ( C.policyId = A.policyIdForEnroll ) LEFT JOIN
                    finPolicy D ON ( D.policyId = A.policyIdForReEnroll ) ) A ';
                $x = 0;
                $results = $this->db->query(SAGU::prepare($sql));
                
                $objFinance = new objFinance();
                foreach ( $objFinance as $item => $value )
                {
                    $obj->finance->$item = $results[0][$x];
                    $x++;
                }
                $objFinancePolicy = new objFinancePolicy();
                $y = 15;
                $xx  = count($results[0]);
                foreach ( $objFinancePolicy as $item => $value )
                {
                    if ( $y < 4 )
                    {
                        $pos = $xx-(6+$y);
                        $obj->finance->monthPolicy->$item = $results[0][$pos];
                    }
                    else
                    {
                        $obj->finance->monthPolicy->$item = $results[0][$x];
                        $x++;
                    }
                    $y--;
                }
                $y = 15;
                foreach ( $objFinancePolicy as $item => $value )
                {
                    if ( $y < 4 )
                    {
                        $pos = $xx-(3+$y);
                        $obj->finance->enrollPolicy->$item = $results[0][$pos];
                    }
                    else
                    {
                        $obj->finance->enrollPolicy->$item = $results[0][$x];
                        $x++;
                    }
                    $y--;
                }
                $y = 15;
                foreach ( $objFinancePolicy as $item => $value )
                {
                    if ( $y < 4 )
                    {
                        $pos = $xx-($y);
                        $obj->finance->reEnrollPolicy->$item = $results[0][$pos];
                    }
                    else
                    {
                        $obj->finance->reEnrollPolicy->$item = $results[0][$x];
                        $x++;
                    }
                    $y--;
                }
            }
        }
		if ( in_array('academic', $modules) && ( strlen((string)$filters->contractId) > 0 || ( strlen((string)$filters->courseId) > 0 &&  strlen((string)$filters->courseVersion) > 0 && strlen((string)$filters->turnId) > 0 && strlen((string)$filters->unitId) > 0 ) ) )
        {
            if ( strlen((string)$filters->contractId) > 0 )
            {
                if ( strlen((string)$filters->periodId) > 0 )
                {
                    $periodId = $filters->periodId;
                }
                else
                {
                    $periodId = CURRENT_PERIOD_ID;
                }
                $sql = '
                SELECT
                    A.contractId,
                    A.courseId,
                    A.courseVersion,
                    A.turnId,
                    A.unitId,
                    B.formationLevelId,
                    TO_CHAR(A.formationDate, \'' . MASK_DATE . '\'),
                    A.formationPeriodId,
                    TO_CHAR(A.conclusionDate, \'' . MASK_DATE . '\'),
                    TO_CHAR(A.emendsDate, \'' . MASK_DATE . '\'),
                    TO_CHAR(A.diplomaDate, \'' . MASK_DATE . '\'),
                    A.inscriptionSelectiveProcId,
                    A.maturityDay,
                    A.isListener,
                    A.isRequestAcademicDegree,
                    A.obs,
                    A.parcelsNumber,
                    A.parcelsNumber2,
                    A.policyId,
                    A.policyIdForEnroll,
                    A.policyIdForReEnroll,
                    A.comments,
                    A.monograph,
                    checkSemester(A.contractId, \''.$periodId.'\') as serie,
                    A.personId,
                    getpersonname(F.legalresponsableid) as unitLegalResponsable,
                    B.name as courseName,
                    B.shortName as courseShortName,
                    B.acronym as courseAcronym,
                    TO_CHAR(B.beginDate, \'' . MASK_DATE . '\') as courseBeginDate,
                    TO_CHAR(B.recognitionDate, \'' . MASK_DATE . '\') as courseRecognitionDate,
                    B.recognitionDocumentNumber as courseRecognitionDocumentNumber,
                    B.moreInfo as courseMoreInfo,
                    TO_CHAR(B.endDate, \'' . MASK_DATE . '\') as courseEndDate,
                    B.requirements as courseRequirements,
                    B.obs as courseObs,
                    B.inep as courseInep,
                    TO_CHAR(C.beginDate, \'' . MASK_DATE . '\') as courseVersionBeginDate,
                    TO_CHAR(C.endDate, \'' . MASK_DATE . '\') as courseVersionEndDate,
                    C.semesterTotal,
                    C.credits,
                    C.hourTotal,
                    C.hourRequired,
                    TO_CHAR(D.authorizationDate, \'' . MASK_DATE . '\'),
                    D.authorizationDocument ,
                    D.maximumDependent,
                    getTurnDescription(D.turnId) as turnDescription,
                    getUnitDescription(D.unitId) as unitDescription
                FROM
                    acdContract A INNER JOIN
                    acdCourse B ON ( A.courseId = B.courseId ) INNER JOIN
                    acdCourseVersion C ON ( C.courseId = A.courseId AND C.courseVersion = A.courseVersion ) INNER JOIN
                    acdCourseOccurrence D ON ( D.courseId = A.courseId AND 
                                               D.courseVersion = A.courseVersion AND 
                                               D.unitId = A.unitId AND 
                                               D.turnId = A.turnId )
                   LEFT JOIN
                   basUnit E ON A.unitId = E.unitId
                   LEFT JOIN
                   basCompanyConf F on E.companyId = F.companyId
                                                
                WHERE
                    A.contractId = ' . $filters->contractId;
                $x = 0;
                $results = $this->db->query(SAGU::prepare($sql));
                $objContract = new objContract();

                foreach ( $objContract as $item => $value )
                {
                    $obj->academic->contract->$item = $results[0][$x];
                    $x++;
                }
                $objCourse = new objCourse();
                foreach ( $objCourse as $item => $value )
                {
                    $obj->academic->course->$item = $results[0][$x];
                    $x++;
                }
                $filters->periodId = strlen((string)$filters->periodId) == 0 ? CURRENT_PERIOD_ID : $filters->periodId;
                $sql = 'SELECT 
                            A.learningPeriodId,
                            A.periodId,
                            A.courseId,
                            A.courseVersion,
                            A.turnId,
                            A.policyId,
                            A.parcelsNumber,
                            A.unitId,
                            A.description,
                            A.formationLevelId,
                            A.previousLearningPeriodId,
                            TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                            TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                            TO_CHAR(A.beginDateLessons, \''. MASK_DATE . '\'),
                            A.weekEndExamsBegin,
                            A.average,
                            A.finalAverage,
                            A.averageWeight,
                            A.examWeight,
                            A.minimumFrequency,
                            A.minimumCredits,
                            A.minimumCreditsFreshman,
                            A.minimumCreditsTurn,
                            A.maxNote,
                            A.isFinanceGenerate,
                            A.bankAccountId,
                            A.bankContractId,
                            A.disapprovationWithoutExam,
                            A.userName,
                            TO_CHAR(A.dateTime, \'' . MASK_TIMESTAMP . '\'),
                            A.ipAddress
                        FROM 
                            acdLearningPeriod A INNER JOIN 
                            acdContract USING ( courseId, turnId, unitId, courseVersion ) 
                        WHERE 
                            A.periodId = \''. $filters->periodId . '\' AND 
                            contractId = ' . $filters->contractId. ' 
                        ORDER BY 
                            A.datetime desc';
                $result = $this->db->query($sql);
                $objLearningPeriod = new AcdLearningPeriod();
                $x = 0;
                foreach ( $objLearningPeriod as $item => $value )
                {
                    $obj->academic->learningPeriod->$item = $result[0][$x];
                    $x++;
                }
            }
        }
        $x = 0;
        if ( strlen((string)$obj->academic->contract->personId) > 0 )
        {
            $filters->personId = $obj->academic->contract->personId;
        }
		if ( in_array('basic', $modules) && strlen((string)$filters->personId) > 0 )
        {
            $sql = '
            SELECT
                A.personid,
                A.pronome_de_tratamento,
                A.nome,
                A.sexo,
                A.apelido,
                A.endereco_logradouro,
                A.endereco_numero,
                A.endereco_bairro,
                A.endereco_cityid,
                A.endereco_cep,
                A.endereco_complemento,
                A.endereco_cidade,
                A.endereco_stateid,
                A.endereco_estado,
                A.email,
                A.email_alternativo,
                TO_CHAR(A.data_nascimento, \''. MASK_DATE . '\'),
                A.nacionalidade,
                A.estado_civil,
                A.origem_etinica,
                A.cpf,
                A.rg,
                TO_CHAR(A.rg_emissao, \''. MASK_DATE.'\'),
                A.rg_orgao,
                A.rg_cityid,
                A.rg_cidade_orgao,
                A.rg_uf_orgao,
                A.filiacao_mae,
                A.filiacao_pai,
                A.telefone_celular,
                A.telefone_trabalho,
                A.telefone_residencial,
                A.telefone_para_mensagem,
                A.placa_carro,
                A.trabalho_nome,
                A.trabalho_cityid,
                A.trabalho_cidade,
                A.trabalho_logradouro,
                A.trabalho_cep,
                A.trabalho_bairro,
                A.trabalho_complemento,
                TO_CHAR(A.data_falecimento, \''.MASK_DATE.'\'),
                A.necessidade_especial,
                A.descricao_necessidade_especial,    
                B.personid,
                B.pronome_de_tratamento,
                B.nome,
                B.sexo,
                B.apelido,
                B.endereco_logradouro,
                B.endereco_numero,
                B.endereco_bairro,
                B.endereco_cityid,
                B.endereco_cep,
                B.endereco_complemento,
                B.endereco_cidade,
                B.endereco_stateid,
                B.endereco_estado,
                B.email,
                B.email_alternativo,
                B.data_nascimento,
                B.nacionalidade,
                B.estado_civil,
                B.origem_etinica,
                B.cpf,
                B.rg,
                B.rg_emissao,
                B.rg_orgao,
                B.rg_cityid,
                B.rg_cidade_orgao,
                B.rg_uf_orgao,
                B.filiacao_mae,
                B.filiacao_pai,
                B.telefone_celular,
                B.telefone_trabalho,
                B.telefone_residencial,
                B.telefone_para_mensagem,
                B.placa_carro,
                B.trabalho_nome,
                B.trabalho_cityid,
                B.trabalho_cidade,
                B.trabalho_logradouro,
                B.trabalho_cep,
                B.trabalho_bairro,
                B.trabalho_complemento,
                B.data_falecimento,
                B.necessidade_especial,
                B.descricao_necessidade_especial
            FROM
                informacoes_pessoais A LEFT JOIN
                informacoes_pessoais B ON ( B.personId = A.responsablelegalId )
            WHERE
                A.personId = '. $filters->personId;
        
            if ( strlen((string)$filters->name) > 0 )
            {
                $sql .= ' AND TO_ASCII(UPPER(A.nome)) ILIKE TO_ASCII(UPPER(?)) ';
                $args[] = $filters->name.'%';
            }
            $results = $this->db->query(SAGU::prepare($sql,$args));
        
            $x = 0;
            $objPerson = new objPerson();

            foreach ( $objPerson as $item => $value )
            {
                $obj->basic->person->$item = $results[0][$x];
                $x++;
            }
    
            foreach ( $objPerson as $item => $value )
            {
                $obj->basic->responsable->$item = $results[0][$x];
                $x++;
            }
        }
        return $obj;
    }
}
?>
