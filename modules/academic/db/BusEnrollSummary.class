<?php
/**
 *
 * This file handles the connection and actions for acdEnrollSummary table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 27/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/


/**
 * Class to manipulate the acdEnrollSummary table
 **/
class BusinessAcademicBusEnrollSummary extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessAcademicBusEnrollSummary()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $learningPeriodId (integer): Primary key of the record to be retrieved
     * @param $recordDate (integer): Primary key of the record to be retrieved
     * @param $operationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEnrollSummary($contractId, $learningPeriodId, $recordDate, $operationId)
    {
        $sql = 'SELECT A.contractId,
                       A.learningPeriodId,
                       TO_CHAR(A.recordDate,\'' . MASK_DATE . '\'),
                       A.operationId,
                       A.multiplier,
                       A.parcelsNumber,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdEnrollSummary A
                 WHERE A.contractId       = ?
                   AND A.learningPeriodId = ?
                   AND A.recordDate       = ?
                   AND A.operationId      = ?';

        $args = array (
                        $contractId,
                        $learningPeriodId,
                        $recordDate,
                        $operationId
                      );

        //$db     = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $args));

        $enrollSummary = new acdEnrollSummary();
        list ( $enrollSummary->contractId,
               $enrollSummary->learningPeriodId,
               $enrollSummary->recordDate,
               $enrollSummary->operationId,
               $enrollSummary->multiplier,
               $enrollSummary->parcelsNumber,
               $enrollSummary->isProcessed,
               $enrollSummary->userName,
               $enrollSummary->dateTime,
               $enrollSummary->ipAddress ) = $result[0];

        return $enrollSummary;
    }

    public function getEnrollSummaryById($enrollSummaryId)
    {

        $sql = 'SELECT A.contractId,
                       A.learningPeriodId,
                       TO_CHAR(A.recordDate,\'' . MASK_DATE . '\'),
                       A.operationId,
                       A.multiplier,
                       A.parcelsNumber,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdEnrollSummary A
                 WHERE A.enrollSummaryId      = ?';

        $args = array (
                        $enrollSummaryId
                      );

        //$db     = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $args));

        $enrollSummary = new acdEnrollSummary();
        list ( $enrollSummary->contractId,
               $enrollSummary->learningPeriodId,
               $enrollSummary->recordDate,
               $enrollSummary->operationId,
               $enrollSummary->multiplier,
               $enrollSummary->parcelsNumber,
               $enrollSummary->isProcessed,
               $enrollSummary->userName,
               $enrollSummary->dateTime,
               $enrollSummary->ipAddress ) = $result[0];

        return $enrollSummary;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEnrollSummary($data)
    {

        $sql = 'INSERT INTO acdEnrollSummary
                            (contractId,
                             learningPeriodId,
                             recordDate,
                             operationId,
                             multiplier,
                             parcelsNumber,
                             isProcessed,
                             isValue)
                     VALUES (?,?,TO_DATE(?, \'' . MASK_DATE . '\'),?,?,?,?,?)';

        $args = array(
                       $data->contractId,
                       $data->learningPeriodId,
                       $data->recordDate,
                       $data->operationId,
                       $data->multiplier,
                       $data->parcelsNumber,
                       $data->isProcessed,
                       $data->isValue
                     );

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $learningPeriodId (integer): Primary key of the record to be retrieved
     * @param $recordDate (integer): Primary key of the record to be retrieved
     * @param $operationId (integer): Primary key of the record to be retrieved
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEnrollSummary($contractId, $learningPeriodId, $recordDate=NULL, $operationId=NULL)
    {
        $sql = 'DELETE FROM acdEnrollSummary
                 WHERE contractId       = ?
                   AND isProcessed      = FALSE
                   AND learningPeriodId = ? ';

        $args = array (
                        $contractId,
                        $learningPeriodId
                      );

        if ( strlen((string)$operationId)>0 )
        {
            $sql .= '    AND operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen((string)$recordDate)>0 )
        {
            $sql .= '    AND recordDate  = to_date(?, \''.MASK_DATE.'\'),';
            $args[] = $recordDate;
        }

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEnrollSummary($filters)
    {
        $sql= 'SELECT A.enrollSummaryId,
                      B.contractId,
                      C.name,
                      D.learningPeriodId,
                      D.description,
                      TO_CHAR(A.recordDate,\'' . MASK_DATE . '\'),
                      E.operationId,
                      E.description,
                      round(A.multiplier,' . REAL_ROUND_VALUE . '),
                      A.isValue,
                      A.parcelsNumber,
                      A.isProcessed
                 FROM acdEnrollSummary A
           INNER JOIN acdContract B
                   ON (B.contractId = A.contractId)
      INNER JOIN ONLY basPhysicalPerson C
                   ON (C.personId = B.personId)
           INNER JOIN acdLearningPeriod D
                   ON (D.learningPeriodId = A.learningPeriodId)
           INNER JOIN finOperation E
                   ON (E.operationId = A.operationId) ';

        if ( strlen((string)$filters->enrollSummaryId) > 0 )
        {
            $where .= ' AND A.enrollSummaryId = ? ';
            $args[] = $filters->enrollSummaryId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND C.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $filters->contractId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ? ';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->operationId) > 0 )
        {
            $where .= ' AND A.operationId = ? ';
            $args[] = $filters->operationId;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND D.periodId = ? ';
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY C.name ';
            //$db = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

   /**
    * Do a search on the database table handled by the class
    *
    * @author: Eduardo Miglioransa [eduardo@solis.coop.br]
    * @last modification: William Prigol Lopes [william@solis.coop.br]
    *
    * @param $filters (object): Search filters
    *
    * @return (array): An array containing the search results
    */
    public function getNotProcessedEnrollSummaries($month = null, $year = null)
    { 

        $sql = ' SELECT A.learningPeriodId,
                        count(*)
                   FROM acdEnrollSummary A
             INNER JOIN acdContract B
                     ON (B.contractId = A.contractId)
             INNER JOIN acdLearningPeriod C
                     ON (C.learningPeriodId = A.learningPeriodId)
                  WHERE isProcessed = \''. DB_FALSE .'\' ';

        if ((strlen((string)$month)>0) && (strlen((string)$year)>0))
        {
            $sql.= ' AND ?::interval BETWEEN C.beginDate
                                         AND C.endDate ';

            $args[] = $year.' years '.$month.' mons ';
            $sql = SAGU::prepare($sql, $args);
        }
        $sql .= ' GROUP BY 1 ';
        $result = $this->db->query($sql);
        return $result;
     }

   /**
    * Do a search on the database table handled by the class
    *
    * @author Eduardo Miglioransa [eduardo@solis.coop.br]
    *
    * @param $filters (object): Search filters
    *
    * @return (array): An array containing the search results
    */
    public function checkLearningPeriodValue($contractId)
    {
        $sql= 'SELECT value
                 from finprice
                where learningperiodid IN ( SELECT learningperiodid
                                              FROM acdlearningperiod
                                             WHERE courseid IN ( SELECT courseid
                                                                 FROM acdcontract
                                                                WHERE contractid = ? )
                                               AND date(now()) BETWEEN begindate
                                                                   AND enddate )
                  AND date(now()) BETWEEN startdate
                                      AND enddate ';

        //$db = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $contractId));

        if( strlen((string)$result[0][0]) > 0)
        {
            return $result[0][0];
        }
        return false;
    }
}

?>
