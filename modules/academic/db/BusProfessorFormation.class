<?php
/**
 *
 * This file handles the connection and actions for acdProfessorFormation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdProfessorFormation table
 **/
class BusinessAcademicBusProfessorFormation extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listProfessorFormation()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $formationLevelId (integer): Primary key of the record to be retrieved
     * @param $externalCourseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessorFormation($professorId, $formationLevelId, $externalCourseId)
    {
        $sql = 'SELECT A.professorId,
                       B.name AS professorName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.externalCourseId,
                       D.name AS externalCourseName,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.dateConclusion,\'' . MASK_DATE . '\'),
                       A.institutionId,
                       E.name AS institutionName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdProfessorFormation A
             LEFT JOIN basPhysicalPersonProfessor B 
                    ON (B.personId = A.professorId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdExternalCourse D
                    ON (D.externalCourseId = A.externalCourseId)
             LEFT JOIN basLegalPerson E
                    ON (E.personId = A.institutionId)
                 WHERE A.professorId      = ?
                   AND A.formationLevelId = ?
                   AND A.externalCourseId = ?';

        $pk = array(
                     $professorId,
                     $formationLevelId,
                     $externalCourseId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $professorFormation = new AcdProfessorFormation();

        list ( $professorFormation->professorId,
               $professorFormation->professorName,
               $professorFormation->formationLevelId,
               $professorFormation->formationLevelDescription,
               $professorFormation->externalCourseId,
               $professorFormation->externalCourseName,
               $professorFormation->beginDate,
               $professorFormation->dateConclusion,
               $professorFormation->institutionId,
               $professorFormation->institutionName,
               $professorFormation->userName,
               $professorFormation->dateTime,
               $professorFormation->ipAddress ) = $result[0];

        return $professorFormation; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessorFormation($filters)
    {
        $sql = 'SELECT A.professorId,
                       B.name AS professorName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.externalCourseId,
                       D.name AS externalCourseName,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.dateConclusion,\'' . MASK_DATE . '\'),
                       A.institutionId,
                       E.name AS institutionName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdProfessorFormation A
             LEFT JOIN basPhysicalPersonProfessor B 
                    ON (B.personId = A.professorId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdExternalCourse D
                    ON (D.externalCourseId = A.externalCourseId)
             LEFT JOIN basLegalPerson E
                    ON (E.personId = A.institutionId)';

        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ?';
            $args[] = $filters->professorId;
        }
        if ( strlen((string)$filters->professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->professorName . '%';
        }
        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->formationLevelDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->formationLevelDescription . '%';
        }
        if ( strlen((string)$filters->externalCourseId) > 0 )
        {
            $where .= ' AND A.externalCourseId = ?';
            $args[] = $filters->externalCourseId;
        }
        if ( strlen((string)$filters->externalCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->externalCourseName . '%';
        }
        if ( strlen((string)$filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen((string)$filters->dateConclusion) > 0 )
        {
            $where .= ' AND A.dateConclusion = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->dateConclusion;
        }
        if ( strlen((string)$filters->institutionId) > 0 )
        {
            $where .= ' AND A.institutionId = ?';
            $args[] = $filters->institutionId;
        }
        if ( strlen((string)$filters->institutionName) > 0 )
        {
            $where .= ' AND TO_ASCII(E.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->institutionName . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessorFormation($data)
    {
        $sql = 'INSERT INTO acdProfessorFormation
                            (professorId,
                             formationLevelId,
                             externalCourseId,
                             beginDate,
                             dateConclusion,
                             institutionId)
                     VALUES (?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?)';

        $args = array( 
                       $data->professorId,
                       $data->formationLevelId,
                       $data->externalCourseId,
                       $data->beginDate,
                       $data->dateConclusion,
                       $data->institutionId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateProfessorFormation($data)
    {
        $sql = 'UPDATE acdProfessorFormation
                   SET beginDate        = TO_DATE(?,\'' . MASK_DATE . '\'),
                       dateConclusion   = TO_DATE(?,\'' . MASK_DATE . '\'),
                       institutionId    = ?
                 WHERE professorId      = ?
                   AND formationLevelId = ?
                   AND externalCourseId = ?';

        $args = array( 
                       $data->beginDate,
                       $data->dateConclusion,
                       $data->institutionId,
                       $data->professorId,
                       $data->formationLevelId,
                       $data->externalCourseId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $formationLevelId (integer): Primary key of the record to be retrieved
     * @param $externalCourseId (integer): Primary key of the record to be retrieved
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteProfessorFormation($professorId, $formationLevelId, $externalCourseId)
    {
        $sql = 'DELETE FROM acdProfessorFormation
                      WHERE professorId      = ?
                        AND formationLevelId = ?
                        AND externalCourseId = ?';

        $pk = array(
                     $professorId,
                     $formationLevelId,
                     $externalCourseId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
