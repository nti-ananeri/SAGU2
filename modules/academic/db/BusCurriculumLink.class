<?php
/**
 *
 * This file handles the connection and actions for acdCurriculumLink table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 29/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCurriculumLink table
 **/
class BusinessAcademicBusCurriculumLink extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculumLink()
    {
        return 'Not implemented';
    }
    
    /**
     *
     **/
    public function getCurriculumLink()
    {
        return 'Not implemented'; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculumLink($filters)
    {
        $sql = ' SELECT A.curriculumId,
                        B.courseId || \' / \' || B.courseVersion,
                        D.name AS courseName,
                        B.curricularComponentId || \' / \' || B.curricularComponentVersion,
                        E.name AS curricularComponentName,
                        A.curriculumLinkId,
                        B2.courseId || \' / \' || B2.courseVersion,
                        D2.name AS courseName,
                        B2.curricularComponentId || \' / \' || B2.curricularComponentVersion,
                        E2.name AS curricularComponentName
                   FROM acdCurriculumLink A
                  INNER JOIN acdCurriculum B
                     ON (A.curriculumId = B.curriculumId)
                  INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
                  INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId)
                  INNER JOIN acdCurriculum B2
                     ON (A.curriculumLinkId = B2.curriculumId)
                  INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
                  INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) ';

        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->curriculumLinkId) > 0 )
        {
            $where .= ' AND A.curriculumLinkId = ?';
            $args[] = $filters->curriculumLinkId;
        }

        //curriculumId
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }

        //curriculumLink
        if ( strlen((string)$filters->courseLinkId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseLinkId;
        }
        if ( strlen((string)$filters->courseLinkVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseLinkVersion;
        }
        if ( strlen((string)$filters->courseLinkUnitId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->courseLinkUnitId;
        }
        if ( strlen((string)$filters->courseLinkTurnId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->courseLinkTurnId;
        }
        if ( strlen((string)$filters->curricularComponentLinkId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentLinkId;
        }
        if ( strlen((string)$filters->curricularComponentLinkVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentLinkVersion;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.curriculumId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculumLink($data)
    {
        $sql = 'INSERT INTO acdCurriculumLink
                            (curriculumId,
                             curriculumLinkId)
                     VALUES (?,?)';

        $args = array( 
                       $data->curriculumId,
                       $data->curriculumLinkId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculumLink($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $curriculumOutId (string): Primary key for deletion
     * @param $curriculumInId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculumLink($curriculumId, $curriculumLinkId)
    {
        $sql = 'DELETE FROM acdCurriculumLink
                      WHERE curriculumId = ?
                        AND curriculumLinkId  = ?';

        $pk = array(
                     $curriculumId,
                     $curriculumLinkId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }
   
    /**
     * Verify if a curriculum have a concurrence
     * 
     * @curriculumInId (int): Curriculum that entered in situation for a other
     * 
     * @return (int): Curriculum that out because the new curriculum.
     */
    public function ifHaveConcurrence($curriculumInId)
    {
        $sql = ' SELECT curriculumOutId
                   FROM acdCurriculumLink
                  WHERE curriculumInId = ? ';

        $db = $this->getDatabase();
    
        $args = array($curriculumInId);
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
