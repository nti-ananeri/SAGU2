<?php
/**
 *
 * This file handles the connection and actions for acdReasonCancellation table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 10/04/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdReasonCancellation table
 **/
class BusinessAcademicBusInterchangeType extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInterchangeType()
    {
        $sql = 'SELECT A.interchangeTypeId,
                       A.description
                  FROM acdInterchangeType A
              ORDER BY 1';
        
        $db = $this->getDatabase();
        $result = $db->query($sql);
        
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $reasonCancellationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInterchangeType($interchangeTypeId)
    {
        $sql = 'SELECT A.interchangeTypeId,
                       A.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM acdInterchangeType A
                 WHERE A.interchangeTypeId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$interchangeTypeId));
        //$db->close();

        $interchangeType = new AcdInterchangeType();

        list ( $interchangeType->interchangeTypeId,
               $interchangeType->description,
               $interchangeType->userName,
               $interchangeType->dateTime ) = $result[0];

        return $interchangeType;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInterchangeType($data)
    {
        $sql = 'SELECT A.interchangeTypeId,
                       A.description
                  FROM acdInterchangeType A';

        $where = '';
        unset($args);
        if ( strlen((string)$data->interchangeTypeId) > 0 )
        {
            $where .= '    AND   A.interchangeTypeId = ?';
            $args[] = $data->interchangeTypeId;
        }
        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '    AND   TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $data->description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
            $db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInterchangeType($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO acdInterchangeType
                            (description)
                     VALUES (?)';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $data->description));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInterchangeType($data)
    {
        $sql = 'UPDATE acdInterchangeType
                   SET description = ?
                 WHERE interchangeTypeId  = ?';

        $args = array($data->description,
                      $data->interchangeTypeId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$this->checkError($db);
        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $reasonCancellationId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInterchangeType($interchangeTypeId)
    {
        $sql = 'DELETE FROM acdInterchangeType
                      WHERE interchangeTypeId = ?';

        $args = array($interchangeTypeId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));
        //$this->checkError($db);
        //$db->close();

        return $result;
    }

}

?>
