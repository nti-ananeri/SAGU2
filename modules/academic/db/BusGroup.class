<?php
/**
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdGroup table
 **/
class BusinessAcademicBusGroup extends Business
{
    public $db;
    
    //Class constructor
    public function BusinessAcademicBusGroup()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listGroup()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $groupId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getGroup($groupId)
    {
        $sql = 'SELECT A.groupId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.curriculumId,
                       C.courseId AS curriculumCourseId,
                       C.courseVersion AS curriculumCourseVersion,
                       D.name AS curriculumCourseName,
                       C.curricularComponentId AS curriculumCurricularComponentId,
                       C.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       E.name AS curriculumCurricularComponentName,
                       A.complement,
                       A.vacant,
                       A.isCancellation,
                       A.objectives,
                       A.content,
                       A.methodology,
                       A.evaluation,
                       A.basicBibliography,
                       A.complementaryBibliography,
                       A.observation,
                       A.regimenId,
                       H.description AS regimenDescription,
                       A.isUseWebDaily,
                       A.isClosed,
                       A.isContentProgrammarian,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.bibliographyDescription,
                       A.totalEnrolled,
                       A.classId,
                       C.curricularComponentGroupDocumentEndCourseId,
                       C.curricularComponentGroupElectiveId,
                       C.curricularComponentTypeId
                  FROM acdGroup A
             LEFT JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
             LEFT JOIN acdCurriculum C
                    ON (C.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = C.courseId)
             LEFT JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = C.curricularComponentId
                        AND E.curricularComponentVersion = C.curricularComponentVersion)
             LEFT JOIN acdRegimen H
                    ON (H.regimenId = A.regimenId)
                 WHERE A.groupId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $groupId));
        //$db->close();

        $group = new AcdGroup();

        list ( 
               $group->groupId,
               $group->learningPeriodId,
               $group->learningPeriodDescription,
               $group->curriculumId,
               $group->curriculumCourseId,
               $group->curriculumCourseVersion,
               $group->curriculumCourseName,
               $group->curriculumCurricularComponentId,
               $group->curriculumCurricularComponentVersion,
               $group->curriculumCurricularComponentName,
               $group->complement,
               $group->vacant,
               $group->isCancellation,
               $group->objectives,
               $group->content,
               $group->methodology,
               $group->evaluation,
               $group->basicBibliography,
               $group->complementaryBibliography,
               $group->observation,
               $group->regimenId,
               $group->regimenDescription,
               $group->isUseWebDaily,
               $group->isClosed,
               $group->isContentProgrammarian,
               $group->userName,
               $group->dateTime,
               $group->ipAddress,
               $group->bibliographyDescription,
               $group->totalEnrolled,
               $group->classId,
               $group->curricularComponentGroupDocumentEndCourseId,
               $group->curricularComponentGroupElectiveId,
               $group->curricularComponentTypeId
             ) = $result[0];
             
        $group->basicBibliography = explode(',',str_replace('{','',str_replace('}','',$group->basicBibliography)));
        $group->complementaryBibliography = explode(',',str_replace('{','',str_replace('}','',$group->complementaryBibliography)));

        return $group; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchGroup($filters)
    {
        $sql = 'SELECT  A.groupId,
                        C.curricularComponentId || \'/\' || C.curricularComponentVersion || \' - \' || C.name,
                        A.isCancellation,
                        COALESCE(A.totalEnrolled, 0) || \'/\' || COALESCE(A.vacant, 0),
                        D.description,
                        TO_CHAR(E.beginDate, \'' . MASK_DATE . '\'),
                        TO_CHAR(E.endDate, \'' . MASK_DATE . '\'),
                        E.learningPeriodId,
                        C.name
                   FROM acdGroup A
              LEFT JOIN acdCurriculum B 
                     ON (B.curriculumId = A.curriculumId)
              LEFT JOIN acdCurricularComponent C 
                     ON (C.curricularComponentId = B.curricularComponentId AND
                         C.curricularComponentVersion = B.curricularComponentVersion)
              LEFT JOIN acdRegimen D 
                     ON (A.regimenId = D.regimenId)
              LEFT JOIN acdLearningPeriod E
                     ON (E.learningPeriodId = A.learningPeriodId)
              LEFT JOIN acdCourse F
                     ON (F.courseId = E.courseId)
              LEFT JOIN acdClass I
                     ON (I.classId = A.classId)';

        if ( strlen((string)$filters->classId) > 0 )
        {
            $where .= ' AND A.classId = ? ';
            $args[] = $filters->classId;
        }
        if ( strlen((string)$filters->className) > 0 )
        {
            $where .= ' AND TO_ASCII(I.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->className;
        }
        if ( strlen((string)$filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $filters->groupId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND C.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen((string)$filters->regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ?';
            $args[] = $filters->regimenId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0)
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        } 
        if ( strlen((string)$filters->learningPeriodDescription) > 0)
        {
            $where .= ' AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->learningPeriodDescription;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND E.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND E.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND E.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND E.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND EXISTS (SELECT \'X\'
                                      FROM acdSchedule X
                                INNER JOIN acdScheduleProfessor Y
                                        ON (Y.scheduleId = X.scheduleId)
                                     WHERE X.groupId = A.groupId
                                       AND Y.professorId = ?)';
            $args[] = $filters->professorId;
        }
        if ( strlen((string)$filters->unitId) > 0 || strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND EXISTS (SELECT \'X\'
                                      FROM acdSchedule X
                                INNER JOIN acdScheduleLearningPeriod Y
                                        ON (Y.scheduleLearningPeriodId = X.scheduleLearningPeriodId)
                                     WHERE X.groupId = A.groupId';
            unset($subWhere);
            if ( strlen((string)$filters->unitId) > 0 )
            {
                $where .= ' AND X.unitId = ?';
                $args[] = $filters->unitId;
            }
            if ( strlen((string)$filters->turnId) > 0 )
            {
                $where .= ' AND Y.turnId = ?';
                $args[] = $filters->turnId;
            }
            $where .= ')';
        }
        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->isCancellation) > 0 )
        {
            $where .= ' AND A.isCancellation = ?';
            $args[] = $filters->isCancellation;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY E.learningPeriodId, E.courseId, C.name';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    public function searchGroupLearningPeriods($filters)
    {
        $sql = 'SELECT DISTINCT E.learningPeriodId,
                                E.description
                           FROM acdGroup A
                      LEFT JOIN acdCurriculum B 
                             ON (B.curriculumId = A.curriculumId)
                      LEFT JOIN acdCurricularComponent C 
                             ON (C.curricularComponentId = B.curricularComponentId AND
                                 C.curricularComponentVersion = B.curricularComponentVersion)
                      LEFT JOIN acdRegimen D 
                             ON (A.regimenId = D.regimenId)
                      LEFT JOIN acdLearningPeriod E
                             ON (E.learningPeriodId = A.learningPeriodId)
                     INNER JOIN acdScheduleLearningPeriod F
                             ON (F.learningPeriodId = E.learningPeriodId)
                     INNER JOIN acdSchedule G
                             ON (G.scheduleLearningPeriodId = F.scheduleLearningPeriodId)
                     INNER JOIN acdScheduleProfessor H
                             ON (H.scheduleId = G.scheduleId)
                      LEFT JOIN acdClass I
                             ON (I.classId = A.classId)';

        if ( strlen((string)$filters->classId) > 0 )
        {
            $where .= ' AND A.classId = ? ';
            $args[] = $filters->classId;
        }
        if ( strlen((string)$filters->className) > 0 )
        {
            $where .= ' AND I.name ILIKE ? ';
            $args[] = $filters->className;
        }        
        if ( strlen((string)$filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $filters->groupId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND C.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND C.name ILIKE ?';
            $args[] = $filters->curricularComponentName;
        }
        
        if ( strlen((string)$filters->regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ?';
            $args[] = $filters->regimenId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0)
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        } 
        if ( strlen((string)$filters->learningPeriodDescription) > 0)
        {
            $where .= ' AND E.description ILIKE ?';
            $args[] = $filters->learningPeriodDescription;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND E.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND E.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND H.professorId = ?';
            $args[] = $filters->professorId;
        }
        
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY E.learningPeriodId';

            $result = $this->db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return groupId if succed, otherwise False
     *
     **/
    public function insertGroup($data)
    {   
        $sql = 'SELECT nextVal(\'seq_groupId\')';
                
        $query = $this->db->query($sql);
        
        $groupId = $query[0][0];
        
        $sql = 'INSERT INTO acdGroup
                            (groupId,
                             learningPeriodId,
                             curriculumId,
                             complement,
                             vacant,
                             isCancellation,
                             objectives,
                             content,
                             methodology,
                             evaluation,' .
//                             'basicBibliography,'.
//                             complementaryBibliography,
                            'observation,
                             regimenId,
                             isUseWebDaily,
                             isClosed,
                             isContentProgrammarian,
                             bibliographyDescription,
                             classId)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $args = array( 
                       $groupId,
                       $data->learningPeriodId,
                       $data->curriculumId,
                       $data->complement,
                       $data->vacant,
                       $data->isCancellation,
                       $data->objectives,
                       $data->content,
                       $data->methodology,
                       $data->evaluation,
                       //$data->basicBibliography,
                       //$data->complementaryBibliography,
                       $data->observation,
                       $data->regimenId,
                       $data->isUseWebDaily,
                       $data->isClosed,
                       $data->isContentProgrammarian,
                       $data->bibliographyDescription,
                       $data->classId
                     );

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return ($result ? $groupId : $result);
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateGroup($data)
    {
        $sql = 'UPDATE acdGroup
                   SET learningPeriodId          = ?,
                       curriculumId              = ?,
                       complement                = ?,
                       vacant                    = ?,
                       isCancellation            = ?,
                       objectives                = ?,
                       content                   = ?,
                       methodology               = ?,
                       evaluation                = ?,
                       basicBibliography         = ?,
                       complementaryBibliography = ?,
                       observation               = ?,
                       regimenId                 = ?,
                       isUseWebDaily             = ?,
                       isClosed                  = ?,
                       isContentProgrammarian    = ?,
                       bibliographyDescription   = ?,
                       classId                   = ?
                 WHERE groupId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->curriculumId,
                       $data->complement,
                       $data->vacant,
                       $data->isCancellation,
                       $data->objectives,
                       $data->content,
                       $data->methodology,
                       $data->evaluation,
                       '{' . implode(',', $data->basicBibliography) . '}',
                       '{' . implode(',', $data->complementaryBibliography) . '}',
                       $data->observation,
                       $data->regimenId,
                       $data->isUseWebDaily,
                       $data->isClosed,
                       $data->isContentProgrammarian,
                       $data->bibliographyDescription,
                       $data->classId,
                       $data->groupId
                     );
                       
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        //se a turma for reaberta, coloca todos alunos como matriculados
        if ( $data->isClosed == DB_FALSE )
        {
            $sql    = 'UPDATE acdEnroll 
                          SET statusId = ?::integer
                        WHERE groupId  = ?::integer AND
                        NOT statusId = ?::integer';
            $args   = array(ENROLL_STATUS_ENROLLED, $data->groupId, ENROLL_STATUS_CANCELLED);
            $result = $this->db->execute(SAGU::prepare($sql, $args));
        }

        //se a turma for cancelada, coloca todos alunos como cancelados
        if ( $data->isCancellation == DB_TRUE )
        {
            $sql    = 'UPDATE acdEnroll 
                          SET statusId = ?
                        WHERE groupId  = ?';
            $args   = array(ENROLL_STATUS_CANCELLED, $data->groupId);
            $result = $this->db->execute(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $groupId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteGroup($groupId)
    {
        $sql = 'DELETE FROM acdGroup
                      WHERE groupId = ?';

        $pk = array(
                     $groupId
                   );

        $result = $this->db->execute(SAGU::prepare($sql, $groupId));
        //$db->close();

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $periodId (string): Primary key of the record to be retrieved
     *
     * @param $formationLevelId (int): Id for graduate formation level 
	 *
	 * @return (array): An array containing professor, group, schedule
     *
     **/

	public function getProfessorGroupSchedule($periodId, $formationLevelId = null)
	{
		$sql = 'SELECT C.professorId,
                       D.name as professorName,
                       E.courseId,
       			       F.shortName as courseName,
  			           E.curricularComponentId,
    			       G.name as curricularComponentName,
  			           H.description as weekDay,
    			       I.room || \'/\' || I.building,
    			       J.description as turnDescription,
        			   A.groupId,
					   B.examDate	
 			      FROM acdGroup A
 		    INNER JOIN acdSchedule B
 		            ON ( A.groupId = B.groupId )
            INNER JOIN acdScheduleProfessor C
      			    ON ( B.scheduleId = C.scheduleId )
    		 LEFT JOIN basPhysicalPersonProfessor D
			        ON ( C.professorId = D.personId )
			INNER JOIN acdCurriculum E
    			    ON ( A.curriculumId = E.curriculumId )
			INNER JOIN acdCourse F
			        ON ( E.courseId = F.courseId )
			INNER JOIN acdCurricularComponent G
    			    ON ( E.curricularComponentId = G.curricularComponentId )
 			 LEFT JOIN basWeekDay H
 			        ON ( B.weekDayId = H.weekDayId )
			 LEFT JOIN insPhysicalResource I
			        ON ( B.physicalResourceId          = I.physicalResourceId 
	               AND B.physicalResourceVersion = I.physicalResourceVersion)
			 LEFT JOIN basTurn J
			        ON ( E.turnId = J.turnId )
			     WHERE A.learningPeriodId IN ( SELECT learningPeriodId
            			                         FROM acdLearningPeriod
                        			            WHERE periodId = ?
                                			      AND formationlevelid = ?)
      			   AND A.iscancellation = false
  			  ORDER BY B.weekDayId';

		$args[] = $periodId;	
		$args[] = $formationLevelId;

		$result = $this->db->query(SAGU::prepare($sql, $args));

		return $result;
	   		
	}

    /**
     * Return a specific record from the database
     *
     * @param $periodId (string): Primary key of the record to be retrieved
     *
     * @return (array): An array containing professor, group, schedule
     *
     **/

    public function getPupilFolderEnrolled($courseId, $unitId, $stateContractId, $periodId)
    {
        $sql = 'SELECT DISTINCT A.personId,
                                A.name,
                                B.courseId
                        FROM ONLY basPerson A	
                        INNER JOIN acdContract B
                                ON (B.personId = A.personId)
                        INNER JOIN acdMovementContract C
                                ON (B.contractId = C.contractId)
                        INNER JOIN acdLearningPeriod D
                                ON (C.learningPeriodId = D.learningPeriodId)
                            WHERE B.courseId = ?
                            AND B.unitId = ?';

        $args[] = $courseId;	
        $args[] = $unitId;

        if ( $stateContractId != NULL)
        {
            $sql .= ' AND C.stateContractId = ?';
            $args[] = $stateContractId;
        }

        $sql .= '           AND D.periodId = ?
                        ORDER BY A.name';

        $args[] = $periodId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
	}

    public function getPupilFolderByChoicePupil($courseId, $unitId, $stateContractId, $periodId, $personId)
    {
        $sql = 'SELECT DISTINCT A.personId,
                                A.name,
                                B.courseId
                        FROM ONLY basPerson A	
                        INNER JOIN acdContract B
                                ON (B.personId = A.personId)
                        INNER JOIN acdMovementContract C
                                ON (B.contractId = C.contractId)
                        INNER JOIN acdLearningPeriod D
                                ON (C.learningPeriodId = D.learningPeriodId)
                            WHERE B.courseId = ?
                                AND B.unitId = ?
                                AND C.stateContractId = ?
                                AND D.periodId = ?
                                AND A.personId = ?
                        ORDER BY A.name';

        $args[] = $courseId;	
        $args[] = $unitId;
        $args[] = $stateContractId;
        $args[] = $periodId;
        $args[] = $personId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

	public function getPupilFolderBySelectiveProcess($periodId, $selectiveProcessId, $courseId, $unitId)
	{
        $sql = 'SELECT DISTINCT E.personId,
                                D.courseId,
                                E.name 	
                            FROM sprInscription A 
                        INNER JOIN sprInscriptionOption B	 
                                ON (A.inscriptionId = B.inscriptionId)	 
                        INNER JOIN sprCourseOccurrence C	 
                                ON (B.courseOccurrenceId = C.courseOccurrenceId)
                        INNER JOIN acdCourse D
                                ON (C.courseId = D.courseId)
                INNER JOIN ONLY basPhysicalPerson E
                                ON (A.personId = E.personId)
                        INNER JOIN acdLearningPeriod G
                                ON (G.courseId      = C.courseId AND
                                    G.courseVersion = C.courseVersion AND
                                    G.turnId        = C.turnId AND
                                    G.unitId        = C.unitId AND
                                    G.periodId      = ?)
                        INNER JOIN acdContract F
                                ON (F.inscriptionSelectiveProcId = A.inscriptionId AND
                                    F.personId = A.personId AND
                                    F.courseId = C.courseId AND
                                    F.courseVersion = C.courseVersion AND
                                    F.turnId = C.turnId AND
                                    F.unitId = C.unitId AND
                hasContractualMovement( F.contractId, G.learningPeriodId, 5) = false)
                            WHERE A.selectiveProcessId = ? AND 
                                    D.courseId = ? AND
                                    F.unitId   = ? 
                        ORDER BY E.name';

        $args[] = $periodId;
        $args[] = $selectiveProcessId;
        $args[] = $courseId;	
        $args[] = $unitId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function deleteGroupRelatedData($groupId)
    {
        $sql = 'SELECT scheduleId FROM acdSchedule WHERE groupId = ?';
        
        $args = array( $groupId );
        
        $schedules = $this->db->query(SAGU::prepare($sql, $args));
        
        if (count($schedules) > 0)
        {
            foreach ($schedules as $schedule)
            {
                $sql = 'DELETE FROM acdScheduleProfessor WHERE scheduleId = ?';
                
                $args = array( $schedule[0] );
                
                $this->db->execute(SAGU::prepare($sql, $args));
                
                $sql = 'DELETE FROM acdSchedule WHERE scheduleId = ?';
                
                $args = array( $schedule[0] );
                
                $this->db->execute(SAGU::prepare($sql, $args));
            }
        }
    }
    
    public function isCurricularComponentBeingOfferredInPeriod($curricularComponentId, $curricularComponentVersion, $periodId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM acdGroup A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdPeriod C
                    ON (C.periodId = B.periodId)
            INNER JOIN acdCurriculum D
                    ON (D.curriculumId = A.curriculumId)
                 WHERE D.curricularComponentId = ?
                   AND D.curricularComponentVersion = ?
                   AND C.periodId = ?';

        $args = array( $curricularComponentId,
                       $curricularComponentVersion,
                       $periodId );

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return ($result[0][0] > 0);
    }

    public function getProfessorsWithDailyClosed($periodId, $isClosed)
    {
        $sql = 'SELECT DISTINCT F.personId,
                       F.name,
                       E.curricularComponentId,
                       E.curricularComponentVersion,
                       E.shortName,
                       lower(F.email) 
                  FROM acdgroup A 
            INNER JOIN acdSchedule B 
                    ON (A.groupid = B.groupid)
            INNER JOIN acdScheduleProfessor C 
                    ON (B.scheduleId = C.scheduleId)
            INNER JOIN acdcurriculum D
                    ON (A.curriculumid = D.curriculumid)
            INNER JOIN acdCurricularcomponent E 
                    ON (      E.curricularComponentId      = D.curricularComponentId
                          AND E.curricularComponentVersion = D.curricularComponentVersion )
       INNER JOIN ONLY basPhysicalPersonProfessor F 
                    ON (C.professorid = F.personid) 
                 WHERE A.isClosed = ?
                   AND A.learningperiodid in (SELECT learningperiodid 
                                                FROM acdlearningperiod 
                                               WHERE periodid = ?) 
              ORDER BY F.name;';

        $args = array( $isClosed,
                       $periodId );
                       
        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getStudentCurricularComponentSituation($periodId=null, $personId=null, $curricularComponentId=null, $curricularComponentVersion=null, $statusId=null)
    {
        $sql = 'SELECT H.periodId,
                       E.personId,
                       E.name,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       A.name,
                       F.description
                  FROM acdCurricularComponent A
            INNER JOIN acdCurriculum B
                    ON (B.curricularComponentId = A.curricularComponentId)
            INNER JOIN acdEnroll C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdContract D
                    ON (D.contractId = C.contractId)
            INNER JOIN basPhysicalPersonStudent E
                    ON (E.personId = D.personId)
            INNER JOIN acdEnrollStatus F
                    ON (F.statusId = C.statusId)
            INNER JOIN acdGroup G
                    ON (G.groupId = C.groupId)
            INNER JOIN acdLearningPeriod H
                    ON (H.learningPeriodId = G.learningPeriodId)';

        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND H.periodId = ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND E.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$statusId) > 0 )
        {
            $where .= ' AND F.statusId = ?';
            $args[] = $statusId;
        }
        
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY H.periodId,
                            E.name';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }
        return $result;
    }

    public function begin()
    {
        return $this->db->execute('BEGIN');
    }
    
    public function commit()
    {
        return $this->db->execute('COMMIT');
    }
}

?>
