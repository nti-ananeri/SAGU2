<?php
/**
 * Class to manipulate the acdScheduleLearningPeriod table data.
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br] 
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusScheduleLearningPeriod extends Business
{
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertScheduleLearningPeriod($data)
    {
        $sql = 'INSERT INTO acdScheduleLearningPeriod
                            (learningPeriodId,
                             description,
                             turnId,
                             beginDate,
                             beginHour,
                             endDate,
                             endHour,
                             minimumNumberLessons,
                             numberHoursLessons)
                     VALUES (?,?,?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,?,?)';

        $args = array($data->learningPeriodId,
                      $data->description,
                      $data->turnId,
                      $data->beginDate,
                      $data->beginHour,
                      $data->endDate,
                      $data->endHour,
                      $data->minimumNumberLessons,
                      $data->numberHoursLessons);

        $db = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($sql, $args));
        //$db->Close();

        return $result
;
    }


    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified scheduleLearningPeriodId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getScheduleLearningPeriod($scheduleLearningPeriodId)
    {
        $sql = 'SELECT A.scheduleLearningPeriodId,
                       A.learningPeriodId,
                       A.description,
                       A.turnId,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginHour, \'' . MASK_TIME . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                       A.minimumNumberLessons,
                       A.numberHoursLessons,
                       A.sagu1ScheduleLearningPeriodId,
                       B.courseId,
                       B.courseVersion,
                       C.name as courseName,
                       B.turnId,
                       D.description as turnDescription,
                       B.unitId,
                       E.description,
                       B.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdScheduleLearningPeriod A
            INNER JOIN acdLearningPeriod B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basTurn D
                    ON(D.turnId = B.turnId)
            INNER JOIN basUnit E
                    ON (E.unitId = B.unitId)
                 WHERE A.scheduleLearningPeriodId = ?';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$scheduleLearningPeriodId));
        //$db->Close();

        $scheduleLearningPeriod = new acdScheduleLearningPeriod();

        list (  $scheduleLearningPeriod->scheduleLearningPeriodId,
                $scheduleLearningPeriod->learningPeriodId,
                $scheduleLearningPeriod->description,
                $scheduleLearningPeriod->turnId,
                $scheduleLearningPeriod->beginDate,
                $scheduleLearningPeriod->beginHour,
                $scheduleLearningPeriod->endDate,
                $scheduleLearningPeriod->endHour,
                $scheduleLearningPeriod->minimumNumberLessons,
                $scheduleLearningPeriod->numberHoursLessons,
                $scheduleLearningPeriod->sagu1ScheduleLearningPeriodId,
                $scheduleLearningPeriod->courseId,
                $scheduleLearningPeriod->courseVersion,
                $scheduleLearningPeriod->courseName,
                $scheduleLearningPeriod->turnIdCourse,
                $scheduleLearningPeriod->turnDescriptionCourse,
                $scheduleLearningPeriod->unitId,
                $scheduleLearningPeriod->unitDescription,
                $scheduleLearningPeriod->learningPeriodDescription,
                $scheduleLearningPeriod->userName,
                $scheduleLearningPeriod->dateTime,
                $scheduleLearningPeriod->ipAddress) = $result[0];


        return $scheduleLearningPeriod;
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchScheduleLearningPeriod($data)
    {
        $select = '  SELECT A.scheduleLearningPeriodId,
                            A.learningPeriodId,
                            A.description,
                            C.description,
                            TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                            TO_CHAR(A.beginHour,\'' . MASK_TIME . '\'),
                            TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                            TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                            A.minimumNumberLessons,
                            A.numberHoursLessons,
                            A.sagu1ScheduleLearningPeriodId
                       FROM acdScheduleLearningPeriod A
                  LEFT JOIN acdLearningPeriod B
                         ON (B.learningPeriodId = A.learningPeriodId)
                 INNER JOIN basTurn C
                         ON (C.turnId = A.turnId)';

        if ( strlen((string)$data->scheduleLearningPeriodId) > 0 )
        {
            $where .= '     AND A.scheduleLearningPeriodId = ?';
            $args[] = $data->scheduleLearningPeriodId;
        }

        if ( strlen((string)$data->learningPeriodId) > 0 )
        {
            $where .= '     AND A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }

        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '     AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $data->description.'%';
        }
        
        if ( strlen((string)$data->turnId) > 0 )
        {
            $where .= '     AND A.turnId = ?';
            $args[] = $data->turnId;
        }

        if ( strlen((string)$data->beginDate) > 0 )
        {
            $where .= '     AND A.beginDate = TO_DATE(?, \'' . MASK_DATE . '\')';
            $args[] = $data->beginDate;
        }

        if ( strlen((string)$data->endDate) > 0 )
        {
            $where .= '     AND A.endDate = TO_DATE(?, \'' . MASK_DATE . '\')';
            $args[] = $data->endDate;
        }

        if ( strlen((string)$data->beginHour) > 0 )
        {
            $where .= '     AND A.beginHour = ?';
            $args[] = $data->beginHour;
        }

        if ( strlen((string)$data->endHour) > 0 )
        {
            $where .= '     AND A.endHour = ?';
            $args[] = $data->endHour;
        }

        if ( strlen((string)$data->minimumNumberLessons) > 0 )
        {
            $where .= '     AND A.minimumNumberLessons = ?';
            $args[] = $data->minimumNumberLessons;
        }

        if ( strlen((string)$data->numberHoursLessons) > 0 )
        {
            $where .= '     AND A.numberHoursLessons = ?';
            $args[] = $data->numberHoursLessons;
        }
        if ( strlen((string)$data->sagu1ScheduleLearningPeriodId) > 0 )
        {
            $where .= '     AND A.sagu1ScheduleLearningPeriodId = ?';
            $args[] = $data->sagu1ScheduleLearningPeriodId;
        }
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '     AND B.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '     AND B.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '     AND B.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.learningPeriodId';

            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($select,$args));
            //$db->Close();
        }

        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateScheduleLearningPeriod($data)
    {
        $sql = 'UPDATE acdScheduleLearningPeriod
                   SET learningPeriodId             = ?,
                       description                  = ?,
                       turnId                       = ?,
                       beginDate                    = TO_DATE(?,\'' . MASK_DATE . '\'),
                       beginHour                    = ?,
                       endDate                      = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endHour                      = ?,
                       minimumNumberLessons         = ?,
                       numberHoursLessons           = ?,
                       sagu1ScheduleLearningPeriodId= ?
                 WHERE scheduleLearningPeriodId = ?';

        $args = array($data->learningPeriodId,
                      $data->description,
                      $data->turnId,
                      $data->beginDate,
                      $data->beginHour,
                      $data->endDate,
                      $data->endHour,
                      $data->minimumNumberLessons,
                      $data->numberHoursLessons,
                      $data->sagu1ScheduleLearningPeriodId,
                      $data->scheduleLearningPeriodId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$db->Close();
        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteScheduleLearningPeriod($scheduleLearningPeriodId)
    {
        $delete = 'DELETE FROM acdScheduleLearningPeriod
                    WHERE scheduleLearningPeriodId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$scheduleLearningPeriodId));

        //$db->Close();

        return $result;
    }

    function listScheduleLearningPeriods($learningPeriodId = null)
    {
        $sql = 'SELECT A.scheduleLearningPeriodId,
                       C.periodId || \' -  \' || 
                       A.description || \' - \' || 
                       B.description || \': \' ||
                       TO_CHAR(A.beginHour, \'' . MASK_TIME . '\') || \'-\' ||
                       TO_CHAR(A.endHour, \'' . MASK_TIME . '\') as description
                  FROM acdScheduleLearningPeriod A
             LEFT JOIN basTurn B
                    ON (A.turnId = B.turnId)
             LEFT JOIN acdLearningPeriod C
                    ON (C.learningPeriodId = A.learningPeriodId)';

        $db = $this->getDatabase();

        if (strlen((string)$learningPeriodId) > 0)
        {
            $sql .= ' WHERE A.learningPeriodId = ? ORDER BY description';
            $args[] = $learningPeriodId;
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        else
        {
            $sql .= ' ORDER BY description';
            $result = $db->query($sql);
        }

        return $result;
    }

    function getScheduleInformations($scheduleId)
    {
        $sql = 'SELECT A.scheduleLearningPeriodId,
                       A.learningPeriodId,
                       A.description,
                       A.turnId,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginHour, \'' . MASK_TIME . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                       A.minimumNumberLessons,
                       A.numberHoursLessons,
                       A.sagu1ScheduleLearningPeriodId,
                       B.courseId,
                       B.courseVersion,
                       C.name as courseName,
                       B.turnId,
                       D.description as turnDescription,
                       B.unitId,
                       E.description,
                       B.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdScheduleLearningPeriod A
            INNER JOIN acdLearningPeriod B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN acdSchedule B2
                    ON (A.scheduleLearningPeriodId = B2.scheduleLearningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basTurn D
                    ON(D.turnId = B.turnId)
            INNER JOIN basUnit E
                    ON (E.unitId = B.unitId)
                 WHERE B2.scheduleId = ?';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$scheduleId));
        //$db->Close();

        $scheduleLearningPeriod = new acdScheduleLearningPeriod();

        list (  $scheduleLearningPeriod->scheduleLearningPeriodId,
                $scheduleLearningPeriod->learningPeriodId,
                $scheduleLearningPeriod->description,
                $scheduleLearningPeriod->turnId,
                $scheduleLearningPeriod->beginDate,
                $scheduleLearningPeriod->beginHour,
                $scheduleLearningPeriod->endDate,
                $scheduleLearningPeriod->endHour,
                $scheduleLearningPeriod->minimumNumberLessons,
                $scheduleLearningPeriod->numberHoursLessons,
                $scheduleLearningPeriod->sagu1ScheduleLearningPeriodId,
                $scheduleLearningPeriod->courseId,
                $scheduleLearningPeriod->courseVersion,
                $scheduleLearningPeriod->courseName,
                $scheduleLearningPeriod->turnIdCourse,
                $scheduleLearningPeriod->turnDescriptionCourse,
                $scheduleLearningPeriod->unitId,
                $scheduleLearningPeriod->unitDescription,
                $scheduleLearningPeriod->learningPeriodDescription,
                $scheduleLearningPeriod->userName,
                $scheduleLearningPeriod->dateTime,
                $scheduleLearningPeriod->ipAddress) = $result[0];


        return $scheduleLearningPeriod;
    }

}

?>
