<?php
/**
 *
 * This file handles the connection and actions for acdCourseVersion table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCourseVersion table
 **/
class BusinessAcademicBusCourseVersion extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseVersion()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @param $courseVersion (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseVersion($courseId, $courseVersion)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.semesterTotal,
                       A.courseVersionTypeId,
                       A.credits,
                       A.hourTotal,
                       A.hourRequired,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCourseVersion A
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?';

        $pk = array($courseId,
                    $courseVersion);

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $courseVersion = new acdCourseVersion();

        list ( $courseVersion->courseId,
               $courseVersion->courseVersion,
               $courseVersion->beginDate,
               $courseVersion->endDate,
               $courseVersion->semesterTotal,
               $courseVersion->courseVersionTypeId,
               $courseVersion->credits,
               $courseVersion->hourTotal,
               $courseVersion->hourRequired,
               $courseVersion->userName,
               $courseVersion->dateTime,
               $courseVersion->ipAddress ) = $result[0];

        return $courseVersion; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseVersion($filters)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.semesterTotal,
                       A.courseVersionTypeId,
                       B.description,
                       A.credits,
                       A.hourTotal,
                       A.hourRequired
                  FROM acdCourseVersion A
             LEFT JOIN acdCourseVersionType B
                    ON (B.courseVersionTypeId = A.courseVersionTypeId)';

        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen((string)$filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->endDate;
        }
        if ( strlen((string)$filters->semesterTotal) > 0 )
        {
            $where .= ' AND A.semesterTotal = ?';
            $args[] = $filters->semesterTotal;
        }
        if ( strlen((string)$filters->courseVersionTypeId) > 0 )
        {
            $where .= ' AND A.courseVersionTypeId = ?';
            $args[] = $filters->courseVersionTypeId;
        }
        if ( strlen((string)$filters->courseVersionTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseVersionTypeDescription . '%';
        }
        if ( strlen((string)$filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen((string)$filters->hourTotal) > 0 )
        {
            $where .= ' AND A.hourTotal = ?';
            $args[] = $filters->hourTotal;
        }
        if ( strlen((string)$filters->hourRequired) > 0 )
        {
            $where .= ' AND A.hourRequired = ?';
            $args[] = $filters->hourRequired;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseVersion($data)
    {
        $sql = 'INSERT INTO acdCourseVersion
                            (courseId,
                             courseVersion,
                             beginDate,
                             endDate,
                             semesterTotal,
                             courseVersionTypeId,
                             credits,
                             hourTotal,
                             hourRequired)
                     VALUES (?,
                             ?,
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->beginDate,
                       $data->endDate,
                       $data->semesterTotal,
                       $data->courseVersionTypeId,
                       $data->credits,
                       $data->hourTotal,
                       $data->hourRequired );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCourseVersion($data)
    {
        $sql = 'UPDATE acdCourseVersion
                   SET beginDate           = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endDate             = TO_DATE(?,\'' . MASK_DATE . '\'),
                       semesterTotal       = ?,
                       courseVersionTypeId = ?,
                       credits             = ?,
                       hourTotal           = ?,
                       hourRequired        = ?
                 WHERE courseId      = ?
                   AND courseVersion = ?';

        $args = array( $data->beginDate,
                       $data->endDate,
                       $data->semesterTotal,
                       $data->courseVersionTypeId,
                       $data->credits,
                       $data->hourTotal,
                       $data->hourRequired,
                       $data->courseId,
                       $data->courseVersion );


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * @param $courseVersion (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCourseVersion($courseId, $courseVersion)
    {
        $sql = 'DELETE FROM acdCourseVersion
                      WHERE courseId = ?
                        AND courseVersion = ?';

        $pk = array ( $courseId,
                      $courseVersion );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

   /**
    * Get the total hours for a course
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalHours($courseId, $courseVersion) 
    {
        $sql = ' SELECT hourtotal
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }
    
   /**
    * Get the total credits for a course
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalCredits($courseId, $courseVersion) 
    {
        $sql = ' SELECT credits
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);
        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }
 
       /**
    * Get the total semester for a course
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalSemester($courseId, $courseVersion) 
    {
        $sql = ' SELECT semesterTotal
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }
 
    

}

?>
