<?php
/**
 *
 * This file handles the connection and actions for basPupilListing table
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusAttendance extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     *  Return the curricular component list
     * 
     * @param $periodId (int): Identification of period
     * @param $courseId (int): Identification of course
     * @param $courseVersion (int): Identification of courseVersion
     *
     * @return (array): Array containing the results.
     */
     public function listCurricularComponentGroups($periodId, $courseId, $courseVersion, $classId=null, $turnId=null)
     {

        $db = $this->getDatabase();   

        $sql = 'SELECT DISTINCT  A.groupId,
                                 F.name || \'<br>\' || \'<i>\' || COALESCE(L.name,\'(' . _M('no professor', 'academic') . ')\') || \'</i>\',
                                 \'<i>(\' || H.weekDayId || \')</i> \' || H.description || \'<br>\' || J.description || \' <i>(\' || TO_CHAR(I.beginHour, \'' . MASK_TIME . '\') || \' - \' || TO_CHAR(I.endHour, \'' . MASK_TIME . '\') || \')</i>\'  as schedule,
                                 M.description,
                                 G.scheduleId,
                                 K.scheduleProfessorId,
                                 K.professorId,
                                 B.classId,
                                 N.name
                           FROM  acdEnroll A
                     INNER JOIN  acdGroup B
                             ON  (A.groupId = B.groupId)
                     INNER JOIN  acdLearningPeriod C
                             ON  (B.learningPeriodId = C.learningPeriodId AND periodId = ?)
                     INNER JOIN  acdContract D
                             ON  (A.contractId = D.contractId)
                     INNER JOIN  acdCurriculum E
                             ON  (B.curriculumId = E.curriculumId)
                     INNER JOIN  acdCurricularComponent F
                             ON  (E.curricularComponentId = F.curricularComponentId AND
                                 E.curricularComponentVersion = F.curricularComponentVersion)
                     INNER JOIN  acdSchedule G
                             ON  (B.groupId = G.groupId)
                     INNER JOIN  basWeekDay H
                             ON  (G.weekDayId = H.weekDayId)
                     INNER JOIN  acdScheduleLearningPeriod I
                             ON  (G.scheduleLearningPeriodId = I.scheduleLearningPeriodId)
                     INNER JOIN  basTurn J
                             ON  (I.turnId = J.turnId)
                     INNER JOIN  acdScheduleProfessor K
                             ON  (G.scheduleId = K.scheduleId)
                     INNER JOIN  basPhysicalPersonProfessor L
                             ON  (K.professorId = L.personId)
                     INNER JOIN  basUnit M
                             ON (C.unitId = M.unitId)
                      LEFT JOIN  acdClass N
                             ON (B.classId = N.classId)
                          WHERE  C.periodId = ?
                            AND  C.courseId = ?
                            --AND  C.courseVersion = ?
                            AND  B.iscancellation = FALSE';

        $args = array($periodId, $periodId, $courseId, $courseVersion);

        if ( strlen((string)$classId))
        {
            $sql .= " AND B.classId = ? ";
            $args[] = $classId;
        }
/*
        if ( strlen((string)$turnId))
        {
            $sql .= " AND D.turnId = ? ";
            $args[] = $turnId;
        }
*/
        $sql .= " ORDER BY  2, 3 ";

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;     
    }

     public function listCurricularComponentGroupsSummary($periodId, $courseId, $courseVersion, $classId=null, $turnId=null)
     {

        $db = $this->getDatabase();   

        $sql = 'SELECT DISTINCT  A.groupId,
                                 F.name || \'<br>\' || \'<i>\' || COALESCE(L.name,\'(' . _M('no professor', 'academic') . ')\') || \'</i>\',
                                 M.description,
                                 B.classId,
                                 N.name
                           FROM  acdEnroll A
                     INNER JOIN  acdGroup B
                             ON  (A.groupId = B.groupId)
                     INNER JOIN  acdLearningPeriod C
                             ON  (B.learningPeriodId = C.learningPeriodId AND periodId = ?)
                     INNER JOIN  acdContract D
                             ON  (A.contractId = D.contractId)
                     INNER JOIN  acdCurriculum E
                             ON  (B.curriculumId = E.curriculumId)
                     INNER JOIN  acdCurricularComponent F
                             ON  (E.curricularComponentId = F.curricularComponentId AND
                                 E.curricularComponentVersion = F.curricularComponentVersion)
                     INNER JOIN  acdSchedule G
                             ON  (B.groupId = G.groupId)
                     INNER JOIN  basWeekDay H
                             ON  (G.weekDayId = H.weekDayId)
                     INNER JOIN  acdScheduleLearningPeriod I
                             ON  (G.scheduleLearningPeriodId = I.scheduleLearningPeriodId)
                     INNER JOIN  basTurn J
                             ON  (I.turnId = J.turnId)
                     INNER JOIN  acdScheduleProfessor K
                             ON  (G.scheduleId = K.scheduleId)
                     INNER JOIN  basPhysicalPersonProfessor L
                             ON  (K.professorId = L.personId)
                     INNER JOIN  basUnit M
                             ON (C.unitId = M.unitId)
                      LEFT JOIN  acdClass N
                             ON (B.classId = N.classId)
                          WHERE  C.periodId = ?
                            AND  C.courseId = ?
                            --AND  C.courseVersion = ?
                            AND  B.iscancellation = FALSE';

        $args = array($periodId, $periodId, $courseId, $courseVersion);

        if ( strlen((string)$classId))
        {
            $sql .= " AND B.classId = ? ";
            $args[] = $classId;
        }
/*
        if ( strlen((string)$turnId))
        {
            $sql .= " AND D.turnId = ? ";
            $args[] = $turnId;
        }
*/
        $sql .= " GROUP BY 1, 2, 3, 4, 5
                  ORDER BY 2, 3 ";

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;     
    }

    /**
     *  Return the list of weekdays, turns and units of group occurrences
     * 
     * @param $periodId (int): Identification of period
     * @param $courseId (int): Identification of course
     * @param $courseVersion (int): Identification of courseVersion
     *
     * @return (array): Array containing the results.
     */ 
    public function listCourseWeekdaysTurnsUnits($periodId, $courseId, $courseVersion)
    {
        $db = $this->getDatabase();
        
        $sql = "SELECT DISTINCT 
                                G.weekDayId,
                                G.description,
                                I.turnId,
                                I.description,
                                H.unitId,
                                H.description
                           FROM acdEnroll A
                     INNER JOIN acdGroup B
                             ON (B.groupId = A.groupId)
                     INNER JOIN acdContract C
                             ON (C.contractId = A.contractId)
                     INNER JOIN acdSchedule D
                             ON (D.groupId = B.groupId)
                     INNER JOIN acdScheduleLearningPeriod E
                             ON (E.scheduleLearningPeriodId = D.scheduleLearningPeriodId)
                     INNER JOIN acdLearningPeriod F
                             ON (F.learningPeriodId = B.learningPeriodId)
                      LEFT JOIN basWeekDay G
                             ON (G.weekDayId = D.weekDayId)
                     INNER JOIN basUnit H
                             ON (H.unitId = D.unitId)
                     INNER JOIN basTurn I
                             ON (I.turnId = E.turnId) 
                          WHERE F.periodId = ?
                            AND C.courseId = ?
                            AND C.courseVersion = ?
                       ORDER BY 1, 5, 3";
        
        $args = array($periodId, $courseId, $courseVersion);
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     *  Return the list of weekdays, turns and units of group occurrences
     * 
     * @param $periodId (varchar): Identification of period
     * @param $courseId (int): Identification of course
     * @param $courseVersion (int): Identification of courseVersion
     * @param $weekdayId (int): Identification of weekday
     * @param $unitId (int): Identification of unit
     * @param $turnId (int): Identification of turn
     *
     * @return (array): Array containing the results.
     */ 
    public function listCourseGroupsByWeekdayUnitTurn($periodId, $courseId, $courseVersion, $weekdayId, $unitId, $turnId)
    {
        $db = $this->getDatabase();

        $sql = "SELECT DISTINCT 
                               B.groupId,
                               H.name,
                               D.weekdayId,
                               D.unitId,
                               E.turnId,
                               D.scheduleId
                          FROM acdEnroll A
                    INNER JOIN acdGroup B
                            ON (B.groupId = A.groupId)
                    INNER JOIN acdContract C
                            ON (C.contractId = A.contractId)
                    INNER JOIN acdSchedule D
                            ON (D.groupId = B.groupId)
                    INNER JOIN acdScheduleLearningPeriod E
                            ON (E.scheduleLearningPeriodId = D.scheduleLearningPeriodId)
                    INNER JOIN acdLearningPeriod F
                            ON (F.learningPeriodId = B.learningPeriodId)
                    INNER JOIN acdCurriculum G
                            ON (G.curriculumId = B.curriculumId)
                    INNER JOIN acdCurricularComponent H
                            ON (H.curricularComponentId = G.curricularComponentId AND
                                H.curricularComponentVersion = G.curricularComponentVersion)
                         WHERE F.periodId = ?
                           AND C.courseId = ?
                           AND C.courseVersion = ?
                           AND D.weekdayId = ?
                           AND D.unitId = ?
                           AND E.turnId = ?";
                           
        $args = array( 
                       $periodId,
                       $courseId,
                       $courseVersion,
                       $weekdayId,
                       $unitId,
                       $turnId
                      );
                       
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;  
    }

    /**
     *  Return the list of pupils enrolled in a group
     * 
     * @param $groupId (int): Identification of group
     *
     * @return (array): Array containing the results.
     */
    public function listGroupEnrolledPupils($groupId)
    {
        $db = $this->getDatabase();

        $sql = '    SELECT  A.enrollId,
                            C.personId,
                            C.name,
                            B.courseId,
                            A.statusId,
                            TO_CHAR(A.dateCancellation, \''.MASK_DATE.'\'),
                            E.finalaverage,
                            F.courseVersionTypeId,
                            B.courseVersion
                       FROM acdEnroll A
                 INNER JOIN acdContract B 
                         ON (A.contractId = B.contractId)
            INNER JOIN ONLY basPhysicalPerson C
                         ON (B.personId = C.personId)
                 INNER JOIN acdGroup D
                         ON (D.groupId = A.groupId)
                 INNER JOIN acdLearningPeriod E
                         ON (E.learningPeriodId = D.learningPeriodId)
                  LEFT JOIN acdCourseVersion F
                         ON (F.courseId      = B.courseId AND
                             F.courseVersion = B.courseVersion)
                      WHERE A.groupId = ? 
                        AND (A.dateCancellation IS NULL OR A.dateCancellation >= E.beginDateLessons)
                        AND A.statusid not in (5)
                   ORDER BY 3, 4';

        $args = array($groupId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     *  Sets the grades and frequency data
     * 
     * @param $enrollId (int): Identification of enroll
     * @param $note (int): pupil note
     * @param $examNote (int): pupil exam note
     * @param $finalNote (int): pupil final note
     * @param $frequency (double): pupil frequency
     * @param $desisting (boolean): flag to inform if pupil gives up
     *
     * @return (boolean): true if the query is executed with success and false if not
     */
    public function setEnrollGradeFrequency($enrollId, $note, $examNote = null, $finalNote = null, $frequency = null, $desisting = null, $status = null)
    {
        $db = $this->getDatabase();
        
        $args = array($note);
        
        $sql = "UPDATE acdenroll
                   SET note = ?";
                   
        if ($examNote != null)
        {
            $sql .= " , examNote = ? ";
            $args[] = $examNote;
        }
        else
        {
            $sql .= " , examNote = '' ";
        }
        if ($finalNote != null)
        {
            $sql .= " , finalNote = ? ";
            $args[] = $finalNote;
        }
        else
        {
            $sql .= " , finalNote = '' ";
        }
        if ($frequency != null)
        {
            $sql .= " , frequency = ? ";
            $args[] = $frequency;
        }
        else
        {
            $sql .= " , frequency = '' ";
        }
        
        if ($desisting)
        {
            $sql .= " , statusId = " . ENROLL_STATUS_DESISTING; 
        }
        elseif ($status != null)
        {
            $sql .= " , statusId = ? ";
            $args[] = $status;
        }
        
        $sql .= " WHERE enrollId = ?";
        
        $args[] = $enrollId;
        
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    public function getEnrollGradesData($enrollId)
    {
        $db = $this->getDatabase();
        
        $args = array($enrollId);
        
        $sql = "SELECT note,
                       examNote,
                       finalNote,
                       frequency,
                       statusId
                  FROM acdEnroll
                 WHERE enrollId = ? ";
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    public function getGroupData($groupId, $scheduleId=null, $scheduleProfessorId=null)
    {
        $db = $this->getDatabase();

        $sql = "SELECT DISTINCT  B.groupId,
                                 F.curricularComponentId || ' - ' || F.name,
                                 L.personId || ' - ' || L.name,
                                 C.periodId,
                                 M.description,
                                 N.description,
                                 F.lessonNumberHours,
                                 round(C.minimumFrequency * F.lessonNumberHours / 100),
                                 I.room || ' - ' || I.building,
                                 O.description,
                                 P.name,
                                 H.turnId,
                                 G.scheduleId,
                                 K.scheduleProfessorId,
                                 B.learningPeriodId,
                                 Q.classId
                           FROM  acdGroup B
                     INNER JOIN  acdLearningPeriod C
                             ON  (B.learningPeriodId = C.learningPeriodId)
                     INNER JOIN  acdCurriculum E
                             ON  (B.curriculumId = E.curriculumId)
                     INNER JOIN  acdCurricularComponent F
                             ON  (E.curricularComponentId = F.curricularComponentId AND
                                 E.curricularComponentVersion = F.curricularComponentVersion)
                     INNER JOIN  acdSchedule G
                             ON  (B.groupId = G.groupId)
                     INNER JOIN  acdScheduleLearningPeriod H
                             ON  (G.scheduleLearningPeriodId = H.scheduleLearningPeriodId)
                      LEFT JOIN  insPhysicalResource I
                             ON  (I.physicalResourceId = G.physicalResourceId AND
                                  I.physicalResourceVersion = G.physicalResourceVersion)
                     INNER JOIN  acdCourse J
                             ON  (J.courseId = E.courseId)
                     INNER JOIN  acdScheduleProfessor K
                             ON  (G.scheduleId = K.scheduleId)
                     INNER JOIN  basPhysicalPersonProfessor L
                             ON  (K.professorId = L.personId)
                     INNER JOIN  basUnit M
                             ON  (C.unitId = M.unitId)
                     INNER JOIN  basTurn N
                             ON  (N.turnId = H.turnId)
                      LEFT JOIN  basWeekDay O
                             ON  (O.weekDayId = G.weekDayId)
                      LEFT JOIN  acdCenter P
                             ON  (P.centerId = J.centerId)
                      LEFT JOIN  acdClass Q
                             ON  (B.classId = Q.classId)
                          WHERE  B.groupId = ?";

        $args = array($groupId);

        if ( strlen((string)$scheduleId) > 0 )
        {
            $sql .= ' AND G.scheduleId = ? ';
            $args[] = $scheduleId;
        }

        $result = $db->query(SAGU::prepare($sql, $args));

        if ( count($result) > 0 )
        {
            list (  $r->groupId,
                    $r->curricularComponent,
                    $r->professor,
                    $r->periodId,
                    $r->unit,
                    $r->turn,
                    $r->numberHours,
                    $r->minimumNumberHours,
                    $r->room,
                    $r->weekDay,
                    $r->center,
                    $r->turnId,
                    $r->scheduleId,
                    $r->scheduleProfessorId,
                    $r->learningPeriodId,
                    $r->classId) = $result[0];
            $r->result = $result;
        }
        return $r;
    }

    /**
     *  Return the curricular component list
     * 
     * @param $periodId (int): Id of the period to retrieve data from
     * @param $classId (int): Id of the class to retrieve data from
     *
     * @return (array): Array containing the results.
     */
     public function listClass($periodId, $classId)
     {

        $db = $this->getDatabase();   

        $sql = 'SELECT A.groupId,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name
                  FROM acdGroup A
            INNER JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCurriculum C
                    ON (C.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId
                        AND D.curricularComponentVersion = C.curricularComponentVersion)
                 WHERE B.periodId = ?
                   AND A.classId = ?';

        $args = array($periodId, $classId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function listCurricularComponentGroups2($periodId, $professorId)
    {

        $db = $this->getDatabase();

        $sql = "SELECT DISTINCT  A.groupId,
                                 F.name || '<br>' || '<i>' || L.name || '</i>',
                                 H.description || '<br>' || J.description as schedule,
                                 M.description,
                                 G.scheduleId,
                                 K.scheduleProfessorId
                           FROM  acdEnroll A
                     INNER JOIN  acdGroup B
                             ON  (A.groupId = B.groupId)
                     INNER JOIN  acdLearningPeriod C
                             ON  (B.learningPeriodId = C.learningPeriodId AND periodId = ?)
                     INNER JOIN  acdContract D
                             ON  (A.contractId = D.contractId)
                     INNER JOIN  acdCurriculum E
                             ON  (B.curriculumId = E.curriculumId)
                     INNER JOIN  acdCurricularComponent F
                             ON  (E.curricularComponentId = F.curricularComponentId AND
                                 E.curricularComponentVersion = F.curricularComponentVersion)
                     INNER JOIN  acdSchedule G
                             ON  (A.groupId = G.groupId)
                     INNER JOIN  basWeekDay H
                             ON  (G.weekDayId = H.weekDayId)
                     INNER JOIN  acdScheduleLearningPeriod I
                             ON  (G.scheduleLearningPeriodId = I.scheduleLearningPeriodId)
                     INNER JOIN  basTurn J
                             ON  (I.turnId = J.turnId)
                     INNER JOIN  acdScheduleProfessor K
                             ON  (G.scheduleId = K.scheduleId)
                     INNER JOIN  basPhysicalPersonProfessor L
                             ON  (K.professorId = L.personId)
                     INNER JOIN  basUnit M
                             ON (C.unitId = M.unitId)
                          WHERE  C.periodId = ?
                            AND  K.professorId = ?
                            AND  B.iscancellation = FALSE
                       ORDER BY  2,3";

        $args = array($periodId, $periodId, $professorId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    function getScheduleAcademicCalendar( $scheduleId )
    {

        $db = $this->getDatabase();

        $sql = 'SELECT A.* FROM (SELECT B.occurrenceDate,
                           EXTRACT ( day FROM B.occurrenceDate) as day,
                           EXTRACT ( month FROM B.occurrenceDate) as month,
                           EXTRACT ( year FROM B.occurrenceDate) as year,
                           A.numberHoursLessons,
                           C.scheduleId,
                           A.scheduleLearningPeriodId
                      FROM acdScheduleLearningPeriod A 
                INNER JOIN acdAcademicCalendar B 
                        ON (A.learningPeriodId = B.learningPeriodId) 
                INNER JOIN acdSchedule C 
                        ON (C.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
                INNER JOIN acdLearningPeriod D
                        ON (D.learningPeriodId = A.learningPeriodId)
                     WHERE B.weekDayId  = C.weekDayId
                       AND C.scheduleId = ?
                       AND B.occurrenceDate >= ( SELECT min(B.beginDate)
                                                   FROM acdSchedule A
                                             INNER JOIN acdScheduleLearningPeriod B
                                                     ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                  WHERE A.scheduleId = ? )
                       AND B.occurrenceDate <= ( SELECT max(B.endDate )
                                                   FROM acdSchedule A
                                             INNER JOIN acdScheduleLearningPeriod B
                                                     ON ( A.scheduleLearningPeriodId = B.scheduleLearningPeriodId )
                                                  WHERE A.scheduleId = ? )
                       AND B.occurrenceDate::varchar || A.turnId::varchar || B.weekDayId::varchar NOT IN ( SELECT C.occurrenceDate::varchar || C.turnId::varchar || C.weekDayId::varchar  -- Aulas substitu�das
                                                                   FROM acdSchedule A
                                                             INNER JOIN acdScheduleLearningPeriod B
                                                                     ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                             INNER JOIN acdAcademicCalendarAdjustments C
                                                                     ON (    B.learningPeriodId = C.learningPeriodId
                                                                         AND C.scheduleId = A.scheduleId)
                                                             INNER JOIN acdLearningPeriod D
                                                                     ON (D.learningPeriodId = B.learningPeriodId)
                                                                  WHERE A.scheduleId  = ?
                                                                    AND C.professorId = C.professorId
                                                                    AND C.inOut       = \'' . DB_FALSE . '\' )
                 UNION ALL --Aulas que foram remanejadas
                    SELECT C.occurrenceDate,
                           EXTRACT ( day FROM C.occurrenceDate) as day,
                           EXTRACT ( month FROM C.occurrenceDate) as month,
                           EXTRACT ( year FROM C.occurrenceDate) as year,
                           B.numberHoursLessons,
                           A.scheduleId,
                           B.scheduleLearningPeriodId
                      FROM acdSchedule A
                INNER JOIN acdScheduleLearningPeriod B
                        ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                INNER JOIN acdAcademicCalendarAdjustments C
                        ON (    B.learningPeriodId = C.learningPeriodId
                            AND C.scheduleId = A.scheduleId )
                INNER JOIN acdLearningPeriod D
                        ON (D.learningPeriodId = B.learningPeriodId)
                     WHERE A.scheduleId  = ?
                       AND C.professorId = C.professorId
                       AND C.inOut       = \'' . DB_TRUE . '\'
                       AND C.occurrenceDate IS NOT NULL
                  ORDER BY 1) A, acdScheduleLearningPeriod B WHERE A.scheduleLearningPeriodId = B.scheduleLearningPeriodId AND A.occurrenceDate BETWEEN B.beginDate AND B.endDate ORDER BY A.occurrenceDate::date';

        $args = array ( $scheduleId,
                        $scheduleId,
                        $scheduleId,
                        $scheduleId,
                        $scheduleId );

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    function getGroupAcademicCalendar( $groupId )
    {

        $db = $this->getDatabase();

        $sql = 'SELECT A.* FROM (SELECT B.occurrenceDate,
                           EXTRACT ( day FROM B.occurrenceDate) as day,
                           EXTRACT ( month FROM B.occurrenceDate) as month,
                           EXTRACT ( year FROM B.occurrenceDate) as year,
                           A.numberHoursLessons,
                           C.scheduleId,
                           A.scheduleLearningPeriodId
                      FROM acdScheduleLearningPeriod A 
                INNER JOIN acdAcademicCalendar B 
                        ON (A.learningPeriodId = B.learningPeriodId) 
                INNER JOIN acdSchedule C 
                        ON (C.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
                INNER JOIN acdLearningPeriod D
                        ON (D.learningPeriodId = A.learningPeriodId)
                     WHERE B.weekDayId  = C.weekDayId
                       AND C.groupId = ?
                       AND B.occurrenceDate >= ( SELECT min(B.beginDate)
                                                   FROM acdSchedule A
                                             INNER JOIN acdScheduleLearningPeriod B
                                                     ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                  WHERE A.groupId = ? )
                       AND B.occurrenceDate <= ( SELECT max(B.endDate)
                                                   FROM acdSchedule A
                                             INNER JOIN acdScheduleLearningPeriod B
                                                     ON ( A.scheduleLearningPeriodId = B.scheduleLearningPeriodId )
                                                  WHERE A.groupId = ? )
                       AND B.occurrenceDate::varchar || A.turnId::varchar || B.weekDayId::varchar NOT IN ( SELECT C.occurrenceDate::varchar || C.turnId::varchar || C.weekDayId::varchar  -- Aulas substitu�das
                                                                   FROM acdSchedule A
                                                             INNER JOIN acdScheduleLearningPeriod B
                                                                     ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                                                             INNER JOIN acdAcademicCalendarAdjustments C
                                                                     ON (    B.learningPeriodId = C.learningPeriodId
                                                                         AND C.scheduleId = A.scheduleId)
                                                             INNER JOIN acdLearningPeriod D
                                                                     ON (D.learningPeriodId = B.learningPeriodId)
                                                                  WHERE A.groupId  = ?
                                                                    AND C.professorId = C.professorId
                                                                    AND C.inOut       = \'' . DB_FALSE . '\' )
                 UNION ALL --Aulas que foram remanejadas
                    SELECT C.occurrenceDate,
                           EXTRACT ( day FROM C.occurrenceDate) as day,
                           EXTRACT ( month FROM C.occurrenceDate) as month,
                           EXTRACT ( year FROM C.occurrenceDate) as year,
                           B.numberHoursLessons,
                           A.scheduleId,
                           B.scheduleLearningPeriodId
                      FROM acdSchedule A
                INNER JOIN acdScheduleLearningPeriod B
                        ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                INNER JOIN acdAcademicCalendarAdjustments C
                        ON (    B.learningPeriodId = C.learningPeriodId
                            AND C.scheduleId = A.scheduleId )
                INNER JOIN acdLearningPeriod D
                        ON (D.learningPeriodId = B.learningPeriodId)
                     WHERE A.groupId  = ?
                       AND C.professorId = C.professorId
                       AND C.inOut       = \'' . DB_TRUE . '\'
                       AND C.occurrenceDate IS NOT NULL
                  ORDER BY 1) A, acdScheduleLearningPeriod B WHERE A.scheduleLearningPeriodId = B.scheduleLearningPeriodId AND A.occurrenceDate BETWEEN B.beginDate AND B.endDate ORDER BY A.occurrenceDate::date';

        $args = array ( $groupId,
                        $groupId,
                        $groupId,
                        $groupId,
                        $groupId );

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getAcademicNotes($scheduleId, $enrollId=null)
    {
        $db     = $this->getDatabase();

        $sql = 'SELECT A2.degreeId,
                       A2.description
                  FROM acdDegree A2
                 WHERE A2.learningPeriodId = ( SELECT A.learningPeriodId
                                                 FROM acdSchedule B,
                                                      acdGroup A
                                                WHERE A.groupId = B.groupId
                                                  AND B.scheduleId = ?)
              ORDER BY A2.degreeNumber';
        $args   = array ( $scheduleId);

        if ( strlen((string)$enrollId) > 0 )
        {
            $sql = 'SELECT A2.degreeId,
                           A2.description,
                           ROUND(A3.note::NUMERIC, \'' . REAL_ROUND_VALUE . '\') as note
                      FROM acdDegree A2
                 LEFT JOIN acdDegreeEnroll A3
                        ON (     A2.degreeId = A3.degreeId
                             AND A3.enrollId = ? )
                     WHERE A2.learningPeriodId = ( SELECT A.learningPeriodId
                                                     FROM acdSchedule B,
                                                          acdGroup A
                                                    WHERE A.groupId = B.groupId
                                                      AND B.scheduleId = ?)
                  ORDER BY A2.degreeNumber';
            $args   = array ( $enrollId, $scheduleId);
        }

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getFinalNotes($enrollId)
    {
        $sql = 'SELECT ROUND(A.note::NUMERIC, \'' . REAL_ROUND_VALUE . '\') as average,
                       ROUND(A.examNote::NUMERIC, \'' . REAL_ROUND_VALUE . '\') as exam,
                       ROUND(A.finalNote::NUMERIC, \'' . REAL_ROUND_VALUE . '\') as final,
                       B.description as state
                  FROM acdEnroll A,
                       acdEnrollStatus B
                 WHERE A.statusId = B.statusId
                   AND A.enrollId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $enrollId));

        return $result;
    }

    public function getScheduleProfessorTurnId($professorId, $scheduleId)
    {
        $db = $this->getDatabase();

        $sql = "SELECT A.turnId 
                  FROM acdSchedule B
            INNER JOIN acdScheduleLearningPeriod A
                    ON (B.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
            INNER JOIN acdScheduleProfessor C
                    ON (C.scheduleId = B.scheduleId)
                 WHERE C.professorId = ?
                   AND C.scheduleId  = ?";

        $result = $db->query(SAGU::prepare($sql, array($professorId, $scheduleId)));

        return $result[0][0];
    }


}
?>
