<?php

/**
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponent table.
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 06/10/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 */

class BusinessAcademicBusDiplomaDocument extends Business
{
    /**
     * Creates a connection with the specified database. 
     * If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname (string): Specifies the database name to which we want to connect.
     *
     * @return (object): A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Obtain the curricular components from one course
     *
     * @author Hélio H. R. Guimarães [helio@solis.coop.br]
     *
     * @param $curricularComponentId (int): Identifier of the curriculum component to be retrieved.
     * @param $curricularComponentVersion (int): Identifier of the curriculum component to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponent) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCurricularComponentLessonsHours($filters)
    {
        $select = ' SELECT B.name as curricularComponentName,
                           B.academicnumberhours
                      FROM acdCurriculum A
                INNER JOIN acdCurricularComponent B
                        ON (B.curricularComponentId = A.curricularComponentId)
                     WHERE A.courseId      = ? AND
                           A.courseVersion = ? AND
                           A.unitId        = ? AND
                           A.turnId        = ?';

        $db     = $this->getDatabase();
        $args = array(
                        $filters->courseId,
                        $filters->courseVersion,
                        $filters->unitId,
                        $filters->turnId
                     );

        $result = $db->query(SAGU::prepare($select, $args));

        return $result; 
    }
}
?>
