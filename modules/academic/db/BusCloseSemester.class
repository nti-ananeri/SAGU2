<?php
/**
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdGroup table
 **/
class BusinessAcademicBusCloseSemester extends Business
{
    public $db;
    
    //Class constructor
    public function BusinessAcademicBusCloseSemester()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }


    public function searchCloseSemester($filters)
    {
        $sql = 'SELECT 
                    DISTINCT A.groupId,
                             getPersonName(C.professorId),
                             E.name,
                             A.classId
                FROM 
                    acdGroup A INNER JOIN
                    acdSchedule B ON ( A.groupId = B.groupId ) INNER JOIN
                    acdScheduleProfessor C ON ( C.scheduleId = B.scheduleId ) INNER JOIN
                    acdCurriculum D ON ( D.curriculumId = A.curriculumId ) INNER JOIN
                    acdCurricularComponent E ON ( E.curricularComponentId = D.curricularComponentId AND
                                                  E.curricularComponentVersion = D.curricularComponentVersion ) INNER JOIN
                    acdLearningPeriod F ON ( F.learningPeriodId = A.learningPeriodId )
                WHERE
                    A.isClosed IS FALSE AND
                    F.periodId = ? ';
        if (isset($filters->classId))
        {
        	$sql .= ' and A.classId = ? ';
        }
        $sql .= '
                ORDER BY
                    1,
                    4,
                    2,
                    3';

        //$args[] = CURRENT_PERIOD_ID;
        $args[] = $filters->periodId;
        if (isset($filters->classId))
        {
         $args[] = $filters->classId;
        } 
        
        unset($result);
        $result = $this->db->query(SAGU::prepare($sql, $args));
        return $result;
    }

}

?>
