<?php
/**
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate tables
 **/
class BusinessAcademicBusStateContractList extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    public function listStateContractPupils($filters)
    {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = ' SELECT A.courseId,
                        A.courseVersion,
                        E.name,
                        A.unitId,
                        F.description,
                        A.turnId,
                        G.description,
                        A.contractId,
                        A.personId,
                        B.name,
                        B.residentialPhone,
                        B.workPhone,
                        B.cellPhone,
                        (SELECT isCloseContract 
                           FROM acdStateContract 
                          WHERE stateContractId = getContractState(A.contractId)),
                        D.stateContractId,
                        D.description
                   FROM acdContract A
             INNER JOIN acdCourse E
                     ON (E.courseId = A.courseId)
             INNER JOIN basUnit F
                     ON (F.unitId = A.unitId)
             INNER JOIN basTurn G
                     ON (G.turnId = A.turnId)
             INNER JOIN ONLY basPhysicalPersonStudent B
                     ON (B.personId = A.personId) ';

        if (strlen((string)$filters->periodId) > 0)
        {
            $sql   .= ' INNER JOIN acdLearningPeriod C
                                ON (C.courseId = A.courseId AND
                                    C.courseVersion = A.courseVersion AND
                                    C.unitId = A.unitId AND
                                    C.turnId = A.turnId AND
                                    C.periodId = ?)
                        INNER JOIN acdStateContract D
                                ON (D.stateContractId = getContractStateBetweenDates(A.contractId, C.beginDate, C.endDate)) ';
            $args[] = $filters->periodId;
        }
        elseif ((strlen((string)$filters->beginDate) > 0) && (strlen((string)$filters->endDate)))
        {
            $sql   .= ' INNER JOIN acdStateContract D 
                                ON (D.stateContractId = getContractStateBetweenDates(A.contractId, TO_DATE(?, \''.MASK_DATE.'\'), TO_DATE(?, \''.MASK_DATE.'\'))) ';
            $args[] = $filters->beginDate;
            $args[] = $filters->endDate;
        }
        else
        {
            $sql .= ' INNER JOIN acdStateContract D 
                              ON (D.stateContractId = getContractState(A.contractId) ';
        }
        if (strlen((string)$filters->courseId) > 0)
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen((string)$filters->courseVersion) > 0)
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen((string)$filters->turnId) > 0)
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen((string)$filters->stateContractId) > 0)
        {
            $where .= ' AND D.stateContractId = ? ';
            $args[] = $filters->stateContractId;
        }
        
        if (strlen((string)$where) > 0)
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.courseId, A.courseVersion, A.unitId, A.turnId, D.stateContractId, B.name ';
        
            $result = $db->query(SAGU::prepare($sql, $args));
            
            if (count($result) > 0)
            {
                foreach ($result as $res)
                {
                    $index = $res[0] . '-' . $res[1] . '-' . $res[3] . '-' . $res[5] . '-' . $res[14];
                    $title = $res[0] . '(' . $res[1] . ') - ' . $res[2] . ' - ' . $res[4] . ' - ' . $res[6] . ' - ' . $res[15];
                    
                    $return[$index]->title  = $title;
                    
                    if ($res[13] == DB_FALSE)
                    {
                        $actualSituation = '<font color=blue>' . _M('Active', $module) . '</font>';
                    }
                    else
                    {
                        $actualSituation = '<font color=red>' . _M('Inactive', $module) . '</font>';
                    }
                    
                    $row = array($res[8], $res[9], $res[10], $res[11], $res[12], $actualSituation);
                    $return[$index]->data[] = $row;
                }
            }
            
            return $return;
        }
        return null;
    }
}
?>
