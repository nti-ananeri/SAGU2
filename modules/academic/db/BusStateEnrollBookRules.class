<?php
/**
 *
 * This file handles the connection and actions for acdStateEnrollBookRules table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basStateEnrollBookRules table
 **/
class BusinessAcademicBusStateEnrollBookRules extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listStateEnrollBookRules()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT A.stateEnrollBookRulesId,
                       A.stateEnrollBookId,
                       B.description,
                       A.stateIdRules
                  FROM acdStateEnrollBookRules A,
                       acdStateEnrollBook B
                 WHERE A.stateEnrollBookId = B.stateEnrollBookId
              ORDER BY B.description';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $stateEnrollBookRulesId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStateEnrollBookRules($stateEnrollBookRulesId)
    {

        $sql = 'SELECT A.stateEnrollBookRulesId,
                       A.stateEnrollBookId,
                       B.description,
                       A.stateIdRules,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdStateEnrollBookRules A,
                       acdStateEnrollBook B
                 WHERE A.stateEnrollBookId      = B.stateEnrollBookId
                   AND A.stateEnrollBookRulesId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $stateEnrollBookRulesId));

        //$db->close();

        $stateEnrollBookRules = new acdStateEnrollBookRules();
        list ( $stateEnrollBookRules->stateEnrollBookRulesId,
               $stateEnrollBookRules->stateEnrollBookId,
               $stateEnrollBookRules->description,
               $stateEnrollBookRules->stateIdRules,
               $stateEnrollBookRules->userName,
               $stateEnrollBookRules->dateTime,
               $stateEnrollBookRules->ipAddress ) = $result[0];
        $stateEnrollBookRules->stateIdRules = explode(',',str_replace('{','',str_replace('}','',$stateEnrollBookRules->stateIdRules)));
        return $stateEnrollBookRules; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchStateEnrollBookRules($filters)
    {
        $sql = 'SELECT A.stateEnrollBookRulesId,
                       A.stateEnrollBookId,
                       B.description,
                       A.stateIdRules
                  FROM acdStateEnrollBookRules A,
                       acdStateEnrollBook B
                 WHERE A.stateEnrollBookId = B.stateEnrollBookId ';

        if ( strlen((string)$filters->stateEnrollBookRulesId) > 0 )
        {
            $where .= ' AND A.stateEnrollBookRulesId = ? ';
            $args[] = $filters->stateEnrollBookRulesId;
        }

        if ( strlen((string)$filters->stateEnrollBookId) > 0 )
        {
            $where .= ' AND A.stateEnrollBookId = ? ';
            $args[] = $filters->stateEnrollBookId;
        }

        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description . '%';
        }

        if ( strlen((string)$filters->stateIdRules) > 0 )
        {
            $where .= ' AND ' . $filters->stateIdRules . ' = ANY (A.stateIdRules) ';
        }

        $sql.= $where . ' ORDER BY B.description';
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStateEnrollBookRules($data)
    {
        $sql = 'INSERT INTO acdStateEnrollBookRules
                            ( stateEnrollBookId,
                              stateIdRules )
                     VALUES (?,?)';

        $args = array( $data->stateEnrollBookId,
                       '{' . implode(',', $data->stateIdRules) . '}' );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateStateEnrollBookRules($data)
    {
        $sql = 'UPDATE acdStateEnrollBookRules
                   SET stateEnrollBookId      = ?,
                       stateIdRules           = ?
                 WHERE stateEnrollBookRulesId = ? ';

        $args = array( $data->stateEnrollBookId,
                       '{' . implode(',', $data->stateIdRules) . '}',
                       $data->stateEnrollBookRulesId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $stateEnrollBookRulesId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteStateEnrollBookRules($stateEnrollBookRulesId)
    {
        $sql = 'DELETE FROM acdStateEnrollBookRules
                      WHERE stateEnrollBookRulesId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $stateEnrollBookRulesId));
        //$db->close();
        return $result;
    }
}
?>
