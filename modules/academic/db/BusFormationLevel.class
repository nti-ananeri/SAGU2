<?php
/**
 *
 * This file handles the connection and actions for basCountry table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusFormationLevel extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listFormationLevel()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT formationLevelId,
                       description
                  FROM acdFormationLevel
              ORDER BY description ';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $formationLevelId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFormationLevel($formationLevelId)
    {
        $sql = 'SELECT formationLevelId,
                       description,
                       shortDescription,
                       academicDegree,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM acdFormationLevel
                 WHERE formationLevelId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $formationLevelId));
        //$db->close();

        $formationLevel = new acdFormationLevel();
        list ( $formationLevel->formationLevelId,
               $formationLevel->description,
               $formationLevel->shortDescription,
               $formationLevel->academicDegree,
               $formationLevel->userName,
               $formationLevel->dateTime,
               $formationLevel->ipAddress ) = $result[0];

        return $formationLevel; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchFormationLevel($filters)
    {
        $sql= 'SELECT formationLevelId,
                      description,
                      shortDescription,
                      academicDegree
                 FROM acdFormationLevel ';

        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen((string)$filters->shortDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(shortDescription) ILIKE TO_ASCII(?) ';
            $args[] = $filters->shortDescription . '%';
        }
        if ( strlen((string)$filters->academicDegree) > 0 )
        {
            $where .= ' AND academicDegree ILIKE ? ';
            $args[] = $filters->academicDegree . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description, shortDescription';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertFormationLevel($data)
    {
        $sql = 'INSERT INTO acdFormationLevel
                            (description,
                             shortDescription,
                             academicDegree)
                     VALUES (?,?,?)';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->academicDegree );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateFormationLevel($data)
    {
        $sql = 'UPDATE acdFormationLevel
                   SET description      = ?,
                       shortDescription = ?,
                       academicDegree   = ?
                 WHERE formationLevelId = ? ';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->academicDegree,
                       $data->formationLevelId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $formationLevelId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteFormationLevel($formationLevelId)
    {
        $sql = 'DELETE FROM acdFormationLevel
                      WHERE formationLevelId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $formationLevelId));
        //$db->close();

        return $result;
    }

}

?>
