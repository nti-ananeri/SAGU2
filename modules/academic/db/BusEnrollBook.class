<?php
/**
 *
 * This file handles the connection and actions for the enroll book document
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 20/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusEnrollBook extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    public function getContractPeriodHistoric($contractId, $periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT A.stateContractId
                  FROM acdMovementContract A
            INNER JOIN acdContract B
                    ON (A.contractId = B.contractId)
             LEFT JOIN acdLearningPeriod C
                    ON (C.courseId = B.courseId AND
                        C.courseVersion = B.courseVersion AND
                        C.unitId = B.unitId AND
                        C.turnId = B.turnId)
                 WHERE A.contractId = ?
                   AND C.periodId = ?
                   AND A.stateTime BETWEEN C.beginDate AND C.endDate
              ORDER BY A.stateTime DESC';
             
        $args     = array($contractId, $periodId);

        $historic = $db->query(SAGU::prepare($sql, $args));
        
        if (count($historic) > 0)
        {
            foreach ($historic as $row)
            {
                $return[] = $row[0];
            }
            return $return;
        }
        else
        {
            return null;
        }
    }
    
    public function getActualContractStatus($contractId, $periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        $historic = $this->getContractPeriodHistoric($contractId, $periodId);
        
        $sql = 'SELECT stateEnrollBookId 
                  FROM acdStateEnrollBookRules';
                
        
        //$dependentStates = explode(',', STATE_CONTRACT_IDS_DEPENDENTS);
        unset($actualStatus);
        
        while (($actualStatus == null) && (count($historic) > 0))
        {
            $sql2 = $sql . ' WHERE stateIdRules = array[' . implode(',', $historic) . ']';
            $result = $db->query($sql2);
            
            if (count($result) == 1)
            {
                $actualStatus = $result[0][0];
            }
            elseif (count($result) > 1)
            {
                return 0;
            }
            else
            {
                unset($historic[count($historic)-1]);
            }
        }
        
        return $actualStatus;
    }
    
    public function getPeriodActiveContracts($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT DISTINCT A.contractId
                  FROM acdContract A
            INNER JOIN acdMovementContract C
                    ON (C.contractId = A.contractId)
            INNER JOIN acdLearningPeriod B
                    ON (B.courseId = A.courseId AND
                        B.courseVersion = A.courseVersion AND
                        B.unitId = A.unitId AND
                        B.turnId = A.turnId)
                 WHERE C.stateTime BETWEEN B.beginDate and B.endDate
                   AND B.periodId = ?
                   AND A.courseId IN (SELECT courseId FROM acdCourse WHERE formationLevelId = ' . GRADUATION_FORMATION_LEVEL_ID . ')
                   AND A.isListener = false';
                        
        $args = array(  $periodId   );
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    public function getPreviousContractData($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT contractId,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId
                  FROM acdContract
                 WHERE contractId IN (SELECT A.contractId
                                        FROM acdMovementContract A,
                                             acdStateContract B,
                                             acdContract C,
                                             acdCourse D
                                       WHERE A.stateContractId = B.stateContractId
                                         AND A.contractId = C.contractId
                                         AND C.courseId = D.courseId
                                         AND B.isCloseContract = \'' . DB_TRUE . '\'
                                         AND D.formationLevelId = ' . GRADUATION_FORMATION_LEVEL_ID . '
                                         AND C.personId = ?
                                    ORDER BY A.stateTime DESC
                                       LIMIT 1)';

        $result = $db->query(SAGU::prepare($sql, $personId));
        
        list(   $return->contractId,
                $return->courseId,
                $return->courseVersion,
                $return->turnId,
                $return->unitId ) = $result[0];
                
        return $return;
    }
    
    public function getRelatedContractData($contractId, $stateEnrollBookId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $contractData = $busContract->getContract($contractId);
        
        $db = $this->getDatabase();
        
        if ($stateEnrollBookId == STATE_ENROLL_BOOK_INTERNAL_TRANSFER_FROM_ID)
        {
            $sql = 'SELECT A.contractId,
                           C.courseId,
                           C.courseVersion,
                           C.turnId,
                           C.unitId,
                           A.stateTime
                      FROM acdMovementContract A
                INNER JOIN acdMovementContract B
                        ON (B.contractId = ? AND
                            B.stateContractId = ' . STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO . ')
                INNER JOIN acdContract C
                        ON (C.contractId = A.contractId)
                     WHERE A.stateContractId = ' . STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM . '
                       AND A.stateTime >= B.stateTime
                       AND C.personId = ?
                  ORDER BY A.stateTime LIMIT 1';
        }
        elseif ($stateEnrollBookId == STATE_ENROLL_BOOK_INTERNAL_TRANSFER_TO_ID)
        {
            $sql = 'SELECT A.contractId,
                           C.courseId,
                           C.courseVersion,
                           C.turnId,
                           C.unitId,
                           A.stateTime
                      FROM acdMovementContract A
                INNER JOIN acdMovementContract B
                        ON (B.contractId = ? AND
                            B.stateContractId = ' . STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM . ')
                INNER JOIN acdContract C
                        ON (C.contractId = A.contractId)
                     WHERE A.stateContractId = ' . STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO . '
                       AND A.stateTime <= B.stateTime
                       AND C.personId = ?
                  ORDER BY A.stateTime LIMIT 1';
        }
                   
        $args = array ( $contractId, $contractData->personId );
        $result = $db->query(SAGU::prepare($sql, $args));
        
        list ( $return->contractId,
               $return->courseId,
               $return->courseVersion,
               $return->turnId,
               $return->unitId,
               $return->stateTime ) = $result[0];
               
        return $return;
    }
    
    public function generateEnrollBookTable($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $busPeriod    = $MIOLO->getBusiness($module, 'BusPeriod');
        
        set_time_limit(0);
        
        $db->execute('BEGIN');
        
        $busPeriod->setPeriodEnrollBookDate(date(MASK_DATE_PHP), $periodId);
        
        $sql = 'DELETE FROM acdEnrollBookData WHERE periodId = ?';
        
        $db->execute(SAGU::prepare($sql, $periodId));
        
        $contracts = $this->getPeriodActiveContracts($periodId);
        
        if (count($contracts) > 0)
        {
            $count = 0;
            foreach ($contracts as $contract)
            {
                $contractId = $contract[0];
                
                $contractData = $busContract->getContract($contractId);
                                               
                $actualContractStatus = $this->getActualContractStatus($contractId, $periodId);
                
                if ($actualContractStatus != null)
                {
                    $personId      = $contractData->personId;
                    $courseId      = $contractData->courseId;
                    $courseVersion = $contractData->courseVersion;
                    $turnId        = $contractData->turnId;
                    $unitId        = $contractData->unitId;
                    
                    $stateContractId   = $actualContractStatus;
                    
                    if (($stateContractId == STATE_ENROLL_BOOK_INTERNAL_TRANSFER_TO_ID) ||
                        ($stateContractId == STATE_ENROLL_BOOK_INTERNAL_TRANSFER_FROM_ID))
                    {
                        $prevContractData = $this->getRelatedContractData($contractId, $stateContractId);  
                        
                        if (strlen((string)$prevContractData->contractId) > 0)
                        {
                            $prevCourseId      = $prevContractData->courseId;
                            $prevCourseVersion = $prevContractData->courseVersion;
                            $prevTurnId        = $prevContractData->turnId;
                            $prevUnitId        = $prevContractData->unitId;
                            
                            $sql = 'INSERT INTO acdEnrollBookData
                                                (personId,
                                                 courseId,
                                                 courseVersion,
                                                 turnId,
                                                 unitId,
                                                 prevCourseId,
                                                 prevCourseVersion,
                                                 prevTurnId,
                                                 prevUnitId,
                                                 stateEnrollBookId,
                                                 periodId) 
                                         VALUES (' . $personId . ', 
                                               \'' . $prevCourseId . '\', 
                                                 ' . $prevCourseVersion . ', 
                                                 ' . $prevTurnId . ', 
                                                 ' . $prevUnitId . ',
                                               \'' . $courseId . '\', 
                                                 ' . $courseVersion . ', 
                                                 ' . $turnId . ', 
                                                 ' . $unitId . ',                                                   
                                                 ' . $stateContractId . ', 
                                               \'' . $periodId . '\')';
                                                    
                            $db->execute($sql);
                            $count++;
                        }
                    }
                    else
                    {
                        $prevCourseId      = '';
                        $prevCourseVersion = '';
                        $prevTurnId        = '';
                        $prevUnitId        = '';
                    }
                    
                    $sql = 'INSERT INTO acdEnrollBookData
                                        (personId,
                                         courseId,
                                         courseVersion,
                                         turnId,
                                         unitId,
                                         prevCourseId,
                                         prevCourseVersion,
                                         prevTurnId,
                                         prevUnitId,
                                         stateEnrollBookId,
                                         periodId) 
                               VALUES (\'' . $personId . '\', 
                                       \'' . $courseId . '\', 
                                         ' . $courseVersion . ', 
                                         ' . $turnId . ', 
                                         ' . $unitId . ', 
                                       \'' . (strlen((string)$prevCourseId) > 0 ? $prevCourseId : 'null') . '\', 
                                         ' . (strlen((string)$prevCourseVersion) > 0 ? $prevCourseVersion : 'null') . ', 
                                         ' . (strlen((string)$prevTurnId) > 0 ? $prevTurnId : 'null') . ', 
                                         ' . (strlen((string)$prevUnitId) > 0 ? $prevUnitId : 'null') . ', 
                                         ' . $stateContractId . ', 
                                       \'' . $periodId . '\')';
                                            
                    $db->execute($sql);
                    $count++;                    
                }                
            }
        }
        
        $db->execute('COMMIT');
        
        return $count;
    }
    
    public function getEnrollBookData()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT A.personId,
                       B.name,
                       B.sex,
                       A.courseId,
                       A.courseVersion,
                       C.name as courseName,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.prevCourseId,
                       A.prevCourseVersion,
                       F.name as prevCourseName,
                       A.prevTurnId,
                       G.description as prevTurnDescription,
                       A.prevUnitId,
                       H.description as prevUnitDescription,
                       A.stateEnrollBookId,
                       I.description,
                       A.periodId
                  FROM tmpEnrollBook A
            INNER JOIN ONLY basPhysicalPerson B
                    ON (B.personId = A.personId)
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN acdStateEnrollBook I
                    ON (A.stateEnrollBookId = I.stateEnrollBookId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
            INNER JOIN basUnit E
                    ON (E.unitId = A.unitId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = A.prevCourseId)
             LEFT JOIN basTurn G
                    ON (G.turnId = A.prevTurnId)
             LEFT JOIN basUnit H
                    ON (H.unitId = A.prevUnitId)';
                    
        $result = $db->query($sql);
        
        return $result;
    }
    
    public function getEnrollBookSummary($periodId, $orderOption=1)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT DISTINCT A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       B.enrollBookSequence
                  FROM acdEnrollBookData A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
                 WHERE A.periodId = ?';
                 
        if ($orderOption == 2)
        {
            $sql .= ' ORDER BY B.enrollBookSequence, A.courseId';
        }
        else
        {
            $sql .= ' ORDER BY A.courseId';
        }
              
        $result1 = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result1) > 0)
        {
            foreach ($result1 as $r1)
            {
                list (  $courseId,
                        $courseVersion,
                        $turnId,
                        $unitId,
                        $enrollBookSequence) = $r1;
                        
                $sql = 'SELECT name FROM acdCourse WHERE courseId = ?';
                
                $courseName = $db->query(SAGU::prepare($sql, $courseId));
                $courseName = $courseName[0][0];
                
                $sql = 'SELECT description FROM basTurn WHERE turnId = ?';
                
                $turnDesc = $db->query(SAGU::prepare($sql, $turnId));
                $turnDesc = $turnDesc[0][0];
                
                $sql = 'SELECT description FROM basUnit WHERE unitId = ?';
                
                $unitDesc = $db->query(SAGU::prepare($sql, $unitId));
                $unitDesc = $unitDesc[0][0];
                
                $sql = 'SELECT A.stateEnrollBookId,
                               B.description,
                               B.isSumToTotal,
                               sum(CASE WHEN C.sex ILIKE \'M\' THEN 1 ELSE 0 END),
                               sum(CASE WHEN C.sex ILIKE \'F\' THEN 1 ELSE 0 END),
                               sum(CASE WHEN C.sex = NULL THEN 1 ELSE 0 END),
                               count(A.personId)
                          FROM acdEnrollBookData A
                    INNER JOIN acdStateEnrollBook B
                            ON (B.stateEnrollBookId = A.stateEnrollBookId)
                    INNER JOIN ONLY basPhysicalPersonStudent C
                            ON (C.personId = A.personId)
                         WHERE A.courseId = ?
                           AND A.courseVersion = ?
                           AND A.turnId = ?
                           AND A.unitId = ?
                           AND A.periodId = ?
                      GROUP BY A.stateEnrollBookId, B.description, B.isSumToTotal
                      ORDER BY 1';
                
                $args = array(  $courseId,
                                $courseVersion,
                                $turnId,
                                $unitId,
                                $periodId   );
                
                $result2 = $db->query(SAGU::prepare($sql, $args));
                
                if (count($result2) > 0)
                {
                    foreach ($result2 as $r2)
                    {
                        list(   $stateEnrollBookId,
                                $stateEnrollBookDesc,
                                $isSumToTotal,
                                $totalMale,
                                $totalFemale,
                                $totalUnknown,
                                $totalPupils    ) = $r2;
                                
                        $index = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                        $title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $turnDesc . ' - ' . $unitDesc;
                        
                        $stateData = array($stateEnrollBookId, $stateEnrollBookDesc, $totalMale, $totalFemale, $totalUnknown, $totalPupils);
                        
                        $returnData[$index]->title        = $title;
                        $returnData[$index]->statesData[] = $stateData;
                        
                        $returnData[$index]->totalM += $totalMale;
                        $returnData[$index]->totalF += $totalFemale;
                        $returnData[$index]->totalU += $totalUnknown;
                        $returnData[$index]->total  += $totalPupils;
                        
                        if ($isSumToTotal == DB_TRUE)
                        {
                            $returnData[$index]->totalMA += $totalMale; 
                            $returnData[$index]->totalFA += $totalFemale; 
                            $returnData[$index]->totalUA += $totalUnknown; 
                            $returnData[$index]->totalA  += $totalPupils; 
                        }
                    }
                }
            }
        }
        
        return $returnData;
    }
    
    public function getEnrollBookSummaryByAge($periodId, $sex=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT DISTINCT courseId,
                       courseVersion,
                       turnId,
                       unitId
                  FROM acdEnrollBookData
                 WHERE periodId = ?';
              
        $result1 = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result1) > 0)
        {
            foreach ($result1 as $r1)
            {
                list (  $courseId,
                        $courseVersion,
                        $turnId,
                        $unitId) = $r1;
                        
                $sql = 'SELECT name FROM acdCourse WHERE courseId = ?';
                
                $courseName = $db->query(SAGU::prepare($sql, $courseId));
                $courseName = $courseName[0][0];
                
                $sql = 'SELECT description FROM basTurn WHERE turnId = ?';
                
                $turnDesc = $db->query(SAGU::prepare($sql, $turnId));
                $turnDesc = $turnDesc[0][0];
                
                $sql = 'SELECT description FROM basUnit WHERE unitId = ?';
                
                $unitDesc = $db->query(SAGU::prepare($sql, $unitId));
                $unitDesc = $unitDesc[0][0];
                
                $sql = 'SELECT A.stateEnrollBookId,
                               A.description,
                               A.isSumToTotal,
                               sum(CASE WHEN A.age <= 18 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 19 AND 24 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 25 AND 29 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 30 AND 34 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 35 AND 39 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 40 AND 44 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 45 AND 49 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 50 AND 54 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 55 AND 59 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 60 AND 64 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age >= 64 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN (A.age IS NULL OR A.age = 0) THEN 1
                               ELSE 0 END),
                               count(A.personId) as totalPupils
                          FROM (SELECT A.stateEnrollBookId,
                                       B.description,
                                       B.isSumToTotal,
                                       EXTRACT (YEAR FROM age(C.dateBirth)) as age,
                                       A.personId
                                  FROM acdEnrollBookData A
                            INNER JOIN acdStateEnrollBook B
                                    ON (B.stateEnrollBookId = A.stateEnrollBookId)
                            INNER JOIN ONLY basPhysicalPersonStudent C
                                    ON (C.personId = A.personId)
                                 WHERE A.courseId = ?
                                   AND A.courseVersion = ?
                                   AND A.turnId = ?
                                   AND A.unitId = ?
                                   AND A.periodId = ?';
                                   
                if (strlen((string)$sex) > 0)
                {
                    $sql .= ' AND C.sex = ? ';          
                        
                      
                      $args = array(  $courseId,
                                      $courseVersion,
                                      $turnId,
                                      $unitId,
                                      $periodId,
                                      $sex   );
                }
                else
                {
                    $args = array(  $courseId,
                                    $courseVersion,
                                    $turnId,
                                    $unitId,
                                    $periodId   );
                }
                
                $sql .= ' ORDER BY 1) AS A
                          GROUP BY A.stateEnrollBookId, A.description, A.isSumToTotal
                          ORDER BY 1';
                
                $result2 = $db->query(SAGU::prepare($sql, $args));
                
                if (count($result2) > 0)
                {
                    foreach ($result2 as $r2)
                    {                               
                        list (  $stateEnrollBookId,
                                $description,
                                $isSumToTotal,
                                $under18,
                                $from19to24,
                                $from25to29,
                                $from30to34,
                                $from35to39,
                                $from40to44,
                                $from45to49,
                                $from50to54,
                                $from55to59,
                                $from60to64,
                                $over65,
                                $unknown,
                                $number ) = $r2;
                        
                        $index = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                        $title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $turnDesc . ' - ' . $unitDesc;
                        
                        $returnData[$index]->title        = $title;
                        unset($r2[2]);
                        $returnData[$index]->statesData[] = array ( $stateEnrollBookId,
                                                                    $description,
                                                                    $under18,
                                                                    $from19to24,
                                                                    $from25to29,
                                                                    $from30to34,
                                                                    $from35to39,
                                                                    $from40to44,
                                                                    $from45to49,
                                                                    $from50to54,
                                                                    $from55to59,
                                                                    $from60to64,
                                                                    $over65,
                                                                    $unknown,
                                                                    $number );
                        
                        $returnData[$index]->totalUnder18 += $under18;
                        $returnData[$index]->total19to24  += $from19to24;
                        $returnData[$index]->total25to29  += $from25to29;
                        $returnData[$index]->total30to34  += $from30to34;
                        $returnData[$index]->total35to39  += $from35to39;
                        $returnData[$index]->total40to44  += $from40to44;
                        $returnData[$index]->total45to49  += $from45to49;
                        $returnData[$index]->total50to54  += $from50to54;
                        $returnData[$index]->total55to59  += $from55to59;
                        $returnData[$index]->total60to64  += $from60to64;
                        $returnData[$index]->totalOver65  += $over65;
                        $returnData[$index]->totalUnknown += $unknown;
                        $returnData[$index]->total        += $number;
                        
                        if ($isSumToTotal == DB_TRUE)
                        {
                            $returnData[$index]->totalUnder18A += $under18;
                            $returnData[$index]->total19to24A  += $from19to24;
                            $returnData[$index]->total25to29A  += $from25to29;
                            $returnData[$index]->total30to34A  += $from30to34;
                            $returnData[$index]->total35to39A  += $from35to39;
                            $returnData[$index]->total40to44A  += $from40to44;
                            $returnData[$index]->total45to49A  += $from45to49;
                            $returnData[$index]->total50to54A  += $from50to54;
                            $returnData[$index]->total55to59A  += $from55to59;
                            $returnData[$index]->total60to64A  += $from60to64;
                            $returnData[$index]->totalOver65A  += $over65;
                            $returnData[$index]->totalUnknownA += $unknown;
                            $returnData[$index]->totalA        += $number;
                        }
                    }
                }
            }
        }
        
        return $returnData;
    }
    
    public function getEnrollBookDataByCity($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT 
                       C.name,
                       count(A.personId)
                  FROM acdEnrollBookData A
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = A.stateEnrollBookId)
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId)
                 WHERE A.periodId = ?
                   AND D.isSumToTotal = true
              GROUP BY C.name
              ORDER BY 2 DESC'; 
              
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        return $result;
    }
    
    public function getEnrollBookDataByGroupOffer($periodId)
    {
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT B.groupId,
                       F.courseId,
                       F.courseVersion,
                       F.turnId,
                       F.unitId,
                       B.curriculumId,
                       count(D.personId)
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdContract C
                    ON (C.contractId = A.contractId)
            INNER JOIN acdEnrollBookData D
                    ON (D.personId = C.personId)
            INNER JOIN acdStateEnrollBook E
                    ON (E.stateEnrollBookId = D.stateEnrollBookId)
            INNER JOIN acdCurriculum F
                    ON (F.curriculumId = B.curriculumId)
            INNER JOIN acdSchedule G
                    ON (G.groupId = B.groupId)
                 WHERE D.periodId = ?
                   AND E.isSumToTotal = true
              GROUP BY B.groupId, F.courseId, F.courseVersion, F.turnId, F.unitId, G.weekDayId, B.curriculumId
              ORDER BY G.weekDayId, B.groupId';
              
        $result1 = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result1) > 0)
        {
            foreach ($result1 as $res1)
            {
                list( $groupId,
                      $courseId,
                      $courseVersion,
                      $turnId,
                      $unitId,
                      $curriculumId,
                      $number ) = $res1;
                      
                $sql = 'SELECT A.scheduleId, 
                               A.weekdayId, 
                               B.description,
                               C.turnId,
                               D.description
                          FROM acdSchedule A
                     LEFT JOIN basWeekday B
                            ON (B.weekDayId = A.weekDayId)
                     LEFT JOIN acdScheduleLearningPeriod C
                            ON (C.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
                     LEFT JOIN basTurn D
                            ON (D.turnId = C.turnId)
                         WHERE A.groupId = ?
                      ORDER BY A.weekDayId';
                
                $result2 = $db->query(SAGU::prepare($sql, $groupId));
                
                $weekDay = $result2[0][2];
                $turn    = $result2[0][4];
                
                $sql = 'SELECT DISTINCT A.professorId, 
                               B.name
                          FROM acdSchedule C
                     LEFT JOIN acdScheduleProfessor A
                            ON (A.scheduleId = C.scheduleId)
                    INNER JOIN ONLY basPhysicalPersonProfessor B
                            ON (B.personId = A.professorId)
                         WHERE C.groupId = ?';
                
                $result3 = $db->query(SAGU::prepare($sql, $groupId));
                
                unset($professor);
                if (count($result3) > 1)
                {
                    foreach ($result3 as $res3)
                    {
                        if (strlen((string)$professor) > 0)
                        {
                            $professor .= '/' . $res3[1];
                        }
                        else
                        {
                            $professor = $res3[1];
                        }
                    }
                }
                elseif (count($result3) == 1)
                {
                    $professor = $result3[0][1];
                }
                else
                {
                    $professor = '';
                }
                
                $sql = 'SELECT A.curricularComponentId,
                               A.curricularComponentVersion,
                               B.name
                          FROM acdCurriculum A
                    INNER JOIN acdCurricularComponent B
                            ON (B.curricularComponentId = A.curricularComponentId AND
                                B.curricularComponentVersion = A.curricularComponentVersion)
                         WHERE A.curriculumId = ?';
                         
                $currComp = $db->query(SAGU::prepare($sql, $curriculumId));
                $currComp = $currComp[0][0] . '(' . $currComp[0][1] . ') - ' . $currComp[0][2];
                
                $sql    = 'SELECT shortName FROM acdCourse WHERE courseId = ?';
                $course = $db->query(SAGU::prepare($sql, $courseId));
                $course = $course[0][0];
                
                $sql        = 'SELECT description FROM basTurn WHERE turnId = ?';
                $courseTurn = $db->query(SAGU::prepare($sql, $turnId));
                $courseTurn = $courseTurn[0][0];
                
                $sql  = 'SELECT description FROM basUnit WHERE unitId = ?';
                $unit = $db->query(SAGU::prepare($sql, $unitId));
                $unit = $unit[0][0];
                
                $scheduleIndex = $weekDay . '-' . $turn;
                $courseIndex   = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                $title         = $courseId . '(' . $courseVersion . ') - ' . $course . ' - ' . $courseTurn . ' - ' . $unit;
                $row           = array($groupId, $currComp, $professor, $number);
                //$data[$courseIndex]->title  = $title;
                //$data[$courseIndex]->data[] = $row;
                
                $return[$scheduleIndex]->title  = $scheduleIndex;
                $return[$scheduleIndex]->data[$courseIndex]->title  = $title;
                $return[$scheduleIndex]->data[$courseIndex]->data[] = $row;
                $return[$scheduleIndex]->data[$courseIndex]->total  += $number;
            }
        }
        
        if (count($return) > 0)
        {
            return $return;
        }
        else
        {
            return null;
        }
    }
    
    public function getEnrollBookDataByGroupOccurrence($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT G.weekDayId,
                       M.description,
                       H.turnId,
                       J.description,
                       F.courseId,
                       F.courseVersion,
                       F.turnId,
                       F.unitId,
                       G.scheduleId,
                       B.groupId,
                       I.curricularComponentId,
                       I.curricularComponentVersion,
                       I.name,
                       count(D.personId)
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId AND
                        B.learningPeriodId IN (SELECT learningPeriodId FROM acdLearningPeriod WHERE periodId = ?))
            INNER JOIN acdContract C
                    ON (C.contractId = A.contractId)
            INNER JOIN acdEnrollBookData D
                    ON (D.personId = C.personId AND
                        D.courseId = C.courseId AND
                        D.courseVersion = C.courseVersion AND
                        D.unitId = C.unitId AND
                        D.turnId = C.turnId)
            INNER JOIN acdStateEnrollBook E
                    ON (E.stateEnrollBookId = D.stateEnrollBookId)
            INNER JOIN acdCurriculum F
                    ON (F.curriculumId = B.curriculumId)
            INNER JOIN acdSchedule G
                    ON (G.groupId = B.groupId)
            INNER JOIN acdScheduleLearningPeriod H
                    ON (H.scheduleLearningPeriodId = G.scheduleLearningPeriodId)
            INNER JOIN acdCurricularComponent I
                    ON (I.curricularComponentId = F.curricularComponentId AND
                        I.curricularComponentVersion = F.curricularComponentVersion)
            INNER JOIN basTurn J
                    ON (J.turnId = H.turnId)
            INNER JOIN basWeekDay M
                    ON (M.weekDayId = G.weekDayId)
                 WHERE D.periodId = ?
                   AND E.isSumToTotal = \'' . DB_TRUE . '\'
              GROUP BY G.weekDayId, M.description, H.turnId, J.description, F.courseId, F.courseVersion, F.turnId, F.unitId, G.scheduleId, B.groupId, I.curricularComponentId, I.curricularComponentVersion, I.name
              ORDER BY G.weekDayId, H.turnId, F.courseId, F.courseVersion, I.name';
              
        $result = $db->query(SAGU::prepare($sql, array($periodId, $periodId)));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $weekDayId,
                        $weekDayDesc,
                        $turnId,
                        $turnDesc,
                        $courseId,
                        $courseVersion,
                        $courseTurnId,
                        $courseUnitId,
                        $scheduleId,
                        $groupId,
                        $currCompId,
                        $currCompVersion,
                        $currCompDesc,
                        $number ) = $res;
                        
                $scheduleIndex = $weekDayId . '-' . $turnId;
                $scheduleTitle = $weekDayDesc . ' - ' . $turnDesc;
                $return[$scheduleIndex]->title = $scheduleTitle;
                
                $sql        = 'SELECT shortName FROM acdCourse WHERE courseId = \'' . $courseId . '\'';
                $courseName = $db->query($sql);
                $courseName = $courseName[0][0];
                
                $sql        = 'SELECT description FROM basUnit WHERE unitId = ' . $courseUnitId;
                $courseUnit = $db->query($sql);
                $courseUnit = $courseUnit[0][0];
                
                $sql = 'SELECT B.name 
                          FROM acdScheduleProfessor A
                    INNER JOIN basPhysicalPersonProfessor B
                            ON (B.personId = A.professorId)
                         WHERE A.scheduleId = ' . $scheduleId;
                         
                $professors = $db->query($sql);
                
                unset($scheduleProfessor);
                if (count($professors) > 0)
                {
                    foreach ($professors as $professor)
                    {
                        if (strlen((string)$scheduleProfessor) > 0)
                        {
                            $scheduleProfessor .= '/' . $professor[0];
                        }
                        else
                        {
                            $scheduleProfessor = $professor[0];
                        }
                    }
                }
                
                $courseIndex = $courseId . '-' . $courseVersion . '-' . $courseTurnId . '-' . $courseUnitId;
                $courseTitle = $courseId . '('. $courseVersion . ') - ' . $courseName . ' - ' . $courseUnit;
                
                $return[$scheduleIndex]->data[$courseIndex]->title        = $courseTitle;
                $return[$scheduleIndex]->data[$courseIndex]->total       += $number;
                $return[$scheduleIndex]->data[$courseIndex]->courseData[] = array($groupId, $currCompId . '(' . $currCompVersion . ') - ' . $currCompDesc, $scheduleProfessor, $number);
            }
            return $return;
        }
        return null;
    }
    
    public function getProfessorGroups($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT F.professorId,
                       G.name,
                       J.courseId,
                       J.courseVersion,
                       J.turnId,
                       J.unitId,
                       K.shortName,
                       L.description,
                       count(DISTINCT A.groupId)
                  FROM acdEnroll A
            INNER JOIN acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN acdEnrollBookData C
                    ON (C.personId = B.personId)
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = C.stateEnrollBookId)
            INNER JOIN acdSchedule E
                    ON (E.groupId = A.groupId)
            INNER JOIN acdScheduleProfessor F
                    ON (F.scheduleId = E.scheduleId)
            INNER JOIN basPhysicalPersonProfessor G
                    ON (G.personId = F.professorId)
            INNER JOIN acdGroup H
                    ON (H.groupId = A.groupId)
            INNER JOIN acdLearningPeriod I
                    ON (I.learningPeriodId = H.learningPeriodId)
            INNER JOIN acdCurriculum J
                    ON (J.curriculumId = H.curriculumId)
            INNER JOIN acdCourse K
                    ON (K.courseId = J.courseId)
            INNER JOIN basUnit L
                    ON (L.unitId = J.unitId)
                 WHERE I.periodId = ?
                   AND D.isSumToTotal = \'' . DB_TRUE . '\'
                   AND K.formationLevelId = ' . GRADUATION_FORMATION_LEVEL_ID . '
              GROUP BY F.professorId, 
                       G.name, 
                       J.courseId, 
                       J.courseVersion, 
                       J.turnId, 
                       J.unitId,
                       K.shortName,
                       L.description
              ORDER BY K.shortName, G.name';
              
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list(  $professorId,
                       $name,
                       $courseId,
                       $courseVersion,
                       $turnId,
                       $unitId,
                       $course,
                       $unit,
                       $number  ) = $res;
                                
                $index  = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                $title  = $courseId . '(' . $courseVersion . ') - ' . $course . ' - ' . $unit;
                
                $return[$index]->title  = $title;
                $return[$index]->data[] = array($professorId, $name, $number);
                $return[$index]->total += $number;
            }
        }
        
        if (count($return) > 0)
        {
            return $return;
        }
        else
        {
            return null;
        }
    }
    
    public function getProfessorCurricularComponents($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT F.professorId,
                       G.name,
                       count(DISTINCT A.groupId)
                  FROM acdEnroll A
            INNER JOIN acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN acdEnrollBookData C
                    ON (C.personId = B.personId)
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = C.stateEnrollBookId)
            INNER JOIN acdSchedule E
                    ON (E.groupId = A.groupId)
            INNER JOIN acdScheduleProfessor F
                    ON (F.scheduleId = E.scheduleId)
            INNER JOIN basPhysicalPersonProfessor G
                    ON (G.personId = F.professorId)
            INNER JOIN acdGroup H
                    ON (H.groupId = A.groupId)
            INNER JOIN acdLearningPeriod I
                    ON (I.learningPeriodId = H.learningPeriodId)
            INNER JOIN acdCurriculum J
                    ON (J.curriculumId = H.curriculumId)
            INNER JOIN acdCourse K
                    ON (K.courseId = J.courseId)
                 WHERE I.periodId = ?
                   AND D.isSumToTotal = \'' . DB_TRUE . '\'
                   AND K.formationLevelId = ' . GRADUATION_FORMATION_LEVEL_ID . '
              GROUP BY F.professorId, 
                       G.name
              ORDER BY G.name';
        
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        return $result;
    }
    
    public function getEnrollBookDataByCityAndCourse($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       F.name,
                       E.description,
                       C.cityId,
                       C.name,
                       count(A.personId)
                  FROM acdEnrollBookData A
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = A.stateEnrollBookId)
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId)
            INNER JOIN acdCourse F
                    ON (F.courseId = A.courseId)
            INNER JOIN basUnit E
                    ON (E.unitId = A.unitId)
                 WHERE A.periodId = ?
                   AND D.isSumToTotal = \'' . DB_TRUE . '\'
              GROUP BY A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       F.name,
                       E.description,
                       C.cityId,
                       C.name
              ORDER BY 1, 8'; 
              
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list(   $courseId,
                        $courseVersion,
                        $turnId,
                        $unitId,
                        $courseName,
                        $unitDesc,
                        $cityId,
                        $cityName,
                        $number     ) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                
                $title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $unitDesc;
                
                $return[$index]->title  = $title;
                $return[$index]->data[] = array($cityId, $cityName, $number);
                $return[$index]->total += $number;
            }
        }
        
        return $return;
    }
    
    public function getEnrollBookDataByCourseAndIncentive($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       E.shortName,
                       A.unitId,
                       F.description,
                       A.turnId,
                       D.incentiveTypeId,
                       D.description,
                       CASE WHEN C.valueIsPercent = true
                       THEN round(C.value, 2) || \'%\'
                       ELSE \'$ \' || round(C.value, 2) END,
                       count(A.personId)
                  FROM acdEnrollBookData A
            INNER JOIN acdContract B
                    ON (B.personId = A.personId AND
                        B.courseId = A.courseId AND
                        B.courseVersion = A.courseVersion AND
                        B.turnId = A.turnId AND
                        B.unitId = A.unitId)
            INNER JOIN ONLY finIncentive C
                    ON (C.contractId = B.contractId AND 
                        C.startDate <= date(now()) AND 
                        ((C.cancellationdate = NULL) OR C.endDate >= date(now())) AND 
                        C.value <> 0)
            INNER JOIN finIncentiveType D
                    ON (D.incentiveTypeId = C.incentiveTypeId)
            INNER JOIN acdCourse E
                    ON (E.courseId = A.courseId)
            INNER JOIN basUnit F
                    ON (F.unitId = A.unitId)
                 WHERE A.periodId = ?     
              GROUP BY A.courseId, 
                       A.courseVersion,
                       E.shortName,
                       A.unitId,
                       F.description,
                       A.turnId,
                       D.incentiveTypeId,
                       D.description,
                       C.valueIsPercent,
                       C.value
              ORDER BY A.courseId, D.incentiveTypeId, C.value';
              
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $courseId,
                        $courseVersion,
                        $courseName,
                        $unitId,
                        $unitDesc,
                        $turnId,
                        $incentiveTypeId,
                        $incentiveTypeDesc,
                        $value,
                        $number  ) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $unitId . '-' . $turnId;
                
                $title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $unitDesc;
                
                $return[$index]->title  = $title;
                $return[$index]->data[] = array($incentiveTypeId, $incentiveTypeDesc, $value, $number);
                $return[$index]->total += $number;
            }
            
            return $return;
        }
        else
        {
            return null;
        }
    }
    
    public function getPupilsByCourseAndAgeBand($periodId)
    {
        $db = $this->getDatabase();
        
        $sql =         'SELECT A.courseId,
                               A.courseVersion,
                               A.unitId,
                               C.description,
                               B.name,
                               A.sex,
                               sum(CASE WHEN A.age <= 18 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 19 AND 24 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 25 AND 29 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 30 AND 34 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 35 AND 39 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 40 AND 44 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 45 AND 49 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 50 AND 54 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 55 AND 59 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 60 AND 64 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age >= 64 THEN 1
                               ELSE 0 END),
                               count(A.personId) as totalPupils
                          FROM (SELECT A.courseId,
                                       A.courseVersion,
                                       A.unitId,
                                       C.sex,
                                       EXTRACT (YEAR FROM age(C.dateBirth)) as age,
                                       A.personId
                                  FROM acdEnrollBookData A
                            INNER JOIN acdStateEnrollBook B
                                    ON (B.stateEnrollBookId = A.stateEnrollBookId)
                            INNER JOIN ONLY basPhysicalPersonStudent C
                                    ON (C.personId = A.personId)
                                 WHERE A.periodId = ?
                                   AND B.isSumToTotal = \''. DB_TRUE . '\'
                              ORDER BY 1) AS A
                    INNER JOIN acdCourse B
                            ON (B.courseId = A.courseId)
                    INNER JOIN basUnit C
                            ON (C.unitId = A.unitId)
                      GROUP BY A.courseId, A.courseVersion, A.unitId, C.description, B.name, A.sex
                      ORDER BY 1';
                      
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                $index = $res[0] . '-' . $res[1] . '-' . $res[2];
                
                $return[$index]->data[0] = $res[0];
                $return[$index]->data[1] = $res[3];
                $return[$index]->data[2] = $res[4];
                
                $strData = array('<=18 '   . '<font color=\'red\'>' . $res[6]  . '</font>', 
                                 '19..24 ' . '<font color=\'red\'>' . $res[7]  . '</font>', 
                                 '25..29 ' . '<font color=\'red\'>' . $res[8]  . '</font>', 
                                 '30..34 ' . '<font color=\'red\'>' . $res[9]  . '</font>', 
                                 '35..39 ' . '<font color=\'red\'>' . $res[10] . '</font>', 
                                 '40..44 ' . '<font color=\'red\'>' . $res[11] . '</font>', 
                                 '45..49 ' . '<font color=\'red\'>' . $res[12] . '</font>', 
                                 '50..54 ' . '<font color=\'red\'>' . $res[13] . '</font>', 
                                 '55..59 ' . '<font color=\'red\'>' . $res[14] . '</font>', 
                                 '60..64 ' . '<font color=\'red\'>' . $res[15] . '</font>', 
                                 '>=65 '   . '<font color=\'red\'>' . $res[16] . '</font>', 
                                 '<b>' . _M('Total', $module) . ' <font color=\'red\'>' . $res[17] . '</font></b>');
                
                $str = implode('<br>', $strData);
                
                if ($res[5] == 'M')
                {
                    $return[$index]->data[3] = $str;
                    $return[$index]->totalM += $res[17];
                }
                else
                {
                    $return[$index]->data[4] = $str;
                    $return[$index]->totalF += $res[17];
                }
            }
        }
        
        return $return;
    }
    
    public function getPupilsByCityAndAge($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT B.cityId,
                       C.name,
                       EXTRACT (YEAR FROM age(B.dateBirth)) as age,
                       count(A.personId)
                  FROM acdEnrollBookData A
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = A.stateEnrollBookId)
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId)
                 WHERE A.periodId = ?
                   AND D.isSumToTotal = \'' . DB_TRUE . '\'
              GROUP BY B.cityId, C.name, age
              ORDER BY 1, 2';
              
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        return $result;
    }
    
    public function getPupilsByCourseAgeBandAndCurrComp($periodId)
    {
        $db = $this->getDatabase();
        
        $sql =         'SELECT A.courseId,
                               A.courseVersion,
                               A.unitId,
                               C.description,
                               B.name,
                               G.name,
                               A.sex,
                               sum(CASE WHEN A.age <= 18 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 19 AND 24 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 25 AND 29 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 30 AND 34 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 35 AND 39 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 40 AND 44 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 45 AND 49 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 50 AND 54 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 55 AND 59 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age BETWEEN 60 AND 64 THEN 1
                               ELSE 0 END),
                               sum(CASE WHEN A.age >= 64 THEN 1
                               ELSE 0 END),
                               count(A.personId) as totalPupils
                          FROM (SELECT A.courseId,
                                       A.courseVersion,
                                       A.unitId,
                                       A.turnId,
                                       C.sex,
                                       EXTRACT (YEAR FROM age(C.dateBirth)) as age,
                                       A.personId
                                  FROM acdEnrollBookData A
                            INNER JOIN acdStateEnrollBook B
                                    ON (B.stateEnrollBookId = A.stateEnrollBookId)
                            INNER JOIN ONLY basPhysicalPersonStudent C
                                    ON (C.personId = A.personId)
                                 WHERE A.periodId = ?
                                   AND B.isSumToTotal = \''. DB_TRUE . '\'
                              ORDER BY 1) AS A
                    INNER JOIN acdContract D
                            ON (D.personId = A.personId AND
                                D.courseId = A.courseId AND
                                D.courseVersion = A.courseVersion AND
                                D.unitId = A.unitId AND
                                D.turnId = A.turnId)
                    INNER JOIN acdEnroll H
                            ON (H.contractId = D.contractId)
                    INNER JOIN acdGroup E
                            ON (E.groupId = H.groupId)
                    INNER JOIN acdLearningPeriod I
                            ON (I.learningPeriodId = E.learningPeriodId AND I.periodId = ?)
                    INNER JOIN acdCurriculum F
                            ON (F.curriculumId = E.curriculumId)
                    INNER JOIN acdCurricularComponent G
                            ON (G.curricularComponentId = F.curricularComponentId AND
                                G.curricularComponentVersion = F.curricularComponentVersion) 
                    INNER JOIN acdCourse B
                            ON (B.courseId = A.courseId)
                    INNER JOIN basUnit C
                            ON (C.unitId = A.unitId)
                      GROUP BY A.courseId, A.courseVersion, A.unitId, C.description, B.name, G.name, A.sex
                      ORDER BY 1,3,6';
                      
        $result = $db->query(SAGU::prepare($sql, array($periodId, $periodId)));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                $index = $res[0] . '-' . $res[1] . '-' . $res[2] . '-' . $res[5];
                
                $return[$index]->data[0] = $res[0];
                $return[$index]->data[1] = $res[3];
                $return[$index]->data[2] = $res[4];
                $return[$index]->data[3] = $res[5];
                
                $strData = array('<=18 '   . '<font color=\'red\'>' . $res[7]  . '</font>', 
                                 '19..24 ' . '<font color=\'red\'>' . $res[8]  . '</font>', 
                                 '25..29 ' . '<font color=\'red\'>' . $res[9]  . '</font>', 
                                 '30..34 ' . '<font color=\'red\'>' . $res[10]  . '</font>', 
                                 '35..39 ' . '<font color=\'red\'>' . $res[11] . '</font>', 
                                 '40..44 ' . '<font color=\'red\'>' . $res[12] . '</font>', 
                                 '45..49 ' . '<font color=\'red\'>' . $res[13] . '</font>', 
                                 '50..54 ' . '<font color=\'red\'>' . $res[14] . '</font>', 
                                 '55..59 ' . '<font color=\'red\'>' . $res[15] . '</font>', 
                                 '60..64 ' . '<font color=\'red\'>' . $res[16] . '</font>', 
                                 '>=65 '   . '<font color=\'red\'>' . $res[17] . '</font>', 
                                 '<b>' . _M('Total', $module) . ' <font color=\'red\'>' . $res[18] . '</font></b>');
                
                $str = implode('<br>', $strData);
                
                if ($res[6] == 'M')
                {
                    $return[$index]->data[4] = $str;
                    $return[$index]->totalM += $res[18];
                }
                else
                {
                    $return[$index]->data[5] = $str;
                    $return[$index]->totalF += $res[18];
                }
            }
        }
        
        return $return;
    }
    
    public function getEnrollBookDataByCityCourseAndCurrComp($periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db     = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       F.name,
                       E.description,
                       C.cityId,
                       C.name,
                       L.curricularComponentId,
                       L.name,
                       count(A.personId)
                  FROM acdEnrollBookData A
            INNER JOIN acdStateEnrollBook D
                    ON (D.stateEnrollBookId = A.stateEnrollBookId)
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
            INNER JOIN acdContract G
                    ON (G.personId = A.personId AND
                        G.courseId = A.courseId AND
                        G.courseVersion = A.courseVersion AND
                        G.unitId = A.unitId AND
                        G.turnId = A.turnId)
            INNER JOIN acdEnroll H
                    ON (H.contractId = G.contractId)
            INNER JOIN acdGroup I
                    ON (I.groupId = H.groupId)
            INNER JOIN acdLearningPeriod J
                    ON (J.learningPeriodId = I.learningPeriodId AND J.periodId = ?)
            INNER JOIN acdCurriculum K
                    ON (K.curriculumId = I.curriculumId)
            INNER JOIN acdCurricularComponent L
                    ON (L.curricularComponentId = K.curricularComponentId AND
                        L.curricularComponentVersion = K.curricularComponentVersion)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId)
            INNER JOIN acdCourse F
                    ON (F.courseId = A.courseId)
            INNER JOIN basUnit E
                    ON (E.unitId = A.unitId)
                 WHERE A.periodId = ?
                   AND D.isSumToTotal = \'' . DB_TRUE . '\'
              GROUP BY A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       F.name,
                       E.description,
                       C.cityId,
                       C.name,
                       L.curricularComponentId,
                       L.name
              ORDER BY 1, 10, 8'; 
              
        $result = $db->query(SAGU::prepare($sql, array($periodId, $periodId)));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list(   $courseId,
                        $courseVersion,
                        $turnId,
                        $unitId,
                        $courseName,
                        $unitDesc,
                        $cityId,
                        $cityName,
                        $currCompId,
                        $currCompName,
                        $number     ) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId . '-' . $currCompId;
                
                $title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $unitDesc . ' - ' . $currCompName;
                
                $return[$index]->title  = $title;
                $return[$index]->data[] = array($cityId, $cityName, $number);
                $return[$index]->total += $number;
            }
        }
        
        return $return;
    }
    
    public function getPupilsInExternalTransfer($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       C.name,
                       A.unitId,
                       D.description,
                       A.turnId,
                       E.description,
                       A.personId,
                       B.name
                  FROM acdEnrollBookData A
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = a.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = A.turnId)
                 WHERE A.stateEnrollBookId = ' . STATE_ENROLL_BOOK_EXTERNAL_TRANSFER_TO_ID . '
                   AND A.periodId = ?
              ORDER BY A.courseId, A.courseVersion, A.unitId, A.turnId, B.name'; //HARD CODE!!!!!!!!!!!!!!
        
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $courseId,
                        $courseVersion,
                        $courseName,
                        $unitId,
                        $unitDesc,
                        $turnId,
                        $turnDesc,
                        $personId,
                        $personName ) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $unitId . '-' . $turnId;
                
                $return[$index]->title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $turnDesc . ' - ' . $unitDesc;
                $return[$index]->data[] = array($personId, $personName);
                $return[$index]->total++;
            }
            
            return $return;
        }
        
        return null;
    } 
    
    public function getPupilsByState($periodId, $stateEnrollBookId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name,
                       A.unitId,
                       C.description,
                       A.turnId,
                       D.description,
                       A.prevCourseId,
                       A.prevCourseVersion,
                       E.name,
                       A.prevUnitId,
                       F.description,
                       A.prevTurnId,
                       G.description,
                       A.personId,
                       H.name
                  FROM acdEnrollBookData A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN basUnit C
                    ON (C.unitId = A.unitId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
             LEFT JOIN acdCourse E
                    ON (E.courseId = A.prevCourseId)
             LEFT JOIN basUnit F
                    ON (F.unitId = A.prevUnitId)
             LEFT JOIN basTurn G
                    ON (G.turnId = A.prevTurnId)
            INNER JOIN ONLY basPhysicalPersonStudent H
                    ON (H.personId = A.personId)
                 WHERE A.periodId = ?
                   AND A.stateEnrollBookId = ?
              ORDER BY A.courseId, A.courseVersion, A.unitId, A.turnId, H.name';
              
        $args = array($periodId, $stateEnrollBookId);
                
        $result = $db->query(SAGU::prepare($sql, $args));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $courseId,
                        $courseVersion,
                        $courseName,
                        $unitId,
                        $unitDesc,
                        $turnId,
                        $turnDesc,
                        $prevCourseId,
                        $prevCourseVersion,
                        $prevCourseName,
                        $prevUnitId,
                        $prevUnitDesc,
                        $prevTurnId,
                        $prevTurnDesc,
                        $personId,
                        $personName ) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $unitId . '-' . $turnId;
                
                $return[$index]->title  = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $unitDesc . ' - ' . $turnDesc;
                $return[$index]->data[] = array($personId, $personName, $prevCourseId, $prevCourseName, $prevUnitDesc);
                $return[$index]->total++;
            }
            
            return $return;
        }
        
        return null;
    }
    
    public function getCoursesSequenceConfig($periodId, $orderByOption=1)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT DISTINCT A.courseId,
                       B.name,
                       B.enrollBookSequence
                  FROM acdEnrollBookData A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
                 WHERE A.periodId = ? ';
                 
        if ($orderByOption == 1)
        {
            $sql .= ' ORDER BY B.name, A.courseId';
        }
        elseif ($orderByOption == 2)
        {
            $sql .= ' ORDER BY B.enrollBookSequence, A.courseId';
        }
                 
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        return $result;
    }
    
    public function isAlreadyGenerated($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT count(*) FROM acdEnrollBookData WHERE periodId = ?';
        
        $result = $db->query(SAGU::prepare($sql, $periodId));
        
        if ($result[0][0] > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function getEnrollBookStatePupils($periodId)
    {
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.prevCourseId,
                       A.prevCourseVersion,
                       A.prevTurnId,
                       A.prevUnitId,
                       A.personId,
                       C.name,
                       A.stateEnrollBookId,
                       A.periodId,
                       B.enrollBookSequence
                  FROM acdEnrollBookData A
            INNER JOIN acdCourse B
                    ON (A.courseId = B.courseId)
            INNER JOIN ONLY basPhysicalPersonStudent C
                    ON (C.personId = A.personId)
                 WHERE A.periodId = ?
              ORDER BY B.enrollBookSequence, A.courseId, A.stateEnrollBookId, C.name ';
              
        $args = array ( $periodId );
        $result = $db->query(SAGU::prepare($sql, $args));
        
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $courseId,
                        $courseVersion,
                        $turnId,
                        $unitId,
                        $prevCourseId,
                        $prevCourseVersion,
                        $prevTurnId,
                        $prevUnitId,
                        $personId,
                        $personName,
                        $stateEnrollBookId,
                        $periodId,
                        $enrollBookSequence ) = $res;
                        
                $sql        = 'SELECT name FROM acdCourse WHERE courseId = ?';
                $courseName = $db->query(SAGU::prepare($sql, $courseId));
                $courseName = $courseName[0][0];
                
                $sql      = 'SELECT description FROM basTurn WHERE turnId = ?';
                $turnDesc = $db->query(SAGU::prepare($sql, $turnId));
                $turnDesc = $turnDesc[0][0];
                
                $sql      = 'SELECT description FROM basUnit WHERE unitId = ?';
                $unitDesc = $db->query(SAGU::prepare($sql, $unitId)); 
                $unitDesc = $unitDesc[0][0];
                
                if ( ( ($prevCourseId == $courseId) || (strlen((string)$prevCourseId) == 0) ) &&
                     ( ($prevCourseVersion == $courseVersion) || (strlen((string)$prevCourseVersion)) == 0 ) &&
                     ( ($prevTurnId == $turnId) || (strlen((string)$prevTurnId) == 0) ) &&
                     ( ($prevUnitId == $unitId) || (strlen((string)$prevUnitId) == 0) ) )
                {
                    $prevCourseId = $prevCourseVersion = $prevUnitId = $prevTurnId = '';
                    unset($prevCourseData);
                }
                else
                {
                    $prevCourseData = $prevCourseId . '(' . $prevCourseVersion . ')'; 
                }
                
                /*$sql        = 'SELECT name FROM acdPerson WHERE personId = ?';
                $personName = $db->query(SAGU::prepare($sql, $personId));
                $personName = $personName[0][0];*/
                
                $sql                 = 'SELECT description FROM acdStateEnrollBook WHERE stateEnrollBookId = ?';
                $stateEnrollBookDesc = $db->query(SAGU::prepare($sql, $stateEnrollBookId));
                $stateEnrollBookDesc = $stateEnrollBookDesc[0][0];
                
                $index = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                
                $title      = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $turnDesc . ' - ' . $unitDesc;
                $personData = array($personId, $personName, $prevCourseData, $prevTurnId, $prevUnitId);
                
                $return[$index]->title = $title;
                $return[$index]->states[$stateEnrollBookId]->title    = $stateEnrollBookDesc;
                $return[$index]->states[$stateEnrollBookId]->pupils[] = $personData;
                
                /*if (strlen((string)$prevCourseId) > 0)
                {
                    $index      = $prevCourseId . '-' . $prevCourseVersion . '-' . $prevTurnId . '-' . $prevUnitId;
                    $personData = array($personId, $personName, $courseId . '(' . $courseVersion . ')', $turnId, $unitId);
                    
                    if ($stateEnrollBookId == STATE_ENROLL_BOOK_INTERNAL_TRANSFER_TO_ID)
                    {
                        $sql = 'SELECT description FROM acdStateEnrollBook WHERE stateEnrollBookId = ?';
                        $stateEnrollBookTitle = $db->query(SAGU::prepare($sql, STATE_ENROLL_BOOK_INTERNAL_TRANSFER_FROM_ID));
                        $stateEnrollBookTitle = $stateEnrollBookTitle[0][0];
                        $return[$index]->states[STATE_ENROLL_BOOK_INTERNAL_TRANSFER_FROM_ID]->title    = $stateEnrollBookTitle;
                        $return[$index]->states[STATE_ENROLL_BOOK_INTERNAL_TRANSFER_FROM_ID]->pupils[] = $personData;
                    }
                }*/
            }
        }
        return $return;
    }
}
?>
