<?php
/**
 *
 * This file handles the connection and actions for acdCurriculum table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCurriculum table
 **/
class BusinessAcademicBusCurriculum extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculum()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the acdCourse table
     * @param $courseVersion (integer): Primary key of the acdCourse table
     * @param $curricularComponentId (integer): Primary key of the acdCurricularComponent table
     * @param $curricularComponentVersion (integer): Primary key of the acdCurricularComponent table
     *
     * @return (object): Return true or false
     *
     **/
    public function isFromCurriculum($courseId, $courseVersion, $turnId, $unitId, $curricularComponentId, $curricularComponentVersion)
    {
        $sql = 'SELECT count(*)
                  FROM acdCurriculum A
                 WHERE A.courseId                   = ?
                   AND A.courseVersion              = ?
                   AND A.turnId                     = ?
                   AND A.unitId                     = ?
                   AND A.curricularComponentId      = ?
                   AND A.curricularComponentVersion = ?
                   AND A.endDate IS NULL ';

        $args   = array (
                          $courseId,
                          $courseVersion,
                          $turnId,
                          $unitId,
                          $curricularComponentId,
                          $curricularComponentVersion
                        );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        if ( (int)$result[0][0] > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $curriculumId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCurriculum($curriculumId)
    {
        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       A.unitId,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       A.isShowDocumentEndCourse,
                       A.isCurriculum,
                       A.curricularComponentGroupDocumentEndCourseId,
                       D.name AS curricularComponentGroupDocumentEndCourseName,
                       A.curricularComponentGroupElectiveId,
                       E.name AS curricularComponentGroupElectiveName,
                       A.curriculumTypeId,
                       F.description AS curricularComponentTypeDescription,
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.curricularComponentTypeId,
                       A.masterCurriculumId
                  FROM acdCurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
             LEFT JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
                 WHERE A.curriculumId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $curriculumId));
        //$db->close();

        $curriculum = new AcdCurriculum();

        list ( $curriculum->curriculumId,
               $curriculum->courseId,
               $curriculum->courseVersion,
               $curriculum->courseName,
               $curriculum->turnId,
               $curriculum->unitId,
               $curriculum->curricularComponentId,
               $curriculum->curricularComponentVersion,
               $curriculum->curricularComponentName,
               $curriculum->semester,
               $curriculum->isShowDocumentEndCourse,
               $curriculum->isCurriculum,
               $curriculum->curricularComponentGroupDocumentEndCourseId,
               $curriculum->curricularComponentGroupDocumentEndCourseName,
               $curriculum->curricularComponentGroupElectiveId,
               $curriculum->curricularComponentGroupElectiveName,
               $curriculum->curriculumTypeId,
               $curriculum->curriculumTypeDescription,
               $curriculum->endDate,
               $curriculum->userName,
               $curriculum->dateTime,
               $curriculum->ipAddress,
               $curriculum->curricularComponentTypeId,
               $curriculum->masterCurriculumId ) = $result[0];

        return $curriculum; 
    }

    /**
     * Return a specific record from the database
     *
     * @param $curriculumId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getComplementaryActivityData($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       A.unitId,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       E.name AS curricularComponentName
                  FROM acdCurriculum A
            INNER JOIN acdCourse B
                    ON ( B.courseId = A.courseId )
            INNER JOIN acdCourseVersion C
                    ON (     C.courseId      = A.courseId 
                         AND C.courseVersion = A.courseVersion )
            INNER JOIN acdCourseOccurrence D
                    ON (     D.courseId      = A.courseId 
                         AND D.courseVersion = A.courseVersion 
                         AND D.turnId        = A.turnId
                         AND D.unitId        = A.unitId )
            INNER JOIN acdCurricularComponent E
                    ON (     E.curricularComponentId      = A.curricularComponentId
                         AND E.curricularComponentVersion = A.curricularComponentVersion )
            INNER JOIN acdCurriculumType F
                    ON ( F.curriculumTypeId = A.curriculumTypeId )
                 WHERE A.courseId         = ?
                   AND A.courseVersion    = ?
                   AND A.unitId           = ?
                   AND A.turnId           = ?
                   AND F.curriculumtypeid = ?
              ORDER BY 1';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, array($courseId, $courseVersion, $unitId, $turnId, ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY)));
        //$db->close();

        $curriculum = new AcdCurriculum();

        list ( $curriculum->curriculumId,
               $curriculum->courseId,
               $curriculum->courseVersion,
               $curriculum->courseName,
               $curriculum->turnId,
               $curriculum->unitId,
               $curriculum->curricularComponentId,
               $curriculum->curricularComponentVersion,
               $curriculum->curricularComponentName ) = $result[0];

        return $curriculum; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculum($filters)
    {
        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       G.Description,
                       A.unitId,
                       H.Description,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       A.isShowDocumentEndCourse,
                       A.isCurriculum,
                       A.curricularComponentGroupDocumentEndCourseId,
                       D.name AS curricularComponentGroupDocumentEndCourseName,
                       A.curricularComponentGroupElectiveId,
                       E.name AS curricularComponentGroupElectiveName,
                       A.curriculumTypeId,
                       F.description AS curricularComponentTypeDescription,
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.curricularComponentTypeId,
                       C.academicCredits,
                       C.academicNumberHours,
                       A.masterCurriculumId
                  FROM acdCurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
             LEFT JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
            INNER JOIN basTurn G
                    ON (G.turnId = A.turnId)
            INNER JOIN basUnit H
                    ON (H.unitId = A.unitId)';

        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->courseUnitId;
        }

        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }

        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->courseTurnId;
        }

        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }

        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen((string)$filters->semester) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $filters->semester;
        }
        if ( strlen((string)$filters->isShowDocumentEndCourse) > 0 )
        {
            $where .= ' AND A.isShowDocumentEndCourse = ?';
            $args[] = $filters->isShowDocumentEndCourse;
        }
        if ( strlen((string)$filters->isCurriculum) > 0 )
        {
            $where .= ' AND A.isCurriculum = ?';
            $args[] = $filters->isCurriculum;
        }
        if ( strlen((string)$filters->curricularComponentGroupDocumentEndCourseId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupDocumentEndCourseId = ?';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseId;
        }
        if ( strlen((string)$filters->curricularComponentGroupDocumentEndCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseName . '%';
        }
        if ( strlen((string)$filters->curricularComponentGroupElectiveId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupElectiveId = ?';
            $args[] = $filters->curricularComponentGroupElectiveId;
        }
        if ( strlen((string)$filters->curricularComponentGroupElectiveName) > 0 )
        {
            $where .= ' AND TO_ASCII(E.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentGroupElectiveName . '%';
        }
        if ( strlen((string)$filters->curriculumTypeId) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?';
            $args[] = $filters->curriculumTypeId;
        }
        if ( strlen((string)$filters->curricularComponentTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(F.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentTypeDescription . '%';
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->masterCurriculumId) > 0 )
        {
            $where .= ' AND A.masterCurriculumId = ?::integer ';
            $args[] = $filters->masterCurriculumId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Return a set of records from the database based on the supplied filters and arguments
     *
     * @param $filters (object): Composes the WHERE clause
     * @param $optionalsOnly (boolean): Wether the query must filter the results to bring only
     * the optional part of the curriculum. If left blank (NULL), the entire curriculum is returned
     * @param $orderBy (string): May be 'semester' (indicating the result should be ordered by semester
     * and then by curricular componente name) or anything eles (indicating the result should be ordered
     * by curricular component name and then by semester).
     *
     * @return (array): An array containing the query results.
     *
     **/
    public function searchCurriculumFormSearch($filters, $optionalsOnly = NULL, $orderBy)
    {
        $sql = 'SELECT A.curriculumId,
                       A.courseId || \' / \' || A.courseVersion,
                       B.shortName AS courseName,
                       A.curricularComponentId || \' / \' ||A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       C.academicCredits,
                       C.academicNumberHours,
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       H.Description as unitDescriptions,
                       G.Description as turnDescriptions,
                       A.curriculumTypeId || \' / \' || F.description AS curricularComponentTypeDescription
                  FROM acdCurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
             LEFT JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
            INNER JOIN basTurn G
                    ON (G.turnId = A.turnId)
            INNER JOIN basUnit H
                    ON (H.unitId = A.unitId)';

        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen((string)$filters->semester) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $filters->semester;
        }
        if ( strlen((string)$filters->isShowDocumentEndCourse) > 0 )
        {
            $where .= ' AND A.isShowDocumentEndCourse = ?';
            $args[] = $filters->isShowDocumentEndCourse;
        }
        if ( strlen((string)$filters->isCurriculum) > 0 )
        {
            $where .= ' AND A.isCurriculum = ?';
            $args[] = $filters->isCurriculum;
        }
        if ( strlen((string)$filters->curricularComponentGroupDocumentEndCourseId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupDocumentEndCourseId = ?';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseId;
        }
        if ( strlen((string)$filters->curricularComponentGroupDocumentEndCourseName) > 0 )
        {
            $where .= ' AND TO_ASCII(D.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseName . '%';
        }
        if ( strlen((string)$filters->curricularComponentGroupElectiveId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupElectiveId = ?';
            $args[] = $filters->curricularComponentGroupElectiveId;
        }
        if ( strlen((string)$filters->curricularComponentGroupElectiveName) > 0 )
        {
            $where .= ' AND TO_ASCII(E.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentGroupElectiveName . '%';
        }
        if ( strlen((string)$filters->curriculumTypeId) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?';
            $args[] = $filters->curriculumTypeId;
        }
        if ( strlen((string)$filters->curricularComponentTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(F.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentTypeDescription . '%';
        }

        /*
         * If informed, the $optionalsOnly parameter filters the result
         */
        if ( isset($optionalsOnly) )
        {
            if ( $optionalsOnly )
            {
                $where .= ' AND A.curriculumTypeId NOT IN (' . CURRICULUM_TYPE_NON_OPTIONAL_FOR_CURRICULUM_LIST . ')';
            }
            else
            {
                $where .= ' AND A.curriculumTypeId IN (' . CURRICULUM_TYPE_NON_OPTIONAL_FOR_CURRICULUM_LIST . ')';
            }
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) .
                    ' ORDER BY ';
            if ( $orderBy == 'semester' )
            {
                $sql .= 'A.semester, C.name';
            }
            else
            {
                $sql .= 'C.name, A.semester';
            }

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculum($data)
    {
        $sql = 'INSERT INTO acdCurriculum
                            (courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             curricularComponentId,
                             curricularComponentVersion,
                             curricularComponentTypeId,
                             semester,
                             isShowDocumentEndCourse,
                             isCurriculum,
                             curricularComponentGroupDocumentEndCourseId,
                             curricularComponentGroupElectiveId,
                             curriculumTypeId,
                             endDate,
                             masterCurriculumId )
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             ?::integer )';

        $args = array( 
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       $data->curricularComponentTypeId,
                       $data->semester,
                       $data->isShowDocumentEndCourse,
                       $data->isCurriculum,
                       $data->curricularComponentGroupDocumentEndCourseId,
                       $data->curricularComponentGroupElectiveId,
                       $data->curriculumTypeId,
                       $data->endDate,
                       $data->masterCurriculumId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculum($data)
    {
        $sql = 'UPDATE acdCurriculum
                   SET courseId                                    = ?,
                       courseVersion                               = ?,
                       turnId                                      = ?,
                       unitId                                      = ?,
                       curricularComponentId                       = ?,
                       curricularComponentVersion                  = ?,
                       curricularComponentTypeId                   = ?,
                       semester                                    = ?,
                       isShowDocumentEndCourse                     = ?,
                       isCurriculum                                = ?,
                       curricularComponentGroupDocumentEndCourseId = ?,
                       curricularComponentGroupElectiveId          = ?,
                       curriculumTypeId                            = ?,
                       endDate                                     = TO_DATE(?,\'' . MASK_DATE . '\'),
                       masterCurriculumId                          = ?::integer
                 WHERE curriculumId = ?';

        $args = array( 
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       $data->curricularComponentTypeId,
                       $data->semester,
                       $data->isShowDocumentEndCourse,
                       $data->isCurriculum,
                       $data->curricularComponentGroupDocumentEndCourseId,
                       $data->curricularComponentGroupElectiveId,
                       $data->curriculumTypeId,
                       $data->endDate,
                       $data->masterCurriculumId,
                       $data->curriculumId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $curriculumId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculum($curriculumId)
    {
        $sql = 'DELETE FROM acdCurriculum
                      WHERE curriculumId = ?';

        $pk = array(
                     $curriculumId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    public function getSupervisedTrainingCurriculumIds($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = 'SELECT A.curriculumId
                  FROM acdCurriculum A
                 WHERE A.courseId                  = ?
                   AND A.courseVersion             = ?
                   AND A.unitId                    = ?
                   AND A.turnId                    = ?
                   AND A.curricularComponentTypeId = ?
              ORDER BY 1';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, array($courseId, $courseVersion, $unitId, $turnId, CURRICULAR_COMPONENT_TYPE_TRAINING)));

        if ( count($result)>0 )
        {
            foreach ( $result as $row )
            {
                $res[] = $row[0];
            }
            return $res;
        }
        else
        {
            return array();
        }
    }

    public function getSupervisedTrainingEnroll($contractId, $curriculumId, $periodId)
    {
        $sql = 'SELECT A.enrollId
                  FROM acdEnroll A
            INNER JOIN acdGroup B
                    ON ( A.groupId = B.groupId )
            INNER JOIN acdLearningPeriod C
                    ON ( C.learningPeriodId = B.learningPeriodId )
                 WHERE A.contractId   = ?
                   AND B.curriculumId = ?
                   AND C.periodId     = ?
              ORDER BY 1';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, array($contractId, $curriculumId, $periodId)));

        if ( $result[0][0] > 0 )
        {
            return $result[0][0];
        }
        else
        {
            return null;
        }
    }

}

?>
