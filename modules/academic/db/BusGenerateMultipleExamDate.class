<?php
/**
 *
 * This file handles the connection and actions for basCenter table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusGenerateMultipleExamDate extends Business
{
    public $db;
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    function __construct()
    {
        $this->db = $this->getDatabase();
    }

    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourses($filters)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.courseId,
                       A.courseVersion,
                       E.name,
                       C.description,
                       D.description,
                       A.learningPeriodId
                  FROM acdLearningPeriod A 
            INNER JOIN acdCourseOccurrence B
                    ON (A.courseId      = B.courseId AND
                        A.courseVersion = B.courseVersion AND
                        A.turnId        = B.turnId AND
                        A.unitId        = B.unitId)
             INNER JOIN basTurn C
                     ON (C.turnId = A.turnId)
             INNER JOIN basUnit D
                     ON (D.unitId = A.unitId)
             INNER JOIN acdCourse E
                     ON (E.courseId = A.courseId)';

        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND E.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->status) > 0 )
        {
            $where .= ' AND B.status = ? ';
            $args[] = $filters->status;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND A.periodId = ? ';
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY E.name';

            $db = $this->db;

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }


    public function getLearningPeriods($filters)
    {
        $db = $this->db;

        $sql = 'SELECT A.learningPeriodId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName,
                       A.unitId,
                       C.description,
                       A.turnId,
                       D.description
                  FROM acdLearningPeriod A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN basUnit C
                    ON (C.unitId = A.unitId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
            INNER JOIN acdCourseOccurrence E
                    ON (E.courseId = A.courseId AND
                        E.courseVersion = A.courseVersion AND
                        E.unitId = A.unitId AND
                        E.turnId = A.turnId) ';

        if (strlen((string)$filters->formationLevelId) > 0)
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }
        if (strlen((string)$filters->periodId) > 0)
        {
            $where .= ' AND A.periodId = ?';
            $args[] = $filters->periodId;
        }
        if (strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND C.unitId = ?';
            $args[] = $filters->unitId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $where .= ' AND E.status = \'' . DB_TRUE . '\' ';

            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY B.shortName,
                           A.courseId,
                           A.unitId ';

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function updateSchedules($data)
    {
        $db = $this->db;

        $sql = 'UPDATE acdSchedule 
                   SET examDate = TO_DATE(\'' . $data->examDate . '\',\'' . MASK_DATE . '\')
                 WHERE scheduleId IN (SELECT A.scheduleId
                                        FROM acdSchedule A
                                  INNER JOIN acdScheduleLearningPeriod B
                                          ON (B.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
                                       WHERE B.learningPeriodId = \'' . $data->learningPeriodId . '\'
                                         AND A.weekDayId = \'' . $data->weekDayId . '\'
                                         AND A.examDate is null)';

        $result = $db->execute($sql);

        return $result;
    }

    public function alreadyExists($learningPeriodId, $weekDayId=null)
    {
        $db = $this->db;

        $sql = 'SELECT learningPeriodId
                  FROM acdExamDate
                 WHERE learningPeriodId = ? ';

        $args[] = $learningPeriodId;

        if ( strlen((string)$weekDayId) > 0 )
        {
            $sql .= ' AND weekDayId = ?';
            $args[] = $weekDayId; 
        }

        $result = $db->query(SAGU::prepare($sql, $args));

        if ( is_array($result) && sizeof($result) > 0 )
        {
            return true;
        }
        return false;
    }

    public function beginTransaction()
    {
        $db = $this->db;

        return $db->execute('BEGIN');
    }

    public function commit()
    {
        $db = $this->db;

        return $db->execute('COMMIT');
    }
}
?>
