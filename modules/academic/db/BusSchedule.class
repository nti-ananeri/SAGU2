<?php
/**
 *
 * This file handles the connection and actions for acdSchedule table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdSchedule table
 **/
class BusinessAcademicBusSchedule extends Business
{
    public $db;
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/

    function __construct()
    {
        $this->db = $this->getDatabase();
    }

    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSchedule()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $scheduleId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSchedule($scheduleId)
    {
        $sql = 'SELECT A.scheduleId,
                       A.groupId,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.operationId,
                       J.description AS operationDescription,
                       A.leaderId,
                       G.name AS leaderName,
                       A.subleaderId,
                       H.name AS subLeaderName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       TO_CHAR(A.examDate, \'' . MASK_DATE . '\'),
                       I.description,
                       K.description as turnDescription,
                       I.beginHour,
                       I.endHour,
                       M.shortName as shortName,
                       B.learningPeriodId
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
            INNER JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )
             LEFT JOIN finOperation J
                    ON (A.operationId = J.operationId)
            INNER JOIN basTurn K
                    ON (K.turnId = I.turnId)
            INNER JOIN acdCurriculum L
                    ON (L.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent M
                    ON (M.curricularComponentId = L.curricularComponentId AND
                        M.curricularComponentVersion = L.curricularComponentVersion)
                 WHERE A.scheduleId = ?';

        $pk = array(
                     $scheduleId
                   );

        //$db     = $this->getDatabase();
        $db = $this->db;

        $result = $db->query(SAGU::prepare($sql, $scheduleId));
        //$db->close();

        $schedule = new AcdSchedule();

        list (
               $schedule->scheduleId,
               $schedule->groupId,
               $schedule->subGroup,
               $schedule->unitId,
               $schedule->unitDescription,
//                $schedule->turnId,
//                $schedule->turnDescription,
               $schedule->weekDayId,
               $schedule->weekDayDescription,
               $schedule->scheduleLearningPeriodId,
               $schedule->scheduleLearningPeriodDescription,
               $schedule->physicalResourceId,
               $schedule->physicalResourceVersion,
               $schedule->physicalResourceDescription,
               $schedule->numCredits,
               $schedule->discounting,
//                $schedule->beginDate,
//                $schedule->endDate,
//                $schedule->numberHoursLessons,
               $schedule->weight,
               $schedule->operationId,
               $schedule->operationDescription,
               $schedule->leaderId,
               $schedule->leaderName,
               $schedule->subLeaderId,
               $schedule->subLeaderName,
               $schedule->userName,
               $schedule->dateTime,
               $schedule->ipAddress,
               $schedule->examDate,
               $schedule->description,
               $schedule->turnDescription,
               $schedule->beginHour,
               $schedule->endHour,
               $schedule->groupName,
               $schedule->learningPeriodId
             ) = $result[0];

        return $schedule; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSchedule($filters)
    {
        $sql = 'SELECT 
                       DISTINCT
                       A.scheduleId,
                       A.groupId,
                       M.name AS curricularComponent,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       I.turnId,
                       N.description,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       I.beginHour,
                       I.endHour,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       A.operationId,
                       TO_CHAR(COALESCE((SELECT beginDate FROM acdScheduleProfessor WHERE scheduleId = A.scheduleId ORDER BY beginDate LIMIT 1 ), I.beginDate), \'' . MASK_DATE . '\'),
                       TO_CHAR(COALESCE((SELECT endDate FROM acdScheduleProfessor WHERE scheduleId = A.scheduleId ORDER BY endDate DESC LIMIT 1), I.endDate), \'' . MASK_DATE . '\')
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )
            INNER JOIN acdLearningPeriod J
                    ON (B.learningPeriodId = J.learningPeriodId)
            INNER JOIN acdPeriod K
                    ON (J.periodId = K.periodId)
            INNER JOIN acdCurriculum L
                    ON (L.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent M
                    ON (M.curricularComponentId = L.curricularComponentId AND
                        M.curricularComponentVersion = L.curricularComponentVersion)
            INNER JOIN basTurn N
                    ON (N.turnId = I.turnId)';

        if ( strlen((string)$filters->scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $filters->scheduleId;
        }
        if ( strlen((string)$filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId IN(' . $filters->groupId . ')';
        }
        if ( strlen((string)$filters->subGroup) > 0 )
        {
            $where .= ' AND A.subGroup ILIKE ?';
            $args[] = $filters->subGroup . '%';
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->unitDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->unitDescription . '%';
        }
        if ( strlen((string)$filters->weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId ILIKE ?';
            $args[] = $filters->weekDayId;
        }
        if ( strlen((string)$filters->weekDayDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->weekDayDescription . '%';
        }
        if ( strlen((string)$filters->scheduleLearningPeriodId) > 0 )
        {
            $where .= ' AND I.scheduleLearningPeriodId = ?';
            $args[] = $filters->scheduleLearningPeriodId;
        }
        if ( strlen((string)$filters->scheduleLearningPeriodDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(I.description) = TO_ASCII(?)';
            $args[] = $filters->scheduleLearningPeriodDescription . '%';
        }
        if ( strlen((string)$filters->physicalResourceId) > 0 )
        {
            $where .= ' AND A.physicalResourceId = ?';
            $args[] = $filters->physicalResourceId;
        }
        if ( strlen((string)$filters->physicalResourceVersion) > 0 )
        {
            $where .= ' AND A.physicalResourceVersion = ?';
            $args[] = $filters->physicalResourceVersion . '%';
        }
        if ( strlen((string)$filters->physicalResourceDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(F.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->physicalResourceDescription;
        }
        if ( strlen((string)$filters->numCredits) > 0 )
        {
            $where .= ' AND A.numCredits ILIKE ?';
            $args[] = $filters->numCredits;
        }
        if ( strlen((string)$filters->discounting) > 0 )
        {
            $where .= ' AND A.discounting ILIKE ?';
            $args[] = $filters->discounting;
        }
        if ( strlen((string)$filters->numberHoursLessons) > 0 )
        {
            $where .= ' AND A.numberHoursLessons = ?';
            $args[] = $filters->numberHoursLessons;
        }
        if ( strlen((string)$filters->weight) > 0 )
        {
            $where .= ' AND A.weight = ?';
            $args[] = $filters->weight;
        }
        if ( strlen((string)$filters->leaderId) > 0 )
        {
            $where .= ' AND A.leaderId = ?';
            $args[] = $filters->leaderId;
        }
        if ( strlen((string)$filters->leaderName) > 0 )
        {
            $where .= ' AND TO_ASCII(G.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->leaderName . '%';
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND J.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND K.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND J.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND J.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND J.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND J.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND A.scheduleId IN ( SELECT scheduleId
                                                FROM acdScheduleProfessor
                                               WHERE professorId = ? )';
            $args[] = $filters->professorId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.scheduleId';

            $db = $this->db;
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSchedule($data)
    {
        $db = $this->db;

        $sql = 'SELECT nextVal(\'seq_ScheduleId\')';

        $query = $db->query($sql);

        $scheduleId = $query[0][0];

        $sql = 'INSERT INTO acdSchedule
                            (scheduleId,
                             groupId,
                             subGroup,
                             unitId,
                             weekDayId,
                             scheduleLearningPeriodId,
                             physicalResourceId,
                             physicalResourceVersion,
                             numCredits,
                             discounting,
                             weight,
                             operationId,
                             leaderId,
                             subLeaderId,
                             examDate)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \'' . MASK_DATE . '\'))';

        //se a disciplina tiver algum desconto(número de créditos desconto)
        if ( strlen((string)$data->numCredits) > 0 )
        {
            //se nao tiver o percentual de desconto definido, o programa assumirá 0
            if ( strlen((string)$data->discounting) == 0 )
            {
                $data->discounting = 0;
            }

            //se nao tiver sido definida uma operação, o programa pesquisará uma operação padrão de descontos do sistema
            if ( strlen((string)$data->operationId) == 0 )
            {
                $db  = $this->db;
                $res = $db->query('SELECT discountOperation FROM finDefaultOperations');
                $data->operationId = $res[0][0];
            }
        }

        $args = array( 
                       $scheduleId,
                       $data->groupId,
                       $data->subGroup,
                       $data->unitId,
                       $data->weekDayId,
                       $data->scheduleLearningPeriodId,
                       $data->physicalResourceId,
                       $data->physicalResourceVersion,
                       $data->numCredits,
                       $data->discounting,
                       $data->weight,
                       $data->operationId,
                       $data->leaderId,
                       $data->subLeaderId,
                       $data->examDate
                     );

        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $scheduleId;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSchedule($data)
    {
        $sql = 'UPDATE acdSchedule
                   SET groupId                 = ?,
                       subGroup                = ?,
                       unitId                  = ?,
                       scheduleLearningPeriodId= ?,
                       weekDayId               = ?,
                       physicalResourceId      = ?,
                       physicalResourceVersion = ?,
                       numCredits              = ?,
                       discounting             = ?,
                       weight                  = ?,
                       operationId             = ?,
                       leaderId                = ?,
                       subLeaderId             = ?,
                       examDate                = TO_DATE(?, \'' . MASK_DATE . '\')
                 WHERE scheduleId = ?';

        //se a disciplina tiver algum desconto(número de créditos desconto)
        if ( strlen((string)$data->numCredits) > 0 )
        {
            //se nao tiver o percentual de desconto definido, o programa assumirá 0
            if ( strlen((string)$data->discounting) == 0 )
            {
                $data->discounting = 0;
            }

            //se nao tiver sido definida uma operação, o programa pesquisará uma operação padrão de descontos do sistema
            if ( strlen((string)$data->operationId) == 0 )
            {
                $db  = $this->db; 
                $res = $db->query('SELECT discountOperation FROM finDefaultOperations');
                $data->operationId = $res[0][0];
            }
        }

        $args = array( 
                       $data->groupId,
                       $data->subGroup,
                       $data->unitId,
                       $data->scheduleLearningPeriodId,
                       $data->weekDayId,
                       $data->physicalResourceId,
                       $data->physicalResourceVersion,
                       $data->numCredits,
                       $data->discounting,
                       $data->weight,
                       $data->operationId,
                       $data->leaderId,
                       $data->subLeaderId,
                       $data->examDate,
                       $data->scheduleId
                     );

        $db = $this->db;
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);

        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $scheduleId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSchedule($scheduleId)
    {
        $sql = 'DELETE FROM acdSchedule
                      WHERE scheduleId = ?';

        $pk = array(
                     $scheduleId
                   );

        $db = $this->db;
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    public function scheduleAlreadyExistsForGroup($groupId, $scheduleLearningPeriodId, $weekDayId, $scheduleId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $bus = $MIOLO->getBusiness($module, 'BusScheduleLearningPeriod');
        $scheduleLearningPeriod = $bus->getScheduleLearningPeriod($scheduleLearningPeriodId);

        $sql1 = 'SELECT B.turnId,
                        B.beginDate,
                        B.beginHour,
                        B.endDate,
                        B.endHour,
                        A.weekDayId
                   FROM acdSchedule A
             INNER JOIN acdScheduleLearningPeriod B
                     ON (A.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
                  WHERE A.groupId                  = '.$groupId.' ';

        $result1 = $this->db->query($sql1);

        $sql2 = 'SELECT A.turnId,
                        A.beginDate,
                        A.beginHour,
                        A.endDate,
                        A.endHour
                   FROM acdScheduleLearningPeriod A
                  WHERE A.scheduleLearningPeriodId = '.$scheduleLearningPeriodId.'';

        $result2 = $this->db->query($sql2);

        list ( $turnIdNew,
               $beginDateNew,
               $beginHourNew,
               $endDateNew,
               $endHourNew ) = $result2[0];

        //Verifica se foi informado um dia, daí se verificará o choque, senão, pode inserir sem verificar
        if ( strlen((string)$weekDayId) > 0 )
        {
            if ( is_array($result1) && (count($result1) > 0) )
            {
                //Já existem horários cadastrados para esta disciplina oferecida, ver se 
                //horários não entram em choque
                foreach ( $result1 as $key1 => $value1 )
                {
                    list ( $turnId,
                           $beginDate,
                           $beginHour,
                           $endDate,
                           $endHour,
                           $weekDayIdN ) = $value1;

                    //Se o dia for o mesmo, verifica se irá dar choque
                    if ( $weekDayIdN == $weekDayId )
                    {
                        $verifyBeginHourNewBeginHour = $this->verifyMor($beginHourNew, $beginHour);
                        $verifyEndHourBeginHourNew   = $this->verifyMor($endHour, $beginHourNew);
                        $verifyBeginHourEndHourNew   = $this->verifyMor($beginHour, $endHourNew);
                        $verifyEndHourNewEndHour     = $this->verifyMor($endHourNew, $endHour);

                        $verifyBeginDateNewBeginDate = $this->verifyMor($beginDateNew, $beginDate, true);
                        $verifyEndDateBeginDateNew   = $this->verifyMor($endDate, $beginDateNew, true);
                        $verifyBeginDateEndDateNew   = $this->verifyMor($beginDate, $endDateNew, true);
                        $verifyEndDateNewEndDate     = $this->verifyMor($endDateNew, $endDate, true);

                        //Checagem dos horários - 'true' se tem choque de horário
                        $checkSchedule = $this->checkDatas( $verifyBeginHourNewBeginHour, 
                                                            $verifyEndHourBeginHourNew,
                                                            $verifyBeginHourEndHourNew,
                                                            $verifyEndHourNewEndHour );
                        if ( !$checkSchedule )
                        {
                            //Não tem choque de horário, pode ser inserido
                        }
                        else
                        {
                            //Se tem choque de horários, temos que ver se as turmas são para o mesmo intervalo de datas
                            unset($checkSchedule);
                            //Checagem das datas - 'true' se tem choque de datas
                            $checkSchedule = $this->checkDatas( $verifyBeginDateNewBeginDate, 
                                                                $verifyEndDateBeginDateNew,
                                                                $verifyBeginDateEndDateNew,
                                                                $verifyEndDateNewEndDate );

                            if ( $checkSchedule == true)
                            {
                                //Tem choque de data
                                break;
                            }
                        }
                    }
                    else
                    {
                        $checkSchedule = false;
                    }
                }
            }
            else
            {
                //Não existem horários para esta disciplina oferecida, pode inserir
                return false;
            }

            return $checkSchedule;
        }
        else
        {
            return false;
        }
    }

    public function verifyMor($value1, $value2, $isDate = false)
    {
        $sql    = 'SELECT CASE WHEN \''.$value1.'\' > \''.$value2.'\' 
                               THEN true
                               ELSE false
                          END ';

        if ( $isDate )
        {
            unset($sql);
            $sql = 'SELECT CASE WHEN TO_DATE(\''.$value1.'\', \''.MASK_DATE.'\') > TO_DATE(\''.$value2.'\', \''.MASK_DATE.'\') 
                                THEN true
                                ELSE false
                            END ';
        }


        $result = $this->db->query($sql);

        return $result[0][0];
    }

    public function checkDatas($var1, $var2, $var3, $var4)
    {
        // beginNova > beginVelha   => $var1
        // endVelha  > beginNova    => $var2
        // beginVelha > endNova     => $var3
        // endNova > endVelha       => $var4

        //Tabela verdade das comparações acima, cruzadas entre elas
        // e abaixo testes relativos a estes resultados
        //beginNova > beginVelha    endVelha > beginNova    beginVelha > endNova    endNova > endVelha  RETURN
        //V	V	V	F	T
        //V	V	F	F	T
        //V	V		V	T
        //V	V		V	T
        //V	F	V		IMPOSSIVEL
        //V	F	F	F	IMPOSSIVEL
        //F	V	F		IMPOSSIVEL
        //F		V		F
        //F		V		F
        //F		V		F
        //F		V		F
        //F		F	F	T
        //F		F	F	T
        //	F		V	F
        //	F		V	F
        //	F		V	F
        //
        // onde RETURN = T => TEM conflito horário
        //               F => NÃO conflito horário

        if ( $var1 == DB_TRUE ) // V - X - X - X - X
        {
            if ( $var2 == DB_TRUE ) // V - V - X - X - X
            {
                // V - V - V - V - T
                // V - V - V - F - T
                // V - V - F - V - T
                // V - V - F - F - T
                $resultConflict = true;
            }
            elseif ( $var2 == DB_FALSE ) // V - F - X - X - X
            {
                if ( $var3 == DB_TRUE ) // V - F - V - X - X
                {
                    // V - F - V - V - IMPOSSIVEL-ERRO - DATA/HORA IGUAL - T
                    // V - F - V - F - IMPOSSIVEL-ERRO - DATA/HORA IGUAL - T
                    $resultConflict = true;
                }
                elseif ( $var3 == DB_FALSE ) // V - F - F - X - X
                {
                    if ( $var4 == DB_TRUE ) // V - F - F - V - F
                    {
                        $resultConflict = false;
                    }
                    elseif ( $var4 == DB_FALSE ) // V - F - F - F - IMPOSSIVEL-ERRO - DATA/HORA IGUAL - T
                    {
                        $resultConflict = true;
                    }
                }
            }
        }
        elseif ( $var1 == DB_FALSE ) // F - X - X - X - X
        {
            if ( $var2 == DB_TRUE ) // F - V - X - X - X
            {
                if ( $var3 == DB_TRUE ) // F - V - V - X - X
                {
                    // F - V - V - V - F
                    // F - V - V - F - F
                    $resultConflict = false;
                    //Verificar data de inicio e fim
                }
                elseif ( $var3 == DB_FALSE ) // F - V - F - X - X
                {
                    // F - V - F - V - IMPOSSIVEL-ERRO - DATA/HORA IGUAL - T
                    // F - V - F - F - IMPOSSIVEL-ERRO - DATA/HORA IGUAL - T
                    $resultConflict = true;
                }
            }
            elseif ( $var2 == DB_FALSE ) // F - F - X - X - X
            {
                if ( $var3 == DB_TRUE ) // F - F - V - X - X
                {
                    // F - F - V - V - F
                    // F - F - V - F - F
                    $resultConflict = false;
                    //Verificar data de inicio e fim
                }
                elseif ( $var3 == DB_FALSE )// F - F - F - X - X
                {
                    if ( $var4 == DB_TRUE )// F - F - F - V - F
                    {
                        $resultConflict = false;
                        //Verificar data de inicio e fim
                    }
                    elseif ( $var4 == DB_FALSE ) // F - F - F - F - T
                    {
                        $resultConflict = true;
                    }
                }
            }
        }
        return($resultConflict);
    }

}

?>
