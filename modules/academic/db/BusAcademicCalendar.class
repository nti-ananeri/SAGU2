<?php
/**
 *
 * This file handles the connection and actions for acdAcademicCalendar table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdAcademicCalendar table
 **/
class BusinessAcademicBusAcademicCalendar extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listAcademicCalendar()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $academicCalendarId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getAcademicCalendar($academicCalendarId)
    {
        $sql = 'SELECT A.academicCalendarId,
                       A.learningPeriodId,
                       TO_CHAR(A.occurrenceDate,\'' . MASK_DATE . '\'),
                       A.weekDayId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdAcademicCalendar A
                 WHERE A.academicCalendarId = ?';

        $pk = array(
                     $academicCalendarId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $academicCalendar = new AcdAcademicCalendar();

        list ( $academicCalendar->academicCalendarId,
               $academicCalendar->learningPeriodId,
               $academicCalendar->occurrenceDate,
               $academicCalendar->weekDayId,
               $academicCalendar->userName,
               $academicCalendar->dateTime,
               $academicCalendar->ipAddress ) = $result[0];

        return $academicCalendar; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchAcademicCalendar($filters)
    {
        $sql = 'SELECT A.academicCalendarId,
                       D.shortName,
                       E.description,
                       F.periodId,
                       A.learningPeriodId,
                       TO_CHAR(A.occurrenceDate,\'' . MASK_DATE . '\'),
                       B.description,
                       G.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdAcademicCalendar A
             LEFT JOIN basWeekDay B 
                    ON (A.weekDayId = B.weekDayId)
             LEFT JOIN acdLearningPeriod F
                    ON (A.learningPeriodId = F.learningPeriodId)
             LEFT JOIN acdCourseOccurrence C
                    ON (F.courseId = C.courseId AND
                        F.courseVersion = C.courseVersion AND
                        F.turnId = C.turnId AND
                        F.unitId = C.unitId)
             LEFT JOIN acdCourse D
                    ON (C.courseId = D.courseId)
             LEFT JOIN basUnit E
                    ON (C.unitId = E.unitId)
             LEFT JOIN basTurn G
                    ON (C.turnId = G.turnId)';
        
        if ( strlen((string)$filters->academicCalendarId) > 0 )
        {
            $where .= ' AND A.academicCalendarId = ?';
            $args[] = $filters->academicCalendarId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->periodId) > 0)
        {
            $where .= ' AND F.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0)
        {
            $where .= ' AND C.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0)
        {
            $where .= ' AND C.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseName) > 0)
        {
            $where .= ' AND D.name ILIKE ?';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND C.unitId = ?';
            $args[] = $filters->unitId;
        }        
        if ( strlen((string)$filters->occurrenceDate) > 0 )
        {
            $where .= ' AND TO_CHAR(A.occurrenceDate,\'' . MASK_DATE . '\') = ?';
            $args[] = $filters->occurrenceDate;
        }
        if ( strlen((string)$filters->weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId = ?';
            $args[] = $filters->weekDayId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.occurrenceDate';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertAcademicCalendar($data)
    {
        $sql = 'INSERT INTO acdAcademicCalendar
                            (learningPeriodId,
                             occurrenceDate,
                             weekDayId)
                     VALUES (?,
                             TO_DATE(?, \'' . MASK_DATE . '\'),
                             ?)';

        $args = array( $data->learningPeriodId,
                       $data->occurrenceDate,
                       $data->weekDayId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAcademicCalendar($data)
    {
        $sql = 'UPDATE acdAcademicCalendar
                   SET learningPeriodId = ?,
                       occurrenceDate   = TO_DATE(?,\'' . MASK_DATE . '\'),
                       weekDayId        = ?
                 WHERE academicCalendarId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->occurrenceDate,
                       $data->weekDayId,
                       $data->academicCalendarId
                     );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $academicCalendarId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAcademicCalendar($academicCalendarId)
    {
        $sql = 'DELETE FROM acdAcademicCalendar
                      WHERE academicCalendarId = ?';

        $pk = array(
                     $academicCalendarId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    /**
     * Get one interval of dates
     *
     * @param $dateBegin (string): Date begin
     * @param $dateEnd (string): Date end
     *
     * @return (array): array of dates, and days
     *
     **/
    public function getIntervalDate($beginDate, $endDate)
    {
        $db     = $this->getDatabase();

        $sql1 = ' SELECT * 
                    FROM getDateInterval(\''.$beginDate.'\', 
                                         \''.$endDate.'\', 
                                         \''.MASK_DATE.'\')';
        $result1 = $db->query($sql1);

        $sql2 = 'SELECT EXTRACT(dow from TO_DATE(?, \''.MASK_DATE.'\'))';

        $weekNumberAux = 0;

        foreach ( $result1 as $key1 => $value1 )
        {

            //$result3[$key1]['date'] = $value1[0];
            $result2 = $db->query(SAGU::prepare($sql2, $value1));
            //$result3[$key1]['weekDayId'] = $result2[0][0];
            $dateArray = explode('/', $value1[0]);

            if ( $dateArray[1] != $oldMonth )
            {
                $weekNumberAux = 0;
            }

            $result3[$key1][$dateArray[2]][$dateArray[1]][$weekNumberAux]["day"] = $dateArray[0];
            $result3[$key1][$dateArray[2]][$dateArray[1]][$weekNumberAux]["dayId"] = $result2[0][0];

            if ( $result2[0][0] == '6' ) {
                $weekNumberAux++;
            }

            $oldMonth = $dateArray[1];

            //$result3[$key1]['day']   = $dateArray[0];
            //$result3[$key1]['month'] = $dateArray[1];
            //$result3[$key1]['year']  = $dateArray[2];
        }

        return $result3;
    }

    public function downloadAcademicCalendar($learningPeriodId, $learningPeriodIds)
    {
        $db   = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

        $sql = 'SELECT occurrenceDate,
                       weekdayid
                  FROM acdAcademicCalendar
                 WHERE learningPeriodId = ?';
        $res = $db->query(SAGU::prepare($sql, $learningPeriodId));

        foreach ( $learningPeriodIds as $row )
        {
            if ( count($res)>0 )
            {
                foreach ( $res as $row2 )
                {
                    $args = array ( 
                                    $row,
                                    $row2[0],
                                    $row2[1]
                                  );

                    $sql = 'SELECT count(*)
                              FROM acdAcademicCalendar
                             WHERE learningPeriodId = ?
                               AND occurrenceDate   = ?
                               AND weekDayId        = ?';

                    $res2 = $db->query(SAGU::prepare($sql, $args));

                    if ( $res2[0][0] < 1 )
                    {

                        $sql = 'INSERT INTO acdAcademicCalendar
                                          ( learningPeriodId,
                                            occurrenceDate,
                                            weekDayId)
                                   VALUES (?, ?, ?)';

                        $result = $db->execute(SAGU::prepare($sql, $args));

                        if ( !$result )
                        {
                            $db->execute('ROLLBACK');
                            return false;
                        }
                    }
                }
            }
        }
        $db->execute('COMMIT');
        return true;
    }
}

?>
