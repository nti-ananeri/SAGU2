<?php

/**
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseScheduleShockUnblock table.
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * This class was created 19/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 */

class BusinessAcademicBusCourseScheduleShockUnblock extends Business
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAcademicBusCourseScheduleShockUnblock()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }


    /**
     * Insert a new acdCourseScheduleShockUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCourseScheduleShockUnblock($data, $contractId)
    {
        /*$sql = 'SELECT A.contractId,
                       max(d.statetime)
                FROM ONLY acdContract A
                INNER JOIN acdCourseOccurrence B
                        ON (A.courseId = B.courseId
                            AND A.courseVersion = B.courseVersion
                            AND A.turnId = B.turnId
                            AND A.unitId = B.unitID)
                INNER JOIN basPhysicalPerson C
                        ON (A.personId = C.personId)
                INNER JOIN acdMovementContract D
                        ON (A.contractId = D.contractId)
                INNER JOIN acdStateContract E
                        ON (D.stateContractId = E.stateContractId)
                WHERE B.courseId = ?
                      AND B.courseVersion = ?
                      AND B.turnId = ?
                      AND B.unitId = ?
                      AND E.isCloseContract = FALSE
                GROUP BY A.contractid;';

        $args = array (
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId
                      );*/

        $db     = $this->getDatabase();
        /*$result = $db->query(SAGU::prepare($sql, $args));

        for ( $i=0; $i<count($result); $i++ )
        {*/
            $sql = 'SELECT NEXTVAL(\'seq_curricularcomponentunblockid\')';
            $ret = $this->db->query(SAGU::prepare($sql,null));
            $data->curricularComponentUnblockId = $ret[0][0];

            $sql = 'INSERT INTO acdCurricularComponentUnblock
                               (curricularComponentUnblockId,
                                learningPeriodId,
                                contractId,
                                curriculumId,
                                isScheduleShock)
                         VALUES (?,?,?,?,?)';
            $args = array(
                           $data->curricularComponentUnblockId,
                           $data->learningPeriodId,
                           $contractId, //$result[$i][0],
                           $data->curriculumId,
                           DB_TRUE
                         );

            $ret = $this->db->execute(SAGU::prepare($sql, $args)); 

        //}
        return $ret;
    }

    function selectCourseContracts($data)
    {
        $db     = $this->getDatabase();

        $sql1 = 'SELECT AA.contractId,
                        AD.name,
                        max(AB.stateTime)
                   FROM acdContract AA
             INNER JOIN acdMovementContract AB
                     ON (AA.contractId = AB.contractId)
             INNER JOIN acdStateContract AC
                     ON (AB.stateContractId = AC.stateContractId)
        INNER JOIN ONLY basPhysicalPerson AD
                     ON (AD.personId = AA.personId)
                  WHERE AA.courseId      = ?
                    AND AA.courseVersion = ?
                    AND AA.turnId        = ?
                    AND AA.unitId        = ?
               GROUP BY 1, 2
               ORDER BY AD.name ASC';

        $args1 = array (
                        $data->courseId,
                        $data->courseVersion,
                        $data->turnId,
                        $data->unitId
                      );

        $result1 = $db->query(SAGU::prepare($sql1, $args1));

        if ( count($result1) > 0 )
        {
            foreach ( $result1 as $value1 )
            {
                $sql2 = ' SELECT A.contractId,
                                 A.personId,
                                 B.name,
                                 D.isCloseContract
                            FROM acdContract A
                 INNER JOIN ONLY basPhysicalPerson B
                              ON (A.personId = B.personId)
                      INNER JOIN acdMovementContract C
                              ON (C.contractId = A.contractId AND
                                  C.stateTime  = \''.$value1[2].'\')
                      INNER JOIN acdStateContract D
                              ON (D.stateContractId = C.stateContractId)
                           WHERE A.contractId  = \''.$value1[0].'\'
                             AND A.contractId NOT IN (SELECT BA.contractId
                                                        FROM acdCurricularComponentUnblock BA
                                                  INNER JOIN acdCurriculum BB
                                                          ON (BB.curriculumId = BA.curriculumId)
                                                       WHERE BA.learningPeriodId = \''.$data->learningPeriodId.'\'
                                                         AND BA.isScheduleShock = \'t\'
                                                         AND BB.courseId      = \''.$data->courseId.'\' 
                                                         AND BB.courseVersion = \''.$data->courseVersion.'\'  
                                                         AND BB.unitId        = \''.$data->unitId.'\'
                                                         AND BB.turnId        = \''.$data->turnId.'\'
                                                         AND BB.curricularComponentId = \''.$data->curricularComponentId.'\' 
                                                         AND BB.curricularComponentVersion = \''.$data->curricularComponentVersion.'\')
                             AND A.contractId NOT IN ( SELECT CA.contractId
                                                         FROM acdEnroll CA
                                                        WHERE CA.curriculumId = \''.$data->curriculumId.'\'
                                                          AND CA.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.', '.ENROLL_STATUS_ENROLLED.'))
                        ORDER BY B.name ASC';

                $result2 = $db->query($sql2);

                //Tenho que alimentar o vetor result com if, devido a poder
                //ter mais de um estado contratual para mesma data hora. Isso
                //por causa de eventuais importaçoes de dados
                $flagIsClosedContract = DB_FALSE;

                if ( count($result2) > 0 )
                {
                    foreach ( $result2 as $value2 )
                    {
                        if ( $value2[3] == DB_TRUE )
                        {
                            $flagIsClosedContract = DB_TRUE;
                            break;
                        }
                    }
                }
                else
                {
                    //Aqui, estar´a nulo a pesquisa, ou seja, o referido contrato
                    //ja tera um registro na tabela de desbloqueios, e nao pode ir 
                    //para o result3, por isso setamos esta flag como TRUE
                    $flagIsClosedContract = DB_TRUE;
                }

                if ( $flagIsClosedContract == DB_FALSE )
                {
                    $result3[] = $value2;
                }
            }
        }

        return $result3;
    }

//     public function selectCourseContractsWithUnblock($data)
//     {
//         $db     = $this->getDatabase();
// 
//         $sql1 = 'SELECT AA.contractId,
//                         AD.name,
//                         max(AB.stateTime)
//                    FROM acdContract AA
//              INNER JOIN acdMovementContract AB
//                      ON (AA.contractId = AB.contractId)
//              INNER JOIN acdStateContract AC
//                      ON (AB.stateContractId = AC.stateContractId)
//         INNER JOIN ONLY basPhysicalPerson AD
//                      ON (AD.personId = AA.personId)
//                   WHERE AA.courseId      = ?
//                     AND AA.courseVersion = ?
//                     AND AA.turnId        = ?
//                     AND AA.unitId        = ?
//                GROUP BY 1, 2
//                ORDER BY AD.name ASC';
// 
//         $args1 = array (
//                         $data->courseId,
//                         $data->courseVersion,
//                         $data->turnId,
//                         $data->unitId
//                       );
// 
//         $result1 = $db->query(SAGU::prepare($sql1, $args1));
// 
//         if ( count($result1) > 0 )
//         {
//             foreach ( $result1 as $value1 )
//             {
//                 $sql2 = ' SELECT A.contractId,
//                                  A.personId,
//                                  B.name,
//                                  D.isCloseContract
//                             FROM acdContract A
//                  INNER JOIN ONLY basPhysicalPerson B
//                               ON (A.personId = B.personId)
//                       INNER JOIN acdMovementContract C
//                               ON (C.contractId = A.contractId AND
//                                   C.stateTime  = \''.$value1[2].'\')
//                       INNER JOIN acdStateContract D
//                               ON (D.stateContractId = C.stateContractId)
//                            WHERE A.contractId  = \''.$value1[0].'\'
//                              AND A.contractId     IN (SELECT BA.contractId
//                                                         FROM acdCurricularComponentUnblock BA
//                                                   INNER JOIN acdCurriculum BB
//                                                           ON (BB.curriculumId = BA.curriculumId)
//                                                        WHERE BA.learningPeriodId = \''.$data->learningPeriodId.'\'
//                                                          AND BA.isScheduleShock = \'t\'
//                                                          AND BB.courseId      = \''.$data->courseId.'\' 
//                                                          AND BB.courseVersion = \''.$data->courseVersion.'\'  
//                                                          AND BB.unitId        = \''.$data->unitId.'\'
//                                                          AND BB.turnId        = \''.$data->turnId.'\'
//                                                          AND BB.curricularComponentId = \''.$data->curricularComponentId.'\' 
//                                                          AND BB.curricularComponentVersion = \''.$data->curricularComponentVersion.'\')
//                         ORDER BY B.name ASC';
// 
//                 $result2 = $db->query($sql2);
// 
//                 //Tenho que alimentar o vetor result com if, devido a poder
//                 //ter mais de um estado contratual para mesma data hora. Isso
//                 //por causa de eventuais importaçoes de dados
//                 $flagIsClosedContract = DB_FALSE;
// 
//                 if ( count($result2) > 0 )
//                 {
//                     foreach ( $result2 as $value2 )
//                     {
//                         if ( $value2[3] == DB_TRUE )
//                         {
//                             $flagIsClosedContract = DB_TRUE;
//                             break;
//                         }
//                     }
//                 }
//                 else
//                 {
//                     //Aqui, estar´a nulo a pesquisa, ou seja, o referido contrato
//                     //ja tera um registro na tabela de desbloqueios, e nao pode ir 
//                     //para o result3, por isso setamos esta flag como TRUE
//                     $flagIsClosedContract = DB_TRUE;
//                 }
// 
//                 if ( $flagIsClosedContract == DB_FALSE )
//                 {
//                     $result3[] = $value2;
//                 }
//             }
//         }
// 
//         return $result3;
//     }


}

?>
