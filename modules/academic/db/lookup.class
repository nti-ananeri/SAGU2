<?php
/**
 *
 * This file manipulate the lookups for the academic module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

$constants = $business->getModuleValues('academic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

/**
 * Class to manipulate the Lookups
 **/
class BusinessAcademicLookup
{
    /**
     * Auto complete for external course
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteExternalCourse(&$context)
    {
        $sql = 'SELECT name
                  FROM acdExternalCourse
                 WHERE externalCourseId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for external course
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupExternalCourse(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $externalCourseId   = $lookup->getFilterValue('externalCourseId');
        $externalCourseName = $lookup->getFilterValue('externalCourseName');

        $lookup->addFilterField( new MTextField('externalCourseId',   $externalCourseId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('externalCourseName', $name,             _M('External course',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('externalCourseId',   _M('Code', $module), 'right', true, null, true),
           new DataGridColumn('externalCourseName', _M('External course', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT externalCourseId,
                       name as externalCourseName
                  FROM acdExternalCourse ';

        if ( strlen((string)$externalCourseId) > 0 )
        {
            $where .= ' AND externalCourseId = ? ';
            $args[] = $externalCourseId;
        }

        if ( strlen((string)$externalCourseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(name) ILIKE TO_ASCII(?) OR TO_ASCII(shortName) ILIKE TO_ASCII(?) )';
            $args[] = $externalCourseName . '%';
            $args[] = $externalCourseName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('External course search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course version type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseVersionType(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdCourseVersionType A
                 WHERE A.courseVersionTypeId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for coures version type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseVersionType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseVersionTypeId = $lookup->getFilterValue('courseVersionTypeId');
        $description         = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('courseVersionTypeId', $courseVersionTypeId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',         $locationName,        _M('Course version type',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('courseVersionTypeId', _M('Code', $module), 'right', true, null, true),
           new DataGridColumn('description',         _M('Course version type', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.courseVersionTypeId,
                       A.description
                  FROM acdCourseVersionType A';

        if ( strlen((string)$courseVersionTypeId) > 0 )
        {
            $where .= ' AND A.courseVersionTypeId = ?';
            $args[] = $courseVersionTypeId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course version type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourse(&$context)
    {
        $sql = 'SELECT A.name
                  FROM acdCourse A
                 WHERE A.courseId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourse(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId         = $lookup->getFilterValue('courseId');
        $courseName       = $lookup->getFilterValue('courseName');
        $formationLevelId = $lookup->getFilterValue('formationLevelId');

        $lookup->addFilterField( new MTextField('courseId',         $courseVersionTypeId, _M('Code',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',       $courseName,          _M('Course',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $business = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $lookup->addFilterField( new MSelection('formationLevelId', $formationLevelId,    _M('Formation level id', $module),   $business->listFormationLevel()) );

        $columns = array(
           new DataGridColumn('courseId', _M('Code', $module),   'right', true, null, true),
           new DataGridColumn('name',     _M('Course', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.courseId,
                       A.name
                  FROM acdCourse A';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(A.name) ILIKE TO_ASCII(?) OR TO_ASCII(A.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course version
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseVersion(&$context)
    {
        $sql = 'SELECT C.courseVersion AS courseVersion,
                       B.name
                  FROM acdCourseVersion A
             LEFT JOIN acdCourse B
                    ON ( B.courseId = A.courseId AND
                         (SELECT COUNT(*)
                            FROM acdCourseVersion X
                           WHERE X.courseId = A.courseId) = 1
                       )
            INNER JOIN acdCourseVersion C
                    ON (C.courseId = B.courseId)
                 WHERE A.courseId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseVersion(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId            = $lookup->getFilterValue('courseId');
        $courseVersion       = $lookup->getFilterValue('courseVersion');
        $courseName          = $lookup->getFilterValue('courseName');
        $formationLevelId    = $lookup->getFilterValue('formationLevelId');

        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Version',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $business = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $lookup->addFilterField( new MSelection('formationLevelId',$formationLevelId,_M('Formation level', $module), $business->listFormationLevel() ) );

        global $page;
        $page->onLoad('document.' . $page->name . '.courseName.focus()');

        $columns = array(
           new DataGridColumn('courseId',         _M('Code', $module),          'left',  true, null, true),
           new DataGridColumn('courseVersion',    _M('Version', $module),     'right', true, null, true),
           new DataGridColumn('courseName',       _M('Course', $module),        'left',  true, null, true),
           new DataGridColumn('formationLevelId', _M('Formation level id', $module), 'right', true, null, false)
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       B.formationLevelId
                  FROM acdCourseVersion A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B.name) ILIKE TO_ASCII(?) OR TO_ASCII(B.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course version search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for period
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePeriod(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdPeriod A
                 WHERE A.periodId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for period
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPeriod(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $periodId            = $lookup->getFilterValue('periodId');
        $periodDescription   = $lookup->getFilterValue('periodDescription');

        $lookup->addFilterField( new MTextField('periodId',          $periodId,          _M('Code',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodDescription', $periodDescription, _M('Period',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('periodId',          _M('Code', $module),   'left', true, null, true),
           new DataGridColumn('periodDescription', _M('Period', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.periodId,
                       A.description AS periodDescription
                  FROM acdPeriod A';

        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND A.periodId ILIKE ?';
            $args[] = $periodId . '%';
        }

        if ( strlen((string)$periodDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $periodDescription . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Period search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for learning period
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteLearningPeriod(&$context)
    {
        $sql =  'SELECT A.periodId,
                        A.courseId,
                        A.courseVersion,
                        A.turnId,
                        A.unitId,
                        A.description,
                        A.formationLevelId,
                        TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                        TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                        TO_CHAR(A.beginDateLessons,\'' . MASK_DATE . '\'),
                        TO_CHAR(A.weekEndExamsBegin,\'' . MASK_DATE . '\'),
                        A.average,
                        A.finalAverage,
                        A.minimumFrequency,
                        A.parcelsNumber,
                        B.shortName,
                        B.name,
                        getTurnDescription(A.turnId) as turnDescription,
                        getUnitDescription(A.unitId) as unitDescription
                   FROM acdLearningPeriod A
              LEFT JOIN acdCourse B
                     ON (B.courseId = A.courseId)
                   WHERE A.learningPeriodId = ?::integer ';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupLearningPeriod(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $learningPeriodId  = $lookup->getFilterValue('learningPeriodId');
        $periodId          = $lookup->getFilterValue('periodId') ? $lookup->getFilterValue('periodId') : CURRENT_PERIOD_ID;
        $courseId          = $lookup->getFilterValue('courseId');
        $courseVersion     = $lookup->getFilterValue('courseVersion');
        $turnId            = $lookup->getFilterValue('turnId');
        $unitId            = $lookup->getFilterValue('unitId');
        $description       = $lookup->getFilterValue('description');
        $formationLevelId  = $lookup->getFilterValue('formationLevelId');
        $beginDate         = $lookup->getFilterValue('beginDate');
        $endDate           = $lookup->getFilterValue('endDate');
        $beginDateLessons  = $lookup->getFilterValue('beginDateLessons');
        $weekEndExamsBegin = $lookup->getFilterValue('weekEndExamsBegin');
        $average           = $lookup->getFilterValue('average');
        $finalAverage      = $lookup->getFilterValue('finalAverage');
        $minimumFrequency  = $lookup->getFilterValue('minimumFrequency');
        $courseName        = $lookup->getFilterValue('courseName');


        $lookup->addFilterField( new MTextField('learningPeriodId',   $learningPeriodId,  _M('Code', $module),               FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',           $periodId,          _M('Period', $module),             FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',           $courseId,          _M('Course id', $module),          FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',         $courseName,        _M('Course', $module),             FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',      $courseVersion,     _M('Course version', $module),     FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );
        $business = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $lookup->addFilterField( new MSelection('formationLevelId',$formationLevelId,_M('Formation level', $module), $business->listFormationLevel() ) );
        $lookup->addFilterField( new MTextField('beginDate',          $beginDate,         _M('Begin date', $module),         FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('endDate',            $endDate,           _M('End date', $module),           FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('average',            $average,           _M('Average', $module),            FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('finalAverage',       $finalAverage,      _M('Final average', $module),      FIELD_ID_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('learningPeriodId',  _M('Code', $module),                 'left',  true, null, true),
           new DataGridColumn('description',       _M('Learning period', $module),          'left',  true, null, true),
           new DataGridColumn('periodId',          _M('Period', $module),               'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),            'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),       'right', true, null, true),
           new DataGridColumn('courseShortName',   _M('Course', $module),              'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),              'right', true, null, false),
           new DataGridColumn('turnDescription',   _M('Turn', $module),                  'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),              'right', true, null, false),
           new DataGridColumn('unitDescription',   _M('Unit', $module),                  'left',  true, null, true),
           new DataGridColumn('formationLevelId',  _M('Formation level id', $module),   'right', true, null, false),
           new DataGridColumn('beginDate',         _M('Begin date', $module),           'left',  true, null, true),
           new DataGridColumn('endDate',           _M('End date', $module),             'left',  true, null, true),
           new DataGridColumn('beginDateLessons',  _M('Lessons begin date', $module),   'left',  true, null, false),
           new DataGridColumn('weekEndExamsBegin', _M('Exams begin date', $module), 'left',  true, null, false),
           new DataGridColumn('average',           _M('Average', $module),              'right', true, null, true),
           new DataGridColumn('finalAverage',      _M('Final average', $module),        'right', true, null, true),
           new DataGridColumn('minimumFrequency',  _M('Minimum frequency', $module),    'right', true, null, false),
           new DataGridColumn('parcelsNumber',     _M('Parcels number', $module),       'right', true, null, true)
        );

        $sql = 'SELECT A.learningPeriodId,
                       A.periodId,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.description,
                       A.formationLevelId,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginDateLessons,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.weekEndExamsBegin,\'' . MASK_DATE . '\'),
                       A.average,
                       A.finalAverage,
                       A.minimumFrequency,
                       A.parcelsNumber,
                       getCourseShortName(A.courseId) as courseShortName,
                       getCourseName(A.courseId) as courseName,
                       getTurnDescription(A.turnId) as turnDescription,
                       getUnitDescription(A.unitId) as unitDescription
                  FROM acdLearningPeriod A';

        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND A.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseName(A.courseId) ILIKE ? OR getCourseShortName(A.courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description;
        }
        if ( strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }
        if ( strlen((string)$beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $beginDate;
        }
        if ( strlen((string)$endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $endDate;
        }
        if ( strlen((string)$beginDateLessons) > 0 )
        {
            $where .= ' AND A.beginDateLessons = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $beginDateLessons;
        }
        if ( strlen((string)$weekEndExamsBegin) > 0 )
        {
            $where .= ' AND A.weekEndExamsBegin = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $weekEndExamsBegin;
        }
        if ( strlen((string)$average) > 0 )
        {
            $where .= ' AND A.average = ?';
            $args[] = $average;
        }
        if ( strlen((string)$finalAverage) > 0 )
        {
            $where .= ' AND A.finalAverage = ?';
            $args[] = $finalAverage;
        }
        if ( strlen((string)$minimumFrequency) > 0 )
        {
            $where .= ' AND A.minimumFrequency = ?';
            $args[] = $minimumFrequency;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Learning period search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for curricularComponentGroup
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurricularComponentGroup(&$context)
    {
        $sql = 'SELECT A.name as groupDescription
                  FROM acdCurricularComponentGroup A
                 WHERE A.curricularComponentGroupId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curricularComponentGroup
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurricularComponentGroup(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentGroupId   = $lookup->getFilterValue('curricularComponentGroupId');
        $curricularComponentGroupName = $lookup->getFilterValue('curricularComponentGroupName');

        $lookup->addFilterField( new MTextField('curricularComponentGroupId', $curricularComponentGroupId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentGroupName', $curricularComponentGroupName, _M('Curricular component group',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('curricularComponentGroupId', _M('Code', $module), 'left',  true, null, true),
           new DataGridColumn('name', _M('Curricular component group', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.curricularComponentGroupId,
                       A.name
                  FROM acdCurricularComponentGroup A';

        if ( strlen((string)$curricularComponentGroupId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupId = ?';
            $args[] = $curricularComponentGroupId;
        }

        if ( strlen((string)$curricularComponentGroupName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?)';
            $args[] = $curricularComponentGroupName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component group search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for curricularComponentType
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurricularComponentType(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdCurricularComponentType A
                 WHERE A.curricularComponentTypeId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curricularComponentGroup
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurricularComponentType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentTypeId   = $lookup->getFilterValue('curricularComponentTypeId');
        $curricularComponentTypeName = $lookup->getFilterValue('curricularComponentTypeName');

        $lookup->addFilterField( new MTextField('curricularComponentTypeId', $curricularComponentGroupId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentTypeName', $curricularComponentGroupName, _M('Curricular component type',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('curricularComponentTypeId', _M('Code', $module), 'left',  true, null, true),
           new DataGridColumn('description', _M('Curricular component type', $module),  'left', true, null, true)
        );

        $sql = 'SELECT A.curricularComponentTypeId,
                       A.description
                  FROM acdCurricularComponentType A';

        if ( strlen((string)$curricularComponentTypeId) > 0 )
        {
            $where .= ' AND A.curricularComponentTypeId = ?';
            $args[] = $curricularComponentTypeId;
        }

        if ( strlen((string)$curricularComponentTypeName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $curricularComponentTypeName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for center
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCenter(&$context)
    {
        $sql = 'SELECT A.name
                  FROM acdCenter A
                 WHERE A.centerId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for center
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCenter(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $centerId   = $lookup->getFilterValue('centerId');
        $centerName = $lookup->getFilterValue('centerName');

        $lookup->addFilterField( new MTextField('centerId',   $centerId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('centerName', $centerName, _M('Center',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('centerId', _M('Code', $module),   'left',  true, null, true),
           new DataGridColumn('name',     _M('Center', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.centerId,
                       A.name
                  FROM acdCenter A';

        if ( strlen((string)$centerId) > 0 )
        {
            $where .= ' AND A.centerId = ?';
            $args[] = $centerId;
        }

        if ( strlen((string)$centerName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?)';
            $args[] = $centerName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Center search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for educationArea
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteEducationArea(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdEducationArea A
                 WHERE A.educationAreaId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for center
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEducationArea(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $educationAreaId          = $lookup->getFilterValue('educationAreaId');
        $educationAreaDescription = $lookup->getFilterValue('educationAreaDescription');

        $lookup->addFilterField( new MTextField('educationAreaId', $centerId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('educationAreaDescription', $centerName, _M('Education area',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('educationAreaId', _M('Code', $module), 'left', true, null, true),
           new DataGridColumn('description',     _M('Education area', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.educationAreaId,
                       A.description
                  FROM acdEducationArea A';

        if ( strlen((string)$educationAreaId) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $educationAreaId;
        }

        if ( strlen((string)$educationAreaDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $educationAreaDescription . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Education area search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for formation level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteFormationLevel(&$context)
    {
        $sql = 'SELECT A.description,
                       A.shortDescription,
                       A.academicDegree
                  FROM acdFormationLevel A
                 WHERE A.formationLevelId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupFormationLevel(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);


        $formationLevelId = $lookup->getFilterValue('formationLevelId');
        $description      = $lookup->getFilterValue('description');
        $shortDescription = $lookup->getFilterValue('shortDescription');
        $academicDegree   = $lookup->getFilterValue('academicDegree');

        $lookup->addFilterField( new MTextField('formationLevelId', $formationLevelId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',      $description,      _M('Formation level', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('shortDescription', $shortDescription, _M('Short description', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('formationLevelId', _M('Code', $module),               'right', true, null, true),
           new DataGridColumn('description',      _M('Formation level', $module),    'left',  true, null, true),
           new DataGridColumn('shortDescription', _M('Short description', $module),  'left',  true, null, true),
           new DataGridColumn('academicDegree',   _M('Academic degree', $module),    'left',  true, null, true)
        );

        $sql = 'SELECT A.formationLevelId,
                       A.description,
                       A.shortDescription,
                       A.academicDegree
                  FROM acdFormationLevel A';

        if (strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }
        if (strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }
        if (strlen((string)$shortDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(A.shortDescription) ILIKE TO_ASCII(?)';
            $args[] = $shortDescription . '%';
        }
        if (strlen((string)$academicDegree) > 0 )
        {
            $where .= ' AND A.academicDegree ILIKE ?';
            $args[] = $academicDegree . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Formation level search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course occurrence
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseOccurrence(&$context)
    {
            $sql = 'SELECT B.courseVersion,
                       C.name AS courseName,
                       B.unitId,
                       E.description AS unitDescription,
                       B.turnId,
                       D.description AS turnDescription,
                       B.authorizationDate,
                       B.authorizationDocument,
                       B.status,
                       B.minimumConclusionCourse,
                       B.maximumConclusionCourse,
                       C.formationLevelId,
                       F.description AS formationLevelDescription
                  FROM acdCourseOccurrence AA
             LEFT JOIN acdCourse C -- Neste join, limitamos pela vers�o
                    ON (C.courseId = AA.courseId AND
                        ( SELECT COUNT(*)
                            FROM acdCourseVersion X
                           WHERE X.courseId = AA.courseId
                        ) = 1
                       )
             LEFT JOIN acdCourseOccurrence CA
                    ON ( CA.courseId      = C.courseId       AND
                         CA.courseVersion = AA.courseVersion AND
                         CA.turnId        = AA.turnId        AND
                         CA.unitId        = AA.unitId        AND
                         (SELECT COUNT(*) -- Limitasse por turno
                            FROM acdCourseOccurrence CB
                             where CB.courseId = CA.courseId AND
                                  CB.courseVersion = CA.courseVersion AND
                                  CB.turnId = CA.turnId ) = 1 AND
                         (SELECT COUNT(*) --Limitasse por unidade
                            FROM acdCourseOccurrence CC
                             where CC.courseId = CA.courseId AND
                                  CC.courseVersion = CA.courseVersion AND
                                  CC.unitId = CA.unitId ) = 1
                       )
            INNER JOIN acdCourseOccurrence B
                    ON (B.courseId      = CA.courseId      AND
                        B.courseVersion = CA.courseVersion AND
                        B.turnId        = CA.turnId        AND
                        B.unitId        = CA.unitId )
             LEFT JOIN basTurn D
                    ON (D.turnId = B.turnId)
             LEFT JOIN basUnit E
                    ON (E.unitId = B.unitId)
             LEFT JOIN acdFormationLevel F
                    ON (F.formationLevelId = C.formationLevelId)
                 WHERE AA.courseId = ? ';

//         $sql = 'SELECT B.courseVersion,
//                        C.name AS courseName,
//                        B.unitId,
//                        E.description AS unitDescription,
//                        B.turnId,
//                        D.description AS turnDescription,
//                        B.authorizationDate,
//                        B.authorizationDocument,
//                        B.status,
//                        B.minimumConclusionCourse,
//                        B.maximumConclusionCourse,
//                        C.formationLevelId,
//                        F.description AS formationLevelDescription
//                   FROM acdCourseOccurrence AA
//              LEFT JOIN acdCourse C
//                     ON (C.courseId = AA.courseId AND
//                         ( SELECT COUNT(*)
//                             FROM acdCourseVersion X
//                            WHERE X.courseId = AA.courseId
//                         ) = 1
//                        )
//             INNER JOIN acdCourseOccurrence B
//                     ON (B.courseId      = C.courseId       AND
//                         B.courseVersion = AA.courseVersion AND
//                         B.turnId        = AA.turnId        AND
//                         B.unitId        = AA.unitId)
//              LEFT JOIN basTurn D
//                     ON (D.turnId = B.turnId)
//              LEFT JOIN basUnit E
//                     ON (E.unitId = B.unitId)
//              LEFT JOIN acdFormationLevel F
//                     ON (F.formationLevelId = C.formationLevelId)
//                  WHERE AA.courseId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseOccurrence(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId                = $lookup->getFilterValue('courseId');
        $courseVersion           = $lookup->getFilterValue('courseVersion');
        $courseName              = $lookup->getFilterValue('courseName');
        $unitId                  = $lookup->getFilterValue('unitId');
        $unitDescription         = $lookup->getFilterValue('unitDescription');
        $turnId                  = $lookup->getFilterValue('turnId');
        $turnDescription         = $lookup->getFilterValue('turnDescription');
        $authorizationDate       = $lookup->getFilterValue('authorizationDate');
        $authorizationDocument   = $lookup->getFilterValue('authorizationDocument');
        $status                  = $lookup->getFilterValue('status');
        $minimumConclusionCourse = $lookup->getFilterValue('minimumConclusionCourse');
        $maximumConclusionCourse = $lookup->getFilterValue('maximumConclusionCourse');
        $formationLevelId        = $lookup->getFilterValue('formationLevelId');

        $lookup->addFilterField( new MTextField('courseId',          $courseId,          _M('Course id',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',     $courseVersion,     _M('Course version',$module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',        $courseName,        _M('Course name',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MSelection('status',            $status,            _M('Is it active', $module) . '?', SAGU::listYesNo()) );
        $business = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $lookup->addFilterField( new MSelection('formationLevelId', $formationLevelId,   _M('Formation level', $module), $business->listFormationLevel() ) );

        global $page;
        $page->onLoad('document.' . $page->name . '.courseName.focus()');

        $columns = array(
           new DataGridColumn('courseId',                  _M('Course id', $module),                'left',  true, null, true),
           new DataGridColumn('courseVersion',             _M('Course version', $module),                'right', true, null, true),
           new DataGridColumn('courseName',                _M('Course', $module),                'left',  true, null, true),
           new DataGridColumn('unitId',                    _M('Unit id', $module),                'right', true, null, true),
           new DataGridColumn('unitDescription',           _M('Unit', $module),                'left',  true, null, true),
           new DataGridColumn('turnId',                    _M('Turn id', $module),                'right', true, null, true),
           new DataGridColumn('turnDescription',           _M('Turn', $module),                'left',  true, null, true),
           new DataGridColumn('authorizationDate',         _M('Authorization date', $module),                'left',  true, null, false),
           new DataGridColumn('authorizationDocument',     _M('Authorization document', $module),                'left',  true, null, false),
           new DataGridColumn('status',                    _M('Is it active', $module),                'left',  true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ) ),
           new DataGridColumn('minimumConclusionCourse',   _M('Minimum conclusion time', $module),                'right', true, null, true),
           new DataGridColumn('maximumConclusionCourse',   _M('Maximum conclusion time', $module),                'right', true, null, true),
           new DataGridColumn('formationLevelId',          _M('Formation level id', $module),                'right', true, null, false),
           new DataGridColumn('formationLevelDescription', _M('Formation level', $module),                'left', true, null, true)
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.unitId,
                       D.description AS unitDescription,
                       A.turnId,
                       C.description AS turnDescription,
                       A.authorizationDate,
                       A.authorizationDocument,
                       A.status,
                       A.minimumConclusionCourse,
                       A.maximumConclusionCourse,
                       B.formationLevelId,
                       E.description AS formationLevelDescription
                  FROM acdCourseOccurrence A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN acdFormationLevel E
                    ON (E.formationLevelId = B.formationLevelId)';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B.name) ILIKE TO_ASCII(?) OR TO_ASCII(B.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$turnDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $turnDescription . '%';
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$unitDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(D.description) ILIKE TO_ASCII(?)';
            $args[] = $unitDescription . '%';
        }
        if ( strlen((string)$authorizationDate) > 0 )
        {
            $where .= ' AND A.authorizationDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $authorizationDate;
        }
        if ( strlen((string)$authorizationDocument) > 0 )
        {
            $where .= ' AND A.authorizationDocument ILIKE ?';
            $args[] = $authorizationDocument;
        }
        if ( strlen((string)$status) > 0 )
        {
            $where .= ' AND A.status = ?';
            $args[] = $status;
        }
        if ( strlen((string)$minimumConclusionCourse) > 0 )
        {
            $where .= ' AND A.minimumConclusionCourse = ?';
            $args[] = $minimumConclusionCourse;
        }
        if ( strlen((string)$maximumConclusionCourse) > 0 )
        {
            $where .= ' AND A.maximumConclusionCourse = ?';
            $args[] = $maximumConclusionCourse;
        }

        if ( strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course occurrence search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

     /**
     * Auto complete for certified level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCertifiedType(&$context)
    {
        $sql = 'SELECT A.description,
                       A.reportLink
                  FROM acdCertifiedType A
                 WHERE A.certifiedTypeId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for certified type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCertifiedType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);


        $certifiedTypeId          = $lookup->getFilterValue('certifiedTypeId');
        $certifiedTypeDescription = $lookup->getFilterValue('certifiedTypeDescription');
        $reportLink               = $lookup->getFilterValue('reportLink');

        $lookup->addFilterField( new MTextField('certifiedTypeId', $certifiedTypeId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('certifiedTypeDescription', $certifiedTypeDescription, _M('Certified type', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        global $page;
        $page->onLoad('document.' . $page->name . '.certifiedTypeDescription.focus()');

        $columns = array(
           new DataGridColumn('certifiedTypeId',          _M('Code', $module), 'right', true, null, true),
           new DataGridColumn('certifiedTypeDescription', _M('Certified type', $module),       'left',  true, null, true),
           new DataGridColumn('reportLink',               _M('Report link', $module),       'left',  true, null, false)
        );

        $sql = 'SELECT A.certifiedTypeId,
                       A.description AS certifiedTypeDescription,
                       A.reportLink
                  FROM acdCertifiedType A';

        if (strlen((string)$certifiedTypeId) > 0 )
        {
            $where .= ' AND A.certifiedTypeId = ?';
            $args[] = $certifiedTypeId;
        }
        if (strlen((string)$certifiedTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $certifiedTypeDescription . '%';
        }
        if (strlen((string)$reportLink) > 0 )
        {
            $where .= ' AND A.reportLink ILIKE ?';
            $args[] = $reportLink . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Certified type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for states contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteStatesContract(&$context)
    {
        $sql = 'SELECT A.description,
                       A.inOutTransition,
                       A.needsReason
                  FROM acdStateContract A
                 WHERE A.stateContractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupStatesContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $stateContractId = $lookup->getFilterValue('stateContractId');
        $description     = $lookup->getFilterValue('description');
        $inOutTransition = $lookup->getFilterValue('inOutTransition');
        $needsReason     = $lookup->getFilterValue('needsReason');

        $lookup->addFilterField( new MTextField('stateContractId', $stateContractId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',     $description,     _M('State contract', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MSelection('inOutTransition', $inOutTransition, _M('In out transistion', $module), array( 'I' => _M('In', $module), 'O' => _M('Out', $module), 'T' => _M('Transition', $module))) );
        $lookup->addFilterField( new MSelection('needsReason',     $needsReason,     _M('Needs reason', $module), SAGU::listTrueFalse()) );

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns = array(
            new DataGridColumn('stateContractId', _M('Code', $module),               'right', true, null, true),
            new DataGridColumn('description',     _M('State contract', $module),     'left',  true, null, true),
            new DataGridColumn('inOutTransition', _M('In out transistion', $module), 'left',  true, null, true, array('I' => _M('In',$module), 'O' => _M('Out',$module), 'T' => _M('Transition',$module))),
            new DataGridColumn('needsReason',     _M('Needs reason', $module),       'left',  true, null, true, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module)) )
        );

        $sql = 'SELECT A.stateContractId,
                       A.description,
                       A.inOutTransition,
                       A.needsReason
                  FROM acdStateContract A';

        if ( strlen((string)$stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }
        if ( strlen((string)$inOutTransition) > 0 )
        {
            $where .= ' AND A.inOutTransition ILIKE ?';
            $args[] = $inOutTransition;
        }
        if ( strlen((string)$needsReason) > 0 )
        {
            $where .= ' AND A.needsReason = ?';
            $args[] = $needsReason;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('State contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for states contract possible
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteStatesContractPossible(&$context)
    {
        $sql = 'SELECT A.description,
                       A.inOutTransition,
                       A.needsReason
                  FROM acdStateContract A
                 WHERE A.stateContractId = ?';

        $context->setContext('academic', $sql);
    }

     /**
     * Auto complete for contract level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContract(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       A.comments,
                       A.monograph
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $contractId    = $lookup->getFilterValue('contractId');
        $personId      = $lookup->getFilterValue('personId');
        $personName    = $lookup->getFilterValue('personName');
        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $turnId        = $lookup->getFilterValue('turnId');
        $unitId        = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('contractId',    $contractId,    _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',      $personId,      _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName',    $reportLink,    _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Course id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns = array(
           new DataGridColumn('contractId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('personId',          _M('Person id', $module),        'left',  true, null, true),
           new DataGridColumn('personName',        _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),        'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),   'left',  true, null, true),
           new DataGridColumn('courseName',        _M('Course', $module),           'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),          'left',  true, null, false),
           new DataGridColumn('turnDescription',   _M('Turn', $module),             'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),          'left',  true, null, false),
           new DataGridColumn('unitDescription',   _M('Unit', $module),             'left',  true, null, true),
           new DataGridColumn('formationDate',     _M('Formation date', $module),   'left',  true, null, false),
           new DataGridColumn('formationPeriodId', _M('Formation period', $module), 'left',  true, null, false),
           new DataGridColumn('conclusionDate',    _M('Conclusion date', $module),  'left',  true, null, false),
           new DataGridColumn('emendsDate',        _M('Emends date', $module),      'left',  true, null, false),
           new DataGridColumn('diplomaDate',       _M('Diploma date', $module),     'left',  true, null, false),
           new DataGridColumn('inscriptionSelectiveProcId', _M('Selective process inscription', $module), 'left',  true, null, true),
           new DataGridColumn('maturityDay',       _M('Maturity day', $module),     'left',  true, null, true),
           new DataGridColumn('isListener',        _M('Is it listener', $module),      'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('isRequestAcademicDegree',    _M('Request academic degree', $module), 'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('globalAverage',     _M('Global average', $module),   'left',  true, null, false),
           new DataGridColumn('contractNumber',    _M('Contract number', $module),  'left',  true, null, false),
           new DataGridColumn('obs',               _M('Obs', $module),              'left',  true, null, false),
           new DataGridColumn('parcelsNumber',     _M('Parcels number', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       A.comments,
                       A.monograph
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )';

        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name,
                           C.name,
                           A.contractId';
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

     /**
     * Auto complete for active contracts 
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteActiveContract(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       A.comments,
                       A.monograph
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE A.contractId = ?
                   AND (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupActiveContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $contractId    = $lookup->getFilterValue('contractId');
        $personId      = $lookup->getFilterValue('personId');
        $personName    = $lookup->getFilterValue('personName');
        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $turnId        = $lookup->getFilterValue('turnId');
        $unitId        = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('contractId',    $contractId,    _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',      $personId,      _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName',    $reportLink,    _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Course id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns = array(
           new DataGridColumn('contractId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('personId',          _M('Person id', $module),        'left',  true, null, true),
           new DataGridColumn('personName',        _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),        'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),   'left',  true, null, true),
           new DataGridColumn('courseName',        _M('Course', $module),           'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),          'left',  true, null, false),
           new DataGridColumn('turnDescription',   _M('Turn', $module),             'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),          'left',  true, null, false),
           new DataGridColumn('unitDescription',   _M('Unit', $module),             'left',  true, null, true),
           new DataGridColumn('formationDate',     _M('Formation date', $module),   'left',  true, null, false),
           new DataGridColumn('formationPeriodId', _M('Formation period', $module), 'left',  true, null, false),
           new DataGridColumn('conclusionDate',    _M('Conclusion date', $module),  'left',  true, null, false),
           new DataGridColumn('emendsDate',        _M('Emends date', $module),      'left',  true, null, false),
           new DataGridColumn('diplomaDate',       _M('Diploma date', $module),     'left',  true, null, false),
           new DataGridColumn('inscriptionSelectiveProcId', _M('Selective process inscription', $module), 'left',  true, null, true),
           new DataGridColumn('maturityDay',       _M('Maturity day', $module),     'left',  true, null, true),
           new DataGridColumn('isListener',        _M('Is it listener', $module),      'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('isRequestAcademicDegree',    _M('Request academic degree', $module), 'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('globalAverage',     _M('Global average', $module),   'left',  true, null, false),
           new DataGridColumn('contractNumber',    _M('Contract number', $module),  'left',  true, null, false),
           new DataGridColumn('obs',               _M('Obs', $module),              'left',  true, null, false),
           new DataGridColumn('parcelsNumber',     _M('Parcels number', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       A.comments,
                       A.monograph
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Active contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

     /**
     * Auto complete for active contracts
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContractStateContract(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

     /**
     * Auto complete for contract level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContractAccountScheme(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       G.accountSchemeId,
                       G.description,
                       H.costCenterId,
                       H.description
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN accCourseAccount F
                    ON (F.courseId = A.courseId AND
                        F.courseVersion = A.courseVersion AND
                        F.unitId = A.unitId)
            INNER JOIN accAccountScheme G
                    ON (F.accountSchemeId = G.accountSchemeId)
            INNER JOIN accCostCenter H
                    ON (F.costCenterId = H.costCenterId)
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupContractAccountScheme(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $contractId = $lookup->getFilterValue('contractId');
        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $reportLink, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('contractId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('personId',          _M('Person id', $module),        'left',  true, null, true),
           new DataGridColumn('personName',        _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),        'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),   'left',  true, null, true),
           new DataGridColumn('courseName',        _M('Course', $module),           'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),          'left',  true, null, true),
           new DataGridColumn('turnDescription',   _M('Turn', $module),             'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),          'left',  true, null, true),
           new DataGridColumn('unitDescription',   _M('Unit', $module),            'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       G.accountSchemeId,
                       G.description,
                       H.costCenterId,
                       H.description
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN accCourseAccount F
                    ON (F.courseId = A.courseId AND
                        F.courseVersion = A.courseVersion AND
                        F.unitId = A.unitId)
            INNER JOIN accAccountScheme G
                    ON (F.accountSchemeId = G.accountSchemeId)
            INNER JOIN accCostCenter H
                    ON (F.costCenterId = H.costCenterId)';

        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $personName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

     /**
     * Auto complete for contract level to contract lock
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContractLock(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId)
             INNER JOIN acdStateTransition G
                     ON (G.beginStateId = F.stateContractId AND
                         G.endStateId = ' . STATE_CONTRACT_ID_LOCKED . ')
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupContractLock(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $contractId = $lookup->getFilterValue('contractId');
        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $reportLink, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('contractId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('personId',          _M('Person id', $module),        'left',  true, null, true),
           new DataGridColumn('personName',        _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),        'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),   'left',  true, null, true),
           new DataGridColumn('courseName',        _M('Course', $module),           'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),          'left',  true, null, true),
           new DataGridColumn('turnDescription',   _M('Turn', $module),             'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),          'left',  true, null, true),
           new DataGridColumn('unitDescription',   _M('Unit', $module),             'left',  true, null, true),
           new DataGridColumn('formationDate',     _M('Formation date', $module),   'left',  true, null, false),
           new DataGridColumn('formationPeriodId', _M('Formation period', $module), 'left',  true, null, false),
           new DataGridColumn('conclusionDate',    _M('Conclusion date', $module),  'left',  true, null, false),
           new DataGridColumn('emendsDate',        _M('Emends date', $module),      'left',  true, null, false),
           new DataGridColumn('diplomaDate',       _M('Diploma date', $module),     'left',  true, null, false),
           new DataGridColumn('inscriptionSelectiveProcId', _M('Selective process inscription', $module), 'left',  true, null, true),
           new DataGridColumn('maturityDay',       _M('Maturity day', $module),     'left',  true, null, true),
           new DataGridColumn('isListener',        _M('Is it listener', $module),      'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('isRequestAcademicDegree',    _M('Request academic degree', $module), 'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('globalAverage',     _M('Global average', $module),   'left',  true, null, false),
           new DataGridColumn('contractNumber',    _M('Contract number', $module),  'left',  true, null, false),
           new DataGridColumn('obs',               _M('Obs', $module),              'left',  true, null, false),
           new DataGridColumn('parcelsNumber',     _M('Parcels number', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId)
             INNER JOIN acdStateTransition G
                     ON (G.beginStateId = F.stateContractId AND
                         G.endStateId = ' . STATE_CONTRACT_ID_LOCKED . ')';

        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $personName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

     /**
     * Auto complete for contract level to contract lock
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContractUnlock(&$context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId)
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupContractUnlock(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $contractId = $lookup->getFilterValue('contractId');
        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $reportLink, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('contractId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('personId',          _M('Person id', $module),        'left',  true, null, true),
           new DataGridColumn('personName',        _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('courseId',          _M('Course id', $module),        'left',  true, null, true),
           new DataGridColumn('courseVersion',     _M('Course version', $module),   'left',  true, null, true),
           new DataGridColumn('courseName',        _M('Course', $module),           'left',  true, null, true),
           new DataGridColumn('turnId',            _M('Turn id', $module),          'left',  true, null, true),
           new DataGridColumn('turnDescription',   _M('Turn', $module),             'left',  true, null, true),
           new DataGridColumn('unitId',            _M('Unit id', $module),          'left',  true, null, true),
           new DataGridColumn('unitDescription',   _M('Unit', $module),             'left',  true, null, true),
           new DataGridColumn('formationDate',     _M('Formation date', $module),   'left',  true, null, false),
           new DataGridColumn('formationPeriodId', _M('Formation period', $module), 'left',  true, null, false),
           new DataGridColumn('conclusionDate',    _M('Conclusion date', $module),  'left',  true, null, false),
           new DataGridColumn('emendsDate',        _M('Emends date', $module),      'left',  true, null, false),
           new DataGridColumn('diplomaDate',       _M('Diploma date', $module),     'left',  true, null, false),
           new DataGridColumn('inscriptionSelectiveProcId', _M('Selective process inscription', $module), 'left',  true, null, true),
           new DataGridColumn('maturityDay',       _M('Maturity day', $module),     'left',  true, null, true),
           new DataGridColumn('isListener',        _M('Is it listener', $module),      'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('isRequestAcademicDegree',    _M('Request academic degree', $module), 'left',  true, null, false, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module))),
           new DataGridColumn('globalAverage',     _M('Global average', $module),   'left',  true, null, false),
           new DataGridColumn('contractNumber',    _M('Contract number', $module),  'left',  true, null, false),
           new DataGridColumn('obs',               _M('Obs', $module),              'left',  true, null, false),
           new DataGridColumn('parcelsNumber',     _M('Parcels number', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.inscriptionSelectiveProcId,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId) ';

        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $personName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for all person contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePersonContract(&$context)
    {
        $sql = 'SELECT C.contractId,
                       A.personId,
                       A.name,
                       D.courseId,
                       E.name,
                       D.courseVersion,
                       C.turnId,
                       F.description,
                       C.unitId,
                       G.description,
                       E.formationLevelId,
                       C.comments,
                       C.monograph
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON (A.cityId = B.cityId)
             LEFT JOIN acdContract C
                    ON (C.personId = A.personId
                        AND (C.conclusionDate IS NULL
                             OR C.conclusionDate > date(now()))
                        AND (SELECT COUNT(*)
                               FROM acdContract X
                              WHERE X.personId = A.personId
                                AND (X.conclusionDate IS NULL
                                     OR X.conclusionDate > date(now())) ) = 1 )
             LEFT JOIN acdCourseVersion D
                    ON (C.courseId = D.courseId
                        AND C.courseVersion = D.courseVersion)
             LEFT JOIN acdCourse E
                    ON (D.courseId = E.courseId)
             LEFT JOIN basTurn F
                    ON (F.turnId = C.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = C.unitId)
                 WHERE A.personId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for all person contracts
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPersonContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $contractId = $lookup->getFilterValue('contractId');
        $courseId   = $lookup->getFilterValue('courseId');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $reportLink, _M('Name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('courseId', $courseId, '', FIELD_DESCRIPTION_LOOKUP_SIZE) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns = array(
           new DataGridColumn('contractId',      _M('Contract id', $module),   'right', true, null, true),
           new DataGridColumn('personId',        _M('Person id', $module),     'left',  true, null, true),
           new DataGridColumn('personName',      _M('Person', $module),        'left',  true, null, true),
           new DataGridColumn('courseId',        _M('Course id', $module),     'left',  true, null, true),
           new DataGridColumn('courseVersion',   _M('Course version',$module), 'left',  true, null, true),
           new DataGridColumn('courseName',      _M('Course', $module),        'left',  true, null, true),
           new DataGridColumn('turnId',          _M('Turn id',$module),        'left',  true, null, false),
           new DataGridColumn('turnDescription', _M('Turn',$module),           'left',  true, null, true),
           new DataGridColumn('unitId',          _M('Unit id',$module),        'left',  true, null, false),
           new DataGridColumn('unitDescription', _M('Unit',$module),           'left',  true, null, true),
           new DataGridColumn('formationLevelId',_M('Formation level id',$module),           'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId as personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       F.description AS turnDescription,
                       A.unitId,
                       G.description AS unitDescription,
                       C.formationLevelId,
                       A.comments,
                       A.monograph
                  FROM acdContract A
        LEFT JOIN ONLY basPhysicalPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn F
                    ON (F.turnId = A.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = A.unitId)
                 WHERE ( A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) ) ';

        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $contractId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY B.name,
                           C.name,
                           A.contractId ';

        if ( strlen((string)$personId) == 0 && strlen((string)$personName) == 0 && strlen((string)$contractId) == 0 && strlen((string)$courseId) == 0)
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Person contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for all actives person contracts
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteActivePersonContract(&$context)
    {

        $sql = 'SELECT C.contractId,
                       A.personId,
                       A.name,
                       D.courseId,
                       E.name,
                       D.courseVersion,
                       C.turnId,
                       F.description,
                       C.unitId,
                       G.description,
                       C.comments,
                       C.monograph,
                       C.parcelsNumber
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON (A.cityId = B.cityId)
             LEFT JOIN acdContract C
                    ON (    C.personId = A.personId
                        AND (   C.conclusionDate IS NULL
                             OR C.conclusionDate > date(now()) )
                        AND (    getContractDisactivationDate(C.contractId) IS NULL )
                        AND (SELECT COUNT(*)
                               FROM acdContract X
                              WHERE X.personId = A.personId
                                AND (   getContractDisactivationDate(X.contractId) IS NULL )
                                AND (X.conclusionDate IS NULL
                                     OR X.conclusionDate > date(now())) ) = 1 )


             LEFT JOIN acdCourseVersion D
                    ON (C.courseId = D.courseId
                        AND C.courseVersion = D.courseVersion)
             LEFT JOIN acdCourse E
                    ON (D.courseId = E.courseId)
             LEFT JOIN basTurn F
                    ON (F.turnId = C.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = C.unitId)
                 WHERE A.personId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for all actives person contracts
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupActivePersonContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $contractId = $lookup->getFilterValue('contractId');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $reportLink, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns = array(
           new DataGridColumn('contractId',      _M('Contract id', $module),   'right', true, null, true),
           new DataGridColumn('personId',        _M('Person id', $module),     'left',  true, null, true),
           new DataGridColumn('personName',      _M('Person', $module),        'left',  true, null, true),
           new DataGridColumn('courseId',        _M('Course id', $module),     'left',  true, null, true),
           new DataGridColumn('courseVersion',   _M('Course version',$module), 'left',  true, null, true),
           new DataGridColumn('courseName',      _M('Course', $module),        'left',  true, null, true),
           new DataGridColumn('turnId',          _M('Turn id',$module),        'left',  true, null, false),
           new DataGridColumn('turnDescription', _M('Turn',$module),           'left',  true, null, true),
           new DataGridColumn('unitId',          _M('Unit id',$module),        'left',  true, null, false),
           new DataGridColumn('unitDescription', _M('Unit',$module),           'left',  true, null, true)
        );

        $sql = 'SELECT A.contractId,
                       A.personId as personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       F.description AS turnDescription,
                       A.unitId,
                       G.description AS unitDescription,
                       A.comments,
                       A.monograph
                  FROM acdContract A
        LEFT JOIN ONLY basPhysicalPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn F
                    ON (F.turnId = A.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = A.unitId)
                 WHERE (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $contractId;
        }


        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY A.contractId ';

        if ( strlen((string)$personId) == 0 && strlen((string)$personName) == 0 && strlen((string)$contractId) == 0)
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Person contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for test end course type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteTestEndCourseType(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdTestEndCourseType A
                 WHERE A.testEndCourseTypeId = ? ';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for certified type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupTestEndCourseType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $testEndCourseTypeId = $lookup->getFilterValue('testEndCourseTypeId');
        $description         = $lookup->getFilterValue('testEndCourseTypeDescription');

        $lookup->addFilterField( new MTextField('testEndCourseTypeId', $testEndCourseTypeId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('testEndCourseTypeDescription',      $testEndCourseTypeDescription, _M('Course end test type', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('testEndCourseTypeId', _M('Code', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Course end test type', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.testEndCourseTypeId,
                       A.description
                  FROM acdTestEndCourseType A';

        if (strlen((string)$testEndCourseTypeId) > 0 )
        {
            $where .= ' AND A.testEndCourseTypeId = ?';
            $args[] = $testEndCourseTypeId;
        }
        if (strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course end test type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for degree
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteDegree(&$context)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.limitDate,\'' . MASK_DATE . '\') AS limitDate,
                       TO_CHAR(A.finalDate,\'' . MASK_DATE . '\') AS finalDate,
                       A.degreeNumber,
                       A.concept,
                       A.weight,
                       A.isSubstitutive
                  FROM acdDegree A
                 WHERE A.degreeId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for degree
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupDegree(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $degreeId         = $lookup->getFilterValue('degreeId');
        $learningPeriodId = $lookup->getFilterValue('learningPeriodId');
        $periodId         = $lookup->getFilterValue('periodId');
        $description      = $lookup->getFilterValue('description');
        $degreeNumber     = $lookup->getFilterValue('degreeNumber');
        $concept          = $lookup->getFilterValue('concept');
        $courseId         = $lookup->getFilterValue('courseId');
        $courseVersion    = $lookup->getFilterValue('courseVersion');
        $courseName       = $lookup->getFilterValue('courseName');
        $unitId           = $lookup->getFilterValue('unitId');
        $turnId           = $lookup->getFilterValue('turnId');

        $lookup->addFilterField( new MTextField('degreeId',         $degreeId,         _M('Code', $module),               FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',      $description,      _M('Academic degree', $module),             FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',         $learningPeriodId, _M('Period', $module),             FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',         $courseId,         _M('Course id', $module),          FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',    $courseVersion,    _M('Course version', $module),     FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',       $courseName,       _M('Course', $module),             FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( new MTextField('learningPeriodId', $learningPeriodId, _M('Learning period', $module),    FIELD_ID_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('degreeId',         _M('Code', $module),               'right', true, null, true),
            new DataGridColumn('description',      _M('Academic degree', $module),             'left',  true, null, true),
            new DataGridColumn('learningPeriodId', _M('Learning period', $module),    'left',  true, null, true),
            new DataGridColumn('courseId',         _M('Course id', $module),             'left',  true, null, true),
            new DataGridColumn('courseVersion',    _M('Course version', $module),             'left',  true, null, true),
            new DataGridColumn('courseName',       _M('Course', $module),             'left',  true, null, true),
            new DataGridColumn('turnDescription',  _M('Turn', $module),               'left',  true, null, true),
            new DataGridColumn('unitDescription',  _M('Unit', $module),               'left',  true, null, true),
            new DataGridColumn('limitDate',        _M('Limit date', $module),         'left',  true, null, true),
            new DataGridColumn('finalDate',        _M('Final date', $module),         'left',  true, null, true),
            new DataGridColumn('degreeNumber',     _M('Degree number', $module),      'right', true, null, true),
            new DataGridColumn('concept',          _M('Concept', $module),            'right', true, null, true, array(DB_TRUE => _M('Yes', $module), DB_FALSE => _M('No', $module)) ),
            new DataGridColumn('weight',           _M('Weight', $module),         'left',  true, null, true),
            new DataGridColumn('isSubstitutive',   _M('isSubstitutive', $module),         'left',  true, null, true),
        );

        $sql = 'SELECT A.degreeId,
                       A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.limitDate,\'' . MASK_DATE . '\') AS limitDate,
                       TO_CHAR(A.finalDate,\'' . MASK_DATE . '\') AS finalDate,
                       A.degreeNumber,
                       A.concept,
                       A.weight,
                       A.isSubstitutive,
                       B.courseId,
                       B.courseVersion,
                       C.shortName as courseName,
                       B.turnId,
                       getTurnDescription(B.turnId) as turnDescription,
                       B.unitId,
                       getUnitDescription(B.unitId) as unitDescription
                  FROM acdDegree A,
                       acdLearningPeriod B,
                       acdCourse C
                 WHERE A.learningPeriodId = B.learningPeriodId
                   AND B.courseId = C.courseId ';

        if ( strlen((string)$degreeId) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $degreeId;
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }
        if ( strlen((string)$limitDate) > 0 )
        {
            $where .= ' AND A.limitDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $limitDate;
        }
        if ( strlen((string)$finalDate) > 0 )
        {
            $where .= ' AND A.finalDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $finalDate;
        }
        if ( strlen((string)$isSubstitutive) > 0 )
        {
            $where .= ' AND A.isSubstitutive = ?';
            $args[] = $isSubstitutive;
        }
        if ( strlen((string)$weight) > 0 )
        {
            $where .= ' AND A.weight = ?::float';
            $args[] = $weight;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Degree search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for schedule
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteSchedule(&$context)
    {
        $sql = 'SELECT A.groupId,
                       getCurricularComponentShortName(B2.curricularComponentId) AS groupGroupName,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       getTurnDescription(I.turnId) as turnDescription,
                       TO_CHAR(I.beginHour,\'' . MASK_TIME . '\') as beginHour,
                       TO_CHAR(I.endHour,\'' . MASK_TIME . '\') as endHour,
                       TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') as beginDate,
                       TO_CHAR(I.endDate,\'' . MASK_DATE . '\') as endDate
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdLearningPeriod B5
                    ON (B.learningPeriodId = B5.learningPeriodId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )
                 WHERE A.scheduleId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for scheduler
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupSchedule(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $scheduleId                  = $lookup->getfilterValue('scheduleId');
        $groupId                     = $lookup->getfilterValue('groupId');
        $periodId                    = $lookup->getfilterValue('periodId');
        $unitId                      = $lookup->getfilterValue('unitId');
        $turnId                      = $lookup->getfilterValue('turnId');
        $courseId                    = $lookup->getfilterValue('courseId');
        $courseVersion               = $lookup->getfilterValue('courseVersion');
        $courseName                  = $lookup->getfilterValue('courseName');
        $curricularComponentId       = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion  = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName     = $lookup->getfilterValue('curricularComponentName');
        $weekDayId                   = $lookup->getfilterValue('weekDayId');
        $room                        = $lookup->getfilterValue('room');
        $building                    = $lookup->getfilterValue('building');


        $lookup->addFilterField( new MTextField('scheduleId',     $scheduleId,     _M('Code', $module),            FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('groupId',        $groupId,        _M('Offered curricular component id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',       $periodId,       _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',       $courseId,       _M('Course id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',  $courseVersion,  _M('Course version', $module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',     $courseName,     _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::weekDay($weekDayId) );
        $lookup->addFilterField( new MTextField('room',     $room,     _M('Room', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('building', $building, _M('Building', $module), FIELD_ID_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('scheduleId',                  _M('Code', $module),                     'right', true, null, true),
            new DataGridColumn('groupId',                     _M('Offered curricular component id', $module),                     'right', true, null, true),
            new DataGridColumn('groupGroupName',              _M('Offered curricular component name', $module),                     'left',  false, null, true),
            new DataGridColumn('subGroup',                    _M('Sub group', $module),                     'left',  true, null, true),
            new DataGridColumn('courseId',                    _M('Course id', $module),                     'left',  true, null, true),
            new DataGridColumn('courseVersion',               _M('Course version', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentId',       _M('Curricular component id', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentVersion',  _M('Curricular component version', $module),           'left',  true, null, true),
            new DataGridColumn('curricularComponentName',     _M('Curricular component', $module),                     'left',  true, null, true),
            new DataGridColumn('unitDescription',             _M('Unit', $module),                     'left', true, null, true),
            new DataGridColumn('turnDescription',             _M('Turn', $module),                     'left', true, null, true),
            new DataGridColumn('weekDayDescription',          _M('Week day', $module),                     'left', true, null, true),
            new DataGridColumn('beginHour',                   _M('Begin hour', $module),                     'left', true, null, true),
            new DataGridColumn('endHour',                     _M('End hour', $module),                     'left', true, null, true),
            new DataGridColumn('beginDate',                   _M('Begin date', $module),                     'left', true, null, true),
            new DataGridColumn('endDate',                     _M('End date', $module),                     'left', true, null, true),
            new DataGridColumn('room',                        _M('Room', $module),                     'right', true, null, true),
            new DataGridColumn('building',                    _M('Building', $module),                     'left', true, null, true),
            new DataGridColumn('numCredits',                  _M('Number credits', $module),                     'left', true, null, true),
            new DataGridColumn('discounting',                 _M('Discounting', $module),                     'left', true, null, true),
            new DataGridColumn('weight',                      _M('Weight', $module),                     'left', true, null, true),
        );

        $sql = 'SELECT A.scheduleId,
                       A.groupId,
                       B3.shortName AS groupGroupName,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       getTurnDescription(I.turnId) as turnDescription,
                       TO_CHAR(I.beginHour,\'' . MASK_TIME . '\') as beginHour,
                       TO_CHAR(I.endHour,\'' . MASK_TIME . '\') as endHour,
                       TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') as beginDate,
                       TO_CHAR(I.endDate,\'' . MASK_DATE . '\') as endDate
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdLearningPeriod B5
                    ON (B.learningPeriodId = B5.learningPeriodId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )';

        if ( strlen((string)$scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $scheduleId;
        }
        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND I.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId ILIKE ?';
            $args[] = $weekDayId;
        }
        if ( strlen((string)$room) > 0 )
        {
            $where .= ' AND F.room = ?';
            $args[] = $room;
        }
        if ( strlen((string)$building) > 0 )
        {
            $where .= ' AND F.building = ?';
            $args[] = $building;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B4.name) ILIKE TO_ASCII(?) OR TO_ASCII(B4.shortName) ILIKE TO_ASCII(?))';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B3.name) ILIKE TO_ASCII(?) OR TO_ASCII(B3.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.scheduleId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Schedule search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for schedule professor
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteScheduleProfessor(&$context)
    {
        $sql = 'SELECT A.scheduleId,
                       A2.professorId,
                       A3.name as professorName,
                       A.groupId,
                       B3.shortName AS groupGroupName,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName AS courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName AS curricularComponentName,
                       getTurnDescription(I.turnId) as turnDescription,
                       TO_CHAR(I.beginHour,\'' . MASK_TIME . '\') as beginHour,
                       TO_CHAR(I.endHour,\'' . MASK_TIME . '\') as endHour,
                       TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') as beginDate,
                       TO_CHAR(I.endDate,\'' . MASK_DATE . '\') as endDate,
                       A2.scheduleProfessorId
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdScheduleProfessor A2
                    ON ( A.scheduleId = A2.scheduleId )
        LEFT JOIN ONLY basPhysicalPersonProfessor A3
                    ON ( A3.personId = A2.professorId )
             LEFT JOIN acdLearningPeriod B5
                    ON (B.learningPeriodId = B5.learningPeriodId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )
                 WHERE A2.scheduleProfessorId = ?
                 LIMIT 1';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for schedule professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupScheduleProfessor(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $scheduleProfessorId         = $lookup->getFilterValue('scheduleProfessorId');
        $professorId                 = $lookup->getFilterValue('professorId');
        $professorName               = $lookup->getFilterValue('professorName');
        $scheduleId                  = $lookup->getfilterValue('scheduleId');
        $groupId                     = $lookup->getfilterValue('groupId');
        $periodId                    = $lookup->getfilterValue('periodId');
        $unitId                      = $lookup->getfilterValue('unitId');
        $turnId                      = $lookup->getfilterValue('turnId');
        $courseId                    = $lookup->getfilterValue('courseId');
        $courseVersion               = $lookup->getfilterValue('courseVersion');
        $courseName                  = $lookup->getfilterValue('courseName');
        $curricularComponentId       = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion  = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName     = $lookup->getfilterValue('curricularComponentName');
        $weekDayId                   = $lookup->getfilterValue('weekDayId');
        $room                        = $lookup->getfilterValue('room');
        $building                    = $lookup->getfilterValue('building');


        $lookup->addFilterField( new MTextField('scheduleProfessorId', $scheduleProfessorId, _M('Code', $module),           FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('scheduleId',          $scheduleId,          _M('Schedule id', $module),    FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorId',         $professorId,         _M('Professor id', $module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorName',       $professorName,       _M('Professor', $module),      FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('groupId',        $groupId,        _M('Offered curricular component id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',       $periodId,       _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',       $courseId,       _M('Course id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',  $courseVersion,  _M('Course version', $module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',     $courseName,     _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::weekDay($weekDayId) );
        $lookup->addFilterField( new MTextField('room',     $room,     _M('Room', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('building', $building, _M('Building', $module), FIELD_ID_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('scheduleProfessorId',         _M('Code', $module),                     'right', true, null, true),
            new DataGridColumn('scheduleId',                  _M('Schedule id', $module),                     'right', true, null, true),
            new DataGridColumn('professorId',                 _M('Professor id', $module),                     'right', true, null, true),
            new DataGridColumn('professorName',               _M('Professor', $module),                     'left',  true, null, true),
            new DataGridColumn('groupId',                     _M('Offered curricular component id', $module),                     'right', true, null, true),
            new DataGridColumn('groupGroupName',              _M('Offered curricular component name', $module),                     'left',  false, null, true),
            new DataGridColumn('subGroup',                    _M('Sub group', $module),                     'left',  true, null, true),
            new DataGridColumn('courseId',                    _M('Course id', $module),                     'left',  true, null, true),
            new DataGridColumn('courseVersion',               _M('Course version', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentId',       _M('Curricular component id', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentVersion',  _M('Curricular component version', $module),           'left',  true, null, true),
            new DataGridColumn('curricularComponentName',     _M('Curricular component', $module),                     'left',  true, null, true),
            new DataGridColumn('unitDescription',             _M('Unit', $module),                     'left', true, null, true),
            new DataGridColumn('turnDescription',             _M('Turn', $module),                     'left', true, null, true),
            new DataGridColumn('professorId',                 _M('professor id', $module),                     'right', true, null, true),
            new DataGridColumn('professorName',               _M('professor', $module),                     'left', true, null, true),
            new DataGridColumn('weekDayDescription',          _M('Week day', $module),                     'left', true, null, true),
            new DataGridColumn('beginHour',                   _M('Begin hour', $module),                     'left', true, null, true),
            new DataGridColumn('endHour',                     _M('End hour', $module),                     'left', true, null, true),
            new DataGridColumn('beginDate',                   _M('Begin date', $module),                     'left', true, null, true),
            new DataGridColumn('endDate',                     _M('End date', $module),                     'left', true, null, true),
            new DataGridColumn('room',                        _M('Room', $module),                     'right', true, null, true),
            new DataGridColumn('building',                    _M('Building', $module),                     'left', true, null, true),
            new DataGridColumn('numCredits',                  _M('Number credits', $module),                     'left', true, null, true),
            new DataGridColumn('discounting',                 _M('Discounting', $module),                     'left', true, null, true),
            new DataGridColumn('weight',                      _M('Weight', $module),                     'left', true, null, true),
        );

        $sql = 'SELECT A2.scheduleProfessorId,
                       A.scheduleId,
                       A2.professorId,
                       A3.name as professorName,
                       A.groupId,
                       B3.shortName AS groupGroupName,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName AS courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName AS curricularComponentName,
                       getTurnDescription(I.turnId) as turnDescription,
                       TO_CHAR(I.beginHour,\'' . MASK_TIME . '\') as beginHour,
                       TO_CHAR(I.endHour,\'' . MASK_TIME . '\') as endHour,
                       TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') as beginDate,
                       TO_CHAR(I.endDate,\'' . MASK_DATE . '\') as endDate,
                       A2.scheduleProfessorId
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdScheduleProfessor A2
                    ON ( A.scheduleId = A2.scheduleId )
        LEFT JOIN ONLY basPhysicalPersonProfessor A3
                    ON ( A3.personId = A2.professorId )
             LEFT JOIN acdLearningPeriod B5
                    ON (B.learningPeriodId = B5.learningPeriodId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )';

        if ( strlen((string)$scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $scheduleId;
        }
        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND I.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId ILIKE ?';
            $args[] = $weekDayId;
        }
        if ( strlen((string)$room) > 0 )
        {
            $where .= ' AND F.room = ?';
            $args[] = $room;
        }
        if ( strlen((string)$building) > 0 )
        {
            $where .= ' AND F.building = ?';
            $args[] = $building;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B4.name) ILIKE TO_ASCII(?) OR TO_ASCII(B4.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B3.name) ILIKE TO_ASCII(?) OR TO_ASCII(B3.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$scheduleProfessorId) > 0 )
        {
            $where .= ' AND A2.scheduleProfessorId = ?';
            $args[] = $scheduleProfessorId;
        }
        if ( strlen((string)$professorId) > 0 )
        {
            $where .= ' AND A2.professorId = ?';
            $args[] = $professorId;
        }
        if ( strlen((string)$professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(A3.name) ILIKE TO_ASCII(?)';
            $args[] = $professorName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.scheduleId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Schedule professor search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for schedule professor
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteScheduleProfessor2(&$context)
    {
        $sql = 'SELECT DISTINCT D.name as professorName,
                       A.scheduleId
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdScheduleProfessor C
                    ON (A.scheduleId = C.ScheduleId)
            INNER JOIN basPhysicalPersonProfessor D
                    ON ( C.professorId = D.personId)
                 WHERE C.professorId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for schedule professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupScheduleProfessor2(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $professorId                 = $lookup->getFilterValue('professorId');
        $professorName               = $lookup->getFilterValue('professorName');
        $groupId                     = $lookup->getfilterValue('groupId');

        $lookup->addFilterField( new MTextField('professorId',         $professorId,         _M('Professor id', $module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorName',       $professorName,       _M('Professor', $module),      FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('groupId',        $groupId,        _M('Offered curricular component id', $module),       FIELD_ID_LOOKUP_SIZE) );

         $columns = array(
            new DataGridColumn('professorId',   _M('Code', $module), 'right', true, null, true),
            new DataGridColumn('professorName', _M('Professor', $module), 'left',  true, null, true),
            new DataGridColumn('weekDayDescription',    _M('Day', $module), 'left',  true, null, true),
            new DataGridColumn('scheduleId',    _M('Schedule id', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT DISTINCT C.professorId,
                       D.name as professorName,
                       A.scheduleId, E.description AS weekDayDescription
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdScheduleProfessor C
                    ON ( A.scheduleId = C.scheduleId)
            INNER JOIN basPhysicalPersonProfessor D
                    ON ( C.professorId = D.personId)
            LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)';

        if ( strlen((string)$scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $scheduleId;
        }
        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $groupId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY D.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Schedule professor search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for states contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteReason(&$context)
    {
        $sql = 'SELECT A.description,
                       A.stateContractId
                  FROM acdReason A
                 WHERE A.reasonId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupReason(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $reasonId        = $lookup->getFilterValue('reasonId');
        $description     = $lookup->getFilterValue('description');
        $stateContractId = $lookup->getFilterValue('stateContractId');

        $lookup->addFilterField( new MTextField('reasonId',         $reasonId,        _M('Code', $module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',      $description,     _M('Reason', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $business  = $MIOLO->getBusiness($module, 'BusStateContract');
        $lookup->addFilterField( new MComboBox('stateContractId',   $stateContractId, _M('States contract id', $module), $business->listStateContract()) );

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns = array(
            new DataGridColumn('reasonId',       _M('Code', $module),              'right', true, null, true),
            new DataGridColumn('description',    _M('Reason', $module),            'left',  true, null, true),
            new DataGridColumn('stateContractId', _M('States contract id', $module),  'right',  true, null, true),
            new DataGridColumn('stateContract',   _M('States contract', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.reasonId,
                       A.description,
                       A.stateContractId,
                       B.description as stateContract
                  FROM acdReason A
             LEFT JOIN acdStateContract B
                    ON ( A.stateContractId = B.stateContractid ) ';

        if ( strlen((string)$reasonId) > 0 )
        {
            $where .= ' AND A.reasonId = ?';
            $args[] = $reasonId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }
        if ( strlen((string)$stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Reason search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for states contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteLockReason(&$context)
    {
        $sql = 'SELECT A.description
                     FROM acdReasonCancellation A
                 WHERE A.reasonCancellationId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupLockReason(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $reasonCancellationId         = $lookup->getFilterValue('reasonCancellationId');
        $description                  = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('reasonCancellationId', $reasonCancellationId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Reason cancellation', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('reasonCancellationId', _M('Code', $module), 'right', true, null, true),
            new DataGridColumn('description',  _M('Reason cancellation', $module), 'left',  true, null, true)
        );

        $sql = ' SELECT A.reasonCancellationId,
                        A.description
                   FROM acdReasonCancellation A';

        if ( strlen((string)$reasonCancellationId) > 0 )
        {
            $where .= ' AND A.reasonCancellationId = ?';
            $args[] = $reasonCancellationId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Lock reason search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for interchange type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteInterchangeType(&$context)
    {
        $sql = 'SELECT A.interchangeTypeId,
                       A.description AS interchangeTypeDescription
                     FROM acdInterchangeType A
                 WHERE A.interchangeTypeId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for interchange type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupInterchangeType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $interchangeTypeId = $lookup->getFilterValue('interchangeTypeId');
        $description       = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('interchangeTypeId', $interchangeTypeId, _M('Code', $module),             FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',       $description,       _M('Interchange type', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('interchangeTypeId', _M('Code', $module),             'right', true, null, true),
            new DataGridColumn('description',       _M('Interchange type', $module), 'left',  true, null, true)
        );

        $sql = ' SELECT A.interchangeTypeId,
                       A.description
                  FROM acdInterchangeType A';

        if ( strlen((string)$interchangeTypeId) > 0 )
        {
            $where .= ' AND A.interchangeTypeId = ?';
            $args[] = $interchangeTypeId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Interchange type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for knowledge area
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteKnowledgeArea(&$context)
    {
        $sql = 'SELECT A.name AS knowledgeAreaName,
                       A.brief
                  FROM acdKnowledgeArea A
                 WHERE A.knowledgeAreaId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for knowledge area
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupKnowledgeArea(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $knowledgeAreaId   = $lookup->getFilterValue('knowledgeAreaId');
        $knowledgeAreaName = $lookup->getFilterValue('knowledgeAreaName');

        $lookup->addFilterField( new MTextField('knowledgeAreaId',   $knowledgeAreaId,   _M('Code', $module),           FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('knowledgeAreaName', $knowledgeAreaName, _M('Knowledge area', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('knowledgeAreaId',   _M('Code', $module),           'right', true, null, true),
            new DataGridColumn('knowledgeAreaName', _M('Knowledge area', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT A.knowledgeAreaId,
                       A.name AS knowledgeAreaName,
                       A.brief
                  FROM acdKnowledgeArea A';

        if ( strlen((string)$knowledgeAreaId) > 0 )
        {
            $where .= ' AND A.knowledgeAreaId = ?';
            $args[] = $knowledgeAreaId;
        }
        if ( strlen((string)$knowledgeAreaName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?)';
            $args[] = $knowledgeAreaName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Knowledge area search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for curricular component
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurricularComponent(&$context)
    {
        $sql = 'SELECT A.curricularComponentVersion AS curricularComponentVersion,
                       A.name AS curricularComponentName
                  FROM acdCurricularComponent X
             LEFT JOIN acdCurricularComponent A
                    ON ( X.curricularComponentId = A.curricularComponentId AND
                         ( SELECT COUNT(*)
                             FROM acdCurricularComponent Y
                            WHERE Y.curricularComponentId = X.curricularComponentId ) = 1 )
                 WHERE X.curricularComponentId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurricularComponent(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getFilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');

        $lookup->addFilterField( new MTextField('curricularComponentId',      $curricularComponentId,      _M('Code',$module),                 FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Version',$module),              FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName',    $curricularComponentName,    _M('Curricular component',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('curricularComponentId',      _M('Code', $module),       'left',  true, null, true),
           new DataGridColumn('curricularComponentVersion', _M('Version', $module),    'right', true, null, true),
           new DataGridColumn('curricularComponentName',    _M('Curricular component', $module), 'left',  true, null, true),
           new DataGridColumn('lessonNumberHours',    _M('Number hours', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.curricularComponentId,
                       A.curricularComponentVersion,
                       A.name AS curricularComponentName,
                       A.lessonNumberHours
                  FROM acdCurricularComponent A';

        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(A.name) ILIKE TO_ASCII(?) OR TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name,
                           A.curricularComponentVersion DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        if ( $MIOLO->checkAccess('academic',ACD_INSERT, false, true ) )
        {
            $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('academic', 'main:register:curricularComponent:curricularComponent&event=tbBtnNew:click&function=insert', null, null) . '">' . _M('Insert new', 'basic') . '</a></center></b><br>';
        }

    }

    /**
     * Auto complete for curricular component
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurricularComponentOccurrenceGroup(&$context)
    {
        //DEPRECATED
        $sql = 'SELECT MAX(A.curricularComponentVersion) AS curricularComponentVersion,
                       A.name AS curricularComponentName
                  FROM acdGroup B
            INNER JOIN acdCurriculum C
                    ON (B.curriculumId = C.curriculumId)
            INNER JOIN acdCurricularComponent A
                    ON (A.curricularcomponentid = C.curricularcomponentid)
            INNER JOIN acdLearningPeriod D
                    ON (D.learningPeriodId = B.learningPeriodId)
                 WHERE A.curricularComponentId = ?
              GROUP BY A.name';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurricularComponentOccurrenceGroup(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');
        $periodId                   = $lookup->getFilterValue('periodId');
        $unitId                     = $lookup->getfilterValue('unitId');
        $turnId                     = $lookup->getfilterValue('turnId');
        $courseId                   = $lookup->getfilterValue('courseId');
        $courseVersion              = $lookup->getfilterValue('courseVersion');
        $courseName                 = $lookup->getfilterValue('courseName');
        $curricularComponentId      = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getfilterValue('curricularComponentName');
        $weekDayId                  = $lookup->getfilterValue('weekDayId');


        $lookup->addFilterField( new MTextField('groupId',        $groupId,        _M('Offered curricular component id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',       $periodId,       _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',       $courseId,       _M('Course id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',  $courseVersion,  _M('Course version', $module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',     $courseName,     _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::weekDay($weekDayId) );
        $lookup->addFilterField( new MTextField('room',     $room,     _M('Room', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('building', $building, _M('Building', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId',    $learningPeriodId,    _M('Learning period id',$module),    FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('groupId',                     _M('Offered curricular component id', $module),                     'right', true, null, true),
            new DataGridColumn('groupGroupName',              _M('Offered curricular component name', $module),                     'left',  false, null, true),
            new DataGridColumn('subGroup',                    _M('Sub group', $module),                     'left',  true, null, true),
            new DataGridColumn('courseId',                    _M('Course id', $module),                     'left',  true, null, true),
            new DataGridColumn('courseVersion',               _M('Course version', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentId',       _M('Curricular component id', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentVersion',  _M('Curricular component version', $module),           'left',  true, null, true),
            new DataGridColumn('curricularComponentName',     _M('Curricular component', $module),                     'left',  true, null, true),
            new DataGridColumn('unitDescription',             _M('Unit', $module),                     'left', true, null, true),
            new DataGridColumn('turnDescription',             _M('Turn', $module),                     'left', true, null, true),
            new DataGridColumn('learningPeriodId',            _M('Learning period', $module),                     'left',  true, null, true)
        );

        $sql = 'SELECT B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       A.scheduleId,
                       A.groupId,
                       B3.shortName AS groupGroupName,
                       A.subGroup,
                       A.unitId,
                       C.description AS unitDescription,
                       A.weekDayId,
                       E.description AS weekDayDescription,
                       A.scheduleLearningPeriodId,
                       I.description AS scheduleLearningPeriodDescription,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       F.description AS physicalResourceDescription,
                       A.numCredits,
                       A.discounting,
                       A.weight,
                       A.leaderId,
                       G.name,
                       A.subleaderId,
                       H.name,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       getTurnDescription(I.turnId) as turnDescription,
                       TO_CHAR(I.beginHour,\'' . MASK_TIME . '\') as beginHour,
                       TO_CHAR(I.endHour,\'' . MASK_TIME . '\') as endHour,
                       TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') as beginDate,
                       TO_CHAR(I.endDate,\'' . MASK_DATE . '\') as endDate,
                       A2.professorId,
                       A3.name as professorName,
                       B.learningPeriodId as learningPeriodId
                  FROM acdSchedule A
            INNER JOIN acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdScheduleProfessor A2
                    ON ( A.scheduleId = A2.scheduleId )
        LEFT JOIN ONLY basPhysicalPersonProfessor A3
                    ON ( A3.personId = A2.professorId )
             LEFT JOIN acdLearningPeriod B5
                    ON (B.learningPeriodId = B5.learningPeriodId)
             LEFT JOIN basUnit C
                    ON (C.unitId = A.unitId)
             LEFT JOIN basWeekDay E
                    ON (E.weekDayId = A.weekDayId)
             LEFT JOIN insPhysicalResource F
                    ON (    F.physicalResourceId      = A.physicalResourceId
                        AND F.physicalResourceVersion = A.physicalResourceVersion)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (A.leaderId = G.personId)
        LEFT JOIN ONLY basPhysicalPersonStudent H
                    ON (A.subleaderId = H.personId)
             LEFT JOIN acdScheduleLearningPeriod I
                    ON (A.scheduleLearningPeriodId = I.scheduleLearningPeriodId )';

        if ( strlen((string)$scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $scheduleId;
        }
        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND I.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$weekDayId) > 0 )
        {
            $where .= ' AND A.weekDayId ILIKE ?';
            $args[] = $weekDayId;
        }
        if ( strlen((string)$room) > 0 )
        {
            $where .= ' AND F.room = ?';
            $args[] = $room;
        }
        if ( strlen((string)$building) > 0 )
        {
            $where .= ' AND F.building = ?';
            $args[] = $building;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B4.name) ILIKE TO_ASCII(?) OR TO_ASCII(B4.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B3.name) ILIKE TO_ASCII(?) OR TO_ASCII(B3.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$scheduleProfessorId) > 0 )
        {
            $where .= ' AND A2.scheduleProfessorId = ?';
            $args[] = $scheduleProfessorId;
        }
        if ( strlen((string)$professorId) > 0 )
        {
            $where .= ' AND A2.professorId = ?';
            $args[] = $professorId;
        }
        if ( strlen((string)$professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(A3.name) ILIKE TO_ASCII(?)';
            $args[] = $professorName . '%';
        }
        if ( strlen((string)$learningPeriodId) )
        {
            $where .= ' AND B.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.scheduleId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component occurrence group search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for curriculum
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurriculum(&$context)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.shortname AS courseName,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.unitId,
                       D.description  AS unitDescription
                  FROM acdCurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN basUnit D
                    ON (A.unitId = D.unitId)
                 WHERE A.curriculumId = ?
                   AND C.endDate IS NULL' ;

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curriculum
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurriculum(&$lookup)
    {
        global $MIOLO;
        $module           = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curriculumId               = $lookup->getfilterValue('curriculumId');
        $isElective                 = $lookup->getfilterValue('isElective');
        $courseId                   = $lookup->getfilterValue('courseId');
        $courseId                   = strlen((string)$courseId)>0 ? $courseId : $learningPeriod->courseId;
        $courseVersion              = $lookup->getfilterValue('courseVersion');
        $courseVersion              = strlen((string)$courseVersion)>0 ? $courseVersion : $learningPeriod->courseVersion;
        $courseName                 = $lookup->getfilterValue('courseName');
        $curricularComponentId      = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getfilterValue('curricularComponentName');
        $semester                   = $lookup->getfilterValue('semester');
        $turnId                     = $lookup->getfilterValue('turnId');
        $unitId                     = $lookup->getfilterValue('unitId');

        $lookup->addFilterField( new MTextField('curriculumId',  $curriculumId, _M('Code', $module),           FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Course id', $module),      FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course', $module),           FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentId',  $curricularComponentId,      _M('Curricular component id', $module),      FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName,    _M('Curricular component', $module),             FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('semester', $semester, _M('Semester', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('turnId', $turnId) );
        $lookup->addFilterField( new MHiddenField('unitId', $unitId) );

        $columns = array(
           new DataGridColumn('curriculumId',               _M('Curriculum id', $module),               'right', true, null, false),
           new DataGridColumn('curricularComponentId',      _M('Curricular component id', $module),               'left',  true, null, true),
           new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module),     'right', true, null, true),
           new DataGridColumn('curricularComponentName',    _M('Curricular component', $module),               'left',  true, null, true),
           new DataGridColumn('semester',                   _M('Semester', $module),               'left',  true, null, true),
           new DataGridColumn('courseId',                   _M('Course id', $module),               'left',  true, null, true),
           new DataGridColumn('courseVersion',              _M('Course version', $module),               'right', true, null, true),
           new DataGridColumn('courseName',                 _M('Course', $module),               'left',  true, null, true),
           new DataGridColumn('turnId',                     _M('Turn id', $module),               'right', true, null, false),
           new DataGridColumn('turnDescription',            _M('Turn', $module),               'left',  true, null, true),
           new DataGridColumn('unitId',                     _M('Unit id', $module),               'right', true, null, false),
           new DataGridColumn('unitDescription',            _M('Unit', $module),               'left',  true, null, true),
        );

        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName AS courseName,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.shortName AS curricularComponentName,
                       A.unitId,
                       getUnitDescription(A.unitId) as unitDescription,
                       A.turnId,
                       getTurnDescription(A.turnId) as turnDescription,
                       A.semester
                  FROM acdCurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)';

        if ( strlen((string)$curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $curriculumId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B.name) ILIKE TO_ASCII(?) OR TO_ASCII(B.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$semester) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $semester;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }

        if ( $isElective == DB_TRUE )
        {
            $where .= ' AND A.curricularComponentTypeId IN ( ' . CURRICULAR_COMPONENT_TYPE_ELECTIVE . ')';
        }

        $where .= ' AND C.endDate IS NULL';

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name,
                           C.name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curriculum search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for regimen
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteRegimen(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdRegimen A
                 WHERE A.regimenId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for regimen
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupRegimen(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $regimenId   = $lookup->getFilterValue('regimenId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('regimenId',   $regimenId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Regimen',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('regimenId',   _M('Code', $module),    'right', true, null, true),
           new DataGridColumn('description', _M('Regimen', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.regimenId,
                       A.description
                  FROM acdRegimen A';

        if ( strlen((string)$regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ?';
            $args[] = $regimenId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Regimen search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for group
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteGroup(&$context)
    {
        $sql = 'SELECT B3.shortName AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId
                  FROM acdGroup B
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdLearningPeriod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
                 WHERE B.groupId = ?
              ORDER BY B2.curricularComponentVersion DESC
                 LIMIT 1';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for group
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupGroup(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $groupId                     = $lookup->getfilterValue('groupId');
        $periodId                    = $lookup->getfilterValue('periodId');
        $learningPeriodId            = $lookup->getfilterValue('learningPeriodId');
        $courseId                    = $lookup->getfilterValue('courseId');
        $courseVersion               = $lookup->getfilterValue('courseVersion');
        $courseName                  = $lookup->getfilterValue('courseName');
        $curricularComponentId       = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion  = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName     = $lookup->getfilterValue('curricularComponentName');
        $curriculumTypeId            = $lookup->getfilterValue('curriculumTypeId');
        $className                   = $lookup->getfilterValue('className');

        $lookup->addFilterField( new MTextField('groupId',          $groupId,          _M('Code', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',         $periodId,         _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',         $courseId,         _M('Course id', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',    $courseVersion,    _M('Course version', $module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',       $courseName,       _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('learningPeriodId', $learningPeriodId, _M('Learning period', $module), FIELD_ID_LOOKUP_SIZE) );

        $business = $MIOLO->getBusiness($module, 'BusCurriculumType');

        $lookup->addFilterField( new MSelection('curriculumTypeId', $curriculumTypeId,    _M('Curriculum type id', $module),   $business->listCurriculumType()) );

        $lookup->addFilterField( new MTextField('className', $className, _M('Class name', $module), FIELD_ID_LOOKUP_SIZE) );



        $columns = array(
            new DataGridColumn('groupId',                     _M('Code', $module),                     'right', true, null, true),
            new DataGridColumn('groupGroupName',              _M('Offered curricular component name', $module),                     'left',  false, null, true),
            new DataGridColumn('periodId',                    _M('Period', $module),                     'left',  true, null, true),
            new DataGridColumn('learningPeriodId',            _M('Learning period', $module),                     'left',  true, null, true),
            new DataGridColumn('courseId',                    _M('Course id', $module),                     'left',  true, null, true),
            new DataGridColumn('courseVersion',               _M('Course version', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentId',       _M('Curricular component id', $module),                     'left',  true, null, true),
            new DataGridColumn('curricularComponentVersion',  _M('Curricular component version', $module),           'left',  true, null, true),
            new DataGridColumn('curricularComponentName',     _M('Curricular component', $module),                     'left',  true, null, true),
            new DataGridColumn('className',                   _M('Class name', $module),                     'left',  true, null, true),
        );

        $sql = 'SELECT B.groupId,
                       B3.shortName AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId,
                       B6.name as className
                  FROM acdGroup B
            INNER JOIN acdCurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN acdLearningPeriod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
             LEFT JOIN acdClass B6
                    ON (B6.classId = B.classId)';

        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND B.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND B5.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B4.name) ILIKE TO_ASCII(?) OR TO_ASCII(B4.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B3.name) ILIKE TO_ASCII(?) OR TO_ASCII(B3.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen((string)$curriculumTypeId) > 0 )
        {
            $where .= ' AND B2.curriculumTypeId = ?';
            $args[] = $curriculumTypeId;
        }

        if ( strlen((string)$className) > 0 )
        {
            $where .= ' AND TO_ASCII(B6.name) ILIKE TO_ASCII(?)';
            $args[] = $className;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.groupId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Group search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

        $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('academic', 'groupLookup', '', $_GET) . '">' . _M('Insert new', 'basic') . '</a></center></b><br>';
    }

    /**
     * Auto complete for contract state field
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteContractStateField(&$context)
    {
        $sql = 'SELECT A.stateContractId,
                       B.description AS stateDescription,
                       A.description,
                       A.rows,
                       A.columns,
                       A.isLookup,
                       A.lookupName,
                       A.lookupModule,
                       A.fieldValidator,
                       A.isRequired
                  FROM acdStateContractField A
             LEFT JOIN acdStateContract B
                    ON (B.stateContractId = A.stateContractId)
                 WHERE A.stateContractFieldId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupContractStateField(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $stateContractFieldId          = $lookup->getfilterValue('stateContractFieldId');
        $stateContractId               = $lookup->getfilterValue('stateContractId');
        $stateContractDescription      = $lookup->getfilterValue('stateContractDescription');
        $isRequired                    = $lookup->getfilterValue('isRequired');
        $stateContractFieldDescription = $lookup->getfilterValue('stateContractFieldDescription');

        $lookup->addFilterField( new MTextField('stateContractFieldId', $stateContractFieldId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('stateContractFieldDescription',          $stateContractFieldDescription, _M('State contract field', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('stateContractId', $stateContractId, _M('State contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('stateContractDescription', $stateDescription, _M('State contract', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MSelection('isRequired', $isRequired, _M('Is it required', $module), SAGU::listYesNo()) );

        $gridColumns = array(
            new DataGridColumn('stateContractFieldId',          _M('Code', $module), 'right', true, null, true),
            new DataGridColumn('stateContractFieldDescription', _M('State contract field', $module), 'left',  true, null, true),
            new DataGridColumn('stateContractId',               _M('State contract id', $module), 'right', true, null, true),
            new DataGridColumn('stateContractDescription',      _M('State contract', $module), 'left',  true, null, true),
            new DataGridColumn('isRequired',                    _M('Is it required', $module), 'left',  true, null, true, array(DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module)))
        );

        $sql = 'SELECT A.stateContractFieldId,
                       A.stateContractId,
                       A.description as stateContractFieldDescription,
                       B.description as stateContractDescription,
                       A.rows,
                       A.columns,
                       A.isLookup,
                       A.lookupName,
                       A.lookupModule,
                       A.fieldValidator,
                       A.isRequired
                  FROM acdStateContractField A
            INNER JOIN acdStateContract B
                    ON (B.stateContractId = A.stateContractId)';

        if ( strlen((string)$stateContractFieldId) > 0 )
        {
            $where .= ' AND A.stateContractFieldId = ?';
            $args[] = $stateContractFieldId;
        }
        if ( strlen((string)$stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }
        if ( strlen((string)$stateContractFieldDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $stateContractFieldDescription . '%';
        }
        if ( strlen((string)$stateContractDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $stateContractDescription . '%';
        }
        if ( strlen((string)$isRequired) > 0 )
        {
            $where .= ' AND A.isRequired = ?';
            $args[] = $isRequired;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $gridColumns, _M('Contract state field search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteEnroll(&$context)
    {
        $sql = 'SELECT A.contractId,
                       A.groupId,
                       A.curriculumId,
                       B.personId,
                       D.courseId,
                       D.courseVersion,
                       A.note,
                       A.examNote,
                       A.isInternet,
                       A.isSetFree,
                       E.shortName AS groupName,
                       D.curricularComponentId,
                       D.curricularComponentVersion,
                       E.name as curricularComponentName,
                       F.personId,
                       D2.shortName as courseName,
                       F.name,
                       C2.periodId,
                       C2.learningPeriodId
                  FROM acdEnroll A
                  LEFT JOIN acdContract B
                    ON ( A.contractId = B.contractId )
                 INNER JOIN ONLY acdGroup C
                    ON ( C.groupId = A.groupId )
             LEFT JOIN acdLearningPeriod C2
                    ON ( C.learningPeriodId = C2.learningPeriodId )
                  LEFT JOIN acdCurriculum D
                    ON ( A.curriculumId = D.curriculumId )
                  LEFT JOIN acdCourse D2
                    ON ( D.courseId = D2.courseId )
                  LEFT JOIN acdCurricularComponent E
                    ON ( D.curricularComponentId= E.curricularComponentId )
                  LEFT JOIN ONLY basPerson F
                    ON ( F.personId = B.personId )
                 WHERE A.enrollId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEnroll(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $enrollId                   = $lookup->getfilterValue('enrollId');
        $personId                   = $lookup->getfilterValue('personId');
        $contractId                 = $lookup->getfilterValue('contractId');
        $groupId                    = $lookup->getfilterValue('groupId');
        $periodId                   = $lookup->getfilterValue('periodId');
        $learningPeriodId           = $lookup->getfilterValue('learningPeriodId');
        $curriculumId               = $lookup->getfilterValue('curriculumId');
        $courseId                   = $lookup->getfilterValue('courseId');
        $courseVersion              = $lookup->getfilterValue('courseVersion');
        $courseName                 = $lookup->getfilterValue('courseName');
        $curricularComponentId      = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getfilterValue('curricularComponentName');


        $lookup->addFilterField( new MTextField('enrollId',      $enrollId,      _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId',      $personId,      _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('contractId',    $contractId,    _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('groupId',       $groupId,       _M('Offered curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',      $periodId,      _M('Period', $module),      FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curriculumId',  $curriculumId,  _M('Curriculum id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Course id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentId',   $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion',   $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId', $learningPeriodId, _M('Learning period', $module), FIELD_ID_LOOKUP_SIZE) );


        $gridColumns = array(
            new DataGridColumn('enrollId',         _M('Code', $module),           'left', true, null, true),
            new DataGridColumn('personId',         _M('Person id', $module),       'left',  true, null, true),
            new DataGridColumn('contractId',       _M('Contract id', $module),     'left', true, null, true),
            new DataGridColumn('groupId',          _M('Offered curricular component id', $module),        'left',  true, null, true),
            new DataGridColumn('groupName',        _M('Offered curricular component name', $module),      'left',  false, null, true),
            new DataGridColumn('periodId',         _M('Period', $module),          'left',  true, null, true),
            new DataGridColumn('learningPeriodId', _M('Learning period', $module), 'left',  true, null, true),
            new DataGridColumn('curriculumId',     _M('Curriculum id', $module),   'left',  true, null, true),
            new DataGridColumn('courseId',         _M('Course id', $module),       'left',  true, null, true),
            new DataGridColumn('courseVersion',    _M('Course version', $module),  'left',  true, null, true),
            new DataGridColumn('courseName',       _M('Course', $module),          'left',  true, null, true),
            new DataGridColumn('curricularComponentId',      _M('Curricular component id', $module),      'right', true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'right',  true, null, true),
            new DataGridColumn('curricularComponentName',    _M('Curricular component', $module),    'left',  true, null, true)

        );

        $sql = 'SELECT A.enrollId,
                       A.contractId,
                       A.groupId,
                       A.curriculumId,
                       B.personId,
                       D.courseId,
                       D.courseVersion,
                       A.note,
                       A.examNote,
                       A.isInternet,
                       A.isSetFree,
                       E.shortName AS groupName,
                       D.curricularComponentId,
                       D.curricularComponentVersion,
                       E.name as curricularComponentName,
                       F.personId,
                       D2.shortName as courseName,
                       F.name,
                       C2.periodId,
                       C2.learningPeriodId
                  FROM acdEnroll A
                  LEFT JOIN acdContract B
                    ON ( A.contractId = B.contractId )
                 INNER JOIN ONLY acdGroup C
                    ON ( C.groupId = A.groupId )
             LEFT JOIN acdLearningPeriod C2
                    ON ( C.learningPeriodId = C2.learningPeriodId )
                  LEFT JOIN acdCurriculum D
                    ON ( A.curriculumId = D.curriculumId )
                  LEFT JOIN acdCourse D2
                    ON ( D.courseId = D2.courseId )
                  LEFT JOIN acdCurricularComponent E
                    ON ( D.curricularComponentId= E.curricularComponentId )
                  LEFT JOIN ONLY basPerson F
                    ON ( F.personId = B.personId )';

        if ( strlen((string)$enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $enrollId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND C2.periodId = ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND C2.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen((string)$curriculumiId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $curriculumId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(D2.name) ILIKE TO_ASCII(?) OR TO_ASCII(D2.shortName) ILIKE TO_ASCII(?))';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(E.name) ILIKE TO_ASCII(?) OR TO_ASCII(E.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        else
        {
            $where .= ' AND A.enrollId = 0';
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.enrollId';
        }

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $gridColumns, _M('Enroll search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteEnrollContractPerson(&$context)
    {

        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM acdEnroll A
             LEFT JOIN acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN acdCurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)
                 WHERE A.enrollId = ? ';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEnrollContractPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $enrollId                   = $lookup->getfilterValue('enrollId');
        $curricularComponentId      = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getfilterValue('curricularComponentName');
        $contractId                 = $lookup->getfilterValue('contractId');
        $courseId                   = $lookup->getfilterValue('courseId');
        $courseVersion              = $lookup->getfilterValue('courseVersion');
        $courseName                 = $lookup->getfilterValue('courseName');
        $personId                   = $lookup->getfilterValue('personId');
        $personName                 = $lookup->getfilterValue('personName');
        $notCurriculumTypeId        = $lookup->getfilterValue('notCurriculumTypeId');

        $lookup->addFilterField( new MTextField('enrollId', $enrollId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Person Id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('notCurriculumTypeId', $notCurriculumTypeId, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $gridColumns = array(
            new DataGridColumn('enrollId',                _M('Enroll id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentId',   _M('Curricular component id', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentName', _M('Curricular component name', $module), 'left',  true, null, true),
            new DataGridColumn('contractId',              _M('Contract id', $module), 'right', true, null, true),
            new DataGridColumn('courseId',                _M('Course id', $module),   'left',  true, null, true),
            new DataGridColumn('courseVersion',           _M('Course version', $module),   'left',  true, null, true),
            new DataGridColumn('courseName',              _M('Course', $module),      'left',  true, null, true),
            new DataGridColumn('personId',                _M('Person id', $module),   'left',  true, null, true),
            new DataGridColumn('personName',              _M('Person', $module),      'left',  true, null, true)
        );

        $sql = 'SELECT A.enrollId,
                       E.curricularComponentId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM acdEnroll A
             LEFT JOIN acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN acdCurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)';

        if ( strlen((string)$enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $enrollId;
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(F.name) ilike TO_ASCII(?) OR TO_ASCII(F.shortName) ilike TO_ASCII(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND G.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(G.name) ilike TO_ASCII(?)';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(E.name) ILIKE TO_ASCII(?) OR TO_ASCII(E.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$notCurriculumTypeId) > 0 )
        {
            $where .= ' AND D.curriculumTypeId NOT IN ('.$notCurriculumTypeId.')';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        else
        {
            $where .= ' AND A.enrollId = 0';
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.enrollId';
        }

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $gridColumns, _M('Enroll search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract state field
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteMovementContract(&$context)
    {

        $sql = 'SELECT A.contractId,
                       B.personId,
                       C.name as personName,
                       A.stateContractId,
                       D.description,
                       A.stateTime,
                       A.reasonId,
                       A.learningPeriodId
                  FROM acdMovementContract A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON ( B.personId = C.personId )
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
                 WHERE A.contractId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupMovementContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $contractId           = $lookup->getfilterValue('contractId');
        $personId             = $lookup->getfilterValue('personId');
        $stateContractId      = $lookup->getfilterValue('stateContractId');

        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Person id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('stateContractId', $stateContractId, _M('State id', $module), FIELD_ID_LOOKUP_SIZE) );

        $gridColumns = array(
            new DataGridColumn('contractId',           _M('Contract id', $module), 'right', true, null, true),
            new DataGridColumn('personId',             _M('Person id', $module),   'right', true, null, true),
            new DataGridColumn('personName',           _M('Person name', $module), 'left', true, null, true),
            new DataGridColumn('stateContractId',      _M('State id', $module),    'right', true, null, true),
            new DataGridColumn('stateDescription',     _M('State description', $module), 'left',  true, null, true),
            new DataGridColumn('stateTime',            _M('Time', $module),        'left', true, null, true),
        );

        $sql = 'SELECT A.contractId,
                       B.personId,
                       C.name as personName,
                       A.stateContractId,
                       D.description as stateDescription,
                       TO_CHAR(A.stateTime,\'' . MASK_TIMESTAMP . '\') as stateTime,
                       A.reasonId,
                       A.learningPeriodId
                  FROM acdMovementContract A
             LEFT JOIN acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (B.personId = C.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)';

        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.contractId, stateTime DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $gridColumns, _M('Movement contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for event type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteEvent(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdEvent A
                 WHERE A.eventId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for event type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEvent(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $eventId     = $lookup->getFilterValue('eventId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('eventId',     $eventId,     _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Event',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('eventId',     _M('Code', $module),  'right', true, null, true),
           new DataGridColumn('description', _M('Event', $module), 'left',  true, null, true),
           new DataGridColumn('beginDate',   _M('Begin', $module), 'left',  true, null, true),
           new DataGridColumn('endDate',     _M('End', $module),   'left',  true, null, true)
        );

        $sql = 'SELECT A.eventId,
                       A.description,
                        TO_CHAR(A.beginDate,\'' . MASK_DATE . '\') as beginDate,
                        TO_CHAR(A.endDate,\'' . MASK_DATE . '\') as endDate
                  FROM acdEvent A ';

        if ( strlen((string)$eventId) > 0 )
        {
            $where .= ' AND A.eventId = ?';
            $args[] = $eventId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Event search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for state contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteStateContract(&$context)
    {
        $sql = 'SELECT A.description
                  FROM acdStateContract A
                 WHERE A.stateContractId = ?';

        $context->setContext('academic', $sql);
    }
    
    public function autoCompletePrice(&$context)
    {

    	$sql = 'SELECT max(value+value2)
                  FROM finPrice A
                 WHERE A.value+a.value2 = ?';

        $context->setContext('academic', $sql);   
    }

    /**
     * Lookup for state contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupStateContract(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $stateContractId = $lookup->getFilterValue('stateContractId');
        $description     = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('stateContractId', $stateContractId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description',     $description,     _M('State contract',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
           new DataGridColumn('stateContractId', _M('Code', $module),           'right', true, null, true),
           new DataGridColumn('description',     _M('State contract', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.stateContractId,
                       A.description
                  FROM acdStateContract A ';

        if ( strlen((string)$stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('State contract search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for evaluation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteEvaluation(&$context)
    {
        $sql = 'SELECT A.scheduleProfessorId,
                        A.degreeId,
                        A.description,
                        TO_CHAR(A.dateForecast,\'' . MASK_DATE . '\'),
                        A.weight
                 FROM acdEvaluation A
                 WHERE A.evaluationId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for degree
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEvaluation(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $evaluationId               = $lookup->getFilterValue('evaluationId');
        $professorId                = $lookup->getFilterValue('professorId');
        $professorName              = $lookup->getFilterValue('professorName');
        $courseId                   = $lookup->getFilterValue('courseId');
        $courseVersion              = $lookup->getFilterValue('courseVersion');
        $courseName                 = $lookup->getFilterValue('courseName');
        $turnId                     = $lookup->getFilterValue('turnId');
        $unitId                     = $lookup->getFilterValue('unitId');
        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getFilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');
        $periodId                   = $lookup->getFilterValue('periodId');
        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');
        $degreeId                   = $lookup->getFilterValue('degreeId');
        $description                = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('professorId',      $professorId,      _M('Professor id', $module),          FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorName',    $professorName,    _M('Professor', $module),             FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId', $learningPeriodId, _M('Learning period', $module),       FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',         $periodId,         _M('Period', $module),                FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',         $courseId,         _M('Course id', $module),             FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseVersion',    $courseVersion,    _M('Course version', $module),        FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseName',       $courseName,       _M('Course', $module),                FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId,      _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('Curricular component version', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('curricularComponentName',  $curricularComponentName,    _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );

        $columns = array(
            new DataGridColumn('scheduleProfessorId',       _M('Code', $module), 'right', true, null, true),
            new DataGridColumn('learningPeriodId',          _M('Learning period', $module), 'right', true, null, true),
            new DataGridColumn('periodId',                  _M('Period', $module), 'right', true, null, true),
            new DataGridColumn('courseId',                 _M('Course id', $module), 'right', true, null, true),
            new DataGridColumn('courseVersion',            _M('Course version', $module), 'right', true, null, true),
            new DataGridColumn('courseName',               _M('Course', $module), 'left',  true, null, true),
            new DataGridColumn('turnId',                   _M('Turn id', $module),'right', true, null, false),
            new DataGridColumn('turn',                     _M('Turn', $module), 'left', true, null, true),
            new DataGridColumn('unitId',                   _M('Unit id', $module), 'right', true, null, false),
            new DataGridColumn('unit',                     _M('Unit', $module), 'left', true, null, true),
            new DataGridColumn('curricularComponentId',    _M('Curricular component id', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentName',  _M('Curricular component', $module),'left', true, null, true),
            new DataGridColumn('professorId',              _M('Professor id', $module), 'right', true, null, true),
            new DataGridColumn('professorName',            _M('Professor', $module), 'left',  true, null, true),
            new DataGridColumn('degreeId',                 _M('Degree id', $module),  'right', true, null, false),
            new DataGridColumn('degreeDescription',        _M('Academic degree', $module), 'left', true, null, true),
            new DataGridColumn('evaluationdescription',    _M('Evaluation', $module), 'left', true, null, true),
            new DataGridColumn('weight',                   _M('Weight', $module), 'right', true, null, true)
        );

        $sql = ' SELECT C.scheduleProfessorId,
                        C.professorId,
                        getPersonName(C.professorId) AS professorName,
                        I.degreeId,
                        I.description AS degreeDescription,
                        A.learningPeriodId,
                        F.periodId,
                        F.courseId,
                        F.courseVersion,
                        getCourseShortName(F.courseId) as courseName,
                        K.turnId,
                        getTurnDescription(K.turnId) as turn,
                        B.unitId,
                        getunitDescription(B.unitId) as unit,
                        D.curricularComponentId,
                        D.curricularComponentVersion,
                        getCurricularComponentShortName(D.curricularComponentId) as curricularComponentName,
                        C2.evaluationId,
                        C2.description as evaluationDescription,
                        C2.weight
                   FROM acdGroup A,
                        acdSchedule B
              LEFT JOIN acdScheduleLearningperiod K
                     ON ( K.scheduleLearningPeriodId = B.scheduleLearningPeriodId ),
                        acdScheduleProfessor C
             INNER JOIN acdEvaluation C2
                     ON ( C.scheduleProfessorId = C2.scheduleProfessorId ),
                        acdCurriculum D,
                        acdCurricularComponent E,
                        acdLearningPeriod F,
                        acdPeriod G,
                        acdDegree I,
                        basPhysicalPersonProfessor J
                  WHERE A.groupId = B.groupId
                    AND B.scheduleId = C.scheduleId
                    AND A.curriculumId = D.curriculumId
                    AND D.curricularComponentId = E.curricularComponentId
                    AND D.curricularComponentVersion = E.curricularComponentVersion
                    AND A.learningPeriodId = F.learningPeriodId
                    AND F.periodId = G.periodId
                    AND I.learningPeriodId = F.learningPeriodId
                    AND J.personId = C.professorId ';

        if ( strlen((string)$scheduleProfessorId) > 0 )
        {
            $where .= ' AND C.scheduleProfessorId = ?';
            $args[] = $scheduleProfessorId;
        }
        if ( strlen((string)$professorId) > 0 )
        {
            $where .= ' AND C.professorId = ?';
            $args[] = $professorId;
        }
        if ( strlen((string)$professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(J.name) ILIKE TO_ASCII(?)';
            $args[] = $professorName . '%';
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND F.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND F.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND F.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(F.courseId) ILIKE ? OR getCourseName(F.courseId) ILIKE ? ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND D.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( getCurricularComponentShortName(D.curricularComponentId) ILIKE ? OR getCurricularComponentName(D.curricularComponentId) ILIKE ? ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND K.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY 2';

/*
        $sql = 'SELECT A.evaluationId,
                        A.scheduleProfessorId,
                        A.degreeId,
                        A.description,
                        TO_CHAR(A.dateForecast,\'' . MASK_DATE . '\') AS dateForecast,
                        A.weight
                 FROM acdEvaluation A
            LEFT JOIN acdScheduleProfessor B
                   ON (B.scheduleProfessorId = A.scheduleProfessorId)
       LEFT JOIN ONLY basPhysicalPersonProfessor C
                   ON (C.personId = B.professorId) ';

        if ( strlen((string)$evaluationId) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $evaluationId;
        }
        if ( strlen((string)$scheduleProfessorId) > 0 )
        {
            $where .= ' AND A.scheduleProfessorId = ?';
            $args[] = $scheduleProfessorId;
        }
        if ( strlen((string)$degreeId) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $degreeId;
        }
        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ? ';
            $args[] = $description;
        }
        if ( strlen((string)$dateForecast) > 0 )
        {
            $where .= ' AND A.dateForecast = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $dateForecast;
        }
        if ( strlen((string)$weight) > 0 )
        {
            $where .= ' AND A.weight = ?';
            $args[] = $weight;
        }
        if ( strlen((string)$professorId) > 0 )
        {
            $where .= ' AND B.professorId = ?';
            $args[] = $professorId;
        }
        if ( strlen((string)$professorName) > 0 )
        {
            $where .= ' AND C.name ILIKE ?';
            $args[] = $professorName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';
*/
        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Evaluation search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }


    /**
     * Auto complete for ScheduleProfessorDegree
     * Lookup for Form Evaluation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteScheduleProfessorDegree(&$context)
    {

        $sql = ' SELECT C.scheduleProfessorId,
                        C.professorId,
                        getpersonname(C.professorId) AS professorName,
                        I.degreeId,
                        I.description AS degreeDescription
                    FROM acdGroup A,
                        acdSchedule B,
                        acdScheduleProfessor C,
                        acdCurriculum D,
                        acdCurricularComponent E,
                        acdLearningPeriod F,
                        acdPeriod G,
                        acdDegree I,
                        basPhysicalPersonProfessor J
                    WHERE A.groupId = B.groupId
                    AND B.scheduleId = C.scheduleId
                    AND A.curriculumId = D.curriculumId
                    AND D.curricularComponentId = E.curricularComponentId
                    AND D.curricularComponentVersion = E.curricularComponentVersion
                    AND A.learningPeriodId = F.learningPeriodId
                    AND F.periodId = G.periodId
                    AND I.learningPeriodId = F.learningPeriodId
                    AND J.personId = C.professorId
                    AND C.scheduleProfessorId = ?
                    ORDER BY 2';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for schedule professor degree
     * Lookup for Form Evaluation
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupScheduleProfessorDegree(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $scheduleProfessorId        = $lookup->getFilterValue('scheduleProfessorId');
        $professorId                = $lookup->getFilterValue('professorId');
        $professorName              = $lookup->getFilterValue('professorName');
        $courseId                   = $lookup->getFilterValue('courseId');
        $courseVersion              = $lookup->getFilterValue('courseVersion');
        $courseName                 = $lookup->getFilterValue('courseName');
        $turnId                     = $lookup->getFilterValue('turnId');
        $unitId                     = $lookup->getFilterValue('unitId');
        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getFilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');
        $periodId                   = $lookup->getFilterValue('periodId');
        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');

        $lookup->addFilterField( new MTextField('scheduleProfessorId', $scheduleProfessorId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorId',         $professorId,      _M('Professor id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorName',       $professorName,    _M('Professor', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId',    $learningPeriodId, _M('Learning period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',            $periodId,         _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',            $courseId,         _M('Course id', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseVersion',       $courseVersion,    _M('Course version', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseName',          $courseName,       _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId,      _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('Curricular component version', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('curricularComponentName',  $curricularComponentName,    _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );

        $columns = array(
            new DataGridColumn('scheduleProfessorId',       _M('Code', $module), 'right', true, null, true),
            new DataGridColumn('learningPeriodId',          _M('Learning period', $module), 'right', true, null, true),
            new DataGridColumn('periodId',                  _M('Period', $module), 'right', true, null, true),
            new DataGridColumn('courseId',                 _M('Course id', $module), 'right', true, null, true),
            new DataGridColumn('courseVersion',            _M('Course version', $module), 'right', true, null, true),
            new DataGridColumn('courseName',               _M('Course', $module), 'left',  true, null, true),
            new DataGridColumn('turnId',                   _M('Turn id', $module),'right', true, null, false),
            new DataGridColumn('turn',                     _M('Turn', $module), 'left', true, null, true),
            new DataGridColumn('unitId',                   _M('Unit id', $module), 'right', true, null, false),
            new DataGridColumn('unit',                     _M('Unit', $module), 'left', true, null, true),
            new DataGridColumn('curricularComponentId',    _M('Curricular component id', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentName',  _M('Curricular component', $module),'left', true, null, true),
            new DataGridColumn('professorId',              _M('Professor id', $module), 'right', true, null, true),
            new DataGridColumn('professorName',            _M('Professor', $module), 'left',  true, null, true),
            new DataGridColumn('degreeId',                 _M('Degree id', $module),  'right', true, null, false),
            new DataGridColumn('degreeDescription',        _M('Academic degree', $module), 'left', true, null, true)
        );

        $sql = ' SELECT C.scheduleProfessorId,
                        C.professorId,
                        getPersonName(C.professorId) AS professorName,
                        I.degreeId,
                        I.description AS degreeDescription,
                        A.learningPeriodId,
                        F.periodId,
                        F.courseId,
                        F.courseVersion,
                        getCourseShortName(F.courseId) as courseName,
                        K.turnId,
                        getTurnDescription(K.turnId) as turn,
                        B.unitId,
                        getunitDescription(B.unitId) as unit,
                        D.curricularComponentId,
                        D.curricularComponentVersion,
                        getCurricularComponentShortName(D.curricularComponentId) as curricularComponentName
                   FROM acdGroup A,
                        acdSchedule B
              LEFT JOIN acdScheduleLearningperiod K
                     ON ( K.scheduleLearningPeriodId = B.scheduleLearningPeriodId ),
                        acdScheduleProfessor C,
                        acdCurriculum D,
                        acdCurricularComponent E,
                        acdLearningPeriod F,
                        acdPeriod G,
                        acdDegree I,
                        basPhysicalPersonProfessor J
                  WHERE A.groupId = B.groupId
                    AND B.scheduleId = C.scheduleId
                    AND A.curriculumId = D.curriculumId
                    AND D.curricularComponentId = E.curricularComponentId
                    AND D.curricularComponentVersion = E.curricularComponentVersion
                    AND A.learningPeriodId = F.learningPeriodId
                    AND F.periodId = G.periodId
                    AND I.learningPeriodId = F.learningPeriodId
                    AND J.personId = C.professorId ';

        if ( strlen((string)$scheduleProfessorId) > 0 )
        {
            $where .= ' AND C.scheduleProfessorId = ?';
            $args[] = $scheduleProfessorId;
        }
        if ( strlen((string)$professorId) > 0 )
        {
            $where .= ' AND C.professorId = ?';
            $args[] = $professorId;
        }
        if ( strlen((string)$professorName) > 0 )
        {
            $where .= ' AND TO_ASCII(J.name) ILIKE TO_ASCII(?)';
            $args[] = $professorName . '%';
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND F.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND F.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND F.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(F.courseId) ILIKE ? OR getCourseName(F.courseId) ILIKE ? ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND D.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( getCurricularComponentShortName(D.curricularComponentId) ILIKE ? OR getCurricularComponentName(D.curricularComponentId) ILIKE ? ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND K.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY 2';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Schedule professor and degree search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for MessageContractRenewal
     * Lookup for Form Evaluation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteMessageContractRenewal(&$context)
    {
        $sql = 'SELECT messageContractRenewalId,
                       learningPeriodId,
                       message,
                       font,
                       sequence,
                       length,
                       isListener,
                       status
                  FROM acdMessageContractRenewal
                 WHERE messageContractRenewalId = ?';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for message contract renewal
     * Lookup for Form Evaluation
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupMessageContractRenewal(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $messageContractRenewalId  = $lookup->getFilterValue('messageContractRenewalId');
        $learningPeriodId          = $lookup->getFilterValue('learningPeriodId');
        $periodId                  = $lookup->getFilterValue('periodId');
        $courseId                  = $lookup->getFilterValue('courseId');
        $courseVersion             = $lookup->getFilterValue('courseVersion');
        $courseName                = $lookup->getFilterValue('courseName');
        $turnId                    = $lookup->getFilterValue('turnId');
        $unitId                    = $lookup->getFilterValue('unitId');
        $message                   = $lookup->getFilterValue('message');
        $sequence                  = $lookup->getFilterValue('sequence');

        $lookup->addFilterField( new MTextField('messageContractRenewalId', $messageContractRenewalId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId', $learningPeriodId, _M('Learning period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId', $periodId, _M('Period', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( new MTextField('message', $message, _M('Message', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('sequence', $sequence, _M('Sequence', $module), FIELD_ID_LOOKUP_SIZE));

        $columns = array(
            new DataGridColumn('messageContractRenewalId', _M('Code', $module), 'right', true, null, false),
            new DataGridColumn('learningPeriodId',         _M('Learning period', $module), 'right', true, null, true),
            new DataGridColumn('periodId',                 _M('Period', $module), 'right', true, null, true),
            new DataGridColumn('courseId',                 _M('Course id', $module), 'right', true, null, true),
            new DataGridColumn('courseVersion',            _M('Course version', $module), 'right', true, null, true),
            new DataGridColumn('courseName',               _M('Course', $module),   'left',  true, null, true),
            new DataGridColumn('turnId',                   _M('Turn id', $module),  'right', true, null, false),
            new DataGridColumn('turn',                     _M('Turn', $module),     'left', true, null, true),
            new DataGridColumn('unitId',                   _M('Unit id', $module),  'right', true, null, false),
            new DataGridColumn('unit',                     _M('Unit', $module),     'left', true, null, true),
            new DataGridColumn('sequence',                 _M('Sequence', $module), 'right', true, null, true),
            new DataGridColumn('message',                  _M('Message', $module),  'left', true, null, true),
            new DataGridColumn('font',                     _M('Font', $module),     'left', true, null, false),
            new DataGridColumn('length',                   _M('Length', $module),   'right', true, null, false),
            new DataGridColumn('isListener',               _M('Is it listener', $module), 'right', true, null, false),
            new DataGridColumn('status',                   _M('Status', $module),   'right', true, null, true)
        );

        $sql = ' SELECT A.messageContractRenewalId,
                        A.learningPeriodId,
                        B.periodId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        A.message,
                        A.font,
                        A.sequence,
                        A.length,
                        A.isListener,
                        A.status,
                        getTurnDescription(B.turnId) as turn,
                        getUnitDescription(B.unitId) as unit,
                        getCourseShortName(B.courseId) as courseName
                   FROM acdMessageContractRenewal A,
                        acdLearningPeriod B
                  WHERE A.learningPeriodId = B.learningPeriodId';

        if ( strlen((string)$messageContractRenewalId) > 0 )
        {
            $where .= ' AND A.messageContractRenewalId = ?';
            $args[] = $messageContractRenewalId;
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$message) > 0 )
        {
            $where .= ' AND A.message ILIKE ?';
            $args[] = $message . '%';
        }
        if ( strlen((string)$sequence) > 0 )
        {
            $where .= ' AND A.sequence = ?';
            $args[] = $sequence;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY 2';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Message contract renewal search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
    /**
     * Auto complete for learning period
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteScheduleLearningPeriod(&$context)
    {

        $sql =  'SELECT A.scheduleLearningPeriodId,
                        A.learningPeriodId,
                        A.description,
                        A.turnId,
                        TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                        TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                        TO_CHAR(A.beginHour,\'' . MASK_TIME . '\'),
                        TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                        A.minimumNumberLessons,
                        A.numberHoursLessons
                    FROM acdScheduleLearningPeriod A
            WHERE A.scheduleLearningPeriodId = ?';


            $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupScheduleLearningPeriod(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $scheduleLearningPeriodId = $lookup->getFilterValue('scheduleLearningPeriodId');
        $learningPeriodId         = $lookup->getFilterValue('learningPeriodId');
        $turnId                   = $lookup->getFilterValue('turnId');
        $periodId                 = $lookup->getFilterValue('periodId');
        $courseId                 = $lookup->getFilterValue('courseId');
        $courseVersion            = $lookup->getFilterValue('courseVersion');
        $courseName               = $lookup->getFilterValue('courseName');

        $lookup->addFilterField( new MTextField('scheduleLearningPeriodId',  $scheduleLearningPeriodId, _M('Code', $module),                     FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('learningPeriodId',          $learningPeriodId,         _M('Learning period', $module),          FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('periodId',      $periodId,      _M('Period', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId',      $courseId,      _M('Course id',$module),      FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',    $courseName,    _M('Course',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::turn($turnId) );

        $columns = array(
           new DataGridColumn('scheduleLearningPeriodId',  _M('Code', $module),                'left',  true, null, true),
           new DataGridColumn('learningPeriodId',          _M('Learning period', $module),                'left',  true, null, true),
           new DataGridColumn('periodId',                  _M('Period', $module),                'left',  true, null, true),
           new DataGridColumn('courseId',                  _M('Course id', $module),                'left',  true, null, true),
           new DataGridColumn('courseVersion',             _M('Course version', $module),                'left',  true, null, true),
           new DataGridColumn('courseName',                _M('Course', $module),                'left',  true, null, true),
           new DataGridColumn('beginDate',                 _M('Begin date', $module),                'left',  true, null, true),
           new DataGridColumn('endDate',                   _M('End date', $module),                'left',  true, null, true),
           new DataGridColumn('beginHour',                 _M('Begin hour', $module),                'left',  true, null, true),
           new DataGridColumn('endHour',                   _M('End hour', $module),                'left',  true, null, true),
           new DataGridColumn('turnDescription',           _M('Turn', $module),                'left', true, null, true),
        );

        $sql =  'SELECT A.scheduleLearningPeriodId,
                        A.learningPeriodId,
                        A.description,
                        A.turnId,
                        TO_CHAR(A.beginDate,\'' . MASK_DATE . '\') as beginDate,
                        TO_CHAR(A.endDate,\'' . MASK_DATE . '\') as endDate,
                        TO_CHAR(A.beginHour,\'' . MASK_TIME . '\') as beginHour,
                        TO_CHAR(A.endHour,\'' . MASK_TIME . '\') as endHour,
                        A.minimumNumberLessons,
                        A.numberHoursLessons,
                        B.periodId,
                        B.courseId,
                        B.courseVersion,
                        C.shortName as courseName,
                        getTurnDescription(A.turnId) as turnDescription
                   FROM acdScheduleLearningPeriod A
             INNER JOIN acdLearningPeriod B
                     ON ( A.learningPeriodId = B.learningPeriodId )
             INNER JOIN acdCourse C
                     ON ( B.courseId = C.courseId ) ';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND C.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$coursename) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen((string)$scheduleLearningPeriodId) > 0 )
        {
            $where .= ' AND A.schedulelearningPeriodId = ?';
            $args[] = $scheduleLearningPeriodId;
        }
        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?::integer';
            $args[] = $learningPeriodId;
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Schedule learning period search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Lookup for elective curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupElective(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentGroupElectiveId = $lookup->getFilterValue('curricularComponentGroupElectiveId');
        $courseId                   = $lookup->getFilterValue('courseId');
        $courseVersion              = $lookup->getFilterValue('courseVersion');
        $contractId                 = $lookup->getFilterValue('contractId');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');
        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');
        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');

        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('curricularComponentGroupElectiveId', $curricularComponentGroupElectiveId ) );
        $lookup->addFilterField( new MHiddenField('courseId', $courseId ) );
        $lookup->addFilterField( new MHiddenField('courseVersion', $courseVersion ) );
        $lookup->addFilterField( new MHiddenField('contractId', $contractId ) );
        $lookup->addFilterField( new MHiddenField('learningPeriodId', $learningPeriodId ) );

        $business           = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $business->getLearningPeriod($learningPeriodId);

        $columns = array(
            new DataGridColumn(null),
            new DataGridColumn('groupId',                    _M('Offered curricular component id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentId',      _M('Curricular component id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module),     'left',  true, null, true),
            new DataGridColumn('curricularComponentName',    _M('Curricular component', $module),      'left',  true, null, true),
            new DataGridColumn('curriculumId',               _M('Curriculum id', $module),   'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('unitId',                     _M('Unit', $module), 'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('turnDescription',            _M('Turn', $module),   'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('weekDayDescription',         _M('Week day', $module),   'left',  true, null, true),
            new DataGridColumn('beginDate',                  _M('Begin date', $module),   'left',  true, null, true),
            new DataGridColumn('endDate',                    _M('End date', $module),     'left',  true, null, true),
            new DataGridColumn('beginHour',                  _M('Begin hour', $module),   'left',  true, null, true),
            new DataGridColumn('endHour',                    _M('End hour', $module),     'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn( null ),
            new DataGridColumn('physicalResourceDescription', _M('Physical resource description', $module),   'left',  true, null, true)
        );

        $sql = '     SELECT B.curricularComponentId,
                            B.curricularComponentVersion,
                            A.name as curricularComponentName,
                            B.curriculumId
                       FROM acdCurricularComponent A
                 INNER JOIN acdCurriculum B
                         ON (A.curricularComponentId = B.curricularComponentId AND
                             A.curricularComponentVersion = B.curricularComponentVersion)
                      WHERE B.curriculumId NOT IN ( SELECT A1.curriculumId
                                    FROM acdEnroll A1
                                INNER JOIN acdCurriculum B1
                                        ON (B1.curriculumId = A1.curriculumId)
                                    WHERE A1.contractId    = ?
                                    AND B1.curricularComponentId = B.curricularComponentId
                                    AND B1.curricularComponentVersion = B.curricularComponentVersion
                                    AND A1.statusId IN (' . ENROLL_STATUS_APPR_OR_EXC . ') )
                        AND A.endDate IS NULL ';
        $args[] = $contractId;

        $x = true;
        if ( $curricularComponentGroupElectiveId != NO_GROUP_ELECTIVE_ID )
        {
            $sql .= ' AND B.curricularComponentGroupDocumentEndCourseId = ?';

            $args[] = $curricularComponentGroupElectiveId;

            $x = false;
        }
        else
        {
            $sql .= ' AND B.courseId NOT IN (?)';

            $args[] = $courseId;
        }

        unset($where);
        if ( $curricularComponentName )
        {
            $where .= ' AND ( TO_ASCII(A.name) ILIKE TO_ASCII(?) OR TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName;
            $args[] = $curricularComponentName;
        }

        if ( $curricularComponentId )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen((string)$where) > 0)
        {
            $sql .= $where;
        }
        else
        {
            if ( $x ) $sql .= ' LIMIT 00';
        }

        $db = $MIOLO->getDatabase($module);

        $result = $db->query(SAGU::prepare($sql,$args));

        $business = $MIOLO->getBusiness($module, 'BusEnroll');

        $retVal = true;

        if (count($result) > 0)
        {
            foreach ( $result as $r )
            {
                if ($business->isFreeForEnroll($r[0], $r[1], $contractId, $learningPeriodId) ||
                    $business->isUnblocked($contractId, $learningPeriodId, $r[3]))
                {
                    $ccgroups = $business->getGroups($r[0], $r[1], $learningPeriodId);

                    if (count($ccgroups) > 0)
                    {
                        foreach ($ccgroups as $availableGroup)
                        {
                            $groups[] = $availableGroup[0];
                        }
                    }
                }


            }
        }
        if (count($groups) == 0)
        {
            $groups[] = 0;
        }

        unset($args);

        $sql = '     SELECT 1,
                            A.groupId,
                            C.curricularComponentId,
                            C.curricularComponentVersion,
                            C.name as curricularComponentName,
                            B.curriculumId,
                            E.unitId,
                            F.description as unitDescription,
                            J.turnId,
                            J.description,
                            G.weekDayId,
                            G.description as weekDayDescription,
                            TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') AS beginDate,
                            TO_CHAR(I.endDate,\'' . MASK_DATE . '\') AS endDate,
                            I.beginHour,
                            I.endHour,
                            H.physicalResourceId,
                            H.physicalResourceVersion,
                            H.description AS physicalResourceDescription
                       FROM acdGroup A
                 INNER JOIN acdCurriculum B
                         ON (B.curriculumId = A.curriculumId)
                 INNER JOIN acdCurricularComponent C
                         ON (C.curricularComponentId = B.curricularComponentId AND
                             C.curricularComponentVersion = B.curricularComponentVersion)
                 INNER JOIN acdLearningPeriod D
                         ON (D.learningPeriodId = A.learningPeriodId)
                  LEFT JOIN acdSchedule E
                         ON (E.groupId = A.groupId)
                  LEFT JOIN basUnit F
                         ON (F.unitId = E.unitId)
                  LEFT JOIN basWeekDay G
                         ON (G.weekDayId = E.weekDayId)
                  LEFT JOIN insPhysicalResource H
                         ON (H.physicalResourceId = E.physicalResourceId
                             AND H.physicalResourceVersion = E.physicalResourceVersion)
                  LEFT JOIN acdScheduleLearningPeriod I
                         ON (I.scheduleLearningPeriodId = E.scheduleLearningPeriodId)
                  LEFT JOIN basTurn J
                         ON (J.turnId = I.turnId)
                      WHERE A.groupId in (' . implode(',', $groups) . ')
                        AND D.periodId = ?';
        $aux = true;

        $args[] = $learningPeriodData->periodId;

        $sqlObject = new sql();

        if ( $groups[0] == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Elective curricular component search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Lookup for elective curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupClassElective(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentGroupElectiveId = $lookup->getFilterValue('curricularComponentGroupElectiveId');
        $courseId                   = $lookup->getFilterValue('courseId');
        $courseVersion              = $lookup->getFilterValue('courseVersion');
        $classId                    = $lookup->getFilterValue('classId');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');
        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');
        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');

        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('curricularComponentGroupElectiveId', $curricularComponentGroupElectiveId ) );
        $lookup->addFilterField( new MHiddenField('courseId', $courseId ) );
        $lookup->addFilterField( new MHiddenField('courseVersion', $courseVersion ) );
        $lookup->addFilterField( new MHiddenField('classId', $classId ) );
        $lookup->addFilterField( new MHiddenField('learningPeriodId', $learningPeriodId ) );

        $business           = $MIOLO->getBusiness($module, 'BusLearningPeriod');
        $learningPeriodData = $business->getLearningPeriod($learningPeriodId);

        $columns = array(
            new DataGridColumn(null),
            new DataGridColumn('groupId',                    _M('Offered curricular component id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentId',      _M('Curricular component id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module),     'left',  true, null, true),
            new DataGridColumn('curricularComponentName',    _M('Curricular component', $module),      'left',  true, null, true),
            new DataGridColumn('curriculumId',               _M('Curriculum id', $module),   'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('unitId',                     _M('Unit', $module), 'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('turnDescription',            _M('Turn', $module),   'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn('weekDayDescription',         _M('Week day', $module),   'left',  true, null, true),
            new DataGridColumn('beginDate',                  _M('Begin date', $module),   'left',  true, null, true),
            new DataGridColumn('endDate',                    _M('End date', $module),     'left',  true, null, true),
            new DataGridColumn('beginHour',                  _M('Begin hour', $module),   'left',  true, null, true),
            new DataGridColumn('endHour',                    _M('End hour', $module),     'left',  true, null, true),
            new DataGridColumn( null ),
            new DataGridColumn( null ),
            new DataGridColumn('physicalResourceDescription', _M('Physical resource description', $module),   'left',  true, null, true)
        );

        $sql = '     SELECT B.curricularComponentId,
                            B.curricularComponentVersion,
                            A.name as curricularComponentName,
                            B.curriculumId
                       FROM acdCurricularComponent A
                 INNER JOIN acdCurriculum B
                         ON (A.curricularComponentId = B.curricularComponentId AND
                             A.curricularComponentVersion = B.curricularComponentVersion)
                      WHERE A.endDate IS NULL ';

        $x = true;

        if ( $curricularComponentGroupElectiveId != NO_GROUP_ELECTIVE_ID )
        {
            $sql .= ' AND B.curricularComponentGroupDocumentEndCourseId = ?';

            $args[] = $curricularComponentGroupElectiveId;

            $x = false;
        }
        else
        {
            $sql .= ' AND B.courseId NOT IN (?)';

            $args[] = $courseId;
        }

        unset($where);
        if ( $curricularComponentName )
        {
            $where .= ' AND ( TO_ASCII(A.name) ILIKE TO_ASCII(?) OR TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName;
            $args[] = $curricularComponentName;
        }

        if ( $curricularComponentId )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen((string)$where) > 0)
        {
            $sql .= $where;
        }
        else
        {
            if ( $x ) $sql .= ' LIMIT 00';
        }

        $db = $MIOLO->getDatabase($module);

        $result = $db->query(SAGU::prepare($sql,$args));

        $business = $MIOLO->getBusiness($module, 'BusEnroll');

        $retVal = true;

        if (count($result) > 0)
        {
            foreach ( $result as $r )
            {
                $ccgroups = $business->getGroups($r[0], $r[1], $learningPeriodId);
                if (count($ccgroups) > 0)
                {
                    foreach ($ccgroups as $availableGroup)
                    {
                        $groups[] = $availableGroup[0];
                    }
                }
            }
        }
        if (count($groups) == 0)
        {
            $groups[] = 0;
        }

        unset($args);

        $sql = '     SELECT 1,
                            A.groupId,
                            C.curricularComponentId,
                            C.curricularComponentVersion,
                            C.name as curricularComponentName,
                            B.curriculumId,
                            E.unitId,
                            F.description as unitDescription,
                            J.turnId,
                            J.description,
                            G.weekDayId,
                            G.description as weekDayDescription,
                            TO_CHAR(I.beginDate,\'' . MASK_DATE . '\') AS beginDate,
                            TO_CHAR(I.endDate,\'' . MASK_DATE . '\') AS endDate,
                            I.beginHour,
                            I.endHour,
                            H.physicalResourceId,
                            H.physicalResourceVersion,
                            H.description AS physicalResourceDescription
                       FROM acdGroup A
                 INNER JOIN acdCurriculum B
                         ON (B.curriculumId = A.curriculumId)
                 INNER JOIN acdCurricularComponent C
                         ON (C.curricularComponentId = B.curricularComponentId AND
                             C.curricularComponentVersion = B.curricularComponentVersion)
                 INNER JOIN acdLearningPeriod D
                         ON (D.learningPeriodId = A.learningPeriodId)
                  LEFT JOIN acdSchedule E
                         ON (E.groupId = A.groupId)
                  LEFT JOIN basUnit F
                         ON (F.unitId = E.unitId)
                  LEFT JOIN basWeekDay G
                         ON (G.weekDayId = E.weekDayId)
                  LEFT JOIN insPhysicalResource H
                         ON (H.physicalResourceId = E.physicalResourceId
                             AND H.physicalResourceVersion = E.physicalResourceVersion)
                  LEFT JOIN acdScheduleLearningPeriod I
                         ON (I.scheduleLearningPeriodId = E.scheduleLearningPeriodId)
                  LEFT JOIN basTurn J
                         ON (J.turnId = I.turnId)
                      WHERE A.groupId in (' . implode(',', $groups) . ')
                        AND D.periodId = ?';
        $aux = true;

        $args[] = $learningPeriodData->periodId;

        $sqlObject = new sql();

        if ( $groups[0] == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Elective curricular component search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function lookupGnutecaBibliography(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $filters->controlNumber = $lookup->getFilterValue('controlNumber');
        $filters->content       = $lookup->getFilterValue('content');

        $lookup->addFilterField( new MTextField('controlNumber', $filters->controlNumber, _M('Control number', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('content', $filters->content, _M('Content', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $business           = $MIOLO->getBusiness('gnuteca', 'BusGnutecaToSagu2');
        //$learningPeriodData = $business->getLearningPeriod($learningPeriodId);

        $columns = array(
            new DataGridColumn('controlNumber', _M('Control number', $module), 'right', true, null, true),
            new DataGridColumn('title',         _M('Title', $module),          'left',  true, null, true),
            new DataGridColumn('author',        _M('Author', $module),         'left',  true, null, true),
            new DataGridColumn('issue',         _M('Issue', $module),          'left',  true, null, true),
            new DataGridColumn('local',         _M('Local', $module),          'left',  true, null, true),
            new DataGridColumn('publisher',     _M('Publisher', $module),      'left',  true, null, true),
            new DataGridColumn('year',          _M('Year', $module),           'left',  true, null, true)
        );

        $gridData = $business->searchBibliographyData($filters);


        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $gridData, $columns, _M('Gnuteca bibliography search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteProfessorGroups(&$context)
    {

        $sql = 'SELECT I.name as professorName,
                       B.weekdayId,
                       G.description as weekdayDesc,
                       C.turnId,
                       J.description as turnDesc,
                       L.room || \' - \' || L.building as local,
                       B.unitId,
                       H.description as unitDesc,
                       E.curricularComponentId,
                       E.curricularComponentVersion,
                       F.name as curricularComponentDesc,
                       C.beginHour as beginHour,
                       C.endHour as endHour
                  FROM acdGroup A
            INNER JOIN acdSchedule B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdScheduleLearningPeriod C
                    ON (C.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
            INNER JOIN acdScheduleProfessor D
                    ON (D.scheduleId = B.scheduleId AND
                        ( (SELECT COUNT(*) FROM acdScheduleProfessor X WHERE X.professorId = D.professorId) = 1 ))
            INNER JOIN acdCurriculum E
                    ON (E.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent F
                    ON (F.curricularComponentId = E.curricularComponentId AND
                        F.curricularComponentVersion = E.curricularComponentVersion)
            INNER JOIN acdLearningPeriod M
                    ON (M.learningPeriodId = A.learningPeriodId)
            INNER JOIN basWeekday G
                    ON (G.weekdayId = B.weekdayId)
            INNER JOIN basUnit H
                    ON (H.unitId = B.unitId)
            INNER JOIN basPhysicalPersonProfessor I
                    ON (I.personId = D.professorId)
            INNER JOIN basTurn J
                    ON (J.turnId = C.turnId)
            INNER JOIN insPhysicalResource L
                    ON (L.physicalResourceId = B.physicalResourceId AND
                        L.physicalResourceVersion = B.physicalResourceVersion)
                 WHERE D.professorId = ?';

            $context->setContext('academic', $sql);
    }

    public function lookupProfessorGroups(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $filters->professorId   = $lookup->getFilterValue('professorId');
        $filters->professorName = $lookup->getFilterValue('professorName');
        $filters->periodId      = $lookup->getFilterValue('periodId');

        $lookup->addFilterField( new MTextField('periodId', $filters->periodId, _M('Period', $module), FIELD_ID_LOOKUP_SIZE ) );
        $lookup->addFilterField( new MTextField('professorId', $filters->professorId, _M('Id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('professorName', $filters->professorName, _M('Name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('professorId', _M('Id', $module), 'right', true, null, false),
            new DataGridColumn('professorName', _M('Name', $module), 'left',  true, null, false),
            new DataGridColumn('weekdayId', _M('Week day id', $module), 'right',  true, null, false),
            new DataGridColumn('weekdayDesc', _M('Week day', $module), 'left',  true, null, true),
            new DataGridColumn('turnId', _M('Turn id', $module), 'right', true, null, false),
            new DataGridColumn('turnDesc', _M('Turn', $module), 'left', true, null, true),
            new DataGridColumn('local', _M('Local', $module), 'left',  true, null, true),
            new DataGridColumn('unitId', _M('Unit id', $module), 'right', true, null, false),
            new DataGridColumn('unitDesc', _M('Unit', $module), 'left', true, null, true),
            new DataGridColumn('curricularComponentId', _M('Curricular component id', $module), 'right',  true, null, false),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'right',  true, null, false),
            new DataGridColumn('curricularComponentDesc', _M('Curricular component', $module), 'left', true, null, true),
            new DataGridColumn('beginHour', _M('Begin hour', $module), 'left', true, null, false),
            new DataGridColumn('endHour', _M('End hour', $module), 'left', true, null, false)
        );

        $sql = 'SELECT D.professorId,
                       I.name as professorName,
                       B.weekdayId,
                       G.description as weekdayDesc,
                       C.turnId,
                       J.description as turnDesc,
                       L.room || \' - \' || L.building as local,
                       B.unitId,
                       H.description as unitDesc,
                       E.curricularComponentId,
                       E.curricularComponentVersion,
                       F.name as curricularComponentDesc,
                       C.beginHour as beginHour,
                       C.endHour as endHour
                  FROM acdGroup A
            INNER JOIN acdSchedule B
                    ON (B.groupId = A.groupId)
            INNER JOIN acdScheduleLearningPeriod C
                    ON (C.scheduleLearningPeriodId = B.scheduleLearningPeriodId)
            INNER JOIN acdScheduleProfessor D
                    ON (D.scheduleId = B.scheduleId)
            INNER JOIN acdCurriculum E
                    ON (E.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent F
                    ON (F.curricularComponentId = E.curricularComponentId AND
                        F.curricularComponentVersion = E.curricularComponentVersion)
            INNER JOIN acdLearningPeriod M
                    ON (M.learningPeriodId = A.learningPeriodId)
            INNER JOIN basWeekday G
                    ON (G.weekdayId = B.weekdayId)
            INNER JOIN basUnit H
                    ON (H.unitId = B.unitId)
            INNER JOIN basPhysicalPersonProfessor I
                    ON (I.personId = D.professorId)
            INNER JOIN basTurn J
                    ON (J.turnId = C.turnId)
            INNER JOIN insPhysicalResource L
                    ON (L.physicalResourceId = B.physicalResourceId AND
                        L.physicalResourceVersion = B.physicalResourceVersion) ';

        unset($where);
        if (strlen((string)$filters->periodId) > 0)
        {
            $where .= ' AND M.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if (strlen((string)$filters->professorId) > 0)
        {
            $where .= ' AND D.professorId = ? ';
            $args[] = $filters->professorId;
        }
        if (strlen((string)$filters->professorName) > 0)
        {
            $where .= ' AND TO_ASCII(I.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.weekdayId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Professor search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCurriculumFaultToConclue(&$context)
    {
        $sql = 'SELECT DISTINCT A.curricularComponentVersion,
                                C.name AS curricularComponentName
                           FROM acdCurriculum AX
                     INNER JOIN acdCurriculum A
                             ON ( AX.curriculumId = A.curriculumId AND 
                                  (SELECT COUNT(*)
                                     FROM acdCurricularComponent AY
                                    WHERE AY.curricularComponentId = AX.curricularComponentId) = 1
                                )
                     INNER JOIN acdCurricularComponent C
                             ON (C.curricularComponentId = A.curricularComponentId
                                 AND C.curricularComponentVersion = A.curricularComponentVersion)
                          WHERE A.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_OPTATIVE.')
                            AND AX.curricularComponentId = ?
                            AND C.endDate IS NULL';

        $context->setContext('academic', $sql);
    }

    public function lookupCurriculumFaultToConclue(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $hideContractIdField              = $lookup->getFilterValue('hideContractIdField');
        $checkNumberHours                 = $lookup->getFilterValue('checkNumberHours');
        $contractId                       = $lookup->getFilterValue('contractId');
        $filters->curricularComponentId   = $lookup->getFilterValue('curricularComponentId');
        $filters->curricularComponentName = $lookup->getFilterValue('curricularComponentName');

        if ( $hideContractIdField == DB_TRUE )
        {
            $lookup->addFilterField( new MHiddenField('contractId', $contractId) );
        }
        else
        {
            $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        }
        $lookup->addFilterField( new MHiddenField('hideContractIdField', $hideContractIdField) );
        
        $lookup->addFilterField( new MHiddenField('checkNumberHours', $checkNumberHours) );

        $lookup->addFilterField( new MTextField('curricularComponentId', $filters->curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE ) );

        $lookup->addFilterField( new MTextField('curricularComponentName', $filters->curricularComponentName, _M('Curricular component name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $columns = array(
            new DataGridColumn('curricularComponentId', _M('Curricular component id', $module), 'right',  true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'right',  true, null, true),
            new DataGridColumn('curricularComponentName', _M('Curricular component name', $module), 'left',  true, null, true),
            new DataGridColumn('curriculumId', _M('Curriculum id', $module), 'right', true, null, false),
            new DataGridColumn('courseId', _M('Course id', $module), 'right',  true, null, false),
            new DataGridColumn('courseName', _M('Course', $module), 'left',  true, null, true),
            new DataGridColumn('turnId', _M('Turn id', $module), 'right',  true, null, false),
            new DataGridColumn('turnDescription', _M('Turn', $module), 'left',  true, null, true),
            new DataGridColumn('unitId', _M('Unit id', $module), 'right',  true, null, false),
            new DataGridColumn('unitDescription', _M('Unit', $module), 'left',  true, null, true),
            new DataGridColumn('semester', _M('Semester', $module), 'right',  true, null, true)
        );
        
        $sql = 'SELECT DISTINCT
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       B.name AS curricularComponentName,
                       A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       C.name AS courseName,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.semester
                  FROM acdCurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
            INNER JOIN basUnit E
                    ON (E.unitId = A.unitId)';
            
        unset($where, $args);
        //Se existe um filtro por contrato
        if ( strlen((string)$contractId) > 0 )
        {
            $sql .= ' INNER JOIN acdContract F
                             ON (F.courseId = A.courseId AND
                                 F.courseVersion = A.courseVersion AND
                                 F.turnId = A.turnId AND
                                 F.unitId = A.unitId)';
                                 
            $where .= ' AND F.contractId = ?';
            $args[] = $contractId;
            
            //Verifica se j� foi cursada
            $where .= 'AND \'f\' = ';
            
            $where .= '(';
                
            $where .= ' SELECT count(AA.curriculumId) > 0
                          FROM acdEnroll AA
                    INNER JOIN acdCurriculum BB
                            ON ( AA.curriculumId = BB.curriculumId )
                    INNER JOIN acdCurricularComponent CC
                            ON (BB.curricularComponentId = CC.curricularComponentId AND 
                                BB.curricularComponentVersion = CC.curricularComponentVersion )
                         WHERE AA.contractId   = ?
                           AND BB.curriculumId = A.curriculumId
                   AND ( (AA.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.', '.ENROLL_STATUS_ENROLLED.') ';
                   
            $args[] = $contractId;
            
            //verifica��o de horas em aproveitamentos
            if ( $checkNumberHours == DB_TRUE )
            {
                $where .= ' AND CC.academicNumberHours = (SELECT CASE WHEN 
                                                                  sum(XY.exploitationNumberHours) > 0
                                                               THEN
                                                                  sum(XY.exploitationNumberHours)
                                                               ELSE
                                                                  CC.academicNumberHours
                                                               END
                                                          FROM acdExploitation XY
                                                         WHERE XY.enrollId = AA.enrollId)';
            }
            
            $where .= ') ';
            
            //verifica��o de concorr�ncias
            $where .= ' OR AA.curriculumId IN (SELECT CD.curriculumId 
                                                FROM acdCurriculum CD 
                                               WHERE CD.courseId = A.courseId
                                                 AND (CD.curriculumId IN 
                                                          (SELECT CR.curriculumInId 
                                                             FROM acdCurriculumConcurrence CR 
                                                            WHERE CR.curriculumOutId IN (
                                                                     SELECT CE.curriculumId 
                                                                       FROM acdEnroll CE 
                                                                      WHERE CE.contractId = ?
                                                                        AND CE.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.'))
                                                           ) OR 
                                                      CD.curriculumId IN (
                                                           SELECT CS.curriculumOutId 
                                                             FROM acdCurriculumConcurrence CS 
                                                            WHERE CS.curriculumInId IN (
                                                                     SELECT CF.curriculumId 
                                                                       FROM acdEnroll CF
                                                                      WHERE CF.contractId = \''.$contractId.'\' 
                                                                        AND CF.statusId IN ('.ENROLL_STATUS_APPR_OR_EXC.')))
               ))';
               
            $where .= ') )';
            
            $args[] = $contractId;
        }
        
        $where .= ' AND A.curriculumTypeId NOT IN ('. ACD_CURRICULUM_TYPE_OPTATIVE .', ' .  ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY . ',' . ACD_CURRICULUM_TYPE_PROFICIENCY . ') ';
        
        if (strlen((string)$filters->curricularComponentId) > 0)
        {
            $where .= ' AND B.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        if (strlen((string)$filters->curricularComponentName) > 0)
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->curricularComponentName . '%';
        }
        
        $where .= ' AND B.endDate IS NULL ';
        
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        else
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name ASC';
        }

        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component search',$module), 15, 0);

        $lookup->grid->setIsScrollable();
    }


    public function autoCompleteCurricularComponentInCurriculum(&$context)
    {
        $sql = 'SELECT DISTINCT A.curricularComponentVersion,
                                C.name AS curricularComponentName
                           FROM acdCurriculum X
                     INNER JOIN acdCurriculum A
                             ON (A.curriculumId = X.curriculumId AND
                                 (SELECT COUNT(*)
                                    FROM acdCurricularComponent XA
                                   WHERE XA.curricularComponentId = X.curricularComponentId) = 1
                                )
                     INNER JOIN acdCurricularComponent C
                             ON (C.curricularComponentId = A.curricularComponentId
                                 AND C.curricularComponentVersion = A.curricularComponentVersion)
                          WHERE X.curricularComponentId = ?';

        $context->setContext('academic', $sql);
    }

    public function lookupCurricularComponentInCurriculum(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $filters->curricularComponentId   = $lookup->getFilterValue('curricularComponentId');
        $filters->curricularComponentName = $lookup->getFilterValue('curricularComponentName');
        $filters->courseId                = $lookup->getFilterValue('courseId');
        $filters->courseVersion           = $lookup->getFilterValue('courseVersion');
        $filters->courseName              = $lookup->getFilterValue('courseName');
        $filters->semester                = $lookup->getFilterValue('semester');
        $filters->curriculumTypeId        = $lookup->getFilterValue('curriculumTypeId');
        $filters->learningPeriodId        = $lookup->getFilterValue('learningPeriodId');
        $filters->isUseLearningPeriodId   = $lookup->getFilterValue('isUseLearningPeriodId');
        $filters->isUnShowEndDate         = $lookup->getFilterValue('isUnShowEndDate');
        $filters->turnId                  = $lookup->getFilterValue('turnId');
        $filters->unitId                  = $lookup->getFilterValue('unitId');
        $filters->courseIdJustOptionalCurricularComponent  = $lookup->getFilterValue('courseIdJustOptionalCurricularComponent');
        $filters->formationLevelId        = $lookup->getFilterValue('formationLevelId');

        $lookup->addFilterField( new MTextField('curricularComponentId', $filters->curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE ) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $filters->curricularComponentName, _M('Curricular component name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId', $filters->courseId, _M('Course id', $module), FIELD_ID_LOOKUP_SIZE ) );
        $lookup->addFilterField( new MTextField('courseName', $filters->courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $filters->courseVersion, _M('Course version', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('semester', $filters->semester, _M('Semester', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MHiddenField('curriculumTypeId', $filters->curriculumTypeId));
        $lookup->addFilterField( new MHiddenField('isUseLearningPeriodId', $filters->isUseLearningPeriodId));
        $lookup->addFilterField( new MHiddenField('courseIdJustOptionalCurricularComponent', $filters->courseIdJustOptionalCurricularComponent));
        $lookup->addFilterField( new MHiddenField('isUnShowEndDate', $filters->isUnShowEndDate));
        $lookup->addFilterField( new MHiddenField('formationLevelId', $filters->formationLevelId));

        $columns = array(
            new DataGridColumn('curricularComponentId', _M('Curricular component id', $module), 'right',  true, null, true),
            new DataGridColumn('curricularComponentVersion', _M('Curricular component version', $module), 'left',  true, null, true),
            new DataGridColumn('curricularComponentName', _M('Curricular component', $module), 'left',  true, null, true),
            new DataGridColumn('curriculumId', _M('Curriculum id', $module), 'right', true, null, false),
            new DataGridColumn('courseId', _M('Course id', $module), 'right',  true, null, true),
            new DataGridColumn('courseVersion', _M('Course version', $module), 'right',  true, null, true),
            new DataGridColumn('courseName', _M('Course', $module), 'left',  true, null, true),
            new DataGridColumn('turnId', _M('Turn id', $module), 'right',  true, null, true),
            new DataGridColumn('turnDescription', _M('Turn', $module), 'left',  true, null, true),
            new DataGridColumn('unitId', _M('Unit id', $module), 'right',  true, null, true),
            new DataGridColumn('unitDescription', _M('Unit', $module), 'left',  true, null, true),
            new DataGridColumn('semester', _M('Semester', $module), 'center',  true, null, true)
        );

        if ( strlen((string)$filters->isUseLearningPeriodId) > 0 )
        {
            //utilizara periodo letivo
             $lookup->addFilterField( new MTextField('learningPeriodId', $filters->learningPeriodId, _M('Learning period id', $module), FIELD_ID_LOOKUP_SIZE));

             $columns[] = new DataGridColumn('learningPeriodId', _M('Learning period id', $module), 'center',  true, null, true);
        }

        $sql = 'SELECT DISTINCT
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       A.unitId,
                       A.curriculumId,
                       getTurnDescription(A.turnId) as turnDescription,
                       getUnitDescription(A.unitId) as unitDescription,
                       A.semester';

        if ( strlen((string)$filters->isUseLearningPeriodId) > 0 )
        {
            if (strlen((string)$filters->learningPeriodId) > 0)
            {
                $sql .= ' , D.learningPeriodId ';
            }
        }

        $sql .= ' FROM acdCurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)';

        if ( strlen((string)$filters->isUseLearningPeriodId) > 0 )
        {
            $sql .= ' INNER JOIN acdGroup D
                              ON (D.curriculumId = A.curriculumId)';
        }

        if (strlen((string)$filters->curriculumTypeId) > 0)
        {
            $where .= ' AND A.curriculumTypeId = ? ';
            $args[] = $filters->curriculumTypeId;
        }
        if (strlen((string)$filters->curricularComponentId) > 0)
        {
            $where .= ' AND C.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        if (strlen((string)$filters->curricularComponentName) > 0)
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->curricularComponentName . '%';
        }
        if (strlen((string)$filters->semester) > 0)
        {
            $where .= ' AND A.semester = ? ';
            $args[] = $filters->semester;
        }
        if (strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen((string)$filters->turnId) > 0)
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen((string)$filters->courseId) > 0)
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen((string)$filters->courseVersion) > 0)
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen((string)$filters->courseName) > 0)
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen((string)$filters->isUseLearningPeriodId) > 0 )
        {
            if (strlen((string)$filters->learningPeriodId) > 0)
            {
                $where .= ' AND D.learningPeriodId = ?::integer ';
                $args[] = $filters->learningPeriodId;
            }
        }
        if ( strlen((string)$filters->courseIdJustOptionalCurricularComponent) > 0 )
        {
            if ( (strlen((string)$filters->courseId) > 0) && ($filters->courseId == $filters->courseIdJustOptionalCurricularComponent) )
            {
                $where .= ' AND A.curriculumTypeId NOT IN ('.SCOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL.', '.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.', '.ACD_CURRICULUM_TYPE_PROFICIENCY.' )';
            }
        }
        if ( $filters->isUnShowEndDate == DB_TRUE )
        {
            $where .= ' AND C.endDate IS NULL ';
        }
        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            //$sql   .= $where;
        }

        $sql .= ' ORDER BY B.name, C.name ASC';

        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component search',$module), 15, 0);

        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteClass(&$context)
    {
       /* 
        $sql = 'SELECT name AS className
                  FROM acdClass
                 WHERE classId = ?';
       */ 
        
        $sql = 'SELECT 
                       A.name AS className,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       getCourseShortName(B.courseId) AS courseName,
                       C.description as turnDescription,
                       B.unitId,
                       B.turnId
                  FROM acdClass A
            INNER JOIN acdLearningPeriod B
                    ON (A.initialLearningPeriodId = B.learningPeriodId)
            INNER JOIN basTurn C
                    ON (B.turnId = C.turnId)
            WHERE classId = ?';

        $context->setContext('academic', $sql);
    }

    public function lookupClass(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $classId       = $lookup->getFilterValue('classId');
        $className     = $lookup->getFilterValue('className');
        $periodId      = $lookup->getFilterValue('periodId');
        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $unitId        = $lookup->getFilterValue('unitId');
        $turnId        = $lookup->getFilterValue('turnId');

        $lookup->addFilterField( new MTextField('classId', $curricularComponentId, _M('Class id', $module), FIELD_ID_LOOKUP_SIZE ) );

        $lookup->addFilterField( new MTextField('className', $className, _M('Class name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('periodId', $periodId, _M('Period id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );

        $columns = array(
            new DataGridColumn('classId',       _M('Class id',       $module), 'left',  true, null, true),
            new DataGridColumn('className',     _M('Class name',     $module), 'left',  true, null, true),
            new DataGridColumn('periodId',      _M('Period id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseId',      _M('Course id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseVersion', _M('Course version', $module), 'left',  true, null, true),
            new DataGridColumn('courseName',    _M('Course name',    $module), 'left',  true, null, true),
            new DataGridColumn('turnDescription', _M('Turn', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.classId,
                       A.name AS className,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       getCourseShortName(B.courseId) AS courseName,
                       C.description as turnDescription,
                       B.unitId,
                       B.turnId
                  FROM acdClass A
            INNER JOIN acdLearningPeriod B
                    ON (A.initialLearningPeriodId = B.learningPeriodId)
            INNER JOIN basTurn C
                    ON (B.turnId = C.turnId)';

        if ( strlen((string)$classId) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $classId.'%';
        }
        if ( strlen((string)$className) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $className.'%';
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? )';
            $args[] = $courseName.'%';
            $args[] = $courseName.'%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND B.turnId = ? ';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4);

        }

        $sql .= ' ORDER BY A.name';

        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }


        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Class search',$module), 15, 0);

        $lookup->grid->setIsScrollable();
    }
    
    public function lookupPrice(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $periodId      		= $lookup->getFilterValue('periodId');
        $courseId      		= $lookup->getFilterValue('courseId');
        $courseVersion 		= $lookup->getFilterValue('courseVersion');
        $courseName    		= $lookup->getFilterValue('courseName');
        $unitId        		= $lookup->getFilterValue('unitId');
        $turnId        		= $lookup->getFilterValue('turnId');
        
        
        $lookup->addFilterField( new MTextField('periodId', $periodId, _M('Period id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        
            
       

        $columns = array(
            new DataGridColumn('totalValue',     _M('Total Value',     	 $module), 'left',  true, null, true),
            new DataGridColumn('value',     _M('Value',     	 $module).' 1', 'left',  true, null, true),
            new DataGridColumn('value2',     _M('Value',     	 $module).' 2', 'left',  true, null, true),
            new DataGridColumn('learningPeriodId',     _M('Id',     	 $module), 'center',  true, null, true),
            new DataGridColumn('learningPeriodDescription',      _M('Period description',      $module), 'left',  true, null, true),
            new DataGridColumn('periodId',      _M('Period id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseId',      _M('Course id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseVersion', _M('Course version', $module), 'left',  true, null, true),
            new DataGridColumn('courseName',    _M('Course name',    $module), 'left',  true, null, true),
            new DataGridColumn('turnDescription', _M('Turn', $module), 'left',  true, null, true) 
        );

        $sql = 'SELECT       
                       A.value+a.value2 AS totalValue,
                       A.value,
                       A.value2,
                       B.learningPeriodId,
                       B.description as learningPeriodDescription,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       getCourseShortName(B.courseId) AS courseName,
                       C.description as turnDescription,
                       B.unitId,
                       B.turnId
                  FROM finprice A
            INNER JOIN acdLearningPeriod B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN basTurn C
                    ON (B.turnId = C.turnId)';

        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? )';
            $args[] = $courseName.'%';
            $args[] = $courseName.'%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND B.turnId = ? ';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $unitId;
        }
        
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4);

        }

        $sql .= ' ORDER BY 1';

        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }


        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Class search',$module), 15, 0);

        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteClassCourse(&$context)
    {
        $sql = 'SELECT A.name AS className,
                       B.courseId,
                       B.courseVersion,
                       getCourseName(B.courseId) AS courseName,
                       B.turnId,
                       getTurnDescription(B.turnId)
                  FROM acdClass A
            INNER JOIN acdLearningPeriod B
                    ON ( A.initialLearningPeriodId = B.learningPeriodId )
                 WHERE A.classId = ?';

        $context->setContext('academic', $sql);
    }

    public function lookupClassCourse(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $classId       = $lookup->getFilterValue('classId');
        $className     = $lookup->getFilterValue('className');
        $periodId      = $lookup->getFilterValue('periodId');
        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $unitId        = $lookup->getFilterValue('unitId');
        $turnId        = $lookup->getFilterValue('turnId');

        $lookup->addFilterField( new MTextField('classId', $curricularComponentId, _M('Class id', $module), FIELD_ID_LOOKUP_SIZE ) );

        $lookup->addFilterField( new MTextField('className', $className, _M('Class name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('periodId', $periodId, _M('Period id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );

        $columns = array(
            new DataGridColumn('classId',       _M('Class id',       $module), 'left',  true, null, true),
            new DataGridColumn('className',     _M('Class name',     $module), 'left',  true, null, true),
            new DataGridColumn('periodId',      _M('Period id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseId',      _M('Course id',      $module), 'left',  true, null, true),
            new DataGridColumn('courseVersion', _M('Course version', $module), 'left',  true, null, true),
            new DataGridColumn('courseName',    _M('Course name',    $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.classId,
                       A.name AS className,
                       B.courseId,
                       B.courseVersion,
                       getCourseName(B.courseId) AS courseName,
                       B.turnId,
                       getTurnDescription(B.turnId)
                  FROM acdClass A
            INNER JOIN acdLearningPeriod B
                    ON ( A.initialLearningPeriodId = B.learningPeriodId )';

        if ( strlen((string)$classId) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $classId . '%';
        }
        if ( strlen((string)$className) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $className . '%';
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND B.turnId = ? ';
            $args[] = $turnId;
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4);

        }

        $sql .= ' ORDER BY A.name';

        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));

        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);

        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Class search',$module), 15, 0);

        $lookup->grid->setIsScrollable();
    }
    
    
    /**
     * Auto complete for curricular component that has groups
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCurricularComponentHasGroups(&$context)
    {
        //DEPRECATED
        $sql = 'SELECT DISTINCT 
                       MAX(A.curricularComponentVersion) AS curricularComponentVersion,
                       A.name AS curricularComponentName
                  FROM acdCurricularComponent A
            INNER JOIN acdCurriculum B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN acdGroup C
                    ON (C.curriculumId = B.curriculumId)
                 WHERE A.curricularComponentId = ?
              GROUP BY A.name';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for curricular component that has groups
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCurricularComponentHasGroups(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $curricularComponentId      = $lookup->getFilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getFilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getFilterValue('curricularComponentName');
        $learningPeriodId           = $lookup->getFilterValue('learningPeriodId');

        $lookup->addFilterField( new MTextField('curricularComponentId',      $curricularComponentId,      _M('Code',$module),                 FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Version',$module),              FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName',    $curricularComponentName,    _M('Curricular component',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('learningPeriodId', $learningPeriodId) );

        $columns = array(
           new DataGridColumn('curricularComponentId',      _M('Code', $module),       'left',  true, null, true),
           new DataGridColumn('curricularComponentVersion', _M('Version', $module),    'right', true, null, true),
           new DataGridColumn('curricularComponentName',    _M('Curricular component', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT DISTINCT
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       A.name AS curricularComponentName
                  FROM acdCurricularComponent A
            INNER JOIN acdCurriculum B
                    ON (B.curricularComponentId      = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN acdGroup C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdLearningPeriod D
                    ON (D.learningPeriodId = C.learningPeriodId)';

        if ( strlen((string)$learningPeriodId) > 0 )
        {
            $busLearningPeriod = $MIOLO->getBusiness($module, 'BusLearningPeriod');
            $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
            
            $where .= ' AND D.periodId = ?';
            $args[] = $learningPeriodData->periodId;
        }
        
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen((string)$curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(A.name) ILIKE TO_ASCII(?) OR TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name,
                           A.curricularComponentVersion DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Curricular component search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }


    /**
     * Auto complete for course occurrence to serial courses
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseOccurrenceSerial(&$context)
    {
        $sql = 'SELECT B.courseVersion,
                       C.name AS courseName,
                       B.unitId,
                       E.description AS unitDescription,
                       B.turnId,
                       D.description AS turnDescription,
                       B.authorizationDate,
                       B.authorizationDocument,
                       B.status,
                       B.minimumConclusionCourse,
                       B.maximumConclusionCourse,
                       C.formationLevelId,
                       F.description AS formationLevelDescription
                  FROM (  SELECT courseId, MAX(courseVersion) AS courseVersion
                            FROM acdCourseOccurrence
                           WHERE courseId = ?
                        GROUP BY courseId) A,
                       acdCourseOccurrence B
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN basTurn D
                    ON (D.turnId = B.turnId)
             LEFT JOIN basUnit E
                    ON (E.unitId = B.unitId)
             LEFT JOIN acdFormationLevel F
                    ON (F.formationLevelId = C.formationLevelId)
            INNER JOIN acdCourseVersion G
                    ON (G.courseVersion = B.courseVersion AND
                        G.courseId      = B.courseId)
                 WHERE B.courseId = A.courseId
                   AND B.courseVersion = A.courseVersion
                   AND G.courseVersionTypeId IN ('.SERIAL_ENROLL_TYPE_IDS.') ';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseOccurrenceSerial(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId                = $lookup->getFilterValue('courseId');
        $courseVersion           = $lookup->getFilterValue('courseVersion');
        $courseName              = $lookup->getFilterValue('courseName');
        $unitId                  = $lookup->getFilterValue('unitId');
        $unitDescription         = $lookup->getFilterValue('unitDescription');
        $turnId                  = $lookup->getFilterValue('turnId');
        $turnDescription         = $lookup->getFilterValue('turnDescription');
        $authorizationDate       = $lookup->getFilterValue('authorizationDate');
        $authorizationDocument   = $lookup->getFilterValue('authorizationDocument');
        $status                  = $lookup->getFilterValue('status');
        $minimumConclusionCourse = $lookup->getFilterValue('minimumConclusionCourse');
        $maximumConclusionCourse = $lookup->getFilterValue('maximumConclusionCourse');
        $formationLevelId        = $lookup->getFilterValue('formationLevelId');

        $lookup->addFilterField( new MTextField('courseId',          $courseId,          _M('Course id',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',     $courseVersion,     _M('Course version',$module),  FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName',        $courseName,        _M('Course name',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( fields::turn($turnId) );
        $lookup->addFilterField( new MSelection('status',            $status,            _M('Is it active', $module) . '?', SAGU::listYesNo()) );
        $business = $MIOLO->getBusiness($module, 'BusFormationLevel');
        $lookup->addFilterField( new MSelection('formationLevelId', $formationLevelId,   _M('Formation level', $module), $business->listFormationLevel() ) );

        $columns = array(
           new DataGridColumn('courseId',                  _M('Course id', $module),                'left',  true, null, true),
           new DataGridColumn('courseVersion',             _M('Course version', $module),                'right', true, null, true),
           new DataGridColumn('courseName',                _M('Course', $module),                'left',  true, null, true),
           new DataGridColumn('unitId',                    _M('Unit id', $module),                'right', true, null, true),
           new DataGridColumn('unitDescription',           _M('Unit', $module),                'left',  true, null, true),
           new DataGridColumn('turnId',                    _M('Turn id', $module),                'right', true, null, true),
           new DataGridColumn('turnDescription',           _M('Turn', $module),                'left',  true, null, true),
           new DataGridColumn('authorizationDate',         _M('Authorization date', $module),                'left',  true, null, false),
           new DataGridColumn('authorizationDocument',     _M('Authorization document', $module),                'left',  true, null, false),
           new DataGridColumn('status',                    _M('Is it active', $module),                'left',  true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ) ),
           new DataGridColumn('minimumConclusionCourse',   _M('Minimum conclusion time', $module),                'right', true, null, true),
           new DataGridColumn('maximumConclusionCourse',   _M('Maximum conclusion time', $module),                'right', true, null, true),
           new DataGridColumn('formationLevelId',          _M('Formation level id', $module),                'right', true, null, false),
           new DataGridColumn('formationLevelDescription', _M('Formation level', $module),                'left', true, null, true)
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.unitId,
                       D.description AS unitDescription,
                       A.turnId,
                       C.description AS turnDescription,
                       A.authorizationDate,
                       A.authorizationDocument,
                       A.status,
                       A.minimumConclusionCourse,
                       A.maximumConclusionCourse,
                       B.formationLevelId,
                       E.description AS formationLevelDescription
                  FROM acdCourseOccurrence A
            INNER JOIN acdCourseVersion F
                    ON (F.courseVersion = A.courseVersion AND
                        F.courseId      = A.courseId)
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN acdFormationLevel E
                    ON (E.formationLevelId = B.formationLevelId)';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(B.name) ILIKE TO_ASCII(?) OR TO_ASCII(B.shortName) ILIKE TO_ASCII(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen((string)$turnDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $turnDescription . '%';
        }
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen((string)$unitDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(D.description) ILIKE TO_ASCII(?)';
            $args[] = $unitDescription . '%';
        }
        if ( strlen((string)$authorizationDate) > 0 )
        {
            $where .= ' AND A.authorizationDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $authorizationDate;
        }
        if ( strlen((string)$authorizationDocument) > 0 )
        {
            $where .= ' AND A.authorizationDocument ILIKE ?';
            $args[] = $authorizationDocument;
        }
        if ( strlen((string)$status) > 0 )
        {
            $where .= ' AND A.status = ?';
            $args[] = $status;
        }
        if ( strlen((string)$minimumConclusionCourse) > 0 )
        {
            $where .= ' AND A.minimumConclusionCourse = ?';
            $args[] = $minimumConclusionCourse;
        }
        if ( strlen((string)$maximumConclusionCourse) > 0 )
        {
            $where .= ' AND A.maximumConclusionCourse = ?';
            $args[] = $maximumConclusionCourse;
        }

        if ( strlen((string)$formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        $sql .= ' WHERE F.courseVersionTypeId IN ('.SERIAL_ENROLL_TYPE_IDS.')' . $where;

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course occurrence search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    public function autoCompleteEnrollContractOptionalCurriculum(&$context)
    {
        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM acdEnroll A
             LEFT JOIN acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN acdCurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)
                 WHERE A.enrollId = ? ';

        $context->setContext('academic', $sql);
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEnrollContractOptionalCurriculum(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
         * Load global defines for the basic module
         */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $enrollId                   = $lookup->getfilterValue('enrollId');
        $curricularComponentId      = $lookup->getfilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getfilterValue('curricularComponentVersion');
        $curricularComponentName    = $lookup->getfilterValue('curricularComponentName');
        $contractId                 = $lookup->getfilterValue('contractId');
        $courseId                   = $lookup->getfilterValue('courseId');
        $courseVersion              = $lookup->getfilterValue('courseVersion');
        $courseName                 = $lookup->getfilterValue('courseName');
        $personId                   = $lookup->getfilterValue('personId');
        $personName                 = $lookup->getfilterValue('personName');
        $notCurriculumTypeId        = $lookup->getfilterValue('notCurriculumTypeId');

        $lookup->addFilterField( new MTextField('enrollId', $enrollId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentId', $curricularComponentId, _M('Curricular component id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentVersion', $curricularComponentVersion, _M('Curricular component version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('curricularComponentName', $curricularComponentName, _M('Curricular component name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('contractId', $contractId, _M('Contract id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseId', $courseId, _M('Course id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseName', $courseName, _M('Course name', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Person Id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('notCurriculumTypeId', $notCurriculumTypeId, _M('Person', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        $gridColumns = array(
            new DataGridColumn('enrollId',                _M('Enroll id', $module),   'right', true, null, true),
            new DataGridColumn('curricularComponentId',   _M('Curricular component id', $module), 'right', true, null, true),
            new DataGridColumn('curricularComponentName', _M('Curricular component name', $module), 'left',  true, null, true),
            new DataGridColumn('contractId',              _M('Contract id', $module), 'right', true, null, true),
            new DataGridColumn('courseId',                _M('Course id', $module),   'left',  true, null, true),
            new DataGridColumn('courseVersion',           _M('Course version', $module),   'left',  true, null, true),
            new DataGridColumn('courseName',              _M('Course', $module),      'left',  true, null, true),
            new DataGridColumn('personId',                _M('Person id', $module),   'left',  true, null, true),
            new DataGridColumn('personName',              _M('Person', $module),      'left',  true, null, true)
        );

        $sql = ' SELECT A.enrollId,
                        A.groupId,
                        C.name || \' - \' || F.name AS curricularComponentName,
                        A.contractId,
                        G.courseId,
                        G.courseVersion,
                        H.name as courseName,
                        G.personId,
                        I.name,
                        F.academicnumberhours,
                        F.academiccredits,
                        A.finalNote,
                        A.concept
                   FROM acdEnroll A
             INNER JOIN acdCurriculum B
                     ON (A.curriculumId = B.curriculumId)
             INNER JOIN acdCurricularComponent C
                     ON (C.curricularComponentId = B.curricularComponentID)
             INNER JOIN acdGroup D
                     ON (A.groupId = d.groupId)
             INNER JOIN acdCurriculum E
                     ON (E.curriculumId = D.curriculumId)
             INNER JOIN acdCurricularComponent F
                     ON (F.curricularComponentId = E.curricularComponentID)
             INNER JOIN acdContract G
                     ON (A.contractId = G.contractId)
             INNER JOIN acdCourse H
                     ON (G.courseId = H.courseId)
        INNER JOIN ONLY basPhysicalPersonStudent I
                     ON (I.personId = G.personId)';

        if ( strlen((string)$enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $enrollId;
        }
        if ( strlen((string)$contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND G.personId = ?';
            $args[] = $personId;
        }
        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND G.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND G.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(H.name) ilike TO_ASCII(?) OR TO_ASCII(H.shortName) ilike TO_ASCII(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND TO_ASCII(I.name) ilike TO_ASCII(?)';
            $args[] = $personName . '%';
        }
        if ( strlen((string)$curricularComponentId) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen((string)$curricularComponentName) > 0 )
        {
            $where .= ' AND ( TO_ASCII(C.name) ILIKE TO_ASCII(?) OR TO_ASCII(C.shortName) ILIKE TO_ASCII(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen((string)$notCurriculumTypeId) > 0 )
        {
            $where .= ' AND E.curriculumTypeId NOT IN ('.$notCurriculumTypeId.')';
        }

        $where .= ' AND A.dateCancellation IS NULL';
        $where .= ' AND A.curriculumId NOT IN (SELECT AA.curriculumLinkId
                                                    FROM acdCurriculumLink AA
                                                WHERE AA.curriculumId = D.curriculumId)';
        $where .= ' AND C.curricularComponentId <> F.curricularComponentId';
        $where .= ' AND B.curriculumTypeId NOT IN ('.ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY.', '.ACD_CURRICULUM_TYPE_PROFICIENCY.')';
        $where .= ' AND A.statusId NOT IN ('.ENROLL_STATUS_ENROLLED.', '.ENROLL_STATUS_CANCELLED.', '.ENROLL_STATUS_DESISTING.', '.ENROLL_STATUS_EXCUSED.')';

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        else
        {
            $where .= ' AND A.enrollId = 0';

            $sql .= ' WHERE ' . substr($where, 5);
            //$sql .= ' ORDER BY A.enrollId';
        }

        if ( strlen((string)$contractId) > 0 )
        {
            $sql .= 'UNION 
                            SELECT CA.enrollId,
                                   CA.groupId,
                                   CC.name || \' - \' || CF.name AS curricularComponentName,
                                   CA.contractId,
                                   CG.courseId,
                                   CG.courseVersion,
                                   CH.name as courseName,
                                   CG.personId,
                                   CI.name,
                                   CF.academicnumberhours,
                                   CF.academiccredits,
                                   CA.finalNote,
                                   CA.concept
                              FROM acdEnroll CA
                        INNER JOIN acdCurriculum CB
                                ON (CA.curriculumId = CB.curriculumId)
                        INNER JOIN acdCurricularComponent CC
                                ON (CC.curricularComponentId = CB.curricularComponentID)
                        INNER JOIN acdGroup CD
                                ON (CA.groupId = CD.groupId)
                        INNER JOIN acdCurriculum CE
                                ON (CE.curriculumId = CD.curriculumId)
                        INNER JOIN acdCurricularComponent CF
                                ON (CF.curricularComponentId = CE.curricularComponentID)
                        INNER JOIN acdContract CG
                                ON (CA.contractId = CG.contractId)
                        INNER JOIN acdCourse CH
                                ON (CG.courseId = CH.courseId)
                   INNER JOIN ONLY basPhysicalPersonStudent CI
                                ON (CI.personId = CG.personId)
                             WHERE CG.personId = ( SELECT AA.personId
                                                     FROM acdContract AA
                                                    WHERE AA.contractId = '.$contractId.' )
                               AND CG.contractId <> '.$contractId.'
                               AND CH.formationLevelId = (SELECT BB.formationLevelId
                                                            FROM acdContract BA
                                                      INNER JOIN acdCourse BB
                                                              ON (BA.courseId = BB.courseId)
                                                           WHERE BA.contractId = '.$contractId.' )
                               AND CA.dateCancellation IS NULL';
        }


        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $gridColumns, _M('Enroll search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }




}

?>
