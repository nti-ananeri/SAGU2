<?php

class BusinessAcademicBusExploitationReport extends Business
{
    public $db;
    
    function __construct()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function getExploitations ( $data ) 
    {
        $sql = 
        'SELECT 
            *
        FROM
            viewExploitations
        WHERE
            1 = 1';
        if ( strlen((string) $data->personId ) > 0 )
        {
            $sql .= ' AND personId = ?::integer';
            $args[] = $data->personId;
        }

        if ( strlen((string) $data->classId ) > 0 )
        {
            $sql .= ' AND class ILIKE \'%\' || ? || \'%\'';
            $args[] = $data->classId;
        }

        if ( strlen((string) $data->turnId ) > 0 )
        {
            $sql .= ' AND turnId = ?::integer';
            $args[] = $data->turnId;
        }

        if ( strlen((string) $data->unitId ) > 0 )
        {
            $sql .= ' AND unitId = ?::integer';
            $args[] = $data->unitId;
        }
    
        if ( strlen((string) $data->courseId ) > 0 )
        {
            $sql .= ' AND courseId = ?';
            $args[] = $data->courseId;
        }

        if ( strlen((string) $data->serie ) > 0 )
        {
            $sql .= ' AND serie = ?::integer';
            $args[] = $data->serie;
        }

        if ( strlen((string) $data->periodId ) > 0 )
        {
            $sql .= ' AND periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen((string) $data->courseName ) > 0 )
        {
            $sql .= ' AND courseName ILIKE \'%\' || ? || \'%\'';
            $args[] = $data->courseName;
        }

        if ( strlen((string) $data->curricularComponentName ) > 0 )
        {
            $sql .= ' AND curricularComponent ILIKE \'%\' || ? || \'%\'';
            $args[] = $data->curricularComponentName;
        }

        if ( strlen((string) $data->curricularComponentId ) > 0 )
        {
            $sql .= ' AND curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }

        if ( strlen((string) $data->exploitationType ) > 0 )
        {
            $sql .= ' AND exploitationType ILIKE ? ';
            $args[] = $data->exploitationType;
        }

        /*if ( strlen((string) $data->courseVersion ) > 0 )
        {
            $sql .= ' AND courseVersion ILIKE \'%\' || ? || \'%\'';
            $agrs[] = $data->courseName;
        }*/

        $sql .= ' ORDER BY personName, serie, curricularComponent';
        $sql = SAGU::prepare($sql, $args);
        $result = $this->db->query($sql);

        if ( count($result) > 0 )
        {
            $result2 = $result;
            unset($result);
            foreach( $result2 as $item => $value )
            {
                unset($obj);
                list(   $obj->exploitationType, 
                        $obj->contractId,
                        $obj->periodId,
                        $obj->institutionName,
                        $obj->personId,
                        $obj->personName,
                        $obj->courseName,
                        $obj->exploitationCourseName,
                        $obj->exploitationCurricularComponent,
                        $obj->exploitationSerie,
                        $obj->exploitationFinalNote,
                        $obj->exploitationCurricularComponentNumberHours,
                        $obj->exploitationNumberHours,
                        $obj->serie,
                        $obj->curricularComponent,
                        $obj->lessonNumberHours,
                        $obj->class,
                        $obj->turn,
                        $obj->turnId,
                        $obj->unitId,
                        $obj->courseId,
                        $obj->curricularComponentId,
                        $obj->curricularComponentVersion ) = $value;
                $result[$obj->contractId][] = $obj;
            }
        }
        return $result;
    }
}
?>
