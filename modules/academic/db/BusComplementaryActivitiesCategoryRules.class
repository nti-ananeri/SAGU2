<?php
/**
 * Class to manipulate the acdComplementaryActivities table data.
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 11/01/2007
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusComplementaryActivitiesCategoryRules extends Business
{
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertComplementaryActivitiesCategoryRules($data)
    {
        $sql = 'INSERT INTO acdComplementaryActivitiesCategoryRules
                            (curriculumId,
                             complementaryActivitiesCategoryId,
                             minimumHours,
                             maximumHours )
                     VALUES (?,?,?,?)';

        $args = array($data->curriculumId,
                      $data->complementaryActivitiesCategoryId,
                      $data->minimumHours,
                      $data->maximumHours);

        $db = $this->getDatabase();
        $result = $db->Execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List the available periods for enroll for a specific contractId
     * 
     * @param $data (object): acdPeriod object
     *
     * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
     * Otherwise, returns null.
     *
     **/
//     public function listComplementaryActivities($complementaryActivitiesId)
//     {
//         $sql = 'SELECT A.complementaryActivitiesId
//                        A.enrollId,
//                        A.description,
//                        A.totalHours,
//                        A.totalCredits,
//                        A.degree,
//                        A.consept,
//                        A.periodId,
//                        A.complementaryActivitiesCategoryId
//                   FROM acdComplementaryActivities A
//                  WHERE A.complementaryActivitiesId = ? 
//               ORDER BY A.complementaryActivitiesId ';
//     
//         $db = $this->getDatabase();
// 
//         $result = $db->query(SAGU::prepare($sql,$complementaryActivitiesId));
//         //$db->Close();
//        
//         return $result; 
//     }


    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId)
    {
        $sql = 'SELECT A.complementaryActivitiesCategoryRulesId,
                       A.curriculumId,
                       A.complementaryActivitiesCategoryId,
                       A.minimumHours,
                       A.maximumHours,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdComplementaryActivitiesCategoryRules A  
                 WHERE A.complementaryActivitiesCategoryRulesId = ?';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $complementaryActivitiesCategoryRulesId));

        $complementaryActivitiesCategoryRules = new AcdComplementaryActivitiesCategoryRules();

        list ( $complementaryActivitiesCategoryRules->complementaryActivitiesCategoryRulesId,
               $complementaryActivitiesCategoryRules->curriculumId,
               $complementaryActivitiesCategoryRules->complementaryActivitiesCategoryId,
               $complementaryActivitiesCategoryRules->minimumHours,
               $complementaryActivitiesCategoryRules->maximumHours,
               $complementaryActivitiesCategoryRules->userName,
               $complementaryActivitiesCategoryRules->dateTime,
               $complementaryActivitiesCategoryRules->ipAddress) = $result[0];

        return $complementaryActivitiesCategoryRules;
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the syarch results.
     *
     */
    function searchComplementaryActivitiesCategoryRules($data)
    {
            $sql = '  SELECT A.complementaryActivitiesCategoryRulesId,
                             A.curriculumId,
                             A.complementaryActivitiesCategoryId,
                             C.description,
                             D.name as courseName,
                             E.name,
                             A.minimumHours,
                             A.maximumHours
                        FROM acdComplementaryActivitiesCategoryRules A
                  INNER JOIN acdCurriculum B
                          ON (A.curriculumId = B.curriculumId)
                  INNER JOIN acdComplementaryActivitiesCategory C
                          ON (C.complementaryActivitiesCategoryId = A.complementaryActivitiesCategoryId)
                  INNER JOIN acdCourse D
                          ON (D.courseId = B.courseId)
                  INNER JOIN acdCurricularComponent E
                          ON (E.curricularComponentId      = B.curricularComponentId AND
                              E.curricularComponentVersion = B.curricularComponentVersion)';

        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->curricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen((string)$data->turnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $data->turnId;
        }
        if ( strlen((string)$data->minimumHours) > 0 )
        {
            $where .= ' AND A.minimumHours = ?';
            $args[] = $data->minimumHours;
        }
        if ( strlen((string)$data->maximumHours) > 0 )
        {
            $where .= ' AND A.maximumHours = ?';
            $args[] = $data->maximumHours;
        }
        if ( strlen((string)$data->complementaryActivitiesCategoryRulesId) > 0 )
        {
            $where .= ' AND A.complementaryActivitiesCategoryRulesId = ?';
            $args[] = $data->complementaryActivitiesCategoryRulesId;
        }
        if ( strlen((string)$data->complementaryActivitiesCategoryId) > 0 )
        {
            $where .= ' AND A.complementaryActivitiesCategoryId = ?';
            $args[] = $data->complementaryActivitiesCategoryId;
        }

        $where .= ' AND B.curriculumTypeId = ?';
        $args[] = ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY;

        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where, 4) .
                        ' ORDER BY D.name, C.description';
            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateComplementaryActivitiesCategoryRules($data)
    {
        $sql = 'UPDATE acdComplementaryActivitiesCategoryRules 
                       SET curriculumId                              = ?,
                           complementaryActivitiesCategoryId         = ?,
                           minimumHours                              = ?,
                           maximumHours                              = ?
                     WHERE complementaryActivitiesCategoryRulesId    = ?  ';

        $args = array($data->curriculumId,
                      $data->complementaryActivitiesCategoryId,
                      $data->minimumHours,
                      $data->maximumHours,
                      $data->complementaryActivitiesCategoryRulesId );

        $db = $this->getDatabase();

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $complementaryActivitiesId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId)
    {
        $delete = 'DELETE FROM acdComplementaryActivitiesCategoryRules
                    WHERE complementaryActivitiesCategoryRulesId = ?';

        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $complementaryActivitiesCategoryRulesId));

        return $result;
    }

//     function getPupilGroupEnroll($groupId, $contractId)
//     {
//         $sql = 'SELECT enrollId
//                   FROM acdEnroll
//                  WHERE groupId = ?
//                    AND contractId = ?';
// 
//         $args = array( $groupId,
//                        $contractId );
// 
//         $db = $this->getDatabase();
// 
//         $result = $db->query(SAGU::prepare($sql, $args));
// 
//         return $result[0][0];
//     }
// 
//     function insertPupilGroupEnroll($data)
//     {
//         $MIOLO  = MIOLO::getInstance();
//         $module = MIOLO::getCurrentModule();
// 
//         $busContract  = $MIOLO->getBusiness($module, 'BusContract');
//         $contractData = $busContract->getContract($data->contractId);
// 
//         $sql = 'SELECT curriculumId
//                   FROM acdCurriculum
//                  WHERE courseId = ?
//                    AND courseVersion = ?
//                    AND unitId = ?
//                    AND turnId = ?
//                    AND curriculumTypeId IN (' . ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY . ')';
// 
//         $args = array( $contractData->courseId,
//                        $contractData->courseVersion,
//                        $contractData->unitId,
//                        $contractData->turnId);
// 
//         $db = $this->getDatabase();
// 
//         $curriculumId = $db->query(SAGU::prepare($sql, $args));
// 
//         $curriculumId = $curriculumId[0][0];
// 
//         if (strlen((string)$curriculumId) > 0)
//         {
//             $sql = 'SELECT nextval(\'seq_enrollid\')'; 
// 
//             $enrollId = $db->query($sql);
// 
//             $enrollId = $enrollId[0][0];
// 
//             $sql = 'INSERT INTO acdEnroll
//                                 (enrollId,
//                                  curriculumId,
//                                  groupId,
//                                  contractId,
//                                  dateEnroll,
//                                  hourEnroll,
//                                  concept,
//                                  statusId)
//                           VALUES (?,
//                                   ?,
//                                   ?,
//                                   ?,
//                                   now(),
//                                   now(),
//                                   ?,' .
//                                   ENROLL_STATUS_APPROVED . ')';
// 
//             $args = array( $enrollId,
//                            $curriculumId,
//                            $data->groupId,
//                            $data->contractId,
//                            $data->concept );
// 
//             $result = $db->execute(SAGU::prepare($sql, $args));
// 
//             if (count($this->getErrors()) > 0) 
//             {
//                 return null;
//             }
//             else
//             {
//                 return $enrollId;
//             }
//         }
// 
//         return null;
//     }
}

   
?>
