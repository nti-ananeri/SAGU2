<?php
/**
 *
 * This file handles the connection and actions for acdEventParticipation table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdEventParticipation table
 **/
class BusinessAcademicBusEventParticipation extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEventParticipation()
    {

    }
    
    /**
     * Return a specific record from the database
     *
     * @param $eventParticipationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEventParticipation()
    {
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEventParticipation($filters)
    {
        $sql= 'SELECT A.eventId,
                       B.description,
                       A.personId,
                       C.name
                FROM acdEventParticipation A
                INNER JOIN acdEvent B
                    ON (A.eventId = B.eventId)
                INNER JOIN ONLY basPhysicalPerson C
                    ON (A.personId = C.personId) ';

        if ( strlen((string)$filters->eventId) > 0 )
        {
            $where .= ' AND A.eventId = ? ';
            $args[] = $filters->eventId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY B.description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEventParticipation($data)
    {
        $sql = 'INSERT INTO acdEventParticipation
                            (eventId,
                             personId)
                     VALUES (?,?) ';

        $args = array($data->eventId,
                        $data->personId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEventParticipation($data)
    {
    }

    /**
     * Delete a record
     *
     * @param $eventParticipationId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEventParticipation($eventId,$personId)
    {
        $sql = 'DELETE FROM acdEventParticipation
                      WHERE eventId = ? 
                        AND personId = ?';
                        
        $args = array ($eventId,
                         $personId);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }
}
?>
