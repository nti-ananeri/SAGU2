<?php
/**
 * Class to manipulate the acdComplementaryActivities table data.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusComplementaryActivities extends Business
{
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertComplementaryActivities($data)
    {
        $sql = 'INSERT INTO acdComplementaryActivities
                            (contractId,
                             complementaryActivity,
                             institutionId,
                             complementaryActivitiesCategoryId,
                             curriculumId,
                             periodId,
                             totalHours,
                             totalCredits,
                             degree,
                             concept,
                             observation)
                     VALUES (?,?,?,?,?,?,?,?,?,?,?)';

        $args = array($data->contractId,
                      $data->complementaryActivity,
                      $data->institutionId,
                      $data->complementaryActivitiesCategoryId,
                      $data->curriculumId,
                      $data->periodId,
                      $data->totalHours,
                      $data->totalCredits,
                      $data->degree,
                      $data->concept,
                      $data->observation
                      );

        $db     = $this->getDatabase();
        $result = $db->Execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List the available periods for enroll for a specific contractId
     * 
     * @param $data (object): acdPeriod object
     *
     * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
     * Otherwise, returns null.
     *
     **/
    public function listComplementaryActivities($complementaryActivitiesId)
    {
        $sql = 'SELECT A.complementaryActivitiesId
                       A.observation,
                       A.totalHours,
                       A.totalCredits,
                       A.degree,
                       A.consept,
                       A.periodId,
                       A.complementaryActivitiesCategoryId
                  FROM acdComplementaryActivities A
                 WHERE A.complementaryActivitiesId = ? 
              ORDER BY A.complementaryActivitiesId ';
    
        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$complementaryActivitiesId));
        //$db->Close();
       
        return $result; 
    }


    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getComplementaryActivities($complementaryActivitiesId)
    {
        $sql = '  SELECT A.complementaryActivitiesId,
                         A.contractId,
                         A.complementaryActivity,
                         A.institutionId,
                         A.complementaryActivitiesCategoryId,
                         A.curriculumId,
                         A.periodId,
                         A.totalHours,
                         A.totalCredits,
                         A.degree,
                         A.concept,
                         A.observation,
                         A.userName,
                         TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                         A.ipAddress
                    FROM acdComplementaryActivities A  
                   WHERE A.complementaryActivitiesId = ?  ';
    
                    
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$complementaryActivitiesId));

        $var    = new acdComplementaryActivities();
        
        list ( $var->complementaryActivitiesId,
               $var->contractId,
               $var->complementaryActivity,
               $var->institutionId,
               $var->complementaryActivitiesCategoryId,
               $var->curriculumId,
               $var->periodId,
               $var->totalHours,
               $var->totalCredits,
               $var->degree,
               $var->concept,
               $var->observation,
               $var->userName,
               $var->dateTime,
               $var->ipAddress ) = $result[0];

        return $var;
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the syarch results.
     *
     */
    function searchComplementaryActivities($data)
    {
        $sql = '  SELECT A.complementaryActivitiesId,
                         A.contractId,
                         A.complementaryActivity,
                         A.institutionId,
                         A.complementaryActivitiesCategoryId,
                         D.description,
                         A.curriculumId,
                         A.periodId,
                         A.totalHours,
                         A.totalCredits,
                         A.degree,
                         A.concept,
                         A.observation
                    FROM acdComplementaryActivities A
              INNER JOIN acdContract C
                      ON ( C.contractId = A.contractId )
              INNER JOIN acdComplementaryActivitiesCategory D
                      ON ( D.complementaryActivitiesCategoryId = A.complementaryActivitiesCategoryId ) ';

        if ( strlen((string)$data->complementaryActivitiesId) > 0 )
        {
            $where .= '     AND A.complementaryActivitiesId = ?';
            $args[] = $data->complementaryActivitiesId;
        }

        if ( strlen((string)$data->observation) > 0 )
        {
            $where .= '     AND TO_ASCII(A.observation) ILIKE TO_ASCII(?)';
            $args[] = $data->observation . '%';
        }

        if ( strlen((string)$data->totalHours) > 0 )
        {
            $where .= '     AND A.totalHours = ?';
            $args[] = $data->totalHours;
        }

        if ( strlen((string)$data->totalCredits) > 0 )
        {
            $where .= '     AND A.totalCredits = ?';
            $args[] = $data->totalCredits;
        }

        if ( strlen((string)$data->degree) > 0 )
        {
            $where .= '     AND A.degree = ?';
            $args[] = $data->degree;
        }

        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '     AND A.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen((string)$data->concept) > 0 )
        {
            $where .= '     AND A.concept = ?';
            $args[] = $data->concept;
        }

        if ( strlen((string)$data->complementaryActivitiesCategoryId) > 0 )
        {
            $where .= '     AND A.complementaryActivitiesCategoryId = ?';
            $args[] = $data->complementaryActivitiesCategoryId;
        }

        if ( strlen((string)$data->personId) > 0 )
        {
            $where .= '     AND C.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen((string)$data->contractId) > 0 )
        {
            $where .= '     AND C.contractId = ?';
            $args[] = $data->contractId;
        }


        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.complementaryActivitiesCategoryId, 
                                  A.observation';
            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
            //$db->Close();
        }        
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateComplementaryActivities($data)
    {
        $sql = 'UPDATE acdComplementaryActivities                             
                   SET contractId = ?,
                       complementaryActivity = ?,
                       institutionId = ?,
                       complementaryActivitiesCategoryId = ?,
                       curriculumId = ?,
                       periodId = ?,
                       totalHours = ?,
                       totalCredits = ?,
                       degree = ?,
                       concept = ?,
                       observation = ?
                 WHERE complementaryActivitiesId = ? ';


        $args = array($data->contractId,
                      $data->complementaryActivity,
                      $data->institutionId,
                      $data->complementaryActivitiesCategoryId,
                      $data->curriculumId,
                      $data->periodId,
                      $data->totalHours,
                      $data->totalCredits,
                      $data->degree,
                      $data->concept,
                      $data->observation,
                      $data->complementaryActivitiesId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $complementaryActivitiesId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteComplementaryActivities($complementaryActivitiesId)
    {
        $delete = 'DELETE FROM acdComplementaryActivities
                    WHERE complementaryActivitiesId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$complementaryActivitiesId));

        //$db->Close();

        return $result;
    }

    function getPupilGroupEnroll($groupId, $contractId)
    {
        $sql = 'SELECT enrollId
                  FROM acdEnroll
                 WHERE groupId = ?
                   AND contractId = ?';

        $args = array( $groupId,
                       $contractId );

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    function insertPupilGroupEnroll($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busContract  = $MIOLO->getBusiness($module, 'BusContract');
        $contractData = $busContract->getContract($data->contractId);

        $sql = 'SELECT curriculumId
                  FROM acdCurriculum
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND unitId = ?
                   AND turnId = ?
                   AND curriculumTypeId IN (' . ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY . ')';

        $args = array( $contractData->courseId,
                       $contractData->courseVersion,
                       $contractData->unitId,
                       $contractData->turnId);

        $db = $this->getDatabase();

        $curriculumId = $db->query(SAGU::prepare($sql, $args));

        $curriculumId = $curriculumId[0][0];

        if (strlen((string)$curriculumId) > 0)
        {
            $sql = 'SELECT nextval(\'seq_enrollid\')'; 

            $enrollId = $db->query($sql);

            $enrollId = $enrollId[0][0];

            $sql = 'INSERT INTO acdEnroll
                                (enrollId,
                                 curriculumId,
                                 groupId,
                                 contractId,
                                 dateEnroll,
                                 hourEnroll,
                                 concept,
                                 statusId)
                          VALUES (?,
                                  ?,
                                  ?,
                                  ?,
                                  now(),
                                  now(),
                                  ?,' .
                                  ENROLL_STATUS_APPROVED . ')';

            $args = array( $enrollId,
                           $curriculumId,
                           $data->groupId,
                           $data->contractId,
                           $data->concept );

            $result = $db->execute(SAGU::prepare($sql, $args));

            if (count($this->getErrors()) > 0) 
            {
                return null;
            }
            else
            {
                return $enrollId;
            }
        }

        return null;
    }
}

   
?>
