<?php
/**
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdGroup table
 **/
class BusinessAcademicBusScheduleReport extends Business
{
    public $db;
    
    //Class constructor
    public function __construct()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listGroup()
    {
        return 'Not implemented';
    }
    
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchGroup($filters)
    {
        $sql = 'SELECT  A.groupId,
                        C.curricularComponentId || \'/\' || C.curricularComponentVersion || \' - \' || C.name,
                        A.isCancellation,
                        COALESCE(A.totalEnrolled, 0) || \'/\' || COALESCE(A.vacant, 0),
                        D.description,
                        TO_CHAR(E.beginDate, \'' . MASK_DATE . '\'),
                        TO_CHAR(E.endDate, \'' . MASK_DATE . '\'),
                        E.learningPeriodId,
                        C.shortname,
                        I.classId,
                        M.description,
                        N.shortDescription,
                        L.description,
                        COALESCE(P.shortname, SUBSTRING(P.name, 1, 40)) as professorName,
                        E.periodId,
                        K.professorId,
                        C.lessonNumberHours,
                        O.room,
                        B.semester
                   FROM acdGroup A
              LEFT JOIN acdCurriculum B 
                     ON (B.curriculumId = A.curriculumId)
              LEFT JOIN acdCurricularComponent C 
                     ON (C.curricularComponentId = B.curricularComponentId AND
                         C.curricularComponentVersion = B.curricularComponentVersion)
              LEFT JOIN acdRegimen D 
                     ON (A.regimenId = D.regimenId)
              LEFT JOIN acdLearningPeriod E
                     ON (E.learningPeriodId = A.learningPeriodId)
              LEFT JOIN acdCourse F
                     ON (F.courseId = E.courseId)
              LEFT JOIN acdClass I
                     ON (I.classId = A.classId)
              LEFT JOIN acdSchedule J 
                     ON ( J.groupId = A.groupId ) 
              LEFT JOIN acdScheduleProfessor K 
                     ON ( K.scheduleId = J.scheduleId )
              LEFT JOIN acdScheduleLearningPeriod L
                     ON ( L.scheduleLearningPeriodId = J.scheduleLearningPeriodId )
              LEFT JOIN basTurn M 
                     ON ( M.turnId = L.turnId )
              LEFT JOIN basWeekDay N
                     ON ( N.weekDayId = J.weekDayId ) 
              LEFT JOIN insPhysicalResource O
                     ON ( O.physicalResourceId = J.physicalResourceId AND O.physicalResourceVersion = J.physicalResourceVersion ) 
             INNER JOIN ONLY basPhysicalPerson P 
                     ON ( P.personId = K.professorId )';

        if ( strlen((string)$filters->classId) > 0 )
        {
            $where .= ' AND A.classId = ? ';
            $args[] = $filters->classId;
        }
        if ( strlen((string)$filters->className) > 0 )
        {
            $where .= ' AND TO_ASCII(I.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->className;
        }
        if ( strlen((string)$filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $filters->groupId;
        }
        if ( strlen((string)$filters->curricularComponentId) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen((string)$filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND C.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen((string)$filters->curricularComponentName) > 0 )
        {
            $where .= ' AND TO_ASCII(C.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen((string)$filters->regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ?';
            $args[] = $filters->regimenId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0)
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        } 
        if ( strlen((string)$filters->learningPeriodDescription) > 0)
        {
            $where .= ' AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->learningPeriodDescription;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND E.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND E.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseUnitId) > 0 )
        {
            $where .= ' AND E.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseTurnId) > 0 )
        {
            $where .= ' AND E.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(F.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName;
        }
        if ( strlen((string)$filters->professorId) > 0 )
        {
            $where .= ' AND EXISTS (SELECT \'X\'
                                      FROM acdSchedule X
                                INNER JOIN acdScheduleProfessor Y
                                        ON (Y.scheduleId = X.scheduleId)
                                     WHERE X.groupId = A.groupId
                                       AND Y.professorId = ?)';
            $args[] = $filters->professorId;
        }
        if ( strlen((string)$filters->unitId) > 0 || strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND EXISTS (SELECT \'X\'
                                      FROM acdSchedule X
                                INNER JOIN acdScheduleLearningPeriod Y
                                        ON (Y.scheduleLearningPeriodId = X.scheduleLearningPeriodId)
                                     WHERE X.groupId = A.groupId';
            unset($subWhere);
            if ( strlen((string)$filters->unitId) > 0 )
            {
                $where .= ' AND X.unitId = ?';
                $args[] = $filters->unitId;
            }
            if ( strlen((string)$filters->turnId) > 0 )
            {
                $where .= ' AND Y.turnId = ?';
                $args[] = $filters->turnId;
            }
            $where .= ')';
        }
        if ( strlen((string)$filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen((string)$filters->isCancellation) > 0 )
        {
            $where .= ' AND A.isCancellation = ?';
            $args[] = $filters->isCancellation;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY E.periodId, M.description, B.semester, A.classId, A.groupId, C.name, N.weekDayId, L.description  ';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        if ( count( $result ) > 0 )
        {   
            foreach ( $result as $item => $value )
            {
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->disciplina = $value[8];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->ch = $value[16];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->vagas = $value[3];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->cancelada = $value[2];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->horarios[$value[11]][] = $value[12];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->professor[$value[15]] = $value[13];
               $period[$value[14]][$value[10]][$value[18]][$value[9]][$value[0]]->room[$value[17]] = $value[17];
//               $period[$value[14]][$value[10]][$value[18]][$value[9]]['semester'][$value[18]] = $value[18];

            }
        }

        return $period;
    }
}

?>
