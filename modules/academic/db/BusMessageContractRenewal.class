<?php
/**
 *
 * This file handles the connection and actions for acdMessageContractRenewal table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdMessageContractRenewal table
 **/
class BusinessAcademicBusMessageContractRenewal extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listMessageContractRenewal()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $messageContractRenewalId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getMessageContractRenewal($messageContractRenewalId)
    {
        $sql = 'SELECT A.messageContractRenewalId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.message,
                       A.font,
                       A.sequence,
                       A.length,
                       A.isListener,
                       A.status,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdMessageContractRenewal A
             LEFT JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)
                 WHERE A.messageContractRenewalId = ?';

        $pk = array(
                     $messageContractRenewalId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $messageContractRenewal = new AcdMessageContractRenewal();

        list ( $messageContractRenewal->messageContractRenewalId,
               $messageContractRenewal->learningPeriodId,
               $messageContractRenewal->description,
               $messageContractRenewal->message,
               $messageContractRenewal->font,
               $messageContractRenewal->sequence,
               $messageContractRenewal->length,
               $messageContractRenewal->isListener,
               $messageContractRenewal->status,
               $messageContractRenewal->userName,
               $messageContractRenewal->dateTime,
               $messageContractRenewal->ipAddress ) = $result[0];

        return $messageContractRenewal; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMessageContractRenewal($filters)
    {
        $sql = 'SELECT A.messageContractRenewalId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.message,
                       A.font,
                       A.sequence,
                       A.length,
                       A.isListener,
                       A.status,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdMessageContractRenewal A
             LEFT JOIN acdLearningPeriod B
                    ON (B.learningPeriodId = A.learningPeriodId)';

        if ( strlen((string)$filters->messageContractRenewalId) > 0 )
        {
            $where .= ' AND A.messageContractRenewalId = ?';
            $args[] = $filters->messageContractRenewalId;
        }
        if ( strlen((string)$filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen((string)$filters->learningPeriodDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->learningPeriodDescription . '%' ;
        }
        if ( strlen((string)$filters->message) > 0 )
        {
            $where .= ' AND A.message ILIKE ?';
            $args[] = $filters->message  . '%' ;
        }
        if ( strlen((string)$filters->font) > 0 )
        {
            $where .= ' AND A.font ILIKE ?';
            $args[] = $filters->font  . '%' ;
        }
        if ( strlen((string)$filters->sequence) > 0 )
        {
            $where .= ' AND A.sequence = ?';
            $args[] = $filters->sequence;
        }
        if ( strlen((string)$filters->length) > 0 )
        {
            $where .= ' AND A.length = ?';
            $args[] = $filters->length;
        }
        if ( strlen((string)$filters->isListener) > 0 )
        {
            $where .= ' AND A.isListener = ?';
            $args[] = $filters->isListener;
        }
        if ( strlen((string)$filters->status) > 0 )
        {
            $where .= ' AND A.status = ?';
            $args[] = $filters->status;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertMessageContractRenewal($data)
    {
        $sql = 'INSERT INTO acdMessageContractRenewal
                            (learningPeriodId,
                             message,
                             font,
                             sequence,
                             length,
                             isListener,
                             status)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->learningPeriodId,
                       $data->message,
                       $data->font,
                       $data->sequence,
                       $data->length,
                       $data->isListener,
                       $data->status
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateMessageContractRenewal($data)
    {
        $sql = 'UPDATE acdMessageContractRenewal
                   SET learningPeriodId = ?,
                       message          = ?,
                       font             = ?,
                       sequence         = ?,
                       length           = ?,
                       isListener       = ?,
                       status           = ?
                 WHERE messageContractRenewalId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->message,
                       $data->font,
                       $data->sequence,
                       $data->length,
                       $data->isListener,
                       $data->status,
                       $data->messageContractRenewalId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $messageContractRenewalId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteMessageContractRenewal($messageContractRenewalId)
    {
        $sql = 'DELETE FROM acdMessageContractRenewal
                      WHERE messageContractRenewalId = ?';

        $pk = array(
                     $messageContractRenewalId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
