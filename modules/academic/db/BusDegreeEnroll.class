<?php
/**
 *
 * This file handles the connection and actions for acdDegree table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdDegree table
 **/
class BusinessAcademicBusDegreeEnroll extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDegree()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $degreeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getDegreeEnroll($degreeId, $enrollId)
    {
        $sql = 'SELECT A.degreeId,
                       A.enrollId,
                       CASE WHEN A.isNotPresent = true THEN \'--\' ELSE A.note::text END as note,
                       A.concept,
                       A.descriptive,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdDegreeEnroll A
                 WHERE A.degreeId = ? AND
                       A.enrollId = ?';

        $pk = array(
                     $degreeId,
                     $enrollId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));

        $degreeEnroll = new AcdDegreeEnroll();

        list ( $degreeEnroll->degreeId,
               $degreeEnroll->enrollId,
               $degreeEnroll->note,
               $degreeEnroll->concept,
               $degreeEnroll->descriptive,
               $degreeEnroll->userName,
               $degreeEnroll->dateTime,
               $degreeEnroll->ipAddress ) = $result[0];

        return $degreeEnroll; 
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDegreeEnroll($data)
    {
        $sql = 'INSERT INTO acdDegreeEnroll
                            (degreeId,
                             enrollId ';

        $args = array($data->degreeId,
                      $data->enrollId);

        $values = '';

        if ( strlen((string)$data->note) > 0 )
        {
            $sql    .= ', note';
            $args[]  = $data->note;
            $values .= ', ?';
        }

        if ( strlen((string)$data->concept) > 0 )
        {
            $sql    .= ', concept';
            $args[]  = $data->concept;
            $values .= ', ?';
        }

        if ( strlen((string)$data->descriptive) > 0 )
        {
            $sql    .= ', descriptive';
            $args[]  = $data->descriptive;
            $values .= ', ?';
        }

        $sql .= ') VALUES ( ?, ?';

        $sql .= $values;

        $sql .= ')';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateDegreeEnroll($data)
    {
        $db   = $this->getDatabase();

        $sql = 'UPDATE acdDegreeEnroll
                   SET degreeId = ?,
                       enrollId = ?';

        $args = array ($data->degreeId,
                       $data->enrollId);

        if ( strlen((string)$data->note) > 0 )
        {
            $sql .= ', note = ?';
            $args[] = $data->note;
        }

        if ( strlen((string)$data->concept) > 0 )
        {
            $sql .= ', concept = ?';
            $args[] = $data->concept;
        }

        if ( strlen((string)$data->descriptive) > 0 )
        {
            $sql .= ', descriptive = ?';
            $args[] = $data->descriptive;
        }

        $sql .= 'WHERE degreeId = ? AND
                       enrollId = ?';

        $args[] = $data->degreeId;
        $args[] = $data->enrollId;

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

     function beginTransaction()
     {
        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');
     }

     function commit()
     {
        $db = $this->getDatabase();
        $db->execute('COMMIT');
     }

// 
//     /**
//      * Delete a record
//      *
//      * @param $degreeId (string): Primary key for deletion
//      *
//      * @return (boolean): True if succeed, otherwise False
//      *
//      **/
//     public function deleteDegree($degreeId)
//     {
//         $sql = 'DELETE FROM acdDegree
//                       WHERE degreeId = ?';
// 
//         $pk = array(
//                      $degreeId
//                    );
// 
//         $db     = $this->getDatabase();
//         $result = $db->execute(SAGU::prepare($sql, $pk));
//         //$db->close();
// 
//         return $result;
//     }

}

?>
