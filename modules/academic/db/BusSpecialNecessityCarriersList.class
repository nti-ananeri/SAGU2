<?php
/**
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusSpecialNecessityCarriersList extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     *  Return the locked contracts list
     *
     *  @return (array): Array containing the results.
     */
     public function listSpecialNecessityCarriers($filters)
     {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $res   = '<font color=red>' . _M('Res', $module) . '</font>';
        $wrk   = '<font color=red>' . _M('Wrk', $module) . '</font>';
        $cel   = '<font color=red>' . _M('Cel', $module) . '</font>';
        $email = '<font color=red>' . _M('E-mail', $module) . '</font>';
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       G.shortName,
                       A.unitId,
                       A.turnId,
                       A.personId,
                       B.name,
                       B.location || CASE WHEN B.number IS NOT NULL 
                                          THEN \', \' || B.number 
                                          ELSE \'\' END ||
                                     CASE WHEN B.neighborhood IS NOT NULL
                                          THEN \' - \' || B.neighborhood 
                                          ELSE \'\' END ||
                                     CASE WHEN B.zipCode IS NOT NULL
                                          THEN \' - \' || B.zipCode 
                                          ELSE \'\' END,
                       B.cityId,
                       C.name || \'-\' || C.stateId,
                       \'' . $res . ' \' || B.residentialPhone ||
                       \' ' . $wrk . ' \' || B.workPhone ||
                       \' ' . $cel . ' \' || B.cellPhone || 
                       \' ' . $email . ' \' || B.email,
                       D.content,
                       B.specialNecessityId,
                       F.description,
                       B.specialNecessityDescription,
                       E.description
                  FROM acdContract A
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
             LEFT JOIN basCity C
                    ON (C.cityId = B.cityId)
             LEFT JOIN basDocument D
                    ON (D.personId = A.personId AND
                        D.documentTypeId = ' . DEFAULT_DOCUMENT_TYPE_ID_RG . ')
            INNER JOIN acdStateContract E
                    ON (E.stateContractId = getContractState(A.contractId))
             LEFT JOIN basSpecialNecessity F
                    ON (F.specialNecessityId = B.specialNecessityId)
            INNER JOIN acdCourse G
                    ON (G.courseId = A.courseId)';
                            
        if (strlen((string)$filters->courseId) > 0)
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen((string)$filters->courseVersion) > 0)
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen((string)$filters->unitId) > 0)
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen((string)$filters->turnId) > 0)
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen((string)$filters->specialNecessityId) > 0)
        {
            $where .= ' AND B.specialNecessityId = ? ';
            $args[] = $filters->specialNecessityId;
        }
        else
        {
            $where .= ' AND B.specialNecessityId <> ' . NO_SPECIAL_NECESSITY_ID;
        }
        if ($filters->onlyEnrolled == 1)
        {
            $where .= ' AND E.stateContractId = ' . STATE_CONTRACT_ID_ENROLLED;
        }
                                 
        if (strlen((string)$where) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.specialNecessityId, A.courseId, B.name ';
            
            $result = $db->query(SAGU::prepare($sql, $args));
            
            if (count($result) > 0)
            {
                foreach ($result as $res)
                {
                    $return[$res[12]]->title  = $res[13];
                    $return[$res[12]]->data[] = $res;
                }
                return $return;
            }
        }
        return null;
    }
}
?>
