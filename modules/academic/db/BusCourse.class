<?php
/**
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusCourse extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourse()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT courseId,
                       name   
                  FROM acdCourse   
              ORDER BY name ';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourse($courseId)
    {
        $sql = 'SELECT courseId,
                       formationLevelId,
                       name,
                       shortName,
                       acronym,
                       centerId,
                       to_char(beginDate, \''.MASK_DATE.'\'),
                       to_char(recognitionDate, \''.MASK_DATE.'\'),
                       recognitionDocumentNumber,
                       moreInfo,
                       to_char(endDate, \''.MASK_DATE.'\'),
                       knowledgeAreaId,
                       requirements,
                       obs,
                       reportOrder,
                       educationAreaId,
                       percTrainingPeriod,
                       incomeSourceId,
                       policyId,
                       bankAccountId,
                       bankContractId,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress,
                       degree,
                       enrollbooksequence,
                       inep,
                       policyIdForEnroll,
                       policyIdForReEnroll
                  FROM acdCourse
                 WHERE courseId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $courseId));
        //$db->close();

        $course = new acdCourse();
        list ( $course->courseId,
               $course->formationLevelId,
               $course->name,
               $course->shortName,
               $course->acronym,
               $course->centerId,
               $course->beginDate,
               $course->recognitionDate,
               $course->recognitionDocumentNumber,
               $course->moreInfo,
               $course->endDate,
               $course->knowledgeAreaId,
               $course->requirements,
               $course->obs,
               $course->reportOrder,
               $course->educationAreaId,
               $course->percTrainingPeriod,
               $course->incomeSourceId,
               $course->policyId,
               $course->bankAccountId,
               $course->bankContractId,
               $course->userName,
               $course->dateTime,
               $course->ipAddress,
               $course->degree,
               $course->enrollBookSequence,
               $course->inep,
               $course->policyIdForEnroll,
               $course->policyIdForReEnroll ) = $result[0];
        return $course; 
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSerialCourse($courseId, $courseVersion, $courseVersionTypeId, $personId)
    {
        $sql = 'SELECT C.name as courseName,
                       E.name as className
                  FROM acdCourseVersion A
            INNER JOIN acdContract B
                    ON (B.courseId           = A.courseId AND
                        B.courseVersion      = A.courseVersion AND
                        B.personId           = \''.$personId.'\')
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN acdClassPupil D
                    ON (D.contractId = B.contractId)
            INNER JOIN acdClass E
                    ON (E.classId = D.classId)
                 WHERE A.courseId            = \''.$courseId.'\'
                   AND A.courseVersion       = \''.$courseVersion.'\'
                   AND A.courseVersionTypeId = \''.$courseVersionTypeId.'\'' ;

        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourse($filters)
    {
        $sql= 'SELECT A.courseId,
                      A.name,
                      A.formationLevelId,
                      B.description,
                      A.shortName,
                      A.acronym,
                      A.centerId,
                      C.name,
                      TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                      A.inep
                 FROM acdCourse A
      LEFT OUTER JOIN acdFormationLevel B
                   ON (B.formationLevelId = A.formationLevelId)
      LEFT OUTER JOIN acdCenter C
                   ON (C.centerId = A.centerId)';

        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen((string)$filters->shortName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.shortName) ILIKE TO_ASCII(?) ';
            $args[] = $filters->shortName . '%';
        }
        if ( strlen((string)$filters->directorId) > 0 )
        {
            $where .= ' AND A.directorId = ? ';
            $args[] = $filters->directorId;
        }
        if ( strlen((string)$filters->formationLevelId) > 0 && $filters->formationLevelId != 0 )
        {
            $where .= ' AND A.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen((string)$filters->centerId) > 0 && $filters->centerId != 0)
        {
            $where .= ' AND A.centerId = ? ';
            $args[] = $filters->centerId;
        }

        if ( strlen((string)$filters->inep) > 0 )
        {
            $where .= ' AND A.inep = ?::integer ';
            $args[] = $filters->inep;
        }



        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.name, A.shortName ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourse($data)
    {
        $sql = 'INSERT INTO acdCourse
                            (courseId,
                             inep,
                             formationLevelId,
                             name,
                             shortName,
                             acronym,
                             centerId,
                             beginDate,
                             recognitionDate,
                             recognitionDocumentNumber,
                             moreInfo,
                             endDate,
                             knowledgeAreaId,
                             requirements,
                             obs,
                             reportOrder,
                             educationAreaId,
                             percTrainingPeriod,
                             incomeSourceId,
                             policyId,
                             policyIdForEnroll,
                             policyIdForReEnroll,
                             bankAccountId,
                             bankContractId,
                             degree,
                             enrollbooksequence)
                     VALUES (?,?::integer,?,?,?,?,?,to_date(?, \''.MASK_DATE.'\'),to_date(?, \''.MASK_DATE.'\'),?,?,to_date(?, \''.MASK_DATE.'\'),?,?,?,?,?,?,?,?,?,?,?,?,?,?) ';

        $args = array( $data->courseId,
                       $data->inep,
                       $data->formationLevelId,
                       $data->name,
                       $data->shortName,
                       $data->acronym,
                       $data->centerId,
                       $data->beginDate,
                       $data->recognitionDate,
                       $data->recognitionDocumentNumber,
                       $data->moreInfo,
                       $data->endDate,
                       $data->knowledgeAreaId,
                       $data->requirements,
                       $data->obs, 
                       $data->reportOrder,
                       $data->educationAreaId,
                       $data->percTrainingPeriod,
                       $data->incomeSourceId,
                       $data->policyId,
                       $data->policyIdForEnroll,
                       $data->policyIdForReEnroll,
                       $data->bankAccountId,
                       $data->bankContractId,
                       $data->degree,
                       $data->enrollBookSequence );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateCourse($data)
    {
        $sql = 'UPDATE acdCourse
                   SET inep = ?::integer,
                       formationLevelId = ?,
                       name = ?,
                       shortName = ?,
                       acronym = ?,
                       centerId = ?,
                       beginDate = to_date(?, \''.MASK_DATE.'\'),
                       recognitionDate = to_date(?, \''.MASK_DATE.'\'),
                       recognitionDocumentNumber = ?,
                       moreInfo = ?,
                       endDate = to_date(?, \''.MASK_DATE.'\'),
                       knowledgeAreaId = ?,
                       requirements = ?,
                       obs = ?,
                       reportOrder = ?,
                       educationAreaId = ?,
                       percTrainingPeriod = ?,
                       incomeSourceId = ?,
                       policyId = ?,
                       policyIdForEnroll = ?,
                       policyIdForReEnroll = ?,
                       bankAccountId = ?,
                       bankContractId = ?,
                       degree = ?,
                       enrollbooksequence = ?
                 WHERE courseId = ? ';

        $args = array( $data->inep,
                       $data->formationLevelId,
                       $data->name,
                       $data->shortName,
                       $data->acronym,
                       $data->centerId,
                       $data->beginDate,
                       $data->recognitionDate,
                       $data->recognitionDocumentNumber,
                       $data->moreInfo,
                       $data->endDate,
                       $data->knowledgeAreaId,
                       $data->requirements,
                       $data->obs,
                       $data->reportOrder,
                       $data->educationAreaId,
                       $data->percTrainingPeriod,
                       $data->incomeSourceId,
                       $data->policyId,
                       $data->policyIdForEnroll,
                       $data->policyIdForReEnroll,
                       $data->bankAccountId,
                       $data->bankContractId,
                       $data->degree,
                       $data->enrollBookSequence,
                       $data->courseId );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteCourse($courseId)
    {
        $sql = 'DELETE FROM acdCourse
                      WHERE courseId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $courseId));
        //$db->close();
        return $result;
    }
}
?>
