<?php
/**
 *
 * This file handles the connection and actions for acdTestEndCourseType table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdTestEndCourseType table
 **/
class BusinessAcademicBusTestEndCourseType extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listTestEndCourseType()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $testEndCourseTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTestEndCourseType($testEndCourseTypeId)
    {
        $sql = 'SELECT description,
                       TO_CHAR(beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(endDate,\'' . MASK_DATE . '\'),
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM acdTestEndCourseType A
                 WHERE A.testEndCourseTypeId = ?';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $testEndCourseTypeId));
        //$db->close();

        $testEndCourseType = new acdTestEndCourseType();

        list ( $testEndCourseType->description,
               $testEndCourseType->beginDate,
               $testEndCourseType->endDate,
               $testEndCourseType->userName,
               $testEndCourseType->dateTime,
               $testEndCourseType->ipAddress ) = $result[0];

        return $testEndCourseType; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTestEndCourseType($filters)
    {
        $sql = 'SELECT A.testEndCourseTypeId,
                       A.description,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\')
                  FROM acdTestEndCourseType A ';

        if ( strlen((string)$filters->testEndCourseTypeId) > 0 )
        {
            $where .= ' AND A.testEndCourseTypeId ILIKE ?';
            $args[] = $filters->testEndCourseTypeId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTestEndCourseType($data)
    {
        $sql = 'INSERT INTO acdTestEndCourseType
                            (description,beginDate,endDate)
                     VALUES (?,TO_DATE(?,\'' . MASK_DATE . '\'),TO_DATE(?,\'' . MASK_DATE . '\'))';

        $args = array(   $data->description,
                         $data->beginDate,
                         $data->endDate);

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateTestEndCourseType($data)
    {
        $sql = 'UPDATE acdTestEndCourseType
                   SET description          = ?,
                       beginDate = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endDate = TO_DATE(?,\'' . MASK_DATE . '\')
                 WHERE testEndCourseTypeId  = ? ';

        $args = array( $data->description,
                       $data->beginDate,
                       $data->endDate,
                       $data->testEndCourseTypeId );


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $testEndCourseTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTestEndCourseType($testEndCourseTypeId)
    {
        $sql = 'DELETE FROM acdTestEndCourseType
                      WHERE testEndCourseTypeID = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $testEndCourseTypeId));
        //$db->close();

        return $result;
    }

}

?>
