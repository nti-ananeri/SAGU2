<?php

/**
 * Class to manipulate the acdLearningPeriod table data.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 */

class BusinessAcademicBusLearningPeriod extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessAcademicBusLearningPeriod()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Creates a connection with the specified database. If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname Specifies the database name to which we want to connect.
     *
     * @return A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertLearningPeriod($data)
    {

        if ( strlen((string)$data->parcelsNumber) == 0 )
        {
            $data->parcelsNumber = 1;
        }

        $sql = 'INSERT INTO acdLearningPeriod
                            (periodId,
                             courseId,
                             courseVersion,
                             turnId,
                             policyId,
                             bankAccountId,
                             bankContractId,
                             parcelsNumber,
                             unitId,
                             description,
                             formationLevelId,
                             previousLearningPeriodId,
                             beginDate,
                             endDate,
                             beginDateLessons,
                             weekEndExamsBegin,
                             average,
                             finalAverage,
                             minimumFrequency,
                             minimumCredits,
                             minimumCreditsFreshman,
                             minimumCreditsTurn,
                             isFinanceGenerate,
                             averageWeight,
                             examWeight,
                             disapprovationWithoutExam,
                             maxNote
                             )
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,?,?,?,?,?,?,?,?,?,?)';

        $args = array(
                      $data->periodId,
                      $data->courseId,
                      $data->courseVersion,
                      $data->turnId,
                      $data->policyId,
                      $data->bankAccountId,
                      $data->bankContractId,
                      $data->parcelsNumber,
                      $data->unitId,
                      $data->description,
                      $data->formationLevelId,
                      $data->previousLearningPeriodId,
                      $data->beginDate,
                      $data->endDate,
                      $data->beginDateLessons,
                      $data->weekEndExamsBegin,
                      $data->average,
                      $data->finalAverage,
                      $data->minimumFrequency,
                      $data->minimumCredits,
                      $data->minimumCreditsFreshman,
                      $data->minimumCreditsTurn,
                      $data->isFinanceGenerate,
                      $data->averageWeight,
                      $data->examWeight,
                      $data->disapprovationWithoutExam,
                      $data->maxNote
                      );

        //$db = $this->getDatabase();

        $result = $this->db->Execute(SAGU::prepare($sql, $args));
        //$db->Close();

        return $result;
    }

    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified learningPeriodId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getLearningPeriod($learningPeriodId)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.periodId,
                       B.description,
                       A.courseId,
                       C.name,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.description,
                       A.formationLevelId,
                       A.previousLearningPeriodId,
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginDateLessons, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.weekEndExamsBegin, \'' . MASK_DATE . '\'),
                       A.average,
                       A.finalAverage,
                       A.minimumFrequency,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       CASE WHEN length(A.policyId::varchar)>0 THEN A.policyId ELSE C.policyId END,
                       A.bankAccountId,
                       A.bankContractId,
                       A.parcelsNumber,
                       A.minimumCredits,
                       A.minimumCreditsFreshman,
                       A.minimumCreditsTurn,
                       A.isFinanceGenerate,
                       A.averageWeight,
                       A.examWeight,
                       A.disapprovationWithoutExam,
                       A.maxNote
                  FROM acdLearningPeriod A
             LEFT JOIN acdPeriod B ON (A.periodId = B.periodId)
             LEFT JOIN acdCourse C ON (A.courseId = C.courseId)
                 WHERE A.learningPeriodId = ?';

        //$db = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql,$learningPeriodId));
        //$db->Close();

        $period = new acdLearningPeriod();

        list ( $period->learningPeriodId,
               $period->periodId,
               $period->periodDescription,
               $period->courseId,
               $period->courseName,
               $period->courseVersion,
               $period->turnId,
               $period->unitId,
               $period->learningPeriodDescription,
               $period->formationLevelId,
               $period->previousLearningPeriodId,
               $period->beginDate,
               $period->endDate,
               $period->beginDateLessons,
               $period->weekEndExamsBegin,
               $period->average,
               $period->finalAverage,
               $period->minimumFrequency,
               $period->userName,
               $period->dateTime,
               $period->ipAddress,
               $period->policyId,
               $period->bankAccountId,
               $period->bankContractId,
               $period->parcelsNumber,
               $period->minimumCredits,
               $period->minimumCreditsFreshman,
               $period->minimumCreditsTurn,
               $period->isFinanceGenerate,
               $period->averageWeight,
               $period->examWeight,
               $period->disapprovationWithoutExam,
               $period->maxNote) = $result[0];

        return $period; 
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchLearningPeriod($data)
    {
        $select = '   SELECT A.learningPeriodId,
                             A.description,
                             A.previouslearningperiodid,
                             TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                             TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                             A.formationLevelId,
                             B.description,
                             A.courseId,
                             C.name,
                             A.courseVersion,
                             A.turnId,
                             A.unitId,
							 D.description,
                             E.description
                        FROM acdLearningPeriod A
                   LEFT JOIN acdFormationLevel B ON (A.formationLevelId = B.formationLevelId)
                  INNER JOIN acdCourse C ON (C.courseId = A.courseId)
				  INNER JOIN basTurn D on ( A.turnId = D.turnId )
                  INNER JOIN basUnit E ON ( E.unitId = A.unitId ) ';

        if ( strlen((string)$data->learningPeriodId) > 0 )
        {
            $where .= '     AND A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }
        
     if ( strlen((string)$data->learningPeriodIdCod) > 0 )
        {
            $where .= '     AND A.learningPeriodId = ?';
            $args[] = $data->learningPeriodIdCod;
        }

        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '     AND A.periodId LIKE ?';
            $args[] = $data->periodId;
        }

        if ( strlen((string)$data->formationLevelId) > 0 )
        {
            $where .= '     AND A.formationLevelId = ?';
            $args[] = $data->formationLevelId;
        }

        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '     AND A.courseId = ?';
            $args[] = $data->courseId;
        }

        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '     AND A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }

        if ( strlen((string)$data->turnId) > 0 )
        {
            $where .= '     AND A.turnId = ?';
            $args[] = $data->turnId;
        }

        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= '     AND A.unitId = ?';
            $args[] = $data->unitId;
        }
	    
        if ( strlen((string)$data->unitDescription) > 0 )
        {
            $where .= '     AND TO_ASCII(E.description) ILIKE TO_ASCII(?)';
            $args[] = $data->unitDescription. '%';
        }
		if ( strlen((string)$data->endDate) > 0 )
		{
            $where .= '     AND A.endDate > ?';
            $args[] = $data->endDate;
		}

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.courseId, A.description';

            //$db      = $this->getDatabase();
            $result  = $this->db->query(SAGU::prepare($select,$args));
            //$db->Close();
        }

        return $result;
    }
    
    function listLearningPeriod()
    {
        $sql = 'SELECT learningPeriodId,
                       description
                  FROM acdLearningPeriod
              ORDER BY 1';
              
        //$db = $this->getDatabase();
        $result = $this->db->query($sql);
        
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateLearningPeriod($data)
    {

        if ( $data->isFinanceGenerate == DB_FALSE )
        {
            $data->parcelsNumber = 1;
            $data->policyId      = NULL;
            $data->bankAccountId = NULL;
        }

        $sql = 'UPDATE acdLearningPeriod
                   SET periodId         = ?,
                       courseId         = ?,
                       courseVersion    = ?,
                       turnId           = ?,
                       policyId         = ?,
                       bankAccountId    = ?,
                       bankContractId = ?,
                       parcelsNumber    = ?,
                       unitId           = ?,
                       description      = ?,
                       formationLevelId = ?,
                       previousLearningPeriodId = ?,
                       beginDate                = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endDate                  = TO_DATE(?,\'' . MASK_DATE . '\'),
                       beginDateLessons         = TO_DATE(?,\'' . MASK_DATE . '\'),
                       weekEndExamsBegin        = TO_DATE(?,\'' . MASK_DATE . '\'),
                       average          = ?,
                       finalAverage     = ?,
                       minimumFrequency = ?,
                       minimumCredits   = ?,
                       minimumCreditsFreshman = ?,
                       minimumCreditsTurn = ?,
                       isFinanceGenerate  = ?,
                       averageWeight      = ?,
                       examWeight         = ?,
                       disapprovationWithoutExam = ?,
                       maxNote            = ?
                 WHERE learningPeriodId = ?';
        $args = array($data->periodId,
                      $data->courseId,
                      $data->courseVersion,
                      $data->turnId,
                      $data->policyId,
                      $data->bankAccountId,
                      $data->bankContractId,
                      $data->parcelsNumber,
                      $data->unitId,
                      $data->description,
                      $data->formationLevelId,
                      $data->previousLearningPeriodId,
                      $data->beginDate,
                      $data->endDate,
                      $data->beginDateLessons,
                      $data->weekEndExamsBegin,
                      $data->average,
                      $data->finalAverage,
                      $data->minimumFrequency,
                      $data->minimumCredits,
                      $data->minimumCreditsFreshman,
                      $data->minimumCreditsTurn,
                      $data->isFinanceGenerate,
                      $data->averageWeight,
                      $data->examWeight,
                      $data->disapprovationWithoutExam,
                      $data->maxNote,
                      $data->learningPeriodId
                      );

        //$db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }
        //$db->Close();

        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteLearningPeriod($learningPeriodId)
    {
        $delete = 'DELETE FROM acdLearningPeriod
                    WHERE learningPeriodId = ?';


        //$db     = $this->getDatabase();

        $result = $this->db->Execute(SAGU::prepare($delete,$learningPeriodId));

        //$db->Close();

        return $result;
    }

    /**
     * TODO
     * Get the minimun note approvation for learning period by course and period
     *
     * @author William Prigol Lopes [william@solis.coop.br]
     * 
     * @param $courseId (int): Identifier to course Id
     * @param $courseVersion (int): Identifier to course version
     * @param $periodId (int): Identifier to period id
     *
     * @return: selective process information
     *
     */
    function getLearningPeriodByCourseAndPeriod($courseId, $courseVersion, $periodId, $turnId = '', $contractId=null)
    {

        $sql = 'SELECT learningPeriodId
                  FROM acdLearningPeriod
                 WHERE courseid = ?
                   AND courseVersion = ?
                   AND periodId = ? ';

        //$db = $this->getDatabase();

        $args = array($courseId, $courseVersion, $periodId);

        if ( strlen((string) $turnId ) > 0 )
        {
            $sql .= ' AND turnId = ?';
            $args = array_merge($args, array($turnId));
        }

        $return = $this->db->query(SAGU::prepare($sql, $args));

        if (is_array($return[0]))
        {
            if ( count($return)>1 )
            {
                $sql = 'SELECT A.classId
                          FROM acdClass A
                    INNER JOIN acdLearningPeriod C
                            ON ( A.initialLearningPeriodId = C.learningPeriodId )
                         WHERE C.courseId      = ?
                           AND C.courseVersion = ?
                           AND C.turnId        = ?';
                $args = array($courseId, $courseVersion, $turnId);
                if ( strlen((string)$contractId)>0 )
                {
                    $sql   .= ' AND A.classId IN ( SELECT classId FROM acdClassPupil WHERE contractId = ? and endDate IS NULL ) ';
                    $args[] = $contractId;
                }
                $res  = $this->db->query(SAGU::prepare($sql, $args));
                
                if ( strlen((string)$res[0][0])>0 )
                {
                    $classId = $res[0][0];
                    $sql = 'SELECT getLearningPeriodByClassAndPeriod(?,?,NULL)';
                    $args = array ($periodId, $classId);
                    $res  = $this->db->query(SAGU::prepare($sql, $args));
                    $return = $this->getLearningPeriod($res[0][0]);
                }
                else
                {
                    return null;
                }
                           
            }
            else
            {
                $learningPeriodId = $return[0][0];
                $return = $this->getLearningPeriod($learningPeriodId);
            }
            return $return;
        }
        else
        {
            return null;
        }
    }
    
    function getLearningPeriodByClassAndPeriod($classId, $periodId)
    {
        $sql  = 'SELECT getLearningPeriodByClassAndPeriod(?,?,NULL)';
        $args = array ($periodId, $classId);
        $res  = $this->db->query(SAGU::prepare($sql, $args));
        if ( $res[0][0] )
        {
            return $this->getLearningPeriod($res[0][0]);
        }
        else
        {
            return null;
        }
    }
    
    function getPreviousLearningPeriod($courseId, $courseVersion, $unitId, $turnId, $previousLeaningPeriodId=null)
    {
        $sql = 'SELECT learningperiodid
                  FROM acdlearningperiod ';

        if ( strlen((string)$previousLeaningPeriodId)>0 )
        {
            $sql .= ' WHERE learningPeriodId = ? ';
            $args = array($previousLeaningPeriodId);
        }
        else
        {
            $sql .= ' WHERE courseid = ?
                        AND courseversion = ?
                        AND turnid = ?
                        AND unitid = ?
                        AND enddate < date(now())
                   ORDER BY enddate DESC 
                      LIMIT 1';
            $args = array($courseId, $courseVersion, $turnId, $unitId);
        }

        $result = $this->db->query(SAGU::prepare($sql, $args));
        
        if ( is_array($result[0]) )
        {
            return $result[0][0];
        }
        else
        {
            return null;
        }
    }
    
    //Returns the semester of a date in format dd/mm/yyyy
    function getSemesterChar($date)
    {
        $trimDate = explode('/', $date);
        
        $middleDate = '31/07/' . $trimDate[2];
        
        $sql = 'SELECT CASE WHEN TO_DATE('.$date.', \''.MASK_DATE.'\') <= TO_DATE('.$middleDate.', \''.MASK_DATE.'\')
                       THEN \'A\'
                       ELSE \'B\' END';
                       
        //$db = $this->getDatabase();
        
        $result = $this->db->query($sql);
        
        return $result[0][0];
    }

    /**
    * Obtain the default bank account 
    * 
    * @param $learningPeriodId (int): The current Learning period code
    *
    * @return If the specified bank account exists, returns it. 
    * Otherwise, returns the constant default.
    *
    */
    function getLearningPeriodBankAccount($learningPeriodId=null, $courseId=null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';

        //inclui os defines do finance
        $business  = $MIOLO->getBusiness('basic', 'BusConfig');
        $constants = $business->getModuleValues('finance');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        if ( strlen((string)$learningPeriodId)>0 )
        {
            $sql = 'SELECT A.bankAccountId,
                           B.bankAccountId
                      FROM acdLearningPeriod A
                INNER JOIN acdCourse B USING (courseId)
                     WHERE A.learningPeriodId = ?';

            $db     = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql,$learningPeriodId));

            if ( strlen((string)$result[0][0])>0 )
            {
                return $result[0][0];
            }
            elseif ( strlen((string)$result[0][1])>0 )
            {
                return $result[0][1];
            }
            else
            {
                return DEFAULT_BANK_ACCOUNT_ID;
            }
        }
        elseif ( strlen((string)$courseId)>0 )
        {
            $sql = 'SELECT B.bankAccountId
                      FROM acdCourse B
                     WHERE B.courseId = ?';

            $db     = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql,$courseId));

            if ( strlen((string)$result[0][0])>0 )
            {
                return $result[0][0];
            }
            else
            {
                return DEFAULT_BANK_ACCOUNT_ID;
            }
        }
        return DEFAULT_BANK_ACCOUNT_ID;
    }

    /**
    * Obtain the default bank contract 
    * 
    * @param $learningPeriodId (int): The current Learning period code
    *
    * @return If the specified bank contract exists, returns it. 
    * Otherwise, returns the constant default.
    *
    */
    function getLearningPeriodBankContract($learningPeriodId=null, $courseId=null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';

        //inclui os defines do finance
        $business  = $MIOLO->getBusiness('basic', 'BusConfig');
        $constants = $business->getModuleValues('finance');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        if ( strlen((string)$learningPeriodId)>0 )
        {
            $sql = 'SELECT A.bankContractId,
                           B.bankContractId
                      FROM acdLearningPeriod A
                INNER JOIN acdCourse B USING (courseId)
                     WHERE A.learningPeriodId = ?';

            $db     = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql,$learningPeriodId));

            if ( strlen((string)$result[0][0])>0 )
            {
                return $result[0][0];
            }
            elseif ( strlen((string)$result[0][1])>0 )
            {
                return $result[0][1];
            }
            else
            {
                return DEFAULT_BANK_CONTRACT_ID;
            }
        }
        elseif ( strlen((string)$courseId)>0 )
        {
            $sql = 'SELECT B.bankContractId
                      FROM acdCourse B
                     WHERE B.courseId = ?';

            $db     = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql,$courseId));

            if ( strlen((string)$result[0][0])>0 )
            {
                return $result[0][0];
            }
            else
            {
                return DEFAULT_BANK_CONTRACT_ID;
            }
        }
        return DEFAULT_BANK_CONTRACT_ID;
    }

}
?>
