<?php

/**
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponent table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 */

class BusinessAcademicBusCurricularComponent extends Business
{

    /**
     * Creates a connection with the specified database. 
     * If no database is specified, assume the current module name.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $dbname (string): Specifies the database name to which we want to connect.
     *
     * @return (object): A database object.
     *
     */
    function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Obtain the specified curricularComponent id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentId (int): Identifier of the curriculum component to be retrieved.
     * @param $curricularComponentVersion (int): Identifier of the curriculum component to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponent) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCurricularComponent($curricularComponentId, $curricularComponentVersion)
    {
        $select = 'SELECT A.curricularComponentId,
                          A.curricularComponentVersion,
                          A.curricularComponentGroupId,
                          A.centerId,
                          A.name,
                          A.shortName,
                          A.summary,
                          A.academicCredits,
                          A.financeCredits,
                          A.lessonCredits,
                          A.academicNumberHours,
                          A.financeNumberHours,
                          A.lessonNumberHours,
						  A.practiceHours,
                          TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                          TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                          A.educationAreaId,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                          A.ipAddress,
                          (A.practiceHours+A.academicNumberHours)::integer as totalNumberHours
                     FROM acdCurricularComponent A
                    WHERE A.curricularComponentId = ? 
                      and A.curricularComponentVersion = ?';

        $db     = $this->getDatabase();
        $args = array(  
                        $curricularComponentId,
                        $curricularComponentVersion
                     );

        $result = $db->query(SAGU::prepare($select, $args));

        //$db->Close();

        $curricular = new acdCurricularComponent();

        list ( $curricular->curricularComponentId,
               $curricular->curricularComponentVersion,
               $curricular->curricularComponentGroupId,
               $curricular->centerId,
               $curricular->name,
               $curricular->shortName,
               $curricular->summary,
               $curricular->academicCredits,
               $curricular->financeCredits,
               $curricular->lessonCredits,
               $curricular->academicNumberHours,
               $curricular->financeNumberHours,
               $curricular->lessonNumberHours,
			   $curricular->practiceHours,
               $curricular->beginDate,
               $curricular->endDate,
               $curricular->educationAreaId,
               $curricular->userName,
               $curricular->dateTime,
               $curricular->ipAddress,
               $curricular->totalNumberHours) = $result[0];

        return $curricular; 
    }

    /**
     * Search for curricularComponent.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponent($data=null)
    {
        $select = 'SELECT A.curricularComponentId,
                          A.curricularComponentVersion,
                          A.name,
                          A.lessonNumberHours
                     FROM acdCurricularComponent A ';

        $where  = '';
        unset($args);
        if ( strlen((string)$data->curricularComponentId) > 0 )
        {
            $where .= '    AND   A.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }
        if ( strlen((string)$data->curricularComponentVersion) > 0 )
        {
            $where .= '    AND   A.curricularComponentVersion = ?';
            $args[] = $data->curricularComponentVersion;
        }
        if ( strlen((string)$data->name) > 0 )
        {
            $where .= '    AND   TO_ASCII(A.name) ILIKE TO_ASCII(?)';
            $args[] = $data->name.'%';
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.name';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($select,$args));
            //$db->Close();
        }

        return $result;
    }

    /**
     * Insert a new acdCurricularComponent.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCurricularComponent($data)
    {
        $db = $this->getDatabase();

        $insert = 'INSERT INTO acdCurricularComponent
                                ( curricularComponentId,
                                  curricularComponentVersion,
                                  curricularComponentGroupId,
                                  centerId,
                                  name,
                                  shortName,
                                  summary,
                                  academicCredits,
                                  financeCredits,
                                  lessonCredits,
                                  academicNumberHours,
                                  financeNumberHours,
                                  lessonNumberHours,
								  practiceHours,
                                  beginDate,
                                  endDate,
                                  educationAreaId )
                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,TO_DATE(?,\'' . MASK_DATE . '\'),TO_DATE(?,\'' . MASK_DATE . '\'),?)';

        $args = array(  $data->curricularComponentId,
                        $data->curricularComponentVersion,
                        $data->curricularComponentGroupId,
                        $data->centerId,
                        $data->name,
                        $data->shortName,
                        $data->summary,
                        $data->academicCredits,
                        $data->financeCredits,
                        $data->lessonCredits,
                        $data->academicNumberHours,
                        $data->financeNumberHours,
                        $data->lessonNumberHours,
						$data->practiceHours,
                        $data->beginDate,
                        $data->endDate,
                        $data->educationAreaId);

        $result = $db->execute(SAGU::prepare($insert, $args));
        //$db->Close();
        return $result;
    }

    /**
     * Update the specified curricularComponent data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCurricularComponent($data)
    {
        $update = 'UPDATE acdCurricularComponent
                      SET curricularComponentGroupId = ?,
                          centerId                   = ?,
                          name                       = ?,
                          shortName                  = ?,
                          summary                    = ?,
                          academicCredits            = ?,
                          financeCredits             = ?,
                          lessonCredits              = ?,
                          academicNumberHours        = ?,
                          financeNumberHours         = ?,
                          lessonNumberHours          = ?,
						  practiceHours				 = ?,
                          beginDate                  = TO_DATE(?,\'' . MASK_DATE . '\'),
                          endDate                    = TO_DATE(?,\'' . MASK_DATE . '\'),
                          educationAreaId            = ?
                    WHERE curricularComponentId      = ?
                      and curricularComponentVersion = ?';

        $db     = $this->getDatabase();

        $args   = array($data->curricularComponentGroupId,
                        $data->centerId,
                        $data->name,
                        $data->shortName,
                        $data->summary,
                        $data->academicCredits,
                        $data->financeCredits,
                        $data->lessonCredits,
                        $data->academicNumberHours,
                        $data->financeNumberHours,
                        $data->lessonNumberHours,
						$data->practiceHours,
                        $data->beginDate,
                        $data->endDate,
                        $data->educationAreaId,
                        $data->curricularComponentId,
                        $data->curricularComponentVersion
                       );

        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->Close();

        return $result;
    }

    /**
     * Delete the specified curricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentGroupId (int): Identifier of the curricularComponentGroupId to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCurricularComponent($curricularComponentId, $curricularComponentVersion)
    {
        $delete = 'DELETE FROM acdCurricularComponent
                    WHERE curricularComponentId = ? 
                      and curricularComponentVersion = ?';


        $db     = $this->getDatabase();

        $args   = array($curricularComponentId, 
                        $curricularComponentVersion
                       );
        $result = $db->Execute(SAGU::prepare($delete,$args));

        //$db->Close();

        return $result;
    }
    
    /**
     * Return a list of curricular component by course
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param: $courseId (int): Id for course
     * @param: $courseVersion (int): Id for course version
     *
     * @return (array): An array containing data information by curricular component
     *
     */    
     public function getCurricularComponentSimpleList($data)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        
        $sql = ' SELECT C.enrollId,
                        F.description,
                        G.unitId,
                        getUnitDescription(G.unitId),
                        A.curricularComponentId||\' - \'||A.curricularComponentVersion,
                        A.name,
                        TO_CHAR(C.dateEnroll, \''.MASK_DATE.'\'),
                        COALESCE(TO_CHAR(dateCancellation, \''.MASK_DATE.'\'), \'-\'),
                        A.academicCredits,
                        D.groupId,
                        H.shortDescription,
                        L.shortDescription,
                        AB.courseId||\' - \'||getCourseName(AB.courseId),
                        AB.curricularComponentId||\' - \'||getCurricularComponentName(AB.curricularComponentId)
                   FROM acdCurricularComponent A
             INNER JOIN acdCurriculum B
                     ON (B.curricularComponentId = A.curricularComponentId)
             INNER JOIN acdEnroll C
                     ON (C.curriculumId = B.curriculumId)
             INNER JOIN acdGroup D
                     ON (D.groupId = C.groupId)
              LEFT JOIN acdCurriculum AB
                     ON (D.curriculumId = AB.curriculumId)
              LEFT JOIN acdLearningPeriod E
                     ON (E.learningPeriodId = D.learningPeriodId)
             INNER JOIN acdEnrollStatus F
                     ON ( C.statusId = F.statusId )
              LEFT JOIN acdSchedule G
                     ON ( D.groupId = G.groupId)
              LEFT JOIN basWeekDay H
                     ON ( G.weekDayId = H.weekDayId )
              LEFT JOIN insPhysicalResource I
                     ON ( G.physicalResourceId = I.physicalResourceId )
              LEFT JOIN acdScheduleLearningPeriod J
                     ON ( J.scheduleLearningPeriodId = G.scheduleLearningPeriodId )
              LEFT JOIN basTurn L
                     ON ( J.turnId = L.turnId )
                  WHERE C.contractId = ?
                    AND E.periodId = ? ';

        $db     = $this->getDatabase();
        $args   = array($data->contractId, $data->periodId);
        $return = $db->query(SAGU::prepare($sql, $args));
        if (is_array($return))
        {
            foreach ($return as $key => $ret)
            {
                
                // Verifica qual unidade em que ele está (Padrão ou não).
                $str        = ($return[$key][2] == DEFAULT_UNIT_ID) ? _M('In the default unit - @1', $module, $return[$key][3]) : _M('Out of default unit - @1', $module, $return[$key][3]);
                $path       = $MIOLO->getActionURL($module, ($return[$x][6] == DEFAULT_UNIT_ID) ? 'html:images:checkOn.png' : 'html:images:checkOff.png');
                $string     = new MImage('imgUnit'.$key, $str, $path);
                $return[$key][2] = $string->generate();
                
                $return[$key][4] = '<b>['.$return[$key][4].']</b>';
                $curricularComponentId = new MSpan('curricularComponent'.$key, '['.SAGU::formatNumber($return[$key][8]).']');
                $curricularComponentId->setColor('red');
                $curricularComponentId->caption = _M('Credits number', $module);
                
                $weekDay = new MSpan('weekDay'.$key, $return[$key][10]);
                $weekDay->setColor('blue');
                $weekDay->setJsHint(_M('Week day', $module));
                
                $return[$key][8] = $curricularComponentId->generate().' '.$return[$key][9].' - '.$weekDay->generate().' - '.$return[$key][11];
                unset($return[$key][9], $return[$key][10], $return[$key][11]);
                $str  = strlen((string)$return[$key][12])>0 ? $return[$key][12] : _M('No course', $module);
                $path = $MIOLO->getActionURL('finance', 'html:images:obs.png');
                $img  = new MImage('course'.$key, $str, $path);
                
                $str2  = strlen((string)$return[$key][13])>0 ? $return[$key][13] : _M('No curricular component', $module);
                $path2 = $MIOLO->getActionURL('finance', 'html:images:obs2.png');
                $img2  = new MImage('curricularComponent'.$key, $str2, $path2);
                
                $return[$key][9] = $img->generate().' '.$img2->generate();
            }
        }
        return $return;
        
     }
    
}
?>
