<?php
/**
 *
 * This file handles the connection and actions for acdCourseAbility table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdCourseAbility table
 **/
class BusinessAcademicBusCourseAbility extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseAbility()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseAbilityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseAbility($courseAbilityId)
    {
        $sql = 'SELECT A.courseAbilityId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.description,
                       A.type,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCourseAbility A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
                 WHERE A.courseAbilityId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $courseAbilityId));
        //$db->close();

        $courseAbility = new AcdCourseAbility();

        list ( $courseAbility->courseAbilityId,
               $courseAbility->courseId,
               $courseAbility->courseVersion,
               $courseAbility->courseName,
               $courseAbility->description,
               $courseAbility->type,
               $courseAbility->userName,
               $courseAbility->dateTime,
               $courseAbility->ipAddress ) = $result[0];

        return $courseAbility; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseAbility($filters)
    {
        $sql = 'SELECT A.courseAbilityId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.description,
                       A.type,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCourseAbility A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)';

        if ( strlen((string)$filters->courseAbilityId) > 0 )
        {
            $where .= ' AND A.courseAbilityId = ?';
            $args[] = $filters->courseAbilityId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%' ;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description . '%' ;
        }
        if ( strlen((string)$filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function searchCourseAbilityFormGrid($filters)
    {
        $sql = 'SELECT A.courseAbilityId,
                       A.courseId || \' / \' || A.courseVersion,
                       B.name AS courseName,
                       A.description,
                       A.type,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM acdCourseAbility A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)';

        if ( strlen((string)$filters->courseAbilityId) > 0 )
        {
            $where .= ' AND A.courseAbilityId = ?';
            $args[] = $filters->courseAbilityId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->courseName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseName . '%' ;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description . '%' ;
        }
        if ( strlen((string)$filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseAbility($data)
    {
        $sql = 'INSERT INTO acdCourseAbility
                            (courseId,
                             courseVersion,
                             description,
                             type)
                     VALUES (?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->courseId,
                       $data->courseVersion,
                       $data->description,
                       $data->type
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCourseAbility($data)
    {
        $sql = 'UPDATE acdCourseAbility
                   SET courseId      = ?,
                       courseVersion = ?,
                       description   = ?,
                       type          = ?
                 WHERE courseAbilityId = ?';

        $args = array( 
                       $data->courseId,
                       $data->courseVersion,
                       $data->description,
                       $data->type,
                       $data->courseAbilityId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseAbilityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCourseAbility($courseAbilityId)
    {
        $sql = 'DELETE FROM acdCourseAbility
                      WHERE courseAbilityId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $courseAbilityId));
        //$db->close();

        return $result;
    }

}

?>
