<?php
/**
 *
 * This file handles the connection and actions for acdTestEndCourseContract table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdTestEndCourseContract table
 **/
class BusinessAcademicBusTestEndCourseContract extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listTestEndCourseContract()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $testEndCourseContractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate)
    {
        $sql = 'SELECT testEndCourseTypeId,
                       contractId,
                       TO_CHAR(testEndCourseDate,\'' . MASK_DATE . '\'),
                       excused,
                       isPresent,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM acdTestEndCourseContract
                 WHERE testEndCourseTypeId = ?
                   AND contractId = ?
                   AND testEndCourseDate = TO_DATE(?,\'' . MASK_DATE . '\')';

        $db     = $this->getDatabase();
        
        $args = array($testEndCourseTypeId,
                        $contractId,
                        $testEndCourseDate);

        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $testEndCourseContract = new acdTestEndCourseContract();

        list ( $testEndCourseContract->testEndCourseTypeId,
               $testEndCourseContract->contractId,
               $testEndCourseContract->testEndCourseDate,
               $testEndCourseContract->excused,
               $testEndCourseContract->isPresent,
               $testEndCourseContract->userName,
               $testEndCourseContract->dateTime,
               $testEndCourseContract->ipAddress) = $result[0];

        return $testEndCourseContract; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTestEndCourseContract($filters)
    {
        $sql = 'SELECT A.testEndCourseTypeId,
                        B.description,
                        A.contractId,
                        C.personId,
                        D.name,
                        TO_CHAR(A.testEndCourseDate, \''.MASK_DATE.'\'),
                        A.excused,
                        A.isPresent
                 FROM acdTestEndCourseContract A
                 INNER JOIN acdTestEndCourseType B
                     ON (A.testEndCourseTypeId = B.testEndCourseTypeId)
                 INNER JOIN acdContract C
                     ON (A.contractId = C.contractId)
                 INNER JOIN ONLY basPhysicalPerson D
                     ON (C.personId = D.personId)';

        if ( strlen((string)$filters->testEndCourseTypeId) > 0 )
        {
            $where .= ' AND A.testEndCourseTypeId = ?';
            $args[] = $filters->testEndCourseTypeId;
        }
        if ( strlen((string)$filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND C.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->testEndCourseDate) > 0 )
        {
            $where .= ' AND A.testEndCourseDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->testEndCourseDate;
        }
        if ( strlen((string)$filters->excused) > 0 )
        {
            $where .= ' AND A.excused = ?';
            $args[] = $filters->excused;
        }
        if ( strlen((string)$filters->isPresent) > 0 )
        {
            $where .= ' AND A.isPresent = ?';
            $args[] = $filters->isPresent;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTestEndCourseContract($data)
    {
        $sql = 'INSERT INTO acdTestEndCourseContract
                            (testEndCourseTypeId,
                             contractId,
                             testEndCourseDate,
                             excused,
                             isPresent)
                     VALUES (?,?,TO_DATE(?,\'' . MASK_DATE . '\'),?,?)';
                     
        $args = array( $data->testEndCourseTypeId,
                         $data->contractId,
                         $data->testEndCourseDate,
                         $data->excused,
                         $data->isPresent);

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateTestEndCourseContract($data)
    {
        $sql = 'UPDATE acdTestEndCourseContract
                   SET excused = ?,
                       isPresent = ?
                 WHERE testEndCourseTypeId  = ?
                   AND contractId = ?
                   AND testEndCourseDate = TO_DATE(?,\'' . MASK_DATE . '\')';

        $args = array( $data->excused,
                         $data->isPresent,
                         $data->testEndCourseTypeId,
                         $data->contractId,
                         $data->testEndCourseDate);


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $testEndCourseContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate)
    {
        $sql = 'DELETE FROM acdTestEndCourseContract
                      WHERE testEndCourseTypeId = ?
                        AND contractId = ?
                        AND testEndCourseDate = TO_DATE(?,\'' . MASK_DATE . '\')';
                        
        $args = array($testEndCourseTypeId,
                        $contractId,
                        $testEndCourseDate);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

}

?>
