<?php

/**
 *
 * @author Leovan Tavares da Silva [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdStateContractList extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:report:stateContractList';
        $module = MIOLO::_request('module');
        
        $opts = array('function' => 'update',
                      'groupId'  => '#0#');
        $href_group = $MIOLO->getActionURL( $module, 'main:process:group:group', null, $opts );
        
        $href_pupils = $MIOLO->getActionURL($module, 'main:process:group:groupEnrolledPeople', null, array('groupId'=>'#0#'));
        
        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Course id', $module),         'right', false, null, false, null, true ),//0
                          new MGridColumn( _M('Course version', $module),    'right', false, null, false, null, true ),//1
                          new MGridColumn( _M('Course name', $module),       'left',  false, null, false, null, true ),//2
                          new MGridColumn( _M('Unit id', $module),           'right', false, null, false, null, true ),//3
                          new MGridColumn( _M('Unit', $module),              'left',  false, null, false, null, true ),//4
                          new MGridColumn( _M('Turn id', $module),           'right', false, null, false, null, true ),//5
                          new MGridColumn( _M('Turn', $module),              'left',  false, null, false, null, true ),//6
                          new MGridColumn( _M('Contract id', $module),       'right', false, null, false, null, true ),//7
                          new MGridColumn( _M('Person id', $module),         'right', false, null, true,  null, true ),//8
                          new MGridColumn( _M('Name', $module),              'left',  false, null, true,  null, true ),//9
                          new MGridColumn( _M('Residential phone', $module), 'right', false, null, true,  null, true ),//10
                          new MGridColumn( _M('Work phone', $module),        'right', false, null, true,  null, true ),//11
                          new MGridColumn( _M('Cellular phone', $module),    'right', false, null, true,  null, true ),//12
                          new MGridColumn( _M('Actual situation', $module),  'left',  false, null, true,  null, true ),//13
                          //new MGridColumn( _M('Contract state', $module),       'left',  false, null, true, null, true)
                        );
        
        unset($opts);
        if (count($filters) > 0)
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $opts['event'] = 'btnList_click';
        $url = $MIOLO->getActionURL($module,$home,null,$opts);
        parent::__construct( null, $columns, $url, 0, 0, 'gridStateContractList' );
        $this->setRowMethod($this, 'myRowMethod');

        $this->eventHandler();

    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        
        if ($row[13] == DB_FALSE)
        {
            $text = new MText('text_' . $row[7], _M('Inactive', $module));
            $columns[13]->control[$i]->setValue($text->generate());
            $columns[13]->control[$i]->color = 'red';
        }
        elseif ($row[13] == DB_TRUE)
        {
            $text = new MText('text_' . $row[7], _M('Active', $module));
            $columns[13]->control[$i]->setValue($text->generate());            
            $columns[13]->control[$i]->color = 'blue';
        }
        
    }

}

?>
