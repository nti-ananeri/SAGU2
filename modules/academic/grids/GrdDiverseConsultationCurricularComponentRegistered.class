<?php

/**
 *
 * This file handles the connection and actions for sprExamProcessOccurrence table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 24/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDiverseConsultationCurricularComponentRegistered extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO    = MIOLO::getInstance();
        $home     = 'main';
        $module   = MIOLO::_request('module');
        $personId = MIOLO::_request('personId');
        $periodId = MIOLO::_request('periodId');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */

        $columns = array(
                          new MGridColumn( _M('Enroll id', $module),    'center', true, null, false, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Code', $module),    'center', true, null, true, null, false ),
                          new MGridColumn( '&nbsp;' ),
                          new MGridColumn( _M('Curricular component', $module) . ' / ' . _M('Professor', $module), 'left', false, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Turn', $module),    'center', true, null, true, null, false ),
                          new MGridColumn( _M('Grade', $module),   'center', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Day', $module),     'center', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Status', $module),  'center', true, null, true, null, false ),
                          new MGridColumn( _M('Credits', $module), 'center', true, null, true, null, false ),
                          new MGridColumn( _M('Room', $module),    'center', true, null, true, null, false ),
                          new MGridColumn( _M('S', $module),       'center', true, null, true, null, false ),
                          new MGridColumn( _M('M', $module),       'center', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Class', $module),       'center', true, null, true, null, false ),
                          new MGridColumn( _M('Id / name of course from curricular component', $module),       'left', false, null, true, null, false ),
                          new MGridColumn(' ', 'left', false, null, true, null, false ),
                          new MGridColumn( null )
                        );

        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, null, 0, 'gridDiverseConsultationCurricularComponentCoursed' );
        $this->setLinkType('hyperlink');

        $opts = array('function' => 'update',
                      'enrollId' => '%0%',
                      'periodId' => $periodId,
                      'personId' => $personId,
                      'returnTo' => $home);
        $href_edit = $MIOLO->getActionURL( $module, 'main:register:enroll', null, $opts );
        $this->addActionUpdate( $href_edit );

        $this->setRowMethod($this, 'myRowMethod');

        $this->setIsScrollable();
        $this->setTitle(_M('Curricular components enrolled', $module) . ': ' . $periodId);

        $this->eventHandler();
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( (strlen((string)$row[2]) > 0) && (strlen((string)$row[28]) > 0) && (strlen((string)$row[30])))
        {
            $path  = $MIOLO->getActionUrl($module, 'html:images:frequency.png');
            $image = new MImage('imgFreq' . $row[0], _M('Frequence and notes', $module), $path);
            
            $link = new MOpenWindow('ow' . $row[0], $image->generate(), $MIOLO->getActionURL($module, 'main:frequencyPupils', null, array('groupId' => $row[27], 'personId'=> $row[26], 'periodId' => $row[29], 'scheduleId' => $row[28], 'professorId' => $row[30], 'enrollId' => $row[0] )));
            
            $columns[26]->control[$i]->setValue( $link->generate() );
        }
        else
        {
            $columns[26]->control[$i]->setValue( null );
        }
    }
}

?>
