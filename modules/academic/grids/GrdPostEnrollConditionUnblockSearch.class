<?php

/**
 *
 * This file handles the connection and actions for acdPostEnrollConditionUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdPostEnrollConditionUnblockSearch extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home   = 'main:process:curricularComponentUnblock:postEnrollConditionUnblock';

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */

        $columns = array( 
                          new MGridColumn( _M('Has condition break', $module),           'left', true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ), true ),
                          new MGridColumn( _M('Person id', $module),                    'right', true, null, true, null, true ),
                          new MGridColumn( _M('Person name', $module),                  'left', true, null, true, null, true ),
                          new MGridColumn( _M('Curriculum id', $module),                'left', true, null, true, null, true ),
                          new MGridColumn( _M('Curricular component id', $module) . ' / ' . _M('version', $module),      'left', true, null, true, null, true ),
                          new MGridColumn( _M('Curricular component name', $module),    'left', true, null, true, null, true )
                         );

        $opts = array('contractId' => MIOLO::_request('contractIdS'),
                      'learningPeriodId' => MIOLO::_request('learningPeriodIdS'),
                      'curriculumId' => '%3%',
                      'actionIsUnblock' => '%0%',
                      'event' => 'btnUnblock_click'
                     );
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );
       
        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        
        $url = $MIOLO->getActionURL( $module, $home, null, $opts );
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridPostEnrollConditionUnblock' );
        $this->setRowMethod($this,'doWithEachRow');

        $this->addActionIcon(_M('Unblock', $module), 'unlock.png', $href_edit);

        $this->setIsScrollable();

        $this->eventHandler();

    }

    public function doWithEachRow($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ($row[0] == DB_FALSE)
        {
            $actions[0]->alt = _M('Unblock', $module);
            $actions[0]->value = 'unlock.png';
        }
        else
        {
            $actions[0]->alt = _M('Remove unblock', $module);
            $actions[0]->value = 'lock.png';
        }
    }
}

?>
