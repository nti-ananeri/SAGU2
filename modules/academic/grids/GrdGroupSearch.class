<?php

/**
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdGroupSearch extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();

        $home   = 'main:process:group:group';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Offered id', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Curricular component', $module) . ' / ' . _M('Professor', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Status', $module) . ' / ' . _M('Schedule', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Vacant', $module) . ' / ' . _M('Room', $module) . '/' . _M('Building', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Regimen', $module) . ' / ' . _M('Unit', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Begin date', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('End date', $module), 'left', true, null, true, null, false )
                        );

        $opts = array('function' => 'update',
                      'groupId'  => '%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function' => 'delete',
                      'groupId'  => '%0%',
                      'event'    => 'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function' => 'printContent',
                      'groupId'  => '%0%',
                      'event'    => 'tbBtnPrint_click');
        $href_print = $MIOLO->getActionURL( $module, $home, null, $opts);

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if ( isset($filters) )
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, 0, 0, 'gridGroup' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this, 'myRowMethod');

        //$this->setIsScrollable();

        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );
        $this->addActionIcon(_M('Print content programmarian', $module), 'print', $href_print);

        $this->eventHandler();

    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        if ( $row[0] == '&nbsp;' )
        {
            $actions[0]->enabled = false;
            $actions[1]->enabled = false;
            $actions[2]->enabled = false;
        }
        else
        {
            $actions[0]->enabled = true;
            $actions[1]->enabled = true;
            $actions[2]->enabled = true;
        }
        
        if ( INCREASE_SECURITY_LEVEL == 'YES' )
        {
            $actions[1]->enabled = false;
        }
    }
}

?>
