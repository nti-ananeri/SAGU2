<?php

/**
 *
 * This file handles the connection and actions for acdScheduleProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdScheduleProfessorUnionSearch extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();

        $home   = 'main:process:group:scheduleProfessorUnion';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array(
                          new MGridColumn( _M('Schedule professor id', $module),                 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Schedule professor id', $module),                 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Class', $module),                 'left', true, null, true, null, false ),
                          new MGridColumn( null ) , /*_M('Curricular component', $module),                 'right', true, null, true, null, false ),*/
                          new MGridColumn( null ), /*_M('Version', $module),                 'right', true, null, true, null, false ),*/
                          new MGridColumn( _M('Curricular component', $module),                 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Turn', $module),                 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Begin hour', $module),                 'center', true, null, true, null, false ),
                          new MGridColumn( _M('End hour', $module),                 'center', true, null, true, null, false ),
                          new MGridColumn( null ), /*_M('Schedule learning period description', $module),                 'right', true, null, true, null, false ),*/
                          new MGridColumn( _M('Week day', 'basic'),              'left',  true, null, true, null, false ),
                          new MGridColumn( null ), /*_M('Turn id', $module),              'left',  true, null, true, null, false )*/
                          new MGridColumn( _M('Course id', $module),              'left',  true, null, true, null, false ),
                          new MGridColumn( _M('Course version', $module),              'right',  true, null, true, null, false ),
                          new MGridColumn( null ), /*_M('Physical resource', $module),              'left',  true, null, true, null, false ),*/
                          new MGridColumn( _M('Room', $module),              'left',  true, null, true, null, false ),
                          new MGridColumn( _M('Unit', $module),              'left',  true, null, true, null, false )
                        );

        
        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts = array ('primaryScheduleProfessorId'  => '%0%',
                       'secondaryScheduleProfessorId' => '%1%',
                       'event' => 'tbBtnDelete_click',
                       'function' => 'delete');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridScheduleProfessorUnion');
        $this->addActionDelete( $href_delete );
        //$this->addActionSelect();
    }
}

?>
