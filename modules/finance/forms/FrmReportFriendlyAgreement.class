<?php

/**
 * Defaulter Report for date form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmReportFriendlyAgreement extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Friendly agreement', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
 // planilia de incentivos

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Friendly agreements', $this->home, 'friendlyAgreement-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        

        // início 1° grupo

        // data inicial
        $startDateLabel = new MText('startDateLabel', _M('Start date',$module).':');
        $startDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $startDateLabel->setClass('m-caption m-caption-required');
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), '', FIELD_DATE_SIZE);
        $startDate->setJsHint(_M('Enter the start date',$module));
        $validators[] = new MDATEDMYValidator('startDate', _M('Start date', $module), 'required');
        $hctStartDate = new MHContainer('hctStartDate', array($startDateLabel, $startDate));
        $hctStartDate->setShowLabel(true);
        $fields[] = $hctStartDate;

        // data final
        $endDateLabel = new MText('endDateLabel', _M('End date',$module).':');
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endDateLabel->setClass('m-caption m-caption-required');        
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDate', _M('End date', $module), 'required');
        $hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $fields[] = $hctEndDate;

        //incentive type
        $business = $MIOLO->getBusiness($module, 'BusIncomeSource');
        if (defined('AGREEMENT_INCOME_SOURCE_ID'))
        {
            $valueIncomeSourceId = $business->listIncomeSourceIn(AGREEMENT_INCOME_SOURCE_ID);
        }
        else
        {
            $valueIncomeSourceId = $business->listIncomeSource();
        }
        // Checa se existem origens cadastradas
        if (is_array($valueIncomeSourceId[0]))
        {
            $incomeSourceLabel = new MText('incomeSource', _M('Income source', $module).':');
            $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);
            $incomeSourceLabel->setClass('m-caption m-caption-required');         
            $incomeSourceId = new MMultiSelection('incomeSourceId',  is_array($this->getFormValue('incomeSourceId', $data->incomeSourceId)) ? $this->getFormValue('incomeSourceId', $data->incomeSourceId) : array($this->getFormValue('incomeSourceId', $data->incomeSourceId)), '', $valueIncomeSourceId, true, null, 5);
            $validators[] = new MRequiredValidator('incomeSourceId', _M('Income source id', $module));
            $fields[] = new MHContainer('hctIncomeSourceId', array($incomeSourceLabel, $incomeSourceId));

            $btnGenerate = new MButton('btnGenerate', _M('Generate', $module));
            $fields[] = new MHContainer('hctBtn', array($btnGenerate));
        }
        else
        {
            $incomeSourceMessage = new MText('incomeSourceMsg', _M('No income sources registered, please, register income sources and set AGREEMENT_INCOME_SOURCE_ID configuration', $module), 'red');
            $fields[] = $incomeSourceMessage;
        }
 
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);
        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.startDate.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnGenerate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data->startDate      = $this->getFormValue('startDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->incomeSourceId = $this->getFormValue('incomeSourceId');

        $business = $MIOLO->getBusiness($module, 'BusFriendlyAgreement');
        $returnData = $business->getReportFriendlyAgreement($data);

        $filters = $returnData; 
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdReportFriendlyAgreement',$filters);
        $grdResults->setData($returnData);
        $this->addField($grdResults);
     }
}
?>
