<?php
/**
 *
 * This file handles the connection and actions for finIncomeForecast table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * @maintainer: William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]   
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finInvoice table
 */
class FrmIncomeForecast extends MForm
{
    private $module;
     /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        $event  =  MIOLO::_request('__EVENTTARGETVALUE');
        if ( ! $event )
        {
             $event = MIOLO::_request('event');
        }
        if ( MIOLO::_request('function') == 'insert' or $event == 'btnIncomeForecastInsert:click')
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }
    
   /**
    *  Default method to define fields
    */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $event  =  MIOLO::_request('__EVENTTARGETVALUE'); 
        
        if ( ! $event )
        {
             $event = MIOLO::_request('event');
        }
        
        $function = MIOLO::_request('function');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
       
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
            $toolBar->disableButton('tbBtnNew');
        }
        elseif ( $function == 'update' )
        {
            $toolBar->disableButton('tbBtnNew');
        }
         
        if($event == 'btnIncomeForecastInsert_click');
        {
            $data->contractPersonId   =    MIOLO::_request('contractPersonIdS');
            $data->contractId         =    MIOLO::_request('contractIdS');
            $data->contractCourseId   =    MIOLO::_request('contractCourseIdS');
            $data->learningPeriodId   =    MIOLO::_request('learningPeriodIdS');
 
            $toolBar->disableButton('tbBtnNew');
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        $fields[] = $toolBar;
        $fields[] = new MHiddenField('goto', strlen((string)MIOLO::_request('goto'))>0 ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
        
        //
        // Fields specially formatted to update
        //
        if ( in_array($function, array('update','delete')) )
        {
            if (strlen((string)$perioId)>0)
            {
                // Period id
                $businessPeriod = $MIOLO->getBusiness('academic','BusPeriod');
                // Check if current period id exists on database (dummies protection)
                if (defined('CURRENT_PERIOD_ID'))
                {
                    $dataPeriod = $businessPeriod->getPeriod(CURRENT_PERIOD_ID);
                    $currentPeriodId = strlen((string)$dataPeriod->periodId)>0 ? CURRENT_PERIOD_ID : '';
                }
                $periodIdLabel  = new MText('periodLabel', _M('Period id', $module).':');
                $periodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
                $periodIdLabel->setClass('m-caption m-caption-required');
                $periodId = new MText('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : $currentPeriodId, _M('Period', $module));
                $fields[] = new MHContainer('hctPeriodId', array($periodIdLabel, $periodId));   
            }
            if (strlen((string)$learningPeriodId)>0)
            {
                // Learning period id
                $learningPeriodId = MIOLO::_request('learningPeriodId') ? MIOLO::_request('learningPeriodId') : MIOLO::_request('learningPeriodId', 'GET');
                $fields[] = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId));
            }
            // Contract id
            $fields[] = new MHiddenField('contractId', $this->getFormValue('contractId', $data->contractId));
            $contractId = MIOLO::_request('contractId') ? MIOLO::_request('contractId') : MIOLO::_request('contractId');
            
            // Income forecast id
            $incomeForecastId = MIOLO::_request('incomeForecastId') ? MIOLO::_request('incomeForecastId') : MIOLO::_request('incomeForecastId', 'GET');
            $fields[] = new MHiddenField('incomeForecastId', $this->getFormValue('incomeForecastId', $data->incomeForecastId));
            $business = $MIOLO->getBusiness($module,'BusIncomeForecast');
            $data     = $business->getIncomeForecast($this->getFormValue('incomeForecastId', $incomeForecastId));
            $incomeForecastIdLabel = new MText('incomeForecastId', _M('Income forecast id', $module).':');
            $incomeForecastIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $incomeForecastId  = new MText('incomeForecastId', $this->getFormValue('incomeForecastId', $data->incomeForecastId));
            $fields[]   = new MHContainer('hctIncomeForecastId', array($incomeForecastIdLabel, $incomeForecastId)); 
            $spacing = new MLabel('-');

            // Contract person id
            $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Person id', $module).':');
            $contractPersonIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractPersonIdLabel->setClass('m-caption m-caption-required');
            $contractPersonId      = new MText('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId));
            $contractPersonName    = new MText('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName));
            $fields[] = new MHContainer('hctPersonId', array($contractPersonIdLabel, $contractPersonId, $spacing, $contractPersonName));
            
            // Contract id
            $contractIdLabel       = new MText('contractIdLabel', _M('Contract id', $module).':');
            $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractIdLabel->setClass('m-caption m-caption-required');
            $contractId            = new MText('contractId', $this->getFormValue('contractId',$data->contractId));
            $contractCourseId      = new MText('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId));
            $contractCourseVersion = new MText('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion));
            $contractCourseName    = new MText('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName));
            $fields[] = new MHContainer('hctContract', array($contractIdLabel, $contractId, $spacing, $contractCourseId, $spacing, $contractCourseVersion, $spacing, $contractCourseName));
            if (strlen((string)$learningPeriodId)>0)
            {
               // Learning period
               $businessLearningPeriod = $MIOLO->getBusiness('academic', 'BusLearningPeriod');
               $learningPeriodData     = $businessLearningPeriod->getLearningPeriod($this->getFormValue('learningPeriodId', $data->learningPeriodId));
               $learningPeriodLabel    = new MText('learningPeriodLabel', _M('Learning period id', $module).':');
               $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
               $learningPeriodLabel->setClass('m-caption m-caption-required');
               $learningPeriodId       = new MText('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId));
               $learningPeriodDescription = new MText('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription) ? $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription) : $learningPeriodData->learningPeriodDescription);
                $hctLearningPeriod         = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $spacing, $learningPeriodDescription));
                $hctLearningPeriod->setShowLabel(true);
                $fields[]                  = $hctLearningPeriod;
            }
            // Account scheme
            $accountSchemeLabel = new MText('accountSchemeLabel', _M('Account scheme',$module).':');
            $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
            $accountSchemeLabel->setClass('m-caption m-caption-required');
            $accountSchemeId    = new MText('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId));
            $accountSchemeId->setJsHint(_M('Select the account scheme id', $module).':');
            $accountSchemeDescription = new MText('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription));
            $fields[] = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $spacing, $accountSchemeDescription));
 
            // Cost center
            $costCenterLabel = new MText('costCenterLabel', _M('Cost center', $module).':');
            $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
            $costCenterLabel->setClass('m-caption m-caption-required');
            $costCenterId = new MText('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId));
            $costCenterId->setJsHint(_M('Select the cost center id', $module).':');
            $costCenterDescription = new MText('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription));
            $fields[] = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $spacing, $costCenterDescription));

            // Value
            $valueLabel = new MText('valueLabel', _M('Value', $module).':');
            $valueLabel->setWidth(FIELD_CONTAINER_SIZE);
            $valueLabel->setClass('m-caption m-caption-required');
                                   
            if ($this->getFormValue('isProcessed', $data->isProcessed ? $data->isProcessed : DB_FALSE) == DB_FALSE)
            {
                $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), false, FIELD_MONETARY_SIZE);
                $validators[] = new MFloatValidator('value', _M('Value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
            }
            else
            {
                $value = new MText('value', SAGU::formatNumber($this->getFormValue('value', $data->value)));
            }
            $fields[] = new MHContainer('hctValue', array($valueLabel, $value));
            
            // Comments
            $commentsLabel = new MText('commentsLabel', _M('Comments', $module).':');
            $commentsLabel->setWidth(FIELD_CONTAINER_SIZE);
            $comments = new MMultiLineField('comments', $this->getFormValue('comments', $data->comments), '', null, 5, 80);
            $fields[] = new MHContainer('hctComments', array($commentsLabel, $comments));

            // Record date
            $recordDateLabel = new MText('recordDateLabel', _M('Record date', $module).':');
            $recordDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $recordDateLabel->setClass('m-caption m-caption-required');
            if ($this->getFormValue('isAccounted', $data->isAccounted ? $data->isAccounted : DB_FALSE) == DB_FALSE)
            {
                $recordDate   = new MCalendarField('recordDate', $this->getFormValue('recordDate', $data->recordDate), '', FIELD_DATE_SIZE);
                $recordDate->setJsHint(_M('Record date', $module));
                $validators[] = new MDATEDMYValidator('recordDate', _M('Record date', $module), 'required');
            }
            else
            {
                $recordDate = new MText('recordDate', $this->getFormValue('recordDate', $data->recordDate));
            }
            $fields[] = new MHContainer('recordDate', array($recordDateLabel, $recordDate));

            // Maturity date
            $maturityDateLabel = new MText('maturityDateLabel', _M('Maturity date', $module).':');
            $maturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $maturityDateLabel->setClass('m-caption m-caption-required');            
            $maturityDate      = new MCalendarField('maturityDate', $this->getFormValue('maturityDate', $data->maturityDate), '', FIELD_DATE_SIZE);
            $maturityDate->setJsHint(_M('Maturity date', $module));
            $validators[]      = new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required');
            $fields[]          = new MHContainer('hctOperation', array($maturityDateLabel, $maturityDate));
            
            // Operation id
            $businessOperation = $MIOLO->getBusiness($module, 'BusOperation');
            $dataOperation     = $businessOperation->getOperation($this->getFormValue('operationId', $data->operationId));
            $operationIdLabel  = new MText('operationIdLabel', _M('Operation id', $module).':');
            $operationIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $operationIdLabel->setClass('m-caption m-caption-required');       

            //
            // The same rule of above, if is processed, the operation cannot be modified
            //
            if ($this->getFormValue('isProcessed', $data->isProcessed ? $data->isProcessed : DB_FALSE) == DB_FALSE)
            {
                $operationId          = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', FIELD_ID_SIZE, null, null, array('operationDescription', 'operationTypeId'), 'finance', 'operationForIncomeForecast', null, null, true);
                $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription) ? $this->getFormValue('operationDescription', $data->operationDescription) : $dataOperation->description, '', FIELD_DESCRIPTION_SIZE);

                // Operation type id
                $operationTypeId      = new MTextField('operationTypeId', $this->getFormValue('operationTypeId', $data->operationTypeId) ? $this->getFormValue('operationTypeId', $data->operationTypeId) : $dataOperation->operationTypeId, '', 2);
                $operationTypeId->setReadOnly(true);
                $operationArray       = array($operationIdLabel, $operationId, $operationDescription, $spacing, $operationTypeId);
            }
            else
            {
                $operationId_         = new MText('operationId_', $this->getFormValue('operationId', $data->operationId));
                $operationId          = new MHiddenField('operationId', $this->getFormValue('operationId', $data->operationId));
                $operationDescription = new MText('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription) ? $this->getFormValue('operationDescription', $data->operationDescription) : $dataOperation->description);
                $operationTypeId      = new MText('operationTypeId', $this->getFormValue('operationTypeId', $data->operationTypeId) ? $this->getFormValue('operationTypeId', $data->operationTypeId) : $dataOperation->operationTypeId);
                $operationArray       = array($operationIdLabel, $operationId_, $operationId, $spacing, $operationDescription, $spacing, $operationTypeId);
            }            
            $fields[] = new MHContainer('hctOperationId', $operationArray);
                

            //
            // The fields below will only changed by system processes
            //
            // Is generated
            $isGeneratedLabel = new MText('isGeneratedLabel', _M('Is generated', $module).':');
            $isGeneratedLabel->setWidth(FIELD_CONTAINER_SIZE);            
            $isGeneratedLabel->setClass('m-caption m-caption-required');
            $isGenerated      = new MText('isGenerated', SAGU::getYesNo($this->getFormValue('isGenerated', $data->isGenerated ? $data->isGenerated : f )));
            $fields[]         = new MHContainer('hctIsGenerated', array($isGeneratedLabel, $isGenerated));
    
            // Is accounted
            $isAccountedLabel = new MText('isAccounted', _M('Is accounted', $module).':');
            $isAccountedLabel->setWidth(FIELD_CONTAINER_SIZE);
            $isAccountedLabel->setClass('m-caption m-caption-required');
            $isAccounted      = new MText('isAccounted', SAGU::getYesNo($this->getFormValue('isAccounted', $data->isAccounted ? $data->isAccounted : f )));
            $fields[]         = new MHContainer('hctIsAccounted', array($isAccountedLabel, $isAccounted));

            // Is processed
            $isProcessedLabel = new MText('isProcessedLabel', _M('Is processed', $module).':');
            $isProcessedLabel->setWidth(FIELD_CONTAINER_SIZE);
            $isProcessed      = new MText('isProcessed_', SAGU::getYesNo($this->getFormValue('isProcessed', $data->isProcessed)));
            $fields[]         = new MHContainer('hctIsProcessed', array($isProcessedLabel, $isProcessed));
            $fields[]         = new MHiddenField('isProcessed', $this->getFormValue('isProcessed', $data->isProcessed));
            
            // Is supressed
            $isSupressedLabel = new MText('isSupressedLabel', _M('Is supressed', $module).':');
            $isSupressedLabel->setWidth(FIELD_CONTAINER_SIZE);
            $isSupressed      = new MText('isSupressed_', SAGU::getYesNo($this->getFormValue('isSupressed', $data->isSupressed)));
            $fields[]         = new MHContainer('hctIsSuppressed', array($isSupressedLabel, $isSupressed));
            $fields[]         = new MHiddenField('isSupressed', $this->getFormValue('isSupressed', $data->isSupressed));
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        //
        // End of fields generated specially for update income forecast
        //
        else
        //
        // Fields generated to insert a new income forecast
        // 
        {
            // Period id
            $businessPeriod = $MIOLO->getBusiness('academic','BusPeriod');
            if (defined('CURRENT_PERIOD_ID'))
            {
                $dataPeriod      = $businessPeriod->getPeriod(CURRENT_PERIOD_ID);
                $currentPeriodId = strlen((string)$dataPeriod->periodId)>0 ? CURRENT_PERIOD_ID : '';
            }
            $periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : $currentPeriodId, _M('Period',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;        

            // Person id
            $contractPersonIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
            $contractPersonIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractPersonIdLabel->setClass('m-caption m-caption-required');
            $contractPersonId      = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
            $contractPersonId->setJsHint(_M('Person', $module));
            $validators[]          = new MIntegerValidator('contractPersonId', _M('Person id', $module), 'required');
            $contractPersonName    = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
            $contractPersonName->setReadOnly(true);
            $fields[]              = new MHContainer('hctContractPersonIs', array($contractPersonIdLabel, $contractPersonId, $contractPersonName));

            // Contract & course
            $contractIdLabel = new MText('contractIdLabel', _M('Contract id', $module).':');
            $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractIdLabel->setClass('m-caption m-caption-required');
            $contractId      = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_ID_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId', 'limbo', 'accountSchemeId', 'accountSchemeDescription', 'costCenterId', 'costCenterDescription'), 'academic', 'ContractAccountScheme', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Enter the contract code', $module));
            $validators[]    = new MIntegerValidator('contractId',_M('Contract id', $module), 'required');
            $fields[] = new MHContainer('hctContractId', array($contractIdLabel, $contractId));

            // Learning period
            $learningPeriodLabel       = new MText('learningPeriodLabel', _M('Learning period id',$module).':');
            $learningPeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
            $learningPeriodLabel->setClass('m-caption m-caption-required');
            $learningPeriodId          = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, FIELD_ID_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId'), true);
            $validators[]              = new MIntegerValidator('learningPeriodId', _M('Learning period id',$module), 'required');
            $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, FIELD_DESCRIPTION_SIZE);
            $learningPeriodDescription->setReadOnly(true);
            $fields[]                  = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));

            // Course
            $courseLabel           = new MText('courseLabel', _M('Course',$module).':');
            $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractCourseId      = new MLookupTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), null,FIELD_ID_SIZE, null, null,
                array('contractCourseVersion','contractCourseName','accountSchemeId','accountSchemeDescription','costCenterId','costCenterDescription'),
                $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'contractCourseId'), true);
            $contractCourseId->setJsHint(_M('Select the course id', $module));
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), null,FIELD_ID_SIZE);
            $contractCourseName    = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), null, FIELD_DESCRIPTION_SIZE);
            $contractCourseName->setReadOnly(true);
            $hctCourse             = new MHContainer('hctCourse', array($courseLabel, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctCourse->setShowLabel(true);
            $fields[]              = $hctCourse;       

            // Account scheme
            $accountSchemeLabel       = new MText('accountSchemeLabel', _M('Account scheme', $module).':');
            $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
            $accountSchemeLabel->setClass('m-caption m-caption-required');
            $accountSchemeId          = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), null, 15, null, null, 'accountSchemeDescription', 'accountancy', 'AccountScheme', null, null, true);
            $accountSchemeId->setJsHint(_M('Select the account scheme id', $module));
            $validators[]             = new MRequiredValidator('accountSchemeId',_M('Account scheme', $module), 'required');
            $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), null, FIELD_DESCRIPTION_SIZE);
            $accountSchemeDescription->setReadOnly(true);
            $fields[]                 = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $accountSchemeDescription));

            // Cost center
            $costCenterLabel       = new MText('costCenterLabel', _M('Cost center', $module).':');
            $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
            $costCenterLabel->setClass('m-caption m-caption-required');
            $costCenterId          = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId), null, FIELD_ID_SIZE, null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
            $costCenterId->setJsHint(_M('Select the cost center id', $module));
            $validators[]          = new MRequiredValidator('costCenterId',_M('Cost center', $module), 'required');
            $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, FIELD_DESCRIPTION_SIZE);
            $costCenterDescription->setReadOnly(true);
            $fields[]              = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));

            // Value
            $valueLabel   = new MText('valueLabel', _M('Value', $module).':');
            $valueLabel->setClass('m-caption m-caption-required');
            $valueLabel->setWidth(FIELD_CONTAINER_SIZE);
            $value        = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), '', FIELD_MONETARY_SIZE);
            $fields[]     = new MHContainer('hctValue', array($valueLabel, $value));
            $validators[] =  new MFloatValidator('value', _M('Value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');

            // Comments
            $commentsLabel = new MText('commentsLabel', _M('Comments', $module).':');
            $commentsLabel->setWidth(FIELD_CONTAINER_SIZE);
            $comments      = new MMultiLineField('comments', $this->getFormValue('comments', $data->comments), '', '', 4, 80);
            $fields[]      = new MHContainer('hctComments', array($commentsLabel, $comments));

            if(strlen((string)$data->recordDate) == 0)
            {
                $data->recordDate = date(MASK_DATE_PHP);
            }           
             
            // Record date
            $recordDateLabel = new MText('recordDateLabel', _M('Record date', $module).':');
            $recordDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $recordDateLabel->setClass('m-caption m-caption-required');
            $recordDate      = new MCalendarField('recordDate', $this->getFormValue('recordDate', $data->recordDate) ? $this->getFormValue('recordDate', $data->recordDate) : date(MASK_DATE_PHP), '', FIELD_DATE_SIZE);
            $recordDate->setJsHint(_M('Record date', $module));
            $validators[]    = new MDATEDMYValidator('recordDate', _M('Record date', $module), 'required');
            $fields[]        = new MHContainer('hctRecordDate', array($recordDateLabel, $recordDate, $recordDateH));
            
            // Maturity date
            $maturityDateLabel = new MText('maturityDateLabel', _M('Maturity date', $module).':');
            $maturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $maturityDateLabel->setClass('m-caption m-caption-required');
            $maturityDate      = new MCalendarField('maturityDate', $this->getFormValue('maturityDate', $data->maturityDate), '', FIELD_DATE_SIZE);
            $maturityDate->setJsHint(_M('Maturity date', $module));
            $validators[]      = new MDATEDMYValidator('maturityDate', _M('Maturity date', $module), 'required');
            $fields[]          = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));

            // Operation 
            $operationIdLabel     = new MText('operationIdLabel', _M('Operation id', $module).':');
            $operationIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $operationIdLabel->setClass('m-caption m-caption-required');
            $operationId          = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', FIELD_ID_SIZE, null, null, 'operationDescription, operationTypeId', $module, 'OperationForIncomeForecast', null, null, true);
            $operationId->setJsHint(_M('Enter the operation id', $module));
            $validators[]         = new MIntegerValidator('operationId', _M('Operation id', $module), 'required');
            $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), '', FIELD_DESCRIPTION_SIZE);
            $operationDescription->setReadOnly(true);
            $operationTypeId      = new MTextField('operationTypeId', $this->getFormValue('operationTypeId', $data->operationTypeId), '', FIELD_ID_SIZE);
            $operationTypeId->setJsHint(_M('Enter the operation type id',$module));
            $operationTypeId->setReadOnly(true);
            $fields[]             = new MHContainer('hctOperationId', array($operationIdLabel, $operationId, $operationDescription, $operationTypeId));
        }

        $fields[] = new Separator('');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

    }

    public function tbBtnGenerate_click($sender = null)
    { 
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $gotoNo     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        $isProcessed            = MIOLO::_request('isProcessed',      'GET');
        $incomeForecastId       = MIOLO::_request('incomeForecastId', 'GET');
        $data->contractId       = MIOLO::_request('contractId',       'GET');
        $data->learningPeriodId = MIOLO::_request('learningPeriodId', 'GET');
        $data->maturityDate     = MIOLO::_request('maturityDate',     'GET');
        $accountSchemeId        = MIOLO::_request('accountSchemeId',  'GET');
        $costCenterId           = MIOLO::_request('costCenterId',     'GET');
        $comments               = MIOLO::_request('comments',         'GET');


        $business = $MIOLO->getBusiness($module, 'BusIncomeForecast');
        $value    = $business->getCurrentMonthValue($data);
        $month      = $value[0][0];
        $monthValue = $value[0][1];
        $opts = array('function'=>'generate_yes',
                      'incomeForecastId'=>$incomeForecastId,
                      'contractId'=>$data->contractId,
                      'learningPeriodId'=>$data->learningPeriodId,
                      'maturityDate'=>$data->maturityDate,
                      'month'=>$month,
                      'monthValue'=>$monthValue,
                      'accountSchemeId'=>$accountSchemeId,
                      'costCenterId'=>$costCenterId,
                      'comments'=>$comments,
                      'event'=>'Generate_click_yes',
                      'goto'=>urlencode($MIOLO->getActionURL($module, $home, null, $opts)));

        $opts2 = array('function'=>'btnSearch_click',
                       'contractId'=>$data->contractId,
                       'learningPeriodId'=>$data->learningPeriodId,
                       'event'=>'btnSearch_click'
                        );

        $gotoNo  = $MIOLO->getActionURL( $module, 'main:report:incomeForecast', null, $opts2 );

        $gotoYes = $MIOLO->getActionURL( $module, $home, null, $opts );
        $msg     = _M('Are you sure to close the income forecast?', $module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    
    }


     public function Generate_click_yes($sender = null)
    {
        $MIOLO             = MIOLO::getInstance();
        $module            = MIOLO::getCurrentModule();
        $goto              = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        $data->contractId        = MIOLO::_request('contractId',   'GET');
        $data->maturityDate      = MIOLO::_request('maturityDate', 'GET');
        $data->month             = MIOLO::_request('month',        'GET');
        $data->year              = SAGU::formatDate($data->maturityDate, 'yyyy');
        $business = $MIOLO->getBusiness($module, 'BusReceivableInvoice');
        $closed_  = $business->generateReceivableInvoices($data);

        
        if ($closed_)
        {  
            $opts = array('function'=>'btnSearch_click',
                          'contractId'=>$data->contractId,
                          'learningPeriodId'=>$data->learningPeriodId,
                          'event'=>'btnSearch_click'
                          );
            $goto  = $MIOLO->getActionURL( $module, 'main:report:incomeForecast', null, $opts );
            $MIOLO->information(_M('Success! Generate correctly.',$module), $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
 
        }
    }


    public function update_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data->contractId        = MIOLO::_request('contractId', 'GET');
        $data->learningPeriodId  = MIOLO::_request('learningPeriodId', 'GET');
        $isProcessed     = MIOLO::_request('isProcessed', 'GET');

        $opts = array('function'=>'btnSearch_click',
                      'contractId'=>$data->contractId,
                      'learningPeriodId'=>$data->learningPeriodId,
                      'event'=>'btnSearch_click');

        $goto  = $MIOLO->getActionURL( $module, 'main:report:incomeForecast', null, $opts );

        if ($isAccounted == DB_TRUE)
        {
            $MIOLO->information(_M('You cannot modify this forecast', $module), $goto);
        }
        
    }

     /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data->contractId        = MIOLO::_request('contractId', 'GET');
        $data->learningPeriodId  = MIOLO::_request('learningPeriodId', 'GET');
        $isProcessed             = MIOLO::_request('isProcessed', 'GET');
        $incomeForecastId        = MIOLO::_request('incomeForecastId', 'GET');
        $goto                    = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'incomeForecastId'=>$incomeForecastId,
                        'contractId'=>$contractId,
                        'learningPeriodId'=>$data->learningPeriodId,
                        'goto'=>urlencode($goto));

        $busIncomeForecast = $MIOLO->getBusiness($module, 'BusIncomeForecast');
        $isProcessed       = $busIncomeForecast->isProcessed($incomeForecastId);

        if ($isProcessed == DB_TRUE)
        {
             $opts = array('function'=>'btnSearch_click',
                           'contractId'=>$data->contractId,
                           'learningPeriodId'=>$data->learningPeriodId,
                           'event'=>'btnSearch_click'
                            );

             $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, 'main:report:incomeForecast', null, $opts );

             $MIOLO->information(_M('You cannot erase this forecast', $module), $goto);
        }
        else
        {
            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
            $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $msg     = MSG_CONFIRM_RECORD_DELETE;
            $caption = _M('Question',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
    }

     /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusIncomeForecast');
        $ok       = $business->deleteIncomeForecast($this->incomeForecastId->value);
        $goto     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        if ( $ok )
        {
            $msg     = MSG_RECORD_DELETED;
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

     /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->getTypesData();
        $data->isGenerated = DB_FALSE;
        $data->isAccounted = DB_FALSE;
        $goto = $this->goto->value;
        $business = $MIOLO->getBusiness($module, 'BusIncomeForecast');

        if ( $function == 'update' )
        {
            $ok  = $business->updateIncomeForecast($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $MIOLO->getClass('accountancy', 'accountancy');
            if (accountancy::getAccountLimitDate($data->maturityDate) == DB_TRUE)
            {
                $ok  = $business->insertIncomeForecast($data);
                $msg = MSG_RECORD_INSERTED;
            }
            else
            {
                $msg = _M('Maturity date is below then limit date', $module);
            }
        }
        
        $opts = array('incomeForecastId'=>$data->incomeForecastId);
        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
        
        if ( $ok )
        {
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            if ( strlen((string)$msg) == 0 )
            {
                $msg     = _M('Error executing requested operation.',$module);
                $caption = _M('Error',$module);
                $MIOLO->error($msg, $goto, $caption);
            }
            else
            {
                $this->addError($msg);
            }            
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinIncomeForecast();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
