<?php

/**
 * Bank form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmBank extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;
        if ( in_array($function,array('update','delete')) )
        {
            $data->bankId = $this->getFormValue('bankId', MIOLO::_request('bankId') ? MIOLO::_request('bankId') : MIOLO::_request('bankId', 'GET'));
            $bankIdField = new MTextLabel('bankIdField', $this->getFormValue('bankId', $data->bankId), '');
            $bankIdHidden = new MHiddenField('bankId', $this->getFormValue('bankId', $data->bankId)); 
            $business    = $MIOLO->getBusiness($module,'BusBank');
            $data        = $business->getBank($data->bankId);
            $flds = array($bankIdField, $bankIdHidden);
        }
        else
        {
            $bankIdField = new MTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_ID_SIZE);
            $bankIdField->setJsHint(_M('Enter the bank id', $module));
            $validators[] = new MRangeValidator('bankId', _M('Code', $module), '0', '999', 'i', 'required');
            $flds = array($bankIdField);
        }
        $bankIdLabel = new MText('bankIdLabel', _M('Id', $module).':');
        $bankIdLabel->setWidth(FIELD_LABEL_SIZE);
        $bankIdLabel->setClass('m-caption m-caption-required');
        $flds2 = array($bankIdLabel);
        $fields[] = new MHContainer('hctBankId', array_merge($flds2, $flds));

        $bankIdVdLabel = new MText('bankIdVdLabel', _M('Bank verifier digit', $module).':');
        $bankIdVdLabel->setWidth(FIELD_LABEL_SIZE);

        $bankIdVd = new MTextField('bankIdVd', $this->getFormValue('bankIdVd', $data->bankIdVd), '', FIELD_ID_SIZE);
        $bankIdVd->setJsHint(_M('Enter the bank verifier digit', $module));
        $fields[] = new MHContainer('hctBankIdVd', array($bankIdVdLabel, $bankIdVd));

        $descriptionLabel = new MText('descriptionLabel', _M('Description', $module).':');
        $descriptionLabel->setWidth(FIELD_LABEL_SIZE);
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), '', FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the bank description', $module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $validators[] = new MRequiredValidator('description', _M('Description', $module));

		$urlLabel = new MText('urlLabel', _M('Url', $module).':');
        $urlLabel->setWidth(FIELD_LABEL_SIZE);
        $url = new MTextField('url', $this->getFormValue('url',$data->url), '', FIELD_DESCRIPTION_SIZE);
        $url->setJsHint(_M('Enter the bank url', $module));
        $fields[] = new MHContainer('hctUrl', array($urlLabel, $url));

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ($validators)
        {
            $this->setValidators($validators);
        }

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.bankId.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'bankId'=>MIOLO::_request('bankId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBank');
        $ok = $business->deleteBank($this->bankId->value);

        if ( $ok )
        {
            $businessConfig           = $MIOLO->getBusiness('basic', 'BusConfig');
            $dataConfig->moduleConfig = $module;
            $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_'.$this->bankId->value;
            $businessConfig->deleteConfig($dataConfig->moduleConfig, $dataConfig->parameter);
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBank');
        if ( $function == 'update' )
        {
            $ok  = $business->updateBank($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $dataBank = $business->getBank($data->bankId);
            if ( strlen((string)$dataBank->bankId)>0 )
            {
                $opts    = array('bankId'=>$data->bankId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('bankIdS'=>$data->bankId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('The bank id @1 already exists, do you want edit that bank?', $module, $data->bankId);

                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok  = $business->insertBank($data);
                $msg = MSG_RECORD_INSERTED;
            }

        }

        if ( $ok )
        {
            $opts = array('bankIdS' => $data->bankId, 'event'=>'btnSearch_click');
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $businessConfig           = $MIOLO->getBusiness('basic', 'BusConfig');
                $dataConfig->moduleConfig = $module;
                $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_'.$data->bankId;
                $dataConfig->value        = '1';
                $dataConfig->description  = 'CONFIG SEQUENCE USED TO BANK ID '.$data->bankId.'.';
                $dataConfig->type         = 'INT';

                $businessConfig->insertConfig($dataConfig);

                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBank();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        return $data;
    }
}

?>
