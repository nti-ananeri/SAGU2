<?php
/**
 * PayedOffInvoices form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmInvoiceReport extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Invoice report', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        
        $fields[] = $toolBar;
        
        $fldBeginDate = new MCalendarField('beginMaturityDate', $this->getFormValue('beginMaturityDate', $data->beginMaturityDate), _M('Begin maturity date', $module), FIELD_DATE_SIZE);
        $fldBeginDate->setJsHint(_M('Fill this field with the begin maturity date of invoices with payments', $module));
        $fields[] = $fldBeginDate;
        $validators[] = new MRequiredValidator('beginMaturityDate');

        $fldEndDate = new MCalendarField('endMaturityDate', $this->getFormValue('endMaturityDate', $data->endMaturityDate), _M('End maturity date', $module), FIELD_DATE_SIZE);
        $fldEndDate->setJsHint(_M('Fill this field with the end maturity date of invoices with payments', $module));
        $fields[] = $fldEndDate;
        $validators[] = new MRequiredValidator('endMaturityDate');
        
        $fldEndDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', $data->emissionDate), _M('Emission date', $module), FIELD_DATE_SIZE);
        $fldEndDate->setJsHint(_M('Fill this field with the emission date of invoices', $module));
        $fields[] = $fldEndDate;

        $onlyOpenInvoicesLabel = new MText('txtOnlyOpenInvoices', _M('List only open invoices', $module).':');
        $onlyOpenInvoicesLabel->setWidth(FIELD_CONTAINER_SIZE);
        $onlyOpenInvoices = new MRadioButtonGroup('onlyOpenInvoices', '',  SAGU::listYesNo(1), $this->getFormValue('onlyOpenInvoices', $data->onlyOpenInvoices) ? $this->getFormValue('onlyOpenInvoices', $data->onlyOpenInvoices) : 'f', null, 'horizontal');
        $onlyOpenInvoices->setShowLabel(false);
    
        $fields[] = new MHcontainer('hctOnlyOpenInvoices', array($onlyOpenInvoicesLabel, $onlyOpenInvoices));
    
        $fields[] = new MButton('generate', _M('Generate', $module), 'SUBMIT');
        $fields[] = new Separator('');
        
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setShowPostButton(false);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function generate_click($sender = NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusReceivableInvoiceReport');

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdInvoiceReport', $data);
        $grdResults->setData($business->listReceivableInvoiceReport($data));
        $this->addField(new Separator('<hr>'));
        $this->addField($grdResults);
    }

    /**
     *
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     *
     */
    public function getTypesData()
    {
        $data->beginMaturityDate = $this->beginMaturityDate->value;
        $data->endMaturityDate   = $this->endMaturityDate->value;
        $data->emissionDate      = $this->emissionDate->value;
        $data->onlyOpenInvoices  = $this->onlyOpenInvoices->value;
        return $data;
    }
}
?>
