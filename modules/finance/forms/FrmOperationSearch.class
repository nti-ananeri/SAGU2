<?php

/**
 *
 * This file handles the connection and actions for finOperation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Bral Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 17/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finOperation table
 */
class FrmOperationSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        // Favorites
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Operation', $this->home, 'operation-16x16.png', true);
        }
        //End favorites

        // Toolbar
        $fields[] = $toolBar;
        
        // Operation
        $operationIdLabelS = new MText('operationIdLabel', _M('Id', $module).':');
        $operationIdLabelS->setWidth(FIELD_LABEL_SIZE);
        $operationIdS = new MTextField('operationIdS', $this->operationIdS->value, '', FIELD_ID_SIZE);
        $operationIdS->setJsHint(_M('Enter the payment place code',$module));
        $validators[] =  new MIntegerValidator('operationIdS');
        $fields[] = new MHContainer('hctOperation', array($operationIdLabelS, $operationIdS));

        // Description
        $descriptionLabelS = new MText('descriptionLabel', _M('Description', $module).':');
        $descriptionLabelS->setWidth(FIELD_LABEL_SIZE);
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the payment place description',$module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabelS, $descriptionS));

        // Operation type
        $business = $MIOLO->getBusiness($module,'BusOperation');
        $optsS = $business->listOperationTypeId(1);
        $operationTypeIdLabelS = new MText('operationTypeLabelS', _M('Operation type', $module).':'); 
        $operationTypeIdLabelS->setWidth(FIELD_LABEL_SIZE);
        $operationTypeIdS = new MRadioButtonGroup('operationTypeIdS', '', $optsS,  $this->getFormValue('operationTypeIdS', $data->operationTypeIdS) ? $this->getFormValue('operationTypeIdS', $data->operationTypeIdS) : '', null, 'horizontal');
        $operationTypeIdS->setShowLabel(false);
        $operationTypeIdS->setJsHint(_M('Enter the operation type',$module));
        $fields[] = new MHcontainer('hctOperationType', array($operationTypeIdLabelS, $operationTypeIdS));

        // Is extinct
        $optsS    =  SAGU::listTrueFalse(1);
        $isExtinctLabelS = new MText('isExtinctLabelS', _M('Is extinct', $module).':'); 
        $isExtinctLabelS->setWidth(FIELD_LABEL_SIZE);
        $isExtinctS = new MRadioButtonGroup('isExtinctS', '', $optsS,  $this->getFormValue('isExtinctS', $data->isExtinctS) ? $this->getFormValue('isExtinctS', $data->isExtinctS) : '', null, 'horizontal');
        $isExtinctS->setShowLabel(false);
        $fields[] = new MHcontainer('hctIsExtinct', array($isExtinctLabelS, $isExtinctS));

       // Is counter movement
        $optsS    =  SAGU::listTrueFalse(1);
        $isCounterMovementLabelS = new MText('isCounterMovementLabelS', _M('Is counter movement', $module).':');
        $isCounterMovementLabelS->setWidth(FIELD_LABEL_SIZE);
        $isCounterMovementS = new MRadioButtonGroup('isCounterMovementS', '', $optsS,  $this->getFormValue('isCounterMovementS', $data->isCounterMovementS) ? $this->getFormValue('isCounterMovementS', $data->isCounterMovementS) : '', null, 'horizontal');
        $isCounterMovementS->setShowLabel(false);
        $fields[] = new MHcontainer('hctIsCounterMovement', array($isCounterMovementLabelS, $isCounterMovementS));

        //Operation group
        $operationGroupIdLabelS = new MText('operationGroupIdLabelS', _M('Operation group id', $module).':');
        $operationGroupIdLabelS->setWidth(FIELD_LABEL_SIZE);
        $business               = $MIOLO->getBusiness($module, 'BusOperationGroup');
        $operationGroupIdS      = new MSelection('operationGroupIdS', $this->operationGroupIdS->value, NULL, $business->listOperationGroup());
        $fields[]               = new MHContainer('hctOperationGroup', array($operationGroupIdLabelS, $operationGroupIdS));
        //conta bancária
        $businessBankAccount = $MIOLO->getBusiness('finance', 'BusBankAccount');
        $dataBankAccount     = $businessBankAccount->listBankAccount();
        $bankAccountIdLabel  = new MText('bankAccountIdLabel', _M('Bank account', 'finance').':');
        $bankAccountIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankAccountIdS       = new Mselection('bankAccountIdS', $this->getFormValue('bankAccountIdS', $data->bankAccountIdS), '', $dataBankAccount, false);
        $bankAccountIdS->setAutoSubmit(true);
        $hctBankAccount      = new MHContainer('hctBankAccountId', array($bankAccountIdLabel, $bankAccountIdS));
        $hctBankAccount->setShowLabel(true);
        $fields[]            = $hctBankAccount;
        /*if ( strlen((string)$this->getFormValue('bankAccountId', $data->bankAccountId))>0 )
        {
			//contrato
            $businessBankAccountContract = $MIOLO->getBusiness('finance', 'BusBankAccountContract');
            $dataBankAccountContract     = $businessBankAccountContract->listBankAccountContract($this->getFormValue('bankAccountId', $data->bankAccountId));
            $bankContractIdLabel  = new MText('bankContractIdLabel', _M('Bank contract', 'finance').':');
            $bankContractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bankContractId       = new Mselection('bankContractId', $this->getFormValue('bankContractId', $data->bankContractId), '', $dataBankAccountContract, false);

            $hctBankAccountContract      = new MHContainer('hctBankAccountContract', array($bankContractIdLabel, $bankContractId));
            $hctBankAccountContract->setShowLabel(true);
            $fields[]                  = $hctBankAccountContract;
        }*/

        // operation is for receivable or payable invoices
        $receivableOrPayableLabelS = new MText('receivableOrPayableLabelS', _M('Operation category', $module).':');        
        $receivableOrPayableLabelS->setWidth(FIELD_LABEL_SIZE);
        $receivableOrPayableS = new MRadioButtonGroup('receivableOrPayableS', '', array(array(_M('Receivable invoice', $module),'R'), array(_M('Payable invoice', $module),'P')),  $this->receivableOrPayableS->value, null, 'horizontal');
        $receivableOrPayableS->setShowLabel(false);
        $receivableOrPayableS->setJsHint(_M('Enter the operation category',$module));
        $fields[] = new MHcontainer('hctreceivableOrPayableS', array($receivableOrPayableLabelS, $receivableOrPayableS));

        $fields[] = new MButton('btnSearch',_M('Search',$module));
        $this->setFields($fields);
        // get filters values
        $filters->operationId         = $this->operationIdS->value;
        $filters->description         = $this->descriptionS->value;
        $filters->operationTypeId     = $this->operationTypeIdS->value;
        $filters->isExtinct           = $this->isExtinctS->value;
        $filters->isCounterMovement   = $this->isCounterMovementS->value;
        $filters->operationGroupId    = $this->operationGroupIdS->value;
		$filters->bankAccountId		  = $this->bankAccountIdS->value;
		$filters->receivableOrPayable = $this->receivableOrPayableS->value;
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdOperationSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusOperation');
        $data       = $business->searchOperation($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);
        $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.operationIdS.focus();');
        }

    }

}

?>
