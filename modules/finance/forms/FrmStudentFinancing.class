<?php

/**
 * Student financing form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/09/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a finStudentFinancing table
 **/
class FrmStudentFinancing extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $studentFinancingId = MIOLO::_request('studentFinancingId') ? MIOLO::_request('studentFinancingId') : MIOLO::_request('studentFinancingId', 'GET');
            $fields[] = new MTextLabel('studentFinancingId', $studentFinancingId, _M('Id', $module));
            $fields[] = new MHiddenField('studentFinancingId', $studentFinancingId);

            $business = $MIOLO->getBusiness($module, 'BusStudentFinancing');
            $data = $business->getStudentFinancing($studentFinancingId);
            

            $contractPersonLabel = new MText('contractPersonLabel', _M('Person id',$module).':');
            $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);

            $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->personId), _M('',$module), FIELD_ID_SIZE);
            $contractPersonId->setReadOnly(true);

            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->personName), _M('',$module), FIELD_DESCRIPTION_SIZE);
            $contractPersonName->setReadOnly(true);

            $hctContractPerson = new MHContainer('hctContractPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
            $hctContractPerson->setShowLabel(true);
            $fields[] = $hctContractPerson;


            $contractIdLabel = new MText('contractIdLabel', _M('Contract id',$module).':');
            $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[]          = $contractIdLabel;

            $contractId = new MTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('',$module), FIELD_ID_SIZE);
            $contractId->setReadOnly(true);
            $flds[]     = $contractId;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

        }
        else
        {

            $contractPersonLabel = new MText('contractPersonLabel', _M('Person id',$module).':');
            $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractPersonLabel->setClass('m-caption m-caption-required');

            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('',$module), FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $validators[] = new MIntegerValidator('contractPersonId', _M('Person id',$module), 'required');
            $contractPersonId->setJsHint(_M('Enter the person code',$module));

            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), _M('',$module), FIELD_DESCRIPTION_SIZE);
            $contractPersonName->setReadOnly(true);

            $hctContractPerson = new MHContainer('hctContractPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
            $hctContractPerson->setShowLabel(true);
            $fields[] = $hctContractPerson;


            $contractIdLabel = new MText('contractIdLabel', _M('Contract id',$module).':');
            $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractIdLabel->setClass('m-caption m-caption-required');
            $flds[]              = $contractIdLabel;

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('',$module), FIELD_ID_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', $limbo, 'contractUnitId'), 'academic', 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $validators[] = new MIntegerValidator('contractId',_M('Contract id',$module), 'required');
            $flds[]           = $contractId;

            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('',$module), FIELD_ID_SIZE);
            $contractCourseId->setReadOnly(true);
            $flds[]           = $contractCourseId;

            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('',$module), 2);
            $contractCourseVersion->setReadOnly(true);
            $flds[]                = $contractCourseVersion;

            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('',$module), FIELD_DESCRIPTION_SIZE);
            $contractCourseName->setReadOnly(true);
            $flds[]             = $contractCourseName;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);
        }
        
        // initial value
        $initialValueLabel = new MText('initialValueLabel', _M('Initial value', $module).':');
        $initialValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $initialValueLabel->setClass('m-caption m-caption-required');
        $initialValue = new MTextField('initialValue', SAGU::formatNumber($this->getFormValue('initialValue', $data->initialValue)), '', FIELD_MONETARY_SIZE);
        $validators[] =    new MFloatValidator('initialValue', _M('Initial value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
        $initialValue->setJsHint(_M('Enter the initial value', $module));
        $fields[] = new MHContainer('hctInitialValue', array($initialValueLabel, $initialValue));
        
        // current value
        $currentValueLabel = new MText('currentValueLabel', _M('Current value', $module).':');
        $currentValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $currentValueLabel->setClass('m-caption m-caption-required');
        $currentValue = new MTextField('currentValue', SAGU::formatNumber($this->getFormValue('currentValue', $data->currentValue)), '', FIELD_MONETARY_SIZE);
        $validators[] =    new MFloatValidator('currentValue', _M('Current value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
        $currentValue->setJsHint(_M('Enter the current value', $module));
        $fields[] = new MHContainer('hctCurrentValue', array($currentValueLabel, $currentValue));
        
        // comments        
        $comments = new MMultiLineField('comments', $this->getFormValue('comments',$data->comments), _M('Comments',$module), 38, 3, 38);
        $comments->setJsHint(_M('Comments',$module));
        $fields[] = $comments;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ($validators)
        {
            $this->setValidators($validators);
        }

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.studentPersonId.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'studentFinancingId'=>MIOLO::_request('studentFinancingId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusStudentFinancing');
        $ok = $business->deleteStudentFinancing($this->studentFinancingId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusStudentFinancing');
        if ( $function == 'update' )
        {
            $ok  = $business->updateStudentFinancing($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertStudentFinancing($data);
            $msg = MSG_RECORD_INSERTED;
            $data->studentFinancingId = $ok;
        }

        if ( $ok )
        {
            $opts = array('studentFinancingIdS' => $data->studentFinancingId, 'event'=>'btnSearch_click');
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinStudentFinancing();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
