<?php

/**
 * 
 * Bank Return Message form
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 08/10/2007
 *
 * \b Organization: \n
 * iSolution - Soluções de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Soluções de Internet \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank return message
 **/
class FrmBankReturnMessage extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $bankReturnId = MIOLO::_request('bankReturnId') ? MIOLO::_request('bankReturnId') : MIOLO::_request('bankReturnId','GET');
            $fields[]  = new MTextLabel('bankReturnId', $bankReturnId, _M('Id', $module));
            $fields[]  = new MHiddenField('bankReturnId', $bankReturnId);
            
            $messageType = MIOLO::_request('messageType') ? MIOLO::_request('messageType') : MIOLO::_request('messageType','GET');
            $fields[]  = new MTextLabel('messageType', $messageType, _M('Message Type', $module));
            $fields[]  = new MHiddenField('messageType', $messageType);
            
            $messageCod = MIOLO::_request('messageCod') ? MIOLO::_request('messageCod') : MIOLO::_request('messageCod','GET');
            $fields[]  = new MTextLabel('messageCod', $messageCod, _M('Message', $module).' '._M('Id', $module));
            $fields[]  = new MHiddenField('messageCod', $messageCod);
                        
            $business = $MIOLO->getBusiness($module,'BusBankReturnMessage');
            $data     = $business->getBankReturn($bankReturnId,$messageType,$messageCod);
        }
        else 
        {
			//Bank Return
			$businessReturnConfig = $this->manager->getBusiness($module,'BusBankReturnConfig');
	        $bankReturnId  = new MComboBox('bankReturnId',  '', _M('Return',$module), $businessReturnConfig->listBankReturn());
	        $fields[] = $bankReturnId;
	        $validators[] = new MRequiredValidator('bankReturnId');
	        
			//Bank Return
			$businessReturnConfig = $this->manager->getBusiness($module,'BusBankReturnConfig');
	        $messageType  = new MComboBox('messageType',  '', _M('Message Type',$module), $businessReturnConfig->listBankReturn());
	        $fields[] = $messageType;
	        $validators[] = new MRequiredValidator('messageType');
	        $messageCod  = new MComboBox('messageCod',  '', _M('Message',$module).' '._M('Id',$module), $businessReturnConfig->listBankReturn());
	        $fields[] = $messageCod;
	        $validators[] = new MRequiredValidator('messageCod');
        }
        //Message	
        $message  = new MTextField('message', $this->message->value, _M('Message',$module), 80);
        $validators[] = new MRequiredValidator('message');
        $message->setJsHint(_M('Type The Message', $module));
        $fields[] = $message;
        
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'bankAccountId'=>MIOLO::_request('bankAccountId'));

        //
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBankAccount');
        $ok = $business->deleteBankAccount($this->bankAccountId->value);

        if ( $ok )
        {
            $businessConfig           = $MIOLO->getBusiness('basic', 'BusConfig');
            $dataConfig->moduleConfig = $module;
            $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_'.$this->bankAccountId->value;
            $businessConfig->deleteConfig($dataConfig->moduleConfig, $dataConfig->parameter);

            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBankReturn');
        
        $business->beginTransaction();

        if ( $function == 'update' )
        {
            $ok  = $business->updateBankReturn($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertBankReturn($data);
            $data->bankAccountId = $ok;
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $business->commit();

            $opts = array('bankReturnId'=>$data->bankReturnId, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBankAccount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
