<?php
/**
 * Person Information
 *
 * @author Eduardo Beal Miglioransa[eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to show the agreements
 **/
class FrmPersonInformation extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Person information', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $personId = MIOLO::_request('personId') ? MIOLO::_request('personId') : MIOLO::_request('personId', 'GET');
        $business = $MIOLO->getBusiness($module, 'BusPersonInformation');
        $data = $business->getPersonInformation($personId);
        if( strlen((string)$data->personId) == 0 )
        {
            $data->status = 'insert';
            $data->personName = _M('This person don\'t have any information.', $module);
        }
        else
        {
            $data->status = 'update';
            $data->personName = $data->name;
        }
        $fields[] = new MHiddenField('status', $data->status);
        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personIdLabel->setWidth(FIELD_LABEL_SIZE);
        //      $personIdLabel->setClass('m-caption m-caption-required');
        $personId = new MTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_ID_SIZE);
        $personId->setReadOnly(true);
        //$personId->setJsHint(_M('Enter the operation id', $module));
        //$validators[] = new MIntegerValidator('operationId', '', 'required');
        $personName = new MTextField('personName', $data->personName ? $data->personName : $this->getFormValue('personName',$data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        // $validators[] = new MRequiredValidator('operationDescription');
        $fields[] = new MHContainer('hctPersonName', array($personIdLabel, $personId, $personName));

        $informationLabel = new MText('informationLabel', _M('Information', $module).':');
        $informationLabel->setWidth(FIELD_LABEL_SIZE);
        // $informationLabel->setClass('m-caption m-caption-required');
        $informationLines = new MMultiLineField('information', $this->getFormValue('information', $data->information), '', 80, 15, 80);
        $informationLines->setJsHint(_M('Enter the information',$module));
        $fields[] = new MHContainer('hctInformation', array($informationLabel, $informationLines));

        $btnSave = new MButton('btnSave', _M('Save', $module), 'SUBMIT');
        $btnClose = new MButton('btnPersonInformationClose', _M('Close window', $module), 'self.close()');
        $fields[] = new MHContainer('hctBtnInformation', array($btnSave, $btnClose));

        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $this->setFields($fields);
        $this->setShowPostButton(false);
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnSave_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();

        // retira espaços.
        $data->information = trim($data->information);


        if (strlen((string)$data->information) == 0 )
        {
            $this->addError(_M('Do you need insert text in text field !', $module));
        }
        else
        {
            $business = $MIOLO->getBusiness($module, 'BusPersonInformation');
            if($data->status == 'insert')
            {
                $ok = $business->insertPersonInformation($data);
                $msg = MSG_RECORD_UPDATED;
            }
            elseif($data->status == 'update')
            {
                $ok = $business->updatePersonInformation($data);
                $msg = MSG_RECORD_UPDATED; 
            }
            if($ok)
            {

                unset($fields);
                $fields[] = new MText('InformationLabel', $msg);
                $fields[] = new MLabel('');

                $fields[] = new MButton('btnPersonIformationSaved', _M('Close window', $module), 'self.close()');
                $this->setFields($fields);

            //    $this->addError(_M('Error on save information !', $module));
            }

        }
     }
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinPersonInformation();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }
        // Pega estado do formulário ( update ou insert)
        $data->status = $this->status->value;
        return $data;
    }

}
?>
