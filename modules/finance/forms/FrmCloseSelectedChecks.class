<?php

/**
 * Form to close all selcted checks
 *
 * @author Daniel Afonso Heisler [daniel@hsti.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 31/10/2007
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate checks
 **/
class FrmCloseSelectedChecks extends MForm
{

    var $checks;
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Close selected checks', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $this->checks = unserialize(urldecode(stripslashes(MIOLO::_request('item'))));

        if ( count($this->checks) > 0 )
        {
            $x = 0;
            $busCheck             = $MIOLO->getBusiness('finance', 'BusCheck');
            $busBank              = $MIOLO->getBusiness('finance', 'BusBank');
            $busReceivableInvoice = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
            $busPerson            = $MIOLO->getBusiness('basic', 'BusPerson');

            foreach ( $this->checks as $checkId )
            {
                $check  = $busCheck->getCheck($checkId);
                $bank   = $busBank->getbank($check->bankId);
                $person = $busPerson->getPerson($check->personId);

                //dados pessoais
                $personLabel = new MText('personLabel' . $check->checkId, _M('Person', 'basic') . ':');
                $personLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]      = $personLabel;
            
                $personText  = new MText('personText' . $check->checkId, $person->personId . ' - ' . $person->name);
                $flds[]      = $personText;

                $hctPerson = new MHContainer('hctPerson' . $check->checkId, $flds);
                $hctPerson->setShowLabel(false);
                $flds2[]    = $hctPerson;
                unset($flds);

                //numero do cheque
                $checkNumberLabel = new MText('checkNumberLabel' . $check->checkId, _M('Check number', 'finance') . ':');
                $checkNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]           = $checkNumberLabel;
            
                $checkNumberText  = new MText('checkNumberText' . $check->checkId, $check->checkNumber);
                $flds[]           = $checkNumberText;

                $hctCheckNumber   = new MHContainer('hctCheckNumber' . $check->checkId, $flds);
                $hctCheckNumber->setShowLabel(false);
                $flds2[]          = $hctCheckNumber;
                unset($flds);

                //Banco
                $bankLabel = new MText('bankLabel' . $check->checkId, _M('Bank', 'finance') . ':');
                $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]    = $bankLabel;
            
                $bankText  = new MText('bankText' . $check->checkId, $bank->bankId . ' - ' . $bank->description);
                $flds[]    = $bankText;

                $hctBank   = new MHContainer('hctBank' . $check->checkId, $flds);
                $hctBank->setShowLabel(false);
                $flds2[]   = $hctBank;
                unset($flds);

                //data de emissão
                $emissionDateLabel = new MText('emissionDateLabel' . $check->checkId, _M('Emission date', 'finance') . ':');
                $emissionDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]            = $emissionDateLabel;
            
                $emissionDateText  = new MText('emissionDateText' . $check->checkId, $check->emissionDate);
                $flds[]            = $emissionDateText;

                $hctEmissionDate   = new MHContainer('hctEmissionDate' . $check->checkId, $flds);
                $hctEmissionDate->setShowLabel(false);
                $flds2[]           = $hctEmissionDate;
                unset($flds);

                //valor total
                $totalValueLabel = new MText('totalValueLabel' . $check->checkId, _M('Check total value', 'finance') . ':');
                $totalValueLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]          = $totalValueLabel;
            
                $totalValueText  = new MText('totalValueText' . $check->checkId, $check->totalValue);
                $flds[]          = $totalValueText;

                $hctTotalValue   = new MHContainer('hctTotalValue' . $check->checkId, $flds);
                $hctTotalValue->setShowLabel(false);
                $flds2[]         = $hctTotalValue;
                unset($flds);

                //data de baixa
                $downDateLabel = new MText('downDateLabel' . $check->checkId, _M('Down date', 'finance') . ':');
                $downDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $flds[]        = $downDateLabel;

                $downDate      = new MCalendarField('downDate' . $check->checkId, $this->getFormValue('downDate' . $check->checkId, date(MASK_DATE_PHP)), null, FIELD_DATE_SIZE);
                $validators[]  = new MDATEDMYValidator('downDate' . $check->checkId, _M('Down date', $module), 'required');
                $flds[]        = $downDate;

                $hctDownDate   = new MHContainer('hctDownDate' . $check->checkId, $flds);
                $hctDownDate->setShowLabel(false);
                $flds2[]       = $hctDownDate;
                unset($flds);

                //status
                $messagesType = array ( 
                                         array (_M('With funds', $module), 'C'),
                                         array (_M('No funds', $module), 'S'),
                                         array (_M('Returned', $module), 'D')
                                      );

                $statusLabel = new MText('statusLabel' . $check->checkId, _M('Check status',$module) . ':');
                $statusLabel->setWidth(FIELD_CONTAINER_SIZE);

                $statusId    = new MRadioButtonGroup('status' . $check->checkId, null, $messagesType, $this->getFormValue('status' . $check->checkId, $check->status) ? $this->getFormValue('status' . $check->checkId, $check->status) : 'C', null, 'horizontal');
                $statusId->SetShowLabel(false);

                $hctStatus = new MVContainer('hctStatus' . $check->checkId, array($statusLabel, $statusId));
                $flds22[]  = $hctStatus; 

                $hctStatus            = new MVContainer('hctStatus' . $check->checkId, $flds22);
                $hctStatus->width     = '50%';
                $hctStatus->showLabel = true;
                unset($flds22);
                $flds2[]              = $hctStatus;

                //titulos vinculados
                if ( count($check->invoices)>0 )
                {
                    $y = 0;
                    foreach ( $check->invoices as $checkInvoice )
                    {
                        $invoice = $busReceivableInvoice->getReceivableInvoice($checkInvoice->invoiceId);

                        //saldo do titulo
                        $balanceLabel = new MText('balanceLabel' . $check->checkId . $invoice->invoiceId, _M('Invoice balance', 'finance') . ':');
                        $balanceLabel->setWidth(FIELD_CONTAINER_SIZE);
                        $flds[]       = $balanceLabel;
            
                        $balanceText  = new MText('balanceText' . $check->checkId . $invoice->invoiceId, $invoice->balance);
                        $flds[]       = $balanceText;

                        $hctBalance   = new MHContainer('hctBalance' . $check->checkId . $invoice->invoiceId, $flds);
                        $hctBalance->setShowLabel(false);
                        $flds3[]      = $hctBalance;
                        unset($flds);

                        //Valor do cheque para o título
                        $checkInvoiceValueLabel = new MText('checkInvoiceValueLabel' . $check->checkId . $invoice->invoiceId, _M('Check invoice value', 'finance') . ':');
                        $checkInvoiceValueLabel->setWidth(FIELD_CONTAINER_SIZE);
                        $flds[]                 = $checkInvoiceValueLabel;
            
                        $checkInvoiceValueText  = new MText('checkInvoiceValueText' . $check->checkId . $invoice->invoiceId, $checkInvoice->value);
                        $flds[]                 = $checkInvoiceValueText;

                        $hctCheckInvoiceValue   = new MHContainer('hctCheckInvoiceValue' . $check->checkId . $invoice->invoiceId, $flds);
                        $hctCheckInvoiceValue->setShowLabel(false);
                        $flds3[]                = $hctCheckInvoiceValue;
                        unset($flds);

                        //pergunta se deve baixar o título
                        $closeInvoiceLabel = new MText('closeInvoiceLabel' . $check->checkId . $invoice->invoiceId, _M('Insert this value in the invoice?', 'finance'));
                        $closeInvoiceLabel->setWidth(FIELD_CONTAINER_SIZE);
                        $flds[]            = $closeInvoiceLabel;

                        $closeInvoice      = new MCheckBox('closeInvoice_' . $check->checkId . '_' . $invoice->invoiceId, 1, _M('Yes', 'finance'), false);
                        $flds[]            = $closeInvoice;

                        $hctCloseInvoice   = new MHContainer('hctCloseInvoice' . $check->checkId . $invoice->invoiceId, $flds);
                        $hctCloseInvoice->setShowLabel(true);
                        $flds3[]           = $hctCloseInvoice;
                        unset($flds);

                        //base group dos títulos
                        $bsg2[$y]            = new BaseGroup('bsg1' . $check->checkId ,_M('Invoice data', $module) . ': ' . $invoice->invoiceId, $flds3, 'vertical');
                        $bsg2[$y]->showLabel = true;
                        $bsg2[$y]->width     = '48%';
                        $y++;
                        unset($flds, $flds3);
                    }
                }
                $hctInvoice = new MHContainer('hctInvoice' . $check->checkId, $bsg2);
                $hctInvoice->setShowLabel(false);
                $flds2[]    = $hctInvoice;
                unset($flds);

                
                //base group final
                $bsg1[$x]            = new BaseGroup('bsg1' . $check->checkId ,_M('Check data', $module) . ': ' . $check->checkId, $flds2, 'vertical');
                $bsg1[$x]->showLabel = true;
                $bsg1[$x]->width     = '100%';
                $x++;
                unset($flds, $flds2);
            }
        }

        $hct1            = new MVContainer('hct1',$bsg1);
        $hct1->width     = '98%';
        $hct1->showLabel = true;
        $fields[]        = $hct1;

        $btnClose = new MButton('btnClose', _M('Close checks', 'finance'));
        $div1     = new MDiv('div1', $btnClose, null, 'align="center"');
        $fields[] = $div1;

        $this->setFields($fields);
        if ( count($validators)>0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }

    /**
     * Event triggered when user click "Close checks" buton
     **/
    public function btnClose_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = 'main:register:check';
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        if ( count($data)>0 )
        {
            $db = $MIOLO->getBusiness('finance', 'BusCheck');
            $ok = $db->updateChecks($data);
        }

        if ( $ok )
        {
            $msg = MSG_RECORD_UPDATED;
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action));
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ( count($this->checks)>0 )
        {
            $busCheck = $MIOLO->getBusiness('finance', 'BusCheck');
            $x=0;
            foreach ( $this->checks as $checkId )
            {
                $data[$x]->checkId        = $checkId;
                eval('$data[$x]->downDate = $this->downDate' . $checkId . '->value;');
                eval('$data[$x]->status   = $this->status' . $checkId . '->value;');

                $check = $busCheck->getCheck($checkId);
                //titulos vinculados
                if ( count($check->invoices)>0 )
                {
                    $y = 0;
                    foreach ( $check->invoices as $checkInvoice )
                    {
                        eval('if ( $this->getFormValue(\'closeInvoice_' . $check->checkId . '_' . $checkInvoice->invoiceId . '\') == 1 )
                        {
                            $data[$x]->invoices[$y] = $checkInvoice->invoiceId;
                        }');
                        $y++;
                    }
                }
                $x++;
            }
        }
        return $data;
    }

}

?>
