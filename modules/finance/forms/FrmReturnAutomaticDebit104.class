<?php

/**
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmReturnAutomaticDebit104 extends MForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Return automatic debit to CEF', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $toolBar = new MToolBar( 'toolBar', $MIOLO->getActionURL($module, $action) );

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave' );
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');

        // Favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Return automatic debit to CEF (104)', $this->home, 'returnAutomaticDebit104-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;
        $data->bankId = '104'; 
        $fields[] = new MHiddenField('bankId', '104');

        $busOperation = $MIOLO->getBusiness($module, 'BusOperation');

        $fields[] = new MSelection('operationId', $this->getFormValue('operationId', $data->operationId), _M('Operation id', $module), $busOperation->listOperation(null, true), true);
        $validators[] = new MRequiredValidator('operationId');
        
        $busBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');

        $fields[] = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Bank account id', $module), $busBankAccount->listBankAccount($data));
        $validators[] = new MRequiredValidator('bankAccountId', $data->bankAccountId);

        $fields[] = new MFileField('returnFile', $this->getFormValue('returnFile', $data->returnFile), _M('Return file', $module));
        $validators[]= new MRequiredValidator('returnFile', $data->returnFile);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('send', _M('Send', $module), 'SUBMIT');
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
    }

   /**
     * Get this action when submit button on this form is clicked
     */
    public function send_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();
        $MIOLO->getClass($module, 'ReturnAutomaticDebit104');
        
        if ($_FILES["returnFile"]["error"] === 0)
        {
            $data->fileName  = $_FILES["returnFile"]["name"];
            $data->fileType  = $_FILES["returnFile"]["type"];
            $data->localPath = $_FILES["returnFile"]["tmp_name"];
            $data->size      = $_FILES["returnFile"]["size"];
        }
        else
        {
            $MIOLO->information(_M('Some problems occurred updating the file. Please, try again.', $module));
        }
        $businessFile = $MIOLO->getBusiness('basic', 'BusFile');

        $dataFile = $businessFile->insertFile($data);
        if ($dataFile == false)
        {
            $MIOLO->information(_M('Some problems occurred on update the file. Please, try again.', $module));
        }
        else
        {
            if (SAGUFile::saveFileToLocal($data->localPath, $dataFile->fileId))
            {
                $args = array('event'=>'process_click', 
                              'fileId'=>$dataFile->fileId,
                              'bankAccountId'=>$data->bankAccountId,
                              'operationId'=>$data->operationId
                             );
                $goProcessURL = $MIOLO->getActionURL($module, $action, null, $args);
                $MIOLO->information(_M('File uploaded with success. Please, click on "OK" button to continue this process', $module), $goProcessURL);
            }
        }
        $automaticDebit = new ReturnAutomaticDebit104($data);
    }
   
    /**
     * Get this action when submit button on this form is clicked
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->getClass($module, 'ReturnAutomaticDebit104');
        $data = $this->getTypesData();
        
        $data->fileId        = MIOLO::_request('fileId');
        $data->bankAccountId = MIOLO::_request('bankAccountId');
        $data->operationId   = MIOLO::_request('operationId');
        
        $importAutomaticDebit = new ReturnAutomaticDebit104($data);
        //  $returnInfo = $automaticDebit->returnInfoData();

        if (is_object($importAutomaticDebit->statistics))
        {
            if (is_array($importAutomaticDebit->statistics->ReturnsOk))
            {
                $field1 = $MIOLO->getUI()->getGrid($module, 'GrdReturnAutomaticDebit104');
                $field1->setTitle(_M('Return information about sucessefuly processed', $module));
                $field1->setData($importAutomaticDebit->statistics->ReturnsOk);
                $fields[] = $field1;
            }
            if (is_array($importAutomaticDebit->statistics->ReturnsError))
            {
                $field2 = $MIOLO->getUI()->getGrid($module, 'GrdReturnAutomaticDebit104');
                $field2->setData($importAutomaticDebit->statistics->ReturnsError);
                $field2->setTitle(_M('Information abount returns not found', $module));
                $fields[] = $field2;
            }
            $fields[] = new Separator('');
            $url           = $MIOLO->getActionURL($module, $this->home);
            $fields[] = new MButton('btnBack', _M('Back', $module), $url);
            $this->setFields($fields);
            $this->setShowPostButton(false);
        }
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankAccountId = $this->getFormValue('bankAccountId');
        $data->operationId   = $this->getFormValue('operationId');
        
        return $data;
    }
}
?>
