<?php
/**
 *
 * This file handles the connection and actions for finFinancialAid table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmFinancialAidSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Financial aid', $this->home, 'financialAid-16x16.png', true);
        }
        //fim favoritos

        if ( MIOLO::_request('function') == 'search' )
        {
             $data->incentiveTypeIdS = MIOLO::_request('incentiveTypeIdS');
        }


        $fields[] = $toolBar;
        $incentiveTypeIdS = new MTextField('incentiveTypeIdS', $this->getFormValue('incentiveTypeIdS', $incentiveTypeIdS), _M('Incentive type id',$module), FIELD_ID_SIZE);
        $validators[] = new MIntegerValidator('incentiveTypeIdS');
        $incentiveTypeIdS->setJsHint(_M('Enter incentive type id', $module));
        $fields[] = $incentiveTypeIdS;
        
        $descriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS', $descriprionS), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter description', $module));        
        $fields[] = $descriptionS;

        // operation       
        $operationIdLabelS = new MText('operationIdLabelS', _M('Operation id',$module));
        $operationIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $operationIdLabelS;

        $operationIdS = new MLookupTextField('operationIdS', $this->getFormValue('operationIdS', $operationIdS), _M('',$module), FIELD_ID_SIZE, null, null,
            'operationDescriptionS',
            'finance', 'Operation', null, null, true);
        $operationIdS->setJsHint(_M('Select the operation id', $module));
        $validators[] = new MIntegerValidator('operationIdS');
        $flds[] = $operationIdS;
        
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->getFormValue('operationDescriptionS', $operationDescriptionS), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $operationDescriptionS->setReadOnly(true);
        $flds[] = $operationDescriptionS;

        $hctOperationS = new MHContainer('hctOperationS', $flds);
        $hctOperationS->setShowLabel(true);
        $fields[]  = $hctOperationS;
        unset($flds);

        // get Yes and No for Radio Button
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $needAdjustAuthorizationLabelS = new MText('needAdjustAuthorizationLabelS', _M('Need adjust authorization',$module));
        $needAdjustAuthorizationLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $needAdjustAuthorizationS = new MRadioButtonGroup('needAdjustAuthorizationS', '', $messagesTypeS, $this->getFormValue('needAdjustAuthorizationS', $needAdjustAuthorizationS), null, 'horizontal');
        $needAdjustAuthorizationS->SetShowLabel(false);
        $hctNeedAdjustAuthorizationS = new MHContainer('hctNeedAdjustAuthorizationS', array($needAdjustAuthorizationLabelS, $needAdjustAuthorizationS));
        $fields[]  = $hctNeedAdjustAuthorizationS;


        // get Yes and No for Radio Button 
        $sendInvoicesLabelS = new MText('sendInvoicesLabelS', _M('Send invoices',$module));
        $sendInvoicesLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $sendInvoicesS = new MRadioButtonGroup('sendInvoicesS', '', $messagesTypeS, $this->getFormValue('sendInvoicesS', $sendInvoicesS), null, 'horizontal');
        $sendInvoicesS->SetShowLabel(false);
        $hctSendInvoicesS = new MHContainer('hctSendInvoicesS', array($sendInvoicesLabelS, $sendInvoicesS));
        $fields[]  = $hctSendInvoicesS;
     
        // get Yes and No for Radio Button         $messagesType =  SAGU::listTrueFalse(1);
        $generateCreditsLabelS = new MText('generateCreditsLabelS', _M('Generate credits',$module));
        $generateCreditsLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $generateCreditsS = new MRadioButtonGroup('generateCreditsS', '', $messagesTypeS, $generateCreditsS, null, 'horizontal');
        $generateCreditsS->SetShowLabel(false);
        $hctGenerateCreditsS = new MHContainer('hctGenerateCreditsS', array($generateCreditsLabelS, $generateCreditsS));
        $fields[]  = $hctGenerateCreditsS;

        // get Yes and No for Radio Button         $messagesType =  SAGU::listTrueFalse(1);
        $requireCostCenterLabelS = new MText('requireCostCenterLabelS', _M('Require cost center',$module));
        $requireCostCenterLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $requireCostCenterS = new MRadioButtonGroup('requireCostCenterS', '', $messagesTypeS, $this->getFormValue('requireCostCenterS', $requireCostCenterS), null, 'horizontal');
        $requireCostCenterS->SetShowLabel(false);
        $hctRequireCostCenterS = new MHContainer('hctRequireCostCenterS', array($requireCostCenterLabelS, $requireCostCenterS));
        $fields[]  = $hctRequireCostCenterS;

        $fields[] = new MButton('btnSearch', _M('Search', $module));
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);        
        $this->setValidators($validators); 
        
        $filters->incentiveTypeId           = $this->incentiveTypeIdS->value;
        $filters->description               = $this->descriptionS->value;
        $filters->operationId               = $this->operationIdS->value;
        $filters->needAdjustAuthorization   = $this->needAdjustAuthorizationS->value;
        $filters->sendInvoices              = $this->sendInvoicesS->value;
        $filters->generateCredits           = $this->generateCreditsS->value;
        $filters->requireCostCenter         = $this->requireCostCenterS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdFinancialAidSearch', $filters);
        $business = $this->manager->getBusiness($module,'BusFinancialAid');
        $data = $business->searchFinancialAid($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);
        
        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.incentiveTypeIdS.focus();');
        }
    }

}

?>
