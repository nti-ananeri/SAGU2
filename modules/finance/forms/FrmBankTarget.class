<?php

/**
 * BankTarget form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a invoiceTarget
 **/
class FrmBankTarget extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $contractId = MIOLO::_request('contractId') ? MIOLO::_request('contractId') : MIOLO::_request('contractId');
            $contractLabel = new MText('contractLabel', _M('Contract id', $module).':');
            $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractId_ = new MTextLabel('contractId', $contractId, '');
            
            $fields[] = new MHContainer('hctContractId', array($contractLabel, $contractId_));
            $fields[] = new MHiddenField('contractId', $contractId);
            
            $business = $MIOLO->getBusiness($module, 'BusBankTarget');
            $data     = $business->getBankTarget($contractId);
            
           
        }
        else
        {

            // Contract person id
            $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
            $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personIdLabel->setClass('m-caption m-caption-required');
            $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_ID_SIZE, null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'personId'), ((!$this->page->isPostBack()) || ($event == 'btnSearch_click')));
            $validators[] = new MIntegerValidator('personId', _M('Person', $module), 'required');
            $personId->setJsHint(_M('Enter the transferor code', $module));
            $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $fields[] = new MHContainer('hctPersonId', array($personIdLabel, $personId, $personName));
    
            // Contract id
            $contractIdLabel = new MText('contractIdLabel', _M('Contract id', $module).':');
            $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $contractIdLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_ID_SIZE, null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'contractTurnId', $limbo, 'contractUnitId'), 'academic', 'Contract', null, array('personId' => 'personId'),  ((!$this->page->isPostBack()) || ($event == 'btnSearch_click')) );
            $contractId->setJsHint(_M('Enter the contract code', $module));
            $validators[] = new MIntegerValidator('contractId', _M('Contract id', $module), 'required');
            $courseId = new MTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('',$module), FIELD_ID_SIZE);
            $courseId->setReadOnly(true);
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), '', 3);
            $courseVersion->setReadOnly(true);
            $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), '', FIELD_DESCRIPTION_SIZE);
            $courseName->setReadOnly(true);
            $fields[] = new MHContainer('hctContract', array($contractIdLabel, $contractId, $courseId, $courseVersion, $courseName));

      }

        $bankLabel = new MText('bankIdLabel', _M('Bank id', $module).':');
        $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId    = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_ID_SIZE, null, null, 'bankName', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Enter the bank id', $module));
        $validators[] = new MRangeValidator('bankId', _M('Bank id', $module), '001', '999', 'i', 'required');
        $bankName   = new MTextField('bankName', $this->getFormValue('bankName', $data->bankName), '', FIELD_DESCRIPTION_SIZE);
        $bankName->setJsHint(_M('Bank name', $module));
        $bankName->setReadOnly(true);
        $fields[] = new MHContainer('hctBank', array( $bankLabel, $bankId, $bankName));

        // Branch number
        $branchNumberLabel = new MText('branchNumberLabel', _M('Branch number', $module).':');
        $branchNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $branchNumberLabel->setClass('m-caption m-caption-required');
        $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber', $data->branchNumber), '', FIELD_ID_SIZE);
        $branchNumber->setJsHint(_M('Enter the branch number', $module));
        $validators[] = new MRangeValidator('branchNumber', _M('Branch number', $module), '1', '9999', 'i', 'required');
        $branchNumberTrace = new MTexT('branchNumberTrace', '-');
        // Branch digit
        $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit', $data->branchNumberDigit), '', 4);
        $branchNumberDigit->setJsHint(_M('Enter the branch digit', $module));
        $validators[] = new MRangeValidator('branchNumberDigit', _M('Branch number digit', $module), '0', '99', 'i', 'required');
        $fields[] = new MHContainer('hctBranchNumber', array($branchNumberLabel, $branchNumber, $branchNumberTrace, $branchNumberDigit));
        // Account number
        $accountNumberLabel = new MText('accountNumberLabel', _M('Account number', $module).':');
        $accountNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $accountNumberLabel->setClass('m-caption m-caption-required');
        $accountNumber = new MTextField('accountNumber', $this->getFormValue('accountNumber',$data->accountNumber), '', 20);
        $accountNumber->setJsHint(_M('Enter the account number',$module));
        $validators[] = new MRangeValidator('accountNumber', _M('Account number', $module), '1', '9999999999999', 'i', 'required');
        $accountTrace = new MText('accountTrace', '-');
        // Account digits
        $accountNumberDigit = new MTextField('accountNumberDigit', $this->getFormValue('accountNumberDigit',$data->accountNumberDigit), '', 4);
        $accountNumberDigit->setJsHint(_M('Enter the account digits',$module));
        $validators[] = new MRangeValidator('accountNumberDigit', _M('Account number digit', $module), 0, 'zz', 's', 'required');
        $fields[] = new MHContainer('hctAccountNumber', array($accountNumberLabel, $accountNumber, $accountTrace, $accountNumberDigit));

        $this->page->onLoad('document.' . $this->name . '.personId.focus();');

        if ( $function == 'update' )
        {
            // get Yes and No for Radio Button
            $messagesType =  SAGU::listTrueFalse(1);
            $isActiveLabel = new MText('isActiveLabel', _M('Is active',$module).':');
            $isActiveLabel->setWidth(FIELD_CONTAINER_SIZE);
            $isActiveLabel->setClass('m-caption m-caption-required');
            $isActive = $this->getFormValue('isActive', $data->isActive) ? $this->getFormValue('isActive',$data->isActive) : t ;
            $isActive = new MRadioButtonGroup('isActive', '', $messagesType, $isActive, null, 'horizontal');
            $isActive->SetShowLabel(false);
            $hctIsActive = new MHContainer('hctIsActive', array($isActiveLabel, $isActive));
            $fields[]  = $hctIsActive; 
 

            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        else
        {
            $data->isActive = $this->getFormValue('isActive', $data->isActive ) ? $this->getFormValue('isActive', $data->isActive ) : 't';
            $fields[] = new MHiddenField('isActive', $data->isActive);
 
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'contractId'=>MIOLO::_request('contractId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('contractId'=>MIOLO::_request('contractId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBankTarget');
        $ok = $business->deleteBankTarget(MIOLO::_request('contractId'));

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBankTarget');
        if ( $function == 'update' )
        {
            $ok  = $business->updateBankTarget($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $bankTarget = $business->getBankTarget($data->contractId);
            if (strlen((string)$bankTarget->contractId)>0)
            {
                $opts    = array('contractId'=>$data->contractId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('contractIdS'=>$data->contractId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('Bank target for contract @1 already exists, do you want edit that bank target?', $module, $data->contractId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok  = $business->insertBankTarget($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }
        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('contractIdS'=>$data->contractId, 'event', 'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question', $module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBankTarget();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        return $data;
    }
}
?>
