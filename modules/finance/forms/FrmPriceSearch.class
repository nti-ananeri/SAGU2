<?php

/**
 *
 * This file handles the connection and actions for finPrice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 16/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finPrice table
 */
class FrmPriceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Price', $this->home, 'price-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
	
        // Period id
        $businessPeriod = $MIOLO->getBusiness('academic','BusPeriod');
        if (defined('CURRENT_PERIOD_ID'))
        {
            $currentPeriodId = $businessPeriod->getPeriod(CURRENT_PERIOD_ID);
            $currentPeriodId = strlen((string)$currentPeriodId->periodId)>0 ? CURRENT_PERIOD_ID : '';
        }
        $periodIdS      = new MComboBox('periodIdS', strlen((string)$this->getFormValue('periodIdS', $data->periodIdS))>0 ? $this->getFormValue('periodIdS', $data->periodIdS) : $currentPeriodId, _M('Period', $module), $businessPeriod->listPeriod(), true );
        $fields[]       = $periodIdS;

        // permitir localizar preco por curso
        $courseLabelS = new MText('courseLabelS', _M('Course',$module).':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, null, FIELD_ID_SIZE, null, null,
            array('courseVersionS','courseNameS'),
            'academic', 'CourseOccurrence', null, array('courseId' => 'courseIdS'), true);
        $courseIdS->setJsHint(_M('Select the course id', $module));

        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, null, FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(false);

        $couseVersionDescriptionS = new MText('couseVersionDescriptionS',_M('Version',$module).':'); 

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, null, FIELD_DESCRIPTION_SIZE);
//        $courseNameS->setReadOnly(true);
         $hctCourseS = new MHContainer('hctCourseS', array($courseLabelS,$courseIdS,$couseVersionDescriptionS,$courseVersionS,$courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]   = $hctCourseS;
        

        $learnigPeriodLabelS = new MText('learnigPeriodLabelS', _M('Learning period id', $module).':');
        $learnigPeriodLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->learningPeriodIdS->value, _M('',$module), FIELD_ID_SIZE, null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescriptionS', 'academic', 'LearningPeriod', null, array('periodIdS' => 'periodIdS', 'courseId' => 'courseIdS', 'courseVersion' => 'courseVersionS'), true);
        $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->learningPeriodDescriptionS->value, _M('',$module), FIELD_DESCRIPTION_SIZE);
        $learningPeriodDescriptionS->setReadOnly(true);
        $learningPeriodDescriptionS->setJsHint(_M('Enter the contract state description',$module));
        $fields[] = new MHContainer('hctlearningPeriodDescriptionS', array($learnigPeriodLabelS, $learningPeriodIdS ,$learningPeriodDescriptionS));

       	$startDateS = new MCalendarField('startDateS', $this->getFormValue('startDateS', $data->startDateS), _M('Begin date price', $module),FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('startDateS', '', 'optional');
        $fields[] = $startDateS;
        $endDateS = new MCalendarField('endDateS', $this->getFormValue('endDateS', $data->endDateS), _M('End date', $module),FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;
	$valueS = new MTextField('valueS', $this->valueS->value, _M('Value',$module), FIELD_ID_SIZE);
        $valueS->setJsHint(_M('Enter the value',$module));
        $fields[] = $valueS;

	$valueS = new MTextField('enrollValueS', $this->enrollValueS->value, _M('Enroll value',$module), FIELD_ID_SIZE);
        $valueS->setJsHint(_M('Enter the enroll value',$module));
        $fields[] = $valueS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        // get filters values
        $filters->learningPeriodId    = $this->learningPeriodIdS->value;
        $filters->courseName          = $this->courseNameS->value;
        $filters->courseId            = $this->courseIdS->value;
        $filters->courseVersion       = $this->courseVersionS->value;
        $filters->startDate           = $this->startDateS->value;
        $filters->endDate             = $this->endDateS->value;
        $filters->value               = $this->valueS->value;
	$filters->enrollValue	      = $this->enrollValueS->value;
        $filters->periodId            = $this->getFormValue('periodIdS', $data->periodIdS) ? $this->getFormValue('periodIdS', $data->periodIdS) : $data->periodIdS->value;
        
        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdPriceSearch', $filters);
        $business = $this->manager->getBusiness($module, 'BusPrice');

        $data = $business->searchPrice($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);
        
        $this->page->onLoad('document.' . $this->name . '.periodIdS.focus();');

    }

}

?>
