<?php

/**
 *
 * This file handles the connection and actions for finPolicy table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * 
 * @since
 * Class created on 08/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finPolicy table
 */
class FrmPolicySearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Policy', $this->home, 'policy-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        // Policy id        
        $policyIdLabelS = new MText('policyLabelS', _M('Id', $module).':');
        $policyIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $policyIdS = new MTextField('policyIdS', $this->policyIdS->value, '', FIELD_ID_SIZE);
        $policyIdS->setJsHint(_M('Enter the policy code',$module));
        $validators[] =  new MIntegerValidator('policyIdS');
        $fields[] = new MHContainer('hctPolicy', array($policyIdLabelS, $policyIdS));

        // Description
        $descriptionLabelS = new MText('descriptionLabel', _M('Description', $module).':');
        $descriptionLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the description',$module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabelS, $descriptionS));

        // operation id
        $operationIdLabelS = new MText('operationIdLabelS', _M('Operation id', $module).':');
        $operationIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $operationIdS = new MLookupTextField('operationIdS', $this->operationIdS->value, '', FIELD_ID_SIZE, null, null, 'operationDescriptionS,operationTypeIdS', $module, 'Operation', null, null, true);
        $validators[] =  new MIntegerValidator('operationIdS');
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->operationDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $operationDescriptionS->setReadOnly(true);
        $fields[] = new MHContainer('hctOperationId', array($operationIdLabelS, $operationIdS, $operationDescriptionS));
        
        // Collection type
        $bussinessCollectionType = $MIOLO->getBusiness($module, 'BusCollectionType');
        $fields[] = new MSelection('collectionTypeIdS', $this->getFormValue('collectionTypeIdS', $data->collectionTypeIdS), _M('Collection type id', $module),  $bussinessCollectionType->listCollectionType(), false);

        // Discount
        $discountLabelS = new MText('discountLabelS', _M('Discount', $module).':');
        $discountLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $discountS = new MTextField('discountS', $this->discountS->value, '', FIELD_ID_SIZE);
        $validators[] =  new MFloatValidator('discountS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $discountS->setJsHint(_M('Enter the discount',$module));
        $fields[] = new MHContainer('hctDiscount', array($discountLabelS, $discountS));

        // Bank tax value
        $bankTaxValueLabelS = new MText('bankTaxValueLabelS', _M('Bank tax value', $module).':');
        $bankTaxValueLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $bankTaxValueS = new MTextField('bankTaxValueS', $this->bankTaxValueS->value, '', FIELD_MONETARY_SIZE);
        $bankTaxValueS->setJsHint(_M('Enter the bank tax value',$module));
        $validators[] =    new MFloatValidator('bankTaxValueS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $fields[] = new MHContainer('hctBankTaxValue', array($bankTaxValueLabelS, $bankTaxValueS));

        // Is extinct
        $optsS    =  SAGU::listTrueFalse(1);
//        $optsS = $business->listOperationTypeId(1);
        $isExtinctLabelS = new MText('isExtinctLabelS', _M('Is extinct', $module).':');
        $isExtinctLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $isExtinctS = new MRadioButtonGroup('isExtinctS', '', $optsS,  $this->getFormValue('isExtinctS', $data->isExtinctS) ? $this->getFormValue('isExtinctS', $data->isExtinctS) : '', null, 'horizontal');
        $isExtinctS->setShowLabel(false);
        $fields[] = new MHcontainer('hctIsExtinct', array($isExtinctLabelS, $isExtinctS));



        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->policyId               = $this->policyIdS->value;
        $filters->description            = $this->descriptionS->value;
        $filters->operationId            = $this->operationIdS->value;
        $filters->collectionTypeId       = $this->collectionTypeIdS->value;
        $filters->discount               = $this->discountS->value;
        $filters->bankTaxValue           = $this->bankTaxValueS->value;
        $filters->isExtinct              = $this->isExtinctS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPolicySearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusPolicy');
        $data = $business->searchPolicy($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.policyIdS.focus();');
        }

    }

}

?>
