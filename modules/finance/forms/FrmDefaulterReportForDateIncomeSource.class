<?php

/**
 * Defaulter Report for date form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmDefaulterReportForDateIncomeSource extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Defaulter', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
 

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Defaulter', $this->home, 'defaulter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        

        // início 1° grupo

        // data inicial
        $startDateLabel = new MText('startDateLabel', _M('Start date',$module).':');
        $startDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $startDateLabel->setClass('m-caption m-caption-required');
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('',$module), FIELD_DATE_SIZE);
        $startDate->setJsHint(_M('Enter the start date',$module));
        $validators[] = new MDATEDMYValidator('startDate');
        $hctStartDate = new MHContainer('hctStartDate', array($startDateLabel, $startDate));
        $hctStartDate->setShowLabel(true);
        $field1[] = $hctStartDate;

        // data final
        $endDateLabel = new MText('endDateLabel', _M('End date',$module).':');
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('',$module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDate');
        $hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $field1[] = $hctEndDate;

        // income source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Income source',$module).':');
        $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);        
        $incomeSourceLabel->setClass('m-caption m-caption-required');
        $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId',$data->incomeSourceId), null,FIELD_ID_SIZE, null, null,
            'incomeSourceDescription',
            'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Select the income source id', $module));
        $validators[] = new MIntegerValidator('incomeSourceId', _M('Income source', $module), 'required');
        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription), null, FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescription->setReadOnly(true);
        $hctIncomeSource = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(true);
        $field1[]   = $hctIncomeSource;

        // course
        $courseLabel = new MText('courseLabel', _M('Course',$module).':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), null,FIELD_ID_SIZE, null, null,
            array('courseVersion','courseName','','','','','grp2UnitId'),
            $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseId'), true);
        $courseId->setJsHint(_M('Select the course id', $module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), null,FIELD_ID_SIZE);
        $couseVersionDescription = new MText('couseVersionDescription',_M('Version',$module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), null, FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $couseVersionDescription, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $field1[]   = $hctCourse;

        // Periodo do próximo semestre.
        // $dataPeriod  : Dados obtidos do list do business period
        $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
        $dataPeriod = $businessPeriod->listPeriod();

        $periodLabel = new MText('periodLabel', _M('Selective process period', $module) .':');
        $periodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $periodId = new MComboBox('periodId', $this->periodId->value, '', $dataPeriod, false, '', 2);
        $periodId->setJsHint( _M('Choose the selective process period',$module) );
        $mhcPeriod = new MHContainer('mhcPeriod', array($periodLabel,$periodId));
        $mhcPeriod->setShowLabel(true);
        $field2[]   = $mhcPeriod;
        
        $MVContainerNull = new MVContainer('MVContainerNull', '');
        // Seta container como não ativo no form.
        $MVContainerNull->addBoxStyle('display', 'none');

        $MVContainerDefaulter = new MVContainer('MVContainerDefaulter', $field2);
        // Seta container como não ativo no form.
        $MVContainerDefaulter->addBoxStyle('display', 'none');


    // Criação do Radio Button.
        $messagesType[0][0] = _M('Graduation',$module);
        $messagesType[0][1] = 'graduation';
        $messagesType[1][0] = _M('Freshman',$module);
        $messagesType[1][1] = 'freshman';
 

        $options = ($messagesType[0][1].','.
                    $messagesType[1][1]);
        
        $nameFields = ('MVContainerNull,'.
                       'MVContainerDefaulter');
        $generateOptionLabel = new MText('generateOptionLabel', _M('Generate option',$module).':');
        $generateOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $generateOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : '';
        $generateOption = new MRadioButtonGroup('generateOption', '', $messagesType, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
 
        $url = $MIOLO->getActionURL( 'basic', 'html:scripts:DocSelectedRadioButton.js' );
        $this->page->scripts->add($url);
        $generateOption->addAttribute('onClick', 'DocSelectedRadioButton( \''. $generateOption->name . '\', \''. $nameFields . '\', \'' . $options .  '\'  )');
        $hctGenerateOption = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        $field1[]  = $hctGenerateOption;

//       $noteField      = new MTextField('noteField[' . $row[0] . ']', ($enrollGradesData[0][0] > 0 ? $enrollGradesData[0][0] : ''), '', 10);

        // terceiro grupo 
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $fields1[] = new MVContainer('container3', $field1);
        $fields1[] = new MSeparator('');
        $fields1[] = $MVContainerNull;
        $fields1[] = $MVContainerDefaulter;
//        $fields1[] = $MVContainerLetterB;
//        $fields1[] = $MVContainerEnrollRejected;
//        $fields1[] = $MVContainerFirstSemEnroll;
//        $fields[]  = new MBaseGroup('mbgDefaulter', _M('Defaulter enrolled', $module), $fields1);
        // Botões do terceiro Grupo.
//        $btnGrp3  = new MButton('btnGrp3', _M('Generate', $module));
//        $btnEnrollRejected = new MButton('btnEnrollRejected', _M('Enroll rejected', $module));
//        $btnFirstEnroll = new MButton('btnFirstEnroll', _M('First Sem/Enroll ', $module));
//        $fieldss1[] = new MHContainer('hctBtn3', array($btnLetterA, $btnLetterB, $btnEnrollRejected, $btnFirstEnroll ));
 //       $fieldss1[] = new MHContainer('hctBtn3', array($btnGrp3 ));
 //       $fields[]  = $fieldss1;

//        $fields[]          = new MSeparator('');

//        unset($field1);
 //       unset($fields1);
 //       unset($fieldss1);

        // fim do 3° grupo

        // First group 
//        $field1[]  = $personName;
 //       $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
 //       $field1[]  = new MSeparator('');
//        $fields1[] = new MVContainer('container1', $field1);
        
        $fields[]  = new MBaseGroup('mbgDefaulter', _M('Defaulter', $module), $fields1);
        // Botao do primeiro Grupo.
        $btnGenerate = new MButton('btnGenerate', _M('Generate', $module));
        $fieldss1[] = new MHContainer('hctBtn', array($btnGenerate));
        $fields[]  = $fieldss1;

        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.periodIdvd.focus();');

  

    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnGenerate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->periodId       = $this->getFormValue('periodId');
        $data->incomeSourceId = $this->getFormValue('incomeSourceId');
        $data->startDate      = $this->getFormValue('startDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->courseId       = $this->getFormValue('courseId');
        $data->courseVersion  = $this->getFormValue('courseVersion');
        $data->generateOption = $this->getFormValue('generateOption');


        $business = $MIOLO->getBusiness($module, 'BusDefaulter');

   
        $returnData = $business->getReportDefaulterForDateIncomeSource($data);

        $filters = $returnData; 
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDefaulterReportForDateIncomeSource',$filters);
        $grdResults->setData($returnData);
        $this->addField($grdResults);



     }
}
?>
