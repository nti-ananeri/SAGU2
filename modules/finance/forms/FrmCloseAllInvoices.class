<?php
/**
 * Person agreements
 *
 * @author Giovani Murilo D. Corr�a [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Giovani Murilo D. Corr�a [gmurilo@gmail.com]
 *
 * @since
 * Class created on 17/12/2007
 *
 * \b Organization: \n
 * iSolution - Solu��es em TI \n
 * The iSolution Development Team
 *
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to show the agreements
 **/
class FrmCloseAllInvoices extends MForm
{
    public $dataValues;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Agreements', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
             $this->defineFields();
             $this->eventHandler();
        }

    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $data->personId    = MIOLO::_request('personId')    ? MIOLO::_request('personId')    : MIOLO::_request('personId', 'GET');
        $data->personName  = MIOLO::_request('personName')  ? MIOLO::_request('personName')  : MIOLO::_request('personName', 'GET');
        $data->entryDate   = MIOLO::_request('entryDate')   ? MIOLO::_request('entryDate')   : MIOLO::_request('entryDate', 'GET');
        $data->datePardon  = MIOLO::_request('datePardon')  ? MIOLO::_request('datePardon')  : MIOLO::_request('datePardon', 'GET');
        $data->operationId = MIOLO::_request('operationId') ? MIOLO::_request('operationId') : MIOLO::_request('operationId', 'GET');
        $data->comments    = MIOLO::_request('comments')    ? MIOLO::_request('comments')    : MIOLO::_request('comments', 'GET');
        $jsCode = 
<<< HERE
        function arredonda ( rnum )
        {
            return Math.round(rnum*Math.pow(10,2))/Math.pow(10,2);

        }
        function calcDiscountFromBalance()
        {
            //var nValue = parseFloat(valorNominal)-0.62;
            var returnField         = document.getElementById('parcelValue');
            var valorEntrada        = document.getElementById('inputValue').value;
            var valorDesconto       = document.getElementById('discountValue').value;
            var valorEncargos       = document.getElementById('chargesValue').value;
            var numeroParcelas      = document.getElementById('parcelsNumber').value;
            var elementsRadio       = document.getElementsByName('discountType');
            for (y=0;y< elementsRadio.length;y++)
            {
                if(elementsRadio[y].checked == true)
                {
                    var discountType = parseInt(elementsRadio[y].value);
                }
            }
            var nValue = 0;
            returnField.value = 0;
            var tabela = document.getElementsByTagName('table');
            var valorComPoliticas = 0; 
            for (x=0;x< tabela.length;x++)
            {
                if (tabela[x].id.indexOf('tbody') != -1)
                {
                    var rowElements =  tabela[x].getElementsByTagName('tr');
                    for (y=0;y < rowElements.length;y++)
                    {
                        if(rowElements[y].id.indexOf('rowGrdCloseAllInvoices') != -1)
                        {
                            var columElements = rowElements[y].getElementsByTagName('td');
                            var inputCheck = columElements[0].getElementsByTagName('input');
                            if(inputCheck.length > 0 && inputCheck[0].checked)
                            {
                                var c5 = columElements[6].getElementsByTagName('span');
                                var c7 = columElements[7].getElementsByTagName('span');
                                nValue += parseFloat(c5[0].innerHTML);
                                valorComPoliticas += parseFloat(c7[0].innerHTML);
                            }
                        }
                    }
                }
            }

            var valueWPolicies = parseFloat(valorComPoliticas);
            valueWPolicies += parseFloat(valorEncargos);
            if ( discountType == 3 )
            {
                var discountPercent = parseFloat(valorDesconto);
            }
            else
            {
                var discountPercent = (parseFloat(valorDesconto)/( valueWPolicies))*100;
            }
            var inputValue = parseFloat(valorEntrada);
            var parcelNumbers = parseInt(numeroParcelas);
            var minValue = 0;
            var maxDiscountPercent = parseFloat(100);
            var balance = 0;
            var financeFineInterest = valueWPolicies-nValue;
            if(returnField)
            {
                if ( nValue <= 0 )
                {
                    alert('N�o h� valor nominal para ser calculado.');
                    return false;
                }
                else
                {
                    if( inputValue < minValue )
                    {
                        alert('O valor da entrada n�o est� entre os valores permitidos.');
                        return false;
                    }
                    if(!inputValue)
                    {
                        inputValue = 0;
                    }
                    if ( parcelNumbers == 0 && (inputValue - valueWPolicies) != 0)
                    {
                        parcelNumbers = 1;
                    }
                    if ( valorDesconto >  maxDiscountPercent && discountType != 3)
                    {
                        alert('Esse valor de desconto n�o pode ser usado.� maior que o percentual m�ximo de desconto.');
                        return false;
                    }
                    else if ( valorDesconto > 100  && discountType != 3)
                    {
                        alert('Esse valor de desconto n�o pode ser usado.� maior que 100%.');
                        return false;

                    }
                    else
                    {
                        //Discount only for finance interest
                        if(valorDesconto > 0)
                        {
                            if(discountType == 1)
                            {
                                balance = (financeFineInterest*(valorDesconto/100));
                            }
                            //Discount for all balance
                            else if(discountType == 2)
                            {
                                balance = (valueWPolicies*(valorDesconto/100));
                            }
                            //Discount is value
                            else if(discountType == 3)
                            {
                                balance = valorDesconto;
                            }
                        }
                        document.getElementById('totalDiscountValue').value = balance;
                        balance = valueWPolicies - balance;
                        balance = balance - inputValue;
                        balance = (balance/parcelNumbers);
                        if ( balance < 0 ) 
                        {
                            balance = 0;
                            document.getElementById('totalDiscountValue').value = 0;
                            document.getElementById('discountValue').value = 0;
                            returnField.value = balance;
                            return false;
                        }
                        returnField.value = arredonda(balance);
                    }
                    
                }
            }
        }
HERE;
        $this->page->addJSCode($jsCode);

        if( strlen((string)$data->datePardon) == 0)
        {

            $data->datePardon = strlen((string) $this->getFormValue('datePardon', $this->datePardon->value) ) > 0 ? $this->getFormValue('datePardon', $this->datePardon->value) : date(MASK_DATE_PHP);
        }

        $url = $MIOLO->getActionURL( 'basic', 'html:scripts:sagu.js' );
        $this->page->scripts->add($url);

        $fields1[] = new MHiddenField('status', $data->status);

        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personIdLabel->setClass('m-caption m-caption-required');
        $personId      = new MText('personIdT', strlen((string) $data->personId ) > 0 ? $data->personId : $this->getFormValue('personId', $this->personId->value));
        $personIdH     = new MHiddenField('personId', strlen((string) $data->personId ) > 0 ? $data->personId : $this->getFormValue('personId', $this->personId->value));
        $fields1[]      = $personIdH;
        $personId->setReadOnly(true);
        $trace         = new MText('trace', '-');
        $personName    = new MText('personNameT', strlen((string)$data->personName) ? $data->personName : $this->getFormValue('personName',$data->personName));
        $personNameH   = new MHiddenField('personName', strlen((string)$data->personName) ? $data->personName : $this->getFormValue('personName',$data->personName));
        $personName->setReadOnly(true);
        $fields1[]      = new MHContainer('hctPersonName', array($personIdLabel, $personId, $trace, $personName));
        
        $fields[] = new MBaseGroup('bgMainInfo', _M('Main information', $module), array(new MVContainer('vctMain', $fields1)));
        $businessReceivableInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');

        $fields[] = new MText('textPardon', _M('Enter the date of pardon if you need calculate tax value until this date', $module). '.');

        //  Date of the pardon
        $datePardonLabel  = new MText('datePardonLabel', _M('Date of the pardon',$module).':');
        $datePardonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $datePardonLabel->setClass('m-caption m-caption-required');
        $datePardon       = new MCalendarField('datePardon', strlen((string) $this->getFormValue('datePardon', $this->datePardon->value) ) > 0 ? $this->getFormValue('datePardon', $this->datePardon->value) : date(MASK_DATE_PHP) , '', FIELD_DATE_SIZE);
        $datePardon->setJsHint(_M('Enter the date of the pardon',$module));
        $validators[]     = new MDATEDMYValidator('datePardon', _M('Date of the pardon', $module), 'required');
        
        $fields[] = new MHContainer('hctPardon', array($datePardonLabel, $datePardon));


        // Total open value
        $totalOpenValueData = SAGU::formatNumber($businessReceivableInvoice->calculateTotalPersonOpenValueDated($data->personId, $data->datePardon));
        $totalValueData     = $totalOpenValueData;

        $fields[] = new MHiddenField('totalOpenValue', $this->getFormValue('totalOpenValue', $totalOpenValueData));

        // Total value for payments
        $totalValueData = $this->getFormValue('totalValue', $totalValueData);
        if (strlen((string)$totalValueData)==0)
        {
            $totalValueData = $totalOpenValueData;
        }
        $totalValueLabel = new MText('totalValueLabel', _M('Total value', $module).':');
        $totalValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $totalValueLabel->setClass('m-caption m-caption-required');
        $totalValue      = new MTextField('totalValue', SAGU::formatNumber($totalValueData), '', FIELD_MONETARY_SIZE);
        $totalValue->setJsHint(_M('Enter the total value to distribute on invoices', $module));
        $validators[]    = new MFloatValidator('totalValue', _M('Total value', $module));

        $datePardonButton = new MButton('datePardonUpdate', _M('Update values', $module));

        if ($totalValueData>$totalOpenValueData)        
        {
            $totalValueWarning = new MLabel('<b>'._M('WARNING: The total value is greater than open value', $module).'<b>', 'red');
        }    
        
        $fields[] = new MHContainer('hctPardon', array($totalValueLabel, $totalValue, new MSpan('spanPardonButton', array($datePardonButton, $totalValueWarning))));
        $dataGrid                  = $businessReceivableInvoice->listInvoicesForPersonDefaulter($data->personId, $data->datePardon, $totalValueData, $totalOpenValueData);

        $this->dataValues          = $dataGrid;
        $grdCloseAllInvoices = $MIOLO->getUI()->getGrid($module, 'GrdCloseAllInvoices', $filters);
        $grdCloseAllInvoices->setData($dataGrid);
        
        $footer1 = new MText('footer1', _M('Total value', $module).':');
        $footer1->setWidth(150);
        $footer2 = new MText('footer2', _M('Total registers', $module).':');
        $footer2->setWidth(150);

        if ($data->total->registers > 0)
        {
            $footer[] = $footer1;
            $footer[] = new MText('footerTotal1', $data->total->value);
            $footer[] = new MSeparator('');
            $footer[] = $footer2;
            $footer[] = new MText('footerTotal2', $data->total->registers);
            $hctFooter = new MHContainer('hctFooter', $footer);
            $grdCloseAllInvoices->setFooter($hctFooter);
        }

       
        $fields[] = $grdCloseAllInvoices;

        unset ($fields1);
        // Limbo =)
        $limbo = new MHiddenField('limbo', '');
        $flds[] = $limbo;
        $businessPeriod = $MIOLO->getBusiness('academic','BusPeriod');
        if ( is_null($this->getFormValue('periodId', $data->periodId)) ||
            strlen((string)$this->getFormValue('periodId', $data->periodId)) == 0 )
        {
            $periodIdValue = CURRENT_PERIOD_ID;
        }
        else
        {
            $periodIdValue = $this->getFormValue('periodId', $data->periodId);
        }
        $periodIdLabel = new MText('periodIdLabel', _M('Period',$module).':');
        $periodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $periodIdLabel->setClass('m-caption m-caption-required');
    
        $periodId = new MSelection('periodId', $periodIdValue, null , $businessPeriod->listPeriod(), true );
        $fields1[] = new MHContainer('hctPeriod', array ($periodIdLabel, $periodId));
        $validators[] = new MRequiredValidator('periodId');
        
        $contractLabel = new MText('contractLabel', _M('Contract', $module) . ':');
        $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractId  = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), null, FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'unitId', 'unitDescription', 'accountSchemeId', 'accountSchemeDescription', 'costCenterId', 'costCenterDescription'), 'finance', 'Contract', null, array('personId' => 'personId', 'courseId' => 'courseId', 'courseVersion'=> 'courseVersion', 'unitId' => 'unitId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId', _M('Contract id', $module), 'optional');

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), null,FIELD_ID_SIZE, null, null, array('courseVersion','courseName','accountSchemeId','accountSchemeDescription','costCenterId','costCenterDescription','unitId'), $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId'), ($function == 'update') ? false:true);
        $courseId->setJsHint(_M('Select the course id', $module));
        $validators[] = new MRequiredValidator('courseId',_M('Course',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), null,FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('courseVersion',_M('Course version',$module), 'required');   
        $couseVersionDescription = new MText('couseVersionDescription',_M('Version',$module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), null, FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $hctCourse = new MHContainer('hctCourse', array($contractLabel, $contractId, $courseId, $couseVersionDescription, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        
        $fields1[]   = $hctCourse;       

        // income source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Income source',$module).':');
        $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);        
        $incomeSourceLabel->setClass('m-caption m-caption-required');
        $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId',$data->incomeSourceId) ? $this->getFormValue('incomeSourceId',$data->incomeSourceId) : AGREEMENT_INCOME_SOURCE_ID, null,FIELD_ID_SIZE, null, null,
            'incomeSourceDescription',
            'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Select the income source id', $module));
        $validators[] = new MIntegerValidator('incomeSourceId', _M('Income source',$module), 'required');
        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription), null, FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescription->setReadOnly(true);
        $hctIncomeSource = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(true);
        $fields1[]   = $hctIncomeSource;        

        // Account Scheme
        $accountSchemeLabel = new MText('accountSchemeLabel', _M('Account scheme',$module).':');
        $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $accountSchemeLabel->setClass('m-caption m-caption-required');
        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), null,FIELD_ID_SIZE, null, null,
            'accountSchemeDescription',
            'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeId->setJsHint(_M('Select the account scheme id', $module));
        $validators[] = new MRequiredValidator('accountSchemeId',_M('Account scheme',$module), 'required');        
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), null, FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setReadOnly(true);
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields1[]   = $hctAccountScheme;

        // Cost Center
        $costCenterLabel = new MText('costCenterLabel', _M('Cost center',$module).':');
        $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $costCenterLabel->setClass('m-caption m-caption-required');
        $costCenterId = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId), null,FIELD_ID_SIZE, null, null,
            'costCenterDescription',
            'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Select the cost center id', $module));
        $validators[] = new MRequiredValidator('costCenterId',_M('Cost center',$module), 'required');                
        $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
        $hctCostCenter->setShowLabel(true);
        $fields1[]   = $hctCostCenter;

        // unit
        $unitLabel = new MText('unitLabel', _M('Unit',$module).':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
		//$unitLabel->setClass('m-caption m-caption-required');

        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId',$data->unitId), '', $business->listUnit(), false, '', 2);
        $unitId->setJsHint( _M('Choose the unit',$module) );
        //$validators[] = new MIntegerValidator('unitId',_M('Unit',$module), 'required');
		$validators[] = new MIntegerValidator('unitId',_M('Unit',$module), null);

        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields1[]   = $hctUnit;
        //Operation Id
        $businessOperation = $MIOLO->getBusiness($module,'BusOperation');
        $businessDefaultOperation = $MIOLO->getBusiness($module,'BusDefaultOperations');
        $dataX->operationId = AGREEMENT_OPERATIONS;
        $dataX->operationTypeId = 'D';
        $operations = $businessDefaultOperation->getDefaultOperations();
        
        $operationLabel = new MText('operationLabel', _M('Operation id', $module). ':');
        $operationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $operationLabel->setClass('m-caption m-caption-required');


        $operationId = new MComboBox('operationId', strlen((string)$this->getFormValue('operationId', $data->operationId))>0 ? $this->getFormValue('operationId', $data->operationId) : $operations->agreementOperationToNewInvoice, '', $businessOperation->listDefaultOperations($dataX), true );
        $validators[] = new MIntegerValidator('operationId', _M('Operation id', $module), 'required');

        $operationIdX = new MHContainer('hctOperation',array($operationLabel, $operationId));

        $fields1[] = $operationIdX;
        // Policy 
        $policyLabel = new MText('policyLabel', _M('Policy', $module). ':');
        $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
        $policyLabel->setClass('m-caption m-caption-required');
        $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId',$data->policyId) ? $this->getFormValue('policyId',$data->policyId) : DEFAULT_AGREEMENT_POLICY_ID, null, FIELD_ID_SIZE, null, null,
            'policyDescription',
            'finance', 'Policy', null, null, true);
        $policyId->setJsHint(_M('Select the policy id', $module));
        $validators[] = new MIntegerValidator('policyId',_M('Policy', $module), 'required');
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, FIELD_DESCRIPTION_SIZE);
        $policyDescription->setReadOnly(true);
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $fields1[]   = $hctPolicy;
        
        // Bank Account
        $business = $MIOLO->getBusiness($module, 'BusBankAccount');
        $bankAccountLabel = new MText('bankAccountLabel', _M('Bank account',$module).':');
        $bankAccountLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankAccountLabel->setClass('m-caption m-caption-required');
        $bankAccountId = new MComboBox('bankAccountId',
                                       strlen((string)$this->getFormValue('bankAccountId',$data->bankInvoiceId)) > 0 ? $this->getFormValue('bankAccountId',$data->bankAccountId) : DEFAULT_BANK_ACCOUNT_ID,
                                       '', $business->listBankAccount());

        $bankAccountId->setJsHint(_M('Bank account id', $module).':');
		$bankAccountId->setAutoPostBack(true);
        $validators[] = new MIntegerValidator('bankAccountId', _M('Bank account',$module), 'required');
        $hctBankAccount = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId));
        $hctBankAccount->setShowLabel(true);
        $fields1[]   = $hctBankAccount;

        //Bank Contract 
		$businessBankAccountContract = $MIOLO->getBusiness('finance', 'BusBankAccountContract');
		$dataBankAccountContract     = $businessBankAccountContract->listBankAccountContract(strlen((string)$this->getFormValue('bankAccountId',$data->bankInvoiceId)) > 0 ? $this->getFormValue('bankAccountId',$data->bankAccountId) : DEFAULT_BANK_ACCOUNT_ID);
		$bankContractIdLabel  = new MText('bankContractIdLabel', _M('Bank contract', 'finance').':');
		$bankContractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
		$bankContractIdLabel->setClass('m-caption m-caption-required');
        $bankContractId       = new Mselection('bankContractId', strlen((string) $this->getFormValue('bankContractId', $data->bankContractId) ) > 0 ? $this->getFormValue('bankContractId', $data->bankContractId) : DEFAULT_BANK_CONTRACT_ID , '', $dataBankAccountContract, false);

        $hctBankAccountContract      = new MHContainer('hctBankAccountContract', array($bankContractIdLabel, $bankContractId));
        $hctBankAccountContract->setShowLabel(true);

        $fields1[]                 = $hctBankAccountContract;
        $validators[] = new MIntegerValidator('bankContractId', _M('Bank contract',$module), 'required');

        // comments 
        $commentsLabel = new MText('commentsLabel', _M('Comments', $module).':');
        $commentsLabel->setWidth(FIELD_CONTAINER_SIZE);
        $commentsData = stripslashes(strlen((string)$this->getFormValue('comments', $data->comments) ) > 0 ? $this->getFormValue('comments', $data->comments) : _M("Entry generated by process 'Close all invoices' in assorted queries.", 'finance' ));
        $comments      = new MMultiLineField('comments', $commentsData, '', 80, 4, 80);
        $fields1[]      = new MHContainer('hctComments', array($commentsLabel, $comments));

        $messageInvoiceLabel   = new MText('messageInvoiceLabel', _M('Invoice message', $module).':');
		$messageInvoiceLabel->setWidth(FIELD_CONTAINER_SIZE);
		$messageInvoiceInput        = new MTextField('messageInvoiceInput', $this->getFormValue('messageInvoiceInput',$data->messageInvoiceInput), '', FIELD_DESCRIPTION_SIZE);
		$fields1[]      = new MHContainer('hctMessageInvoiceInput', array($messageInvoiceLabel, $messageInvoiceInput));
 
        $inputValueLabel = new MText('inputValueLabel', _M('Input value', $module).':');
        $inputValueLabel->setWidth(FIELD_CONTAINER_SIZE);
        $inputValueLabel->setClass('m-caption m-caption-required');
        $inputValue      = new MTextField('inputValue', SAGU::formatNumber($this->getFormValue('inputValue',$data->inputValue)), '', FIELD_MONETARY_SIZE);
        $inputValue->setJsHint(_M('Enter the input value.', $module));
        $inputValue->addAttribute('onBlur','calcDiscountFromBalance()');
        $validators[]    = new MFloatValidator('inputValue', _M('Input value', $module));

		$fields1[] = new MHContainer('hctInputValue', array($inputValueLabel, $inputValue));

        $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Parcels number', $module).':');
        $parcelsNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $parcelsNumberLabel->setClass('m-caption m-caption-required');
        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), '', FIELD_ID_SIZE);
        $parcelsNumber->setJsHint(_M('Enter the number of parcels to be create', $module));
        $parcelsNumber->addAttribute('onBlur','calcDiscountFromBalance()');
        $validators[] = new MIntegerValidator('parcelsNumber', _M('Parcels number', $module), 'required');
        $fields1[] = new MHContainer('hctParcelsNumber', array($parcelsNumberLabel, $parcelsNumber));

/*        // Payment type
        $businessSpecies = $MIOLO->getBusiness($module,'BusSpecies');
        $pType   = $businessSpecies->listSpecies();
		$paymentTypeLabel = new MText('paymentType', _M('Payment type', $module).':');
        $paymentTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $paymentTypeLabel->setClass('m-caption m-caption-required');
        $paymentType = new MSelection('paymentType', $this->getFormValue('paymentType', $data->paymentType), '', $pType, false);
        $paymentType->setJsHint(_M('Enter the payment type', $module));
		$fields1[] = new MHContainer('hctPaymentType', array($paymentTypeLabel, $paymentType));
*/
        $a = 1;
		if($a == 1)
		{
			$discountTypeLabel = new MText('discountTypeLabel', _M('Tipo do desconto',$module).':');
            $discountTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
            $optCharges   = new MOption('opt1', '1', _M('Percentual dos Encargos', $module), true); 
            $optTotalValue = new MOption('opt2', '2', _M('Percentual', $module), false); 
            $optValue = new MOption('opt3', '3', _M('Valor', $module), false); 
            $optCharges->addAttribute('onClick','calcDiscountFromBalance()');
            $optTotalValue->addAttribute('onClick','calcDiscountFromBalance()');
            $optValue->addAttribute('onClick','calcDiscountFromBalance()');
            
            $discountTypeList  = array(
                                        $optCharges,
                                        $optTotalValue,
                                        $optValue
                                      );
            $discountType      = new MRadioButtonGroup('discountType', '',  $discountTypeList, $this->getFormValue('discountType',$data->discountType) ? $this->getFormValue('discountType',$data->discountType) : 1, null, 'horizontal');
            $discountType->SetShowLabel(false);
            $fields1[] = new MHContainer('hctDiscountType',array($discountTypeLabel,$discountType));
            
            $discountValueLabel = new MText('discountValueLabel', _M('Discount', $module).':');
	        $discountValueLabel->setWidth(FIELD_CONTAINER_SIZE);
		    $discountValueLabel->setClass('m-caption m-caption-required');
			$discountValue      = new MTextField('discountValue', SAGU::formatNumber($discountValueData), '', FIELD_MONETARY_SIZE);
	        $discountValue->setJsHint(_M('Enter the value of discount percentual', $module));
            $discountValue->addAttribute('onBlur','calcDiscountFromBalance()');
            $validators[]    = new MFloatValidator('discountValue', _M('Discount', $module));
			$fields1[] = new MHContainer('hctDiscountValue', array($discountValueLabel, $discountValue));

   			$chargesValueLabel = new MText('chargesValueLabel', _M('Charges', $module).':');
	        $chargesValueLabel->setWidth(FIELD_CONTAINER_SIZE);
		    $chargesValueLabel->setClass('m-caption m-caption-required');
			$chargesValue      = new MTextField('chargesValue', SAGU::formatNumber($this->getFormValue('chargesValue', 0 )), '', FIELD_MONETARY_SIZE);
	        $chargesValue->setJsHint(_M('Enter the value of charges percentual', $module));
            $validators[]    = new MFloatValidator('chargesValue', _M('charges', $module));
			$fields1[] = new MHContainer('hctchargesValue', array($chargesValueLabel, $chargesValue));
		}
        else
        {
            $fields1[] = new MHiddenField('discountValue',30);
        }
        // Maturity Date
        $maturityDateLabel = new MText('maturityDateLabel', _M('Maturity date suggested', $module).':');
        $maturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDateInput = new MCalendarField('maturityDateInput', $this->getFormValue('maturityDateInput',$data->maturityDateInput), '', FIELD_DATE_SIZE);
        $maturityDateInput->setJsHint(_M('Enter the initial maturity date',$module));
        $validators[] = new MDATEDMYValidator('maturityDateInput',_M('Maturity date suggested',$module),'required');
        $hctMaturityDate   = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDateInput));
        $fields1[]             = $hctMaturityDate;

        $parcelLabel = new MText('parcelLabel', _M('Parcel value',$module).':');
        $parcelLabel->setWidth(FIELD_CONTAINER_SIZE);
        $parcelValue = new MTextField('parcelValue', '', '', FIELD_MONETARY_SIZE);
        $parcelValue->setReadOnly(true);
        $parcelButton = new MButton('parcelButton',_M('Calculate',$module),'calcDiscountFromBalance()');
        
        $btnIncomeForecast   = new MButton('btnIncomeForecast', _M('Edit parcels', $module), 'callIncomeForecastFields();');

        $fields1[] = new MHContainer('hctParcelValue',array($parcelLabel, $parcelValue, new MSpan('spanPardonButton', array($parcelButton, $btnIncomeForecast))));
        //Div with entrys
        $divContent = new MDiv('divContent', null, null);
        $divContent->setWidth('98%');
        $fields1[] = $divContent;


	    $vctMain = new MVContainer('vctMain', $fields1);
        $vctMain->setWidth('100%');
        $fields[] = new MBaseGroup('bgAgreement', _M('Agreements', $module), array($vctMain));
        $sep1 = new MSeparator('<hr>');
        $sep1->setWidth('99%');
        $fields[] = $sep1;
        
        $fieldPerson = new MText('personName', _M('Close all invoices for @1', $module, $data->personName));
        $field       = new MDiv('divOptions', $fieldPerson, null, 'align="center"');
        $field->setWidth('100%');
        $fields[]    = $field;

        $btnCloseX =  new MButton( 'btnCloseX', _M('Execute agreement', $module),'document.getElementById(\'btnCloseSelectedInvoices\').click();', false);
//        $btnAgreementPrint =  new MButton( 'btnAgreementTerm', _M('Agreement Term', $module),'document.getElementById(\'btnPrintAgreementTerm\').click();', false);

        $buttonClose = new MButton('btnCloseAllInvoicesClosePositionDown', _M('Close window', $module), 'javascript:closeAndReload()');
	    $fields[] = new MDiv('closeDown', array($btnCloseX,$buttonClose), null, 'align="center"');
	    $fields[] = new MSeparator('');
        $fields[] = new MHiddenField('totalDiscountValue',$this->getFormValue('totalDiscountValue',$data->totalDiscountValue));

        if ($validators)
        {
            $this->setValidators($validators);
        }
//        $btnCloseX
        $this->setFields($fields);
        $MIOLO->getRequiredJS4Ajax();
        // Ajax calls
        $this->page->addScript('x/x_core.js');
        $this->page->addScript('cpaint/cpaint.inc.js');
        $this->page->addScript('m_lookup_ajax.js');
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());

        $code = '
            function callIncomeForecastFields() 
            {
                
                if (( xGetElementById(\'divContent\').innerHTML.length > 10 ))
                {
                    xGetElementById(\'divContent\').innerHTML = \'\';
                }
                else if ((xGetElementById(\'parcelButton\').value.length>0))
                {
                    if ((xGetElementById(\'parcelButton\').value<=0))
                    {
                        alert(\''._M('The number of parcels must be greater than 0', $module).'\');
                    }
                    else
                    {
                        xGetElementById(\'divContent\').style.display = \'\';
                        //xGetElementById(\'btnIncomeForecast\').style.display = \'none\';
                        var args = new Array(
								xGetElementById(\'parcelsNumber\').value, 
								xGetElementById(\'parcelValue\').value, 
								xGetElementById(\'maturityDateInput\').value, 
								xGetElementById(\'comments\').value,
                                xGetElementById(\'inputValue\').value,
                                xGetElementById(\'messageInvoiceInput\').value);
                        xGetElementById(\'divContent\').innerHTML = \'Loading...<img src="/images/loading.gif"/>\';
                        cpaint_call("' . $url . '", "POST", "ajax_btnIncomeForecast", args, returnIncomeForecastFields, "TEXT");
                    }
                }
                else
                {
                    alert(\''._M('Please, select a number of parcels and number of entries to continue', $module).'\');
                }
            } 

            function returnIncomeForecastFields(result) 
            {
                xGetElementById(\'divContent\').innerHTML = result;
                MIOLO_parseAjaxJavascript(result);
                elX = xGetElementById(\'divContent\');
                elX = elX.getElementsByTagName(\'div\');
                for (x=0;x< elX.length; x++)
                {
                    if (elX[x].className == \'m-form-box\')
                    {
                        elX[x].style.display = \'none\';
                    }
                    else if(elX[x].id == \'m_vContainer\')
                    {
                    }
                }
            }
        ';
        $this->page->AddJsCode($code);
        // End ajax calls
    }

    /**
     *
     * Call AJAX data generation
     *
     * @param: No parameters needed but $go for MIOLO function is needed... =/
     * 
     * @return: MIOLO call function, no return
     *
     */ 
    function ajax_btnIncomeForecast($go)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $args = explode(',', $go[0]);
        
        // Parse values to a little object
        $data->parcelsNumber	= $args[0];
        $data->parcelValue		= SAGU::formatNumber($args[1]);
        $data->maturityDate		= $args[2];
        $data->comments			= $args[3];
        $data->inputValue       = $args[4];
        $data->messageInvoice   = $args[5];
        //$obsInfo = new MText('obsInfo', '<b>'._M('Attention', $module).':</b> '._M('If the field operation of entries do not filled, that entry is not registered', $module), 'red');
        
        //$mainFields[] = new MDiv('obsDiv', $obsInfo, null, 'align="center"');
        // Generate main loop containing the number of parcels
        for ($x=1; $x<=$data->parcelsNumber; $x++)
        {
            // Invoice Maturity date
            $maturityDateLabel = new MText('maturityDateLabel'.$x, _M('Maturity date', $module).':');
            $maturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $maturityDate      = new MCalendarField('maturityDate['.$x.']', $this->getFormValue('maturityDate['.$x.']') ? $this->getFormValue('maturityDate['.$x.']') : SAGU::addIntervalInDate($data->maturityDate, 'm', (((float)$data->inputValue > 0 ) ? $x : $x-1)), '', FIELD_DATE_SIZE);
            $field[] = new MHContainer('hctMaturityDate'.$x, array($maturityDateLabel, $maturityDate));
            
            // entryDate
            $entryDateLabel = new MText('entryDateLabel'.$x, _M('Entry date', $module).':');
            $entryDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $entryDate      = new MCalendarField('entryDate['.$x.']', date(MASK_DATE_PHP), '', FIELD_DATE_SIZE);
            $field[]        = new MHContainer('hctEntryDate'.$x, array($entryDateLabel, $entryDate));
                
            // Value
            $parcelLabel   = new MText('parcelLabel'.$x, _M('Value', $module).':');
            $parcelLabel->setWidth(FIELD_CONTAINER_SIZE);
            $parcelValue        = new MTextField('parcelValue['.$x.']', ((strlen((string)$this->getFormValue('parcelValue['.$x.']'))) == 0) ? $data->parcelValue : $this->getFormValue('parcelValue['.$x.']'), '', FIELD_MONETARY_SIZE);
            $validators[] = new MFloatValidator('parcelValue['.$x.']', _M('Value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
            $field[]      = new MHContainer('hctValue'.$x, array($parcelLabel, $parcelValue));
            
            // Comments
            $commentsLabel  = new MText('commentsLabel'.$x, _M('Comments', $module).':');
            $commentsLabel->setWidth(FIELD_CONTAINER_SIZE);
            $comments       = new MMultiLineField('comments['.$x.']', ((strlen((string)$this->getFormValue('comments'.$x))) == 0) ? $data->comments : $this->getFormValue('comments'.$x), '', 60, 2, 60);
            $field[]        = new MHContainer('hctComments'.$x, array($commentsLabel, $comments));    
            $entryName      = new MText('entryName'.$x, '', 'red');
            
            //Message Invoice
            $messageInvoiceLabel   = new MText('messageInvoiceLabel'.$x, _M('Invoice message', $module).':');
	    	$messageInvoiceLabel->setWidth(FIELD_CONTAINER_SIZE);
	    	$messageInvoice        = new MTextField('messageInvoice['.$x.']', $this->getFormValue('messageInvoiceInput',$data->messageInvoice), '', FIELD_DESCRIPTION_SIZE);
		    $field[]      = new MHContainer('hctMessageInvoice'.$x, array($messageInvoiceLabel, $messageInvoice));
 
            // Group data                
            $vCont          = new MVContainer('vContEntry'.$x, $field);
            $vPos[]         = $vCont;
            $bgEntry        = new MBaseGroup('bgrEntry'.$x, $entryName->generate(), $vPos, 'none', 'none');
            $bgEntry->addStyle('border-top', 'medium solid yellow');
            $fieldEntries[] = $bgEntry;
            unset($field);
            unset($vPos);
            $entriesInvoice = new MVContainer('entriesInvoice'.$x, $fieldEntries, null);
            $entriesInvoice->setWidth('98%');
            
            $fields[] = $entriesInvoice;
            unset($fieldEntries);
            
            // Group info
            $parcelName   = new MText('textInvoice'.$x, '<b>'._M('Invoice', $module).' '.$x.'</b>', 'blue');
            $bgInvoice    = new MBaseGroup('bgrParcel'.$x, $parcelName->generate(), $fields);
            $bgInvoice->setWidth('98%');
            $mainFields[] = $bgInvoice;
            unset($fields);
        }
        $field = new MVContainer('vContainer', $mainFields);
        $this->setShowPostButton(false);
        $this->manager->getTheme()->setContent($field);
    }
                
    public function btnPrintInvoices_click($sender = NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $filters->agreementId = MIOLO::_request('agreementId');
        
        if( strlen ( $filters->agreementId ) > 0 )
        {
            $busAgreementTerm = $MIOLO->getBusiness('finance', 'BusAgreementTerm');
            $invoices = $busAgreementTerm->getInvoices($filters);
            if(count($invoices) > 0 )
            {
                foreach($invoices as $item => $data)
                {
                    if( $data->invoiceType == 'O' && (float)$data->valorGerado > (float)MINIMAL_VALUE_TO_PRINT_INVOICE )
                    {
                        $data2->invoiceId[] = $data->invoiceId;
                    }
                }
                $filtros->invoiceId = $data2;
                $filters->invoices = $filtros;
                $filters->printLeftHanded = DB_FALSE;
                if ( count($filtros->invoiceId) > 0)
                {
                    $RptPrintInvoice = 'RptPrintInvoicesInLot';
                    $MIOLO->getClass($module, $RptPrintInvoice);
                    $report = new $RptPrintInvoice($filters);
                    return;
                }
            }
        }
        $msg  = _M('No invoices found for agreement',$module);
        $vars['personId'] = $data->personId; 
        $vars['personName'] = $data->personName;
        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
        $caption = _M('Error',$module);
        $MIOLO->error( $msg, $goto, $caption );
    }
    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnSave_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $execute = MIOLO::_request('execute');
        $agreementId = MIOLO::_request('agreementId');
        if($execute == true)
        {
            $msg = MSG_RECORD_UPDATED;
            unset($fields);
            $fields[] = new MText('InformationLabel', $msg);
            $fields[] = new MLabel('');
            $flds[] = new MButton('btnPersonIformationSaved', _M('Close window', $module), 'javascript:closeAndReload()');
            $printReport = $MIOLO->getActionURL($module, $action, null, array ('agreementId' => $agreementId, 'event' => 'btnAgreementTerm_click') );
            $btnAgreementTerm = new MButton('btnAgreementTerm', _M('Agreement term', $module), $printReport);
            $btnAgreementTerm->setTarget('_blank');
            $flds[] = $btnAgreementTerm;
            $printInvoices = $MIOLO->getActionURL($module, $action, null, array ('agreementId' => $agreementId, 'event' => 'btnPrintInvoices_click') );
            $btnPrintInvoices = new MButton('btnPrintInvoices', _M('Print invoice', $module).'s', $printInvoices);
            $btnPrintInvoices->setTarget('_blank');
            $flds[] = $btnPrintInvoices;
            $fields[] = new MHContainer('hctButtons', $flds);
            $this->setFields($fields);
            $this->setShowPostButton(false);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $vars['personId'] = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    public function btnAgreementTerm_click($event = null )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $filters->agreementId       = MIOLO::_request('agreementId');
		$MIOLO->getClass('finance','RptAgreementTerm');
		$RptAgreementTerm = new RptAgreementTerm($filters);
    }
}

?>
