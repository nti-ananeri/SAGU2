<?php

/**
 * Default operations form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmDefaultOperations extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array('update', '')) )
        {
            $business = $MIOLO->getBusiness($module, 'BusDefaultOperations');
            $data     = $business->getDefaultOperations();
            if (is_object($data))
            {
                
                $function = 'update';
                $fields[] = new MHiddenField('function', $function );

            }
        }

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action, null));

        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        $fields[] = $toolBar;
         
        $fields[] = new MHiddenField('limbo', '');
        $fields[] = new MHiddenField('debit', 'D');
        $fields[] = new MHiddenField('credit', 'C');

        // Add curricularComponentOperation
        $addCurricularComponentOperationName = new MText('addCurricularComponentName', _M('Add curricular component operation', $module).':');
        $addCurricularComponentOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $addCurricularComponentOperationName->setClass('m-caption m-caption-required');

        $addCurricularComponentOperation = new MLookupTextField('addCurricularComponentOperation', $this->getFormValue('addCurricularComponentOperation',$data->addCurricularComponentOperation), '', FIELD_ID_SIZE, null, null, 'addCurricularComponentOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $addCurricularComponentOperation->setJsHint(_M('Enter the add curricular component operation', $module));
        $validators[] = new MIntegerValidator('addCurricularComponentOperation', _M('Add curricular component operation', $module), 'required');

        $addCurricularComponentOperationDescription = new MTextField('addCurricularComponentOperationDescription', $this->getFormValue('addCurricularComponentOperationDescription', $data->addCurricularComponentOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $addCurricularComponentOperationDescription->setReadOnly(true);
        $accoContainer = new MHContainer('mhAddCurricularComponentOperation', array($addCurricularComponentOperationName, $addCurricularComponentOperation, $addCurricularComponentOperationDescription));
        $fields[]      = $accoContainer;
        
        // Cancel curricularComponentOperation
        $cancelCurricularComponentOperationName = new MText('cancelCurricularComponentOperationName', _M('Cancel curricular component operation', $module).':');
        $cancelCurricularComponentOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $cancelCurricularComponentOperationName->setClass('m-caption m-caption-required');

        $cancelCurricularComponentOperation = new MLookupTextField('cancelCurricularComponentOperation', $this->getFormValue('cancelCurricularComponentOperation',$data->cancelCurricularComponentOperation), '', FIELD_ID_SIZE, null, null, 'cancelCurricularComponentOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $cancelCurricularComponentOperation->setJsHint(_M('Enter the cancel curricular component operation',$module));
        $validators[] = new MIntegerValidator('cancelCurricularComponentOperation', _M('Cancel curricular component operation', $module), 'required');

        $cancelCurricularComponentOperationDescription = new MTextField('cancelCurricularComponentOperationDescription', $this->getFormValue('cancelCurricularComponentOperartionDescription', $data->cancelCurricularComponentDescription), '', FIELD_DESCRIPTION_SIZE);
        $cancelCurricularComponentOperationDescription->setReadOnly(true);
        $ccco = new MHContainer('mhCancelCurricularComponentOperation', array($cancelCurricularComponentOperationName, $cancelCurricularComponentOperation, $cancelCurricularComponentOperationDescription));
        $fields[]     = $ccco;

        // Protocol operation
        $protocolOperationName = new MText('protocolOperationName', _M('Protocol operation', $module).':');
        $protocolOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $protocolOperation = new MLookupTextField('protocolOperation', $this->getFormValue('protocolOperation',$data->protocolOperation), '', FIELD_ID_SIZE, null, null, 'protocolOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $protocolOperation->setJsHint(_M('Enter the responsible code',$module));
        $protocolOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('protocolOperation', _M('Protocol operation', $module), 'required');
        $protocolOperationDescription = new MTextField('protocolOperationDescription', $this->getFormValue('protocolOperationDescription', $data->protocolOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $protocolOperationDescription->setReadOnly(true);
        $cpo = new MHContainer('mhProtocolOperation', array($protocolOperationName, $protocolOperation, $protocolOperationDescription));
        $fields[]          = $cpo;

        // Interest operation
        $interestOperationName = new MText('interestOperationName', _M('Interest operation', $module).':');
        $interestOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $interestOperation = new MLookupTextField('interestOperation', $this->getFormValue('interestOperation',$data->interestOperation), '', FIELD_ID_SIZE, null, null, 'interestOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $interestOperation->setJsHint(_M('Enter the interest operation description',$module));
        $interestOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('interestOperation', _M('Interest operation', $module), 'required');
        $interestOperationDescription = new MTextField('interestOperationDescription', $this->getFormValue('interestOperationDescription', $data->interestOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $interestOperationDescription->setReadOnly(true);
        $cio = new MHContainer('mhInterestOperation', array($interestOperationName, $interestOperation, $interestOperationDescription));
        $fields[]          = $cio;

        // Discount operation
        $discountOperationName = new MText('discountOperationName', _M('Discount operation', $module).':');
        $discountOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $discountOperation = new MLookupTextField('discountOperation', $this->getFormValue('discountOperation',$data->discountOperation), '', FIELD_ID_SIZE, null, null, 'discountOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $discountOperation->setJsHint(_M('Enter the discount operation description',$module));
        $discountOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('discountOperation', _M('Discount operation', $module), 'required');
        $discountOperationDescription = new MTextField('discountOperationDescription', $this->getFormValue('discountOperationDescription', $data->discountOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $discountOperationDescription->setReadOnly(true);
        $cdo = new MHContainer('mhDiscountOperation', array($discountOperationName, $discountOperation, $discountOperationDescription));
        $fields[]     = $cdo;

        // Library fine operation
        $libraryFineOperationName = new MText('libraryFineOperationName', _M('Library fine operation', $module).':');
        $libraryFineOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $libraryFineOperation = new MLookupTextField('libraryFineOperation', $this->getFormValue('libraryFineOperation',$data->libraryFineOperation), '', FIELD_ID_SIZE, null, null, 'libraryFineOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $libraryFineOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('libraryFineOperation', _M('Library fine operation', $module), 'required');
        $libraryFineOperation->setJsHint(_M('Enter the library fine operation description',$module));
        $libraryFineOperationDescription = new MTextField('libraryFineOperationDescription', $this->getFormValue('libraryFineOperationName', $data->libraryFineOperationName), '', FIELD_DESCRIPTION_SIZE);
        $libraryFineOperationDescription->setReadOnly(true);
        $clo      = new MHContainer('mhLibraryContainer', array($libraryFineOperationName, $libraryFineOperation, $libraryFineOperationDescription));
        $fields[] = $clo;

        // Close income forecast
        $closeIncomeForecastOperationName = new MText('closeIncomeForecastOperationName', _M('Close income forecast operation', $module).':');
        $closeIncomeForecastOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $closeIncomeForecastOperation = new MLookupTextField('closeIncomeForecastOperation', $this->getFormValue('closeIncomeForecastOperation',$data->closeIncomeForecastOperation), '', FIELD_ID_SIZE, null, null, 'closeIncomeForecastOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $closeIncomeForecastOperation->setJsHint(_M('Enter the close income forecast operation',$module).':');
        $closeIncomeForecastOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('closeIncomeForecastOperation', _M('Close income forecast operation', $module), 'required');
        $closeIncomeForecastOperationDescription = new MTextField('closeIncomeForecastOperationDescription', $this->getFormValue('closeIncomeForecastOperationDescription', $data->closeIncomeForecastOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $closeIncomeForecastOperationDescription->setReadOnly(true);
        $ccifo = new MHContainer('mhCloseIncomeForecast', array($closeIncomeForecastOperationName, $closeIncomeForecastOperation, $closeIncomeForecastOperationDescription));
        $fields[]          = $ccifo;
        
        // Enroll operation
        $enrollOperationName = new MText('enrollOperationName', _M('Enroll operation', $module).':');
        $enrollOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $enrollOperation = new MLookupTextField('enrollOperation', $this->getFormValue('enrollOperation',$data->enrollOperation), '', FIELD_ID_SIZE, null, null, 'enrollOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $enrollOperation->setJsHint(_M('Enter the enroll operation id',$module));
        $enrollOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('enrollOperation', _M('Enroll operation', $module), 'required');
        $enrollOperationDescription = new MTextField('enrollOperationDescription', $this->getFormValue('enrollOperationDescription', $data->enrollOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $enrollOperationDescription->setReadOnly(true);
        $ceo = new MHContainer('mhEnrollOperation', array($enrollOperationName, $enrollOperation, $enrollOperationDescription));
        $fields[]          = $ceo;

        // Payment operation
        $paymentOperationName = new MText('paymentOperationName', _M('Payment operation', $module).':');
        $paymentOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $paymentOperation  = new MLookupTextField('paymentOperation', $this->getFormValue('paymentOperation',$data->paymentOperation), '', FIELD_ID_SIZE, null, null, 'paymentOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $paymentOperation->setJsHint(_M('Enter the payment operation code',$module));
        $paymentOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('paymentOperation', _M('Payment operation', $module), 'required');
        $paymentOperationDescription = new MTextField('paymentOperationDescription', $this->getFormValue('paymentOperationDescription', $data->paymentOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $paymentOperationDescription->setReadOnly(true);
        $cpo = new MHContainer('mhPaymentOperation', array($paymentOperationName, $paymentOperation, $paymentOperationDescription));
        $fields[]          = $cpo;
        
        // Agreement operation (CREDIT)
        $agreementOperationName = new MText('agreementOperationName', _M('Agreement operation to close invoice', $module).':');
        $agreementOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $agreementOperation  = new MLookupTextField('agreementOperation', $this->getFormValue('agreementOperation',$data->agreementOperation), '', FIELD_ID_SIZE, null, null, 'agreementOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $agreementOperation->setJsHint(_M('Enter the agreement operation code',$module));
        $agreementOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('agreementOperation', _M('Agreement operation to close invoice', $module), 'required');
        $agreementOperationDescription = new MTextField('agreementOperationDescription', $this->getFormValue('agreementOperationDescription', $data->agreementOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $agreementOperationDescription->setReadOnly(true);
        $cao = new MHContainer('mhAgreementOperation', array($agreementOperationName, $agreementOperation, $agreementOperationDescription));
        $fields[]          = $cao;

        // Agreement operation (DEBIT)
        $agreementOperationToNewInvoiceName = new MText('agreementOperationToNewInvoiceName', _M('Agreement operation to new invoice', $module).':');
        $agreementOperationToNewInvoiceName->setWidth(FIELD_CONTAINER_SIZE);
        $agreementOperationToNewInvoice  = new MLookupTextField('agreementOperationToNewInvoice', $this->getFormValue('agreementOperationToNewInvoice',$data->agreementOperationToNewInvoice), '', FIELD_ID_SIZE, null, null, 'agreementOperationToNewInvoiceDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $agreementOperationToNewInvoice->setJsHint(_M('Enter the agreement operation code',$module));
        $agreementOperationToNewInvoiceName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('agreementOperationToNewInvoice', _M('Agreement operation to new invoice', $module), 'required');
        $agreementOperationToNewInvoiceDescription = new MTextField('agreementOperationToNewInvoiceDescription', $this->getFormValue('agreementOperationToNewInvoiceDescription', $data->agreementOperationToNewInvoiceDescription), '', FIELD_DESCRIPTION_SIZE);
        $agreementOperationToNewInvoiceDescription->setReadOnly(true);
        $cao = new MHContainer('mhAgreementOperationToNewInvoice', array($agreementOperationToNewInvoiceName, $agreementOperationToNewInvoice, $agreementOperationToNewInvoiceDescription));
        $fields[]          = $cao;

        // Bank Tax operation
        $bankTaxOperationName = new MText('bankTaxOperationName', _M('Bank Tax operation', $module).':');
        $bankTaxOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $bankTaxOperation  = new MLookupTextField('bankTaxOperation', $this->getFormValue('bankTaxOperation', $data->bankTaxOperation), '', FIELD_ID_SIZE, null, null, 'bankTaxOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $bankTaxOperation->setJsHint(_M('Enter the bank tax operation code', $module));
        $bankTaxOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('bankTaxOperation', _M('Bank Tax operation', $module), 'required');
        $bankTaxOperationDescription = new MTextField('bankTaxOperationDescription', $this->getFormValue('bankTaxOperationDescription', $data->bankTaxOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $bankTaxOperationDescription->setReadOnly(true);
        $fields[] = new MHContainer('mhBankTaxOperation', array($bankTaxOperationName, $bankTaxOperation, $bankTaxOperationDescription));

        // Bank Closing Tax Operation
        $bankClosingTaxOperationName = new MText('bankClosingTaxOperationName', _M('Bank closing tax operation', $module).':');
        $bankClosingTaxOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $bankClosingTaxOperation  = new MLookupTextField('bankClosingTaxOperation', $this->getFormValue('bankClosingTaxOperation', $data->bankClosingTaxOperation), '', FIELD_ID_SIZE, null, null, 'bankClosingTaxOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $bankClosingTaxOperation->setJsHint(_M('Enter the bank Closing tax operation code', $module));
        $bankClosingTaxOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('bankClosingTaxOperation', _M('Bank closing tax operation', $module), 'required');
        $bankClosingTaxOperationDescription = new MTextField('bankClosingTaxOperationDescription', $this->getFormValue('bankClosingTaxOperationDescription', $data->bankClosingTaxOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $bankClosingTaxOperationDescription->setReadOnly(true);
        $fields[] = new MHContainer('mhBankClosingTaxOperation', array($bankClosingTaxOperationName, $bankClosingTaxOperation, $bankClosingTaxOperationDescription));

        // Enroll Tax operation
        $enrollTaxOperationName = new MText('enrollTaxOperationName', _M('Enroll tax operation', $module).':');
        $enrollTaxOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $enrollTaxOperation  = new MLookupTextField('enrollTaxOperation', $this->getFormValue('enrollTaxOperation', $data->enrollTaxOperation), '', FIELD_ID_SIZE, null, null, 'enrollTaxOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $enrollTaxOperation->setJsHint(_M('Enter the enroll tax operation code', $module));
        $enrollTaxOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('enrollTaxOperation', _M('Enroll tax operation', $module), 'required');
        $enrollTaxOperationDescription = new MTextField('enrollTaxOperationDescription', $this->getFormValue('enrollTaxOperationDescription', $data->enrollTaxOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $enrollTaxOperationDescription->setReadOnly(true);
        $fields[] = new MHContainer('mhenrollTaxOperation', array($enrollTaxOperationName, $enrollTaxOperation, $enrollTaxOperationDescription));

        // Selective process Tax operation
        $selectiveProcessTaxOperationName = new MText('selectiveProcessTaxOperationName', _M('Selective process tax operation', $module).':');
        $selectiveProcessTaxOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $selectiveProcessTaxOperation  = new MLookupTextField('selectiveProcessTaxOperation', $this->getFormValue('selectiveProcessTaxOperation', $data->selectiveProcessTaxOperation), '', FIELD_ID_SIZE, null, null, 'selectiveProcessTaxOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'debit'), true);
        $selectiveProcessTaxOperation->setJsHint(_M('Enter the selective process tax operation code', $module));
        $selectiveProcessTaxOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('selectiveProcessTaxOperation', _M('Selective process tax operation', $module), 'required');
        $selectiveProcessTaxOperationDescription = new MTextField('selectiveProcessTaxOperationDescription', $this->getFormValue('selectiveProcessTaxOperationDescription', $data->selectiveProcessTaxOperationDescription), '', FIELD_DESCRIPTION_SIZE);
        $selectiveProcessTaxOperationDescription->setReadOnly(true);
        $fields[] = new MHContainer('mhselectiveProcessTaxOperation', array($selectiveProcessTaxOperationName, $selectiveProcessTaxOperation, $selectiveProcessTaxOperationDescription));

        // Library fine operation
        $libraryFineAllowanceOperationName = new MText('libraryFineAllowanceOperationName', _M('Library fine allowance operation', $module).':');
        $libraryFineAllowanceOperationName->setWidth(FIELD_CONTAINER_SIZE);
        $libraryFineAllowanceOperation = new MLookupTextField('libraryFineAllowanceOperation', $this->getFormValue('libraryFineAllowanceOperation',$data->libraryFineAllowanceOperation), '', FIELD_ID_SIZE, null, null, 'libraryFineAllowanceOperationDescription', $module, 'Operation', null, array('operationTypeId' => 'credit'), true);
        $libraryFineAllowanceOperationName->setClass('m-caption m-caption-required');
        $validators[] = new MIntegerValidator('libraryFineAllowanceOperation', _M('Library fine allowance operation', $module), 'required');
        $libraryFineAllowanceOperation->setJsHint(_M('Enter the library fine allowance operation description',$module));
        $libraryFineAllowanceOperationDescription = new MTextField('libraryFineAllowanceOperationDescription', $this->getFormValue('libraryFineAllowanceOperationName', $data->libraryFineAllowanceOperationName), '', FIELD_DESCRIPTION_SIZE);
        $libraryFineAllowanceOperationDescription->setReadOnly(true);
        $clo      = new MHContainer('mhLibraryAllowanceContainer', array($libraryFineAllowanceOperationName, $libraryFineAllowanceOperation, $libraryFineAllowanceOperationDescription));
        $fields[] = $clo;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.addCurricularComponentOperation.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusDefaultOperations');

        if ( $function == 'update' )
        {
            $ok  = $business->updateDefaultOperations($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertDefaultOperations($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('addCurricularComponentOperation'=>$data->addCurricularComponentOperation);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {

//                $MIOLO->information($msg, $goto);

                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->addCurricularComponentOperation    = $this->getFormValue('addCurricularComponentOperation');
        $data->cancelCurricularComponentOperation = $this->getFormValue('cancelCurricularComponentOperation');
        $data->protocolOperation                  = $this->getFormValue('protocolOperation');
        $data->interestOperation                  = $this->getFormValue('interestOperation');
        $data->discountOperation                  = $this->getFormValue('discountOperation');
        $data->libraryFineOperation               = $this->getFormValue('libraryFineOperation');
        $data->closeIncomeForecastOperation       = $this->getFormValue('closeIncomeForecastOperation');
        $data->enrollOperation                    = $this->getFormValue('enrollOperation');
        $data->paymentOperation                   = $this->getFormValue('paymentOperation');
        $data->agreementOperation                 = $this->getFormValue('agreementOperation');
        $data->agreementOperationToNewInvoice     = $this->getFormValue('agreementOperationToNewInvoice');
        $data->bankTaxOperation                   = $this->getFormValue('bankTaxOperation');
        $data->bankClosingTaxOperation            = $this->getFormValue('bankClosingTaxOperation');
        $data->enrollTaxOperation                 = $this->getFormValue('enrollTaxOperation');
        $data->selectiveProcessTaxOperation       = $this->getFormValue('selectiveProcessTaxOperation');
        $data->libraryFineAllowanceOperation      = $this->getFormValue('libraryFineAllowanceOperation');
        return $data;
    }
}

?>
