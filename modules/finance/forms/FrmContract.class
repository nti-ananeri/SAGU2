<?php

/**
 * Contract form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 30/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a contract
 **/
class FrmContract extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');

        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $contractId = $_GET['contractId'] ? $_GET['contractId'] : $_POST['contractId'];
            $fields[] = new MTextLabel('contractId', $contractId, _M('Contract id','academic'));
            $fields[] = new MHiddenField('contractId', $contractId);

            $business = $MIOLO->getBusiness('academic', 'BusContract');
            $data     = $business->getContract($contractId);

            $businessTurn                 = $MIOLO->getBusiness('basic', 'BusTurn');
            $businessUnit                 = $MIOLO->getBusiness('basic', 'BusUnit');

            $dataTurn                     = $businessTurn->getTurn($data->turnId);
            $dataUnit                     = $businessUnit->getUnit($data->unitId);

            $data->turnDescription        = $dataTurn->description;
            $data->unitDescription        = $dataUnit->description;
        }

        $fields[] = new MHiddenField('limbo', $limbo);

        //Person
        $personLabel  = new MText('personLabel', _M('Person','academic') . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, externalCourseIdHs, externalCourseHsName, institutionIdHs, institutionHsName, cityIdHs, cityHsName, yearHs, limbo, passive', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Enter the person code', 'academic'));
        $personId->setReadOnly(true);

        $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Person name','academic'));

        $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]     = $hctPerson;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course','academic') . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $data->courseId, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', 'academic', 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code','academic'));
        $courseId->setReadOnly(true);

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name','academic'));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));
        $turnId->setReadOnly(true);

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);

        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));
        $unitId->setReadOnly(true);

        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));

        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[]        = $hctUnit;
ectiveProc;

        $parcelsNumber = new MTextField('parcelsNumber', strlen((string) $this->getFormValue('parcelsNumber', $data->parcelsNumber) ) > 0 ?  $this->getFormValue('parcelsNumber', $data->parcelsNumber) : DEFAULT_CONTRACT_PARCELSNUMBER  , _M('Parcels number',$module), 4);
        $parcelsNumber->setJsHint(_M('Enter the parcels number', $module));
        $validators[]  = new MRegExpValidator('parcelsNumber', '', POSSIBLE_PARCELS_NUMBER, 'required');
        $fields[]      = $parcelsNumber;

        $maturityDay  = new MTextField('maturityDay', strlen((string)$this->getFormValue('maturityDay', $data->maturityDay))  > 0 ? $this->getFormValue('maturityDay', $data->maturityDay) : DEFAULT_MATURITYDAY  , _M('Maturity day',$module), 4);
        $validators[] = new MIntegerValidator('maturityDay','','required');
        $fields[]     = $maturityDay;
			
        // Policy 
        $policyLabel = new MText('policyLabel', _M('Policy', $module). ':');
	    $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
	    //$policyLabel->setClass('m-caption m-caption-required');
	    $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId', $data->policyId), null, FIELD_ID_SIZE, null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
	    $policyId->setJsHint(_M('Select the policy id', 'finance'));
	    $validators[] = new MIntegerValidator('policyId', _M('Policy', $module), null);
		
	    $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, FIELD_DESCRIPTION_SIZE);
	    $policyDescription->setReadOnly(true);
	    $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
	    $hctPolicy->setShowLabel(true);
	    $fields[]   = $hctPolicy;

        $policyLabelForEnroll = new MText('policyLabelForEnroll', _M('Policy for enroll', 'finance') . ':');
        $policyLabelForEnroll->setWidth(FIELD_CONTAINER_SIZE);        
        $policyIdForEnroll = new MLookupTextField('policyIdForEnroll', $this->getFormValue('policyIdForEnroll',$data->policyIdForEnroll), null, FIELD_LOOKUPFIELD_SIZE, null, null, 'policyDescriptionForEnroll', 'finance', 'Policy', null, null, true);
        $policyIdForEnroll->setJsHint(_M('Select the policy id', 'finance'));
         
        $policyDescriptionForEnroll = new MTextField('policyDescriptionForEnroll', $this->getFormValue('policyDescriptionForEnroll',$data->policyDescriptionForEnroll), null, FIELD_DESCRIPTION_SIZE);
        $policyDescriptionForEnroll->setReadOnly(true);
            
        $hctPolicyForEnroll = new MHContainer('hctPolicy', array($policyLabelForEnroll, $policyIdForEnroll, $policyDescriptionForEnroll));
        $hctPolicyForEnroll->setShowLabel(true);
        $fields[]  = $hctPolicyForEnroll;

        $policyLabelForReEnroll = new MText('policyLabelForReEnroll', _M('Policy for re-enroll', 'finance') . ':');
        $policyLabelForReEnroll->setWidth(FIELD_CONTAINER_SIZE);        
        $policyIdForReEnroll = new MLookupTextField('policyIdForReEnroll', $this->getFormValue('policyIdForReEnroll',$data->policyIdForReEnroll), null, FIELD_LOOKUPFIELD_SIZE, null, null, 'policyDescriptionForReEnroll', 'finance', 'Policy', null, null, true);
        $policyIdForReEnroll->setJsHint(_M('Select the policy id for re-enroll', 'finance'));
         
        $policyDescriptionForReEnroll = new MTextField('policyDescriptionForReEnroll', $this->getFormValue('policyDescriptionForReEnroll',$data->policyDescriptionForReEnroll), null, FIELD_DESCRIPTION_SIZE);
        $policyDescriptionForReEnroll->setReadOnly(true);
            
        $hctPolicyForReEnroll = new MHContainer('hctPolicy', array($policyLabelForReEnroll, $policyIdForReEnroll, $policyDescriptionForReEnroll));
        $hctPolicyForReEnroll->setShowLabel(true);
        $fields[]  = $hctPolicyForReEnroll;
        
        unset($flds);

        if ( $function == 'update' )
        {
            $fields[] = new MSeparator();
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( $validators )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.parcelsNumber.focus();');
    }

    /** 
	 * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness('academic',   'BusContract');
        $ok       = $business->updateFinanceContract($data);

        if ( $ok )
        {
            $msg = MSG_RECORD_UPDATED;
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->contractId    = $this->getFormValue('contractId');
        $data->policyId      = $this->getFormValue('policyId');
        $data->parcelsNumber = $this->getFormValue('parcelsNumber');
        $data->maturityDay   = $this->getFormValue('maturityDay');
        $data->policyIdForEnroll = $this->getFormValue('policyIdForEnroll');
        $data->policyIdForReEnroll = $this->getFormValue('policyIdForReEnroll');
        return $data;
    }

}

?>
