<?php

/**
 *
 * This file handles the connection and actions for acdcourse table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basContract table
 */
class FrmContractSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
//        $module = MIOLO::getCurrentModule();
        $module = 'academic';
        $action = MIOLO::getCurrentAction();

        $event  =  MIOLO::_request('__EVENTTARGETVALUE');
        if ( ! $event )
        {
             $event = MIOLO::_request('event');
        }


        if ( MIOLO::_request('module') != 'finance' )
        {
            $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        }
        else
        {
            $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL('finance',$action));
        }
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnNew');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        if ( MIOLO::_request('module') != 'finance' )
        {
            $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
            $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
            $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
            $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        }
        else
        {
            $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
            $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
            $url           = $MIOLO->getActionURL('finance', $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
            $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        }

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Contract', $this->home, 'contract-16x16.png', true);
        }
        //fim favoritos

        if ($event == 'btnAcademic:click')
        {

            $data->personIdS   =    MIOLO::_request('contractPersonIdS');
//            $event = 'btnSearch_click';

        }

        $fields[] = $toolBar;

        //$fields[]  = new MHiddenField('contractIdS', $this->getFormValue('contractIdS', $contractIdS));

        $contractIdS = new MTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), _M('Contract code', $module), FIELD_ID_SIZE);
        $contractIdS->setJsHint(_M('Enter the contract code', $module));
        $validators[] = new MIntegerValidator('contractIdS', '', 'optional');
        $fields[] = $contractIdS;
        
        $personLabelS = new MText('personLabelS', _M('Person',$module) . ':');
        $personLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $data->personIdS), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null,
                'personNameS', 'basic', 'PhysicalPersonStudent', null, null, true);
        $validators[] = new MIntegerValidator('personIdS', '', 'optional');

        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS', $data->personNameS), _M('Person name',$module), FIELD_DESCRIPTION_SIZE);
        $personNameS->setJsHint(_M('Enter the person name',$module));
        
        $hctPersonS = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(false);
        $fields[]  = $hctPersonS;


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        $action = MIOLO::getCurrentAction();
        // get filters values
        $filters->contractId                    = $this->contractIdS->value;
        $filters->personId                      = MIOLO::_request('personIdS');
        $filters->personName                    = $this->personNameS->value;
        $filters->event                         = 'btnSearch_click';
        //unset($this->contractIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdContractSearch', $filters);
        $business   = $MIOLO->getBusiness($module, 'BusContract');
        $data       = $business->searchContract($filters);
        $grdResults->setData($data);

        $this->addField($grdResults);
     }

}

?>
