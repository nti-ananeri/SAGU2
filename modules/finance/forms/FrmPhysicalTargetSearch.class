<?php

/**
 *
 * This file handles the connection and actions for finPhysicalTargettable
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * 
 * @since
 * Class created on 12/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finPhysicalTarget table
 */
class FrmPhysicalTargetSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Physical target', $this->home, 'physicalTarget-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        //personId
        $personLabelS = new MText('personLabelS', _M('Person',$module).':');
        $personLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $this->enrollData->personIdS), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS'), 'academic', 'PersonContract', null, array('personId' => 'personIdS'), true);
        $personIdS->setJsHint(_M('Enter the person code',$module));
        $validators[] =  new MIntegerValidator('personIdS');
        $this->page->onLoad('document.' . $this->name . '.personIdS.focus();');

        $personNameS   = new MTextField('personNameS', $this->personNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Person name',$module));

        $hctPersonS = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;

        // Contract
        $contractIdS = new MLookupTextField('contractIdS', $this->personIdS->value, _M('Contract id', $module), FIELD_ID_SIZE, null, null, array('personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS'), 'academic', 'Contract', null, array('personId' => 'personIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $validators[] =  new MIntegerValidator('contractIdS');
        $fields[] = $contractIdS;


        //course
        $courseLabelS = new MText('courseLabelS', _M('Course', $module).':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MTextField('courseIdS', $this->getFormValue('courseIdS',$this->enrollData->courseIdS), null, FIELD_ID_SIZE);
        $courseIdS->setReadOnly(true);
        $courseIdS->setJsHint(_M('Course id',$module));


        $courseVersionS   = new MTextField('courseVersionS', $this->courseVersionS->value, '', FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version', $module));

        $courseNameS   = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Course name', $module));

        $hctCourseS = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]  = $hctCourseS;

        // City
        $cityIdS = new MLookupTextField('cityIdS', $this->cityIdS->value, _M('City id',$module), FIELD_ID_SIZE, null, null, 'cityNameS, stateIdS, stateNameS, countryIdS, countryNameS, zipCodeS', 'basic', 'City', null, null, true);
        $fields[] = $cityIdS;

        $validators[] =  new MIntegerValidator('cityIdS');

        $cityNameS = new MTextField('cityNameS', $this->cityNameS->value, _M('City name', $module), FIELD_DESCRIPTION_SIZE);
        $cityNameS->setJsHint(_M('Enter the city name',$module));
        $fields[] = $cityNameS;

        $locationS = new MTextField('locationS', $this->locationS->value, _M('Location name',$module), FIELD_DESCRIPTION_SIZE);
        $locationS->setJsHint(_M('Enter the location name',$module));
        $fields[] = $locationS;

        $neighborhoodS = new MTextField('neighborhoodS', $this->neighborhoodS->value, _M('Neighborhood',$module), FIELD_DESCRIPTION_SIZE);
        $neighborhoodS->setJsHint(_M('Enter the neighborhood name',$module));
        $fields[] = $neighborhoodS;

        $nameS = new MTextField('nameS', $this->nameS->value, _M('Name', $module), FIELD_DESCRIPTION_SIZE);
        $nameS->setJsHint(_M('Enter the name', $module));
        $fields[] = $nameS;

        $fields[] = new MButton('btnSearch',_M('Search', $module));

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->contractId   = $this->contractIdS->value;
        $filters->courseId     = $this->courseIdS->value;
        $filters->personId     = $this->personIdS->value;

        $filters->cityId       = $this->cityIdS->value;
        $filters->cityName     = $this->cityNameS->value;
        $filters->location     = $this->locationS->value;
        $filters->neighborhood = $this->neighborhoodS->value;
        $filters->name         = $this->nameS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPhysicalTargetSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusPhysicalTarget');
        $data = $business->searchPhysicalTarget($filters);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.contractIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }
}
?>
