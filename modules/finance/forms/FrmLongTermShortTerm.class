<?php

/**
 * Long term short term process form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control income forecast generation
 **/
class FrmLongTermShortTerm extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Transfer long term to short term', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
             

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Long term to short term', $this->home, 'longTermShortTerm-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        // Expiration initial date
        $fields[] = new MCalendarField('expirationInitialDate', $this->getFormValue('expirationInitialDate', $data->expirationInitialDate), _M('Expiration initial date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('expirationInitialDate', '', 'required');

        // expiration end date
        $fields[] = new MCalendarField('expirationEndDate', $this->getFormValue('expirationEndDate', $data->expirationEndDate), _M('Expiration end date', $module), FIELD_DATE_SIZE);
        $validators[] = new MDATEDMYValidator('expirationEndDate', '', 'required');

        // old course
        $oldCourseIdLabel = new MText('oldCourseIdLabel', _M('Old course id',$module).':');
        $oldCourseIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $oldCourseIdLabel->setClass('m-caption m-caption-required');
        $oldCourseId = new MLookupTextField('oldCourseId', $this->getFormValue('oldCourseId', $data->oldCourseId), _M('', $module), FIELD_ID_SIZE, null, null, 'oldCourseName', 'academic', 'course', null, null, true);
        $validators[] = new MRequiredValidator('oldCourseId', _M('Old course id',$module));
        $oldCourseName = new MTextField('oldCourseName', $this->getFormValue('courseName', $data->courseName), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $oldCourseName->setReadOnly(true);
        $hctOldCourse = new MHContainer('hctOldCourse', array($oldCourseIdLabel, $oldCourseId, $oldCourseName));
        $hctOldCourse->setShowLabel(true);
        $fields[]   = $hctOldCourse;

        // new course
        $newCourseIdLabel = new MText('newCourseIdLabel', _M('New course id',$module).':');
        $newCourseIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $newCourseId = new MLookupTextField('newCourseId', $this->getFormValue('newCourseId', $data->newCourseId), _M('', $module), FIELD_ID_SIZE, null, null, 'newCourseName', 'academic', 'course', null, null, true);
        $validators[] = new MRequiredValidator('newPolicyId', _M('New course id',$module));

        $newCourseName = new MTextField('newCourseName', $this->getFormValue('newCourseName', $data->newCourseName), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $newCourseName->setReadOnly(true);
        $hctNewCourse = new MHContainer('hctNewCourse', array($newCourseIdLabel, $newCourseId, $newCourseName));
        $hctNewCourse->setShowLabel(true);
        $fields[]   = $hctNewCourse;

        // old policy
        $oldPolicyIdLabel = new MText('oldPolicyIdLabel', _M('Old policy',$module).':');
        $oldPolicyIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $oldPolicyIdLabel->setClass('m-caption m-caption-required');
        $oldPolicyId = new MLookupTextField('oldPolicyId', $this->getFormValue('oldPolicyId', $data->oldPolicyId), _M('', $module), FIELD_ID_SIZE, null, null, 'oldPolicyName', $module, 'policy', null, null, true);
        $validators[] = new MIntegerValidator('oldPolicyId', '', 'required',  _M('Old policy',$module));
        $oldPolicyName = new MTextField('oldPolicyName', $this->getFormValue('oldPolicyName', $data->oldPolicyName), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $oldPolicyName->setReadOnly(true);
        $hctOldPolicy = new MHContainer('hctOldPolicy', array($oldPolicyIdLabel, $oldPolicyId, $oldPolicyName));
        $hctOldPolicy->setShowLabel(true);
        $fields[]   = $hctOldPolicy;

        //new policy
        $newPolicyIdLabel = new MText('newPolicyIdLabel', _M('New policy',$module).':');
        $newPolicyIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $newPolicyId = new MLookupTextField('newPolicyId', $this->getFormValue('newPolicyId', $data->newPolicyId), _M('', $module), FIELD_ID_SIZE, null, null, 'newPolicyName', $module, 'policy', null, null, true);
        $validators[] = new MIntegerValidator('newPolicyId');
        $newPolicyName = new MTextField('newPolicyName', $this->getFormValue('newPolicyName', $data->newPolicyName), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $newPolicyName->setReadOnly(true);
        $hctNewPolicy = new MHContainer('hctOldPolicy', array($newPolicyIdLabel, $newPolicyId, $newPolicyName));
        $hctNewPolicy->setShowLabel(true);
        $fields[]   = $hctNewPolicy;

        // Close operation
        $closeOperationLabel = new MText('closeOperationLabel', _M('Close operation',$module).':');
        $closeOperationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $closeOperationLabel->setClass('m-caption m-caption-required');
        $closeOperationId = new MLookupTextField('closeOperationId', $this->getFormValue('closeOperationId', $data->closeOperationId), _M('', $module), FIELD_ID_SIZE, null, null, 'closeOperationDescription, closeOperationType', $module, 'operation', null, null, true);
        $validators[] = new MIntegerValidator('closeOperationId', '', 'required',_M('Close operation',$module));
        $closeOperationDescription = new MTextField('closeOperationDescription', $this->getFormValue('closeOperationDescription',
                  $data->closeOperationDescription), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $closeOperationDescription->setReadOnly(true);
        $closeOperationType = new MTextField('closeOperationType', $this->getFormValue('closeOperationType', $data->closeOperationType), _M('', $module), 2);
        $closeOperationType->setReadOnly(true);
        $hctCloseOperation = new MHContainer('hctCloseOperation', array($closeOperationLabel, $closeOperationId, $closeOperationDescription, $closeOperationType));
        $hctCloseOperation->setShowLabel(true);
        $fields[]   = $hctCloseOperation;

        // Open operation
        $openOperationLabel = new MText('openOperationLabel', _M('Open operation',$module).':');
        $openOperationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $openOperationLabel->setClass('m-caption m-caption-required');
        $openOperationId = new MLookupTextField('openOperationId', $this->getFormValue('openOperationId', $data->openOperationId), _M('', $module), FIELD_ID_SIZE, null, null, 'openOperationDescription, openOperationType', $module, 'operation', null, null, true);
        $validators[] = new MIntegerValidator('openOperationId', '', 'required',_M('Open operation',$module));
        $openOperationDescription = new MTextField('openOperationDescription', $this->getFormValue('openOperationDescription', $data->openOperationDescription), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $openOperationDescription->setReadOnly(true);
        $openOperationType = new MTextField('openOperationType', $this->getFormValue('openOperationType', $data->openOperationType), _M('', $module), 2);
        $openOperationType->setReadOnly(true);
        $hctOpenOperation = new MHContainer('hctOpenOperation', array($openOperationLabel, $openOperationId, $openOperationDescription, $openOperationType));
        $hctOpenOperation->setShowLabel(true); 
        $fields[]   = $hctOpenOperation;


        $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
        $fields[] = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('New payment place', $module), $businessBankAccount->listBankAccount(), false);

        $fields[] = new MCheckBox('closeInvoice', 'true', _M('Close invoice', $module), $this->getFormValue('closeInvoice', $data->closeInvoice), _M('Check this if you want to close old invoice and generate a new with updated information', $module));

        $fields[] = new Separator('');
        $fields[] = new Separator(_M('If you want to get a transferency for only a pupil, inform the field above.', $module));

        $personIdLabel = new MText('personIdLabel', _M('Person id',$module).':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('', $module), FIELD_ID_SIZE, null, null, 'personName', 'basic', 'physicalPerson', null, null, true);
        $validators[] = new MIntegerValidator('personId');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('', $module), FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
//        $fields[] = $personName;
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]   = $hctPerson;

        $fields[] = new Separator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data            = $this->getTypesData();
        $businessInvoice = $MIOLO->getBusiness($module, 'BusInvoice');
        $grid            = $MIOLO->getUI()->getGrid($module, 'GrdLongTermShortTerm' );
        $dataGrid        = $businessInvoice->longTermShortTermInvoice($data);
        if ( (is_array($dataGrid[0])) && ($data->closeInvoice == true) )
        {

            $businessReceivableInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');
            $dataGrid = $businessReceivableInvoice->processLongTermShortTermInvoice($dataGrid, $data);
            if (!is_array($dataGrid[0]))
            {
                $MIOLO->Information(_M('Error on update invoice information. Please, try again.'));
            }
            $grid->setNewInvoiceAction();
        }
        $grid->setData($dataGrid);
        $this->addField($grid);
    }
     
    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->expirationInitialDate     = $this->getFormValue('expirationInitialDate');
        $data->expirationEndDate         = $this->getFormValue('expirationEndDate');
        $data->oldCourseId               = $this->getFormValue('oldCourseId');
        $data->oldCourseName             = $this->getFormValue('oldCourseName');
        $data->newCourseId               = $this->getFormValue('newCourseId');
        $data->newCourseName             = $this->getFormValue('newCourseName');
        $data->oldPolicyId               = $this->getFormValue('oldPolicyId');
        $data->oldPolicyName             = $this->getFormValue('oldPolicyName');
        $data->newPolicyId               = $this->getFormValue('newPolicyId');
        $data->newPolicyName             = $this->getFormValue('newPolicyName');
        $data->closeOperationId          = $this->getFormValue('closeOperationId');
        $data->closeOperationName        = $this->getFormValue('closeOperationName');
        $data->closeOperationDescription = $this->getFormValue('closeOperationDescription');
        $data->closeOperationType        = $this->getFormValue('closeOperationType');
        $data->openOperationId           = $this->getFormValue('openOperationId');
        $data->openOperationName         = $this->getFormValue('openOperationName');
        $data->openOperationType         = $this->getFormValue('openOperationType');
        $data->bankAccount               = $this->getFormValue('bankAccountId');
        $data->closeInvoice              = $this->getFormValue('closeInvoice');
        $data->personId                  = $this->getFormValue('personId');
        $data->personName                = $this->getFormValue('personName');
        return $data;
   }
}

?>
