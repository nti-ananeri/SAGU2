<?php

/**
 * Bank account form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmBankAccount extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $bankAccountId = MIOLO::_request('bankAccountId') ? MIOLO::_request('bankAccountId') : MIOLO::_request('bankAccountId');
            $fields[]  = new MTextLabel('bankAccountId', $bankAccountId, _M('Id', $module));
            $fields[]  = new MHiddenField('bankAccountId', $bankAccountId);
            
            $business = $MIOLO->getBusiness($module,'BusBankAccount');
            $data     = $business->getBankAccount($bankAccountId);
        }

        // Payment place descritpion
        $description = new MTextField('description', $this->getFormValue('description',$data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the payment place description',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Description',$module));


        // Bank
        $bankLabel = new MText('bankLabel', _M('Bank',$module).':');
        $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId       = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_ID_SIZE, null, null, 'bankName', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Enter the bank id',$module));
        $validators[] = new MRangeValidator('bankId', _M('Bank',$module), '0', '999', 'i', 'required');
        $bankName   = new MTextField('bankName', $this->getFormValue('bankName', $data->bankName), '', FIELD_DESCRIPTION_SIZE);
        $bankName->setJsHint(_M('Bank name',$module));
        $bankName->setReadOnly(true);
        $hctBank = new MHContainer('hctBank', array( $bankLabel, $bankId, $bankName ) );
        $hctBank->setShowLabel(true);
        $fields[]  = $hctBank;

        // Branch
        $branchNumberLabel = new MText('branchNumberLabel', _M('Branch', $module) . ':');
        $branchNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $branchNumberLabel->setClass('m-caption m-caption-required');
        $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber',$data->branchNumber), '', 5);
        $validators[] = new MRangeValidator('branchNumber', _M('Branch', $module), '0', '9999', 'i', 'required');
        $branchNumber->setJsHint(_M('Enter the branch number',$module));
        $branchNumberTrace = new MText('branchNumberTrace', '-');
        $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), '', 3);
        $branchNumberDigit->setJsHint(_M('Enter the branch digit',$module));
        $validators[] = new MRangeValidator('branchNumberDigit', _M('Branch number digit', $module), 0, '99', 'i');
        $fields[] = new MHContainer('hctBranch', array($branchNumberLabel, $branchNumber, $branchNumberTrace, $branchNumberDigit));

        // Account
        $accountNumberLabel = new MText('accountNumberLabel', _M('Account number', $module) . ':');
        $accountNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $accountNumberLabel->setClass('m-caption m-caption-required');
        $accountNumber      = new MTextField('accountNumber', $this->getFormValue('accountNumber',$data->accountNumber), '', 13);
        $accountNumber->setJsHint(_M('Enter the account number', $module));
        $accountNumberTrace = new MText('accountNumberTrace', '-');
        $validators[]       = new MRangeValidator('accountNumber', _M('Account number', $module), '1', '9999999999999', 'i', 'required');
        $accountNumberDigit = new MTextField('accountNumberDigit', $this->getFormValue('accountNumberDigit', $data->accountNumberDigit), '', 3);
        $validators[]       = new MRangeValidator('accountNumberDigit', _M('Account number digit', $module), '0', 'zz', 's'); 
        $accountNumberDigit->setJsHint(_M('Enter the account number digit', $module));
        $fields[]           = new MHContainer('hctAccountNumber', array($accountNumberLabel, $accountNumber, $accountNumberTrace, $accountNumberDigit));

        // Assignor code
        $assignorCodeLabel = new MText('assignorCodeLabel', _M('Assignor code', $module).':');
        $assignorCodeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $assignorCode      = new MTextField('assignorCode', $this->getFormValue('assignorCode', $data->assignorCode), '', 20);
        $assignorCode->setJsHint(_M('Enter the assignor code for this bank, that is important for remittance and return files if you use these', $module));
        $fields[]          = new MHContainer('hctAssignorCode', array($assignorCodeLabel, $assignorCode));

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'bankAccountId'=>MIOLO::_request('bankAccountId'));

        //
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBankAccount');
        $ok = $business->deleteBankAccount($this->bankAccountId->value);

        if ( $ok )
        {
            $businessConfig           = $MIOLO->getBusiness('basic', 'BusConfig');
            $dataConfig->moduleConfig = $module;
            $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_'.$this->bankAccountId->value;
            $businessConfig->deleteConfig($dataConfig->moduleConfig, $dataConfig->parameter);

            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        /**
          * Load global defines for the finance module
          */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('finance');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBankAccount');
        
        $business->beginTransaction();

        if ( $function == 'update' )
        {
            $ok  = $business->updateBankAccount($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertBankAccount($data);
            $data->bankAccountId = $ok;

            /*if ( defined('BANK_REMITANCE_SEQUENCE_'.$data->bankAccountId) == false )
            {
                $businessConfig           = $MIOLO->getBusiness('basic', 'BusConfig');
                $dataConfig->moduleConfig = $module;
                $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_'.$data->bankAccountId;
                $dataConfig->value        = '1';
                $dataConfig->description  = 'CONFIG SEQUENCE USED TO CONTROL BANK ACCOUNT ID '.$data->bankAccountId.' FOR REMITTANCE FILES.';
                $dataConfig->type         = 'INT';
                $businessConfig->insertConfig($dataConfig);
            }*/
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $business->commit();

            $opts = array('bankAccountIdS'=>$data->bankAccountId, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBankAccount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
