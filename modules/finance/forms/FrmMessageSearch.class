<?php

/**
 *
 * This file handles the connection and actions for finMessage table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 18/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finMessage table
 */
class FrmMessageSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Message', $this->home, 'message-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10  FIELD_ID_SIZE,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        // Bank id
	    $bankLabel = new MText('bankIdLabel', _M('Bank id', $module). ':');
		$bankLabel->setWidth(FIELD_CONTAINER_SIZE);
		$bankIdS = new MLookupTextField('bankIdS', $data->bankIdS->value, '', FIELD_ID_SIZE, null, null, array('bankDescription'), $module, 'Bank', null, null, true);
		$bankIdS->setJsHint(_M('Enter the bank id', $module));
		
		$bankDescription = new MTextField('bankDescription', $this->bankDescription->value, '', FIELD_DESCRIPTION_SIZE);
		$bankDescription->setReadOnly(true);
		
		$cntBank = new MHContainer('cntBank', array($bankLabel, $bankIdS, $bankDescription));
		$fields[] = $cntBank;
		// Policy 
		$policyLabel = new MText('policyLabel', _M('Policy', $module). ':');
		$policyLabel->setWidth(FIELD_CONTAINER_SIZE);
		
		$policyIdS = new MLookupTextField('policyIdS', $this->getFormValue('policyIdS', $data->policyIdS), null, FIELD_ID_SIZE, null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
		$policyIdS->setJsHint(_M('Select the policy id', $module));
		$validators[] = new MIntegerValidator('policyIdS', _M('Policy', $module), null);
		$policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, FIELD_DESCRIPTION_SIZE);
		$policyDescription->setReadOnly(true);
		$hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyIdS, $policyDescription));
		$hctPolicy->setShowLabel(true);
		$fields[]   = $hctPolicy;

		// Protest message
		$messageProtestLabel = new MText('messageProtestLabel',_M('Protest message',$module));
		$messageProtestLabel->setWidth(FIELD_CONTAINER_SIZE);
		$messageProtestS = new MTextField('messageProtestS',$this->getFormValue('messageProtestS',$data->messageProtestS),'',FIELD_DESCRIPTION_SIZE);
		$fields[]		= new MHContainer('hctMessageProtest',array($messageProtestLabel,$messageProtestS));
		// Discount message
		$messageDiscountLabel = new MText('messageDiscountLabel',_M('Discount message',$module));
		$messageDiscountLabel->setWidth(FIELD_CONTAINER_SIZE);
		$messageDiscountS = new MTextField('messageDiscountS',$this->getFormValue('messageDiscountS',$data->messageDiscountS),'',FIELD_DESCRIPTION_SIZE);
		$fields[]		= new MHContainer('hctMessageDiscount',array($messageDiscountLabel,$messageDiscountS));
   		// Fine message
		$messageFineLabel = new MText('messageFineLabel',_M('Fine message',$module));
		$messageFineLabel->setWidth(FIELD_CONTAINER_SIZE);
		$messageFineS = new MTextField('messageFineS',$this->getFormValue('messageFineS',$data->messageFineS),'',FIELD_DESCRIPTION_SIZE);
		$fields[]		= new MHContainer('hctMessageFine',array($messageFineLabel,$messageFineS));
   		// Bank message
		$messageBankLabel = new MText('messageBankLabel',_M('Bank message',$module));
		$messageBankLabel->setWidth(FIELD_CONTAINER_SIZE);
		$messageBankS = new MTextField('messageBankS',$this->getFormValue('messageBankS',$data->messageBankS),'',FIELD_DESCRIPTION_SIZE);
		$fields[]		= new MHContainer('hctMessageBank',array($messageBankLabel,$messageBankS));

        $fields[] = new MButton('btnSearch', _M('Search', $module));

        $this->setFields($fields);

        // get filters values
        $filters->bankId			= $this->bankIdS->value;
        $filters->policyId			= $this->policyIdS->value;
		$filters->messageProtest	= $this->messageProtestS->value;
   		$filters->messageDiscount	= $this->messageDiscountS->value;
		$filters->messageFine		= $this->messageFineS->value;
		$filters->messageBank		= $this->messageBankS->value;

		$grdResults = $MIOLO->getUI()->getGrid($module,'GrdMessageSearch',$filters);
        $business = $this->manager->getBusiness($module,'BusMessage');
        $data = $business->searchMessage($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.bankIdS.focus();');

    }

}

?>
