<?php

/**
 * Defaulter form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate documents defaulters for date
 **/
class FrmDefaulterForDate extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Defaulter for date', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Defaulter for date', $this->home, 'defaulterForDate-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
        $dataPeriod = $businessPeriod->listPeriod();
       
     
        // novo Grupo  - Grupo2
        // data inicial
        $grp2StartDateLabel = new MText('grp2StartDateLabel', _M('Start date',$module).':');
        $grp2StartDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $grp2StartDate = new MCalendarField('grp2StartDate', $this->getFormValue('grp2StartDate', $data->grp2StartDate), _M('',$module), FIELD_DATE_SIZE);
        $grp2StartDate->setJsHint(_M('Enter the start date',$module));
        $validators[] = new MDATEDMYValidator('grp2StartDate');
        $hctGrp2StartDate = new MHContainer('hctGrp2StartDate', array($grp2StartDateLabel, $grp2StartDate));
        $hctGrp2StartDate->setShowLabel(true);
        $field1[] = $hctGrp2StartDate;

        // data final
        $grp2EndDateLabel = new MText('grp2EndDateLabel', _M('End date',$module).':');
        $grp2EndDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $grp2EndDate = new MCalendarField('grp2EndDate', $this->getFormValue('grp2EndDate', $data->grp2EndDate), _M('',$module), FIELD_DATE_SIZE);
        $grp2EndDate->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('grp2EndDate');
        $hctGrp2EndDate = new MHContainer('hctGrp2EndDate', array($grp2EndDateLabel, $grp2EndDate));
        $hctGrp2EndDate->setShowLabel(true);
        $field1[] = $hctGrp2EndDate;

        // MComboBox Period

        // $dataPeriod  : Dados obtidos do list do business period
        $grp2PeriodLabel = new MText('grp2PeriodLabel', _M('Period', $module).':');
        $grp2PeriodLabel->setWidth(FIELD_CONTAINER_SIZE);

//        $business = $MIOLO->getBusiness('finance','BusCollectionType');
        $grp2PeriodId = new MComboBox('grp2PeriodId', $this->grp2PeriodId->value, '', $dataPeriod, false, '', FIELD_ID_SIZE);
        $grp2PeriodId->setJsHint( _M('Choose the period',$module) );
        $grp2HctPeriod = new MHContainer('grp2HctPeriod', array($grp2PeriodLabel,$grp2PeriodId));
        $grp2HctPeriod->setShowLabel(true);
        $field1[]   = $grp2HctPeriod;


 
        // course
        $grp2CourseLabel = new MText('grp2CourseLabel', _M('Course',$module).':');
        $grp2CourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $grp2CourseLabel->setClass('m-caption m-caption-required');

        $grp2CourseId = new MLookupTextField('grp2CourseId', $this->getFormValue('courseId',$data->courseId), null,FIELD_ID_SIZE, null, null,
            array('grp2CourseVersion','grp2CourseName','','','','','grp2UnitId'),
            $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'grp2CourseId'), true);
        $grp2CourseId->setJsHint(_M('Select the course id', $module));
        $validators[] = new MRequiredValidator('grp2CourseId', _M('Course',$module));
        $grp2CourseVersion = new MTextField('grp2CourseVersion', $this->getFormValue('courseVersion',$data->courseVersion), null,FIELD_ID_SIZE);
        $grp2CouseVersionDescription = new MText('grp2CouseVersionDescription',_M('Version',$module));
        $grp2CourseName = new MTextField('grp2CourseName', $this->getFormValue('courseName',$data->courseName), null, FIELD_DESCRIPTION_SIZE);
        $grp2CourseName->setReadOnly(true);
        $grp2HctCourse = new MHContainer('grp2HctCourse', array($grp2CourseLabel, $grp2CourseId, $grp2CouseVersionDescription, $grp2CourseVersion, $grp2CourseName));
        $grp2HctCourse->setShowLabel(true);
        $field1[]   = $grp2HctCourse;

        $mType[0][0] = _M('sxw',$module);
        $mType[0][1] = DB_TRUE;
        $mType[1][0] = _M('pdf',$module);
        $mType[1][1] = DB_FALSE;


        $fileOptionLabel = new MText('fileOptionLabel', _M('File generate option',$module).':');
        $fileOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
//        $isActiveLabel->setClass('m-caption m-caption-required');
        $fileOption = $this->GetFormValue('fileOption', $data->fileOption) ? $this->GetFormValue('fileOption', $data->fileOption) : DB_TRUE;

        $fileOption = new MRadioButtonGroup('fileOption', '', $mType, $fileOption, null, 'horizontal');
        $fileOption->SetShowLabel(false);
        $hctFileOption = new MHContainer('hctFileOption', array($fileOptionLabel, $fileOption));
        $field1[]  = $hctFileOption;


        $field1[]          = new MSeparator('');

        // segundo grupo 
//        $field1[]  = $personName;
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $field1[]  = new MSeparator('');
        $fields1[] = new MVContainer('container1', $field1);
        $fields[]  = new MBaseGroup('mbgDefaulter', _M('Defaulter for date', $module), $fields1);
        // Botões do segundo Grupo.
        $btnReport = new MButton('btnReport', _M('Report', $module));
        $btnLetter = new MButton('btnLetter', _M('Letter', $module));
        $btnMessage = new MButton('btnMessage', _M('Message', $module));
        $fieldss1[] = new MHContainer('hctBtn', array($btnReport, $btnLetter, $btnMessage));
        $fields[]  = $fieldss1;

        $fields[]          = new MSeparator('');

        unset($field1);
        unset($fields1);
        unset($fieldss1);
 
        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     * GERAÇÃO DE DOCUMENTO REPORT  -- 
     */
     public function btnReport_click($sender = null)
     {
          $MIOLO  = MIOLO::getInstance();
          $module = MIOLO::getCurrentModule();
        
          $data->startDate      = $this->getFormValue('grp2StartDate');
          $data->endDate        = $this->getFormValue('grp2EndDate');
          $data->courseId       = $this->getFormValue('grp2CourseId');
          $data->courseId       = $this->getFormValue('grp2CourseId');
          $data->periodId       = $this->getFormValue('grp2PeriodId');
          $data->courseVersion  = $this->getFormValue('grp2CourseVersion');
          $data->fileOption     = $this->getFormValue('fileOption');

          set_time_limit(0);
          $business = $MIOLO->getBusiness($module, 'BusDefaulter');
          // pega dados de inadimplentes
          $returnData   = $business->getRelateDefaulterForDate($data);

  
          if ( $returnData == NULL )
          {
               $goto = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
               $caption = _M('Error', $module );
               $msg     = _M('No results for this query, try another period !', $module);
               $MIOLO->error( $msg, $goto, $caption );
          }

          $returnNumber = count($returnData) ;
          $actualDate   = SAGU::getDateNow();
//          $actualDate   = SAGU::getDateByExtense($dateNow);

          $index = 0;
          for( $option = 0 ; $option < $returnNumber; $option++) 
          {
               $data->personId = $returnData[$index][0];
               // pega título do inadimplente corrente do código.
               $invoiceData  = $business->getRelateDefaulterInvoiceForDate($data);
               // Cabeçario do documento.
               $array[$index] = array($actualDate,
                                      $invoiceData[0][0],
                                      $invoiceData[0][1],
                                      $invoiceData[0][8],
                                      $invoiceData[0][14],
                                      $invoiceData[0][15],
                                      $invoiceData[0][9],
                                      $invoiceData[0][10],
                                      $invoiceData[0][11],
                                      $invoiceData[0][12],
                                      $invoiceData[0][2],
                                      $invoiceData[0][3],
                                      $invoiceData[0][5],
                                      $invoiceData[0][6],
                                      $invoiceData[0][7],
                                      $data->startDate,
                                      $data->endDate,
                                      $data->courseId,
                                      $data->courseId,
                                      $data->periodId,
                                      $data->courseVersion);

               for( $option2 = 0 ; $option2 < count($invoiceData); $option2++)
               {          
                  $arrayTotal[$index][0]  = SAGU::calcNumber($arrayTotal[$index][0] .'+'. $invoiceData[$option2][21]);
                  $arrayS[0][$index][]    = array($invoiceData[$option2][16],$invoiceData[$option2][17], $invoiceData[$option2][18], $invoiceData[$option2][19], $invoiceData[$option2][20], $invoiceData[$option2][21]);
            
               }
               $index++;
           }
            $MIOLO->uses('/core/AgataAPI.class');

            $api = new AgataAPI;
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDate.sxw');
            $api->setDataArray($array);
            $api->setSubDataArray($arrayS);
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/defaulterLetterForDate.sxw'));

            if( $ok && $data->fileOption == DB_FALSE)
            {

                $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDate.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/defaulterLetterForDate.sxw');

            }


            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
 
                $api->fileDialog();
            }
     }
     

    /**
     * Event triggered when button search is clicked 
     */
     public function btnLetter_click($sender = null)
     {
          $MIOLO  = MIOLO::getInstance();
          $module = MIOLO::getCurrentModule();
        
          $data->startDate      = $this->getFormValue('grp2StartDate');
          $data->endDate        = $this->getFormValue('grp2EndDate');
          $data->courseId       = $this->getFormValue('grp2CourseId');
//         $courseId       = $this->getFormValue('courseId');
          $data->periodId       = $this->getFormValue('grp2PeriodId');
          $data->courseVersion  = $this->getFormValue('grp2CourseVersion');
          $data->fileOption     = $this->getFormValue('fileOption');

          set_time_limit(0);
          $business = $MIOLO->getBusiness($module, 'BusDefaulter');
          // pega dados de inadimplentes
          $returnData   = $business->getRelateDefaulterForDate($data);

  
          if ( $returnData == NULL )
          {
               $goto = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
               $caption = _M('Error', $module );
               $msg     = _M('No results for this query, try another period !', $module);
               $MIOLO->error( $msg, $goto, $caption );
          }

          $returnNumber = count($returnData) ;
          $actualDate   = SAGU::getDateNow();
          $actualDateByExtense   = SAGU::getDateByExtense($actualDate);

          $index = 0;
          for( $option = 0 ; $option < $returnNumber; $option++) 
          {
               $data->personId = $returnData[$index][0];
               // pega título do inadimplente corrente do código.
               $invoiceData  = $business->getRelateDefaulterInvoiceForDate($data);
               // Cabeçario do documento.
               $array[$index] = array($actualDateByExtense,
                                      $invoiceData[0][0],
                                      $invoiceData[0][1],
                                      $invoiceData[0][8],
                                      $invoiceData[0][14],
                                      $invoiceData[0][15],
                                      $invoiceData[0][9],
                                      $invoiceData[0][10],
                                      $invoiceData[0][11],
                                      $invoiceData[0][12],
                                      $invoiceData[0][2],
                                      $invoiceData[0][3],
                                      $actualDate, 
                                      $data->startDate,
                                      $data->endDate,
                                      $data->courseId,
                                      $data->periodId,
                                      $data->courseVersion);

               for( $option2 = 0 ; $option2 < count($invoiceData); $option2++)
               {          
                  $arrayTotal[$index][0]  = SAGU::calcNumber($arrayTotal[$index][0] .'+'. $invoiceData[$option2][21]);
                  $arrayS[0][$index][]    = array($invoiceData[$option2][16],$invoiceData[$option2][17], $invoiceData[$option2][18], $invoiceData[$option2][19], $invoiceData[$option2][20], $invoiceData[$option2][21]);
            
               }
               $index++;
           }
            $MIOLO->uses('/core/AgataAPI.class');

            $api = new AgataAPI;

            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDateBtnLetter.sxw');
            $api->setDataArray($array);
            $api->setSubDataArray($arrayS);
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/defaulterLetterForDateBtnLetter.sxw'));

            if( $ok && $data->fileOption == DB_FALSE)
            {

                $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDateBtnLetter.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/defaulterLetterForDateBtnLetter.sxw');

            }

            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                $api->fileDialog();
           }
     }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnMessage_click($sender = null)
     { 
          $MIOLO  = MIOLO::getInstance();
          $module = MIOLO::getCurrentModule();
        
          $data->startDate      = $this->getFormValue('grp2StartDate');
          $data->endDate        = $this->getFormValue('grp2EndDate');
          $data->courseId       = $this->getFormValue('grp2CourseId');
          $data->periodId       = $this->getFormValue('grp2PeriodId');
          $data->courseVersion  = $this->getFormValue('grp2CourseVersion');
          $data->fileOption     = $this->getFormValue('fileOption');

          set_time_limit(0);
          $business = $MIOLO->getBusiness($module, 'BusDefaulter');
          // pega dados de inadimplentes
          $returnData   = $business->getRelateDefaulterForDate($data);

  
          if ( $returnData == NULL )
          {
               $goto = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
               $caption = _M('Error', $module );
               $msg     = _M('No results for this query, try another period !', $module);
               $MIOLO->error( $msg, $goto, $caption );
          }

          $returnNumber = count($returnData) ;
          $actualDate   = SAGU::getDateNow();
          $actualDateByExtense   = SAGU::getDateByExtense($actualDate);

          $index = 0;
          for( $option = 0 ; $option < $returnNumber; $option++) 
          {
               $data->personId = $returnData[$index][0];
               // pega título do inadimplente corrente do código.
               $totalData  = $business->getRelateDefaulterTotalForDate($data);
               $data->contractId = $totalData[0][16];
                
               // pega data (dados) da último estado do contrato para fazer verificação do estado do contrato
               $stateData  = $business->getRelateDefaulterStateForDate($data);
               if($stateData[0][0] == 5)
               {
                    $endContract = $stateData[0][1];
               } 
               else
               {
                    $endContract = $actualDate;
               }
               // Cabeçario do documento.
               $array[$index] = array($actualDateByExtense,
                                      $totalData[0][0],
                                      $totalData[0][1],
                                      $totalData[0][8],
                                      $totalData[0][14],
                                      $totalData[0][15],
                                      $totalData[0][9],
                                      $totalData[0][10],
                                      $totalData[0][11],
                                      $totalData[0][12],
                                      $totalData[0][2],
                                      $totalData[0][3],
                                      $totalData[0][16], 
                                      $endContract);

               $index++;
           }
            $MIOLO->uses('/core/AgataAPI.class');
            $api = new AgataAPI;

            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDateBtnMessage.sxw');
            $api->setDataArray($array);
//            $api->setSubDataArray();
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/defaulterLetterForDateBtnMessage.sxw'));
            if( $ok && $data->fileOption == DB_FALSE)
            {

                $api->setOutputPath(TEMP_DIR . '/defaulterLetterForDateBtnMessage.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/defaulterLetterForDateBtnMessage.sxw');

            }

            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                $api->fileDialog();
            }
     }
}
?>
