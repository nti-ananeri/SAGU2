<?php

/**
 *
 * Form for FinBankReturnConfig
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/10/2007
 *
 * \b Organization: \n
 * iSolution - Soluções de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Soluções de Internet \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form configure bank return
 */
class  FrmBankReturnConfig extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
		$function = MIOLO::_request('function');
		
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Bank return config', $this->home, 'bankAccount-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
		$business = $this->manager->getBusiness($module,'BusBankReturnConfig');
        if ( in_array($function,array('update','delete')) )
        {
            $bankReturnId = MIOLO::_request('bankReturnConfigId') ? MIOLO::_request('bankReturnConfigId') : MIOLO::_request('bankReturnConfigId','GET');
            $data     = $business->getBankReturnConfig($bankReturnConfigId);

            $fields[]  = new MTextLabel('bankReturnConfigIdLabel', $data->bankReturnConfigId, _M('Id', $module));
            $fields[]  = new MHiddenField('bankReturnConfigId', $data->bankReturnConfigId);
            $businessReturn = $this->manager->getBusiness($module,'BusBankReturn');
            
            /*$fields[]  = new MTextLabel('bankReturnIdLabel', $data->bankReturnId, _M('Id', $module));
            $fields[]  = new MHiddenField('bankReturnId', $data->bankReturnId);*/
            $businessReturn = $this->manager->getBusiness($module,'BusBankReturn');

            $datax = $businessReturn->getBankReturn($data->bankReturnId);
            $fields[]  = new MTextLabel('bankReturnId', $datax->description, _M('Description', $module));        
            $businessTypeField = $this->manager->getBusiness($module,'BusBankReturnTypeField');
            $datax =  $businessTypeField->getBankReturnTypeField($data->typeFieldReturnId);
            $fields[]  = new MTextLabel('typeFieldReturnLabel', $datax->description, _M('Return', $module));
            $fields[]  = new MHiddenField('typeFieldReturnId', $data->typeFieldReturnId);
         }
         else 
         {		
			//Bank Return
	        $bankReturnId  = new MComboBox('bankReturnId',  '', _M('Return',$module), $business->listBankReturn());
	        $fields[] = $bankReturnId;
	        $validators[] = new MRequiredValidator('bankReturnId');

	        //Line Type
	        $lineTypeId  = new MComboBox('lineTypeId',  $this->getFormValue('lineTypeId',$data->lineTypeId), _M('Line type',$module), $business->listBankReturnLineType());
	        $fields[] = $lineTypeId;
			$validators[] = new MRequiredValidator('lineTypeId');
			 
			//Type Field
	        $typeFieldReturnId  = new MComboBox('typeFieldReturnId',  '', _M('Field type',$module), $business->listBankReturnTypeField());
	        $fields[] = $typeFieldReturnId;
	        $validators[] = new MRequiredValidator('typeFieldReturnId');
	        
         }
        //Position
        
        $position      = new MTextField('position', isset($data->position) ? $data->position : $this->getFormValue('position',$data->position),  _M('Position',$module), FIELD_ID_SIZE);
        $fields[] = $position;			
		$validators[] = new MRequiredValidator('position');
        //Size
        $size      = new MTextField('size', isset($data->size) ? $data->size : $this->getFormValue('size',$data->size),  _M('Size',$module), FIELD_ID_SIZE);
        $fields[] = $size;			
        $validators[] = new MRequiredValidator('size');
		//Segment
        $segment   = new MTextField('segment',isset($data->segment) ? $data->segment :  $this->getFormValue('segment',$data->segment),  _M('Segment',$module), FIELD_ID_SIZE);
        $fields[] = $segment;
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }        	        
        $fields[] = new Separator('');        
        //$fields[] = new MButton('btnSearch',_M('Search',$module));
        $this->setFields($fields);
        $this->setValidators($validators);
	}
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'bankReturnId'=>MIOLO::_request('bankReturnId'),
                        'typeFieldReturnId'=>MIOLO::_request('typeFieldReturnId'));

        //
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }	

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBankReturnConfig');
        $ok = $business->deleteBankReturnConfig($this->bankReturnId->value,$this->typeFieldReturnId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBankReturnConfig');
        
        if ( $function == 'update' )
        {
            $ok  = $business->updateBankReturnConfig($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertBankReturnConfig($data);
            $data->bankReturnId = $ok;
            $msg = MSG_RECORD_INSERTED;
        }
		
        if ( $ok )
        {
            $opts = array('bankReturnId'=>$data->bankReturnId,'typeFieldReturnId'=>$data->typeFieldReturnId, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBankReturnConfig();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }    
}
?>
