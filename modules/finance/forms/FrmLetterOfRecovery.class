<?php
/**
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 24/09/2008
 *
 * \b Organization: \n
 * iSolution - Solu��es de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Solu��es de Internet \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://isolution.inf.br
 *
 **/


/**
 * Form to manipulate the letter of recovery
 **/
class FrmLetterOfRecovery extends MForm
{

  /**
   * Class constructor
   **/
  function __construct()
  {

    $module = MIOLO::getCurrentModule();

    parent::__construct(_M('Letter of recovery', $module));

    $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

    $this->eventHandler();

  }

  /**
   * Default method to define fields
   **/
  public function createFields()
  {
    $MIOLO    = MIOLO::getInstance();
    $module   = MIOLO::getCurrentModule();
    $action   = MIOLO::getCurrentAction();

    $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

    $toolBar->disableButton('tbBtnDelete');
    $toolBar->disableButton('tbBtnSave');
    $toolBar->disableButton('tbBtnNew');
    $fields[] = $toolBar;
    //Personid
    $personName     = new MTextField('personName',
    $this->getFormValue('personName',$data->personName),
    NULL,
    FIELD_DESCRIPTION_SIZE);
    $personName->setReadOnly(true);
    if (MODULE_ACADEMIC_INSTALLED == 'YES')
    {
      $contractLabel = new MText('contractLabel', _M('Contract',$module) . ':');
      $contractLabel->setWidth(FIELD_CONTAINER_SIZE);
      $flds[]           = $contractLabel;
      $contractId     = new MLookupTextField('contractId',
      $this->getFormValue('contractId'),
      NULL,
      FIELD_LOOKUPFIELD_SIZE,
      NULL,
      NULL,
      array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription'),
                            'academic', 
                            'Contract', 
      NULL,
      array('personId' => 'personId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'),
      true);
      $flds[] = $contractId;
      $flds[] = new MLookupTextField('personId',
      $this->getFormValue('personId', $data->personId),
      NULL ,
      FIELD_LOOKUPFIELD_SIZE,
      NULL,
      NULL,
                      'personName', 
                      'basic', 
                      'PhysicalPersonStudent', 
      NULL,
      NULL,
      true);
      $flds[] = $personName;
      $hctContract = new MHContainer('hctContract', $flds);
      $hctContract->setShowLabel(false);
      $fields[] = $hctContract;
      $module = 'academic';
      //Course
      $courseLabel   = new MText('courseLabel', _M('Course', $module) . ':');
      $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

      $courseId      = new MLookupTextField('courseId',
      $this->getFormValue('courseId'),
      NULL,
      FIELD_LOOKUPFIELD_SIZE,
      NULL,
      NULL,
                            'courseVersion, courseName, unitId, limbo, turnId, limbo', 
      $module,
                            'CourseOccurrence', 
      NULL,
      array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId'=> 'unitId'),
      !$this->page->isPostBack());
      $courseId->setJsHint(_M('Enter the course code', $module));

      $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
      $courseName->setReadOnly(true);
      $courseName->setJsHint(_M('Course name',$module));

      $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
      $courseVersion->setJsHint(_M('Course version code',$module));

      $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
      $hctCourse->setShowLabel(true);
      $fields[]      = $hctCourse;

      //Turn
      $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
      $turnLabel->setWidth(FIELD_CONTAINER_SIZE);
      $businessTurn = $MIOLO->getBusiness('basic', 'BusTurn');
      $turnId   = new MSelection('turnId',
      $this->getFormValue('turnId',$data->turnId),
      NULL,
      $businessTurn->listTurn());

      $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId));
      $hctTurn->setShowLabel(true);
      $fields[]        = $hctTurn;
      //Unit
      $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
      $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
      $businessUnit = $MIOLO->getBusiness('basic', 'BusUnit');
      $unitId   = new MSelection('unitId',
      $this->getFormValue('unitId',$data->unitId),
      NULL,
      $businessUnit->listUnit());

      $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId));
      $hctUnit->setShowLabel(true);
      $fields[]        = $hctUnit;

      //Class
      $lookupClassFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');

      $classLabelS   = new MText('classLabelS', _M('Class',$module) . ':');
      $classLabelS->setWidth(FIELD_CONTAINER_SIZE);

      $classIdS     = new MLookupTextField('classIdS', $this->getFormValue('classIdS', $data->classIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'classNameS', $module, 'Class', null, $lookupClassFilters, true);
      $classIdS->setJsHint(_M('Enter the class id',$module));

      $classNameS    = new MTextField('classNameS', $this->getFormValue('classNameS', $data->classNameS), '', FIELD_DESCRIPTION_SIZE);
      //$classNameS->setReadOnly(true);
      $classNameS->setJsHint(_M('Class name',$module));

      $hctClassS     = new MHContainer('hctClassS', array($classLabelS, $classIdS, $classNameS));
      $hctClassS->setShowLabel(true);
      $fields[]      = $hctClassS;

      $module   = MIOLO::getCurrentModule();
    }
    else
    {
      $personLabel = new MText('personLabel', _M('Person',$module) . ':');
      $personLabel->setWidth(FIELD_CONTAINER_SIZE);
      $personId       = new MLookupTextField('personId',
      $this->getFormValue('personId',$data->personId),
      NULL,
      FIELD_ID_SIZE,
      NULL,
      NULL,
                        'personName',
                        'basic', 
                        'Person', 
      NULL,
      NULL,
      true);
      $personId->setJsHint(_M('Select the person id', $module));
      $hctPerson  = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
      $hctPerson->setShowLabel(true);
      $fields[]   = $hctPerson;
    }
    //incomeSourceId
    $business = $MIOLO->getBusiness($module, 'BusIncomeSource');
    $valueIncomeSourceId = $business->listIncomeSource();

    $incomeSourceLabel = new MText('incomeSource', _M('Income source', $module).':');
    $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);
    $incomeSourceId = new MMultiSelection('incomeSourceId', is_array($this->getFormValue('incomeSourceId', $data->incomeSourceId)) ? $this->getFormValue('incomeSourceId', $data->incomeSourceId) : array($this->getFormValue('incomeSourceId', $data->incomeSourceId)), '', $valueIncomeSourceId, true, null, 5);
    $fields[] = new MHContainer('hctIncomeSourceId', array($incomeSourceLabel, $incomeSourceId));

    // Account Scheme
    $accountSchemeLabel = new MText('accountSchemeLabel', _M('Account scheme',$module).':');
    $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
    $accountSchemeId    = new MLookupTextField('accountSchemeId',
    $this->getFormValue('accountSchemeId',$data->accountSchemeId),
    NULL,
    FIELD_ID_SIZE,
    NULL,
    NULL,
                            'accountSchemeDescription',
                            'accountancy', 
                            'AccountScheme', 
    NULL,
    NULL,
    true);
    $accountSchemeId->setJsHint(_M('Select the account scheme id', $module));
    $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), null, FIELD_DESCRIPTION_SIZE);
    $accountSchemeDescription->setReadOnly(true);
    $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $accountSchemeDescription));
    $hctAccountScheme->setShowLabel(true);
    $fields[]   = $hctAccountScheme;

    // Cost Center
    $costCenterLabel = new MText('costCenterLabel', _M('Cost center',$module).':');
    $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
    $costCenterId       = new MLookupTextField('costCenterId',
    $this->getFormValue('costCenterId',$data->costCenterId),
    NULL,
    FIELD_ID_SIZE,
    NULL,
    NULL,
                            'costCenterDescription',
                            'accountancy', 
                            'CostCenter', 
    NULL,
    NULL,
    true);
    $costCenterId->setJsHint(_M('Select the cost center id', $module));
    $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, FIELD_DESCRIPTION_SIZE);
    $costCenterDescription->setReadOnly(true);
    $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
    $hctCostCenter->setShowLabel(true);
    $fields[]   = $hctCostCenter;

    // Policy
    $policyLabel = new MText('policyLabel', _M('Policy', $module). ':');
    $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
    $policyId           = new MLookupTextField('policyId',
    $this->getFormValue('policyId',$data->policyId),
    NULL,
    FIELD_ID_SIZE,
    NULL,
    NULL,
                            'policyDescription',
                            'finance', 
                            'Policy', 
    NULL,
    NULL,
    true);
    $policyId->setJsHint(_M('Select the policy id', $module));
    $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, FIELD_DESCRIPTION_SIZE);
    $policyDescription->setReadOnly(true);
    $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
    $hctPolicy->setShowLabel(true);
    $fields[]   = $hctPolicy;
    $fields[]     = new MHiddenField('limbo', '');;
    $this->setFields($fields);
    $this->setShowPostButton(false);
  }

  /**
   * Event triggered when user chooses print from the toolbar
   **/
  public function tbBtnPrint_click($sender=NULL)
  {
    $MIOLO      = MIOLO::getInstance();
    $module     = MIOLO::getCurrentModule();
    $action     = MIOLO::getCurrentAction();

    $data       = $this->getTypesData();
    $business   = $MIOLO->getBusiness($module, 'BusLetterOfRecovery');
    $result = $business->searchDebts($data);
    $rpt        = 'RptLetterOfRecovery';
    $MIOLO->getClass($module, $rpt);
    $report = new $rpt($result);
  }

  /**
   * Method to gather all information from the form fields
   * and put them on a database compatible object
   **/
  public function getTypesData()
  {
    $data->personId         = $this->personId->value;
    $data->policyId         = $this->policyId->value;
    $data->accountSchemeId  = $this->accountSchemeId->value;
    $data->costCenterId     = $this->costCenterId->value;
    $data->incomeSourceId   = $this->incomeSourceId->value;

    if (MODULE_ACADEMIC_INSTALLED == 'YES')
    {
      $data->contractId       = $this->contractId->value;
      $data->courseId         = $this->courseId->value;
      $data->courseVersion    = $this->courseVersion->value;
      $data->turnId           = $this->turnId->value;
      $data->unitId           = $this->unitId->value;
      $data->classId          = $this->classIdS->value;
    }

    return $data;
  }
}

?>
