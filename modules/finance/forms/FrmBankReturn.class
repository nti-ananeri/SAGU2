<?php

/**
 * 
 * Bank Return form
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/10/2007
 *
 * \b Organization: \n
 * iSolution - Soluções de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Soluções de Internet \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank return
 **/
class FrmBankReturn extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;
		
        $business = $MIOLO->getBusiness($module,'BusBankReturn');
        
        if (in_array($function,array('update','delete')) )
        {
        	
        	$bankReturnId = MIOLO::_request('bankReturnId') ?  MIOLO::_request('bankReturnId'): MIOLO::_request('bankReturnId','GET');
        	$data     = $business->getBankReturn($bankReturnId);
            $fields[]  = new MTextLabel('bankReturnId', $data->bankReturnId, _M('Id', $module));
            $fields[]  = new MHiddenField('bankReturnId', $data->bankReturnId);
         }

        // Bank
        $bankLabel = new MText('bankLabel', _M('Bank',$module).':');
        $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId       = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_ID_SIZE, null, null, 'bankName', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Enter the bank id',$module));
        $validators[] = new MRangeValidator('bankId', _M('Bank',$module), '0', '999', 'i', 'required');
        $bankName   = new MTextField('bankName', $this->getFormValue('bankName', $data->bankName), '', FIELD_DESCRIPTION_SIZE);
        $bankName->setJsHint(_M('Bank name',$module));
        $bankName->setReadOnly(true);
        $hctBank = new MHContainer('hctBank', array( $bankLabel, $bankId, $bankName ) );
        $hctBank->setShowLabel(true);
        $fields[]  = $hctBank;
        
        //Description
        $description = new MTextField('description', $this->getFormValue('description',$data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the payment place description',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Description',$module));
       
		// CNAB	
		$CNABTypeLabel = new MText('printerType',"CNAB");
        $CNABTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $CNABTypeLabel->setClass('m-caption m-caption-required');
        $flds[]        = $CNABTypeLabel;
		$options = Array(Array('240','240'),Array('400','400'));
        $CNABType = new MRadioButtonGroup('CNABType', '', $options, $this->getFormValue('CNABType', $data->CNABType) ?  $this->getFormValue('CNABType', $data->CNABType) : '240', null, 'horizontal');
        $CNABType->setShowLabel(false);
        $flds[]   = $CNABType;
        $hctCNABType = new MHContainer('hctCNABType', $flds);
        $fields[] = $hctCNABType;
        unset($flds);
		unset($options);
		
		//Segment Position
        $segmentPosition  = new MTextField('segmentPosition',  $this->getFormValue('segmentPosition',$data->segmentPosition), _M('Segment Position',$module), FIELD_ID_SIZE);
        $segmentPosition->setJsHint(_M('Enter the segment position', $module));
        $fields[] = $segmentPosition;
        //$validators[] = new MRequiredValidator('segmentPosition', _M('Segment Position',$module));  
		
        //Share
        $returnShareId  = new MComboBox('returnShareId',  $this->getFormValue('returnShareId',$data->returnShareId), _M('Share',$module),$business->listBankReturnShare());
        $returnShareId->setJsHint(_M('Enter the Share', $module));
        $fields[] = $returnShareId;
        $validators[] = new MRequiredValidator('returnShareId', _M('Share',$module));  
                      
       	//Valid Caracters
        $validCaracters  = new MTextField('validCaracters',  $this->getFormValue('validCaracters',$data->validCaracters), 'Valid Caracters', FIELD_ID_SIZE);
        $validCaracters->setJsHint(_M('Enter the valid caracters', $module));
        $fields[] = $validCaracters;
        //$validators[] = new MIntegerValidator('segmentPosition');
  		$validators[] = new MRequiredValidator('validCaracters', _M('Valid Caracters',$module));               
        //Has Header ?
        unset($flds);
		$hasHeaderLabel = new MText('hasHeaderLabel',"Cabeçalho");
        $hasHeaderLabel->setWidth(FIELD_CONTAINER_SIZE);
        $hasHeaderLabel->setClass('m-caption m-caption-required');
        $flds[]        = $hasHeaderLabel;
		$options = SAGU::listYesNo(1);
        $hasHeader = new MRadioButtonGroup('hasHeader', '', $options, $this->getFormValue('hasHeader', $data->hasHeader) ?  $this->getFormValue('hasHeader', $data->hasHeader) : DB_FALSE, null, 'horizontal');
        $hasHeader->setShowLabel(false);
        $flds[]   = $hasHeader;
        $hctHasHeader = new MHContainer('hctHasHeader', $flds);
        $fields[] = $hctHasHeader;
        unset($flds);
		unset($options);        
        
        //Return File Mask
        $returnFileMask = new MTextField('returnFileMask', $this->getFormValue('returnFileMask',$data->returnFileMask), _M('Return File Mask',$module), FIELD_DESCRIPTION_SIZE);
        $returnFileMask->setJsHint(_M('Type the return mask file',$module));
        $fields[] = $returnFileMask;
        //$validators[] = new MRequiredValidator('returnFileMask', _M('Return File Mask',$module));
       
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.bankId.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'bankReturnId'=>MIOLO::_request('bankReturnId'));

        //
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBankReturn');
        $ok = $business->deleteBankAccount($this->bankReturnId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBankReturn');
        
        if ( $function == 'update' )
        {
            $ok  = $business->updateBankReturn($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertBankReturn($data);
            $data->bankReturnId = $ok;
            $msg = MSG_RECORD_INSERTED;
        }
		
        if ( $ok )
        {
            $opts = array('bankReturnId'=>$data->bankReturnId, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBankReturn();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
