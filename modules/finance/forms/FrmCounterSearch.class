<?php

/**
 *
 * This file handles the connection and actions for finCounter table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finCounter table
 */
class FrmCounterSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Counter', $this->home, 'counter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $counterLabelS = new MText('counterLabelS', _M('Counter number',$module).':');
        $counterLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]     = $counterLabelS;
        $counterIdS = new MTextField('counterIdS', $this->getFormValue('counterIdS',$data->counterIdS), _M('',$module), FIELD_ID_SIZE);
        $validators[] = new MIntegerValidator('counterIdS');

        $counterIdS->setJsHint(_M('Enter the counter code',$module));
        $flds[]      = $counterIdS;

        $hctCounterS = new MHContainer('hctCounterS', $flds);
        $hctCounterS->setShowLabel(true);
        $fields[]  = $hctCounterS;
        unset($flds);

        $responsableLabelS = new MText('responsableLabelS', _M('Responsible',$module).':');
        $responsableLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $responsableLabelS;
        $responsableIdS = new MLookupTextField('responsableIdS', $this->getFormValue('responsableIdS',$data->responsableIdS), _M('',$module), FIELD_ID_SIZE, null, null, 'responsableNameS', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $validators[] = new MIntegerValidator('responsableIdS');
        $responsableIdS->setJsHint(_M('Enter the responsible code',$module));
        $flds[]           = $responsableIdS;

        $responsableNameS = new MTextField('responsableNameS', $this->getFormValue('responsableNameS',$data->responsableNameS), _M('',$module), FIELD_DESCRIPTION_SIZE);
//        $responsableNameS->setReadOnly(true);
        $flds[]           = $responsableNameS;

        $hctResponsableS = new MHContainer('hctResponsableS', $flds);
        $hctResponsableS->setShowLabel(true);
        $fields[]        = $hctResponsableS;
        unset($flds);
    
        $unitsLabelS = new MText('unitsLabelS', _M('Unit',$module).':');
        $unitsLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $unitsLabelS;

        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitIdS = new MComboBox('unitIdS', $this->unitIdS->value, '', $business->listUnit(), false, '', 2);
        $validators[] = new MIntegerValidator('unitIdS');
        $unitIdS->setJsHint( _M('Choose the unit',$module) );
        $flds[]      = $unitIdS;

        $hctUnitS = new MHContainer('hctUnitS', $flds);
        $hctUnitS->setShowLabel(true);
        $fields[]  = $hctUnitS;
        unset($flds);
        
        $isActiveLabelS = new MText('unitsLabelS', _M('Is active',$module).':');
        $isActiveLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]      = $isActiveLabelS;
       
        $isActiveS = new MRadioButtonGroup('isActiveS', '', SAGU::listYesNo(1), $this->isActiveS->value, '', 'horizontal');
        $isActiveS->setShowLabel(false);
        $flds[]      = $isActiveS;

        $hctIsActiveS = new MHContainer('hctIsActiveS', $flds);
        $fields[]  = $hctIsActiveS;
        unset($flds);

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->counterId       = $this->counterIdS->value;
        $filters->responsableId   = $this->responsableIdS->value;
        $filters->responsableName = $this->responsableNameS->value;
        $filters->unitId          = $this->unitIdS->value;  
        $filters->isActive        = $this->isActiveS->value;
        $filters->unitDescription = $this->unitDescriptionS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCounterSearch',$filters);
        $business = $this->manager->getBusiness($module,'BusCounter');
        $data = $business->searchCounter($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);
        $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.counterIdS.focus();');
        } 

    }

}

?>
