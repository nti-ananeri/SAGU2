<?php

/**
 * Voucher messages form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 02/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmVoucherMessages extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $operationId = MIOLO::_request('operationId');

            $business = $MIOLO->getBusiness($module, 'BusVoucherMessages');
            $data     = $business->getVoucherMessages($operationId);
        }
        
        // Operation id
        $operationIdLabel = new MText('operationIdLabel', _M('Operation id', $module).':');
        $operationIdLabel->setWidth(FIELD_LABEL_SIZE);
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', FIELD_ID_SIZE, null, null, 'operationDescription', $module, 'Operation', null, null, true);
        if ( $function == 'update' )
        {
            $operationId->setReadOnly(true);
        }
        $operationId->setJsHint(_M('Enter the operation id', $module));
        $validators[] = new MIntegerValidator('operationId', _M('Operation id', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', FIELD_DESCRIPTION_SIZE);
        $operationDescription->setReadOnly(true);

        $fields[] = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));

        // Voucher messages
        $voucherMessagesTitleLabel = new MText('voucherMessagesTitleLabel', _M('Voucher messages', $module).':');
        $voucherMessagesTitleLabel->setWidth(FIELD_LABEL_SIZE);
        $voucherMessagesTitleLabel->setClass('m-caption m-caption-required');
        $voucherMessagesTitle = new MMultiLineField('voucherMessagesTitle', $this->getFormValue('voucherMessagesTitle',$data->title), '', 40, 1, 40);
        $voucherMessagesTitle->setJsHint(_M('Enter the title', $module));
        $fields[] = new MHContainer('hctTitle', array($voucherMessagesTitleLabel, $voucherMessagesTitle));
        $validators[] = new MRequiredValidator('voucherMessagesTitle', _M('Voucher messages', $module), 'required');

        $messageLabel = new MText('messageLabel', _M('Message', $module).':');
        $messageLabel->setWidth(FIELD_LABEL_SIZE);
        $messageLabel->setClass('m-caption m-caption-required');
        $message = new MMultiLineField('message', $this->getFormValue('message',$data->message), '', 40, 4, 40);
        $message->setJsHint(_M('Enter the message',$module));
        $validators[] = new MRequiredValidator('message', _M('Message', $module), 'required');
        $fields[] = new MHContainer('hctMessage', array($messageLabel, $message));

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.operationId.focus();');

    }


    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'operationId'=>MIOLO::_request('operationId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusVoucherMessages');
        $ok = $business->deleteVoucherMessages($this->operationId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusVoucherMessages');

        if ( $function == 'update' )
        {
            $ok  = $business->updateVoucherMessages($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $dataVoucherMessages = $business->getVoucherMessages($data->operationId);

            if (strlen((string)$dataVoucherMessages->operationId)>0)
            {
                $opts    = array('operationId'=>$data->operationId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('operationIdS'=>$data->operationId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('Voucher message for operation @1 already exists, do you want edit that voucher message?', $module, $data->operationId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok  = $business->insertVoucherMessages($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }

        if ( $ok )
        {
            $opts = array('operationIdS'=>$data->operationId);
            $goto = $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinVoucherMessages();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'title' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
            else
            {
                $data->title = $this->voucherMessagesTitle->value;
            }
        }

        return $data;
    }
}

?>
