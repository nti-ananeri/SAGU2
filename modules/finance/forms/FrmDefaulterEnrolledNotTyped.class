<?php

/**
 * Defaulter form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmDefaulterEnrolledNotTyped extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Defaulter enrolled not typed', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Defaulter enrolled not typed', $this->home, 'defaulter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        // início do 4° grupo
        $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
        $dataPeriod = $businessPeriod->listPeriod();

        // MComboBox Period
        // $dataPeriod  : Dados obtidos do list do business period
        $grp4PeriodLabel = new MText('grp4PeriodLabel', _M('Invoice period', $module).':');
        $grp4PeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
//        $business = $MIOLO->getBusiness('finance','BusCollectionType');
        $grp4PeriodId = new MComboBox('grp4PeriodId', $this->grp4PeriodId->value, '', $dataPeriod, false, '', FIELD_ID_SIZE);
        $grp4PeriodId->setJsHint( _M('Choose the period',$module) );
        $grp4HctPeriod = new MHContainer('grp4HctPeriod', array($grp4PeriodLabel,$grp4PeriodId));
        $grp4HctPeriod->setShowLabel(true);
        $field1[]   = $grp4HctPeriod;
    
        // Pupil list
        $grp4PupilListLabel = new MText('grp4PupilListLabel', _M('Pupil list', $module).':');
        $grp4PupilListLabel->setWidth(FIELD_CONTAINER_SIZE);
        $grp4PupilList      = new MTextField('grp4PupilList', $this->getFormValue('pupilList', $data->pupilList), '', 20, _M('ok', $module));
        $field1[]          = new MHContainer('grp4HctPupilList', array($grp4PupilListLabel, $grp4PupilList));
 
        // Data limite para regularizar a situação 
        $grp4MaturityEnrollDateLabel = new MText('grp4MaturityEnrollDateLabel', _M('Limit date for enrollment re-application for the students with valid financial situation ?',$module));
        $grp4MaturityEnrollDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $grp4MaturityEnrollDate = new MCalendarField('grp4MaturityEnrollDate', $this->getFormValue('maturityEnrollDate', $data->maturityEnrollDate), _M('',$module), FIELD_DATE_SIZE);
        $grp4MaturityEnrollDate->setJsHint(_M('Enter the date',$module));
        $validators[] = new MDATEDMYValidator('grp4MaturityEnrollDate');
        $hctGrp4MaturityEnrollDate = new MHContainer('hctGrp4MaturityEnrollDate', array($grp4MaturityEnrollDateLabel, $grp4MaturityEnrollDate));
        $hctGrp4MaturityEnrollDate->setShowLabel(true);
        $field1[] = $hctGrp4MaturityEnrollDate;

        $mType[0][0] = _M('sxw',$module);
        $mType[0][1] = DB_TRUE;
        $mType[1][0] = _M('pdf',$module);
        $mType[1][1] = DB_FALSE;


        $fileOptionLabel = new MText('fileOptionLabel', _M('File generate option',$module).':');
        $fileOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
//        $isActiveLabel->setClass('m-caption m-caption-required');
        $fileOption = $this->GetFormValue('fileOption', $data->fileOption) ? $this->GetFormValue('fileOption', $data->fileOption) : DB_TRUE;

        $fileOption = new MRadioButtonGroup('fileOption', '', $mType, $fileOption, null, 'horizontal');
        $fileOption->SetShowLabel(false);
        $hctFileOption = new MHContainer('hctFileOption', array($fileOptionLabel, $fileOption));
        $field1[]  = $hctFileOption;

        // quarto grupo 
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $field1[]  = new MSeparator('');
        $fields1[] = new MVContainer('container1', $field1);
        $fields[]  = new MBaseGroup('mbgDefaulter', _M('Enrolled not typed', $module), $fields1);
        // Botao do quarto Grupo.
        $btnGrp4Generate  = new MButton('btnGrp4Generate', _M('Generate', $module));
        $fieldss1[] = new MHContainer('hctBtn4', array($btnGrp4Generate ));
        $fields[]  = $fieldss1;

        $fields[]          = new MSeparator('');

        unset($field1);
        unset($fields1);
        unset($fieldss1);

        // fim do 4° grupo


        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');
    }

     public function btnGrp4Generate_click($sender = null)
     {
          $MIOLO  = MIOLO::getInstance();
          $module = MIOLO::getCurrentModule();
 
          $data->pupilList      = $this->getFormValue('grp4PupilList');
          $data->periodId           = $this->getFormValue('grp4PeriodId');
          $data->maturityEnrollDate = $this->getFormValue('grp4MaturityEnrollDate');
          $data->fileOption     = $this->getFormValue('fileOption');



          set_time_limit(0);
          $business = $MIOLO->getBusiness($module, 'BusDefaulter');
          // pega dados de inadimplentes
          $returnData   = $business->getRelateDefaulterForDate($data);
  
          if ( $returnData == NULL )
          {
               $goto = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
               $caption = _M('Error', $module );
               $msg     = _M('No results for this query, try another period !', $module);
               $MIOLO->error( $msg, $goto, $caption );
          }

          $returnNumber = count($returnData) ;
          $actualDate   = SAGU::getDateNow();
          $actualDateByExtense   = SAGU::getDateByExtense($actualDate);

          $index = 0;
          for( $option = 0 ; $option < $returnNumber; $option++) 
          {
               $data->personId = $returnData[$index][0];
               // pega título do inadimplente corrente do código.
               $invoiceData  = $business->getRelateDefaulterInvoiceForDate($data);

               // Cabeçario do documento.
               $array[$index] = array($actualDateByExtense,
                                      $invoiceData[0][0],
                                      $invoiceData[0][1],
                                      $invoiceData[0][8],
                                      $invoiceData[0][14],
                                      $invoiceData[0][15],
                                      $invoiceData[0][9],
                                      $invoiceData[0][10],
                                      $invoiceData[0][11],
                                      $invoiceData[0][12],
                                      $invoiceData[0][2],
                                      $invoiceData[0][3],
                                      $actualDate, 
                                      $data->startDate,
                                      $data->endDate,
                                      $data->courseId,
                                      $data->periodId,
                                      $data->courseVersion);

               for( $option2 = 0 ; $option2 < count($invoiceData); $option2++)
               {          
                  $arrayTotal[$index][0]  = SAGU::calcNumber($arrayTotal[$index][0] .'+'. $invoiceData[$option2][21]);
                  $arrayS[0][$index][]    = array($invoiceData[$option2][16],$invoiceData[$option2][17], $invoiceData[$option2][18], $invoiceData[$option2][19], $invoiceData[$option2][20], $invoiceData[$option2][21]);
            
               }
               $index++;
            }
            $MIOLO->uses('/core/AgataAPI.class');
            $api = new AgataAPI;
 
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(TEMP_DIR . '/defaulterEnrolledNotTyped.sxw');
            $api->setDataArray($array);
            $api->setSubDataArray($arrayS);
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/defaulterEnrolledNotTyped.sxw'));

            if( $ok && $data->fileOption == DB_FALSE)
            {

                $api->setOutputPath(TEMP_DIR . '/defaulterEnrolledNotTyped.pdf');
                $ok = $api->openOffice2pdf(TEMP_DIR . '/defaulterEnrolledNotTyped.sxw');

            }


            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                $api->fileDialog();
           }
     }
}
?>
