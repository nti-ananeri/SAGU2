<?php

/**
 *
 * This file handles the connection and actions for finBankTargettable
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finBankTarget table
 */
class FrmBankTargetSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Bank target', $this->home, 'bankTarget-16x16.png', true);
        }
        //fim favoritos
        
        $fields[] = $toolBar;
    

        // Contract person id
        $personIdLabelS = new MText('personIdLabelS', _M('Person', $module).':');
        $personIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $personIdS      = new MLookupTextField('personIdS', $this->getFormValue('personIdS',$data->personId), '', FIELD_ID_SIZE, null, null, array('contractIdS', 'personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS', 'contractTurnIdS', 'contractUnitIdS'), 'academic', 'PersonContract', null, array('personId' => 'personIdS'), ((!$this->page->isPostBack()) || ($event == 'btnSearch_click')));
        $personIdS->setJsHint(_M('Enter the transferor code', $module));
        $personNameS    = new MTextField('personNameS', $this->getFormValue('personNameS',$data->personNameS), '', FIELD_DESCRIPTION_SIZE);
        $this->page->onLoad('document.' . $this->name . '.personIdS.focus();');
        $fields[]       = new MHContainer('hctPersonIdS', array($personIdLabelS, $personIdS, $personNameS));

        // Contract id
        $contractIdLabelS = new MText('contractIdLabelS', _M('Contract id', $module).':');
        $contractIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $contractIdS      = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS',$data->contractIdS), '', FIELD_ID_SIZE, null, null, array('personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS', 'contractTurnIdS', $limbo, 'contractUnitIdS'), 'academic', 'Contract', null, array('personId' => 'personIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code', $module));
        $courseIdS        = new MTextField('courseIdS', $this->getFormValue('courseIdS',$data->courseIdS), _M('',$module), FIELD_ID_SIZE);
        $courseIdS->setReadOnly(true);
        $courseVersionS   = new MTextField('courseVersionS', $this->getFormValue('courseVersionS',$data->courseVersionS), '', 3);
        $courseVersionS->setReadOnly(true);
        $courseNameS      = new MTextField('courseNameS', $this->getFormValue('courseNameS',$data->courseNameS), '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $fields[]         = new MHContainer('hctContractS', array($contractIdLabelS, $contractIdS, $courseIdS, $courseVersionS, $courseNameS));

        // Bank id
        $bankLabelS   = new MText('bankLabelS', _M('Bank', $module).':');
        $bankLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $bankIdS      = new MLookupTextField('bankIdS', $this->getFormValue('bankIdS', $data->bankIdS), '', FIELD_ID_SIZE, null, null, 'bankNameS', 'finance', 'Bank', null, null, true);
        $bankIdS->setJsHint(_M('Enter the bank id',$module));
        $validators[] = new MIntegerValidator('bankIdS');

        $bankNameS    = new MTextField('bankNameS', $this->getFormValue('bankNameS', $data->bankNameS), '', FIELD_DESCRIPTION_SIZE);
        $bankNameS->setJsHint(_M('Bank name',$module));
        $hctBankS     = new MHContainer('hctBankS', array($bankLabelS, $bankIdS, $bankNameS));
        $hctBankS->setShowLabel(true);
        $fields[]     = $hctBankS;

        // Branch
        $branchNumberLabelS = new MText('branchNumberLabelS', _M('Branch', $module).':');
        $branchNumberLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $branchNumberS      = new MTextField('branchNumberS', $this->getFormValue('branchNumberS',$data->branchNumberS), '', 5);
        $branchNumberS->setJsHint(_M('Enter the branch number',$module));
        $branchNumberTraceS = new MText('branchNumberTrace', '-');
        $branchNumberDigitS = new MTextField('branchNumberDigitS', $this->getFormValue('branchNumberDigitS',$data->branchNumberDigitS), '', 3);
        $branchNumberDigitS->setJsHint(_M('Enter the branch digit',$module));
        $fields[]           = new MHContainer('hctBranch', array($branchNumberLabelS, $branchNumberS, $branchNumberTraceS, $branchNumberDigitS));

        // Account
        $accountNumberLabelS = new MText('accountNumberLabelS', _M('Account number', $module).':');
        $accountNumberLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $accountNumberS      = new MTextField('accountNumberS', $this->getFormValue('accountNumberS',$data->accountNumberS), '', 13);
        $accountNumberS->setJsHint(_M('Enter the account number', $module));
        $accountNumberTraceS = new MText('accountNumberTrace', '-');
        $validators[]        = new MRangeValidator('accountNumberS', '', '1', '9999999999999', 'i');
        $accountNumberDigitS = new MTextField('accountNumberDigitS', $this->getFormValue('accountNumberDigitS', $data->accountNumberDigitS), '', 3);
        $validators[]        = new MRangeValidator('accountNumberDigitS', '', 0, 'zz', 's');
        $accountNumberDigitS->setJsHint(_M('Enter the account number digit', $module));

        $fields[]            = new MHContainer('hctAccountNumberS', array($accountNumberLabelS, $accountNumberS, $accountNumberTraceS, $accountNumberDigitS));

        // is active
        $messagesTypeS  = SAGU::listTrueFalse(1);
        $isActiveLabelS = new MText('isActiveLabelS', _M('Is active',$module).':');
        $isActiveLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $isActiveS      = new MRadioButtonGroup('isActiveS', '', $messagesTypeS, $isActiveS, null, 'horizontal');
        $isActiveS->SetShowLabel(false);
        $hctIsActiveS   = new MHContainer('hctIsActiveS', array($isActiveLabelS, $isActiveS));
        $fields[]       = $hctIsActiveS;

        // Button
        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->contractId          = $this->contractIdS->value;
        $filters->bankId              = $this->bankIdS->value;
        $filters->bankName            = $this->bankNameS->value;
        $filters->personId            = $this->personIdS->value;
        $filters->personName          = $this->personNameS->value;
        $filters->accountNumber       = $this->accountNumberS->value;
        $filters->accountNumberDigit  = $this->accountNumberDigitS->value;
        $filters->branchNumber        = $this->branchNumberS->value;
        $filters->branchNumberDigit   = $this->branchNumberDigitS->value;
        $filters->isActive            = $this->isActiveS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdBankTargetSearch',$filters);
        $business   = $MIOLO->getBusiness($module,'BusBankTarget');
        $data       = $business->searchBankTarget($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);
      
        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.contractIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
    }
}
?>
