<?php

/**
 * Bank account form
 *
 * @author Rosemberg Almeida dos Santos [rosbrg@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @since
 * Class created on 30/10/2007
 *
 * \b Organization: \n
 * UNISULBAHIA FACULDADES INTEGRADAS \n
 * The SAGU2 Development Team
  *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a branch
 **/
class FrmBranch extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $bankId   = MIOLO::_request('bankId');
            $fields[] = new MTextLabel('bankId', $bankId, _M('Bank id', $module));
            $fields[] = new MHiddenField('bankId', $bankId);
            
            $branchNumber = MIOLO::_request('branchNumber');
            $fields[]     = new MTextLabel('branchNumber', $branchNumber, _M('Branch number', $module));
            $fields[]     = new MHiddenField('branchNumber', $branchNumber);

            $business = $MIOLO->getBusiness($module,'BusBranch');
            $data     = $business->getBranch($bankId, $branchNumber);

            $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), _M('Branch number digit', $module), 3);
            $fields[]          = $branchNumberDigit;

        }
        else
        {
            $bankLabel = new MText('bankLabel', _M('Bank',$module).':');
            $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bankLabel->setClass('m-caption m-caption-required');
            $bankId       = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_ID_SIZE, null, null, 'bankName', 'finance', 'Bank', null, null, true);
            $bankId->setJsHint(_M('Enter the bank id',$module));
            $validators[] = new MRangeValidator('bankId', _M('Bank',$module), '0', '999', 'i', 'required');
            $bankName   = new MTextField('bankName', $this->getFormValue('bankName', $data->bankName), '', FIELD_DESCRIPTION_SIZE);
            $bankName->setJsHint(_M('Bank name',$module));
            $bankName->setReadOnly(true);
            $hctBank = new MHContainer('hctBank', array( $bankLabel, $bankId, $bankName ) );
            $hctBank->setShowLabel(true);
            $fields[]  = $hctBank;

            $branchNumberLabel = new MText('branchNumberLabel', _M('Branch', $module) . ':');
            $branchNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
            $branchNumberLabel->setClass('m-caption m-caption-required');

            $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber',$data->branchNumber), '', 5);
            $validators[] = new MRangeValidator('branchNumber', _M('Branch', $module), '0', '9999', 'i', 'required');
            $branchNumber->setJsHint(_M('Enter the branch number',$module));

            $branchNumberTrace = new MText('branchNumberTrace', '-');

            $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), '', 3);
            $branchNumberDigit->setJsHint(_M('Enter the branch digit',$module));
            $validators[] = new MRangeValidator('branchNumberDigit', _M('Branch number digit', $module), 0, '99', 'i');
            $fields[] = new MHContainer('hctBranch', array($branchNumberLabel, $branchNumber, $branchNumberTrace, $branchNumberDigit));
        }

        //City
        $cityLabel = new MText('cityLabel', _M('City','basic').':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityLabel->setClass('m-caption m-caption-required');

        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId',$data->cityId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cityName', 'basic', 'City', null, null, true);
        $validators[] = new MIntegerValidator('cityId', _M('City', 'basic'), 'required');
        $cityId->setJsHint(_M('Enter the city code', 'basic'));
 
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setJsHint(_M('City name', 'basic'));
        $cityName->setReadOnly(true);

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;


        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( $function == 'insert' )
        {
            $this->page->onLoad('document.' . $this->name . '.bankId.focus();');
        }
        else
        {
            $this->page->onLoad('document.' . $this->name . '.cityId.focus();');
        }
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data   = $this->getTypesData();
        $opts   = array('event'        => 'tbBtnDelete_confirm',
                        'function'     => 'delete',
                        'bankId'       => MIOLO::_request('bankId'),
                        'branchNumber' => MIOLO::_request('branchNumber'));

        //
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusBranch');
        $ok = $business->deleteBranch($this->bankId->value, $this->branchNumber->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusBranch');

        if ( $function == 'update' )
        {
            $ok  = $business->updateBranch($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertBranch($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {

            $opts = array('bankIdS'=>$data->bankId, 'branchNumberS'=>$data->branchNumber, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinBranch();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
