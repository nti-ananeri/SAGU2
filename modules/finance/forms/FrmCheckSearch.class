<?php

/**
 *
 * This file handles the connection and actions for finCheck table
 *
 * @author Daniel Afonso Heisler [daniel@hsti.inf.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Bral Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/10/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finCheck table
 */
class FrmCheckSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        // Favorites
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Check', $this->home, 'check-16x16.png', true);
        }
        //End favorites

        // Toolbar
        $fields[] = $toolBar;

        //check id
        $fields[]  = new MHiddenField('checkIdS', $this->getFormValue('checkIdS', $checkIdS));

        //check number
        $checkNumberLabelS  = new MText('checkNumberLabel', _M('Check number', $module) . ':');
        $checkNumberLabelS->setWidth(FIELD_LABEL_SIZE);

        $checkNumberS       = new MTextField('checkNumberS', $this->checkNumberS->value, '', FIELD_MONETARY_SIZE);

        $fields[]     = new MHContainer('hctCheckNumber', array($checkNumberLabelS, $checkNumberS));

        //person
        $personLabelS = new MText('personLabelS', _M('Person', 'basic') . ':');
        $personLabelS->setWidth(FIELD_LABEL_SIZE);
            
        $personIdS    = new MLookupTextField('personIdS', $this->personIdS->value, null, FIELD_ID_SIZE, null, null, 'personNameS', 'basic', 'Person', null, array('personId' => 'personIdS'), true);

        $personNameS  = new MTextField('personNameS', $this->personNameS->value, null, FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);

        $hctPerson    = new MHContainer('hctContract', array($personLabelS, $personIdS, $personNameS));
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;

        //value
        $valueLabelS  = new MText('valueLabel', _M('Value', $module) . ':');
        $valueLabelS->setWidth(FIELD_LABEL_SIZE);

        $valueS       = new MTextField('valueS', $this->valueS->value, '', FIELD_MONETARY_SIZE);
        $validators[] = new MFloatValidator('valueS', null, FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');

        $fields[]     = new MHContainer('hctValue', array($valueLabelS, $valueS));

        //data de emissão
        $emissionDateLabelS = new MText('emissionDateLabelS', _M('Emission date', $module) . ':');
        $emissionDateLabelS->setWidth(FIELD_LABEL_SIZE);

        $emissionDateLabel2S  = new MText('emissionDateLabel2S', _M('from', $module));

        $initialEmissionDateS = new MCalendarField('initialEmissionDateS', $this->initialEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('initialEmissionDateS', _M('Emission date', $module), 'optional');

        $emissionDateLabel3S  = new MText('emissionDateLabel3S', _M('to', $module));

        $endEmissionDateS = new MCalendarField('endEmissionDateS', $this->endEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('endEmissionDateS', _M('Emission date', $module), 'optional');

        $hctEmissionDateS = new MHContainer('hctEmissionDateS', array($emissionDateLabelS, $emissionDateLabel2S, $initialEmissionDateS, $emissionDateLabel3S, $endEmissionDateS));
        $hctEmissionDateS->setShowLabel(false);
        $fields[]         = $hctEmissionDateS;

        //data de vencimento
        $maturityDateLabelS = new MText('maturityDateLabelS', _M('Maturity date', $module) . ':');
        $maturityDateLabelS->setWidth(FIELD_LABEL_SIZE);

        $maturityDateLabel2S  = new MText('maturityDateLabel2S', _M('from', $module));

        $initialMaturityDateS = new MCalendarField('initialMaturityDateS', $this->initialMaturityDateS->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('initialMaturityDateS', _M('Maturity date', $module), 'optional');

        $maturityDateLabel3S  = new MText('maturityDateLabel3S', _M('to', $module));

        $endMaturityDateS = new MCalendarField('endMaturityDateS', $this->endMaturityDateS->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('endMaturityDateS', _M('Maturity date', $module), 'optional');

        $hctMaturityDateS = new MHContainer('hctMaturityDateS', array($maturityDateLabelS, $maturityDateLabel2S, $initialMaturityDateS, $maturityDateLabel3S, $endMaturityDateS));
        $hctMaturityDateS->setShowLabel(false);
        $fields[]         = $hctMaturityDateS;

        //status
        $statusLabelS = new MText('statusLabelS', _M('Check status',$module) . ':');
        $statusLabelS->setWidth(FIELD_CONTAINER_SIZE);


        $statusC = new MCheckBox('statusC', 'C', '', $this->getFormValue('statusC', $data->statusC),_M('With funds', $module));

        $statusS = new MCheckBox('statusS', 'S', '', $this->getFormValue('statusS', $data->statusS),_M('No funds', $module));

        $statusD = new MCheckBox('statusD', 'D', '', $this->getFormValue('statusD', $data->statusD),_M('Returned', $module));


        $hctStatusS = new MHContainer('hctStatusS', array($statusLabelS, $statusC, $statusS, $statusD));
        $hctStatusS->setShowLabel(false);
        $fields[] = $hctStatusS;

        //com ou sem baixa
        $messagesTypeS1 = array (
                                  array (_M('No down date', $module), 'N'),
                                  array (_M('With down date', $module), 'Y')
                               );

        $lowLabelS = new MText('lowLabelS', _M('Check situation',$module) . ':');
        $lowLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $downS    = new MRadioButtonGroup('downS', null, $messagesTypeS1, $this->downS->value, null, 'horizontal');
        $downS->SetShowLabel(false);

        $hctLowS = new MHContainer('hctLowS', array($lowLabelS, $downS));
        $hctLowS->setShowLabel(false);
        $fields[] = $hctLowS;
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->checkId     = $this->checkIdS->value;
        $filters->checkNumber = $this->checkNumberS->value;
        $filters->personId    = $this->personIdS->value;
        $filters->value       = $this->valueS->value;
        //$filters->status      = $this->statusS->value;
        $filters->initialEmissionDate = $this->initialEmissionDateS->value;
        $filters->endEmissionDate     = $this->endEmissionDateS->value;
        $filters->initialMaturityDate = $this->initialMaturityDateS->value;
        $filters->endMaturityDate     = $this->endMaturityDateS->value;
        $filters->down                = $this->downS->value;

        if ( $this->statusC->checked )
        {
            $filters->status[] = 'C';
        }
        if ( $this->statusS->checked )
        {
            $filters->status[] = 'S';
        }
        if ( $this->statusD->checked )
        {
            $filters->status[] = 'D';
        }
        unset($this->checkIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCheckSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusCheck');
        $data       = $business->searchCheck($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults);
        $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.personIdS.focus();');
        }

    }

}

?>
