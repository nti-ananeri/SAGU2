<?php
/**
 *
 * This file handles view of incentives spread sheet
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 06/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 */
class FrmIncentivesSpreadSheet extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Incentives spread sheet', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnNew');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Incentives spread sheet', $this->home, 'incentivesSpreadSheet-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;

        // beginDate
        $beginDateLabel = new MText('beginDateLabel', _M('Begin date', $module).':');
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), '', FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $fields[] = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));

        // EndDate
        $endDateLabel = new MText('endDateLabel', _M('End date', $module).':');
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), '', FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDate', '', 'required');
        $fields[] = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        
        // person
        $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personName'), 'basic', 'PhysicalPerson', null, null, true);
        $validators[] = new MIntegerValidator('personId');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]   = $hctPerson;

        //incentive type
        $business = $MIOLO->getBusiness($module, 'BusIncentivesSpreadSheet');
        $incentiveTypesLabel = new MText('incentiveTypesLabel', _M('Incentive type', $module));
        $incentiveTypesLabel->setWidth(FIELD_CONTAINER_SIZE);
        $incentiveTypes = new MMultiSelection('incentiveTypes',  is_array($this->getFormValue('incentiveTypes', $data->incentiveTypes)) ? $this->getFormValue('incentiveTypes', $data->incentiveTypes) : array($this->getFormValue('incentiveTypes', $data->incentiveTypes)), '', $business->getOperations(null), true, null, 5);
        $fields[] = new MHContainer('hctIncentiveTypes', array($incentiveTypesLabel, $incentiveTypes));

        $fields[] = new MButton('btnGenerate',_M('Generate',$module));
        $fields[] = new Separator('');

        $this->setFields($fields);

        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = $MIOLO->getBusiness($module, 'BusIncentivesSpreadSheet');
        
        $data->beginDate      = $this->getFormValue('beginDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->personIdForm   = $this->getFormValue('personId');
        $data->incentiveTypes = $this->getFormValue('incentiveTypes');
        
        $header = array(
                        _M('Id',              $module),
                        _M('Employee',        $module),
                        _M('Id',              $module),
                        _M('Beneficiary',     $module),
                        _M('Id',              $module),
                        _M('Course',          $module),
                        _M('Month. fees',     $module),
                        '%',
                        _M('Disc.',           $module),
                        _M('Others',          $module) . ' %',
                        _M('Others',          $module),
                        _M('Desc. prev. pay', $module),
                        _M('Balance',         $module)
                       );
                       
        $headerFile = array(
                        _M('Id',              $module),
                        _M('Employee',        $module),
                        _M('Id',              $module),
                        _M('Beneficiary',     $module),
                        _M('Id',              $module),
                        _M('Course',          $module),
                        '%',
                        _M('Monthly fees',    $module),
                        _M('Discount',        $module),
                        _M('Balance',         $module)
                       );
                       
        $fileContent[] = _M('Demonstrative incentives spread sheet', $module);
        $fileContent[] = '';

        foreach ( $business->getOperations($data->incentiveTypes) as $value )
        {
            $data->incentiveTypeId          = $value[0];
            $data->incentiveTypeDescription = $value[1];
            $data->operationId              = $value[2];

            $title =  $data->incentiveTypeId . ' - ' . $data->incentiveTypeDescription;

            $data2 = $business->getIncentives($data);
            
            if ( is_array($data2) )
            {
            
                $fileContent[] = '';
                $fileContent[] = $title;
                $fileContent[] = '';
                $fileContent[] = implode(';', $headerFile);
            
                foreach ( $data2 as $line )
                {
                    list (
                            $data->invoiceId,
                            $data->personId,
                            $data->personName,
                            $data->courseId,
                            $data->courseName,
                            $data->incentiveValue,
                            $data->balance
                          ) = $line;
                            
                    $data3 = $business->getSupporter($data);
                    
                    list (
                            $data->supporterId,
                            $data->supporterName,
                            $data->percent
                          ) = $data3;

                    if ( strlen((string)$data->supporterId) > 0 )
                    {
                        $aux1                = $data->supporterId;
                        $aux2                = $data->supporterName;
                        
                        $data->supporterId   = $data->personId;
                        $data->supporterName = $data->personName;
                        
                        $data->personId      = $aux1;
                        $data->personName    = $aux2;
                        
                    }
                    else
                    {
                        $data->supporterId   = $data->personId;
                        $data->supporterName = $data->personName;
                    }

                    $data4 = $business->getOtherIncentives($data);
                    
                    list (
                            $data->otherDiscounts,
                            $data->percentOthers
                         ) = $data4;
                    
                    $data->anticipatePaymentDiscount = $business->getAnticipatePaymentDiscount($data);
                         
                    $data->monthlyFeeValue = SAGU::calcNumber($data->balance . ' + ' . $data->incentiveValue . ' + ' . $data->otherDiscounts);
                    
                    $data->anticipatePaymentDiscount ? $data->anticipatePaymentDiscount : $data->anticipatePaymentDiscount = 0;
                    
                    $data->balance = SAGU::calcNumber($data->balance . ' - ' . $data->anticipatePaymentDiscount);
                    
                    if ( $data->percent )
                    {
                        $content[] = array(
                                            $data->personId,
                                            $data->personName,
                                            $data->supporterId,
                                            $data->supporterName,
                                            $data->courseId,
                                            $data->courseName,
                                            $data->monthlyFeeValue,
                                            $data->percent,
                                            $data->incentiveValue,
                                            $data->percentOthers,
                                            $data->otherDiscounts,
                                            $data->anticipatePaymentDiscount,
                                            $data->balance
                                           );

                        $fileLine = array(
                                            $data->personId,
                                            $data->personName,
                                            $data->supporterId,
                                            $data->supporterName,
                                            $data->courseId,
                                            $data->courseName,
                                            $data->percent,
                                            $data->monthlyFeeValue,
                                            $data->incentiveValue,
                                            $data->balance
                                          );

                        $fileContent[] = implode(';', str_replace('.', REPORT_DECIMAL_SEPARATOR, $fileLine));
                        $total[] = $data->incentiveValue;
                    }
                }

            if ( is_array($total) )
            {
                $total = SAGU::calcNumber(implode(' + ', $total));
                $content[] = array(
                                    null,
                                    '<b>' . strtoupper(_M('Total', $module)) . '</b>',
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    '<b>' . $total . '</b>',
                                    null,
                                    null,
                                    null,
                                    null
                                   );
                $totalTotal[] = $total;
            }

                
            unset($fields);
            $table = new MTableRaw($title, $content, $header);
            $table->SetAlternate(true);
            
            $tables[] = $table;
//            $tables[] = new MSeparator(_M('Total', $module) . ': ' . $total);
            $tables[] = new MSeparator();
            $this->addFields($tables);
                     
            unset($content, $tables, $total);
            }

        }

        if ( is_array($totalTotal) )
        {
            $total = SAGU::calcNumber(implode(' + ', $totalTotal));
        }
        
        $totalField = new MText('totalField', _M('Grand total', $module) . ': ' . $total);
        $totalField->fontWeight = 'bold';
        $fields[]   = $totalField;
        $fields[] = new Separator('');
        
        $hiddenData = new MHiddenField('hiddenData', urlencode(serialize($fileContent)));
        $fields[] = $hiddenData;
        
        $fields[] = new MButton('btnFile',_M('Generate',$module) . ' incentives.txt');
        $fields[] = new Separator('');
        
        $this->addFields($fields);
        
    }

    /**
     * Event triggered when user chooses File from the toolbar
     **/
    public function btnFile_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $fileContent = implode(unserialize(urldecode(stripslashes($this->getFormValue('hiddenData')))), chr(hexdec("\X0D\X0A")));
        $fileContent.= chr(hexdec("\X0D\X0A"));        
        
        SAGU::returnAsFile('incentives-' . date(dmY) . '.txt', $fileContent, 'text/incentive-file');
        
    }
    
}

?>
