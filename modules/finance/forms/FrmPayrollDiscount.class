<?php

/**
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPayrollDiscount extends MForm
{

    private $module;


    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;


        parent::__construct(_M('Payroll discount', $module));

        // hide the 'Submit' button
    //        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $beginDate        = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Begin date', $module), FIELD_DATE_SIZE);
        $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required'));
        $fields[]         = $beginDate;

        $endDate        = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date', $module), FIELD_DATE_SIZE);
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('End date', $module), 'required'));
        $fields[]       = $endDate;

        $closeDate      = new MCalendarField('closeDate', $this->getFormValue('closeDate', $data->closeDate), _M('Close date', $module), FIELD_DATE_SIZE);
        $closeDate->setValidator(new MDATEDMYValidator('closeDate', _M('Close date', $module), 'required'));
        $fields[]       = $closeDate;
        
//       $business = $MIOLO->getBusiness($module,'BusOperation');
        //pega mensagem de débito ou crédito  | 0 para Selection e 1 para RadioBottonGroup
//        $messagesTypeS = $business->listOperationTypeId(1);
         /*
         * MRadioButtonGroup class constructor prototype:
         *
         * function __construct( $name = '',
         *                   $label = '',
         *                   $options = '',
         *                   $default = false,
         *                   $hint = '',
         *                   $disposition = 'vertical',
         *                   $border = 'none' )
         */
        // get Yes and No for Radio Button
        $messagesType       =  SAGU::listTrueFalse(1);
        $closeInvoiceLabel  = new MText('closeInvoiceLabel', _M('Close invoice',$module).':');
        $closeInvoiceLabel->setWidth(FIELD_CONTAINER_SIZE);
        $data->closeInvoice = $this->GetFormValue('closeInvoice', $data->closeInvoice ? $data->closeInvoice : 't' );
        $closeInvoice    = new MRadioButtonGroup('closeInvoice', '', $messagesType, $data->closeInvoice, null, 'horizontal');
        $closeInvoice->SetShowLabel(false);
        $hctCloseInvoice = new MHContainer('hctCloseInvoice', array($closeInvoiceLabel, $closeInvoice));
        $fields[]        = $hctCloseInvoice;
//       $fields[] = new MButton('btnSearch', _M('Gerar', $module));

        $fields[] = new Separator('');
        $this->setFields($fields);
//        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(true);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        
        $this->page->onLoad('document.'.$this->name.'.beginDate.focus();');
        

        if ( $this->isSubmitted() )
        {
            $filters->beginDate           = $this->beginDate->value;
            $filters->endDate             = $this->endDate->value;
            $filters->closeDate           = $this->closeDate->value;
            $filters->closeInvoice        = $data->closeInvoice;
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPayrollDiscountSearch', $filters);

            $business   = $this->manager->getBusiness($module,'BusPayrollDiscount');
            $results    = $business->generatePayrollDiscount($filters);
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPayrollDiscountSearch', $filters);
            
            $grdResults->setData($results);
            $this->addField($grdResults);
        }
     }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdPayrollDiscount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }

}

?>
