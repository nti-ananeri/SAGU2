<?php

/**
 *
 * This file handles the connection and actions for finCounterMovement table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finCounterMovement table
 */
class FrmCounterMovementSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }
    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Counter movement', $this->home, 'counterMovement-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        // Pega informações do usuário logado
        $loginUser  = $MIOLO->GetLogin();
        if($loginUser->idperson != null)
        {
            //busca dados do usuário na base sagu2
            $business = $MIOLO->getBusiness('basic','BusPerson');
            $user = $business->getPerson($loginUser->idperson);

        }
        //busca dados do usuário na base sagu2
//        $business = $MIOLO->getBusiness('basic','BusPerson');
//        $user = $business->getPerson($loginUser->idperson);
        $data->operatorIdS = null;
        // seta as informação nas variáveis do form.
        if (is_object($user))
        {
            $data->operatorIdS   = $user->personId;
            $data->operatorNameS = $user->name;
        }

        $counterIdLabelS = new MText('counterIdLabelS', _M('Counter',$module).':');
        $counterIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $counterIdLabelS;
 
        $counterIdS = new MLookupTextField('counterIdS', $this->getFormValue('counterIdS',$data->counterIdS), _M('',$module), FIELD_ID_SIZE,
                         null, null, 'limbo, responsableNameS, limbo, unitDescriptionS', $module, 'Counter', null, null, true);
        $validators[] = new MIntegerValidator('counterIdS');
        $counterIdS->setJsHint(_M('Enter the counter code',$module));
        $flds[]      = $counterIdS;

        $responsableNameS = new MTextField('responsableNameS', $this->getFormValue('responsableNameS',$data->responsableNameS), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $responsableNameS->setReadOnly(true);
        $flds[]            = $responsableNameS;
        
        $unitDescriptionS = new MTextField('unitDescriptionS', $this->getFormValue('unitDescriptionS',$data->unitDescriptionS), _M('',$module), FIELD_ID_SIZE);
        $unitDescriptionS->setReadOnly(true);
        $flds[]            = $unitDescriptionS;

        $hctCounterS = new MHContainer('hctCounterS', $flds);
        $hctCounterS->setShowLabel(true);
        $fields[]  = $hctCounterS;
        unset($flds);


        $operatorIdLabelS = new MText('operatorIdLabelS', _M('Operator',$module).':');
        $operatorIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
//        $bankLabel->setClass('m-caption m-caption-required');
        $flds[]           = $operatorIdLabelS;

        $operatorIdS = new MLookupTextField('operatorIdS', $this->getFormValue('operatorIdS',$data->operatorIdS), _M('',$module), FIELD_ID_SIZE,
 null, null, 'operatorNameS', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $operatorIdS->setJsHint(_M('Enter the operator id',$module));
        $validators[] = new MIntegerValidator('operatorIdS');
        $flds[]          = $operatorIdS;

        $operatorNameS = new MTextField('operatorNameS', $this->getFormValue('operatorNameS',$data->operatorNameS), _M('',$module), FIELD_DESCRIPTION_SIZE);
//        $operatorNameS->setReadOnly(true);
        $flds[]             = $operatorNameS;

        $hctOperatorS = new MHContainer('hctOperatorS', $flds);
        $hctOperatorS->setShowLabel(true);
        $fields[]  = $hctOperatorS;
        unset($flds);
        
        $valueLabelS = new MText('valueLabelS', _M('Value',$module).':');
        $valueLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $valueLabelS;

        $valueS = new MTextField('valueS', $this->getFormValue('valueS',$data->valueS), _M('',$module), FIELD_MONETARY_SIZE);
        $valueS->setJsHint(_M('Enter the value',$module));
        $validators[] =    new MFloatValidator('valueS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);

        $flds[] = $valueS;

        $hctValueS = new MHContainer('hctValueS', $flds);
        $fields[]  = $hctValueS;
        unset($flds);   
        
        $movementDateLabelS = new MText('movementDateLabelS', _M('Movement date',$module).':');
        $movementDateLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $movementDateLabelS;
        
        $movementDateS = new MCalendarField('movementDateS', $this->getFormValue('movementDateS',$data->movementDateS), _M('',$module), FIELD_DATE_SIZE);
        $movementDateS->setJsHint(_M('Enter the register date',$module));
        $validators[] = new MDATEDMYValidator('movementDateS', '', 'optional');
        $flds[] = $movementDateS;

        $hctDateMovementS = new MHContainer('hctDateMovementS', $flds);
        $fields[]          = $hctDateMovementS;
        unset($flds);
        
//        $business = $MIOLO->getBusiness($module,'BusOperation');
//        $opts = $business->listOperationTypeId();
//        $operationS = new MSelection('operationS', $this->getFormValue('operationS',$data->operationS), _M('Operation type',$module), $opts, true);
//        $operationS->setJsHint(_M('Select the operation',$module));
//        $flds[] = $operationS;

//        $hctOperationS = new MHContainer('hctOperationS', $flds);
//        $fields[]  = $hctOperationS;
//        unset($flds);         

        $business = $MIOLO->getBusiness($module,'BusOperation');
        //pega mensagem de débito ou crédito  | 0 para Selection e 1 para RadioBottonGroup
        $messagesTypeS = $business->listOperationTypeId(1);
         /*
         * MRadioButtonGroup class constructor prototype:
         *
         * function __construct( $name = '',
         *                   $label = '',
         *                   $options = '',
         *                   $default = false,
         *                   $hint = '',
         *                   $disposition = 'vertical',
         *                   $border = 'none' )
         */

        // get Yes and No for Radio Button
//        $messagesType =  SAGU::radioButtonGroupYesNo();
        $operationLabelS = new MText('operationLabelS', _M('Operation',$module).':');
        $operationLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $operationS = $this->GetFormValue('operationS',$data->operationS);
        $operationS = new MRadioButtonGroup('operationS', '', $messagesTypeS, $operationS, null, 'horizontal');
        $operationS->SetShowLabel(false);

        $hctOperationS = new MHContainer('hctOperationS', array($operationLabelS, $operationS));
        $fields[]  = $hctOperationS;

        $speciesIdLabelS = new MText('speciesIdLabelS', _M('Species',$module).':');
        $speciesIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $speciesIdLabelS;

        $business = $MIOLO->getBusiness($module,'BusSpecies');
        $speciesIdS = new MComboBox('speciesIdS', $this->speciesIdS->value, '', $business->listSpecies(), false, '', 2);
        $validators[] = new MIntegerValidator('speciesIdS');
        $speciesIdS->setJsHint( _M('Species',$module) );
        $flds[]      = $speciesIdS;
   
//      $speciesIdS = new MLookupTextField('speciesIdS', $this->getFormValue('speciesIdS',$data->speciesIdS), _M('',$module), FIELD_ID_SIZE, null, null, 'speciesDescriptionS', $module, 'Species', null, null, true);
//      $validators[] = new MIntegerValidator('speciesIdS'); 
//      $speciesIdS->setJsHint(_M('Enter the species id',$module));
//      $flds[]      = $speciesIdS;

//      $speciesDescriptionS = new MTextField('speciesDescriptionS', $this->getFormValue('speciesDescriptionS',$data->speciesDescriptionS), _M('',$module), FIELD_DESCRIPTION_SIZE);
//      $speciesDescriptionS->setReadOnly(true);
 //     $flds[]             = $speciesDescriptionS;

        $hctSpeciesS = new MHContainer('hctSpeciesS', $flds);
        $hctSpeciesS->setShowLabel(true);
        $fields[]  = $hctSpeciesS;
        unset($flds);
 

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->counterId     = $this->counterIdS->value;
        $filters->operatorId    = $this->operatorIdS->value;
        $filters->operatorName  = $this->operatorNameS->value;
        $filters->value         = $this->valueS->value;
        $filters->movementDate  = $this->movementDateS->value;
        $filters->operation     = $this->operationS->value; 
        $filters->speciesId     = $this->speciesIdS->value; 

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCounterMovementSearch',$filters);
        $business = $this->manager->getBusiness($module,'BusCounterMovement');
        $data = $business->searchCounterMovement($filters);
        $grdResults->setData($data);
        $this->addField($grdResults); 

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.counterMovementIdS.focus();');
        } 

    }

    /**
     * Event triggered when user chooses Print from the toolbar
     **/
    public function tbBtnPrint_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data     = $this->getTypesData();

        $RptCounterMovement = 'RptCounterMovementNew';
        $MIOLO->getClass($module, $RptCounterMovement);
        $report = new $RptCounterMovement($data);
        return;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinCounterMovement();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->{$var.'S'}->value;
        }
        return $data;
    }
}

?>
