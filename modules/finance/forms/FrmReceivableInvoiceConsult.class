<?php

/**
 *
 * This file handles the connection and actions for fiReceivableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/
 
$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('forms/FrmInvoiceConsult.class', 'finance');

/**
 * Form to search the finInvoice table
 */
class FrmReceivableInvoiceConsult extends FrmInvoiceConsult
{

    /**
     * Class constructor
     */
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = $this->module;
        $function = MIOLO::_request('function');
        $data     = $this->getFormData();

        $this->createInvoiceFields($data);
        
        $sendDateLabel = new MText('sendDateLabel', _M('Send date', $module).':');
        $sendDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $sendDate      = new MTextLabel('sendDate', $this->getFormValue('sendDate', $data->sendDate));
        $hctSendDate   = new MHContainer('hctSendDate', array($sendDateLabel, $sendDate));
        $field[] = $hctSendDate;
        
        $returnDateLabel = new MText('returnDateLabel', _M('Return date', $module).':');
        $returnDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $returnDate      = new MTextLabel('returnDate', $this->getFormValue('returnDate', $data->returnDate));
        $hctReturnDate   = new MHContainer('hctReturnDate', array($returnDateLabel, $returnDate));
        $field[] = $hctReturnDate;

        $returnFileLabel = new MText('returnFileId', _M('Return file', $module).':');
        $returnFileLabel->setWidth(FIELD_CONTAINER_SIZE);
        $returnFileId    = new MTextLabel('returnFileId', $this->getFormValue('returnFileId', $data->returnFileId));
        
        $fileNameLabel = new MText('fileName', _M('File name', $module).':');
        $fileName      = new MTextLabel('fileName', $this->getFormValue('fileName', $data->fileName));
        $hctFileName   = new MHContainer('hctFilename', array($fileNameLabel, $fileName));
        $field[]       = $hctFileName;
        
        $field[] = new MHiddenField('goto', MIOLO::_request('goto') ? MIOLO::_request('goto') : $this->getFormValue('goto', $goto));
       
        $field[] = new Separator('');
        
        $field3[] = new MVContainer('vctReceivableInvoice', $field);
        $fields[] = new MBaseGroup('bgReceivableInvoice', _M('Receivable invoice information', $module), $field3);
        $fields[] = new MSeparator('');
        
        $this->addFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Function to get information about invoice and set this on form
     */
    function getFormData()
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        $businessReceivableInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');

        if (!$invoiceId)
        {
            $explode = explode('-', MIOLO::_request('bankAccountContractId'));
            //bankInvoiceId, bankContractId, bankAccountId
            $invoiceId = $businessReceivableInvoice->getInvoiceIdByBankInvoiceAndBankContractAndBanAccount(MIOLO::_request('returnBankCode'), $explode[1], $explode[0]);
            if ( !$invoiceId )
            {
                $MIOLO->Information(_M('Invalid return bank code', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
            }
        }
        if (!$businessReceivableInvoice->verifyReceivableInvoice($invoiceId))
        {
            $MIOLO->Information(_M('Invalid receivable invoice code', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
        }

        $data = $businessReceivableInvoice->getReceivableInvoice($invoiceId);
        $data->invoiceId = $invoiceId;
        return $data;
    }
}

?>
