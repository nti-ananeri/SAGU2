<?php

/**
 *
 * This file handles the connection and actions for finStudentFinancing table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finStudentFinancing table
 */
class FrmStudentFinancingSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Student financing', $this->home, 'studentFinancing-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        // student financing id
        $studentFinancingLabelIdS = new MText('studentFinancingLabelIdS', _M('Id', $module).':');
        $studentFinancingLabelIdS->setWidth(FIELD_CONTAINER_SIZE);
        $studentFinancingIdS = new MTextField('studentFinancingIdS', $this->studentFinancingIdS->value, '', FIELD_ID_SIZE);
        $studentFinancingIdS->setJsHint(_M('Enter the student financing id',$module));
        $validators[] =  new MIntegerValidator('studentFinancingIdS', _M('Id', $module));
        $fields[] = new MHContainer('hctOperation', array($studentFinancingLabelIdS, $studentFinancingIdS));

		$fields[] = new MHiddenField('limbo');

        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Person', $module) . ':');
        $contractPersonLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $contractPersonLabelS;

        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->conditionUnblockSearch->contractPersonIdS), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack() );
        $contractPersonIdS->setJsHint(_M('Enter the person code',$module));
        $flds[]            = $contractPersonIdS;
        $validators[]      = new MIntegerValidator('contractPersonIdS', _M('Person id', $module), 'optional');

        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->conditionUnblockSearch->contractPersonNameS), _M('Name',$module), 30);
        $flds[]              = $contractPersonNameS;

        $hctPersonS = new MHContainer('hctContractS', $flds);
        $hctPersonS->setShowLabel(false);
        $fields[]   = $hctPersonS;
        unset($flds);

        $contractLabelS = new MText('contractLabelS', _M('Contract', $module) . ':');
        $contractLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $contractLabelS;

        $contractIdS  = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS'), _M('Contract',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), 'academic', 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract code',$module));
        $flds[]       = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', _M('Contract id', $module), 'optional');

        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->conditionUnblockSearch->contractCourseIdS), _M('Course',$module), FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $flds[]            = $contractCourseIdS;

        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->conditionUnblockSearch->contractCourseVersionS), _M('Version',$module), FIELD_ID_SIZE);
        $contractCourseVersionS->setReadOnly(true);
        $flds[]                = $contractCourseVersionS;

        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->conditionUnblockSearch->contractCourseNameS), _M('Description',$module), 30);
        $contractCourseNameS->setReadOnly(true);
        $flds[]              = $contractCourseNameS;

        $hctContractS = new MHContainer('hctContractS', $flds);
        $hctContractS->setShowLabel(false);
        $fields[]     = $hctContractS;
        unset($flds);


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->studentFinancingId      = $this->studentFinancingIdS->value;
        $filters->personId                = $this->contractPersonIdS->value;
        $filters->personName              = $this->contractPersonNameS->value;
        $filters->contractId              = $this->contractIdS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdStudentFinancingSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusStudentFinancing');
        $data       = $business->searchStudentFinancing($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);
        
        $data   = $business->getStudentFinancingBalance($filters);
		unset($fields);
        $data[0][0] = strlen((string)$data[0][0])>0 ? $data[0][0] : SAGU::formatNumber(0);
        $data[0][1] = strlen((string)$data[0][1])>0 ? $data[0][1] : SAGU::formatNumber(0);
        $totalS = new MText('totalS', _M('Total init value', $module).': ' . $data[0][0] . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . _M('Total current value', $module) . ': ' . $data[0][1] );
		$totalS->fontWeight = 'bold';
        $fields[]           = $totalS;
        $field              = new MDiv('divTotalS', $fields, null, 'align=right');
        $field->width       = '98%';
        $this->addField($field);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.studentFinancingIdS.focus();');
        }

    }

}

?>
