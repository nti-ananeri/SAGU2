<?php

/**
 * Receivable invoice remittance to bank 041 (Banrisul)
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control income forecast generation
 **/
class FrmRemittanceInvoice041 extends MForm
{
    private $home;
 // public $history;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct('Banrisul');
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        // Toolbar
        $fields[] = $toolBar;

        // Bank account info
        $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
        $data->bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $data->bankId        = '041';
        $dataBankAccount     = $businessBankAccount->listBankAccount($data);

        // Verify if the specific bank account is registered
        if ( is_array($dataBankAccount[0]) )
        {
            $field = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Bank account id', $module), $dataBankAccount);
            $field->setAutoSubmit(true);
            $fields[] = $field;
            $validators[] = new MRequiredValidator('bankAccountId', _M('Bank account id', $module));
        }
        else
        {
            $fields[] = new Separator(_M('No bank account registered. Please, register bank account, back on that process and continue.', $module));
            $fields[] = new MHiddenField('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId));
        }

        $bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $bankId = $businessBankAccount->getBankIdByBankAccountId($bankAccountId);
        // Obtain bank accounts, if have one selected generate the complete form
        if ( strlen((string)$bankId)>0 )
        {
            // Verify if the bank remittance exists
            $MIOLO->getClass($module, 'RemittanceInvoice');
            if (RemittanceInvoice::remittanceExists($bankId))
            {
                eval('  if (BANK_REMITTANCE_SEQUENCE_'.$bankAccountId.' > 0)
                        {
                            $dataSequence = BANK_REMITTANCE_SEQUENCE_'. $bankAccountId. ';
                            $dataSequence++;
                        }
                        else
                        {
                            $dataSequence = 1;
                        }
                     ');
                
                // Field for sequence file - Show the name
                $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
                $field = new MTextField('sequenceFile', $sequenceFile, _M('Sequence file', $module), FIELD_ID_SIZE);
                $fields[] = $field;

                // List all companies and show the specific company
                $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
                $dataCompany = $businessCompany->listCompany();

                if (is_array($dataCompany[0]))
                {
                    $fields[] = new MSelection('companyId', $this->getFormValue('companyId', $data->companyId) ? $this->getFormValue('companyId', $data->companyId) : DEFAULT_COMPANY_CONF, _M('Company', $module), $dataCompany);
                }
                else
                {
                    $fields[] = new Separator(_M('No company registered. Please, register company to back in this process and continue.', $module), $dataCompany);
                    $fields[] = new MHiddenField('companyId', $this->getFormValue('companyId', $data->companyId));
                }
               
                // Income source mode - JAVASCRIPT utilization
                $urlScript = $MIOLO->getActionURL('basic', 'html:scripts:sagu.js');
                $this->page->scripts->add($urlScript);

                $incomeSourceMode = array( array(_M('Unique income source', $module), 'true'),
                                           array(_M('All income sources', $module), 'false'));

                $incomeSourceModeText = new MText('incomeSourceLabel', _M('Income source mode', $module).':');
                $incomeSourceModeText->setWidth(FIELD_CONTAINER_SIZE);
                
                $data->rbgIncomeSourceMode = is_null($this->getFormValue('rbgIncomeSourceMode', $data->rbgIncomeSourceMode)) ? 'true' : $this->getFormValue('rbgIncomeSourceMode', $data->rbgIncomeSourceMode);
                
                $rbgIncomeSourceMode = new MRadioButtonGroup('rbgIncomeSourceMode', '', $incomeSourceMode, $data->rbgIncomeSourceMode, null, 'horizontal');

            
                $rbgIncomeSourceMode->setShowLabel(false);
           
                $rbgIncomeSourceMode->addAttribute('onClick', 'showElements(\''.$rbgIncomeSourceMode->name.'\',\'hctIncomeSource\')');
                
                $fields[] = new MHContainer('hctIncomeSourceLabel', array($incomeSourceModeText, $rbgIncomeSourceMode));
                
                $incomeSourceName = new MText('incomeSourceName', _M('Income source id', $module).':');
                $incomeSourceName->setWidth(FIELD_CONTAINER_SIZE);
                $incomeSource = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), '', FIELD_ID_SIZE, null, null, array('incomeSourceName'), 'finance', 'IncomeSource', null, true);
                $incomeSourceText = new MTextField('incomeSourceName', $this->getFormValue('incomeSourceName', $data->incomeSourceName), '', FIELD_DESCRIPTION_SIZE);
                $fields[] = new MHContainer('hctIncomeSource', array($incomeSourceName, $incomeSource, $incomeSourceText));

                // Dates group 1
                $beginMaturityDateLabel = new MText('beginMaturityDateLabel', _M('Begin maturity date', $module).':');
                $beginMaturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $beginMaturityDateLabel->setClass('m-caption m-caption-required');
                $beginMaturityDate = new MCalendarField('beginMaturityDate', $this->getFormValue('beginMaturityDate', $data->beginMaturityDate), '', FIELD_DATE_SIZE);
                $validators[] = new MDATEDMYValidator('beginMaturityDate', _M('Begin maturity date', $module), 'required');
                $fields[] = new MHContainer('hctInitMaturityDate', array($beginMaturityDateLabel, $beginMaturityDate ) );

                $endMaturityDateLabel = new MText('endMaturityDateLabel', _M('End maturity date', $module).':');
                $endMaturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $endMaturityDateLabel->setClass('m-caption m-caption-required');
                $endMaturityDate = new MCalendarField('endMaturityDate', $this->getFormValue('endMaturityDate', $data->endMaturityDate), '', FIELD_DATE_SIZE);
                $validators[] = new MDATEDMYValidator('endMaturityDate', _M('End maturity date', $module), 'required');
                
                $fields[] = new MHContainer('hctFimMaturityDate', array( $endMaturityDateLabel, $endMaturityDate));
                // Dates group 2
                $beginEmissionDateLabel = new MText('beginEmissionDateLabel', _M('Begin emission date', $module) . ':');
                $beginEmissionDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $beginEmissionDateLabel->setClass('m-caption m-caption-required');
                $beginEmissionDate = new MCalendarField('beginEmissionDate', $this->getFormValue('beginEmissionDate', $data->beginEmissionDate), '', FIELD_DATE_SIZE);
                $validators[] = new MDATEDMYValidator('beginEmissionDate', _M('Begin emission date', $module), 'required');
               
                $fields[] = new MHContainer('hctBeginEmissionDate', array($beginEmissionDateLabel, $beginEmissionDate));

               // Dates group 2
                $endEmissionDateLabel = new MText('andEmissionDateLabel', _M('End emission date', $module) . ':');
                $endEmissionDateLabel->setWidth(FIELD_CONTAINER_SIZE);
                $endEmissionDateLabel->setClass('m-caption m-caption-required');
                $endEmissionDate = new MCalendarField('endEmissionDate', $this->getFormValue('endEmissionDate', $data->endEmissionDate), '', FIELD_DATE_SIZE);
                $validators[] = new MDATEDMYValidator('endEmissionDate', _M('End emission date', $module), 'required');
               
                $fields[] = new MHContainer('hctEndEmissionDate', array($endEmissionDateLabel, $endEmissionDate));

                $businessPolicy = $MIOLO->getBusiness($module, 'BusPolicy');
                $dataPolicy = $businessPolicy->listPolicy();

//                $fields[] = new MSelection('month', $this->getFormValue('month', $data->month) ? $this->getFormValue('month', $data->month) : date('m'),  _M('Month', $module), SAGU::listMonths());

                $instructions = array( array(_M('Remittance',   $module), 1),
                                       array(_M('Pay off call', $module), 2) );
                $instructionsFieldLabel = new MText('instructionsFieldLabel', _M('Instruction', $module).':');
                $instructionsFieldLabel->setWidth(FIELD_CONTAINER_SIZE);
                $instructionsField = new MRadioButtonGroup('instruction', '', $instructions, is_null($this->getFormValue('instructions', $data->instructions)) ? 1 : $this->getFormValue('instructions', $data->instructions) , null, 'horizontal');
                $instructionsField->setShowLabel(false);
                $fields[] = new MHContainer('hctInstructionsField', array($instructionsFieldLabel, $instructionsField));

                $fields[] = new MTextField('invoiceMessage', $this->getFormValue('invoiceMessage', $data->invoiceMessage), _M('Invoice message', $module), FIELD_DESCRIPTION_SIZE);
                
                $businessMessage = $MIOLO->getBusiness($module, 'BusMessage');
                $fields[] = new MSelection('firstInstruction', $this->getFormValue('firstInstruction', $data->firstInstruction), _M('First instruction', $module), $businessMessage->listMessageCode($bankId));
                $fields[] = new MSelection('secondInstruction', $this->getFormValue('secondInstruction', $data->secondInstruction), _M('Second instruction', $module), $businessMessage->listMessageCode($bankId));
                $fields[] = new MTextField('daysToProtest', $this->getFormValue('daysToProtest', $data->daysToProtest), _M('Days to protest', $module), FIELD_ID_SIZE);

            }
            else
            {
                $fields[] = new MSeparator(_M('Sorry, this bank do not have support to generate remittances. Please, select other bank.', $module));
            }
        }
        else
        {
            $fields[] = new MSeparator(_M('Please, register a bank for this account to follow this process.', $module));
        }
    
        $this->setFields($fields);
        if( strlen((string)$validators) > 0)
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();
        $MIOLO->getClass($module, 'RemittanceInvoice041'); 
        unset($fields);
        $bankRemittance = new RemittanceInvoice041($data);

        
        //$dataGrid = $bankRemittance->getGridInformation();
                //          $fields[] = new MButton('getFile_button_click', _M('Get file', $module), $url);

        if(is_array($bankRemittance->history[0]))
        {
    //        $buttonGetFile = new MButton('btnGetFile', _M('Get file', $module));
    //        $fields[] = new MHContainer('hctButton', array($buttonGetFile));
            $this->setShowPostButton(false);
            
            $colNames = array( _M('Invoice id', $module), _M('Person id', $module), _M('Name', $module), _M('Value', $module)); 
            $fields[] = new MTableRaw(_M('Details for remittance bank @1', $module, '041'), $bankRemittance->history, $colNames, true);
            $this->addField($fields);
           
            $this->addField(new MHiddenField('fileId', $this->getFormValue('fileId', $bankRemittance->fileData->fileId)));
            if (strlen((string)$bankRemittance->fileData->file))
            {
                $this->addField(new MHiddenField('hiddenFile', urlencode($bankRemittance->fileData->file)));
                $this->addField(new MHiddenField('hiddenFileName', urlencode($bankRemittance->fileData->fileName)));
                $this->addField(new MSeparator('<hr>'));
                $this->addField(new MButton('btnGetFile', _M('Get file', $module)));
                $this->addField(new MSeparator(''));
            }
        }

    }

   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnGetFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fileContent = urldecode(stripslashes($this->getFormValue('hiddenFile')));
        SAGU::returnAsFile($this->getFormValue('hiddenFileName'), $fileContent, 'text/remittance-748');
    }


    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankAccountId       = $this->getFormValue('bankAccountId');
        $data->sequenceFile        = $this->getFormValue('sequenceFile');
        $data->companyId           = $this->getFormValue('companyId');
        $data->rbgIncomeSourceMode = $this->getFormValue('incomeSourceMode');
        
        if ($data->rbgIncomeSourceMode == '0')
        {
            $data->incomeSourceId = $this->getFormValue('incomeSourceId');
        }
        $data->beginMaturityDate   = $this->getFormValue('beginMaturityDate');
        $data->endMaturityDate     = $this->getFormValue('endMaturityDate');
        $data->beginEmissionDate   = $this->getFormValue('beginEmissionDate');
        $data->endEmissionDate     = $this->getFormValue('endEmissionDate');
        $data->instruction         = $this->getFormValue('instruction');
        $data->invoiceMessage      = $this->getFormValue('invoiceMessage');
        $data->firstInstruction    = $this->getFormValue('firstInstruction');
        $data->secondInstruction   = $this->getFormValue('secondInstruction');
        $data->daysToProtest       = $this->getFormValue('daysToProtest');
        return $data;
    }
}
?>
