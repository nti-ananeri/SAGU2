<?php

/**
 * Enroll tax report form
 *
 * @author Daniel Afonso Heisler [daniel.heisler@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2008
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmPrintInvoicesInLot extends MForm
{

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Print invoices in lot', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Print invoices in lot', $this->home, 'printInvoicesInLot-16x16.png', true);
        }
        
        //fim favoritos
        $fields[] = $toolBar;
        
        //data de vencimento
        $maturityDateLabelS = new MText('maturityDateLabelS', _M('Maturity date', $module) . ':');
        $maturityDateLabelS->setWidth(FIELD_LABEL_SIZE);

        $maturityDateLabel2S  = new MText('maturityDateLabel2S', _M('from', $module));

        $initialMaturityDateS = new MCalendarField('initialMaturityDateS', $this->initialMaturityDateS->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('initialMaturityDateS', _M('Maturity date', $module), 'optional');

        $maturityDateLabel3S  = new MText('maturityDateLabel3S', _M('to', $module));

        $endMaturityDateS = new MCalendarField('endMaturityDateS', $this->endMaturityDateS->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('endMaturityDateS', _M('Maturity date', $module), 'optional');

        $hctMaturityDateS = new MHContainer('hctMaturityDateS', 
                                            array($maturityDateLabelS, 
                                                  $maturityDateLabel2S, 
                                                  $initialMaturityDateS, 
                                                  $maturityDateLabel3S, 
                                                  $endMaturityDateS)
                                            );
        $hctMaturityDateS->setShowLabel(false);
        $fields[]         = $hctMaturityDateS;

        //data de emissão
        $emissionDateLabelS = new MText('emissionDateLabelS', _M('Emission date', $module) . ':');
        $emissionDateLabelS->setWidth(FIELD_LABEL_SIZE);

        $emissionDateLabel2S  = new MText('emissionDateLabel2S', _M('from', $module));

        $initialEmissionDateS = new MCalendarField('initialEmissionDateS', $this->initialEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('initialEmissionDateS', _M('Emission date', $module), 'optional');

        $emissionDateLabel3S  = new MText('emissionDateLabel3S', _M('to', $module));

        $endEmissionDateS = new MCalendarField('endEmissionDateS', $this->endEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('endEmissionDateS', _M('Emission date', $module), 'optional');

        $hctEmissionDateS = new MHContainer('hctEmissionDateS', array($emissionDateLabelS, $emissionDateLabel2S, $initialEmissionDateS, $emissionDateLabel3S, $endEmissionDateS));
        $hctEmissionDateS->setShowLabel(false);
        $fields[]         = $hctEmissionDateS;

        $module = 'academic';
        // person
        $personLabel = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
//        $personLabel->setClass('m-caption m-caption-required');

        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), null,FIELD_ID_SIZE, null, null,
            'personName',
            'basic', 'Person', null, null, true);
        $personId->setJsHint(_M('Select the person id', $module));
//        $validators[] = new MIntegerValidator('personId',_M('Person',$module), 'required');
        
        $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), null, FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]   = $hctPerson;

        //Course
        $courseLabel   = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;

        //Turn
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;

        //Unit
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', 
                                          $this->getFormValue('unitDescription', $data->unitDescription), 
                                          '', 
                                          FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));
        
        $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        
        $fields[]        = $hctUnit;
        
        $module = 'finance';
        
        //Operation
        $operationIdLabelS = new MText('operationIdLabel', _M('Operation id', $module).':'); 
        $operationIdLabelS->setWidth(FIELD_CONTAINER_SIZE); 
        
        $operationIdS = new MLookupTextField('operationIdS', 
                                             $this->getFormValue('operationIdS', $data->operationIdS), 
                                             '', 
                                             FIELD_ID_SIZE, 
                                             null, 
                                             null, 
                                             'operationDescriptionS', 
                                             $module, 
                                             'Operation', 
                                             null, 
                                             null, 
                                             true); 
        $operationIdS->setJsHint(_M('Enter the operation id', $module)); 

        $validators[] = new MIntegerValidator('operationIdS'); 
        
        $operationDescriptionS = new MTextField('operationDescriptionS', 
                                                $this->getFormValue('operationDescriptionS',$data->operationDescriptionS), 
                                                '', 
                                                FIELD_DESCRIPTION_SIZE); 
        $operationDescriptionS->setReadOnly(true); 
        
        $fields[]        = new MHContainer('hctOperationId', array($operationIdLabelS, $operationIdS, $operationDescriptionS)); 
        
        // Bank id
        $bankLabel = new MText('bankIdLabel', _M('Bank id', $module). ':');
        $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
        $bankId = new MLookupTextField('bankId', 
                                       $data->bankId->value, 
                                       '', 
                                       FIELD_ID_SIZE, 
                                       null,
                                       null, 
                                       array('bankDescription'), 
                                       $module, 
                                       'Bank', 
                                       null, 
                                       null, 
                                       true);
        $bankId->setJsHint(_M('Enter the bank id', $module));
        $bankDescription = new MTextField('bankDescription', 
                                          $this->bankDescription->value, 
                                          '', 
                                          FIELD_DESCRIPTION_SIZE);
        $bankDescription->setReadOnly(true);
        $cntBank = new MHContainer('cntBank', array($bankLabel, $bankId, $bankDescription));
        $fields[] = $cntBank;
        
        // Policy 
        $policyLabel = new MText('policyLabel', _M('Policy', $module). ':');
        $policyLabel->setWidth(FIELD_CONTAINER_SIZE);
        $policyId = new MLookupTextField('policyId', 
                                        $this->getFormValue('policyId', $data->policyId), 
                                        null, 
                                        FIELD_ID_SIZE, 
                                        null, 
                                        null, 
                                        'policyDescription', 
                                        'finance', 
                                        'Policy', 
                                        null, 
                                        null, 
                                        true);
        $policyId->setJsHint(_M('Select the policy id', $module));
        $validators[] = new MIntegerValidator('policyId', 
                                              _M('Policy', $module), 
                                              null /*'required'*/);
        $policyDescription = new MTextField('policyDescription', 
                                            $this->getFormValue('policyDescription',$data->policyDescription),
                                            null, 
                                            FIELD_DESCRIPTION_SIZE);
        $policyDescription->setReadOnly(true);
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $fields[]   = $hctPolicy;
        //Class
        $classLabel = new MText('classLabel', _M('Class','academic') . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Class id','academic'), FIELD_LOOKUPFIELD_SIZE, null, null, array('classNameS'), 'academic', 'Class', null, null, true);
        $classNameS = new MTextField('classNameS', $this->getFormValue('classNameS'), _M('Class name', 'academic'), FIELD_DESCRIPTION_SIZE);
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $classNameS));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;

        // Imprimir canhoto ?
        $printLeftHandedLabel = new MText('printLeftHandedLabel', _M('Print left-handed',$module) . '?');
        $printLeftHandedLabel->setClass('m-caption m-caption-required');
        $printLeftHandedLabel->setWidth(FIELD_CONTAINER_SIZE);

        $printLeftHanded      = $this->GetFormValue('printLeftHanded',$data->printLeftHanded) ? $this->GetFormValue('printLeftHanded',$data->printLeftHanded) : DB_FALSE;
        $printLeftHanded      = new MRadioButtonGroup('printLeftHanded', '', SAGU::listYesNo('1') , $printLeftHanded, null, 'horizontal');
        $printLeftHanded->SetShowLabel(false);
        $printLeftHanded->setAutoPostBack(false);

        $hctprintLeftHanded   = new MHContainer('hctprintLeftHanded', array($printLeftHandedLabel, $printLeftHanded));
        $fields[]             = $hctprintLeftHanded;

        //Search
        $fields[]         = new MButton('btnSearch',_M('Search',$module));
                                                                     
        $module = 'finance';
        $this->setShowPostButton(false);
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);
   
        $filters->startDate         = $this->getFormValue('initialMaturityDateS');
        $filters->endDate           = $this->getFormValue('endMaturityDateS');
        $filters->emissionStartDate = $this->getFormValue('initialEmissionDateS');
        $filters->personId          = $this->getFormValue('personId');
        $filters->emissionEndDate   = $this->getFormValue('endEmissionDateS');
        $filters->courseId          = $this->getFormValue('courseId');
        $filters->courseVersion     = $this->getFormValue('courseVersion');
        $filters->unitId            = $this->getFormValue('unitId');
        $filters->turnId            = $this->getFormValue('turnId');
        $filters->operationId       = $this->getFormValue('operationIdS');
        $filters->bankId            = $this->getFormValue('bankId');
        $filters->policyId          = $this->getFormValue('policyId');
        $filters->className         = $this->getFormValue('classNameS');
        $filters->classId           = $this->getFormValue('classId');
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPrintInvoicesInLot',$filters);
        
        $business = $this->manager->getBusiness($module,'BusInvoice');
        $GrdData = $business->searchInvoiceBtDates($filters);
        $grdResults->setData($GrdData);
        $this->addField($grdResults);
    
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.initialMaturityDateS.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function tbBtnPrint_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->startDate         = $this->getFormValue('initialMaturityDateS');
        $data->endDate           = $this->getFormValue('endMaturityDateS');
        $data->personId          = $this->getFormValue('personId');
        $data->emissionStartDate = $this->getFormValue('initialEmissionDateS');
        $data->emissionEndDate   = $this->getFormValue('endEmissionDateS');
        $data->courseId          = $this->getFormValue('courseId');
        $data->courseVersion     = $this->getFormValue('courseVersion');
        $data->unitId            = $this->getFormValue('unitId');
        $data->turnId            = $this->getFormValue('turnId');
        $data->operationId       = $this->getFormValue('operationIdS');
        $data->bankId            = $this->getFormValue('bankId');
        $data->policyId          = $this->getFormValue('policyId');
        $data->className         = $this->getFormValue('classNameS');
        $data->classId           = $this->getFormValue('classId');
        
        $business = $this->manager->getBusiness($module,'BusInvoice');
        $GrdData = $business->searchInvoiceBtDates($data);
        foreach($GrdData as $item)
        {
            if((float)$item[4] > (float)MINIMAL_VALUE_TO_PRINT_INVOICE)
            {
                $filters->invoices[$item[2]]->invoiceId[] = $item[0];
            }
        }
        $RptPrintInvoice = 'RptPrintInvoicesInLot';
        $filters->printLeftHanded = $this->getFormvalue('printLeftHanded');

        $MIOLO->getClass($module, $RptPrintInvoice);
        $report = new $RptPrintInvoice($filters);
     }
}
?>
