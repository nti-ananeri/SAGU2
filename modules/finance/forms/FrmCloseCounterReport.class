<?php

/**
 * Close counter report
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@gmail.com]
 *
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2008
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmCloseCounterReport extends MForm
{

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Close counter', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Print invoices in lot', $this->home, 'printInvoicesInLot-16x16.png', true);
        }
        
		//fim favoritos
        $fields[] = $toolBar;
        
        //data de emissão
        $emissionDateLabelS = new MText('emissionDateLabelS', _M('Emission date', $module) . ':');
        $emissionDateLabelS->setWidth(FIELD_LABEL_SIZE);

        $emissionDateLabel2S  = new MText('emissionDateLabel2', _M('from', $module));

        $initialEmissionDateS = new MCalendarField('initialEmissionDate', $this->initialEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]         = new MDATEDMYValidator('initialEmissionDate', _M('Emission date', $module), 'optional');

        $emissionDateLabel3S  = new MText('emissionDateLabel3', _M('to', $module));

        $endEmissionDateS = new MCalendarField('endEmissionDate', $this->endEmissionDateS->value, null, FIELD_DATE_SIZE);
        $validators[]     = new MDATEDMYValidator('endEmissionDate', _M('Emission date', $module), 'optional');

        $hctEmissionDateS = new MHContainer('hctEmissionDateS', array($emissionDateLabelS, $emissionDateLabel2S, $initialEmissionDateS, $emissionDateLabel3S, $endEmissionDateS));
        $hctEmissionDateS->setShowLabel(false);
        $fields[]         = $hctEmissionDateS;

        unset($flds);

        $operatorIdLabel = new MText('operatorIdLabel', _M('Operator',$module).':');
        $operatorIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$operatorIdLabel->setClass('m-caption m-caption-required');
        $operatorIdLabel->setClass('m-caption');
        $flds[]           = $operatorIdLabel;

        $operatorId = new MLookupTextField('operatorId', $this->getFormValue('operatorId', $data->operatorId), _M('',$module), FIELD_ID_SIZE, null, null, 'operatorName', 'basic', 'PhysicalPersonEmployee', null, null, true);
//        $operatorId = new MTextField('operatorId', $this->getFormValue('operatorId', $data->operatorId), _M('',$module), FIELD_ID_SIZE);

        $operatorId->setJsHint(_M('Enter the operator id',$module));
        //$validators[] = new MIntegerValidator('operatorId', _M('Operator',$module), 'required');
        if($loginUser->idperson != null)
        {
            $operatorId->setReadOnly(true);
        }
        $flds[]      = $operatorId;

        $operatorName = new MTextField('operatorName', $this->getFormValue('operatorName', $data->operatorName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $operatorName->setReadOnly(true);
        $flds[]        = $operatorName;

        $hctOperator = new MHContainer('hctOperator', $flds);
        $hctOperator->setShowLabel(true);
        $fields[]  = $hctOperator;
        unset($flds);

		//Search
		$fields[]		 = new MButton('btnSearch',_M('Search',$module));
															         
        $module = 'finance';
        $this->setShowPostButton(false);
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);
   
        $filters->initialDate = $this->getFormValue('initialEmissionDate');
        $filters->endDate   = $this->getFormValue('endEmissionDate');
        $filters->operatorId        = $this->getFormValue('operatorId');
		$grdResults = $MIOLO->getUI()->getGrid($module,'GrdCounterMovementReport',$filters);
		
		$business = $this->manager->getBusiness($module,'BusCounterMovement');
		$GrdData = $business->searchCounterMovementGrid($filters);
		$grdResults->setData($GrdData);
		$this->addField($grdResults);
    
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.initialEmissionDate.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function tbBtnPrint_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->initialDate = $this->getFormValue('initialEmissionDate');
        $data->endDate   = $this->getFormValue('endEmissionDate');
        $data->operatorId		 = $this->getFormValue('operatorId');
		
		$business = $this->manager->getBusiness($module,'BusCounterMovement');
		$GrdData = $business->searchCounterMovement($data);
		$RptCounterMovement = 'RptCounterMovement';

        $MIOLO->getClass($module, $RptCounterMovement);
        $report = new $RptCounterMovement($GrdData);
     }
}
?>
