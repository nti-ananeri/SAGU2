<?php
/**
 *
 * @author Giovani Murilo Dantas Corr�a [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 19/06/2009
 *
 * \b Organization: \n
 * iSolution - Solucoes em TI \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2008 iSolution \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 **/

class FrmDefaulterReportForDateNew extends MForm
{
	private $home;
	public $showForm;

	/**
	 * Class constructor
	 **/
	function __construct($data)
	{
		$this->showForm = true;
		$module = MIOLO::getCurrentModule();

		$this->home   = $data->home;

		parent::__construct(_M('Defaulter', $module));
		$this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

		$this->eventHandler();
	}
	public function createFields()
	{
		$MIOLO    = MIOLO::getInstance();
		$module   = MIOLO::getCurrentModule();
		$action   = MIOLO::getCurrentAction();
		$function = MIOLO::_request('function');

		$toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
		$toolBar->disableButton('tbBtnDelete');
		$toolBar->disableButton('tbBtnPrint');
		$toolBar->disableButton('tbBtnSave');
		$toolBar->disableButton('tbBtnNew');
		$toolBar->disableButton('tbBtnSearch');


		//favoritos
		$enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
		$disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
		$url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
		$toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

		if ( MIOLO::_request('event') == 'bookmark' )
		{
			$MIOLO->getClass('basic', 'access');
			access::insert('Defaulter', $this->home, 'defaulter-16x16.png', true);
		}
		//fim favoritos

		$fields[] = $toolBar;
		$this->setFields($fields);
		$this->defineFields();


		// Botao do primeiro Grupo.
		unset ($fields);

		//Report mode
		$printModeLabel = new MText('printModeLabel', _M('Print mode', $module));
		$printModeLabel->setWidth(FIELD_CONTAINER_SIZE);
		$printModeLabel->setClass('m-caption m-caption-required');
		$listAnalyticalSynthetic[] = array( _M('Analytical', $module), '1');
		$listAnalyticalSynthetic[] = array( _M('Synthetic', $module), '2');
		$printMode      = new MRadioButtonGroup('printMode', '', $listAnalyticalSynthetic, $this->GetFormValue('printMode', '2'), null, 'horizontal');
		$printMode->SetShowLabel(false);
		$printMode->SetAutoPostBack(false);
		$hctPrintMode  = new MHContainer('hctPrintMode', array($printModeLabel, $printMode));
		$hctPrintMode->setShowLabel(false);
		$fields[]      = $hctPrintMode;

		$btnGenerate = new MButton('btnGenerate', _M('Generate', $module));
		$fieldss1[] = new MHContainer('hctBtn', array($btnGenerate));
		$fields[]  = $fieldss1;

		$divError = new MDiv('divError', $errorMsgs, null, 'align="center"');
		$fields[] = $divError;

		$fields[] = new MSeparator('');
		$this->addFields($fields);
		$this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
		//$this->page->onLoad('document.' . $this->name . '.periodIdvd.focus();');
	}
	/**
	 * Default method to define fields
	 **/
	public function defineFields()
	{
		$MIOLO    = MIOLO::getInstance();
		$module   = MIOLO::getCurrentModule();
		$action   = MIOLO::getCurrentAction();
		$function = MIOLO::_request('function');

		// in�cio 1� grupo

		// data inicial
		$startDateLabel = new MText('startDateLabel', _M('Start date',$module).':');
		$startDateLabel->setWidth(FIELD_CONTAINER_SIZE);
		$startDateLabel->setClass('m-caption m-caption-required');
		$startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('',$module), FIELD_DATE_SIZE);
		$startDate->setJsHint(_M('Enter the start date',$module));
		$validators[] = new MDATEDMYValidator('startDate', null, 'required');
		$hctStartDate = new MHContainer('hctStartDate', array($startDateLabel, $startDate));
		$hctStartDate->setShowLabel(true);
		$field1[] = $hctStartDate;

		// data final
		$endDateLabel = new MText('endDateLabel', _M('End date',$module).':');
		$endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
		$endDateLabel->setClass('m-caption m-caption-required');
		$endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('',$module), FIELD_DATE_SIZE);
		$endDate->setJsHint(_M('Enter the end date',$module));
		$validators[] = new MDATEDMYValidator('endDate', null, 'required');
		$hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
		$hctEndDate->setShowLabel(true);
		$field1[] = $hctEndDate;

		// course
		if ( MODULE_ACADEMIC_INSTALLED == 'YES')
		{
			$courseLabel = new MText('courseLabel', _M('Course',$module).':');
			$courseLabel->setWidth(FIELD_CONTAINER_SIZE);
			$courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), null,FIELD_ID_SIZE, null, null, array('courseVersion','courseName','','','','','grp2UnitId'), $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseId'), true);
			$courseId->setJsHint(_M('Select the course id', $module));
			$courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), null,FIELD_ID_SIZE);
			$couseVersionDescription = new MText('couseVersionDescription',_M('Version',$module));
			$courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), null, FIELD_DESCRIPTION_SIZE);
			$courseName->setReadOnly(true);
			$hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $couseVersionDescription, $courseVersion, $courseName));
			$hctCourse->setShowLabel(true);
			$field1[]   = $hctCourse;
				
			//Turn
			$turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
			$turnLabel->setWidth(FIELD_CONTAINER_SIZE);
			$businessTurn = $MIOLO->getBusiness('basic', 'BusTurn');
			$turnId   = new MSelection('turnId',
			$this->getFormValue('turnId',$data->turnId),
			NULL,
			$businessTurn->listTurn());

			$hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId));
			$hctTurn->setShowLabel(true);
			$field1[]        = $hctTurn;

			//Unit

			$unitLabel = new MText('unitLabel', _M('Unit',$module).':');
			$unitLabel->setWidth(FIELD_CONTAINER_SIZE);
			$business = $MIOLO->getBusiness('basic','BusUnit');
			$unitId = new MSelection('unitId', $this->getFormValue('unitId',$data->unitId), '', $business->listUnit());
			$unitId->setJsHint( _M('Choose the unit',$module) );

			$hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
			$hctUnit->setShowLabel(true);
			$field1[]        = $hctUnit;


			//Class
			$lookupClassFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');

			$classLabelS   = new MText('classLabelS', _M('Class','academic') . ':');
			$classLabelS->setWidth(FIELD_CONTAINER_SIZE);

			$classId     =  new MLookupTextField('classId',  $this->getFormValue('classId', $data->classId),   null,FIELD_ID_SIZE, null, null, array('classNameS'),                                          'academic', 'Class',                         null, $lookupClassFilters,   true);
			//$courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId),  null,FIELD_ID_SIZE, null, null, array('courseVersion','courseName','','','','','grp2UnitId'), $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseId'), true);
			$classId->setJsHint(_M('Enter the class id',$module));

			$classNameS    = new MTextField('classNameS', $this->getFormValue('classNameS', $data->classNameS), '', FIELD_DESCRIPTION_SIZE);
			//$classNameS->setReadOnly(true);
			$classNameS->setJsHint(_M('Class name',$module));

			$hctClassS     = new MHContainer('hctClassS', array($classLabelS, $classId, $classNameS));
			$hctClassS->setShowLabel(true);
			$field1[]      = $hctClassS;

		}

		$businessIncomeSource = $MIOLO->getBusiness($module, 'BusIncomeSource');
		$dataIncomeSource     = $businessIncomeSource->listIncomeSource();
		$incomeSourceLabel    = new MText('incomeSourceLabel', _M('Income source', $module).':');
		$incomeSourceLabel->setClass('m-caption m-caption-required');
		$incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE);
		$incomeSource         = new MMultiSelection('incomeSourceId', is_array($this->getFormValue('incomeSourceId', $data->incomeSourceId)) ? $this->getFormValue('incomeSourceId', $data->incomeSourceId) : array($this->getFormValue('incomeSourceId', $data->incomeSourceId)), '', $dataIncomeSource, true, null, 5);
		$field1[] = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSource));

		$validators[]   = new MRequiredValidator('incomeSourceId', _M('Income source', $module), 'required');

		// First group
		//        $field1[]  = $personName;
		$field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
		$fields1[] = new MVContainer('container1', $field1);

		$fields[]  = new MBaseGroup('mbgDefaulter', _M('Defaulter', $module), $fields1);
		$this->setShowPostButton(false);
		$this->addFields($fields);
		$this->setLabelWidth(FIELD_LABEL_SIZE);
		$this->setValidators($validators);
	}

	/**
	 * Event triggered when button search is clicked
	 */
	public function btnGenerate_click($sender = null)
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();

		//$data->periodId       = $this->getFormValue('periodId');
		//$data->personId       = $this->getFormValue('personId');
		$data->startDate      = $this->getFormValue('startDate');
		$data->endDate        = $this->getFormValue('endDate');
		$data->courseId       = $this->getFormValue('courseId');
		$data->courseVersion  = $this->getFormValue('courseVersion');
		$data->turnId         = $this->getFormValue('turnId');
		$data->unitId         = $this->getFormValue('unitId');
		$data->classId        = $this->getFormValue('classId');
		$data->incomeSourceId = $this->incomeSourceId->value;
		$data->reportType     = $this->printMode->value;

		$class = 'RptDefaulter';
		$MIOLO->getClass($module, $class);
		$report = new $class($data);

		$this->page->setAction($MIOLO->getActionURL($module, $action));
		return;
	}
}
?>
