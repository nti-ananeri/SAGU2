<?php
/**
 *
 * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Giovani Murilo Dantas Correa [giovani@isolution.inf.br]
 *
 * @since
 * Class created on 16/03/2010
 *
 * \b Organization: \n
 * iSolution - Solucoes em TI \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2008 iSolution \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 **/

class FrmDebtConfession extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Debt confession', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
             $this->defineFields();
             $this->eventHandler();
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        //$toolBar->hideButton('tbBtnNew');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Debt confession', $this->home, 'debtConfession-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;

        //botÃ£o de pesquisa de saldo da pessoa
        $fields[]     = new MHiddenField('btnSearchValue', $this->getFormValue('btnSearchValue'));

        // person
        $personLabel  = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personLabel->setClass('m-caption m-caption-required');
        $fld[]        = $personLabel;

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), _M('Person id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'contractId', 'personName', 'courseId', 'courseName', 'courseVersion', 'unitId', 'limbo', 'accountSchemeId', 'accountSchemeDescription', 'costCenterId', 'costCenterDescription'), 'finance', 'PersonContract', null, array('personId' => 'personId'), !$this->page->isPostBack() );
        $personId->setJsHint(_M('Enter the person code',$module));
        $fld[]        = $personId;
        $validators[] = new MIntegerValidator('personId', _M('Person id', $module), 'required');

        $personName   = new MTextField('personName', $this->getFormValue('personName',$data->personName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $fld[]        = $personName;

        $personId->addAttribute('onBlur', 'callAgreements()');
        $personId->addAttribute('onChange', 'callAgreements()');

        $hctPerson    = new MHContainer('hctPerson', $fld);
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;
 

        $businessAgreement  = $MIOLO->getBusiness('finance', 'BusAgreementConfirmation');
        $agreementData  = $businessAgreement->listAgreements($this->personId->value);

        $agreementId    = new MSelection('agreementId', $this->getFormValue('agreementId', $data->agreementId), _M('Agreement', 'finance'),  $agreementData);
        $validators[] = new MRequiredValidator('agreementId', _M('Agreement id', $module));
        $fields[]       = $agreementId;

        //carimbos (stamp)
        $businessStamp  = $MIOLO->getBusiness('basic', 'BusStamp');
        $stampData      = $businessStamp->listStamp();

        $stampId        = new MSelection('stampId', $this->getFormValue('stampId', $data->stampId), _M('Stamp', 'academic'),  $stampData);
        $validators[] = new MRequiredValidator('stampId', _M('Stamp', 'basic'));
        $fields[]       = $stampId;

        $btnSearch    = new MButton('btnPrintConfession', _M('Print',$module) . ' Confissao');
        $fields[]       = $btnSearch;

        $btnSearch    = new MButton('btnPrintPromissoria', _M('Print',$module) . ' Promissoria');
        $fields[]       = $btnSearch;

        $fields[]       = new Separator('');

        $MIOLO->getRequiredJS4Ajax();
        // Ajax calls
        $this->page->addScript('x/x_core.js');
        $this->page->addScript('cpaint/cpaint.inc.js');
        $this->page->addScript('m_lookup_ajax.js');
        $url = $MIOLO->getActionURL( 'basic', 'html:scripts:sagu.js' );
        $this->page->scripts->add($url);

        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $jsCode = 
<<< HERE
            function callAgreements() 
            {
                cpaint_call('$url', "POST", "btnAgreement_click", xGetElementById('personId').value, returnAgreements, "TEXT");
            } 
            function returnAgreements(result)
            {
                
                var elSel =  xGetElementById('agreementId');
                var i;
                for (i = elSel.length - 1; i>=0; i--) 
                {
                    elSel.remove(i);
                }

                var posF = 0;
                var posI = 0;
                var valueX;
                while( result.indexOf(")", posF+1) != -1 )
                {
                    var posII = 0;
                    var posFF = 0;
                    var elOptNew = document.createElement('option');
                    posI = result.indexOf("(", posF);
                    posF = result.indexOf(")", posF+1);
                    valueX = result.substr(posI+1, (posF-posI)-1); 
                    elOptNew.text = valueX.substr(valueX.indexOf(",")+1);
                    elOptNew.value = valueX.substr(0, valueX.indexOf(","));
                    try 
                    {
                        elSel.add(elOptNew, null); // standards compliant; doesn't work in IE
                    }
                    catch(ex) 
                    {
                        elSel.add(elOptNew); // IE only
                    }
                }
            }
HERE;
        $this->page->addJSCode($jsCode);


        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        if ( strlen((string)$this->getFormValue('personId',$data->personId)) == 0 )
        {
            $this->page->onLoad('document.' . $this->name . '.personId.focus();');
        }
        else
        {
            $this->page->onLoad('document.' . $this->name . '.entrance.focus();');
        }
    }


    function btnPrintConfession_click($sender = null)
    {
        $this->tbBtnPrint_click();
    }

    function btnPrintPromissoria_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->personId        = $this->personId->value;
        $data->agreementId     = $this->agreementId->value;
        $data->stampId         = $this->stampId->value;

        $class  = 'RptPromissoryNote';
        $MIOLO->getClass($module, $class);
        $report = new $class($data);

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

    public function btnAgreement_click($go)
    {
        $MIOLO  = MIOLO::getInstance();
        $a = implode(',', $go);
        $a = explode(',', $a);
        $bus = $MIOLO->getBusiness('finance', 'BusAgreementConfirmation');
        $result = $bus->listAgreements($a[0]);
        foreach ( $result as $item => $value )
        {
            print('('.implode(',',$value).')');
        }
        die();
    }

    function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->personId        = $this->personId->value;
        $data->agreementId     = $this->agreementId->value;
        $data->stampId         = $this->stampId->value;

        $class  = 'RptDebtConfession';
        $MIOLO->getClass($module, $class);
        $report = new $class($data);

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

}

?>
