<?php

/**
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPrintInvoice extends MForm
{

    private $module;


    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;


        parent::__construct(_M('Print invoice', $module));

        // hide the 'Submit' button
    //        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

   /**
    * Default method to define fields
   **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $data->invoiceId = strlen((string)$data->invoiceId)>0 ? $data->invoiceId : MIOLO::_request('_invoiceId', 'GET');
        $goto     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
		if ( strlen((string)$data->invoiceId) > 0 )
		{
			$businessInvoice = $MIOLO->getBusiness($module,'BusPrintInvoice');
			$invoiceData = $businessInvoice->getPrintInvoice($data);
		}
		if( strlen((string)$invoiceData->name) > 0 )
		{
			$invoiceIdLabel   = new MText('invoiceIdLabel', _M('Invoice id', $module).':');
            $invoiceIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $invoiceId_        = new MTextLabel('invoiceIdLabel', $data->invoiceId);
            $invoiceIdHidden  = new MHiddenField('invoiceId', $data->invoiceId);
            $invoiceId = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceId_, $invoiceIdHidden));
			
		}
        else
        {
            // Invoice id
            $invoiceId    = new MTextField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId), _M('Invoice id', $module), FIELD_ID_SIZE);
            $validators[] = new MIntegerValidator('invoiceId');
        }
        
		
        $submitButton = new MButton('submit_button', _M('Submit', $module), 'SUBMIT');
        $hct[] = $submitButton;
        if (strlen((string)$goto)>0)
        {
            $backButton = new MButton('backButton', _M('Back', $module), $goto);
            $hct[] = $backButton;
        }
		if ( defined('USE_INVOICE_TEST') && USE_INVOICE_TEST == 'TRUE' )
		{
	        $businessBank = $MIOLO->getBusiness($module, 'BusBank');
		    $dataBank     = $businessBank->listBank();
	        $bankIdLabel  = new MText('bankIdLabel', _M('Bank', $module).':');
	        $bankIdLabel->setWidth(FIELD_CONTAINER_SIZE);
	        $bankIdLabel->setClass('m-caption m-caption-required');
	        $bankId       = new MSelection('bankId', $this->getFormValue('bankId', $data->bankId) ? $this->getFormValue('bankId', $data->bankId) : DEFAULT_INVOICE_BANK, '', $dataBank, true);
			$bankId->setAutoPostBack(true);
		    $fieldsMain   = new MHContainer('hctBanktId', array($bankIdLabel, $bankId));
	        $validators[] = new MRequiredValidator('bankId', _M('Bank', $module));

		    $fils->bankId = $this->getFormValue('bankId', $data->bankId) ? $this->getFormValue('bankId', $data->bankId) : DEFAULT_INVOICE_BANK;

	        $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
		    $dataBankAccount     = $businessBankAccount->listBankAccount($fils);
	        $bankAccountIdLabel  = new MText('bankAccountIdLabel', _M('Bank account', $module).':');
	        $bankAccountIdLabel->setWidth(FIELD_CONTAINER_SIZE);
	        $bankAccountIdLabel->setClass('m-caption m-caption-required');
		    $bankAccountId       = new Mselection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId) ? $this->getFormValue('bankAccountId', $data->bankAccountId) : DEFAULT_BANK_ACCOUNT_ID, '', $dataBankAccount, false);
			$fieldsMain2  = new MHContainer('hctBankAccountId', array($bankAccountIdLabel, $bankAccountId));
	        $validators[] = new MRequiredValidator('bankAccountId', _M('Bank account', $module));
	        $fields[] = $invoiceId;
		    $fields[] = $fieldsMain;
	        if ( $this->getFormValue('bankId') || DEFAULT_INVOICE_BANK )
		    {
			    $fields[] = $fieldsMain2;
	        }
		}
		else
		{
	        $fields[] = $invoiceId;
			$nameLabel   = new MText('nameLabel', _M('Name', $module).':');
            $nameLabel->setWidth(FIELD_CONTAINER_SIZE);
            $name_        = new MTextLabel('name_', $invoiceData->name);
            $fields[] = new MHContainer('hctName', array($nameLabel, $name_));
			$bankLabel   = new MText('bankLabel', _M('Bank', $module).':');
            $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bank        = new MTextLabel('bank', $invoiceData->bankName);
            $fields[] = new MHContainer('hctBank', array($bankLabel, $bank));
			$accountLabel   = new MText('accountLabel', _M('Account', $module).':');
            $accountLabel->setWidth(FIELD_CONTAINER_SIZE);
            $account        = new MTextLabel('account', $invoiceData->accountNumber . ' - ' . $invoiceData->accountNumberDigit);
            $fields[] = new MHContainer('hctAccount', array($accountLabel, $account));
			$branchLabel   = new MText('branchLabel', _M('Branch', $module).':');
            $branchLabel->setWidth(FIELD_CONTAINER_SIZE);
            $branch       = new MTextLabel('branch', $invoiceData->branchNumber.' - '.$invoiceData->branchNumberDigit);
            $fields[] = new MHContainer('hctBranch', array($branchLabel, $branch));
			$accordLabel   = new MText('accordLabel', _M('Accord', $module).':');
            $accordLabel->setWidth(FIELD_CONTAINER_SIZE);
            $accord       = new MTextLabel('accord', ( strlen((string)$invoiceData->accord) > 0 ? $invoiceData->accord : 'NULO' ) );
            $fields[] = new MHContainer('hctAccord', array($accordLabel, $accord));
		    $fields[] = new Separator('');
		}
	    $fields[] = new Separator('');
		$fields[] = new MHContainer('hctButtons', $hct);
       
        $this->setFields($fields);
        $this->setValidators($validators);
	    $this->setLabelWidth(FIELD_LABEL_SIZE);
		$this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
		
		if ( strlen((string)$this->invoiceData) > 0 )
		{
			$this->page->onLoad('document.'.$this->name.'.invoiceId.focus();');
		}
     }

    /**
     * Event used when submit_button is clicked
     */
    public function submit_button_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->invoiceId = strlen((string)$this->getFormValue('invoiceId'))>0 ? $this->getFormValue('invoiceId') : (MIOLO::_request('_invoiceId') ? MIOLO::_request('_invoiceId') : MIOLO::_request('_invoiceId', 'GET'));
        $filters->bankAccountId = $this->getFormValue('bankAccountId') ? $this->getFormValue('bankAccountId') : MIOLO::_request('bankAccountId', 'GET');
        $filters->bankId = $this->getFormValue('bankId') ? $this->getFormValue('bankId') : MIOLO::_request('bankId', 'GET');

        $RptPrintInvoice = 'RptPrintInvoice';
        $MIOLO->getClass($module, $RptPrintInvoice);
        $report = new $RptPrintInvoice($filters);
    }
}

?>
