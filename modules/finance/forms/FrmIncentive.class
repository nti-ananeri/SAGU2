<?php
/**
 *
 * This file handles the connection and actions for finIncentive table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 29/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmIncentive extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        
        $fields[] = $toolBar;
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $incentiveId = MIOLO::_request('incentiveId');

            $business = $MIOLO->getBusiness($module, 'BusIncentive');
            $data     = $business->getIncentive($incentiveId);

            $fields[]  = new MHiddenField('incentiveId', $incentiveId);
            $fields[]  = new MTextLabel('incentiveId', $data->incentiveId, _M('Incentive id', $module));
        }
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Person',$module).':');
        $contractPersonIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonIdLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractPersonIdLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->personId), _M('',$module), FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), array('personId' => 'contractPersonId'), true);
        $validators[]     = new MIntegerValidator('contractPersonId', _M('Person',$module), 'required');
        $contractPersonId->setJsHint(_M('Enter the person id',$module));
        $flds[]           = $contractPersonId;

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->incentiveSearch->contractPersonName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);       
       
        $contractIdLabel = new MText('contractIdLabel', _M('Contract',$module).':');
        $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractIdLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractIdLabel;
 
        $contractId = new MLookupTextField('contractId', $data->contractId ? $data->contractId : $this->getFormValue('contractId', $data->contractId), _M('',$module), FIELD_ID_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), 'academic', 'Contract', null, array('personId' => 'contractPersonId'),  true);
        $contractId->setJsHint(_M('Enter the contract id',$module));
        $validators[]     = new MIntegerValidator('contractId', _M('Contract',$module), 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->incentiveSearch->contractCourseId), _M('',$module), FIELD_ID_SIZE);
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->incentiveSearch->contractCourseVersion), _M('',$module), 3);
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->incentiveSearch->contractCourseName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);
       
        $insentiveTypeIdLabel = new MText('insentiveTypeIdLabel', _M('Incentive type',$module).':');
        $insentiveTypeIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $insentiveTypeIdLabel->setClass('m-caption m-caption-required');
        $flds[]           = $insentiveTypeIdLabel;

        $incentiveTypeId = new MLookupTextField('incentiveTypeId', $this->getFormValue('incentiveTypeId',$data->incentiveTypeId), _M('',$module), FIELD_ID_SIZE, null, null, 'incentiveTypeDescription', $module, 'IncentiveType', null, null, true);
        $incentiveTypeId->setJsHint(_M('Enter the incentive type id',$module));
        $validators[]    = new MIntegerValidator('incentiveTypeId', _M('Incentive type',$module), 'required');
        $flds[]          = $incentiveTypeId;

        $incentiveTypeDescription = new MTextField('incentiveTypeDescription', $this->getFormValue('incentiveTypeDescription',$this->incentiveSearch->incentiveTypeDescription), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $incentiveTypeDescription->setReadOnly(true);
        $flds[]                   = $incentiveTypeDescription;

        $hctIncentive = new MHContainer('hctIncentive', $flds);
        $hctIncentive->setShowLabel(true);
        $fields[]  = $hctIncentive;
        unset($flds);               

        $suporterIdLabel = new MText('suporterIdLabel', _M('Supporter',$module).':');
        $suporterIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $suporterIdLabel->setClass('m-caption m-caption-required');
        $flds[]           = $suporterIdLabel;
 
        $supporterId  = new MLookupTextField('supporterId', $this->getFormValue('supporterId',$data->supporterId), _M('',$module), FIELD_ID_SIZE,  null, null, 'supporterName', 'basic', 'Person', null, null, true);
        $supporterId->setJsHint(_M('Enter the supporter id',$module));
        $validators[] = new MIntegerValidator('supporterId', _M('Supporter',$module), 'required');
        $flds[]       = $supporterId;

        $supporterName = new MTextField('supporterName', $this->getFormValue('supporterName',$this->incentiveSearch->supporterName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $supporterName->setReadOnly(true);
        $flds[]        = $supporterName;

        $hctSupporter = new MHContainer('hctSupporter', $flds);
        $hctSupporter->setShowLabel(true);
        $fields[]  = $hctSupporter;
        unset($flds); 
        
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('Start date',$module), FIELD_DATE_SIZE);
        $startDate->setJsHint(_M('Enter the start date',$module));
        $startDate->setValidator(new MDATEDMYValidator('startDate', _M('Start date', $module), 'required'));

        $fields[] = $startDate;                

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('End date', $module), 'required'));
        $fields[] = $endDate;      
       
        // get Yes and No for Radio Button
        $messagesType =  SAGU::listTrueFalse(1);
        $valueIsPercentLabel = new MText('valueIsPercentLabel', _M('Value is percent',$module).':');
        $valueIsPercentLabel->setWidth(FIELD_CONTAINER_SIZE);
        $valueIsPercentLabel->setClass('m-caption m-caption-required');
        $valueIsPercent = $this->GetFormValue('valueIsPercent', $data->valueIsPercent ? $data->valueIsPercent : t );

        $valueIsPercent = new MRadioButtonGroup('valueIsPercent', '', $messagesType, $valueIsPercent, null, 'horizontal');
        $valueIsPercent->SetShowLabel(false);
        $hctValueIsPercent = new MHContainer('hctValueIsPercent', array($valueIsPercentLabel, $valueIsPercent));
        $fields[]  = $hctValueIsPercent;

        $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), _M('Value', $module), FIELD_ID_SIZE);
        $validators[] =   new MFloatValidator('value', _M('Value', $module), FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
        $fields[] = $value;
       
        // get Yes and No for Radio Button
        $messagesType =  SAGU::listTrueFalse(1);
        $agglutinateLabel = new MText('agglutinateLabel', _M('Agglutinate',$module).':');
        $agglutinateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $agglutinateLabel->setClass('m-caption m-caption-required');
        $agglutinate = $this->GetFormValue('agglutinate', $data->agglutinate ? $data->agglutinate : f );

        $agglutinate = new MRadioButtonGroup('agglutinate', '', $messagesType, $agglutinate, null, 'horizontal');
        $agglutinate->SetShowLabel(false);
        $hctAgglutinate = new MHContainer('hctAgglutinate', array($agglutinateLabel, $agglutinate));
        $fields[]  = $hctAgglutinate;

        $costCenterIdLabel = new MText('costCenterIdLabel', _M('Cost center',$module));
        $costCenterIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $costCenterIdLabel;
 
        $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId), _M('',$module), FIELD_ID_SIZE,  null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Enter the supporter id',$module));
        $flds[]           = $costCenterId;

        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$this->incentiveSearch->costCenterDescription), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $flds[]           = $costCenterDescription;

        $hctCostCenter = new MHContainer('hctCostCenter', $flds);
        $hctCostCenter->setShowLabel(true);
        $fields[]  = $hctCostCenter;
        unset($flds);         

        if ( in_array($function, array('update')) )
        {
            // Cancellation date
            $fields[] = new MCalendarField('cancellationDate', $this->getFormValue('cancellationDate', $data->cancellationDate), _M('Cancellation date', $module), FIELD_DATE_SIZE);
        }        
        
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lfinModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.contractPersonId.focus();');

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
        $this->description->value = $this->getFormValue('descriptionS') ? $this->getFormValue('incentiveDescriptionS') : '';
    }
    
        /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'incentiveId'     => MIOLO::_request('incentiveId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusIncentive');
        $ok = $business->deleteIncentive(MIOLO::_request('incentiveId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();

        $business      = $MIOLO->getBusiness('finance', 'BusFinancialAid');
        $incentiveType = $business->getFinancialAid($this->incentiveTypeId->value);

        if ( strtoupper($incentiveType->requireCostCenter) == strtoupper(DB_TRUE) &&
             strlen((string)$data->costCenterId) == 0 )
        {
            $msg = _M('This incentive requires a cost center',$module);
        }
        else
        {

            $business = $MIOLO->getBusiness($module, 'BusIncentive');

            if ( $function == 'update' )
            {
                $ok  = $business->updateIncentive($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {
                $ok  = $business->insertIncentive($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }

        if ( $ok )
        {
            $opts = array('incentiveIdS'=>$data->incentiveId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            if ( strlen((string)$msg) == 0 )
            {
                $msg  = _M('Error executing requested operation.', $module);
            }
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    
    public function getTypesData()
    {
        $data = new finIncentive();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->incentiveDescription->value;
        }

        return $data;
    }

}

?>
