<?php

/**
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmRemittanceAutomaticDebit748 extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Remittance automatic debit to Sicredi (748)', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $toolBar = new MToolBar( 'toolBar', $MIOLO->getActionURL($module, $action) );

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave' );
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');

        // Favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Remittance automatic debit to Sicredi (748)', $this->home, 'remittanceAutomaticDebit748-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;
        $data->bankId = '748'; 
        $fields[] = new MHiddenField('bankId', '748');

        $busBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');

        $field = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Bank account id', $module), $busBankAccount->listBankAccount($data));
        $field->setAutoSubmit(true);
        $fields[] = $field;
        $validators[] = new MRequiredValidator('bankAccountId');

        $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
        $bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $bankId = $businessBankAccount->getBankIdByBankAccountId($bankAccountId);

        if ( strlen((string)$bankId)>0 )
        {
            eval('  if (SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'.$bankId.' > 0)
                            {
                                $dataSequence = SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'. $bankId. ';
                                $dataSequence++;
                            }
                            else
                            {
                                $dataSequence = 1;
                            }
                ');
    
            // FIELD - Sequence File
            $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
            $sequenceFileLabel = new MText('sequenceFileLabel', _M('Sequence file', $module).':');
            $sequenceFileLabel->setWidth(FIELD_CONTAINER_SIZE);
            $sequenceFileLabel->setClass('m-caption m-caption-required');
            $sequenceFile      = new MTextField('sequenceFile', $sequenceFile, '', FIELD_ID_SIZE);
            $validators[] = new MIntegerValidator('sequenceFile', '', 'required');
            $fields[] = new MHContainer('hctSequenceFile', array($sequenceFileLabel, $sequenceFile));
    
            $businessCompany = $MIOLO->getBusiness('basic', 'BusCompany');
            $dataCompany = $businessCompany->listCompany();
    
    
            // Initial maturity date
            $initialMaturityDateLabel = new MText('initialMaturityDateLabel', _M('Initial maturity date', $module).':');
            $initialMaturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $initialMaturityDateLabel->setClass('m-caption m-caption-required');
            $initialMaturityDate      = new MCalendarField('initialMaturityDate', $this->getFormValue('initialMaturityDate', $data->initialMaturityDate), '', FIELD_DATE_SIZE);
            $fields[]                 = new MHContainer('hctMaturityDate', array($initialMaturityDateLabel, $initialMaturityDate));
            $validators[]  = new MDateDMYValidator('initialMaturityDate', _M('Initial maturity date', $module), 'required');

            // Data de vencimento final
            $finalMaturityDateLabel = new MText('finalMaturityDateLabel', _M('Final maturity date', $module).':');
            $finalMaturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $finalMaturityDateLabel->setClass('m-caption m-caption-required');
            $finalMaturityDate      = new MCalendarField('finalMaturityDate', $this->getFormValue('finalMaturityDate', $data->finalMaturitydate), '', FIELD_DATE_SIZE);
            $fields[]               = new MHContainer('hctFinalMaturityDate', array($finalMaturityDateLabel, $finalMaturityDate));
            $validators[]  = new MDateDMYValidator('finalMaturityDate', _M('Final maturity date', $module), 'required');
            
            unset($field);
            $receiveDiscountLabel = new MText('receiveDiscountLabel', _M('Receive discount', $module).':');
            $receiveDiscountLabel->setWidth(FIELD_CONTAINER_SIZE);
            $field[] = $receiveDiscountLabel;
            $receiveDiscount = new MRadioButtonGroup('receiveDiscount', '', SAGU::listYesNo(1), $this->getFormValue('receiveDiscount', $data->receiveDiscount) ? $this->getFormValue('receiveDiscount', $data->receiveDiscount) : 't', null, 'horizontal');
            $receiveDiscount->setShowLabel(false);
            $field[] = $receiveDiscount;
            $fields[] = $field;
    
            // Defaulter maturity date
            $defaulterMaturityDateLabel = new MText('defaulterMaturityDateLabel', _M('Limit date for defaulters', $module).':');
            $defaulterMaturityDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $defaulterMaturityDateLabel->setClass('m-caption m-caption-required');
            $defaulterMaturityDate      = new MCalendarField('defaulterMaturityDate', $this->getFormValue('defaulterMaturityDate', $data->defaulterMaturityDate), '', FIELD_DATE_SIZE);
            $validators[]  = new MDateDMYValidator('defaulterMaturityDate', _M('Limit date for defaulters', $module), 'required');
            $fields[]                   = new MHContainer('hctDefaulterMaturityDate', array($defaulterMaturityDateLabel, $defaulterMaturityDate));
            
            $fields[] = new MSeparator( '- ' . _M('If you want that debit initiates in debit date for maturity date of pupil\'s invoices, leave this field blank.', $module));
            $fields[] = new MSeparator( '- ' . _M('If you want that debit automatic initiate in the same date for all pupils for this remittance, inform this date in this field.', $module) . ' ');
            $debitDate = new MCalendarField('debitDate', $this->getFormValue('debitDate', $data->debitDate), _M('Debit date', $module),FIELD_DATE_SIZE);
            $fields[] = $debitDate;

            $fields[] = new MSeparator('');
            $fields[] = new MButton('generate', _M('Generate', $module), 'SUBMIT');
        }

        $fields[] = new MSeparator('');
        
        $fields[] = new MSeparator('');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
    }

    /**
     * Get this action when submit button on this form is clicked
     */
    public function generate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data = $this->getTypesData();
        $MIOLO->getClass($module, 'RemittanceAutomaticDebit748');
        
        $automaticDebit = new RemittanceAutomaticDebit748($data);
        $invoiceData = $automaticDebit->returnInvoiceData();
        
        $this->addField(new MSeparator('<hr>'));
        if (is_array($invoiceData->invoiceRemittance))
        {
            $cols = array(_M('Person id', $module), _M('Person name', $module),_M('Invoice id', $module), _M('Maturity date', $module), _M('Value', $module));
            $tableRawInvoices    = new MTableRaw(_M('Invoices processed to automatic debit', $module), $invoiceData->invoiceRemittance, $cols);
            $tableRawInvoices->setAlternate(true);
            $tableRawInvoices->addAttribute('width=\"100%\"');
            $this->addField($tableRawInvoices);
            $this->addField(new MSeparator('<hr>'));
        }
        
        if (is_array($invoiceData->invoiceIncentives))
        {
            $cols = array(_M('Person id', $module), _M('Person name', $module), _M('Invoice id', $module), _M('Maturity date', $module), _M('Value', $module), _M('Incentive', $module));
       
            $tableRawInvoicesOut = new MTableRaw(_M('Invoices processed in incentive', $module), $invoiceData->invoiceIncentives, $cols);
            $tableRawInvoicesOut->setAlternate(true);
            $tableRawInvoicesOut->setAttributes('width=\"100%\"');
            $this->addField($tableRawInvoicesOut);
            $this->addField(new MSeparator('<hr>'));
        }
       
        if (is_array($invoiceData->invoiceTotal))
        {
            $cols = array(_M('Maturity date', $module), _M('Number of debits', $module));
            $tableRawTotal = new MTableRaw(_M('Total by maturity date', $module), $invoiceData->invoiceTotal, $cols);
            $tableRawTotal->setAttributes('width=\"100%\"');
            $tableRawTotal->setAlternate(true);
            $this->addField($tableRawTotal);
            $this->addField(new MSeparator('<hr>'));
        }
        
        $fileContent = $automaticDebit->returnString();
        if (strlen((string)$fileContent))
        {
            $this->addField(new MHiddenField('hiddenData', urlencode($fileContent)));
            $this->addField(new MSeparator(''));
            $this->addField(new MButton('btnFile', _M('Get file', $module)));
        }
    }
   
   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $fileContent = urldecode(stripslashes($this->getFormValue('hiddenData')));
        SAGU::returnAsFile('remessa_'.date(dmY).'.txt', $fileContent, 'text/remittance-748');
    }


    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankId                = $this->getFormValue('bankId');
        $data->bankAccountId         = $this->getFormValue('bankAccountId');
        $data->initialMaturityDate   = $this->getFormValue('initialMaturityDate');
        $data->finalMaturityDate     = $this->getFormValue('finalMaturityDate');
        $data->defaulterMaturityDate = $this->getFormValue('defaulterMaturityDate');
        $data->debitDate             = $this->getFormValue('debitDate');
        $data->receiveDiscount       = $this->getFormValue('receiveDiscount');
        $data->sequenceFile          = $this->getFormValue('sequenceFile');
        
        return $data;
    }
}
?>
