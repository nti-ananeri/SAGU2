<?php
/**
 * Diverse consultation form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmDiverseConsultation extends MForm
{
    private $home;
    public  $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Assorted queries', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        
        if (($f = $this->page->request('cpaint_function')) != "") 
        {
            $this->showForm = false;
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
             $this->showForm = true;        
             $this->defineFields();
             $this->eventHandler();
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field1[]      = $personIdLabel;

        $field1[]      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', 10, null, null, array('personName'), 'basic', 'Person', null, null, true);
        $validators[]  = new MIntegerValidator('personId', _M('Person id', $module));

        $personName    = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $field1[]      = $personName;

        $fields1[] = new MHContainer('container11', $field1);
        unset ($field1);

        //income source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Income source id', $module).':');
        $incomeSourceLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field1[]          = $incomeSourceLabel;

        $field1[]      = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), '', 10, null, null, array('incomeSourceDescription'), 'finance', 'IncomeSource', null, null, true);
        $validators[]  = new MIntegerValidator('incomeSourceId', _M('Income source id', $module));

        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription', $data->incomeSourceDescription), '', FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescription->setReadOnly(true);
        $field1[]                = $incomeSourceDescription;

        $fields1[] = new MHContainer('container111', $field1);
        unset ($field1);

        // Only open
        $onlyOpenLabel = new MText('listOnlyOpenLabel', _M('List only open invoices', $module).':');
        $onlyOpenLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $onlyOpen      = new MCheckBox('onlyOpen', '1', '', strlen((string)$this->getFormValue('onlyOpen'))>0 ? $this->getFormValue('onlyOpen') : false);
        $field1[]      = $onlyOpenLabel;
        $field1[]      = $onlyOpen;
        $fields1[]     = new MHContainer('container12', $field1);
        $hct1[]        = new MVContainer('vctFields1', $fields1);
        $fields[]      = new MBaseGroup('mbgFilterPerson', _M('Filter titles for a person', $module), $hct1);

        // Invoice
        $invoiceIdLabel = new MText('invoiceIdLabel', _M('Invoice id', $module).':');
        $invoiceIdLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field2[]       = $invoiceIdLabel;
        $field2[]       = new MTextField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId), '', FIELD_ID_SIZE);
        $fields2_[]     = new MHContainer('container21', $field2);
        $validators[]   = new MIntegerValidator('invoiceId', _M('Invoice id', $module));
        
        // Bank invoice Id
        $returnBankCodeLabel = new MText('returnBankCodeLabel', _M('Return bank code', $module).':');
        $returnBankCodeLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field3[]            = $returnBankCodeLabel;
        $field3[]            = new MTextField('returnBankCode', $this->getFormValue('returnBankCode', $data->returnBankCode), '', 20);
        $validators[]        = new MIntegerValidator('returnBankCode', _M('Return bank code', $module));

        // Bank contract Id e bank account id
        $businessBankAccountContract = $MIOLO->getBusiness('finance', 'BusBankAccountContract');
        $dataBankAccountContract     = $businessBankAccountContract->listBankAccountContract2();

        $bankAccountContractId = new Mselection('bankAccountContractId', $this->getFormValue('bankAccountContractId', $data->bankAccountContractId), '', $dataBankAccountContract, false);
        $field3[]   = new MHContainer('hctBankAccountContract', array($bankAccountContractIdLabel, $bankAccountContractId));
        $fields2_[] = new MHContainer('container3', $field3);
        $fields2_[] = new MSeparator('');

        //adiciona os filtros
        $fields2[]  = new MVContainer('mvcFilters', $fields2_);
       
        $fields[]   = new MBaseGroup('mbgFilterByCodes', _M('Filter a invoice by Sagu code or return bank code', $module), $fields2);

        unset($field1);
        unset($fields2);
        unset($fields1);

        //Policy
        $policyIdLabel  = new MText('policyIdLabel', _M('Policy id', $module).':');
        $policyIdLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field1[]       = $policyIdLabel;
        $policyId_       = new MLookupTextField('policyId_', $this->getFormValue('policyId_', $data->policyId_), '', 10, null, null, array('policyDescription'), 'finance', 'Policy', null, null, true);
        $policyId_->addAttribute('onBlur', 'callUpdateValue()');
        $policyId_->addAttribute('onChange', 'callUpdateValue()');
        $field1[]       =   $policyId_;
        $policyDescription  = new MTextField('policyDescription_', $this->getFormValue('policyDescription_', $data->policyDescription), '', FIELD_DESCRIPTION_SIZE);
        $policyDescription->setReadOnly(true);
        $field1[]       = $policyDescription;
        $fields1[]      = new MHContainer('containerDebitPrev', $field1);
        unset($field1);
//        $fields1[] = new MSeparator('');
        //Maturity
        $fields1[]      = new MHContainer('containerValue', $field1);
        unset($field1);
        $maturityDateLabel     = new MText('maturityDateLabel', _M('Maturity date', $module).':');
        $maturityDateLabel->setWidth(FIELD_CONTAINER_SIZE +40);
        $field1[] = $maturityDateLabel;
        $maturityDate_ = new MCalendarField('maturityDate_', $this->getFormValue('maturityDate_', $data->maturityDate_), null,FIELD_DATE_SIZE);
        $maturityDate_->addAttribute('onBlur', 'callUpdateValue()');
        $maturityDate_->addAttribute('onChange', 'callUpdateValue()');
        $field1[] = $maturityDate_;
        $endDateLabel     = new MText('endDateLabel', _M('End date', $module).':');
        $field1[] = $endDateLabel;
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), null,FIELD_DATE_SIZE);
        $endDate->addAttribute('onBlur', 'callUpdateValue()');
        $endDate->addAttribute('onChange', 'callUpdateValue()');
        $field1[] = $endDate;
        $fields1[]      = new MHContainer('containerDates', $field1);
        unset($field1);
        //Value
        $valueLabel     = new MText('valueLabel', _M('Value', $module).':');
        $valueLabel->setWidth(FIELD_CONTAINER_SIZE + 40);
        $field1[]       = $valueLabel;
        $value_       = new MTextField('value_', $this->getFormValue('value_', $data->value_), '', FIELD_ID_SIZE);
        $value_->addAttribute('onBlur', 'callUpdateValue()');
//        $value->addAttribute('onChange', 'callUpdateValue()');
        $field1[] = $value_;
        $labelResult     = new MText('resultLabel', _M('Result', $module).':');
//        $labelResult->setWidth(FIELD_CONTAINER_SIZE + 40);

        $field1[] = $labelResult;
        $resultValue = new MTextField('resultValue', $this->getFormValue('resultValue', $data->resultValue), null,FIELD_DATE_SIZE);
        $resultValue->setReadOnly(true);
        $field1[] = $resultValue;
        $fields1[]      = new MHContainer('resultContainer', $field1);
        $hct2[]        = new MVContainer('vctFields2', $fields1);
        $fields[]   = new MBaseGroup('mbgroupDebitPrev', _M('Cálculo de previsão de débitos', $module), $hct2);
        unset ($field1);

        $btnSearch  = new MButton('btnSearch',_M('Search', $module));
        $fields[]   = $btnSearch;
        
        $fields[]  = new MSeparator('');
        $this->setShowPostButton(false);
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);
        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');
        $MIOLO->getRequiredJS4Ajax();
        // Ajax calls
        $this->page->addScript('x/x_core.js');
        $this->page->addScript('cpaint/cpaint.inc.js');
        $this->page->addScript('m_lookup_ajax.js');
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());

        $code = '
            function callUpdateValue() 
            {
                if(xGetElementById(\'value_\').value.length == 0 || xGetElementById(\'policyId_\').value.length == 0 || xGetElementById(\'maturityDate_\').value.length == 0 || xGetElementById(\'endDate\').value.length == 0 )
                {
                    return false;
                }
                var args = new 
                    Array(  xGetElementById(\'value_\').value.replace(\',\', \'.\'), 
						    xGetElementById(\'policyId_\').value, 
							xGetElementById(\'maturityDate_\').value, 
							xGetElementById(\'endDate\').value);
                cpaint_call("' . $url . '", "POST", "btnUpdateValue_click", args, returnUpdateValues, "TEXT");
            } 
            function returnUpdateValues(result)
            {
                xGetElementById(\'resultValue\').value = result;
            }
        ';
        $this->page->AddJsCode($code);
        // End ajax calls
 

    }
    public function btnUpdateValue_click($go)
    {
        $MIOLO  = MIOLO::getInstance();
        $a = implode(',',$go);
        $a = explode(',', $a);
        list($data->value_, $data->policyId_, $data->maturityDate_, $data->endDate) = $a;
        if(strlen((string)$data->value_) == 0 || strlen((string)$data->policyId_) == 0 || strlen((string)$data->maturityDate_) == 0 || strlen((string)$data->endDate) == 0 )
        {
            print null;
            die();
        }
        $bus = $MIOLO->getBusiness('finance', 'BusPayableType');
        $sql ='SELECT ROUND(balanceWithPoliciesForValue('.$data->value_.'::numeric, TO_DATE(\''.$data->maturityDate_.'\', \''.MASK_DATE.'\'), TO_DATE(\''.$data->endDate.'\', \''.MASK_DATE.'\'),'.$data->policyId_.'::int ), '.REAL_ROUND_VALUE.')';
        $result = $bus->db->query($sql);
        print $result[0][0];
        die();
    }
    /**
     * Event triggered when button search is clicked 
     */
     public function btnSearch_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $personId       = $this->getFormValue('personId');
        $incomeSourceId = $this->getFormValue('incomeSourceId');
        $invoiceId      = $this->getFormValue('invoiceId');
        $returnBankCode = $this->getFormValue('returnBankCode');
        $bankAccountContractId = $this->getFormValue('bankAccountContractId');

        if (strlen((string)$personId)>0)
        {
            $filled['personConsultation'] = $personId;
        }
        if (strlen((string)$invoiceId)>0)
        {
            $filled['invoiceId'] = $invoiceId;
        }
        if (strlen((string)$returnBankCode)>0)
        {
            $filled['returnBankCode']        = $returnBankCode;
            $filled['bankAccountContractId'] = $bankAccountContractId;
        }
        if ( count($filled)>1 && !$filled['returnBankCode'] && !$filled['bankAccountContractId'] )
        {
            $fields[] = new MText('message', '<b>'._M('More than one search field is filled. Please fill one field by search.', $module).'</b>', 'red');
            $fields[] = new MSeparator('');
            $this->addField(new MDiv('divMessage', $fields, null, 'align="center"'));
        }
        else
        {
            if(is_array($filled))
            {
                $fkeys = array_keys($filled);
                if ($fkeys[0] == 'personConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                elseif($fkeys[0] == 'returnBankCode')
                {
                    $this->showForm = false;
                    $MIOLO->InvokeHandler($module, 'report/receivableInvoiceConsult');
                }
                elseif($fkeys[0] == 'invoiceId')
                {
                    $this->showForm = false;
                    $MIOLO->InvokeHandler($module, 'report/receivableInvoiceConsult');
                }
            }
            else
            {
                $fields[] = new MText('message', '<b>'._M('Please, fill at least one field by search.', $module).'</b>', 'red');
                $fields[] = new MSeparator('');
                $this->addField(new MDiv('divMessage', $fields, null, 'align="center"'));
            }
        }
     }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function personConsultation_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();
        $ui     = $MIOLO->GetUI();

        $businessReceivableInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');
        $dataGrid                  = $businessReceivableInvoice->listInvoicesForPerson($data);

        // Totalizations
        $businessPerson   = $MIOLO->getBusiness('basic', 'BusPerson');
        $dataPerson       = $businessPerson->getPersonName($this->getFormValue('personId', $data->personId));
        $data->personName = $dataPerson;

        if (is_array($dataGrid))
        {
            $field1[] = new MSeparator('');
            $this->addField($field1[count($field1)-1]);           

            $ffield1 = new MText('titleInvoice', '<b>'._M('Invoices for', $module).':</b> '.$data->personId.' - '.$data->personName);
            $field   = new MDiv('divDescInvoice', $ffield1, null, 'align="center"');
            $this->addField($field);
            
            // Main links (about person)
            if ( MODULE_ACADEMIC_INSTALLED == 'YES' )
            { 
                $ffield1  = new MOpenWindow('lnkContract', _M('Contract', $module), $MIOLO->getActionURL('academic', 'main:report:contractList', null, array('personId'=>$data->personId)));
                $fields[] = $ffield1;
                $ffield1  = new MLabel(' - ');
                $fields[] = $ffield1;
                $ffield1  = new MOpenWindow('lnkInformation', _M('Information', $module),  $MIOLO->getActionURL($module, 'main:personInformation', null , array('personId'=>$data->personId) ) );
                $fields[] = $ffield1;
                $ffield1  = new MLabel(' - ');
                $fields[] = $ffield1;
            }
            $ffield1  = new MOpenWindow('lnkAgreements', _M('Agreements', $module), $MIOLO->getActionURL($module, 'main:personAgreements', null, array('personId'=>$data->personId)));
            $fields[] = $ffield1;
            $ffield1  = new MLabel(' - ');
            $fields[] = $ffield1;
            $ffield1  = new MOpenWindow('lnkCloseAllTitles', _M('Execute agreements', $module),  $MIOLO->getActionURL($module, 'main:closeAllInvoices', null, array('personId'=>$data->personId, 'personName'=>$data->personName)));
            $fields[] = $ffield1;
            $ffield1  = new MLabel(' - ');
            $fields[] = $ffield1;
            $ffield1  = new MOpenWindow('lnkPayments', _M('Payments', $module),  $MIOLO->getActionURL($module, 'main:showsPayments', null, array('personId'=>$data->personId, 'personName'=>$data->personName)  ) );
            $fields[] = $ffield1;
  
            $field = new MDiv('divOptions', $fields, null, 'align="center"');
            $field->addAttribute('width', '99%');
            
            $this->addField($field);
            
            // Main links end
            $field = new MDiv('divSeparator1',  '<hr>', null, 'align="center"');
            $field->setWidth('99%');
            $this->addField($field);

            $businessIncentive = $MIOLO->getBusiness($module, 'BusIncentive');
            $checkDetails      = $businessIncentive->getSpecialIncentive($data->personId);
            if (is_array($checkDetails[0]))
            {
                $cols = array(_M('Incentive Name', $module),  _M('Period', $module), _M('Status', $module));
                $incentiveInfo = new MTableRaw(_M('Incentive info', $module), $checkDetails, $cols);
                $incentiveInfo->setAlternate(true);
                $this->addField($incentiveInfo);

                $field = new MDiv('divSeparator1',  '<hr>', null, 'align="center"');
                $field->setWidth('99%');
                $this->addField($field);
            }      
                 
            // Totalizations
            $dataTotal = $businessReceivableInvoice->totalizationInvoicesForPerson($data->personId);
            if (is_array($dataTotal))
            {

                foreach ($dataTotal as $dt)
                {
                    $dt1[] = $dt[1];
                    $dt2[] = $dt[2];
                    $dt3[] = $dt[3];

                    if ( $dt[4] == 'C' )
                    {
                        $strCheck  = '[' . _M('With funds', $module) . '] ';
                        $imgPath = $ui->getImage('finance', 'checkGreen.png');
                    }
                    elseif ( $dt[4] == 'P' )
                    {
                        $strCheck  = '[' . _M('To be payed', $module) . '] ';
                        $imgPath = $ui->getImage('finance', 'checkYellow.png');
                    }
                    elseif ( $dt[4] == 'S' )
                    {
                        $strCheck  = '[' . _M('No funds', $module) . '] ';
                        $imgPath = $ui->getImage('finance', 'checkBlack.png');
                    }
                    elseif ( $dt[4] == 'D' )
                    {
                        $strCheck  = '[' . _M('Returned', $module) . '] ';
                        $imgPath = $ui->getImage('finance', 'checkRed.png');
                    }
                    elseif ( $dt[4] == '-' )
                    {
                        $strCheck  = '[' . _M('No checks', $module) . '] ';
                        $imgPath = $ui->getImage('finance', 'checkWhite.png');
                    }
                    $string = new MImage('imgCheck', $strCheck, $imgPath);
                    $dt4 .= $string->generate();

                }

                $dataTotal[] = array('<b>'._M('Total', $module).'</b>',
                                     SAGU::calcNumber(implode(' + ', $dt1), true),
                                     SAGU::calcNumber(implode(' + ', $dt2), true),
                                     SAGU::calcNumber(implode(' + ', $dt3), true),
                                     $dt4 . $dt4 . $dt4 . $dt4 . $dt4 . $dt4
                                    );

                $col1 = new MDiv('col1', _M('Collection type', $module), null, 'align="center"');
                $col2 = new MDiv('col2', _M('Nominal value',   $module), null, 'align="center"');
                $col3 = new MDiv('col3', _M('Open value',      $module), null, 'align="center"');
                $col4 = new MDiv('col4', _M('Value updated',   $module), null, 'align="center"');
                $col5 = new MDiv('col5', _M('Checks resume',   $module), null, 'align="center"');

                $cols = array($col1->generate(),
                              $col2->generate(),
                              $col3->generate(),
                              $col4->generate(),
                              $col5->generate()
                             );

                foreach ($dataTotal as $key => $dT)
                {
                    for ($x=1; $x<=4; $x++)
                    {
                        $dTx = new MDiv('value'.$key.$x, $dT[$x], null, 'align="center"');
                        $dTx->addAttribute('align', 'right');
                        $dataTotal[$key][$x] = $dTx->generate(); 
                    }
                }
                $fieldCollection = new MTableRaw('', $dataTotal, $cols);
                $fieldCollection->setAlternate(true);
                $this->addField($fieldCollection);
            }
            // End totalizations
            if (is_array($dataGrid))
            {
                foreach ( $dataGrid as $key => $dG )
                {
                    if(count($dataGrid2[$dG->periodInfo]) > 0 ) 
                    {
                        $dataGrid2[$dG->periodInfo] = array_merge( $dataGrid2[$dG->periodInfo], $dG->data );
                    }
                    else
                    {
                        $dataGrid2[$dG->periodInfo] = $dG->data ;
                    }
                }
                krsort($dataGrid2);
                foreach ($dataGrid2 as $key => $dG2)
                {
                    // Generate the grid
                    $dG->periodInfo = $key;
                    $dG->data       = $dG2;
                    $data->periodId = $dG->periodInfo;
                    $field2[] = $MIOLO->getUI()->getGrid($module, 'GrdDiverseConsultationPerson', $data);
                    $field2[count($field2)-1]->setClose(null);

                    $url = $MIOLO->getActionURL('academic', 'main', null, array('personId'=>$data->personId, 'periodId'=>$dG->periodInfo, 'event'=>'btnSearch_click'));
                    $academicData = new MLink('academicData'.$dG->periodInfo, _M('Consult curricular component', $module), $url);

                    unset($str_);
                    if ( count($dG->data) > 0 )
                    {
                        $u = 0;
                        foreach ( $dG->data as $nvcs )
                        {
                            $str_[]  = $nvcs[1];
                            $str2_[] = $dG->periodInfo . '[' . $u . ']';
                            $u++;
                        }
                    }

                    $url2 = $MIOLO->getActionURL('finance', 'main:report:printPeriodInvoices', null, array('personId'=>$data->personId, 'periodId'=>$dG->periodInfo, 'invoiceId'=>urlencode(serialize($str_)), 'selected'=>urlencode(serialize($str2_)), 'event'=>'btnSearch_click', 'formId' => $this->name));
                    $url3 = $MIOLO->getActionURL('finance', 'main:report:deletePeriodInvoices', null, array('personId'=>$data->personId, 'periodId'=>$dG->periodInfo, 'invoiceId'=>urlencode(serialize($str_)), 'selected'=>urlencode(serialize($str2_)), 'event'=>'btnSearch_click', 'formId' => $this->name));
                    $url4 = $MIOLO->getActionURL('finance', 'main:report:closePeriodInvoices', null, array('personId'=>$data->personId, 'periodId'=>$dG->periodInfo, 'invoiceId'=>urlencode(serialize($str_)), 'selected'=>urlencode(serialize($str2_)), 'event'=>'btnSearch_click', 'formId' => $this->name));
                    $printInvoice  = new MOpenWindow('printInvoice' . $dG->periodInfo, _M('Print selected invoices', $module), $url2);
                    $deleteInvoice = new MOpenWindow('deleteInvoice' . $dG->periodInfo, _M('Delete selected invoices', $module), $url3);
                    $closeInvoice  = new MOpenWindow('deleteInvoice' . $dG->periodInfo, _M('Close selected invoices', $module), $url4);

                    $gridTitle = (is_null($dG->periodInfo) || strlen((string)trim($dG->periodInfo)) == 0) ? '&nbsp;&nbsp;&nbsp;['._M('No semester registered', $module).']' : '&nbsp;&nbsp;&nbsp;['._M('Semester', $module).': '.$dG->periodInfo.'] - '.(MODULE_ACADEMIC_INSTALLED == 'YES' ? $academicData->generate() : '') . '&nbsp;&nbsp;' . $printInvoice->generate() . '&nbsp;&nbsp;' . $deleteInvoice->generate() . '&nbsp;&nbsp;' . $closeInvoice->generate();
                    
                    $field2[count($field2)-1]->setTitle($gridTitle, '', 'red');

                    $field2[count($field2)-1]->setData($dG->data);
                    $field2[count($field2)-1]->setFooter($ffields);
                    $this->addField($field2[count($field2)-1]);
                    unset($tot6);
                    unset($tot7);
                    unset($tot9);
                    unset($ffields);
                    unset($str_);
                    unset($str2_);
                }
            }
        }
        else
        {
            if ($data->onlyOpen == true)
            {
                $fields[] = new MText('txtNotFound', '<b>'._M('No open invoices found for', $module).' '.$data->personName.'</b>', 'red');
            }
            else
            {
                $fields[] = new MText('txtNotFound', '<b>'._M('No invoices found for', $module).' '.$data->personName.'</b>', 'red');
            }
            $fields[] = new MSeparator();
            $this->addField(new MDiv('divMessage', $fields, null, 'align="center"'));
        }
        $this->addField(new MDiv('divContent', null, null));
    }

    /**
     * Event triggered when user chooses returnBankCodeConsultation from form
     */
     public function returnBankCodeConsultation($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
     }

    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data->personId       = $this->getFormValue('personId');
        $data->personName     = $this->getFormValue('personName');
        $data->invoiceId      = $this->getFormValue('invoiceId');
        $data->incomeSourceId = $this->getFormValue('incomeSourceId');
        $data->returnBankCode = $this->getFormValue('returnBankCode');
        $data->bankAccountContractId = $this->getFormValue('bankAccountContractId');
        $data->onlyOpen       = $this->getFormValue('onlyOpen');
        $data->bankAccountContractId = $this->getFormValue('bankAccountContractId');
        $explode              = explode('-', $data->bankAccountContractId);
        if ( count($explode)>1 )
        {
            $data->bankAccountId  = $explode[0];
            $data->bankContractId = $explode[1];
        }
        return $data;
    }
}
?>
