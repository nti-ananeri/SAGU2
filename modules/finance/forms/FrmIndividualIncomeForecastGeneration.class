<?php

/**
 * Individual Income Forecast generation form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * @maintainer: William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control receivable invoice generation
 **/
class FrmIndividualIncomeForecastGeneration extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Individual income forecast generation', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $event  =  MIOLO::_request('__EVENTTARGETVALUE');
        if ( ! $event ) $event = MIOLO::_request('event');

        $currDate = getdate();
        // Executa através de uma chamada da FrmIncomeForecastReport ao clicar o botão btnInsertGenerate
        if($event == 'btnInsertGenerate_click');
        {
            $data->contractPersonId   =    MIOLO::_request('contractPersonIdS');
            $data->contractId         =    MIOLO::_request('contractIdS');
            $data->contractCourseId   =    MIOLO::_request('contractCourseIdS');
            $data->learningPeriodId   =    MIOLO::_request('learningPeriodIdS');

        }
        // Goto para criação do backbutton
        $fields[] = new MHiddenField('goto', strlen((string)MIOLO::_request('goto'))>0 ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));

        // Contract person id
        $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Person id', $module).':');
        $contractPersonIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractPersonIdLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), '', FIELD_ID_SIZE, null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'),  ((!$this->page->isPostBack()) || ($event == 'btnInsertGenerate_click' ) || (!$event == 'btnSearch_click')));
        $validators[] = new MIntegerValidator('contractPersonId', _M('Person id', $module), 'required');
        $contractPersonId->setJsHint(_M('Enter the person code', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$data->contractPersonName), '', FIELD_DESCRIPTION_SIZE);
        $contractPersonName->setReadOnly(true);
        $fields[] = new MHContainer('hctPersonId', array($contractPersonIdLabel, $contractPersonId, $contractPersonName));

        // Contract id
        $contractIdLabel = new MText('contractIdLabel', _M('Contract id', $module).':');
        $contractIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractIdLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', FIELD_ID_SIZE, null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', $limbo, 'contractUnitId', 'limbo', 'accountSchemeId', 'accountSchemeDescription', 'costCenterId', 'costCenterDescription'), 'academic', 'ContractAccountScheme', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Enter the contract code', $module));
        $validators[] = new MIntegerValidator('contractId',_M('Contract id', $module), 'required');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), null, FIELD_ID_SIZE, null);
        $contractCourseId->setJsHint(_M('Select the course id', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), null,FIELD_ID_SIZE);
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), null, FIELD_DESCRIPTION_SIZE);
        $contractCourseName->setReadOnly(true);
        $fields[] = new MHContainer('hctContract', array($contractIdLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));

        // Operation
        $operationIdLabel = new MText('operationIdLabel', _M('Operation id', $module).':');
        $operationIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), _M('',$module), FIELD_ID_SIZE, null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Enter the operation id',$module));
        $validators[] = new MIntegerValidator('operationId', _M('Operation id', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $operationDescription->setReadOnly(true);
        $fields[] = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));

        // Account scheme
        $accountSchemeLabel = new MText('accountSchemeLabel', _M('Account scheme',$module).':');
        $accountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $accountSchemeLabel->setClass('m-caption m-caption-required');
        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), null, 20, null, null,               'accountSchemeDescription',
           'accountancy', 'AccountScheme', null, null, true);
        $validators[] = new MRequiredValidator('accountSchemeId', _M('Account scheme',$module), 'required');
        $accountSchemeId->setJsHint(_M('Select the account scheme id', $module));
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), null, FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setReadOnly(true);
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields[]   = $hctAccountScheme;

        // Cost center
        $costCenterLabel = new MText('costCenterLabel', _M('Cost center',$module). ':');
        $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $costCenterLabel->setClass('m-caption m-caption-required');
        $costCenterId = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId), null, 20, null, null,
               'costCenterDescription',
               'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Select the cost center id', $module));
        $validators[] = new MRequiredValidator('costCenterId',_M('Cost center',$module), 'required');
        $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
        $hctCostCenter->setShowLabel(true);
        $fields[]   = $hctCostCenter;

        // Begin day
        $beginDay = new MTextField('beginDay', $this->getFormValue('beginDay'), _M('Begin day', $module), 5);
        $beginDay->setJsHint(_M('Choose the day you want the individual income forecast to be generated.', $module));
        $validators[] = new MRangeValidator('beginDay', '', '0', '99', 'i', 'required');
        $fields[] = $beginDay;

        // Month
        $selMonth = new MSelection('selMonth', $this->getFormValue('selMonth',$currDate['mon']), _M('Begin month',$module), SAGU::listMonths());
        $selMonth->setJsHint(_M('Choose the month you want the individual income forecast to be generated.', $module));
        $fields[] = $selMonth;
        $validators[] = new MRequiredValidator('selMonth');

        // Year
        for ( $year=$currDate['year']-5; $year<$currDate['year']+6; $year++ )
        {
            $years[$year] = $year;
        }
        $selYear = new MSelection('selYear', $this->getFormValue('selYear', $currDate['year']), _M('Begin year',$module), $years);
        $selYear->setJsHint(_M('Choose the year for the invoices you want to generate.', $module));
        $fields[] = $selYear;
        $validators[] = new MRequiredValidator('selYear');

        // Times (reply)
        $times = new MTextField('times', $this->getFormValue('times'), _M('Times', $module), 5);
        $validators[] = new MIntegerValidator('times', '', 'required');
        $fields[] = $times;

        // Value
        $value = new MTextField('value', $this->getFormValue('value'), _M('Value', $module), 15);
        $validators[] =    new MFloatValidator('value', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');
        $fields[] = $value;

        $separator = new MSeparator();
        $fields[] = $separator;

        // Comments
        $comments = new MMultiLineField('comments', $this->getFormValue('comments', $data->comments), _M('Comments', $module), 80, 4, 80);
        $fields[] = $comments;

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function submit_button_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getFormData();
        $business = $MIOLO->getBusiness($module, 'BusIndividualIncomeForecast');

        $goto   = $this->goto->value;
        $url    = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':')));
        
        $MIOLO->getClass('accountancy', 'accountancy');
        if (accountancy::getAccountLimitDate($data->maturityDate) == DB_TRUE)
        {
            $return = $business->generateIndividualIncomeForecast($data);
        }
        else
        {
            $msg = _M('Maturity date is below then limit date', $module);
        }
        
        if ( ! $return ) 
        {
            if ( ! $msg )
            {
                $MIOLO->error(_M('Couldn\'t generate income forecast.', $module), $url);
            }
            else
            {
                $this->addError($msg);
            }
        }
        else
        {
            $count = count($return);
            $return[$count] = array(new MDiv('total', '<b>'._M('Total', $module).'</b>', null, 'align="right'), '', '<b>'.$count.'</b>');
            $cols = array(_M('Income forecast id', $module), _M('Maturity date', $module), _M('Value', $module));
            $info = new MTableRaw(_M('Individual income forecast generation', $module), $return, $cols);
            $sep  = new MSeparator('<hr>');
            $sep->setWidth('100%');
            $back = new MButton('back', _M('Back', $module), $MIOLO->getActionURL($module, 'main:process', null));
            $hr   = new MDiv('backDiv', array($back), null, 'align="center"');
            $fields = array($info, $sep, $hr);
            $this->setFields($fields);
            $this->setShowPostButton(false);
        }

    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getFormData()
    {
        $module   = MIOLO::getCurrentModule();

        $filters->personId                 = $this->contractPersonId->value;
        $filters->personName               = $this->contractPersonName->value;
        $filters->courseId                 = $this->contractCourseId->value;
        $filters->day                      = $this->beginDay->value;
        $filters->value                    = $this->value->value;
        $filters->times                    = $this->times->value;
        $filters->year                     = $this->selYear->value;
        $filters->month                    = $this->selMonth->value;
        $filters->contractId               = $this->contractId->value;
        $filters->courseVersion            = $this->contractCourseVersion->value;
        $filters->operationId              = $this->operationId->value;
        $filters->accountSchemeId          = $this->accountSchemeId->value;
        $filters->costCenterId             = $this->costCenterId->value;
        $filters->comments                 = $this->comments->value;
        $filters->isAccounted              = DB_FALSE;
        $filters->isProcessed              = DB_FALSE;
        $filters->isGenerated              = DB_FALSE;  
 
        $this->beginDay->value = strlen((string)$this->beginDay->value)==2 ? $this->beginDay->value : '0'.$this->beginDay->value;
        $this->selMonth->value = strlen((string)$this->selMonth->value)==2 ? $this->selMonth->value : '0'.$this->selMonth->value;

        $filters->maturityDate             = SAGU::toDefaultDate($this->beginDay->value . $this->selMonth->value . $this->selYear->value, 'ddmmyyyy');
        return $filters;
    }
}
?>
