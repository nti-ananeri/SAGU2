<?php

/**
 * Print invoices form
 *
 * @author Daniel Afonso Heisler [daniel@hsti.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 27/09/2007
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solu��es  Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPrintPeriodInvoice extends MForm
{

    private $module;


    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct(_M('Print invoice', $module) . 's');

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

   /**
    * Default method to define fields
   **/
    public function createFields()
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();

        $periodId  = MIOLO::_request('periodId') ? MIOLO::_request('periodId') : MIOLO::_request('periodId', 'GET');
        $personId  = MIOLO::_request('personId') ? MIOLO::_request('personId') : MIOLO::_request('personId', 'GET');

        $invoiceId = MIOLO::_request('invoiceId', 'GET');
        $invoiceId = unserialize(urldecode(stripslashes($invoiceId)));

        $selected  = MIOLO::_request('selected', 'GET');
        $selected  = unserialize(urldecode(stripslashes($selected)));

        if ( strlen((string)$periodId)>0 && strlen((string)$personId)>0 )
        {

            $periodIdLabel   = new MText('periodIdLabel', _M('Period', $module).':');
            $periodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $periodId_       = new MTextLabel('periodIdLabel', $periodId);
            $periodIdHidden  = new MHiddenField('periodId', $periodId);
            $hctPeriodId     = new MHContainer('hctPeriodId', array($periodIdLabel, $periodId_, $periodIdHidden));

            $businessPerson  = $MIOLO->getBusiness('basic', 'BusPerson');
            $person          = $businessPerson->getPerson($personId);

            $personIdLabel   = new MText('personIdLabel', _M('Person', $module).':');
            $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personId_       = new MTextLabel('personIdLabel', $personId . ' - ' . $person->name);
            $personIdHidden  = new MHiddenField('personId', $personId);
            $hctPersonId     = new MHContainer('hctPersonId', array($personIdLabel, $personId_, $personIdHidden));

            if ( is_array($invoiceId) )
            {
                $x = 0;
                $businessInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');

                $cntInv[] = new MSeparator('<br><b>' . _M('Invoice', $module) . 's</b>');
                foreach ( $invoiceId as $row )
                {
                    $invoiceData = $businessInvoice->getInvoice($row);
                    $value       = $businessInvoice->getInvoiceBalanceWithPolicies($row);
                    $cntInv[]    = new MCheckBox('invoiceId[' . $x . ']', $row, null, null, '<b>' . _M('Invoice', $module) . ':</b> ' . $row . ' | <b>' . _M('Maturity date', $module) . ':</b> ' . $invoiceData->maturityDate . ' | <b>' . _M('Balance', $module) . ':</b> ' . $value);

                    if ( count($selected)>0 && count($invoiceId)>0 )
                    {
                        $this->page->AddJSCode('document.getElementById("invoiceId[' . $x . ']").checked = parent.opener.document.getElementById("selectinvoiceGridId_' . $selected[$x] . '").checked;');
                    }

                    $x++;
                }
                $cntInv[] = new MSeparator();
                $hctInvoices     = new MVContainer('hctInvoices', $cntInv);
            }


            // Apply discount
            $applyDiscountLabel = new MText('applyDiscountLabel', _M('Apply discount', $module).':');
            $applyDiscountLabel->setWidth(FIELD_CONTAINER_SIZE);
            $applyDiscount      = new MRadioButtonGroup('applyDiscount', '', SAGU::listTrueFalse(1), strlen((string)$this->getFormValue('applyDiscount', $data->applyDiscount))>0 ? $this->getFormValue('applyDiscount', $data->applyDiscount) : (defined('DEFAULT_APPLY_DISCOUNT_TO_PRINT_INVOICE') ? DEFAULT_APPLY_DISCOUNT_TO_PRINT_INVOICE : 'f'), null, 'horizontal');
            $applyDiscount->setShowLabel(false);
    
            // Generate bank code
            $generateBankCodeLabel = new MText('generateBankCodeLabel', _M('Generate new bank code', $module).':');
            $generateBankCodeLabel->setWidth(FIELD_CONTAINER_SIZE);
            $generateBankCode      = new MRadioButtonGroup('generateBankCode', '', SAGU::listTrueFalse(1), strlen((string)$this->getFormValue('generateBankCode', $data->generateBankCode))>0 ? $this->getFormValue('generateBankCode', $data->generateBankCode) : (defined('DEFAULT_GENERATE_BANK_CODE_TO_PRINT_INVOICE') ? DEFAULT_GENERATE_BANK_CODE_TO_PRINT_INVOICE : 'f'), null, 'horizontal');
            $generateBankCode->setShowLabel(false);
            $hctGenerateBankCode = new MHContainer('hctGenerateBankCode', array($generateBankCodeLabel, $generateBankCode));

            $submitButton = new MButton('submit_button', _M('Submit', $module), 'SUBMIT');
            $hct[] = $submitButton;

            $businessBank = $MIOLO->getBusiness($module, 'BusBank');
            $dataBank     = $businessBank->listBank();
            $bankIdLabel  = new MText('bankIdLabel', _M('Bank', $module).':');
            $bankIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bankIdLabel->setClass('m-caption m-caption-required');
            $bankId       = new MSelection('bankId', $this->getFormValue('bankId', $data->bankId) ? $this->getFormValue('bankId', $data->bankId) : DEFAULT_INVOICE_BANK, '', $dataBank, true);
            $bankId->setAutoPostBack(true);
            $fieldsMain   = new MHContainer('hctBanktId', array($bankIdLabel, $bankId));
            $validators[] = new MRequiredValidator('bankId', _M('Bank', $module));

            $fils->bankId = $this->getFormValue('bankId', $data->bankId) ? $this->getFormValue('bankId', $data->bankId) : DEFAULT_INVOICE_BANK;

            $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
            $dataBankAccount     = $businessBankAccount->listBankAccount($fils);
            $bankAccountIdLabel  = new MText('bankAccountIdLabel', _M('Bank account', $module).':');
            $bankAccountIdLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bankAccountIdLabel->setClass('m-caption m-caption-required');
            $bankAccountId       = new Mselection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId) ? $this->getFormValue('bankAccountId', $data->bankAccountId) : DEFAULT_BANK_ACCOUNT_ID, '', $dataBankAccount, false);
            $fieldsMain2  = new MHContainer('hctBankAccountId', array($bankAccountIdLabel, $bankAccountId));
            $validators[] = new MRequiredValidator('bankAccountId', _M('Bank account', $module));

            $fields[] = $hctPeriodId;
            $fields[] = $hctPersonId;
            if ( is_array($invoiceId) )
            {
                $fields[] = $hctInvoices;
            }
            $fields[] = $fieldsMain;

            if ( $this->getFormValue('bankId') || DEFAULT_INVOICE_BANK )
            {
                $fields[] = $fieldsMain2;
            }
            $fields[] = new MHContainer('hctApplyDiscount', array($applyDiscountLabel, $applyDiscount));
            $fields[] = new MHContainer('hctGenerateBankCode', array($generateBankCodeLabel, $generateBankCode));
            $fields[] = new Separator('');
            $fields[] = new MHContainer('hctButtons', $hct);
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
     }

    /**
     * Event used when submit_button is clicked
     */
    public function submit_button_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->invoiceId = strlen((string)$this->getFormValue('invoiceId'))>0 ? $this->getFormValue('invoiceId') : (MIOLO::_request('_invoiceId') ? MIOLO::_request('_invoiceId') : MIOLO::_request('_invoiceId', 'GET'));
        $filters->applyDiscount = $this->getFormValue('applyDiscount') ? $this->getFormValue('applyDiscount') : MIOLO::_request('_applyDiscount', 'GET');
        $filters->generateBankCode = $this->getFormValue('generateBankCode') ? $this->getFormValue('generateBankCode') : MIOLO::_request('generateBankCode', 'GET');
        $filters->bankAccountId = $this->getFormValue('bankAccountId') ? $this->getFormValue('bankAccountId') : MIOLO::_request('bankAccountId', 'GET');
        $filters->bankId = $this->getFormValue('bankId') ? $this->getFormValue('bankId') : MIOLO::_request('bankId', 'GET');
        $filters->printSelectedTitles = DB_TRUE;

        if ( SAGU::checkParameter( "DEFAULT_INVOICE_BANK" ) == false )
        {
            $goto    = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $msg     = _M('Please, register the default bank for print invoices on configuration area to finish this process', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
       
        if (  SAGU::checkParameter( "DEFAULT_COMPANY_CONF" ) ==  false )
        {
            $goto    = strlen((string) $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $msg     = _M('Please, register the default company for print invoices on configuration area to finish this process', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        // Verify model -> If apply discount change the mode for print
        //$invoiceBank = 'RptPrintInvoice'. DEFAULT_INVOICE_BANK;
        $invoiceBank = 'RptPrintInvoiceBullet';
        $MIOLO->getClass($module, $invoiceBank);
        $report = new $invoiceBank($filters);
    }
}

?>
