<?php
/**
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finInvoice table
 */
class FrmInvoiceSearch extends MForm
{
    public  $module;
    public  $filters;

    /**
     *  Default method to define fields
     */
    public function createInvoiceFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');
        $fields[] = $toolBar;
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
       
        // Invoice id 
        $invoiceIdS   = new MTextField('invoiceIdS', $this->invoiceIdS->value, _M('Id', $module),FIELD_ID_SIZE);
        $validators[] = new MIntegerValidator('invoiceIdS');  
        $invoiceIdS->setJsHint(_M('Enter invoice id', $module));
        $fields[]     = $invoiceIdS;

        // Person
        $personLabelS = new MText('personLabelS', _M('Person',$module).':');
        $personLabelS->setWidth(FIELD_CONTAINER_SIZE);        

        $personIdS    = new MLookupTextField('personIdS', $this->personIdS->value, null,FIELD_ID_SIZE, null, null,
            'personNameS',
            'basic', 'Person', null, null, true);
        $validators[] = new MIntegerValidator('personIdS');
        $personIdS->setJsHint(_M('Select the person id', $module));
        
        $personNameS  = new MTextField('personNameS', $this->personNameS->value, null, FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);

        $hctPersonS   = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]     = $hctPersonS;        

        // Course
        $courseLabelS              = new MText('courseLabelS', _M('Course',$module).':');
        $courseLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $courseIdS                 = new MLookupTextField('courseIdS', $this->courseIdS->value, null, FIELD_ID_SIZE, null, null, array('courseVersionS','courseNameS','accountSchemeIdS','accountSchemeDescriptionS','costCenterIdS','costCenterDescriptionS', 'unitIdS'),
            $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Select the course id', $module));
        $courseVersionS            = new MTextField('courseVersionS', $this->courseVersionS->value, null, FIELD_ID_SIZE);
        $courseVersionS->setReadOnly(false);
        $courseVersionDescriptionS = new MText('courseVersionDescriptionS',_M('Version',$module).':');        
        $courseNameS               = new MTextField('courseNameS', $this->courseNameS->value, null, FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $hctCourseS                = new MHContainer('hctCourseS', array($courseLabelS,$courseIdS,$couseVersionDescriptionS,$courseVersionS,$courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]                  = $hctCourseS;    
                
        // Account scheme
        $accountSchemeLabelS       = new MText('accountSchemeLabelS', _M('Account scheme',$module).':');
        $accountSchemeLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $accountSchemeIdS          = new MLookupTextField('accountSchemeIdS', $this->accountSchemeIdS->value, null,FIELD_ID_SIZE, null, null,
            'accountSchemeDescriptionS',
            'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdS->setJsHint(_M('Select the account scheme id', $module));
       
        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->accountSchemeDescriptionS->value, null, FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescriptionS->setReadOnly(true);
        
        $hctAccountSchemeS         = new MHContainer('hctAccountSchemeS', array($accountSchemeLabelS, $accountSchemeIdS, $accountSchemeDescriptionS));
        $hctAccountSchemeS->setShowLabel(true);
        $fields[]                  = $hctAccountSchemeS;
                
        // Cost center
        $costCenterLabelS       = new MText('costCenterLabelS', _M('Cost center',$module).':');
        $costCenterLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $costCenterIdS          = new MLookupTextField('costCenterIdS', $this->costCenterIdS->value, null,FIELD_ID_SIZE, null, null,
            'costCenterDescriptionS',
            'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Select the cost center id', $module));
        //$validators[]           = new MIntegerValidator('costCenterIdS');
        
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, null, FIELD_DESCRIPTION_SIZE);
        $costCenterDescriptionS->setReadOnly(true);
        
        $hctCostCenterS         = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[]               = $hctCostCenterS;        
        
        // Unit id
        $unitLabelS   = new MText('unitLabelS', _M('Unit',$module).':');
        $unitLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $business     = $MIOLO->getBusiness('basic','BusUnit');
        $unitIdS      = new MComboBox('unitIdS', $this->unitIdS->value, '', $business->listUnit(), false, '', 2);
        $validators[] = new MIntegerValidator('unitIdS');
        $unitIdS->setJsHint( _M('Choose the unit',$module) );
        $hctUnitS     = new MHContainer('hctUnitS', array($unitLabelS,$unitIdS,$unitDescriptionS));
        $hctUnitS->setShowLabel(true);
        $fields[]     = $hctUnitS;        
        
        // Parcel number
        $parcelNumberS = new MTextField('parcelNumberS', $this->parcelNumberS->value, _M('Parcel number',$module),FIELD_ID_SIZE);
        $parcelNumberS->setJsHint(_M('Enter the parcels number', $module));
        $fields[]      = $parcelNumberS;
        
        // Emission date
        $emissionDateS = new MCalendarField('emissionDateS', $this->emissionDateS->value, _M('Emission date',$module),FIELD_DATE_SIZE);
        $emissionDateS->setJsHint(_M('Enter the emission date',$module));
        $fields[]      = $emissionDateS;
        $validators[]  = new MDATEDMYValidator('emissionDateS', '', 'optional');

        // Maturity date
        $maturityDateS = new MCalendarField('maturityDateS', $this->maturityDateS->value, _M('Maturity date',$module),FIELD_DATE_SIZE);
        $maturityDateS->setJsHint(_M('Enter the maturity date',$module));
        $fields[]      = $maturityDateS;
        $validators[]  = new MDATEDMYValidator('maturityDateS', '', 'optional');

        // Value
        $valueS = new MTextField('valueS', $this->valueS->value, _M('Value', $module), FIELD_MONETARY_SIZE);
        $validators[] =   new MFloatValidator('valueS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $valueS->setJsHint(_M('Enter the value',$module));
        $fields[]     = $valueS;
        
        // Policy id
        $policyLabelS       = new MText('policyLabelS', _M('Policy',$module).':');
        $policyLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $policyIdS          = new MLookupTextField('policyIdS', $this->policyIdS->value, null,FIELD_ID_SIZE, null, null,
            'policyDescriptionS',
            'finance', 'Policy', null, null, true);
        $policyIdS->setJsHint(_M('Select the policy id', $module));
        $validators[]       = new MIntegerValidator('policyIdS');
        $policyDescriptionS = new MTextField('policyDescriptionS', $this->policyDescriptionS->value, null, FIELD_DESCRIPTION_SIZE);
        $policyDescriptionS->setReadOnly(true);
        $hctPolicyS         = new MHContainer('hctPolicyS', array($policyLabelS,$policyIdS,$policyDescriptionS));
        $hctPolicyS->setShowLabel(true);
        $fields[]           = $hctPolicyS;         
        
        // Bank invoice id
        $bankInvoiceIdS       = new MTextField('bankInvoiceIdS', $this->bankInvoiceIdS->value, _M('Invoice bank id', $module),FIELD_ID_SIZE);
        $bankInvoiceIdS->setJsHint(_M('Enter the bank invoice id',$module));
        $fields[]             = $bankInvoiceIdS;
       
        // Automatic debit
        $messagesTypeS        =  SAGU::listTrueFalse(1);
        $automaticDebitLabelS = new MText('automaticDebitLabelS', _M('Automatic debit',$module).':');
        $automaticDebitLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $automaticDebitS      = new MRadioButtonGroup('automaticDebitS', '', $messagesTypeS, $automaticDebitS, null, 'horizontal');
        $automaticDebitS->SetShowLabel(false);
        $hctAutomaticDebitS   = new MHContainer('hctCloseInvoiceS', array($automaticDebitLabelS, $automaticDebitS));
        $fields[]             = $hctAutomaticDebitS;
 
        // Income source
        $incomeSourceLabelS       = new MText('incomeSourceLabelS', _M('Income source',$module).':');
        $incomeSourceLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $incomeSourceIdS          = new MLookupTextField('incomeSourceIdS', $this->incomeSourceIdS->value, null,FIELD_ID_SIZE, null, null, 'incomeSourceDescriptionS', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceIdS->setJsHint(_M('Select the income source id', $module));
        $validators[]             = new MIntegerValidator('incomeSourceIdS');
        $incomeSourceDescriptionS = new MTextField('incomeSourceDescriptionS', $this->incomeSourceDescriptionS->value, null, FIELD_DESCRIPTION_SIZE);
        $incomeSourceDescriptionS->setReadOnly(true);
        $hctIncomeSourceS         = new MHContainer('hctIncomeSourceS', array($incomeSourceLabelS,$incomeSourceIdS,$incomeSourceDescriptionS));
        $hctIncomeSourceS->setShowLabel(true);
        $fields[]                 = $hctIncomeSourceS;        
        
        
       // bank account
        $businessBankAccount = $MIOLO->getBusiness($module, 'BusBankAccount');
        $bankAccountLabelS   = new MText('bankAccountLabelS', _M('Bank account', $module).':');
        $bankAccountLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $bankAccountIdS      = new MComboBox('bankAccountIdS', $this->bankAccountIdS->value, '', $businessBankAccount->listBankAccount());
        $bankAccountIdS->setJsHint(_M('Bank account id', $module));
        $hctBankAccountS     = new MHContainer('hctBankAccountS', array($bankAccountLabelS, $bankAccountIdS));
        $hctBankAccountS->setShowLabel(true);
        $fields[]            = $hctBankAccountS;

        // Sector id
        $businessSector = $MIOLO->getBusiness('basic', 'BusSector');
        $sectorIdLabelS = new MText('sectorIdLabelS', _M('Sector id', $module).':');
        $sectorIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $sectorIdS      = new MComboBox('sectorIdS', $this->sectorIdS->value, '', $businessSector->listSector());
        $hctSectorS     = new MHContainer('hctSectorS', array($sectorIdLabelS, $sectorIdS));
        $fields[]       = $hctSectorS;

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);              
        
        $this->filters->invoiceId        = $this->invoiceIdS->value;
        $this->filters->personId         = $this->personIdS->value;        
        $this->filters->accountSchemeId  = $this->accountSchemeIdS->value;
        $this->filters->costCenterId     = $this->costCenterIdS->value;
        $this->filters->courseId         = $this->courseIdS->value;
        $this->filters->courseVersion    = $this->courseVersionS->value;
        $this->filters->unitId           = $this->unitIdS->value;
        $this->filters->parcelNumber     = $this->parcelNumberS->value;
        $this->filters->emissionDate     = $this->emissionDateS->value;
        $this->filters->maturityDate     = $this->maturityDateS->value;
        $this->filters->value            = $this->valueS->value;
        $this->filters->policyId         = $this->policyIdS->value;
        $this->filters->bankInvoiceId    = $this->bankInvoiceIdS->value;
        $this->filters->automaticDebit   = $this->automaticDebitS->value;
        $this->filters->incomeSourceId   = $this->incomeSourceIdS->value;
        $this->filters->bankAccountId    = $this->bankAccountIdS->value;
        $this->filters->sagu1InvoiceId   = $this->sagu1InvoiceIdS->value;
        $this->filters->sectorId         = $this->sectorIdS->value;
    }

}

?>
