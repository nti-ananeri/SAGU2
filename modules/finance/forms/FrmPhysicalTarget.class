<?php

/**
 * PhysicalTarget form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a invoiceTarget
 **/
class FrmPhysicalTarget extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;




        if ( in_array($function,array('update', 'delete')) )
        {
            $contractId = $_GET['contractId'] ? $_GET['contractId'] : $_POST['contractId'];

            $business = $MIOLO->getBusiness($module, 'BusPhysicalTarget');
            $data     = $business->getPhysicalTarget($contractId);

            $fields[]   = new MTextLabel('contractId', $contractId, _M('Contract id', $module));
            $fields[]   = new MHiddenField('contractId', $contractId);

            //personId
            $personLabel = new MText('personLabel', _M('Person', $module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $personId = new MTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE);
            $personId->setReadOnly(true);

            $personName  = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Person name', $module));

            $hctPerson   = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);

            $fields[]    = $hctPerson;
            
            $this->page->onLoad('document.' . $this->name . '.cityId.focus();');
        }
        else
        {
        
            //personId
            $personLabel = new MText('personLabel', _M('Person', $module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), NULL, FIELD_LOOKUPFIELD_SIZE, null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), 'academic', 'PersonContract', null, array('personId' => 'personId'), true);
            $personId->setJsHint(_M('Enter the person code', $module));
            $validators[] =  new MIntegerValidator('personId', _M('Person', $module));

            $personName  = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Person name', $module));

            $hctPerson   = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);

            $this->page->onLoad('document.' . $this->name . '.personId.focus();');
            $fields[]    = $hctPerson;
            
            
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contract id', $module), FIELD_ID_SIZE, null, null, 'personId, personName, courseId, courseName, courseVersion', 'academic', 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Enter the contract code',$module));
            $validators[] = new MIntegerValidator('contractId', _M('Contract id', $module), 'required');
            $fields[]     = $contractId;
        }

        //course
        $courseLabel = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseId    = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_ID_SIZE);
        $validators[] = new MRequiredValidator('courseId', _M('Course', $module));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Course id',$module));
        $courseVersion   = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        $courseName  = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        // limbo :)
        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        // City
        $cityLabel = new MText('cityIdLabel', _M('City id', $module) . ':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityLabel->setClass('m-caption m-caption-required');
        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId', $data->cityId), '', FIELD_ID_SIZE, null, null, 'cityName,limbo,stateName,limbo,countryName,zipCode', 'basic', 'City', null, null, true);
        $cityId->setJsHint(_M('Enter the city id',$module));
        $validators[] = new MIntegerValidator('cityId', _M('City id', $module),'required');
        $fields[] = new MHContainer('hctCity', array($cityLabel, $cityId));

        // City name
        $cityNameLabel = new MText('cityNameLabel', _M('City name', $module).':');
        $cityNameLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityName = new MTextField('cityName', $this->getFormValue('cityName', $data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setJsHint(_M('City name', $module));
        $cityName->setReadOnly(true);
        $fields[] = new MHContainer('hctCityName', array($cityNameLabel, $cityName));
 
        // State name
        $stateNameLabel = new MText('stateNameLabel', _M('State name', $module).':');
        $stateName = new MTextField('stateName', $this->getFormValue('stateName', $data->stateName), '', FIELD_DESCRIPTION_SIZE);
        $stateName->setJsHint(_M('State name', $module));
        $stateName->setReadOnly(true);
        $fields[] = new MHContainer('hctStateName', _M('City name', $module));
 
        // Country name
        $countryNameLabel = new MText('countryName', _M('Country name', $module).':');
        $countryNameLabel->setWidth(FIELD_CONTAINER_SIZE);
        $countryName = new MTextField('countryName', $this->getFormValue('countryName', $data->countryName), '', FIELD_DESCRIPTION_SIZE);
        $countryName->setJsHint(_M('Country name', $module));
        $countryName->setReadOnly(true);
        $fields[] = new MHContainer('hctCountryName', array($countryNameLabel, $countryName));

        // Zipcode
        $zipCodeLabel = new MText('zipCodeLabel', _M('Zip code', $module) . ':');
        $zipCodeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $zipCodeLabel->setClass('m-caption m-caption-required');
        $zipCode = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), '', FIELD_ZIPCODE_SIZE);
        $zipCode->setJsHint(_M('Enter the zip code', $module));
        $validators[] = new MRangeValidator('zipCode', _M('Zip code', $module), '10000000', '99999999', 'i', 'required');
        $fields[] =  new MHContainer('hctZipCodeLabel', array($zipCodeLabel, $zipCode));

        // Location
        $locationLabel = new MText('locationLabel', _M('Location name', $module) . ':');
        $locationLabel->setWidth(FIELD_CONTAINER_SIZE);
        $locationLabel->setClass('m-caption m-caption-required');
        $location = new MTextField('location', $this->getFormValue('location', $data->location), '', FIELD_DESCRIPTION_SIZE);
        $location->setJsHint(_M('Enter the location name', $module));
        $validators[] = new MRequiredValidator('location', _M('Location name', $module));
        $fields[] = new MHContainer('hctLocation', array($locationLabel, $location));

        // Number
        $numberLabel = new MText('numberLabel', _M('Number', $module).':');
        $numberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $number = new MTextField('number', $this->getFormValue('number', $data->number), '', FIELD_ID_SIZE);
        $number->setJsHint(_M('Number', $module));
        $fields[] = new MHContainer('hctNumber', array($numberLabel, $number));

        // Complement
        $complementLabel = new MText('complementLabel', _M('Complement', $module).':');
        $complementLabel->setWidth(FIELD_CONTAINER_SIZE);
        $complement = new MTextField('complement', $this->getFormValue('complement', $data->complement), '', FIELD_DESCRIPTION_SIZE);
        $complement->setJsHint(_M('Complement', $module));
        $fields[] = new MHContainer('hctComplement', array($complementLabel, $complement));


        // Neighborhood
        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Neighborhood name', $module).':');
        $neighborhoodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $neighborhood = new MTextField('neighborhood', $this->getFormValue('neighborhood',$data->neighborhood), '', FIELD_DESCRIPTION_SIZE);
        $neighborhood->setJsHint(_M('Enter the neighborhood name', $module));
        $fields[] = new MHContainer('hctNeighborhoodLabel', array($neighborhoodLabel, $neighborhood));

        // People
        $peopleNameLabel = new MText('peopleNameLabel', _M('Name', $module).':');
        $peopleNameLabel->setWidth(FIELD_CONTAINER_SIZE);
        $peopleNameLabel->setClass('m-caption m-caption-required');
        $peopleName = new MTextField('peopleName', $this->getFormValue('peopleName',$data->name), '', FIELD_DESCRIPTION_SIZE);
        $peopleName->setJsHint(_M('Name', $module));
        $validators[] = new MRequiredValidator('peopleName', _M('Name', $module));
        $fields[] = new MHContainer('hctPeople', array($peopleNameLabel, $peopleName));

        // Document number
        $documentNumberLabel = new MText('documentNumber_txt', _M('Document number', $module) . ':');
        $documentNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $documentNumber = new MTextField('documentNumber', $this->getFormValue('documentNumber',$data->documentNumber), '', 11);
        $documentNumber->setJsHint(_M('Enter the document number', $module));
        $dnMask = new MRangeValidator('documentNumber', _M('Document number', $module), 0, 99999999999, 'i');
        $validators[] = $dnMask;
        $fields[] = new MHContainer('hctDocumentNumber', array($documentNumberLabel, $documentNumber));

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'contractId'=>MIOLO::_request('contractId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('contractIdS'=>MIOLO::_request('contractId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPhysicalTarget');
        $ok = $business->deletePhysicalTarget(MIOLO::_request('contractId'));

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPhysicalTarget');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePhysicalTarget($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertPhysicalTarget($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('contractIdS'=>$data->contractId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinPhysicalTarget();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->name = $this->peopleName->value;

        return $data;
    }

}

?>
