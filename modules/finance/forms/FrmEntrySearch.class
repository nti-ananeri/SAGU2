<?php

/**
 *
 * This file handles the connection and actions for finEntry table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finEntry table
 */
class FrmEntrySearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'finance';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Entry', $this->home, 'entry-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $entryIdS = new MHiddenField('entryIdS', MIOLO::_request('entryIdS'));
        $fields[] = $entryIdS;
        
        // Invoice information
        $invoiceIdLabel = new MText('invoiceIdLabel', _M('Invoice id', $module).':');
        $invoiceIdLabel->setWidth(FIELD_LABEL_SIZE);
        $invoiceIdS = new MLookupTextField('invoiceIdS', $this->getFormValue('invoiceIdS', $data->invoiceIdS), '', FIELD_ID_SIZE, null, null, 'limbo,personNameS', $module, 'Invoice', null, array('personIdS' => 'personIdS'), true);
        $invoiceIdS->setJsHint(_M('Enter the invoice id',$module));
        $validators[] =  new MIntegerValidator('invoiceIdS');
        $fields[]     = new MHContainer('hctInvoiceIdS', array($invoiceIdLabel, $invoiceIdS));

        // person 
        $personLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personLabel->setWidth(FIELD_LABEL_SIZE);
        //     $personLabel->setClass('m-caption m-caption-required');
        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS',$data->personIdS), null,FIELD_ID_SIZE, null, null,
            'personNameS',
            'basic', 'Person', null, null, true);
        $personIdS->setJsHint(_M('Select the person id', $module));
        //    $validators[] = new MIntegerValidator('personIdS','', 'required');
        
        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS',$data->personNameS), null, FIELD_DESCRIPTION_SIZE);
 //       $personNameS->setReadOnly(true);
        
        $hctPersonS = new MHContainer('hctPersonS', array($personLabel, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]   = $hctPersonS;

        // Operation information
        $operationIdLabel = new MText('operationIdLabel', _M('Operation id', $module).':');
        $operationIdLabel->setWidth(FIELD_LABEL_SIZE);
        $operationIdS = new MLookupTextField('operationIdS', $this->getFormValue('operationIdS',$data->operationIdS), '', FIELD_ID_SIZE, null, null, 'operationDescriptionS', $module, 'Operation', null, null, true);
        $operationIdS->setJsHint(_M('Enter the operation id', $module));
        $validators[] =  new MIntegerValidator('operationIdS');

        $operationDescriptionS = new MTextField('operationDescriptionS', $this->getFormValue('operationDescriptionS',$data->operationDescriptionS),'', FIELD_DESCRIPTION_SIZE);
        $operationDescriptionS->setReadOnly(true);

        $hctOperationS = new MHContainer('hctOperationS', array($operationIdLabel, $operationIdS, $operationDescriptionS));
        $hctOperationS->setShowLabel(true);
        $fields[]  = $hctOperationS;

        // Entry date
        $entryDateLabel = new MText('entryDateLabel', _M('Entry date', $module).':');
        $entryDateLabel->setWidth(FIELD_LABEL_SIZE);
        $entryDateS = new MCalendarField('entryDateS', $this->getFormValue('entryDateS', $data->entryDateS), '', FIELD_DATE_SIZE);
        $entryDateS->setJsHint(_M('Enter the entry date', $module));
        $validators[] = new MDATEDMYValidator('entryDateS', '', 'optional');
        $fields[] = new MHContainer('hctEntryDate', array($entryDateLabel, $entryDateS));

        $hctEntryDateS = new MHContainer('hctEntryDateS', $flds);
        $fields[]          = $hctEntryDateS;
      
        // Value
        $valueLabel = new MText('valueLabel', _M('Value', $module).':');
        $valueLabel->setWidth(FIELD_LABEL_SIZE);
        $valueS = new MTextField('valueS', $this->getFormValue('valueS', $data->valueS), '', FIELD_MONETARY_SIZE);
        $valueS->setJsHint(_M('Enter the value',$module));
        $validators[] =    new MFloatValidator('valueS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $fields[] = new MHContainer('hctValueS', array($valueLabel, $valueS));
        
        // cost center
        $costCenterLabel = new MText('costCenterLabel', _M('Cost center', $module).':');
        $costCenterLabel->setWidth(FIELD_LABEL_SIZE);
        $costCenterIdS   = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), '', FIELD_ID_SIZE, null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        //$validators[] =  new MIntegerValidator('costCenterIdS');
        $costCenterIdS->setJsHint(_M('Enter the cost center code',$module));

        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$data->costCenterDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $costCenterDescriptionS->setReadOnly(true);
        $fields[]  = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterIdS, $costCenterDescriptionS));
    
        // Bankreturncode
        $bankReturnCodeLabel = new MText('bankReturnCodeLabel', _M('Bank return id', $module).':');
        $bankReturnCodeLabel->setWidth(FIELD_LABEL_SIZE);
        $bankReturnCodeS     = new MTextField('bankReturnCodeS', $this->getFormValue('bankReturnCodeS', $data->bankReturnCodeS), '', 18);
        $bankReturnCodeS->setJsHint(_M('Enter the bank return code', $module));
        $fields[] = new MHContainer('hctBankReturnCodeS', array($bankReturnCodeLabel, $bankReturnCodeS));

        // get Yes and No for Radio Button
        $messagesTypeS =  SAGU::listYesNo('1');
        //isAccounted
        $isAccountedLabelS = new MText('isAccountedLabelS', _M('Is accounted',$module).':');
        $isAccountedLabelS->setWidth(FIELD_LABEL_SIZE);
        $isAccountedS = $this->GetFormValue('isAccountedS',$data->isAccountedS);
        $isAccountedS = new MRadioButtonGroup('isAccountedS', '', $messagesTypeS, $isAccountedS, null, 'horizontal');
        $isAccountedS->SetShowLabel(false);
        $hctIsAccountedS = new MHContainer('hctIsAccountedS', array($isAccountedLabelS, $isAccountedS));
        $fields[]  = $hctIsAccountedS;
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
    	$this->setValidators($validators);

        // get filters values
        $filters->entryId        = $this->entryIdS->value;
        $filters->personId       = $this->personIdS->value;
        $filters->personName     = $this->personNameS->value;
        $filters->invoiceId      = $this->invoiceIdS->value;
        $filters->operationId    = $this->operationIdS->value;
        $filters->entryDate      = $this->entryDateS->value;
        $filters->value          = $this->valueS->value; 
        $filters->costCenterId   = $this->costCenterIdS->value; 
        $filters->bankReturnCode = $this->bankReturnCodeS->value;
        $filters->isAccounted    = $this->isAccountedS->value;

        unset( $this->entryIdS->value );
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdEntrySearch',$filters);
        $business = $this->manager->getBusiness($module,'BusEntry');
        $data = $business->searchEntry($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults); 

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.invoiceIdS.focus();');
        } 

    }

}

?>
