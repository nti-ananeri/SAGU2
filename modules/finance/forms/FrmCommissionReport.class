<?php

/**
 * Boletim document form
 *
 * @author Giovani Murilo Dantas CorrÃªa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 17/03/2008
 *
 * \b Organization: \n
 * iSolution - Solucoes em TI \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2008 iSolution \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 **/

/**
 * Form to manipule agreements report
 **/

class FrmCommissionReport extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Commission report', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnNew');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Commission report', $this->home, 'commissionReport-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;

        //MES e ANO
        $monthLabel   = new MText('beginMonthlabel', _M('Month', $module) . '/' . _M('Year', $module));
        $monthLabel->setClass('m-caption m-caption-required');
        $monthLabel->setWidth(FIELD_CONTAINER_SIZE);

        $month        = new MSelection('beginMonth', strlen((string)$this->getFormValue('beginMonth'))>0 ? $this->getFormValue('beginMonth') : date('n'), '', SAGU::listMonths());
        $validators[] = new MRequiredValidator('beginMonth', _M('Month', $module), 'required');

        $year         = new MTextField('beginYear', strlen((string)$this->getFormValue('beginYear'))>0 ? $this->getFormValue('beginYear') : date('Y'), null, 6);
        $validators[] = new MRequiredValidator('beginYear', _M('Year', $module), 'required');

        $fields[]     = new MHContainer('hctBeginMonth', array($monthLabel, $month, $year));

        //MES e ANO
        $monthLabel   = new MText('endMonthlabel', _M('Month', $module) . '/' . _M('Year', $module));
        $monthLabel->setClass('m-caption m-caption-required');
        $monthLabel->setWidth(FIELD_CONTAINER_SIZE);

        $month        = new MSelection('endMonth', strlen((string)$this->getFormValue('endMonth'))>0 ? $this->getFormValue('endMonth') : date('n'), '', SAGU::listMonths());
        $validators[] = new MRequiredValidator('endMonth', _M('Month', $module), 'required');

        $year         = new MTextField('endYear', strlen((string)$this->getFormValue('endYear'))>0 ? $this->getFormValue('endYear') : date('Y'), null, 6);
        $validators[] = new MRequiredValidator('beginYear', _M('Year', $module), 'required');

        $fields[]     = new MHContainer('hctEndMonth', array($monthLabel, $month, $year));

        /*//Report type
        $reports[] = array('1',_M('Agreements', $module) );
        $reports[] = array('2', _M('Commission', $module));
		
        $reportTypeLabel  = new MText('reportTypeLabel', _M('Report', 'finance').':');
		$reportTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
		$reportTypeLabel->setClass('m-caption m-caption-required');
        $reportType       = new Mselection('reportType', strlen((string) $this->getFormValue('reportType', $data->reportType) ) > 0 ? $this->getFormValue('reportType', $data->reportType) : 1 , '', $reports, false);
        $hctReportType      = new MHContainer('hctReportType', array($reportTypeLabel, $reportType));
        $hctReportType->setShowLabel(true);
        $fields[]                 = $hctReportType;        
        $validators[] = new MIntegerValidator('reportType', _M('Report type',$module), 'required');*/
        
        //Report mode
        $printModeLabel = new MText('printModeLabel', _M('Print mode', $module));
        $printModeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $printModeLabel->setClass('m-caption m-caption-required');
        $listAnalyticalSynthetic[] = array( _M('Analytical', $module), '1');
        $listAnalyticalSynthetic[] = array( _M('Synthetic', $module), '2');
        $printMode      = new MRadioButtonGroup('printMode', '', $listAnalyticalSynthetic, $this->GetFormValue('printMode', '2'), null, 'horizontal');
        $printMode->SetShowLabel(false);
        $printMode->SetAutoPostBack(false);
        $hctPrintMode  = new MHContainer('hctPrintMode', array($printModeLabel, $printMode));
        $hctPrintMode->setShowLabel(false);
        $fields[]      = $hctPrintMode;
//        $validators[] = new MIntegerValidator('printMode2', _M('Print mode',$module), 'required');

        unset($flds);
        $useRule = new MCheckBox('useRule', 1, '', $this->getFormValue('useRule', $data->useRule),_M('Use rule', $module));
        $fields[] = $useRule;
        $fields[]       = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }

    function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->beginYear    = $this->beginYear->value;
        $data->beginMonth   = $this->beginMonth->value;
        $data->endYear      = $this->endYear->value;
        $data->endMonth     = $this->endMonth->value;
        $data->printMode    = $this->getFormValue('printMode');
        $data->reportType   = $this->getFormValue('reportType');
        $data->useRule      = $this->getFormValue('useRule');
        $class = 'RptCommissionReport';
        $MIOLO->getClass($module, $class);
        $report = new $class($data);
        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }

}

?>
