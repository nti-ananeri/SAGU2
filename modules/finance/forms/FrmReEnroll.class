<?php

class FrmReEnroll extends MForm
{

    /**
     * Class constructor
     **/
    function __construct($data=null)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        parent::__construct(_M('Re-enroll', $module) );
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $module = 'academic';
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');
        $event     = MIOLO::_request('event');
        $personId  = MIOLO::_request('personId');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

		$toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnPrint');
        $fields[] = $toolBar;
        $data = $this->getTypesData(); 

        $contractPersonLabel = new MText('contractPersonLabel', _M('Person',$module) . ':');
        $contractPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractPersonLabel;
        
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $personId), '', FIELD_ID_SIZE, null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'PersonContract', null, array('personId' => 'personId'), !$this->page->isPostBack());
        $personId->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('personId', _M('Person id', 'basic'), 'required');
        $flds[]           = $personId;

        $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Person name',$module));
        $flds[]             = $personName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);


        $contractCourseLabel = new MText('contractCourseLabel', _M('Contract',$module) . ':');
        $contractCourseLabel->setWidth(FIELD_CONTAINER_SIZE);
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $flds[]           = $contractCourseLabel;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $contractId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Enter the contract code',$module));
        $validators[] = new MIntegerValidator('contractId', _M('Contract id', 'academic'), 'required');
        $flds[]           = $contractId;

        $courseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_ID_SIZE);
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Course code',$module));
        $flds[]           = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));
        $flds[]                = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));
        $flds[]             = $courseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        
        $next = new MButton('btnNext',_M('Next',$module));
        $divError = new MDiv('divError', $next, null, 'align=center');

        $fields[] = new Separator('');
        $fields[] = new MDiv('divContent', $divError);


        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
		$this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }
    
    public function btnNext_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        //        $module = MIOLO::getCurrentModule();
        $module = 'finance';
        
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson     = $MIOLO->getBusiness('basic', 'BusPerson');
        //se for um usuário do sistema logado
        $business = $MIOLO->getBusiness('services', 'BusEnroll');
        $businessDocument = $MIOLO->getBusiness('basic', 'BusDocument');
        $data     = $business->getPhysicalPerson(MIOLO::_request('personId'));
        if(!$data)
        {
            unset($business);
            $business = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
            $data     = $business->getPhysicalPerson($personId);
            $rg = $businessDocument->getDocument($personId, RG_CODE);
            $cpf = $businessDocument->getDocument($personId, CPF_CODE);
            $data->contentCPF = strlen((string)$cpf->content) > 0 ? SAGU::convertInCPFFormat($cpf->content) : "" ;
            $data->contentRG = $rg->content;
            $data->organRG = $rg->organ;
            $data->dateExpeditionRG = $rg->dataExpedition;
        }
        else
        {
            $data->contentCPF = strlen((string)$data->contentCPF) > 0 ? SAGU::convertInCPFFormat($data->contentCPF) : "" ;
        }
        foreach ( $data as $item => $value )
        {
            $data2[$item] = $value;
        }
        $data2['contractId'] = MIOLO::_request('contractId');
        $MIOLO->session->setValue('enrollData', $data2);
        $opts = array('pageNumber' => '1');  
        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

    public function getTypesData()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
		$data->courseId         = MIOLO::_request('courseId');
		$data->courseVersion    = MIOLO::_request('courseVersion');
        $data->courseName       = MIOLO::_request('courseName');
		$data->personName       = MIOLO::_request('personName');
		$data->personId         = MIOLO::_request('personId');
        $data->contractId       = MIOLO::_request('contractId'); 
        return $data;
    }
}
?>
