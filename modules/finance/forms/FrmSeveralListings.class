<?php
/**
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 01/09/2008
 *
 * \b Organization: \n
 * iSolution - Soluções em TI
 * The iSolution Development Team
 *
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/


class FrmSeveralListings extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Several listings', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

        /* bookmark */
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Several listings', $this->home, 'severalListings-16x16.png', true);
        }
        /* -- bookmark -- */

        $fields[] = $toolBar;
        
        /* Period */
        $businessPeriod = $MIOLO->getBusiness('academic', 'BusPeriod');
        
        $periodIdLabel = new MText('periodLabel', _M('Period id', $module));
        $periodIdLabel->setClass('m-caption m-caption-required');
        $periodIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        if ( strlen((string)$data->periodId) == 0 )
        {
            $data->periodId[] = CURRENT_PERIOD_ID;
        }
        $periodId     = new MMultiSelection('periodId',  is_array($this->getFormValue('periodId')) ? $this->getFormValue('periodId') : $data->periodId, '', $businessPeriod->listPeriod('true'), false, null, 5);

        $periodId->setJsHint(_M('Enter the period code', $module));
//        $fields[]       = $periodId;
        $validators[]   = new MRequiredValidator('periodId', _M('Period',$module));
        $fields[]       = new MHContainer('hctPeriodId', array($periodIdLabel, $periodId));
        /* -- Period -- */

        /* Report Type */
        $reportTypeLabel = new MText('reportTypeLabel', _M('Report type', $module));
        $reportTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reportTypeLabel->setClass('m-caption m-caption-required');
        
        $listAnalyticalSynthetic[] = array( _M('Analytical', $module), '1');
        $listAnalyticalSynthetic[] = array( _M('Synthetic', $module), '2');
        
        $reportType      = new MRadioButtonGroup('reportType', '', $listAnalyticalSynthetic, $this->GetFormValue('reportType', '2'), null, 'horizontal');
        $reportType->SetShowLabel(false);
        $reportType->SetAutoPostBack(false);

        $hctBase       = new MHContainer('hctBase', array($reportTypeLabel, $reportType));
        $hctBase->setShowLabel(false);
        $fields[]      = $hctBase;
        /* -- Report Type -- */

        /* User */
        $mioloUserLabel = new MText('userNameLabel',_M('Username', 'admin').':');
        $mioloUserLabel->setWidth(FIELD_CONTAINER_SIZE);
        $mioloUserName = new MTextField('mioloUserName', $this->getFormValue('mioloUserName',$data->mioloUserName), NULL, FIELD_ID_SIZE);
        $mioloUserName->setReadOnly(true);
        $miololk     = new MLookupField('miololk', null, null, null, 'mioloUserName', 'admin', 'User', null, null, true);

        $hctMiolo    = new MHContainer('hctMiolo', array($mioloUserLabel, $mioloUserName, $miololk, $btnClean));
        $hctMiolo->setShowLabel(true);
        $fields[]      = $hctMiolo;
        /* -- User -- */    

	    /* Person */
	    $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
    	$personIdLabel->setWidth(FIELD_CONTAINER_SIZE);

        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', 10, null, null, array('personName'), 'basic', 'Person', null, null, true);
        $personName    = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
        $fields[] = new MHContainer('hctPerson', array($personIdLabel,$personId,$personName));
        /* -- Person -- */
	    
        /* begin date */ 
        $beginDateLabel = new MText('beginDateLabel', _M('Begin date', $module).':');
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), '', FIELD_DATE_SIZE);
        /* -- begin date -- */

       	/* end date */
        $endDateLabel = new MText('endDateLabel', _M('End date', $module).':');
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), '', FIELD_DATE_SIZE);
        
        $fields[] = new MHContainer('hctBeginEndDate', array($beginDateLabel, $beginDate, $endDateLabel, $endDate));			
        /* -- end date -- */

        /* Course */
        $courseLabel   = new MText('courseLabel', _M('Course', $module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId      = new MLookupTextField('courseId', $this->getFormValue('courseId'), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Enter the course code', $module));

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setJsHint(_M('Course version code',$module));

        $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]      = $hctCourse;
        /* -- Course -- */
        
        /* Turn */
        $turnLabel       = new MText('turnLabel', _M('Turn', $module) . ':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId          = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_ID_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id', $module));

        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description', $module));

        $hctTurn         = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[]        = $hctTurn;
        /* -- Turn -- */

        /* Unit */
        $unitLabel       = new MText('unitLabel', _M('Unit', $module) . ':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
		$unitId          = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', FIELD_ID_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id', $module));

        $unitDescription = new MTextField('unitDescription', 
										  $this->getFormValue('unitDescription', $data->unitDescription), 
										  '', 
										  FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description', $module));
        
		$hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));

        $fields[]        = $hctUnit;
		
        /* -- Unit -- */

        $module = 'finance';

        /* Class */
        $classLabel = new MText('classLabel', _M('Class','academic') . ':');
        $classLabel->setWidth(FIELD_CONTAINER_SIZE);

        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Class id','academic'), FIELD_LOOKUPFIELD_SIZE, null, null, array('classNameS'), 'academic', 'Class', null, null, true);
        $classNameS = new MTextField('classNameS', $this->getFormValue('classNameS'), _M('Class name', 'academic'), FIELD_DESCRIPTION_SIZE);
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $classNameS));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;
        /* -- Class -- */

        /* Several Listings */
        $reportOptions = 
            array
            (
                array( _M('List of debtors', $module), 1),
                array( _M('Report of receipts', $module), 2),
                array( _M('Report of revenue expected', $module), 3),
                array( _M('Report of revenue held', $module), 4),
                array( _M('Report of revenue expected x held', $module), 5)
            );

        $reportOption = new MRadioButtonGroup('reportOption', _M('Report option', $module), $reportOptions, strlen((string)$this->getFormValue('reportOption', $reportOption)) > 0 ? $this->getFormValue('reportOption',$reportOption) : 1 );
        $reportOption->setShowLabel(false);
        $fields[] = $reportOption;
        
        /* -- Several Listings -- */
        
        $groupByLabel = new MTextLabel('groupByLabel', _M('Group by',$module) . ':');
        $groupByLabel->setWidth(FIELD_CONTAINER_SIZE);
        $fields[] = $groupByLabel;
        
        unset($flds);
        $group4 = new MCheckBox('group4', 4, '', $this->getFormValue('group4', $data->group1),_M('Period', $module));
        $flds[] = $group4;
        $group1 = new MCheckBox('group1', 1, '', $this->getFormValue('group1', $data->group1),_M('Unit', $module));
        $flds[] = $group1;
        $group2 = new MCheckBox('group2', 2, '', $this->getFormValue('group2', $data->group2),_M('Course', $module));
        $flds[] = $group2;
        $group3 = new MCheckBox('group3', 3, '', $this->getFormValue('group3', $data->group3),_M('Class', 'academic'));
        $flds[] = $group3;
        $hctGroupBy = new MHContainer('hctGroupBy', $flds);
        $hctGroupBy->setShowLabel(false);
        $fields[] = $hctGroupBy;

        unset($flds);
       
        /* Groupment */


        /* -- Groupment -- */

        $fields[] = new Separator('');
        $this->setValidators($validators);
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $filter = $this->getTypesData();
        //$busSeveralListings = $MIOLO->getBusiness($module,'BusSeveralListings');
        switch ($filter->optionId)
        {
            case 1:
                $reportX = 'RptListOfDebtors';
                break;
            case 2:
				$reportX = 'RptReportOfReceipts';
                break;
           	case 3:
				$reportX = 'RptRevenueExpected';
                break;
           	case 4:
				$reportX = 'RptRevenueHeld';
                break;
             case 5:
				$reportX = 'RtRevenueExpectedHeld';
                break;
        }
        
        //$MIOLO->getClass($module,$reportX);
        //$report = new $reportX($filter);
        
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->periodId             = $this->getFormValue('periodId');
        $data->reportType           = $this->getFormValue('reportType');
        $data->mioloUserName        = $this->getFormValue('mioloUserName');
        $data->personName           = $this->getFormValue('personName');
        $data->beginDate            = $this->getFormValue('beginDate');
        $data->endDate              = $this->getFormValue('endDate');
        $data->courseId             = $this->getFormValue('courseId');
        $data->courseVersion        = $this->getFormValue('courseVersion');
        $data->turnId               = $this->getFormValue('turnId');
        $data->unitId               = $this->getFormValue('unitId');
        $data->classId              = $this->getFormValue('classId');
        $data->reportOption         = $this->getFormValue('reportOption');
        $data->group1               = $this->getFormValue('group1');
        $data->group2               = $this->getFormValue('group2');
        $data->group3               = $this->getFormValue('group3');
        $data->group4               = $this->getFormValue('group4');

        return $data;
    }

}

?>
