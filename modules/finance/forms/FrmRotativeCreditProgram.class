<?php
/**
 * Rotative Credit Program form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmRotativeCreditProgram extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Rotative credit program', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        
        $fields[] = $toolBar;

        $options = array( array(_M('Parcels out of date', $module), 1),
                          array(_M('Parcels out of date for specific period', $module), 2),
                          array(_M('Future parcels', $module), 3),
                          array(_M('Total by pupil', $module), 4)
                        );
        $rbgReportTypeLabel = new MText('rbgReportTypeLabel', _M('Report type', $module).':');
        $rbgReportTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $rbgReportType = new MRadioButtonGroup('rbgReportType', null, $options,  strlen((string)$this->getFormValue('rbgReportType', $data->rbgReportType))>0 ? $this->getFormValue('rbgReportType', $data->rbgReportType) : 1, null, 'vertical');
        $rbgReportType->setShowLabel(false);
        $fields[] = new MHContainer('hctReportType', array($rbgReportTypeLabel, $rbgReportType));
       
        $rbgListModeLabel = new MText('rbgListModeLabel', _M('List mode', $module).':');
        $rbgListModeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $options = array( array(_M('List all', $module), 1),
                          array(_M('Paginate', $module), 2)
                        );
                        
        $rbgListMode = new MRadioButtonGroup('rbgListMode', null, $options, strlen((string)$this->getFormValue('rbgListMode', $data->rbgListMode))>0 ? $this->getFormValue('rbgListMode', $data->rbgListMode) : 1, null, 'horizontal');
        $rbgListMode->setShowLabel(false);
        $fields[] = new MHcontainer('hctListMode', array($rbgListModeLabel, $rbgListMode));
      
        $fields[] = new MSeparator('');
        $fields[] = new MButton('generate', _M('Generate', $module), 'SUBMIT');
        $fields[] = new MSeparator('');
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setShowPostButton(false);
    }
    
    /**
     * Get this action when submit button on this form is clicked
     */
     public function generate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdRotativeCreditProgram');
        $this->addField(new MSeparator('<hr>'));
        $this->addField($grid);
     }
    
    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->reportType = $this->reportType->value;
        $data->listMode   = $this->listMode->value;
        return $data;
    }

}
?>
