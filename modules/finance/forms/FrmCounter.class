<?php

/**
 * Counter form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmCounter extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $counterId = MIOLO::_request('counterId');

            $business = $MIOLO->getBusiness($module, 'BusCounter');
            $data     = $business->getCounter($counterId);
        }
         
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $counterLabel = new MText('counterLabel', _M('Counter number',$module).':');
        $counterLabel->setWidth(FIELD_CONTAINER_SIZE);
        $counterLabel->setClass('m-caption m-caption-required');

        $flds[] = $counterLabel;
        $counterId = new MTextField('counterId', $this->getFormValue('counterId', $data->counterId), _M('', $module ), FIELD_ID_SIZE);
        $validators[] = new MIntegerValidator('counterId', _M('Counter number',$module),'required');
        if ( $function == 'update' )
        {
            $counterId->setReadOnly(true);
        }
        $flds[]    = $counterId;

        $hctCounter = new MHContainer('hctCounter', $flds);
        $hctCounter->setShowLabel(true);
        $fields[]  = $hctCounter;
        unset($flds);

        $responsableLabel = new MText('responsableLabel', _M('Responsible',$module).':');
        $responsableLabel->setWidth(FIELD_CONTAINER_SIZE);
        $responsableLabel->setClass('m-caption m-caption-required');
        $flds[]           = $responsableLabel;

        $responsableId = new MLookupTextField('responsableId', $this->getFormValue('responsableId',$data->responsableId), _M('',$module), FIELD_ID_SIZE, null, null, 'responsableName', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $responsableId->setJsHint(_M('Enter the responsible code',$module));
        $flds[]          = $responsableId;

        $responsableName = new MTextField('responsableName', $this->getFormValue('responsableName',$data->responsableName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $responsableName->setReadOnly(true);
	$validators[] = new MRequiredValidator('responsableName', _M('Responsible', $module));
        $flds[]           = $responsableName;

        $hctResponsable = new MHContainer('hctResponsable', $flds);
        $hctResponsable->setShowLabel(true);
        $fields[]  = $hctResponsable;
        unset($flds);
       
        $unitsLabel = new MText('unitsLabel', _M('Unit',$module).':');
        $unitsLabel->setWidth(FIELD_CONTAINER_SIZE);
        $unitsLabel->setClass('m-caption m-caption-required');
        $flds[]      = $unitsLabel;
        
        $business = $MIOLO->getBusiness('basic','BusUnit');
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId',$data->unitId), '', $business->listUnit(), false, '', 2);
        $unitId->setJsHint( _M('Choose the unit',$module) );
        $validators[] = new MIntegerValidator('unitId', _M('Unit',$module),'required');
        $flds[]        = $unitId;
        
        $hctUnit = new MHContainer('hctUnit', $flds);
        $hctUnit->setShowLabel(true);
        $fields[]  = $hctUnit;
        unset($flds);
        
        $isActiveLabel = new MText('isActiveLabel', _M('Is active',$module).':');
        $isActiveLabel->setWidth(FIELD_CONTAINER_SIZE);
        $isActiveLabel->setClass('m-caption m-caption-required');
        $flds[]        = $isActiveLabel;

        $isActive = new MRadioButtonGroup('isActive', '', SAGU::listYesNo(1), $this->getFormValue('isActive', $data->isActive) ? $this->getFormValue('isActive', $data->isActive) : DB_TRUE, null, 'horizontal');
        $isActive->setShowLabel(false);
        $flds[]   = $isActive;

        $hctIsActive = new MHContainer('hctLabel', $flds);
        $fields[] = $hctIsActive;
        unset($flds);

	/* Autenticadora Include */
		$printerTypeLabel = new MText('printerType',_M('Use authentication printer ?',$module));
        $printerTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$printerTypeLabel->setClass('m-caption m-caption-required');
        $flds[]        = $printerTypeLabel;
		$optYes   = new MOption('optY', 'Y', _M('Yes', $module), false);
		$optNo	  = new MOption('optN', 'N', _M('No',$module), false);

		$options[] = $optYes;
		$options[] = $optNo;
        $printerType = new MRadioButtonGroup('printerType', '',$options, $this->getFormValue('printerType',$this->printerType->value), '', 'horizontal');
        $printerType->setShowLabel(false);
		$printerType->setAutoPostBack(true);
		$flds[]   = $printerType;
        $hctPrinterType = new MHContainer('hctPrinterType', $flds);
        $fields[] = $hctPrinterType;
        unset($flds);
		unset($options);
		if(strlen((string)$printerType->value) > 0  && $printerType->value == 'Y')
		{

		$printerListLabel = new MText('printerListLabel', _M('Printers',$module).':');
        $printerListLabel->setWidth(FIELD_CONTAINER_SIZE);
//        $printerListLabel->setClass('m-caption m-caption-required');
        $flds[]      = $printerListLabel;
        $options = $this->getPrinters();
		$printersList = new MSelection('printerName',$this->getFormValue('printerName',$data->printerName) , '',$options->options);
		$printersList->setJsHint(_M('Choose the printer',$module));
		$flds[] = $printersList;
		$hctPrinters = new MHContainer('hctPrinter',$flds);
		$hctPrinters->setShowLabel(true);
		$fields[] = $hctPrinters;
		}
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.counterId.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'title' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'counterId'=>MIOLO::_request('counterId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCounter');
        $ok = $business->deleteCounter($this->counterId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCounter');
        if ( $function == 'update' )
        {
            $ok  = $business->updateCounter($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCounter($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('counterIdS'=>$data->counterId, 'event'=>'btnSearch_click');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinCounter();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }

	public function getPrinters()
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();
		$fcups  = DEFAULT_PRINTER_FILE;
		$data->option = '';
		$data->size = '';
		if( !file_exists($fcups) )
		{
			$MIOLO->information(_M('CUPS printer file does not exist. Please check de parameter DEFAULT_PRINTER_FILE.', 'finance'),'','');
		}
		else if(!(fileperms($fcups) & 0x0004) && !(fileperms($fcups) & 0x0040))
		{
			$MIOLO->information(_M('You don\'t have permission for read the cups file.','finance'),'','');
		}
		$buffer  = @file($fcups);
		if(count($buffer) > 0)
		{
			$size = 0;
			for($x=0;$x < count($buffer);$x++)
			{
				if(!strchr($buffer[$x],'#'))
				{
					if(substr($buffer[$x],0,8) == '<Printer')
					{
						$option = split('>',substr($buffer[$x],9));
						$options[] = array($option[0],$option[0]); 
						if(strlen((string)$option[0]) > $size)
						{
							$size = strlen((string)$option[0])+1;
						}
					}
				}
			}
			$data->options = $options;
			$data->size = $size;
		}
		else 
		{
			$MIOLO->information(_M('Your httpd user does not have permission for read the printer\'s file.','finance'),'','');
		}
		return $data;
	} 
}
?>
