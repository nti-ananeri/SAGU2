<?php
/**
 *
 * This file handles the connection and actions for finIncentive table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the finIncentive table
 */
class FrmIncentiveReport extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Incentive', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $event  =  MIOLO::_request('__EVENTTARGETVALUE');
        if ( ! $event )
        {
             $event = MIOLO::_request('event');
        }

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->hideButton('tbBtnSave');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
    
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert(_M('Incentive report', 'finance'), $this->home, 'incentiveReport-16x16.png', true);
        }
        //fim favoritos
            
    
        if($event == 'btnIncentive:click')
        {
            $toolBar->disableButton('tbBtnNew');
            $toolBar->disableButton('tbBtnSearch');
            $toolBar->disableButton('tbBtnBookmark');

            $this->setFormValue('contractIdS',           $this->incenticeSerach->contractIdS)            == null;
            $this->setFormValue('contractCourseIdS',     $this->incentiveSearch->contractCourseIdS)      == null;
            $this->setFormValue('contractCourseVersionS',$this->incentiveSearch->contractCourseVersionS) == null; 
            $this->setFormValue('contractCourseNameS',   $this->incentiveSearch->contractCourseNameS)    == null; 
        }
        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $incentiveIdS       = new MHiddenField('incentiveIdS', '');
        $fields[]           = $incentiveIdS;

        // ContractPersonId
        $contractPersonIdLabelS = new MText('contractPersonIdLabelS', _M('Person',$module).':');
        $contractPersonIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractPersonIdLabelS;

        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->incentiveSearch->contractPersonIdS), '', FIELD_ID_SIZE, null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'contractUnitIdS'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonIdS'), ! $this->page->isPostBack() );
        $validators[] = new MIntegerValidator('contractPersonIdS');
        $contractPersonIdS->setJsHint(_M('Enter the person id', $module));
        $flds[]           = $contractPersonIdS;
        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->incentiveSearch->contractPersonNameS), _M('',$module),  FIELD_DESCRIPTION_SIZE);
        $contractPersonNameS->setReadOnly(true);
        $flds[]             = $contractPersonNameS;
        $hctPersonS = new MHContainer('hctPersonS', $flds);
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;
        unset($flds);       
       
        // Contract id 
        $contractIdLabelS = new MText('contractIdLabelS', _M('Contract',$module).':');
        $contractIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $contractIdLabelS;
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), _M('',$module), FIELD_ID_SIZE, null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), 'academic', 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Enter the contract id',$module));
        $validators[] = new MIntegerValidator('contractIdS');
        $flds[]           = $contractIdS;
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->incentiveSearch->contractCourseIdS), _M('',$module), FIELD_ID_SIZE);
        $contractCourseIdS->setReadOnly(true);
        $flds[]           = $contractCourseIdS;
        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->incentiveSearch->contractCourseVersionS), _M('',$module), 3);
        $contractCourseVersionS->setReadOnly(true);
        $flds[]                = $contractCourseVersionS;
        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->incentiveSearch->contractCourseNameS), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $contractCourseNameS->setReadOnly(true);
        $flds[]             = $contractCourseNameS;
        $hctContractS = new MHContainer('hctContractS', $flds);
        $hctContractS->setShowLabel(true);
        $fields[]    = $hctContractS;
        unset($flds);
      
        // Incentive type 
        $incentiveTypeLabelS = new MText('incentiveTypeLabelS', _M('Incentive type',$module).':');
        $incentiveTypeLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $incentiveTypeLabelS;
        $incentiveTypeIdS = new MLookupTextField('incentiveTypeIdS', $this->getFormValue('incentiveTypeIdS',$this->incentiveSearch->incentiveTypeIdS), _M('',$module), FIELD_ID_SIZE, null, null, 'incentiveTypeDescriptionS', $module, 'IncentiveType', null, null, true);
        $incentiveTypeIdS->setJsHint(_M('Enter the incentive type id',$module));
        $flds[]           = $incentiveTypeIdS;
        $incentiveTypeDescriptionS = new MTextField('incentiveTypeDescriptionS', $this->getFormValue('incentiveTypeDescriptionS',$this->incentiveSearch->incentiveTypeDescriptionS), _M('',$module),  FIELD_DESCRIPTION_SIZE);
        $incentiveTypeDescriptionS->setReadOnly(true);
        $flds[]             = $incentiveTypeDescriptionS;
        $hctIncentiveS = new MHContainer('hctIncentiveS', $flds);
        $hctIncentiveS->setShowLabel(true);
        $fields[]  = $hctIncentiveS;
        unset($flds);               
       
        // Supporter id 
        $supporterIdLabelS = new MText('supporterIdLabelS', _M('Supporter',$module).':');
        $supporterIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $supporterIdLabelS;
        $supporterIdS = new MLookupTextField('supporterIdS', $this->getFormValue('supporterIdS',$this->incentiveSearch->supporterIdS), _M('',$module), FIELD_ID_SIZE,  null, null, 'supporterNameS', 'basic', 'Person', null, null, true);
        $supporterIdS->setJsHint(_M('Enter the supporter id',$module));
        $flds[]           = $supporterIdS;
        $supporterNameS = new MTextField('supporterNameS', $this->getFormValue('supporterNameS',$this->incentiveSearch->supporterNameS), _M('',$module),  FIELD_DESCRIPTION_SIZE);
        $supporterNameS->setReadOnly(true);
        $flds[]             = $supporterNameS;
        $hctSupporterS = new MHContainer('hctSupporterS', $flds);
        $hctSupporterS->setShowLabel(true);
        $fields[]  = $hctSupporterS;
        unset($flds);   
       
        // Start date 
        $startDateS = new MCalendarField('startDateS', $this->getFormValue('startDateS', $this->incentiveSearch->startDateS), _M('Start date',$module), FIELD_DATE_SIZE);
        $startDateS->setJsHint(_M('Enter the start date',$module));
        $validators[] = new MDATEDMYValidator('startDateS', '', 'optional');
        $fields[] = $startDateS;                

        // End date
        $endDateS = new MCalendarField('endDateS', $this->getFormValue('endDateS', $this->incentiveSearch->endDateS), _M('End date',$module), FIELD_DATE_SIZE);
        $endDateS->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;      
      
        // Value is percent 
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $valueIsPercentLabelS = new MText('valueIsPercentLabelS', _M('Value is percent',$module).':');
        $valueIsPercentLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $valueIsPercentS = new MRadioButtonGroup('valueIsPercentS', '', $messagesTypeS, $this->getFormValue('valueIsPercentS', $valueIsPercentS), null, 'horizontal');
        $valueIsPercentS->SetShowLabel(false);
        $hctValueIsPercentS = new MHContainer('hctValueIsPercentS', array($valueIsPercentLabelS, $valueIsPercentS));
        $fields[]  = $hctValueIsPercentS;
       
        // Value 
        $valueS = new MTextField('valueS', $this->valueS->value, _M('Value', $module), FIELD_MONETARY_SIZE);
        $validators[] =   new MFloatValidator('valueS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $fields[] = $valueS;
        
        // Agglutinate
        $agglutinateLabelS = new MText('agglutinateLabelS', _M('Agglutinate',$module).':');
        $agglutinateLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $agglutinateS = new MRadioButtonGroup('agglutinateS', '', $messagesTypeS, $agglutinateS, null, 'horizontal');
        $agglutinateS->SetShowLabel(false);
        $hctAgglutinateS = new MHContainer('hctAgglutinateS', array($agglutinateLabelS, $agglutinateS));
        $fields[]  = $hctAgglutinateS;

        // Cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Cost center',$module).':');
        $costCenterLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]           = $costCenterLabelS;
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$this->incentiveSearch->costCenterIdS), _M('',$module), FIELD_ID_SIZE,  null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Enter the supporter id',$module));
        $flds[]           = $costCenterIdS;
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$this->incentiveSearch->costCenterDescriptionS), _M('',$module),  FIELD_DESCRIPTION_SIZE);
        $costCenterDescriptionS->setReadOnly(true);
        $flds[]             = $costCenterDescriptionS;
        $hctCostCenterS = new MHContainer('hctCostCenterS', $flds);
        $hctCostCenterS->setShowLabel(true);
        $fields[]  = $hctCostCenterS;
        unset($flds);         
       
        // Cancellation date
        $fields[] = new MCalendarField('cancellationDateS', $this->getFormValue('cancellationDateS', $this->incentiveSearch->cancellationDateS), _M('Cancellation date', $module), FIELD_DATE_SIZE);
        $fields[] = new Separator();

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);
        
    }

    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filters->personId         = $this->contractPersonIdS->value;
        $filters->contractId       = $this->contractIdS->value;
        $filters->supporterId      = $this->supporterIdS->value;
        $filters->incentiveTypeId  = $this->incentiveTypeIdS->value;
        $filters->startDate        = $this->startDateS->value;
        $filters->endDate          = $this->endDateS->value;
        $filters->valueIsPercent   = $this->valueIsPercentS->value;
        $filters->value            = $this->valueS->value;
        $filters->agglutinate      = $this->agglutinateS->value;
        $filters->costCenterId     = $this->costCenterIdS->value;
        $filters->cancellationDate = $this->cancellationDateS->value;
        $class = 'RptIncentiveReport';
        $MIOLO->getClass('finance', $class);
        $obj = new $class($filters);
    }
}
?>
