<?php

/**
 *
 * This file handles the connection and actions for acdReason table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdIncomeForecast extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:register:incomeForecast';
        $module = MIOLO::_request('module');
//        $function = MIOLO::_request('function');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        
        $columns = array(
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( _M('Operation id', $module),   'right', true, null, true, null, true ),
                         new MGridColumn( _M('Operation', $module),      'left',  true, null, true, null, true ),
                         new MGridColumn( _M('Operation type', $module), 'right', true, null, true, null, true ),
                         new MGridColumn( _M('Generation date', $module), 'right', true, null, true, null, true ),
                         new MGridColumn( _M('Value', $module),          'right', true, null, true, null, true ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( null ),
                         new MGridColumn( _M('Automatically generated', $module), 'right', true, null, true,  array(DB_TRUE => _M('Yes', $module), DB_FALSE => _M('No', $module) ), true )   
                        );

        $opts = array('function'=>'update',
                      'event'=>'update_click',
                      'contractId'=>'%0%',
                      'incomeForecastId'=>'%1%',
                      'operationId'=>'%2%',
                      'description'=>'%3%',
                      'operationTypeId'=>'%4%',
                      'recorddate'=>'%5%',
                      'learningPeriodId'=>'%8%',
                      'isProcessed'=>'%9%',
                      'goto'=>urlencode($MIOLO->getActionURL($module, $home, null, $opts)));

        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function'=>'delete',
                      'contractId'=>'%0%',
                      'incomeForecastId'=>'%1%',
                      'operationId'=>'%2%',
                      'description'=>'%3%',
                      'operationTypeId'=>'%4%',
                      'recorddate'=>'%5%',
                      'learningPeriodId'=>'%8%',
                      'isProcessed'=>'%9%',
                      'event'=>'tbBtnDelete_click',
                      'goto'=>urlencode($MIOLO->getActionURL($module, $home, null, $opts)));
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function'=>'generate',
                      'contractId'=>'%0%',
                      'incomeForecastId'=>'%1%',
                      'operationId'=>'%2%',
                      'description'=>'%3%',
                      'operationTypeId'=>'%4%',
                      'recorddate'=>'%5%',
                      'learningPeriodId'=>'%8%',
                      'isProcessed'=>'%9%',
                      'maturityDate'=>'%10%',
                      'accountSchemeId'=>'%11%',
                      'costCenterId'=>'%12%',
                      'comments'=>'%13',
                      'event'=>'tbBtnGenerate_click',
                      'goto'=>urlencode($MIOLO->getActionURL($module, $home, null, $opts)));
        $href_generate = $MIOLO->getActionURL($module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);

        $businessDefaultOperations = $MIOLO->getBusiness($module, 'BusDefaultOperations');
        $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, 0  , 0, 'GrdIncomeForecast' );
        $this->setRowMethod($this, 'myRowMethod');
        $this->setIsScrollable();
       

 
        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );
        
        $this->addActionIcon(_M('Close income forecast', $module), 'close.png', $href_generate);
       

        $this->eventHandler();

    }

    public function myRowMethod( $i, $row, $actions, $columns )
    {
        if ( $row[9] == 't' )
        {
            $actions[2]->enabled = false;
        }
    }


}

?>
