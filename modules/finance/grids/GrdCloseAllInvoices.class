<?php

/**
 * Person agreements
 *
 * @author Giovani Murilo D. Corrêa [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Giovani Murilo D. Corrêa [gmurilo@gmail.com]
 *
 * @since
 * Class created on 17/12/2007
 *
 * \b Organization: \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
**/ 

class GrdCloseAllInvoices extends MGrid
{
    

    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $valueField = new MTextField('valueField[]',  null, '', '15');
        $selRights  = new MTextLabel('selRights', '', '' );

        $columns = array( new MGridColumn( _M('Invoice id',   $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Period id',    $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Emission date', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Maturity date', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Invoice value', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Open value',    $module), 'right', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Value updated', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridControl( $valueField, _M('Value of closing', $module), 'right', false, '15%' ),
                          new MGridColumn( null )
                        );
       // this foreach is necessary until the getActionURL function is
       // able to handle an object parameter
        unset($opts);
        if (is_array($filters))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL($module, $action, null, $opts);
        parent::__construct(null, $columns, $url, 0, 0, 'GrdCloseAllInvoices');
        $this->setRowMethod('GrdCloseAllInvoices', 'myRowMethod');

        $this->addActionSelect();
        $btnClose =  new MButton( 'btnCloseSelectedInvoices', _M('Execute agreement', $module) ); 
        $btnClose->setReadOnly(true);
        $ctlArray = array($btnClose);
      
        // set the controls in the grid
        $this->setControls( $ctlArray );
        $this->eventHandler();
    }
   
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $columns[10]->control[$i]->_addStyle('color', 'red');
        $columns[12]->control[$i]->value = $columns[13]->control[$i]->value;
        $columns[13]->control[$i]->SetReadOnly(true);
    }

    public function getTypesDataGrid()
    {
        // Pega dados do Formulário.
        $data->personId       = MForm::getFormValue('personId',$this->personId->value);
        $data->contractId       = MForm::getFormValue('contractId',$this->contractId->value);
        $data->periodId       = MForm::getFormValue('periodId', $this->periodId->value);
        $data->personName     = MForm::getFormValue('personName',$this->personName->value);
        $data->date           = MForm::getFormValue('date',$this->date->value);
        $data->operationId    = MForm::getFormValue('operationId',$this->operationId->value);
        $data->datePardon     = MForm::getFormValue('datePardon',$this->datePardon->value);
        $data->comments       = MForm::getFormValue('comments', $this->comments->value);
        $data->paymentType    = MForm::getFormValue('paymentType', $this->paymentType->value);
        $data->discountValue  = MForm::getFormValue('discountValue', $this->discountValue->value);
        $data->discountType   = MForm::getFormValue('discountType', $this->discountType->value);
        $data->parcelValue    = MForm::getFormValue('parcelValue', $this->parcelValue->value);
        $data->policyId       = MForm::getFormValue('policyId', $this->policyId->value);
        $data->costCenterId   = MForm::getFormValue('costCenterId', $this->costCenterId->value);
        $data->accountSchemeId= MForm::getFormValue('accountSchemeId', $this->accountSchemeId->value);
        $data->courseId       = MForm::getFormValue('courseId', $this->courseId->value);
        $data->courseVersion  = MForm::getFormValue('courseVersion', $this->courseVersion->value);
        $data->unitId         = MForm::getFormValue('unitId', $this->unitId->value);
        $data->messageInvoiceInput = MForm::getFormValue('messageInvoiceInput', $this->messageInvoiceInput->value);
        $data->messageInvoice = MForm::getFormValue('messageInvoice', $this->messageInvoice->value);
        $data->parcelsNumber  = MForm::getFormValue('parcelsNumber', $this->parcelsNumber->value);
        $data->maturityDateInput = MForm::getFormValue('maturityDateInput', $this->maturityDateInput->value);
        $data->maturityDate   = MForm::getFormValue('maturityDate', $this->maturityDate->value);
        $data->bankAccountId  = MForm::getFormValue('bankAccountId', $this->bankAccountId->value);
        $data->bankContractId = MForm::getFormValue('bankContractId', $this->bankContractId->value);
        $data->inputValue     = MForm::getFormValue('inputValue', $this->inputValue->value);
        $data->chargesValue   = MForm::getFormValue('chargesValue', $this->chargesValue->value);
        $data->entryValue     = MForm::getFormValue('entryValue', $this->entryValue->value);
        $data->entryDate      = MForm::getFormValue('entryDate', $this->entryDate->value);
        $data->totalDiscountValue     = MForm::getFormValue('totalDiscountValue',$this->totalDiscountValue->value);
        $data->totalValue = 0;
        return $data;
    }
    
   /**
     *
     */
    public function btnCloseSelectedInvoices_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        
        // Pega valores da grid select = invoiceId, $valueField = valor declarado do título. 
        $select = $this->page->request( 'select' . $this->name );
        $valueField   = $this->page->request( 'valueField' );

        // número das linhas selecionadas
        $data = $this->getTypesDataGrid(); 
        
        foreach($select as $item => $valor)
        {
            $data->totalValue += (float)($valueField[$item]);
        }
        $data->totalValue           = SAGU::formatNumber($data->totalValue);
        $data->totalDiscountValue   = SAGU::formatNumber($data->totalDiscountValue);
        $data->inputValue           = SAGU::formatNumber($data->inputValue);
        $data->chargesValue         = SAGU::formatNumber($data->chargesValue);
        $valor = (float)$data->totalValue-(float)$data->totalDiscountValue;
        $valor = (float)$valor-(float)$data->inputValue;
        $valor += (float)$data->chargesValue;
        if( is_array($data->parcelValue) )
        {
            $valor = $valor-(float)SAGU::formatNumber(array_sum($data->parcelValue));
        }
        else
        {
            $valor = $valor-(float)SAGU::formatNumber($data->parcelValue*$data->parcelsNumber);
        }
        if((float)$valor > 1 || (float)$valor < -1 )
        {
            $msg  = 'O valor da soma das parcelas + entrada é maior ou menor que o valor total da negociação.';
                /*_M('Error, verify if you have filled all the fields correctly.',$module);*/
            $vars['personId']   = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        $businessEntry = $MIOLO->getBusiness($module, 'BusEntry');
        if(is_array($select) == false)
        {
            $msg  = _M('Error, select at least one invoice to close',$module);
            $vars['personId']   = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        $ok = $businessEntry->closeAgreementsInvoice($select);
        if(!$ok)
        {
            $msg  = _M('Error, one or more invoices was not closed',$module);
            $vars['personId']   = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        $ok = $businessEntry->insertAgreementsInvoice($data, $select);
        if( $ok == DB_FALSE )
        {
            $msg  = _M('Error executing requested operation.',$module);
            $vars['personId'] = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
         }
        else
        {
            $vars['execute'] = true;
            $vars['agreementId'] = $ok->agreementId;
        }
        $vars['event'] = 'btnSave_click';

        $postAction = substr($action,0,strrpos($action,':')) . ':closeAllInvoices';
        $this->page->mGoto($MIOLO->getActionURL($module, $postAction, null, $vars));
    }
}

?>
