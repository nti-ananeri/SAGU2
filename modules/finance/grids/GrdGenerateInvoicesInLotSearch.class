<?php

/**
 * Person agreements
 *
 * @author Giovani Murilo D. Corr�a [gmurilo@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Giovani Murilo D. Corr�a [gmurilo@gmail.com]
 *
 * @since
 * Class created on 17/12/2007
 *
 * \b Organization: \n
 * iSolution - Solu��es em TI \n
 * The iSolution Development Team
 *
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
**/ 

class GrdGenerateInvoicesInLotSearch extends MGrid
{
    

    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $module = 'finance';
        $action = MIOLO::getCurrentAction();

        $selRights  = new MTextLabel('selRights', '', '' );

        $columns = array( 
                          new MGridColumn( _M('Contract id',   $module), 'right',  true, null, false, null, true ),
                          new MGridColumn( _M('Person id',   $module), 'right',  true, null, false, null, true ),
                          new MGridColumn( _M('Person',   $module), 'left',  true, null, true, null, false ),
                          new MGridColumn( _M('Account scheme',    $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Cost center',    $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Course', $module), 'center', true, null, true, null, false ),
                          new MGridColumn( NULL ),
                          new MGridColumn( NULL ),
                          new MGridColumn( _M('Unit', $module), 'center', true, null, true, null, false ),
                          new MGridColumn( _M('Maturity day', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Value',    $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Parcels number', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Policy',    $module), 'right', true, null, true, null, false ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Bank', $module), 'center', true, null, true, null, false ),
                          new MGridColumn( null )
                        );
       // this foreach is necessary until the getActionURL function is
       // able to handle an object parameter
        unset($opts);
        if (is_array($filters))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL($module, $action, null, $opts);
        parent::__construct(null, $columns, $url, 0, 0, 'GrdGenerateInvoicesInLotSearch');
        $this->setRowMethod('GrdGenerateInvoicesInLotSearch', 'myRowMethod');

        $this->addActionSelect();
        $btnGenerate =  new MButton( 'btnGenerate', _M('Generate', $module) ); 
        $ctlArray = array( $btnGenerate );
      
        // set the controls in the grid
        $this->setControls( $ctlArray );
        $this->eventHandler();
    }
   
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
    }

    public function getTypesDataGrid()
    {
        // Pega dados do Formul�rio.
        $data->personId         = MForm::getFormValue('personId', $this->personId->value);
        $data->periodId         = MForm::getFormValue('periodId', $this->periodId->value);
        $data->learningPeriodId = MForm::getFormValue('learningPeriodId', $this->learningPeriodId->value);
        $data->beginDate        = MForm::getFormValue('beginDate', $this->beginDate->value);
        $data->courseId         = MForm::getFormValue('courseId', $this->courseId->value);
        $data->unitId           = MForm::getFormValue('unitId', $this->unitId->value);
        $data->turnId           = MForm::getFormValue('turnId', $this->turnId->value);
        $data->classId          = MForm::getFormValue('classId', $this->classId->value);
        $data->month            = MForm::getFormValue('month', $this->month->value);
        $data->year             = MForm::getFormValue('year', $this->year->value);
        $data->checkInvoice     = MForm::getFormValue('checkInvoice', $this->checkInvoice->value);
        $data->contractId       = MForm::getFormValue('contractId', $this->contractId->value);
        return $data;
    }
    
   /**
     *
     */
    public function btnGenerate_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        
        // Pega valores da grid select = invoiceId, $valueField = valor declarado do t�tulo. 
        $select = $this->page->request( 'select' . $this->name );
        $valueField   = $this->page->request( 'valueField' );
        $business = $MIOLO->getBusiness('finance', 'BusInvoicesGeneration');
        // n�mero das linhas selecionadas
        $data = $this->getTypesDataGrid();
        //die('<pre>'.print_r($data).'<br>Select:'.print_r($select)); 
        
        if ( count($select) > 0 )
        {
            $data->contractId = $select;
            $ok = true;
            $info = $business->generateInvoices($data);
            if ( $ok )
            {
                $msg  = "T�tulos gerados.";
                $msg .= "<br>";
                $msg .= "Deseja imprim�-los ?";
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Information',$module);
                
                $gotoYes = $MIOLO->GetActionURL($module,$action.'&pageNumber=2&contractId='.$data->contractId.'&personId='.$data->personId.'&periodId='.$data->periodId);
                $gotoNo = $MIOLO->GetActionURL($module,$self);
                $eventYes = "tbBtnPrint_click";
                $eventNo = "";
                $MIOLO->Question($msg, $gotoYes, $gotoNo, $eventYes, $eventNo);
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }
}

?>
