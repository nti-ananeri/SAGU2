<?php

/**
 *
 * This file handles the connection and actions for finBank table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdReceivableInvoiceConsult extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $columns = array( new MGridColumn( null ),
                          new MGridColumn( _M('Entry id',              $module), 'right',  true,  null, true, null, false),
                          new MGridColumn( _M('Operation id',          $module), 'right',  true,  null, true, null, false),
                          new MGridColumn( _M('Operation description', $module), 'left',   false, null, true, null, false),
                          new MGridColumn( _M('Operation date',        $module), 'center', true,  null, true, null, false),
                          new MGridColumn( _M('Creation type',         $module), 'center', true,  null, true, null, false),
                          new MGridColumn( _M('Value',                 $module), 'right',  true,  null, true, null, false),
                          new MGridColumn( _M('Accounted',             $module), 'center', true,  null, true, null, false) 
                        );

        $url = $MIOLO->getActionURL($module, $action, null, $opts);
        parent::__construct(null, $columns, $url, 0, 0, 'gridReceivableInvoiceConsult', false, false);
        $this->setRowMethod('GrdReceivableInvoiceConsult', 'myRowMethod');

        $goto = $MIOLO->getActionURL($module, 'main:diverseConsultation', null, array('invoiceId'=>$filters->invoiceId, 'event'=>'btnSearch_click'));

        $opts = array('function'=>'update', 
                      'entryId'=>'%1%',
                      'invoiceId'=>'%0%',
                      'goto'=>urlencode($goto)
                     );
                     
        $hrefUpdate = $MIOLO->getActionURL($module, "main:register:entry", null, $opts);

        $opts = array('function'=>'delete',
                      'event'=>'tbBtnDelete_click',
                      'entryId'=>'%1%',
                      'invoiceId'=>'%0%',               
                      'goto'=>urlencode($goto)
                     );
        $hrefDelete = $MIOLO->getActionURL($module, 'main:register:entry', null, $opts);

        $this->addActionUpdate($hrefUpdate);
        $this->addActionDelete($hrefDelete);

        $this->setIsScrollable();
        $this->eventHandler();
    }

   /**
    * Function to handle the before each row creation
    */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        if (substr($row[3], 0, 1) == 'D')
        {
            $columns[3]->control[$i]->_addStyle('color', 'red');
        }
        elseif (substr($row[3], 0, 1) == 'C')
        {
            $columns[3]->control[$i]->_addStyle('color', 'blue');
        }

        $goto = $MIOLO->getActionURL($module, 'main:diverseConsultation', null, array('invoiceId'=>$row[0], 'event'=>'btnSearch_click'));
        if ($row[7] == DB_TRUE || $row[9] == 'C' /*|| strlen((string)$row[8]) > 0 */)
        {
            $actions[1]->enabled = false;
            $location = $MIOLO->getActionURL($module,"html:images:red.png");
            $optsLink = array('entryId'    => $row[1],
                              'isAccounted'=> $row[7],
                              'event'      => 'tbBtnUpdate_click',
                              'goto'       => urlencode($goto)
                             );

            $action = $MIOLO->getActionURL($module,"main:process:alterEntryAccounted", null, $optsLink);
            $link = new MImageLink( 'mLink_' . $row[1],  _M('Accounted', $module), $action, $location, _M('Accounted', $module));
            $link->setClass($columns[0]->getClass());
            $columns[7]->control[$i]->setValue( $link->generate() );
            $columns[7]->control[$i]->color = 'red';
            if($row[9] == 'C' /*|| strlen((string)$row[8]) > 0 */) 
            {
                $actions[0]->enabled = false;
            }
        }
        else
        {
            $actions[1]->enabled = true;
            $location = $MIOLO->getActionURL($module,"html:images:green.png");
            $optsLink = array('entryId'     => $row[1],
                              'isAccounted' => $row[7],
                              'event'       => 'tbBtnUpdate_click',
                              'goto'        => urlencode($goto)
                             ); 
            
            $action = $MIOLO->getActionURL($module,"main:process:alterEntryAccounted", null, $optsLink);
            $link = new MImageLink( 'mLink_' . $row[0],  _M('Not accounted', $module), $action, $location,_M('Not accounted', $module) );
            $link->setClass($columns[0]->getClass());
            $columns[7]->control[$i]->setValue( $link->generate() );
            $columns[7]->control[$i]->color = 'grey';
        }
    }
}
?>
