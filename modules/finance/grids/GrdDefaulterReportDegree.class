<?php

/**
 *
 * This file handles the connection and actions for finDefaulterReportDegree table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 02/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDefaulterReportDegree extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:report:defaulter:defaulterDegree';
        $module = MIOLO::_request('module');

        $href = $MIOLO->getActionURL($module, 'main', null, array('personId'=>$personId, 'personId'=>'#0#', 'event'=>'btnSearch_click'));
        $href2 = $MIOLO->getActionURL($module, 'main:report:receivableInvoiceConsult', null, array('invoiceId'=>$invoiceId, 'invoiceId'=>'#5#'));

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( new MGridColumn( null), 
                          new MGridHyperlink( _M('Person', $module),           $href, '', true),
//                          new MGridHyperlink(_M('Number of pupils classified', $module), $href, '', true ),
//                          new MGridColumn( _M('Person', $module),        'right', true, null, true, null, true ),
                          new MGridColumn( _M('Residential phone', $module),   'right', true, null, true, null, true ), 
                          new MGridColumn( _M('Cell phone', $module),          'right', true, null, true, null, true ),
                          new MGridColumn( _M('Work phone', $module),          'right', true, null, true, null, true ),
                          new MGridHyperlink( _M('Invoice id', $module),       $href2, '', true),
                          new MGridColumn( _M('Defaulter value', $module),     'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Maturity date', $module),       'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Is insured', $module),          'right',  true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ), true ),
                          new MGridColumn( _M('Type', $module),    'right',  true, null, true, null, true ),
                        );


        $opts = array('function'=>'update',
                      'closeCounterId'=>'%0%');
//        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

//        $opts = array('function'    =>'delete',
//                      'closeCounterId'    =>'%0%',
//                      'event'=>'tbBtnDelete_click');
//        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);

        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, 0, 0, 'gridDefaulterReportDegree' );
        $this->setRowMethod('GrdDefaulterReportDegree', 'myRowMethod');
        
        $this->setIsScrollable();

//        $this->addActionUpdate( $href_edit );
//        $this->addActionDelete( $href_delete );

        $this->eventHandler();

    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {

        $MIOLO = MIOLO::getInstance();

        if ($row[7]  == DB_FALSE )
        {
            $actions[0]->enabled = true;
        }
        else
        {
            $actions[0]->enabled = false;
        }
    }


}

?>
