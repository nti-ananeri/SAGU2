<?php

/**
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author William Prigoç Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 14/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdInvoiceReport extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $columns = array( 
                          new MGridColumn( _M('Invoice id', $module),  'right', true, null, true, null, true ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Person id', $module),   'right', true, null, true, null, true ),
                          new MGridColumn( _M('Person name', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Value', $module),       'right', true, null, true, null, true ),
                          new MGridColumn( _M('Open value', $module),  'right', true, null, true, null, true ),
                          $filters->onlyOpenInvoices == 't' 
                            ? new MGridColumn( _M('Phones', $module), 'left', true, null, true, null, true)
                            : new MGridColumn(null)
                         );
        $opts = array('event'=>'generate_click'); 
        $url = $MIOLO->getActionURL( $module, $home, null, $opts );
        parent::__construct(null, $columns, $url, LISTING_NREGS, 0, 'gridInvoiceReport');
        $this->setRowMethod('GrdInvoiceReport', 'myRowMethod');
        $this->setTitle(_M('Invoice report by maturity date period for @1 to @2', $module, $filters->beginMaturityDate, $filters->endMaturityDate));
        
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
       
        $_opts = array('event'=>'generate_click', 'beginMaturityDate'=>$filters->beginMaturityDate, 'endMaturityDate'=>$filters->endMaturityDate, 'emissionDate'=>$filters->emissionDate, 'onlyOpenInvoices'=>$filters->onlyOpenInvoices);
        $opts = array('invoiceId'=>'%1%', 'go_back'=>urlencode($MIOLO->getActionURL($module, 'main:report:invoiceReport', null, $_opts)), 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefCloseInvoice = $MIOLO->getActionURL($module, "main:process:closeInvoice", null, $opts);
        
        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        $this->addActionIcon(_M('Close invoice', $module), 'close', $hrefCloseInvoice);
        
        $this->setIsScrollable();
        $this->eventHandler();
    }
    
    /**
     * Function to handle the before each row creation
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        if ($row[5] == SAGU::formatNumber(0))
        {
            $actions[0]->enabled = false;
        }
        else
        {
            $actions[0]->enabled = true;
        }
    }
}
?>
