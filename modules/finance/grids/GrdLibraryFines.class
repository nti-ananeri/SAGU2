<?php

/**
 *
 * This file handles the connection and actions for finIncentive table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 29/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdLibraryFines extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $home   = MIOLO::getCurrentAction();

        $columns = array( 
                          new MGridColumn( ' ',                       'center', true, null, true, null, true ),
                          new MGridColumn( _M('Fine code', $module),  'center', true, null, true, null, true ),
                          new MGridColumn( _M('Lend', $module),       'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Fine date', $module),  'center', true, null, true, null, true ),
                          new MGridColumn( _M('Was paid?', $module),  'center', true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ), true ),
                          new MGridColumn( _M('Value', $module),      'center', true, null, true, null, true)
                         );


        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        
        $url = $MIOLO->getActionURL( $module, $home, null, $opts );
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridLibraryFines' );

        $this->setRowMethod($this, 'myRowMethod');
        $this->setIsScrollable();
        $this->eventHandler();

    }
    
   /**
    * Function to handle the before each row creation
    */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $location = $MIOLO->getActionURL($module,"html:images:invoice-16x16.png");
        $optsLink = array('fineId'=>$row[1], 'function'=>'generate', 'event'=>'tbBtnUpdate_click');

        /*
        $action = $MIOLO->getActionURL($module,"main:process:incomeForecastGeneration", null, $optsLink);
        $link = new MImageLink( 'mLink_' . $row[1],  _M('Generate invoice', $module), $action, $location, _M('Generate invoice', $module));
        $link->setClass($columns[0]->getClass());
        $columns[0]->control[$i]->setValue( $link->generate() );
        $columns[0]->control[$i]->color = 'red';
        */

        $link = new MImage('mFine_' . $row[1], _M('Generate invoice', $module), $location);
        $columns[0]->control[$i]->setValue( $link->generate() );
    }
}

?>
