<?php

/**
 *
 * This file handles the connection and actions for Price table
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 *  
 * @since
 * Class created on 28/01/2008
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution development team
 *
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdPrintInvoicesInLot extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:process:generationInLot:printInvoicesInLot';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Invoice id', $module), 'center',  true, null, true, null, true ),
                          new MGridColumn( _M('Bank invoice id', $module),          'center',  true, null, true, null, true ),
                          new MGridColumn( _M('Person id', $module),     'center',  true, null, true, null, true ),
                          new MGridColumn( _M('Name', $module),  'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Value', $module),    'right',  true, null, true, null, true),
						  new MGridColumn( _M('Maturity date', $module), 'center', true, null, true, null, true),
						  new MGridColumn( _M('Emission date', $module), 'center', true, null, true, null, true),
						  new MGridColumn( _M('Course id', $module),'left',  true, null, true, null, true )
//                          new MGridColumn( _M('Parcels', $module),     'right',  true, null, true, null, true ),
//                          new MGridColumn( _M('Policy id', $module),   'right',  true, null, true, null, true )

                        );

        $opts = array('function'=>'update',
                      'invoiceId'=>'%0%');
        $href_edit = $MIOLO->getActionURL( $module, 'main:register:invoice:receivableInvoice', null, $opts );
        $opts = array('function'=>'delete',
                      'invoiceId'=>'%0%',
                      'event'=>'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );
        
		$_opts = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts = array('_invoiceId' => '%0%', 
					  'event'      => 'submit_button_click',
					  'goto'       => urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
	    $hrefPrint = $MIOLO->getActionURL($module, "main:process:printInvoice", null, $opts);


        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridPrintInvoicesInLot' );

        $this->setIsScrollable();

        $this->addActionUpdate( $href_edit );
        $this->setRowMethod('GrdPrintInvoicesInLot', 'myRowMethod');
		$this->addActionIcon(_M('Print',          $module), array('print.png', 'print_disable.png'), $hrefPrint);

        $this->eventHandler();

    }
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $businessInvoice = $MIOLO->getBusiness('finance', 'BusInvoice');
	    for ( $x = 1; $x<count($columns); $x++ )
	    {
			if ( $x == 9 )
			{
				if ( $row[9] == '(x)' )
				{
					$color = 'blue';
				}
				elseif ( $row[9] >= 0 )
				{
					$color = 'red';
				}
				elseif ( $row[9] < 0 )
				{
					$color = 'green';
				}
				$columns[$x]->control[$i]->_addStyle( 'color', $color );
			}
		}
        //botão de impressão do boleto
        if ( $row[4] < SAGU::formatNumber(MINIMAL_VALUE_TO_PRINT_INVOICE))
        {
            $actions[1]->enabled = false;
        }
        else
        {
            $actions[1]->enabled = true;
        }
		$actions[1]->value = 'icon_' . $row[23] . '.png';
        $actions[1]->valueoff = 'icon_' . $row[23] . '_disable.png';
    }
}
