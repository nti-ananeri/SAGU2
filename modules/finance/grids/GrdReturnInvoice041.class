<?php

/**
 *
 * This file handles the connection and actions for Price table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *  
 * @since
 * Class created on 16/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdReturnInvoice041 extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:process:remittanceReturn:returnInvoice';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array(
                          new MGridColumn( _M('Invoice id',      $module), 'right', true, null, true, null, false),
                          new MGridColumn( _M('Value',           $module), 'right', true, null, true, null, false),
                          new MGridColumn( _M('Bank number',     $module), 'right', true, null, true, null, false),
                          new MGridColumn( _M('Operation id',     $module), 'right', true, null, true, null, false)
                        );
                        
        $opts = array('invoiceId'=>'%0%');
        $hrefConsult   = $MIOLO->getActionURL( $module, "main:report:receivableInvoiceConsult", null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if (is_array($filters))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $this->addActionIcon(_M('Consult', $module), 'find.png', $hrefConsult);
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct(null, $columns, $url, 0, 0, 'gridReturnInvoice');
        $this->setRowMethod($this, 'myRowMethod');
        $this->setIsScrollable();
        $this->eventHandler();
    }

   /**
    * Function to execute a process before each row construction
    *
    * @param: Please, consult MIOLO Documentation to see about setRowMethod function
    *
    * @return: Please, consult MIOLO Documentation to see about setRowMethod function
    *
    */
    public function myRowMethod( $i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $businessInvoice = $MIOLO->getBusiness($module, 'BusInvoice');

        $info = ereg_replace('[^0-9]{1,}', '', $row[0]);
        if ( (strlen((string)$row[0]) == strlen((string)$info)) && (strlen((string)$row[0])>0) )
        {
            if ($businessInvoice->verifyInvoice($row[0]) == false)
            {
                $actions[0]->alt     = _M('Invoice not encountered', $module);
                $actions[0]->enabled = false;
            }
            else
            {
                $actions[0]->alt     = _M('Consult', $module);
                $actions[0]->enabled = true;
            }
        }
        else
        {
            $actions[0]->alt     = _M('Invoice not encountered', $module);
            $actions[0]->enabled = false;
        }

        $row[1] = SAGU::formatNumber($row[1]);
        // seta na grid novo valor
        $columns[1]->control[$i]->setValue( $row[1] );

    }


}
?>
