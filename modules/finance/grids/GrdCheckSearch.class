<?php

/**
 *
 * This file handles the connection and actions for finCheck table
 *
 * @author Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/11/2007
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdCheckSearch extends MGrid
{

    var $totais;
    var $total;

    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:register:check';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $valueField = new MTextField('valueField[]',  null, '', '15');
        $selRights  = new MTextLabel('selRights', '', '' );

        $columns = array( 
                          new MGridColumn( _M('Id', $module),            'right',  true, null, false, null, true ),
                          new MGridColumn( _M('Person id', $module),     'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Name', $module),          'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Check number', $module),  'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Emission date', $module), 'center', true, null, true, null, true ),
                          new MGridColumn( _M('Maturity date', $module), 'center', true, null, true, null, true ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Value', $module),         'right',  true, null, true, null, true ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Total value', $module),   'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Status', $module),        'center',  true, null, true, null, true )
                        );

        $opts = array('function' => 'update',
                      'checkId'  => '%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function' => 'delete',
                      'checkId'  => '%0%',
                      'event'    => 'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridCheck' );
//        parent::__construct( null, $columns, $url, null, 0, 'gridCheck' );

        $this->setRowMethod($this, 'myRowMethod');
        $this->addActionSelect();
        $this->setIsScrollable();

        $btnClose =  new MButton( 'btnCloseSelectedChecks', _M('Close selected checks', $module) );
        $div1     = new MDiv('div1', $btnClose, null, 'align="center"');
        $fields[] = $div1;

        $this->setControls( $fields );
        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );
        $this->setFooter(_M('(*) checks with new maturity date', 'finance'));
        $this->eventHandler();
    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        if ( $columns[19]->control[$i]->value == 'C' && strlen((string)$columns[7]->control[$i]->value)>0 )
        {
            $columns[19]->control[$i]->value = '['._M('With funds', 'finance').']';
            $columns[19]->control[$i]->_addStyle('color', 'green');
        }
        elseif ( $columns[19]->control[$i]->value == 'C' )
        {
            $columns[19]->control[$i]->value = '['._M('With funds', 'finance').']';
            $columns[19]->control[$i]->_addStyle('color', 'orange');
        }
        elseif ( $columns[19]->control[$i]->value == 'S' )
        {
            $columns[19]->control[$i]->value = '['._M('No funds', 'finance').']';
            $columns[19]->control[$i]->_addStyle('color', 'black');
        }
        elseif ( $columns[19]->control[$i]->value == 'D' )
        {
            $columns[19]->control[$i]->value = '['._M('Returned', 'finance').']';
            $columns[19]->control[$i]->_addStyle('color', 'red');
        }

        if ( strlen((string)$columns[6]->control[$i]->value)>0 )
        {
           $columns[5]->control[$i]->value = $columns[6]->control[$i]->value;
        }

        $this->totais[$columns[5]->control[$i]->value] += (float)$columns[18]->control[$i]->value;
        $this->total += (float)$columns[18]->control[$i]->value;

        if ( strlen((string)$columns[6]->control[$i]->value)>0 )
        {
           $columns[5]->control[$i]->value .= '*';
        }

    }

    function generateFooter( )
    {
        $MIOLO  = MIOLO::getInstance( );
        $module = $MIOLO->getCurrentModule( );

        if ( count($this->totais)>0 )
        {
            foreach ( $this->totais as $data => $row )
            {
                $controls[] = new MText( 'idx_' . $data, '<b>' . _M('Maturity date', 'finance') . ' ' . $data . ': </b>' . number_format($row, 2, ',', '.') . '<br>');
            }
            $controls[] = new Separator('<br>');
            $controls[] = new MText( 'idxTotal', '<b>' . _M('Total', 'finance') . ': </b>' . number_format($this->total, 2, ',', '.') . '<br>');
            $controls[] = new Separator('<br>');
            $controls = array_merge( parent::generateFooter(), $controls);
            return $controls;
        }
        return null;
    }

    public function btnCloseSelectedChecks_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $checks = $this->page->request( 'select' . $this->name );

        if ( count($checks)>0 )
        {
            $item       = urlencode(serialize($checks));
            $postAction = 'main:register:closeAllChecks';
            $this->page->mGoto($MIOLO->getActionURL($module, $postAction, $item));
        }
    }
}

?>
