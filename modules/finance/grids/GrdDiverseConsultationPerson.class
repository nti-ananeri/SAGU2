<?php

/**
 *
 * This file generate the main grids for diverse consultation invoice view
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDiverseConsultationPerson extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $columns = array( new MGridColumn( null ),
                          new MGridColumn( _M('Invoice',       $module), 'right',  true, null, true, null, false),
                          new MGridColumn( ' ',                          'center', true, null, true, null, false),
                          new MGridColumn( null ),
                          new MGridColumn( ' ',                          'center', true, null, true, null, false),
                          new MGridColumn( _M('Emission',      $module), 'center', true, null, true, null, false),
                          new MGridColumn( _M('Maturity',      $module), 'center', true, null, true, null, false),
                          new MGridColumn( _M('Value',         $module), 'right',  true, null, true, null, false),
                          new MGridColumn( _M('Open',          $module), 'right',  true, null, true, null, false),
                          new MGridColumn( _M('Date Updated',  $module), 'right',  true, null, true, null, false),
                          new MGridColumn( _M('Value updated', $module), 'right',  true, null, true, null, false),
                          new MGridColumn( null ), //bankId
                          new MGridColumn(_M('Income source', $module), 'center',  true, null, true, null, false), //bankId
                          new MGridColumn( _M('Checks',        $module), 'right',  true, null, true, null, false)
                        );
        // Item 1 - Receivable invoice consult
        $opts        = array('invoiceId'=>'%1%');
        $hrefConsult = $MIOLO->getActionURL( $module, "main:report:receivableInvoiceConsult", null, $opts );

        // Item 2 - Update receivable invoice
        $_opts       = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts        = array('function'=>'update', 'invoiceId'=>'%1%', 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefUpdate  = $MIOLO->getActionURL( $module, "main:register:invoice:receivableInvoice", null, $opts );

        // Item 3 - Delete receivable invoice
        $_opts       = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts        = array('event'=>'tbBtnDelete_click', 'function'=>'delete', 'invoiceId'=>'%1%', 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefDelete  = $MIOLO->getActionURL( $module, "main:register:invoice:receivableInvoice", null, $opts );

        // Item 4 - Print receivable invoice (internally)
        $_opts             = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts              = array('_invoiceId'=>'%1%', 'event'=>'submit_button_click', 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefInternalPrint = $MIOLO->getActionURL($module, "main:document:internalInvoice", null, $opts);

        // Item 5 - Print invoice
        $_opts             = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        if ( defined('USE_INVOICE_TEST') && USE_INVOICE_TEST == 'TRUE' )
		{
            $opts      = array('_invoiceId' => '%1%', 
                               'goto'       => urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        }
        else
        {
            $opts      = array('_invoiceId' => '%1%', 
                               'event'      => 'submit_button_click',
                               'goto'       => urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        }
        $hrefPrint = $MIOLO->getActionURL($module, "main:process:printInvoice", null, $opts);


        // Item 7 - Close invoice
        $_opts            = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts             = array('invoiceId'=>'%1%', 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefCloseInvoice = $MIOLO->getActionURL($module, "main:process:closeInvoice", null, $opts);

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if (is_array($filters))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL($module, $action, null, $opts);
        parent::__construct(null, $columns, $url, 0, 0, 'gridDiverseConsultationPerson_'.$filters->periodId);
        $this->setRowMethod('GrdDiverseConsultationPerson', 'myRowMethod');

        $this->addActionSelect('invoiceGridId_'. $filters->periodId);
        //$this->addActionSelect(_M('Select invoice',  $module), true, 'invoice_' . $periodId);
        $this->addActionIcon(_M('Consult',        $module), 'find',          $hrefConsult);
        $this->addActionUpdate($hrefUpdate);
        $this->addActionDelete($hrefDelete);
        $this->addActionIcon(_M('Print',          $module), array('print.png', 'print_disable.png'), $hrefPrint);
        $this->addActionIcon(_M('Internal print', $module), 'internalPrint', $hrefInternalPrint);
        $this->addActionIcon(_M('Close invoice',  $module), 'close',         $hrefCloseInvoice);
        $this->eventHandler();
    }
   
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $businessInvoice = $MIOLO->getBusiness('finance', 'BusInvoice');
    
        for ( $x = 1; $x<count($columns); $x++ )
        {
            if ( $x == 9 )
            {
                if ( $row[9] == '(x)' )
                {
                   $color = 'blue';
                }
                elseif ( $row[9] >= 0 )
                {
                    $color = 'red';
                }
                elseif ( $row[9] < 0 )
                {
                   $color = 'green';
                }
                $columns[$x]->control[$i]->_addStyle( 'color', $color );
            }
        }

        //botão de autenticação e de baixa
        if ( $row[8] == SAGU::formatNumber('0') )
        {
            $actions[5]->enabled = false;
            $actions[6]->enabled = false;
        }
        else
        {
            $actions[5]->enabled = true;
            $actions[6]->enabled = true;
        }

        //botão de impressão do boleto
        if ( $row[8] < SAGU::formatNumber(MINIMAL_VALUE_TO_PRINT_INVOICE))
        {
            $actions[3]->enabled = false;
        }
        else
        {
            $actions[3]->enabled = true;
        }

        $actions[3]->value = 'icon_' . $row[11] . '.png';
        $actions[3]->valueoff = 'icon_' . $row[11] . '_disable.png';

        //botão excluir
        if ( $businessInvoice->verifyAccountedEntriesForInvoice($row[1]) || $row[8] == SAGU::formatNumber('0') )
        {
            $actions[2]->enabled = false;
            $actions[1]->enabled = false;
        }
        else
        {
            $actions[2]->enabled = true;
        }

    }
}
?>
