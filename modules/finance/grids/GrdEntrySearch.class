<?php

/**
 *
 * This file handles the connection and actions for finEntry table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Edaurdo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/01/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdEntrySearch extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:register:entry';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Entry id',         $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Invoice id',       $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Operation id',     $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Description',      $module),  'left', true, null, true, null, true ),
                          new MGridColumn( _M('Entry date',       $module),  'left', true, null, true, null, true ),
                          new MGridColumn( _M('Value',            $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Cost center id',   $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Description',      $module),  'left', true, null, true, null, true ),
                          new MGridColumn( _M('Bank return id',   $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Is accounted',     $module),  'left', true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ), true )
                        );

        $opts = array('function'=>'update',
                      'entryId'=>'%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );
        $opts = array('function'=>'delete',
                      'entryId'=>'%0%',
                      'event'=>'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridEntry' );
        $this->setRowMethod('GrdEntrySearch',  'myRowMethod');

        $this->setIsScrollable();

        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );

        $this->eventHandler();

    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $businessInvoice = $MIOLO->getBusiness('finance', 'BusInvoice');

        if ( $row[9] == DB_TRUE )
        {
            $actions[0]->enabled = false;
            $actions[1]->enabled = false;
        }
        else
        {
            $actions[0]->enabled = true;
            $actions[1]->enabled = true;
        }
    }
}
?>
