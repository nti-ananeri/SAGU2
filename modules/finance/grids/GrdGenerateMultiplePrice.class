<?php

/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 16/05/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdGenerateMultiplePrice extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:process:generationInLot:generateMultiplePrice';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array(
                          new MGridColumn( _M('Learning period id',  $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Course id',           $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Course name',         $module), 'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Unit',                $module), 'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Start date',          $module), 'left',   true, null, true, null, true ),
                          new MGridColumn( _M('End date',            $module), 'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Value',               $module), 'left',   true, null, true, null, true )
                        );


        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);

        $opts = array('function'        =>'insert',
                      'backTo'          =>'generateMultiplePrice',
                      'learningPeriodId'=>'%0%'
                     );
        $href_add = $MIOLO->getActionURL( $module, 'main:register:price', null, $opts );
        unset($opts);
        
        $opts = array('function'         =>'update',
                      'learningPeriodId' =>'%0%',
                      'backTo'          =>'generateMultiplePrice',
                      'startDate'        => '%4%',
                      'endDate'          => '%5%'
                     );
        $href_edit = $MIOLO->getActionURL( $module, 'main:register:price', null, $opts );

        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, null, 0, 'gridGenerateMultiplePrice' );
        $this->setRowMethod('GrdGenerateMultiplePrice', 'myRowMethod');

        $this->addActionSelect();

        $this->setIsScrollable(true, '99%', '300px' );
        
        $this->addActionIcon( _M('Add', $module), 'add', $href_add );

        $this->addActionUpdate( $href_edit );

        $this->eventHandler();

    }


    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();

        if ( !isset($row[4]) && !isset($row[5]) && !isset($row[6]) )
        {
            $actions[0]->enabled = true;
            $actions[0]->grid->selecteds[] = $i;
        }
        else
        {
            $actions[0]->enabled = false;
        }
        
        if ( isset($row[4]) || isset($row[5]) || isset($row[6]) )
        {
            $actions[1]->enabled = true;
        }
        else
        {
            $actions[1]->enabled = false;
        }
    }

}

?>
