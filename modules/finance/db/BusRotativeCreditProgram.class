<?php
/**
 *
 * This file handles the connection and actions for Rotative Credit program listings obtained on finance related tables
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the BankAccount table
 **/
class BusinessFinanceBusRotativeCreditProgram extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     *
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List the invoices by a specific period and specific payment register
     *
     * @param: $data (object): Object containing the filters
     *
     * @returns (array): Return an array with the needed information
     *
     **/
    public function listFutureParcels()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $sql = ' SELECT A.personId,
                        (SELECT name
                      FROM ONLY basPerson
                          WHERE A.personId=basPerson.personId ),
                        A.invoiceId,
                        ROUND(A.value, '.REAL_ROUND_VALUE.')
                        TO_CHAR(A.maturityDate, \''.MASK_DATE.'\')
              FROM ONLY finReceivableInvoice A
              ';
   
        $args = array( $data->beginPaymentDate,
                       $data->endPaymentDate);
                
        $db = $this->getDatabase();
        $return = $db->query( SAGU::prepare($sql, $args) );
        return $return;
    }
    
}
?>
