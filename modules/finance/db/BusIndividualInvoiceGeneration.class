<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/05/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 **/
class BusinessFinanceBusIndividualInvoiceGeneration extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Get the parcels date
     *
     **/
    public function getParcelsDates($maturityDate, $parcelsNumber)
    {

        $sql = 'SELECT *
                FROM getParcelsDates(?,?,?)';
                       
        $db     = $this->getDatabase();
        
        $args = array (
                        $maturityDate,
                        $parcelsNumber,
                        MASK_DATE
                       );

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function beginTransaction()
    {

        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {

        $db = $this->getDatabase();
        $db->execute('COMMIT');

    }
    
    public function rollback()
    {

        $db = $this->getDatabase();
        $db->execute('ROLLBACK');

    }
    


}

?>
