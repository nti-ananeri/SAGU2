<?php
/**
 *
 * This file handles the connection and actions for finReceivableInvoice table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusInvoice.class', 'finance');

/**
 *
 * Class to manipulate the finReceivableInvoice table
 *
 */
class BusinessFinanceBusReceivableInvoice extends BusinessFinanceBusInvoice
{
   /**
    * This attribute is an object used by the receivableInvoiceGeneration method,
    * which breaks out as follows:
    *
    * generationData
    * |
    * +- totalIncomeForecasts: shows the number of income forecasts that need to be
    * |                         processed.
    * +- receivableInvoice: an array where the key is the invoice number. Each item
    *    |                  of it contains two attributes named invoice and entries,
    *    |                  explained below.
    *    +- invoice: contains a FinReceivableInvoice object with all the information
    *    |           about the generated invoice.
    *    +- entries: contains all entries which composes the invoice.
    */
    public $generationData;


   /**
    * Return a the nominal value for the invoice
    *
    * @param $invoiceId (integer): Primary key of the record to be retrieved
    *
    * @return (float): Nominal value
    *
    */
    public function getNominalValue($invoiceId)
    {

        $sql = '    SELECT ROUND(value, \''.REAL_ROUND_VALUE.'\') 
                 FROM ONLY finReceivableInvoice
                     WHERE invoiceId = ?';

        $args = array($invoiceId);
        
        $return = $this->db->query(SAGU::prepare($sql, $args));                     

        return $return[0][0];
    }

   /**
    * Return a specific record from the database
    *
    * @param $data (object): data of the record to be retrieved
    *
    * @return (object): Return an object of the type handled by the class
    *
    */
    public function getReceivableInvoiceCheckMaturityDate($data)
    {
         $sql = ' SELECT A.invoiceId,
                         balance(A.invoiceId),
                         TO_DATE( ?, \''. MASK_DATE . '\') >= TO_DATE( ?, \''. MASK_DATE . '\') ,
                         B.discount,
                         B.bankTaxValue
                    FROM finReceivableInvoice A,
                         finPolicy B
                   WHERE A.policyId = B.policyId
                     AND (A.invoiceId = ?
                         OR A.bankInvoiceId = ? )';

        $args[] = $data->maturityDate;
        $args[] = $data->entryDate;
        $args[] = $data->invoiceId;
        $args[] = $data->bankInvoiceId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        list ( $receivableInvoice->invoiceId,
               $receivableInvoice->balanceValue,
               $receivableInvoice->checked,
               $receivableInvoice->discount,
               $receivableInvoice->bankTaxValue ) = $result[0];

        if(is_array($result));
        {
            return $receivableInvoice;
        }
        return false;
    }

   /**
    * Return a specific record from the database
    *
    * @param $data (object): object of the record to be retrieved
    *
    * @return (object): Return an object of the type handled by the class weekDate and policyId.
    *
    */
    public function getReceivableInvoiceReturnRemittance($data)
    {

        $sql = 'SELECT TO_CHAR(A.maturityDate,\'' . MASK_DATE_WEEK . '\') AS weekDate
                  FROM finReceivableInvoice A
                 WHERE A.invoiceId = ?
                    OR A.bankinvoiceid = ? ';

        $result = $this->db->query(SAGU::prepare($sql, array($data->invoiceId, $data->bankInvoiceId)));

        list ( $data->weekDate ) = $result[0];

        return $data;
    }


   /**
    * Return a specific record from the database
    *
    * @param $invoiceId (integer): Primary key of the record to be retrieved
    *
    * @return (object): Return an object of the type handled by the class
    *
    */
    public function getReceivableInvoice($invoiceId)
    {
        $receivableInvoice = $this->getInvoice($invoiceId);

        $sql = 'SELECT TO_CHAR(A.sendDate,\'' . MASK_DATE . '\') AS sendDate,
                       TO_CHAR(A.returnDate,\'' . MASK_DATE . '\') AS returnDate,
                       A.returnFileId,
                       A.contractId
                  FROM finReceivableInvoice A
                 WHERE A.invoiceId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $invoiceId));

        list ( $receivableInvoice->sendDate,
               $receivableInvoice->returnDate,
               $receivableInvoice->returnFileId,
               $receivableInvoice->contractId ) = $result[0];

        return $receivableInvoice; 
    }

   /**
    * Do a search on the database table handled by the class
    *
    * @param $filters (object): Search filters
    *
    * @return (array): An array containing the search results
    */
    public function searchReceivableInvoice($data)
    {
        $sql = 'SELECT A.invoiceId,
                       A.personId,
                       A.accountSchemeId,
                       A.costCenterId,
                       A.courseId,
                       A.courseVersion,
                       A.unitId,
                       A.parcelNumber,
                       TO_CHAR(A.emissionDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.maturityDate,\'' . MASK_DATE . '\'),
                       ROUND(A.value, \'' .  REAL_ROUND_VALUE . '\'), 
                       A.policyId,
                       A.bankInvoiceId,
                       A.automaticDebit,
                       A.comments,
                       A.incomeSourceId,
                       A.bankAccountId,
                       A.bankContractId,
                       A.sagu1InvoiceId,
                       TO_CHAR(A.sendDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.returnDate,\'' . MASK_DATE . '\'),
                       A.returnFileId,
                       COALESCE(getSectorDescription(sectorId), \'\'), 
                       remittanceField
                  FROM finReceivableInvoice A';

        $where = '';
        unset($args);
        if ( strlen((string)$data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen((string)$data->personId) > 0 )
        {
            $where .= '    AND   A.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen((string)$data->accountSchemeId) > 0 )
        {
            $where .= '    AND   A.accountSchemeId ILIKE ?';
            $args[] = $data->accountSchemeId;
        }
        if ( strlen((string)$data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId ILIKE ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId ILIKE ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND   A.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen((string)$data->parcelNumber) > 0 )
        {
            $where .= '    AND   A.parcelNumber = ?';
            $args[] = $data->parcelNumber;
        }
        if ( strlen((string)$data->emissionDate) > 0 )
        {
            $where .= '    AND   A.emissionDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->emissionDate;
        }
        if ( strlen((string)$data->maturityDate) > 0 )
        {
            $where .= '    AND   A.maturityDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->maturityDate;
        }
        if ( strlen((string)$data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen((string)$data->policyId) > 0 )
        {
            $where .= '    AND   A.policyId = ?';
            $args[] = $data->policyId;
        }
        if ( strlen((string)$data->bankInvoiceId) > 0 )
        {
            $where .= '    AND   A.bankInvoiceId ILIKE ?';
            $args[] = $data->bankInvoiceId;
        }
        if ( strlen((string)$data->automaticDebit) > 0 )
        {
            $where .= '    AND   A.automaticDebit = ?';
            $args[] = $data->automaticDebit;
        }
        if ( strlen((string)$data->comments) > 0 )
        {
            $where .= '    AND   A.comments ILIKE ?';
            $args[] = $data->comments;
        }
        if ( strlen((string)$data->incomeSourceId) > 0 )
        {
            $where .= '    AND   A.incomeSourceId = ?';
            $args[] = $data->incomeSourceId;
        }
        if ( strlen((string)$data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen((string)$data->sagu1InvoiceId) > 0 )
        {
            $where .= '    AND   A.sagu1InvoiceId ILIKE ?';
            $args[] = $data->sagu1InvoiceId;
        }
        if ( strlen((string)$data->sendDate) > 0 )
        {
            $where .= '    AND   A.sendDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->sendDate;
        }
        if ( strlen((string)$data->returnDate) > 0 )
        {
            $where .= '    AND   A.returnDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->returnDate;
        }
        if ( strlen((string)$data->returnFileId) > 0 )
        {
            $where .= '    AND   A.returnFileId = ?';
            $args[] = $data->returnFileId;
        }
        if ( strlen((string)$data->sectorId) > 0 )
        {
            $where .= '    AND   A.sectorId = ? ';
            $args[] = $data->sectorId;
        }
        if ( strlen((string)$data->messageInvoice) > 0 )
        {
            $where .= '    AND   TO_ASCII(A.messageInvoice) ILIKE TO_ASCII(?) ';
            $args[] = $data->messageInvoice;
        }
        if( strlen((string)$data->contractId) > 0 )
        {
            $where .= '    AND   A.contractId = ?::integer ';
            $args[] = $data->contractId;
        }
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                    ' ORDER BY A.maturityDate';

            $result = $this->db->query(SAGU::prepare($sql,$args));
        }

        return $result;

    }

   /**
    * Insert a new record
    *
    * @param $data (object): An object of the type handled by the class
    *
    * @return The new generated invoice id if succed, otherwise FALSE
    *
    */
    public function insertReceivableInvoice($data)
    {
        $invoiceId = $this->insertInvoice($data);

        if ( $invoiceId !== false )
        {
            unset($field, $prepareValue, $dataValue);

            $field[] = 'invoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $invoiceId;
            $field[] = 'personId';
            $prepareValue[] = '?';
            $dataValue[] = $data->personId;
            $field[] = 'accountSchemeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->accountSchemeId;
            $field[] = 'costCenterId';
            $prepareValue[] = '?';
            $dataValue[] = $data->costCenterId;
            $field[] = 'courseId';
            $prepareValue[] = '?';
            $dataValue[] = $data->courseId;
            $field[] = 'courseVersion';
            $prepareValue[] = '?';
            $dataValue[] = $data->courseVersion;
            $field[] = 'unitId';
            $prepareValue[] = '?';
            $dataValue[] = $data->unitId;
            $field[] = 'parcelNumber';
            $prepareValue[] = '?';
            $dataValue[] = $data->parcelNumber;
            $field[] = 'emissionDate';
            if ( is_null($data->emissionDate) )
            {
                $prepareValue[] = 'now()';
            }
            else
            {
                $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
                $dataValue[] = $data->emissionDate;
            }
            $field[] = 'maturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
            $dataValue[] = $data->maturityDate;
            $field[] = 'value';
            $prepareValue[] = '?';
            $dataValue[] = $data->value;
            $field[] = 'policyId';
            $prepareValue[] = '?';
            $dataValue[] = $data->policyId;
            $field[] = 'bankInvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankInvoiceId;
            $field[] = 'automaticDebit';
            $prepareValue[] = '?';
            $dataValue[] = $data->automaticDebit;
            $field[] = 'comments';
            $prepareValue[] = '?';
            $dataValue[] = $data->comments;
            $field[] = 'incomeSourceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->incomeSourceId;
            $field[] = 'bankAccountId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankAccountId;
			$field[] = 'bankContractId';
			$prepareValue[] = '?';
			$dataValue[] = $data->bankContractId;
            $field[] = 'sagu1InvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->sagu1InvoiceId;
            $field[] = 'periodId';
            $prepareValue[] = '?';
            $dataValue[] = $data->periodId;
            $field[] = 'sendDate';
            $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
            $dataValue[] = $data->sendDate;
            $field[] = 'returnDate';
            $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
            $dataValue[] = $data->returnDate;
            $field[] = 'returnFileId';
            $prepareValue[] = '?';
            $dataValue[] = $data->returnFileId;
			$field[] = 'messageInvoice';
            $prepareValue[] = '?';
            $dataValue[] = $data->messageInvoice;
            $field[] = 'contractId';
            $prepareValue[] = '?';
            $dataValue[] = $data->contractId;

            // In some cases, we don't need sectorId, so, verify... ;)
            if ( strlen((string)$data->sectorId)>0 )
            {
                $field[] = 'sectorId';
                $prepareValue[] = '?';
                $dataValue[] = $data->sectorId;
            }

            if ( strlen((string)$data->remittanceField)>0 )
            {
                $field[]        = 'remittanceField';
                $prepareValue[] = '?';
                $dataValue[]    = $data->remittanceField;
            }

            $sql = 'INSERT INTO finReceivableInvoice
                                (';
            for ( $i=0; $i<count($field); $i++ )
            {
                $sql .= $field[$i] . ',';
            }
            $sql = substr($sql, 0, strlen((string)$sql)-1) . ')
                         VALUES (';
            for ( $i=0; $i<count($prepareValue); $i++ )
            {
                $sql .= $prepareValue[$i] . ',';
            }
            $sql = substr($sql, 0, strlen((string)$sql)-1) . ')';
            $sql = SAGU::prepare($sql, $dataValue);
            if ( ! $this->db->execute($sql) )
            {
                $invoiceId = false;
            }
        }
        return $invoiceId;
    }

   /**
    * Update data from a specific record
    *
    * @param $data (object): Data which will replace the old record data
    *
    * @return (boolean): True if succeed, otherwise False
    *
    */
    public function updateReceivableInvoice($data)
    {
        $this->updateInvoice($data);

        $sql = 'UPDATE finReceivableInvoice
                   SET personId        = ?,
                       accountSchemeId = ?,
                       costCenterId    = ?,
                       courseId        = ?,
                       courseVersion   = ?,
                       unitId          = ?,
                       parcelNumber    = ?,
                       emissionDate    = TO_DATE(?,\'' . MASK_DATE . '\'),
                       maturityDate    = TO_DATE(?,\'' . MASK_DATE . '\'),
                       value           = ?,
                       policyId        = ?,
                       bankInvoiceId   = ?,
                       automaticDebit  = ?,
                       comments        = ?,
                       incomeSourceId  = ?,
                       bankAccountId   = ?,
					   bankContractId  = ?,
                       sagu1InvoiceId  = ?, ';

        if ( strlen((string)$data->periodId) > 0 )
        {
            $sql.= ' periodId = ?, ';
        }
        if ( strlen((string)$data->sectorId)>0 )
        {
            $sql.= ' sectorId = ?, ';
        }

        if ( strlen((string)$data->remittanceField)>0 )
        {
            $sql.= ' remittanceField = ?, ';
        }

        $sql.='        sendDate        = TO_DATE(?,\'' . MASK_DATE . '\'),
                       returnDate      = TO_DATE(?,\'' . MASK_DATE . '\'),
                       returnFileId    = ? ,
					   messageInvoice  = ? , 
                       contractId      = ?';
        unset($args);
        $args[] = $data->personId;
        $args[] = $data->accountSchemeId;
        $args[] = $data->costCenterId;
        $args[] = $data->courseId;
        $args[] = $data->courseVersion;
        $args[] = $data->unitId;
        $args[] = $data->parcelNumber;
        $args[] = $data->emissionDate;
        $args[] = $data->maturityDate;
        $args[] = $data->value;
        $args[] = $data->policyId;
        $args[] = $data->bankInvoiceId;
        $args[] = $data->automaticDebit;
        $args[] = $data->comments;
        $args[] = $data->incomeSourceId;
        $args[] = $data->bankAccountId;
		$args[] = $data->bankContractId;
        $args[] = $data->sagu;
        
        if ( strlen((string)$data->periodId) > 0 )
        {
            $args[] = $data->periodId;
        }

        if ( strlen((string)$data->sectorId)>0 )
        {
            $args[] = $data->sectorId;
        }

        if ( strlen((string)$data->remittanceField)>0 )
        {
            $args[] = $data->remittanceField;
        }

        $args[] = $data->sendDate;
        $args[] = $data->returnDate;
        $args[] = $data->returnFileId;
		$args[] = $data->messageInvoice;
        $args[] = $data->contractId;
        $args[] = $data->invoiceId;

        $sql.='
                 WHERE invoiceId = ?';

        $sqls = SAGU::prepare($sql, $args); 
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $retVal = $this->db->execute($sqls[$i]);
        }

        return $retVal;
    }

   /**
    * get cost center for a receivable invoice
    *
    * @param $invoiceId (string): Primary key to search
    *
    * @return (varchar): Cost center id, otherwise null
    *
    */
    public function getReceivableInvoiceCostCenter($invoiceId)
    {
        $sql = 'SELECT costCenterId
                  FROM finReceivableInvoice
                 WHERE invoiceId = ?';
        
        $data = $this->db->query(SAGU::prepare($sql, $invoiceId));
        return $data[0][0];
    }


   /**
    * Delete a record
    *
    * @param $invoiceId (string): Primary key for deletion
    *
    * @return (boolean): True if succeed, otherwise False
    *
    */
    public function deleteReceivableInvoice($invoiceId)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $MIOLO->getClass('accountancy', 'accountancy');

        $sql = 'SELECT TO_CHAR(max(entryDate), \'' . MASK_DATE . '\')
                  FROM finEntry
                 WHERE invoiceid = ?';
                                     
        $result = $this->db->query(SAGU::prepare($sql, $invoiceId));
        
        if ( strlen((string)$result[0][0]) > 0 )
        {
            $ok = ACCOUNTANCY::getAccountLimitDate($result[0][0]);

            if ( $ok == DB_FALSE)
            {
                $msg  = _M('Operation not allowed. Date of limit exceeded for this operation !',$module);

                $opts = array(
                              'function'  =>'search',
                              'invoiceIdS'=>$invoiceId
                             );
                $goto = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }


        $this->db->execute('BEGIN TRANSACTION');
        $return = $this->db->query(SAGU::prepare('SELECT bankInvoiceId FROM ONLY finInvoice WHERE invoiceId = ?',array($invoiceId)));
        if( strlen((string) $return[0][0] ) > 0 )
        {
            $sql = 'SELECT invoiceId, value, costCenterId, operationId FROM finEntry
                      WHERE invoiceId = ?';
            $sql = SAGU::prepare($sql,$invoiceId);
            $return = $this->db->query($sql);
            $this->db->execute(SAGU::prepare('UPDATE finInvoice SET status = ? WHERE invoiceId = ? ',array('C',$invoiceId)));
            foreach($return as $entry)
            {
                $entry[0];
                $sql = 'INSERT INTO finEntry 
                                    (invoiceId, value, costCenterId, entryDate, operationId) 
                             VALUES (?, ((?)::numeric(14,4)*-1)::numeric(14,4), ?, now()::date, ?)';
                $sql = SAGU::prepare($sql, array($entry[0], $entry[1], $entry[2],$entry[3]));
                $keepGoing = $this->db->execute($sql);
            }
            if($keepGoing == 'true')
            {
                return $this->db->execute('COMMIT');

            }
            else
            {
                return $this->db->execute('ROLLBACK');
            }
            
        }
        else
        {
            $sql = 'DELETE FROM finEntry
                      WHERE isAccounted = FALSE AND 
                            invoiceId = ?';
        
            $retVal1 = $this->db->execute(SAGU::prepare($sql, $invoiceId));
        
            $sql = 'SELECT * FROM finEntry
                      WHERE invoiceId = ?';
                      
            $result = $this->db->query(SAGU::prepare($sql, $invoiceId));
        
            if ( is_array($result[0]) )
            {

                $this->db->execute('ROLLBACK');
                $opts   = array('function'  => 'search',
                            'invoiceIdS' => $invoiceId
                           );        
                $msg = _M('There are entries already accounteds for this invoice', $module);
                $goto = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }    

            $this->deleteInvoice($invoiceId);

            $sql = 'DELETE FROM finReceivableInvoice
                      WHERE invoiceId = ?';
            $retVal2 = $this->db->execute(SAGU::prepare($sql, $invoiceId));
        
            if ( $retVal1 && $retVal2 )
            {
                $this->db->execute('COMMIT');
                $retVal = true;
            }
            else
            {
                $this->db->execute('ROLLBACK');
                $retVal = false;
            }

            return $retVal;
        }
    }
                
   /**
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $data (object): Object containing data to close invoice
    *
    * @return: True if succeed otherwise false
    *
    */
    public function closeInvoice($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance'; // Esta finance por extenso devido a 
                             // chamadas do módulo processo seletivo
        
        $keepGoing = true;
        // Begin Transaction
        $this->db->execute('BEGIN TRANSACTION');
        
        // Pegas os valores do título
        $sql = ' SELECT costCenterId,
                        balance(invoiceId),
                        balanceWithPolicies(invoiceId),
                        abs(balance(invoiceId)-balanceWithPolicies(invoiceId)),
                        CASE WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) > 0
                             THEN \'D\'
                             WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) < 0
                             THEN \'I\'
                             WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) = 0
                             THEN \'E\'
                        END
                   FROM finReceivableInvoice
                  WHERE invoiceId = ? ';

        $args = array($data->invoiceId);
        $return = $this->db->query(SAGU::prepare($sql, $args));

        $dataInvoice->costCenterId        = $return[0][0];
        $dataInvoice->invoiceId           = $data->invoiceId;
        $dataInvoice->balance             = $return[0][1]; //saldo do título
        $dataInvoice->balanceWithPolicies = $return[0][2]; //saldo com juros/multas/descontos
        $dataInvoice->difference          = $return[0][3]; //apenas juros/multas/descontos
        $dataInvoice->situation           = $return[0][4];

        // Pega as operaçõs padrão
        $businessDefaultOperations = $MIOLO->getBusiness($module, 'BusDefaultOperations');
        $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();

        switch ($data->closeType)
        {
            // Pagamento integral
            case 'I':
            {

                //Insere o lançamento com os juros ou descontos
                if ($dataInvoice->situation != 'E')
                {
                    if ($dataInvoice->situation == 'D')
                    {
                        $situation = $dataDefaultOperations->discountOperation;
                    }
                    elseif ($dataInvoice->situation == 'I')
                    {
                        $situation = $dataDefaultOperations->interestOperation;
                    }
                    $dataEntry->invoiceId      = $data->invoiceId;
                    $dataEntry->operationId    = $situation;
                    $dataEntry->value          = $dataInvoice->difference;
                    $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                    $dataEntry->comments       = $data->comments;
                    $dataEntry->bankReturnCode = NULL;
                    $dataEntry->isAccounted    = 'F';
                    $dataEntry->creationType   = 'M';
                    $sql = ' INSERT INTO finEntry
                                       ( invoiceId,
                                         operationId,
                                         entryDate,
                                         value,
                                         costCenterId,
                                         comments,
                                         bankReturnCode,
                                         isAccounted,
                                         creationType
                                       )
                                VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
               
                    $args = array( $dataEntry->invoiceId,
                                   $dataEntry->operationId,
                                   $dataEntry->value,
                                   $dataEntry->costCenterId,
                                   $dataEntry->comments,
                                   $dataEntry->bankReturnCode,
                                   $dataEntry->isAccounted,
                                   $dataEntry->creationType
                                 );

                    if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                    {
                        $keepGoing = false;
                    }
                }
                
                //insere o lançamento de pagamento
                $dataEntry->invoiceId      = $data->invoiceId;
                $dataEntry->operationId    = $data->operationId;
                $dataEntry->value          = $dataInvoice->balanceWithPolicies;
                $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                $dataEntry->comments       = $data->comments;
                $dataEntry->bankReturnCode = NULL;
                $dataEntry->isAccounted    = 'F';
                $dataEntry->creationType   = 'M';

                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataEntry->invoiceId,
                               $dataEntry->operationId,
                               $dataEntry->value,
                               $dataEntry->costCenterId,
                               $dataEntry->comments,
                               $dataEntry->bankReturnCode,
                               $dataEntry->isAccounted,
                               $dataEntry->creationType
                             );

                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }
                break;
            }
            
            // Pagamento parcial
            case 'P':
            {

                // Insere o lançamento de pagamento parcial
                $dataEntry->invoiceId      = $data->invoiceId;
                $dataEntry->operationId    = $data->operationId;
                $dataEntry->operationId2   = $data->operationId2;
                $dataEntry->value          = $data->value; //valor informado no formulário
                $dataEntry->value2         = $data->value2; //valor informado no formulário (2 lanamentos)
                $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                $dataEntry->comments       = $data->comments;
                $dataEntry->comments2      = $data->comments2;
                $dataEntry->bankReturnCode = NULL;
                $dataEntry->isAccounted    = 'F';
                $dataEntry->creationType   = 'M';

                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataEntry->invoiceId,
                               $dataEntry->operationId,
                               $dataEntry->value,
                               $dataEntry->costCenterId,
                               $dataEntry->comments,
                               $dataEntry->bankReturnCode,
                               $dataEntry->isAccounted,
                               $dataEntry->creationType
                             );
                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }

                //insere o segundo lançamento em caso de 2 lançamentos
                if ( $data->numberOfEntries == 2 )
                {
                    $args = array( $dataEntry->invoiceId,
                                   $dataEntry->operationId2,
                                   $dataEntry->value2,
                                   $dataEntry->costCenterId,
                                   $dataEntry->comments2,
                                   $dataEntry->bankReturnCode,
                                   $dataEntry->isAccounted,
                                   $dataEntry->creationType
                                 );

                    if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                    {
                        $keepGoing = false;
                    }
                }

                // Pega os valores atualizados
                $sql = ' SELECT costCenterId,
                                balance(invoiceId),
                                balanceWithPolicies(invoiceId),
                                abs(balance(invoiceId)-balanceWithPolicies(invoiceId)),
                                CASE WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) > 0
                                     THEN \'D\'
                                     WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) < 0
                                     THEN \'I\'
                                     WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) = 0
                                     THEN \'E\'
                                END
                           FROM finReceivableInvoice
                          WHERE invoiceId = ? ';

                $args = array($data->invoiceId);
                $return = $this->db->query(SAGU::prepare($sql, $args));

                $dataInvoice->balance_             = $dataInvoice->balance;
                $dataInvoice->balanceWithPolicies_ = $dataInvoice->balanceWithPolicies;

                $dataInvoice->costCenterId        = $return[0][0];
                $dataInvoice->invoiceId           = $data->invoiceId;
                $dataInvoice->balance             = $return[0][1];


                if ( $data->numberOfEntries == 2 )
                {
                    $dataInvoice->balanceWithPolicies_ = (str_replace(',', '.', round($dataInvoice->balanceWithPolicies_,2)));
                    $dataEntry->value                  = (str_replace(',', '.', round($dataEntry->value,2)));
                    $dataEntry->value2                 = (str_replace(',', '.', round($dataEntry->value2,2)));

//vd($dataInvoice->balanceWithPolicies_, $dataEntry->value, $dataEntry->value2);

                    //se o valor pago é menor
                    if ( (float)SAGU::calcNumber($dataInvoice->balanceWithPolicies_ . ' - ' . $dataEntry->value . ' - ' . $dataEntry->value2) > 0 )
                    {
//echo 1;
                        $dataInvoice->difference          = SAGU::calcNumber($dataInvoice->difference . ' + ' . $dataInvoice->balance, 4);
                    }
                    //valor pago é igaul
                    elseif ( (float)SAGU::calcNumber($dataInvoice->balanceWithPolicies_ . ' - ' . $dataEntry->value . ' - ' . $dataEntry->value2) == 0 )
                    {
//echo 2;
                        $dataInvoice->difference          = SAGU::calcNumber( $dataInvoice->balance . ' * ' . (-1), 4);

                    }
                    //valor pago é maior
                    else
                    {
//echo 3;
                        //pega o valor do título com os juros e subtrai o valor pago
                        $dataInvoice->difference          = SAGU::calcNumber( $dataInvoice->balance . ' * ' . (-1), 4);
                    }
                }
                else
                {
                    //se o valor pago, for menor ou igual ao valor nominal em aberto (sem juros)
                    if ( (float)SAGU::calcNumber($dataInvoice->balance . ' - ' . $dataEntry->value) >= 0 )
                    {
                        //calcula a diferença dos juros iniciais menos os atuais para deduzir apenas os juros do valor pago
                        $dataInvoice->difference          = SAGU::calcNumber($dataInvoice->difference . ' - ' . $return[0][3], 4);
                    }
                    else
                    {
                        //pega o valor do título com os juros e subtrai o valor pago
                        $dataInvoice->difference          = SAGU::calcNumber($dataInvoice->balanceWithPolicies . ' - ' . $dataEntry->value, 4);
                    }
                }
                //$dataInvoice->balanceWithPolicies = $return[0][2];
                //$dataInvoice->difference          = $return[0][3];
                //$dataInvoice->situation           = $return[0][4];

                // Insere os juros/multas/descontos do valor pago
                if ($dataInvoice->situation != 'E')
                {
                    // Insert the entry data
                    if ($dataInvoice->situation == 'D')
                    {
                        $situation = $dataDefaultOperations->discountOperation;
                    }
                    elseif ($dataInvoice->situation == 'I')
                    {
                        $situation = $dataDefaultOperations->interestOperation;
                    }
                    else
                    {
                        return false;
                    }
                    $dataEntry->invoiceId      = $data->invoiceId;
                    $dataEntry->operationId    = $situation;
                    $dataEntry->value          = $dataInvoice->difference;
                    $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                    $dataEntry->comments       = $data->comments;
                    $dataEntry->bankReturnCode = NULL;
                    $dataEntry->isAccounted    = 'F';
                    $dataEntry->creationType   = 'M';
                    $sql = ' INSERT INTO finEntry
                                       ( invoiceId,
                                         operationId,
                                         entryDate,
                                         value,
                                         costCenterId,
                                         comments,
                                         bankReturnCode,
                                         isAccounted,
                                         creationType
                                       )
                                VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
               
                    $args = array( $dataEntry->invoiceId,
                                   $dataEntry->operationId,
                                   $dataEntry->value,
                                   $dataEntry->costCenterId,
                                   $dataEntry->comments,
                                   $dataEntry->bankReturnCode,
                                   $dataEntry->isAccounted,
                                   $dataEntry->creationType
                                 );


                    if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                    {
                        $keepGoing = false;
                    }
                }
                break;
            }
            default:
            {
                $keepGoing = false;
                break;
            }
        }
        if ($keepGoing == true)
        {
            $data2        = clone $data;
            $data2->value = strlen((string)$data2->value)>0 ? $data2->value : $dataEntry->value;

            unset($data->value);
            $a = $this->searchEntry($data);
            unset($data);
            $data2->entryId = $a[0][0];
            unset($a);

            if($this->insertCounterMovement($data2) !== true)
            {
                $keepGoing = false;
                break;
            }
        }
        // If everything gone right, we may COMMIT the database changes, otherwise, ROLLBACK them
        if ($keepGoing == true)
        {
            $this->db->execute('COMMIT');
        }
        else
        {
            $this->db->execute('ROLLBACK');
        }
        return $keepGoing;
    }
     
   /**
    * @author: William Prigol Lopes [william@solis.coop.br]
    *          Eduardo Beal Miglioransa [eduardo@solis.coop.br]
    *
    * @param: $data (object): Object containing data to close invoice
    *
    * @return: True if succeed otherwise false
    *
    */
    public function closeInvoiceWithDate($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance'; // Esta finance por extenso devido a 
                             // chamadas do módulo processo seletivo
        
        $keepGoing = true;
        // Begin Transaction
        $this->db->execute('BEGIN TRANSACTION');
        // Select values related to this invoice and data to work
        $sql = ' SELECT costCenterId,
                        balance(invoiceId),
                        balanceWithPoliciesDated(invoiceId, TO_DATE (?, \'' . MASK_DATE .'\' )),
                        abs(balance(invoiceId)-balanceWithPoliciesDated(invoiceId, TO_DATE(?, \''. MASK_DATE .'\' ))),
                        CASE WHEN (balance(invoiceId)-balanceWithPoliciesDated(invoiceId, TO_DATE (?, \'' . MASK_DATE .'\' ))) > 0
                             THEN \'D\'
                             WHEN (balance(invoiceId)-balanceWithPoliciesDated(invoiceId, TO_DATE (?, \'' . MASK_DATE .'\' ))) < 0
                             THEN \'I\'
                             WHEN (balance(invoiceId)-balanceWithPoliciesDated(invoiceId, TO_DATE (?, \'' . MASK_DATE .'\'  ))) = 0
                             THEN \'E\'
                        END
                   FROM finReceivableInvoice
                  WHERE invoiceId = ? ';

        $args = array($data->datePardon,
                      $data->datePardon,
                      $data->datePardon,
                      $data->datePardon,
                      $data->datePardon,
                      $data->invoiceId);
        $return = $this->db->query(SAGU::prepare($sql, $args));

        $dataInvoice->costCenterId        = $return[0][0];
        $dataInvoice->invoiceId           = $data->invoiceId;
        $dataInvoice->balance             = $return[0][1];
        $dataInvoice->balanceWithPolicies = $return[0][2];
        $dataInvoice->difference          = $return[0][3];
        $dataInvoice->situation           = $return[0][4];
  
        // Get all default operations
        $businessDefaultOperations = $MIOLO->getBusiness($module, 'BusDefaultOperations');
        $dataDefaultOperations     = $businessDefaultOperations->getDefaultOperations();

        switch ($data->closeType)
        {
            case 'I':
            {
                if ($dataInvoice->situation != 'E')
                {
                    if ($dataInvoice->situation == 'D')
                    {
                        $situation = $dataDefaultOperations->discountOperation;
                    }
                    elseif ($dataInvoice->situation == 'I')
                    {
                        $situation = $dataDefaultOperations->interestOperation;
                    }
                    $dataEntry->invoiceId      = $data->invoiceId;
                    $dataEntry->operationId    = $situation;
                    $dataEntry->value          = $dataInvoice->difference;
                    $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                    $dataEntry->comments       = $data->comments;
                    $dataEntry->bankReturnCode = NULL;
                    $dataEntry->isAccounted    = 'F';
                    $dataEntry->creationType   = 'M';
                    $sql = ' INSERT INTO finEntry
                                       ( invoiceId,
                                         operationId,
                                         entryDate,
                                         value,
                                         costCenterId,
                                         comments,
                                         bankReturnCode,
                                         isAccounted,
                                         creationType
                                       )
                                VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
               
                    $args = array( $dataEntry->invoiceId,
                                   $dataEntry->operationId,
                                   $dataEntry->value,
                                   $dataEntry->costCenterId,
                                   $dataEntry->comments,
                                   $dataEntry->bankReturnCode,
                                   $dataEntry->isAccounted,
                                   $dataEntry->creationType
                                 );
                    if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                    {
                        $keepGoing = false;
                    }
                }
                //
                // Insert the entry to close invoice
                //
                $dataEntry->invoiceId      = $data->invoiceId;
                $dataEntry->operationId    = $data->operationId;
                $dataEntry->value          = $dataInvoice->balanceWithPolicies;
                $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                $dataEntry->comments       = $data->comments;
                $dataEntry->bankReturnCode = NULL;
                $dataEntry->isAccounted    = 'F';
                $dataEntry->creationType   = 'M';
                // Insert a entry closing the invoice
                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataEntry->invoiceId,
                               $dataEntry->operationId,
                               $dataEntry->value,
                               $dataEntry->costCenterId,
                               $dataEntry->comments,
                               $dataEntry->bankReturnCode,
                               $dataEntry->isAccounted,
                               $dataEntry->creationType
                             );

                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }
                break;
            }
            case 'P':
            {

                //
                // Insert the entry to close partially the invoice
                //
                $dataEntry->invoiceId      = $data->invoiceId;
                $dataEntry->operationId    = $data->operationId;
                $dataEntry->value          = $data->value;
                $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                $dataEntry->comments       = $data->comments;
                $dataEntry->bankReturnCode = NULL;
                $dataEntry->isAccounted    = 'F';
                $dataEntry->creationType   = 'M';

                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataEntry->invoiceId,
                               $dataEntry->operationId,
                               $dataEntry->value,
                               $dataEntry->costCenterId,
                               $dataEntry->comments,
                               $dataEntry->bankReturnCode,
                               $dataEntry->isAccounted,
                               $dataEntry->creationType
                             );

                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }
                
                // 
                // Now... apply the interests on entry with new value.
                //
                
                // Get the updated values
                $sql = ' SELECT costCenterId,
                                balance(invoiceId),
                                balanceWithPolicies(invoiceId),
                                abs(balance(invoiceId)-balanceWithPolicies(invoiceId)),
                                CASE WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) > 0
                                     THEN \'D\'
                                     WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) < 0
                                     THEN \'I\'
                                     WHEN (balance(invoiceId)-balanceWithPolicies(invoiceId)) = 0
                                     THEN \'E\'
                                END
                           FROM finReceivableInvoice
                          WHERE invoiceId = ? ';

                $args = array($data->invoiceId);
                $return = $this->db->query(SAGU::prepare($sql, $args));

                $dataInvoice->costCenterId        = $return[0][0];
                $dataInvoice->invoiceId           = $data->invoiceId;
                $dataInvoice->balance             = $return[0][1];
                $dataInvoice->balanceWithPolicies = $return[0][2];
                $dataInvoice->difference          = $return[0][3];
                $dataInvoice->situation           = $return[0][4];

                // Now insert the interests for this invoice
                if ($dataInvoice->situation != 'E')
                {
                    // Insert the entry data
                    if ($dataInvoice->situation == 'D')
                    {
                        $situation = $dataDefaultOperations->discountOperation;
                    }
                    elseif ($dataInvoice->situation == 'I')
                    {
                        $situation = $dataDefaultOperations->interestOperation;
                    }
                    else
                    {
                        return false;
                    }
                    $dataEntry->invoiceId      = $data->invoiceId;
                    $dataEntry->operationId    = $situation;
                    $dataEntry->value          = $dataInvoice->difference;
                    $dataEntry->costCenterId   = $dataInvoice->costCenterId;
                    $dataEntry->comments       = _M('Discount or interest applied on payment of invoice', $module);
                    $dataEntry->bankReturnCode = NULL;
                    $dataEntry->isAccounted    = 'F';
                    $dataEntry->creationType   = 'M';
                    $sql = ' INSERT INTO finEntry
                                       ( invoiceId,
                                         operationId,
                                         entryDate,
                                         value,
                                         costCenterId,
                                         comments,
                                         bankReturnCode,
                                         isAccounted,
                                         creationType
                                       )
                                VALUES (?, ?, now()::date, ?, ?, ?, ?, ?, ?) ';
               
                    $args = array( $dataEntry->invoiceId,
                                   $dataEntry->operationId,
                                   $dataEntry->value,
                                   $dataEntry->costCenterId,
                                   $dataEntry->comments,
                                   $dataEntry->bankReturnCode,
                                   $dataEntry->isAccounted,
                                   $dataEntry->creationType
                                 );


                    if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                    {
                        $keepGoing = false;
                    }
                }
                break;
            }
            default:
            {
                $keepGoing = false;
                break;
            }
        }

        // If everything gone right, we may COMMIT the database changes, otherwise, ROLLBACK them
        if ($keepGoing == true)
        {
            $this->db->execute('COMMIT');
        }
        else
        {
            $this->db->execute('ROLLBACK');
        }
        return $keepGoing;
    }

   /**
    * Insert a new record
    *
    * @param $data (object): An object of the type handled by the class
    *
    * @return True if succed, otherwise False
    *
    */
    public function insertCounterMovement($data)
    {
        $sql = 'INSERT INTO finCounterMovement
                            (counterId,
                             operatorId,
                             value,
                             operation,
                             speciesId,
                             entryId)
                     VALUES (?,?,?,?,?,?)';

        $args = array( $data->counterId,
                       $data->operatorId,
                       $data->value,
                       $data->operation,
                       $data->speciesId,
                       $data->entryId);

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

   /**
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $data (object): Object containing data to begin a process for titles
    *
    * @return (boolean): True if succeed, otherwise false
    *
    */
    public function processLongTermShortTermInvoice($dataInvoice, $dataProcess)
    {
       $MIOLO  = MIOLO::getInstance();
       $module = 'finance';

       if (is_array($dataInvoice[0]))
       {
            $this->db->execute('BEGIN TRANSACTION');
            $keepGoing = true;

            $businessDefaultOperations = $MIOLO->getBusiness( $module, 'BusDefaultOperations');
            $defaultOperationsData = $businessDefaultOperations->getDefaultOperations();

            // PHP function to unlimit the time (When a lot of titles is processed a lot of time is needed) ;)
            set_time_limit(0);

            // For each invoice execute the process (obviously)
            // $keepGoing verify if some transaction fails
            for ($count = 0; $count<count($dataInvoice) && $keepGoing; $count++)
            {
                $dataEntry = new FinEntry();
                // Get information about invoice
                $dataEntry->invoiceId      = $dataInvoice[$count][0];
                $dataEntry->operationId    = $dataProcess->closeOperationId;
                $dataEntry->entryDate      = date(MASK_DATE_PHP);
                $dataEntry->value          = $dataInvoice[$count][7];
                $dataEntry->costCenterId   = $dataInvoice[$count][8];
                $dataEntry->comments       = 'Created by LongTerm->ShortTerm process in '.date(MASK_DATE_PHP).' to close and get a new title to short term ';
                $dataEntry->bankReturnCode = null;
                $dataEntry->isAccounted    = 'F';
                $dataEntry->creationType   = 'A';
 
                // Insert a entry closing the invoice
                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, to_date(?, \''.MASK_DATE.'\'), ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataEntry->invoiceId,
                               $dataEntry->operationId,
                               $dataEntry->entryDate,
                               $dataEntry->value,
                               $dataEntry->costCenterId,
                               $dataEntry->comments,
                               $dataEntry->bankReturnCode,
                               $dataEntry->isAccounted,
                               $dataEntry->creationType
                             );
                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }
               
                // Insert a invoice information 
                $dataReceivableInvoice->personId        = $dataInvoice[$count][2];
                $dataReceivableInvoice->accountSchemeId = $dataInvoice[$count][9];
                $dataReceivableInvoice->costCenterId    = $dataInvoice[$count][8];
                $dataReceivableInvoice->courseId        = strlen((string)$dataProcess->newCourseId)>0 ? $dataProcess->newCourseId : $dataProcess->oldCourseId;
                $dataReceivableInvoice->courseVersion   = strlen((string)$dataProcess->courseVersion)>0 ? $dataProcess->courseVersion : $dataInvoice[$count][11];
                $dataReceivableInvoice->unitId          = $dataInvoice[$count][12]; 
                $dataReceivableInvoice->parcelNumber    = $dataInvoice[$count][13];
                $dataReceivableInvoice->emissionDate    = $dataInvoice[$count][4];
                $dataReceivableInvoice->maturityDate    = $dataInvoice[$count][5];
                $dataReceivableInvoice->value           = '0';
                $dataReceivableInvoice->policyId        = strlen((string)$dataProcess->newPolicyId)>0 ? $dataProcess->newPolicyId : $dataProcess->oldPolicyId;
                $dataReceivableInvoice->bankInvoiceId   = null;
                $dataReceivableInvoice->automaticDebit  = 'F'; 
                $dataReceivableInvoice->comments        = _M($module, 'CREATED BY LongTerm->ShortTerm process in ') . date(MASK_DATE_PHP) . _M($module, ' substituting the closed invoice ') . $dataInvoice[$count][0] . '.';
                $dataReceivableInvoice->incomeSourceId  = $dataInvoice[$count][15];
                $dataReceivableInvoice->bankAccountId   = strlen((string)$dataProcess->bankAccountId)>0 ? $dataProcess->bankAccountId : $dataInvoice[$count][16];
				$dataReceivableInvoice->bankContractId  = strlen((string)$dataProcess->bankContractId)>0 ? $dataProcess->bankContractId : $dataInvoice[$count][17];
                $dataReceivableInvoice->sagu1InvoiceId  = null;

                $newInvoice = $this->insertReceivableInvoice($dataReceivableInvoice);
                if ($newInvoice === false)
                {   
                    $keepGoing = false;
                }
                
                // Adjust the entry data for entry for invoice
                $dataNewEntry->invoiceId      = $newInvoice;
                $dataNewEntry->operationId    = $dataProcess->openOperationId;
                $dataNewEntry->entryDate      = date(MASK_DATE_PHP);
                $dataNewEntry->value          = $dataInvoice[$count][7];
                $dataNewEntry->costCenterId   = $dataInvoice[$count][8];
                $dataNewEntry->comments       = _M($module, 'CREATED BY longTerm->shortTerm process in ') . date(MASK_DATE_PHP) . _M($module, ' substituting the closed invoice ');
                $dataNewEntry->bankReturnCode = null;
                $dataNewEntry->isAccounted    = 'F';
                $dataNewEntry->creationType   = 'A';

                // Insert a entry closing the invoice
                $sql = ' INSERT INTO finEntry
                                   ( invoiceId,
                                     operationId,
                                     entryDate,
                                     value,
                                     costCenterId,
                                     comments,
                                     bankReturnCode,
                                     isAccounted,
                                     creationType
                                   )
                            VALUES (?, ?, to_date(?, \''.MASK_DATE.'\'), ?, ?, ?, ?, ?, ?) ';
           
                $args = array( $dataNewEntry->invoiceId,
                               $dataNewEntry->operationId,
                               $dataNewEntry->entryDate,
                               $dataNewEntry->value,
                               $dataNewEntry->costCenterId,
                               $dataNewEntry->comments,
                               $dataNewEntry->bankReturnCode,
                               $dataNewEntry->isAccounted,
                               $dataNewEntry->creationType
                             );
                             
                if ($this->db->execute(SAGU::prepare($sql, $args)) === false)
                {
                    $keepGoing = false;
                }
               
                // Update the invoice value because have a new insert
                if ($this->updateInvoiceBalance($newInvoice) === false)
                {
                    $keepGoing = false;
                }
                $dataInvoice[$count][1] = $newInvoice;
                
            }

            // If everything gone right, we may COMMIT the database changes, otherwise, ROLLBACK them
            if ($keepGoing == true)
            {
                $this->db->execute('COMMIT');
                return $dataInvoice;
            }
            else
            {
                $this->db->execute('ROLLBACK');
                return false;
            }
        }
    }


   /**
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $invoiceId (int): primary key for receivable invoice
    *
    * @return (object): Simple object containing the values for invoice
    *
    */
    public function getReceivableInvoiceValues($invoiceId)
    {
        $sql = ' SELECT round(value, '.REAL_ROUND_VALUE.'),
                        round(balance(invoiceId)::numeric, '.REAL_ROUND_VALUE.'),
                        round(balanceWithPolicies(invoiceId, false)::numeric, '.REAL_ROUND_VALUE.')
                   FROM finReceivableInvoice
                  WHERE invoiceId = ? ';
        
        
        $args   = array($invoiceId);
        $return = $this->db->query(SAGU::prepare($sql, $args));

        $return = $return[0];

        $data->nominalValue        = $return[0];
        $data->balance             = $return[1];
        $data->balanceWithPolicies = $return[2];
        
        return $data;
    }

   /**
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $personId (int): Person id to get her invoices
    *
    * @return (array): A tri dimensional array containing invoices information for person
    *
    */
    public function listInvoicesForPersonDefaulter($personId, $datePardon, $totalValue = 0, $totalOpenValue = 0)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance'; 
        $businessDefaultOperations = $MIOLO->getBusiness($module, 'BusDefaultOperations');
        $defaultOperations = $businessDefaultOperations->getDefaultOperations();
        
        $sql = '  SELECT invoiceId,
                         periodId,
                         collectionTypeId,
                         (SELECT description 
                            FROM finCollectionType B
                           WHERE B.collectionTypeId = A.collectionTypeId ) as collectionTypeDescription,
                         numberDefaultOperationInvoices as hasAgreementEntries,
                         TO_CHAR(A.emissionDate, \''. MASK_DATE .'\') as emissionDate,
                         TO_CHAR(A.maturityDate, \''. MASK_DATE .'\') as maturityDate_,
                         ROUND(value, ' . REAL_ROUND_VALUE . ') as value,
                         ROUND(balance(invoiceId), ' . REAL_ROUND_VALUE . ') as balance,
                         updatedTime(invoiceId),
                         ROUND((balanceWithPoliciesDated(invoiceId, TO_DATE( ?, \''. MASK_DATE .'\' )))::numeric, ' . REAL_ROUND_VALUE . '),
                         periodDate
                    FROM ( SELECT (  SELECT periodId
                                       FROM acdLearningPeriod B
                                      WHERE A.maturityDate
                                    BETWEEN B.beginDate
                                        AND B.endDate
                                        AND A.courseId = B.courseId
                                        AND A.courseVersion = B.courseVersion
                                        AND A.policyId = B.policyId
                                        AND A.unitId = B.unitId
                                   GROUP BY periodId
                                      LIMIT 1) as periodId,
                                  A.invoiceId,
                                  emissionDate,
                                  maturityDate,
                                  A.value,
                                  (  SELECT beginDate::date
                                       FROM acdLearningPeriod B
                                      WHERE A.maturityDate
                                    BETWEEN B.beginDate
                                        AND B.endDate
                                        AND A.courseId = B.courseId
                                        AND A.courseVersion = B.courseVersion
                                        AND A.policyId = B.policyId
                                        AND A.unitId = B.unitId
                                    LIMIT 1) as periodDate,
                                   (  SELECT collectionTypeId
                                        FROM finPolicy B
                                       WHERE A.policyId = B.policyId ) as collectionTypeId,
                                   (  SELECT count(*) 
                                        FROM finEntry B
                                       WHERE B.invoiceId = A.invoiceId
                                         AND B.operationId = ? ) as numberDefaultOperationInvoices
                        FROM ONLY finReceivableInvoice A
                            WHERE A.personId = ? 
                              AND balance(A.invoiceId) > 0
                         ) AS A
                ORDER BY periodDate DESC,
                         maturityDate DESC ';

        $args = array($datePardon,
                      $defaultOperations->agreementOperation,
                      $personId );
        $return = $this->db->query(SAGU::prepare($sql, $args));

        if (is_array($return[0]))
        {
            $rest = $totalValue;
            for ($x = count($return)-1; $x>=0; $x--)
            {
                if ($finish === true)
                {
                    $return[$x][13] = SAGU::formatNumber(0);
                }
                else
                {
                    if (SAGU::calcNumber(SAGU::formatNumber($rest).'-'.SAGU::formatNumber($return[$x][10]))<0)
                    {
                        $return[$x][13] = SAGU::formatNumber($rest);
                        $finish = true;
                    }   
                    else
                    {
                        $rest = SAGU::calcNumber($rest.'-'.$return[$x][10]);
                        $return[$x][13] = $return[$x][10];
                    }
                }
            } 
        }

        return $return;
    }


   /**
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $personId (int): Person id to get her invoices
    *
    * @return (array): A tri dimensional array containing invoices information for person
    *
    */
    public function listInvoicesForPerson($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule(); 
        $ui     = $MIOLO->getUI();
        $businessDefaultOperations = $MIOLO->getBusiness($module, 'BusDefaultOperations');
        $defaultOperations         = $businessDefaultOperations->getDefaultOperations();

        $sql = 'SELECT * FROM ( SELECT A.periodId,
                        A.invoiceId,
                        B.collectionTypeId,
                        getCollectionTypeDescription(B.collectionTypeId) as collectionTypeDescription,
                        CASE WHEN A.status IN ( \''. CHARGEBACK_INVOICE_STATUS . '\') AND A.incomeSourceId IN (' . AGREEMENT_INCOME_SOURCE_ID . ') THEN 2
                             WHEN A.incomeSourceId IN (' . AGREEMENT_INCOME_SOURCE_ID . ') THEN 1
                             WHEN A.status IN (\''. CHARGEBACK_INVOICE_STATUS . '\') THEN 3
                             ELSE 0 
                        END,
                        TO_CHAR(A.emissionDate, \''.MASK_DATE.'\') as emissionDate,
                        TO_CHAR(A.maturityDate, \''.MASK_DATE.'\') as maturityDate_,
                        ROUND(A.value, '.REAL_ROUND_VALUE.') as balance,
                        ROUND(balance(A.invoiceId)::numeric, '.REAL_ROUND_VALUE.'),
                        updatedTime(A.invoiceId),
                        ROUND((balanceWithPolicies(A.invoiceId, true))::numeric, '.REAL_ROUND_VALUE.'),
                        B2.bankId,
                        rpad(substring(C.description, 0, 15), 15, \' \')
                   FROM finReceivableInvoice A
             INNER JOIN finPolicy B
                  USING (policyId)
              LEFT JOIN finBankAccount B2
                     ON ( A.bankAccountId = B2.bankAccountId )
             INNER JOIN finIncomeSource C 
                     ON ( C.incomeSourceId = A.incomeSourceId )
                   WHERE A.personId      = ? ';

        $args[] = $data->personId;

        if (strlen((string)$data->onlyOpen)>0)
        {
            $sql.= ' AND balance(A.invoiceId)>0 ';
        }

        if (strlen((string)$data->incomeSourceId)>0)
        {
            $sql.= ' AND A.incomeSourceId = ? ';
            $args[] = $data->incomeSourceId;
        }

		$sql .= ' ORDER BY A.maturityDate DESC) G  GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13 ORDER BY TO_DATE(maturityDate_, \''.MASK_DATE.'\') DESC ';

        $ret = $this->db->query(SAGU::prepare($sql, $args));

        if ( is_array($ret[0]) )
        {
            $ar = array();
            for ( $x = 0; $x<count($ret); $x++ )
            {
                $invoiceId     = $ret[$x][1];
                $str           = $ret[$x][3];
                $imaturityDate = $ret[$x][6];
                $ivalue        = $ret[$x][7];
                $ibalance      = $ret[$x][8];
                $ibalanceP     = $ret[$x][10];

                if ( in_array($invoiceId, $ar) )
                {
                    unset($ret[$x]);
                    continue;
                }
                else
                {
                    $ar[] = $invoiceId;
                }

                if ( $ret[$x][2] == COLLECTION_TYPE_SIMPLE )
                {
                    $imgPath = $ui->getImage($module, 'checkOff.png');
                }
                elseif ( $ret[$x][2] == COLLECTION_TYPE_REGISTERED )
                {
                    $imgPath = $ui->getImage($module, 'checkOn.png');
                }
                elseif ( $ret[$x][2] == COLLECTION_TYPE_INTERNAL )
                {
                    $imgPath = $ui->getImage($module, 'checkInternal.png');
                }

                $string = new MImage('imgCollectionType'.$x, $str, $imgPath);
                $ret[$x][2] = $string->generate();

                //acordos                
                if ( $ret[$x][4] == 1 )
                {
                    $str    = _M('Have agreements operation(s)', $module);
                    $path   = $ui->getImage($module, 'red.png');
                    $string = new MImage('imgAgreement'.$x, $str, $path);
                    $ret[$x][4] = $string->generate();
                }
                else if ( $ret[$x][4] == 2 )
                {
                    $str    = _M('Have agreements operation(s) and was charged back', $module);
                    $path   = $ui->getImage($module, 'red.png');
                    $string = new MImage('imgAgreement'.$x, $str, $path);
                    $ret[$x][4] = $string->generate();
                }
                else if ( $ret[$x][4] == 3 )
                {
                    $str    = _M('Was charged back', $module);
                    $path   = $ui->getImage($module, 'back-20x20.png');
                    $string = new MImage('imgChargedBack'.$x, $str, $path);
                    $ret[$x][4] = $string->generate();
                }
                else
                {
                    $str    = _M('Do not have agreements operation(s)', $module);
                    $path   = $ui->getImage($module, 'green.png');
                    $string = new MImage('imgAgreement'.$x, $str, $path);
                    $ret[$x][4] = $string->generate();
                }

                //controle de cheques
                $sql = 'SELECT A.checkId,
                               A.personId,
                               A.checkNumber,
                               TO_CHAR(A.emissionDate,\'' . MASK_DATE . '\'),
                               TO_CHAR(A.maturityDate,\'' . MASK_DATE . '\'),
                               TO_CHAR(A.newMaturityDate,\'' . MASK_DATE . '\'),
                               TO_CHAR(A.downDate,\'' . MASK_DATE . '\'),
                               A.issuingName,
                               A.observation,
                               ROUND(B.value, \'' . REAL_ROUND_VALUE . '\'),
                               ROUND(A.totalValue, \'' . REAL_ROUND_VALUE . '\'),
                               A.status
                          FROM finCheck A
                    INNER JOIN finCheckInvoice B
                            ON ( A.checkId = B.checkId )
                         WHERE B.invoiceId = ? ';

                $checks = $this->db->query(SAGU::prepare($sql, $invoiceId));

                //busca os cheques existentes para cada título
                if ( count($checks) > 0 )
                {
                    foreach ( $checks as $check )
                    {
                        list ( $checkId,
                               $personId,
                               $checkNumber,
                               $emissionDate,
                               $maturityDate,
                               $newMaturityDate,
                               $downDate,
                               $issuingName,
                               $observation,
                               $value,
                               $totalValue,
                               $status ) = $check;

                        unset($strCheck, $string);
                        $maturityDate = strlen((string)$newMaturityDate)>0 ? $newMaturityDate : $maturityDate;
                        if ( $status == 'C' )
                        {
                            $strCheck  = '[' . _M('With funds', $module) . '] ';
                        }
                        elseif ( $status == 'S' )
                        {
                            $strCheck  = '[' . _M('No funds', $module) . '] ';
                        }
                        elseif ( $status == 'D' )
                        {
                            $strCheck  = '[' . _M('Returned', $module) . '] ';
                        }
                        $strCheck .= _M('Check number', $module) . ': ' . $checkNumber;
                        $strCheck .= '  ' . _M('Emission', $module) . ': ' . $emissionDate;
                        $strCheck .= '  ' . _M('Maturity', $module) . ': ' . $maturityDate;
                        $strCheck .= '  ' . _M('Value', $module) . ': ' . $value;
                        $strCheck .= '  ' . _M('Total', $module) . ': ' . $totalValue;

                        $path      = $MIOLO->getActionUrl($module, 'main:register:check', null, array('function' => 'update', 'checkId' => $checkId, 'gotoBack' => urlencode(serialize(array('gotoBackAction' => $_GET['action'], 'gotoBackPersonId' => $data->personId)))));

                        if ( $downDate && $status == 'C' )
                        {
                            $imgPath   = $ui->getImage($module, 'checkGreen.png');
                            $strCheck .= '  ' . _M('Down date', $module) . ': ' . $downDate;
                        }
                        elseif ( !$downDate && $status == 'C' )
                        {
                            $imgPath = $ui->getImage($module, 'checkYellow.png');
                        }
                        elseif ( $status == 'D' )
                        {
                            $imgPath = $ui->getImage($module, 'checkRed.png');
                        }
                        elseif ( $status == 'S' )
                        {
                            $imgPath = $ui->getImage($module, 'checkBlack.png');
                        }
                        
                        $string       = new MImageLink('imgCheck' . $x, $strCheck, $path, $imgPath);
                        $ret[$x][13] .= $string->generate();
                    }
                }

                //botão de novo cheque
                $strCheck     = _M('New check', $module);
                $path         = $MIOLO->getActionUrl($module, 'main:register:check', null, array('function' => 'insert', 'invoiceId' => $invoiceId, 'contractPersonId' => $data->personId, 'value' => $ibalance, 'maturityDate' => $imaturityDate, 'balance' => $ibalanceP, 'gotoBack' => urlencode(serialize(array('gotoBackAction' => $_GET['action'], 'gotoBackPersonId' => $data->personId))) ));
                $imgPath      = $ui->getImage($module, 'checkWhite.png');
                $string       = new MImageLink('imgCheckWhite' . $x, $strCheck, $path, $imgPath);
                $ret[$x][13] .= $string->generate();
            }

            $x = 0;
            foreach ( $ret as $r )
            {
                if ($r[0] != $periodId)
                {
                    $periodId = $r[0];
                    $x++;
                    $return[$x]->periodInfo = $periodId;
                }
                $return[$x]->data[] = $r;
            }
        }
        return $return;
    }

   /**
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param: $personId (int): Person id to get her invoices
    *
    * @return (array): A tri dimensional array containing invoices information for person
    *
    */
    public function totalizationInvoicesForPerson($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance';  // Esta finance por extenso devido a chamadas do módulo processo seletivo
        
        $sql = '  SELECT (SELECT description 
                            FROM finCollectionType B
                           WHERE B.collectionTypeId = A.collectionTypeId ),
                         ROUND(sum(value), ' . REAL_ROUND_VALUE . ') as value,
                         ( CASE WHEN ROUND(sum(balance(invoiceId)), ' . REAL_ROUND_VALUE . ') IS NULL THEN 0 ELSE ROUND(sum(balance(invoiceId)), ' . REAL_ROUND_VALUE . ') END)as balance,
                         ( CASE WHEN ROUND(sum((balanceWithPolicies(invoiceId))::numeric), ' . REAL_ROUND_VALUE . ') IS NULL THEN 0 ELSE ROUND(sum((balanceWithPolicies(invoiceId))::numeric), ' . REAL_ROUND_VALUE . ') END ),
                         ( SELECT CASE WHEN (SELECT count(*) FROM finCheck WHERE personId = ? AND status = \'S\') > 0 THEN \'S\'
                                       WHEN (SELECT count(*) FROM finCheck WHERE personId = ? AND status = \'D\') > 0 THEN \'D\'
                                       WHEN (SELECT count(*) FROM finCheck WHERE personId = ? AND status = \'C\' AND downDate IS NULL) > 0 THEN \'P\'
                                       WHEN (SELECT count(*) FROM finCheck WHERE personId = ?) = 0 THEN \'-\'
                                       ELSE \'C\' END )
                    FROM ( SELECT (  SELECT periodId
                                       FROM acdLearningPeriod B
                                      WHERE A.maturityDate
                                    BETWEEN B.beginDate
                                        AND B.endDate
                                        AND A.courseId = B.courseId
                                        AND A.courseVersion = B.courseVersion
                                        AND A.policyId = B.policyId
                                        AND A.unitId = B.unitId
                                   GROUP BY periodId
                                    LIMIT 1) as periodId,
                                  A.invoiceId,
                                  emissionDate,
                                  maturityDate,
                                  A.value,
                                  (  SELECT beginDate::date
                                       FROM acdLearningPeriod B
                                      WHERE A.maturityDate
                                    BETWEEN B.beginDate
                                        AND B.endDate
                                        AND A.courseId = B.courseId
                                        AND A.courseVersion = B.courseVersion
                                        AND A.policyId = B.policyId
                                        AND A.unitId = B.unitId
                                    LIMIT 1) as periodDate,
                                   (  SELECT collectionTypeId
                                        FROM finPolicy B
                                       WHERE A.policyId = B.policyId ) as collectionTypeId
                        FROM ONLY finReceivableInvoice A
                            WHERE A.personId = ? 
                         ) AS A
                GROUP BY collectionTypeId ';

        $args = array($personId, $personId, $personId, $personId, $personId);
        $ret = $this->db->query(SAGU::prepare($sql, $args));

        return $ret;
    }

   /** 
    * Verify if the receivable invoice id really exists ;)
    * 
    * @args: $invoiceId (int): Invoice id code
    *
    * @param: True if exists otherwise false
    *
    */
    public function verifyReceivableInvoice($invoiceId)
    {
        $sql = ' SELECT invoiceId
                   FROM finReceivableInvoice
                  WHERE invoiceId = ? ';
                  

        $args = array($invoiceId);

        $return = $this->db->query(SAGU::prepare($sql, $args));

        if (is_array($return[0]))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

   /** 
    * Get all agreements related to a person
    * 
    * @args: $personId (int): Person id
    *
    * @param: An array containing information about agreements
    *
    */
    public function listReceivableInvoiceWithAgreements($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $sql = ' SELECT invoiceId,
                        incomeSourceId||\' - \'||getIncomeSourceDescription(incomeSourceId),
                        TO_CHAR(maturityDate, \' ' . MASK_DATE . '\'),
                        ROUND( SUM (entryValue * CASE WHEN operationTypeId = \'C\' THEN  0 ELSE 1 END), \' ' . REAL_ROUND_VALUE . '\' ),
                        ROUND( SUM (entryValue * CASE WHEN operationTypeId = \'C\' THEN  1 ELSE 0 END), \' ' . REAL_ROUND_VALUE . '\' ),
                        ROUND( SUM (entryValue * CASE WHEN operationTypeId = \'C\' THEN -1 ELSE 1 END), \' ' . REAL_ROUND_VALUE . '\' )
                   FROM ( SELECT B.invoiceId,
                                 B.incomeSourceId,
                                 B.maturityDate,
                                 C.entryDate,
                                 D.operationId||\' - \'||D.description as operationDescription,
                                 C.value as entryValue,
                                 operationTypeId,
                                 B.value
                            FROM ( SELECT A.invoiceId
                                     FROM (SELECT invoiceId,
                                                  incomeSourceId,
                                                  maturityDate
                                        FROM ONLY finReceivableInvoice
                                            WHERE personId = ? ) AS A
                               INNER JOIN (SELECT invoiceId,
                                                  operationId,
                                                  entryDate
                                             FROM finEntry) AS B
                                    USING (invoiceId)
                                    WHERE B.operationId IN (' . AGREEMENT_OPERATIONS . ')
                                       OR A.incomesourceId IN (' . AGREEMENT_INCOME_SOURCE_ID . ')
                               --        OR B.entryDate > CASE WHEN TO_CHAR(maturityDate, \'D\') = \'1\'
                               --                                 THEN maturityDate + 1
                               --                              WHEN TO_CHAR(maturityDate, \'D\') = \'7\'
                               --                                 THEN maturityDate + 2
                               --                             ELSE maturityDate
                               --                         END 
                                 GROUP BY 1
                                 ) AS A 
                      INNER JOIN (   SELECT invoiceId,
                                            incomeSourceId,
                                            maturityDate,
                                            value
                                  FROM ONLY finReceivableInvoice ) AS B
                           USING (invoiceId)
                      INNER JOIN (   SELECT invoiceId,
                                            operationId,
                                            entryDate,
                                            value
                                       FROM finEntry) AS C
                           USING (invoiceId)
                      INNER JOIN (   SELECT operationId,
                                            description,
                                            operationTypeId
                                       FROM finOperation ) AS D
                           USING (operationId)) AS A
                    GROUP BY 1, 2, 3, maturityDate
                    ORDER BY maturityDate DESC, 1 ASC ';
        $args   = array($personId);

        $return = $this->db->query(SAGU::prepare($sql, $args));
        return $return;

    }
    

   /**
    * Convert a date to the format used by the system, based on the
    * MASK_DATE define.
    *
    * @param $year (integer|string): Year date part
    * @param $month (integer|string): Month date part
    * @param $day (integer|string): Day date part
    *
    * @return (string): The formatted date
    *
    */
    public function getSystemFormattedDate($year, $month, $day)
    {
        $date = str_pad($year,  4, '0', STR_PAD_LEFT) . '-' . 
                str_pad($month, 2, '0', STR_PAD_LEFT) . '-' .
                str_pad($day,   2, '0', STR_PAD_LEFT);

        $sql = 'SELECT TO_CHAR(TO_DATE(\'' . $date . '\',\'yyyy-mm-dd\'),\'' . MASK_DATE . '\')';
        $retVal = $this->db->query($sql);

        return $retVal[0][0];
    }


   /**
    * Get the balance invoice
    *
    * @param $invoiceId (int): Invoice identification
    *
    * @return (number): Invoice balance with policies corrections
    *
    */
    public function getBalanceWithPolicies($invoiceId)
    {
      $sql    = ' SELECT balanceWithPolicies(?) ';
      $args   = array($invoiceId);
      $retVal = $this->db->query(SAGU::prepare($sql, $args));
      return $retVal[0][0];
    }

   /**
    * Get the balance invoice
    *
    * @param $invoiceId (int): Invoice identification
    *
    * @return (number): Invoice balance
    *
    */
    public function getBalance($invoiceId)
    {
      $sql    = ' SELECT balance(?) ';
      $args   = array($invoiceId);
      $retVal = $this->db->query(SAGU::prepare($sql, $args));
      return $retVal[0][0];
    }

   /**
    * Update the nominal value
    *
    * @param $invoiceId (int): The invoice primary key to update the nominal value
    *
    * @returns (boolean): True if do, otherwise false
    *
    */
    public function updateNominalValue($invoiceId)
    {
        $sql = ' UPDATE finReceivableInvoice
                    SET value     = balance(invoiceId)
                  WHERE invoiceId = ? ';

        $args = array($invoiceId);
        $ret = $this->db->execute(SAGU::prepare($sql, $args));
        return $ret;
    }
 
   /**
    * Get a sum of open values for a person 
    *
    * @param: $personId: Person code
    *
    * @return: Total value for person open values
    *
    */
    public function calculatePersonOpenValue($personId)
    {

        $sql = '    SELECT ROUND(sum(balance(invoiceId)), '.REAL_ROUND_VALUE.')
                 FROM ONLY finReceivableInvoice
                     WHERE personId = ?
                       AND balance(invoiceId)>0 ';
        $args = array($personId);
        $ret  = $this->db->query(SAGU::prepare($sql, $args));
        return strlen((string)$ret[0][0])>0 ? $ret[0][0] : SAGU::formatNumber(0);
    }
    
 
   /**
    * Get a sum of open values for a person with dated balances 
    *
    * @param: $personId: Person code
    *
    * @return: Total value for person open values
    *
    */
    public function calculateTotalPersonOpenValueDated($personId, $balanceDate)
    {
        $sql = '    SELECT ROUND(sum(balanceWithPoliciesDated(invoiceId, TO_DATE(?, \''.MASK_DATE.'\'))), '.REAL_ROUND_VALUE.')
                 FROM ONLY finReceivableInvoice
                     WHERE personId = ?
                       AND balance(invoiceId)>0 ';
        $args = array($balanceDate, $personId);
        $ret  = $this->db->query(SAGU::prepare($sql, $args));
        return strlen((string)$ret[0][0])>0 ? $ret[0][0] : SAGU::formatNumber(0);
    }

 
   /**
    * Get a sum of open values for a person with dated balances 
    *
    * @param: $personId: Person code
    *
    * @return: Total value for person open values
    *
    */
    public function calculateTotalPersonOpenValueByDate($personId, $balanceDate)
    {
        $sql = '    SELECT ROUND(sum(balanceWithPolicies(invoiceId, true)), '.REAL_ROUND_VALUE.')
                 FROM ONLY finReceivableInvoice
                     WHERE personId = ?
                       AND maturityDate <= TO_DATE(?,\'' .  MASK_DATE . '\')
                       AND balance(invoiceId)>0 ';
        $args = array($personId, $balanceDate);
        $ret  = $this->db->query(SAGU::prepare($sql, $args));

        return strlen((string)$ret[0][0])>0 ? $ret[0][0] : SAGU::formatNumber(0);
    }

   /**
    * Generate a set of individual invoices 
    *
    * @param: $data (object): Invoices and entries 
    *
    * @return: True if runs otherwise false
    *
    */
    public function generateIndividualInvoices($data)
    {
        $keepGoing = true;
        $this->db->execute('BEGIN TRANSACTION');
        if ( is_array($data) )
        {
            foreach ( $data as $invoices )
            {
                $invoiceId = $this->insertReceivableInvoice($invoices->data);
                if ( is_array($invoices->entries) && (strlen((string)$invoiceId)>0) )
                {
                    foreach ( $invoices->entries as $entry )
                    {
                        $entry->invoiceId = $invoiceId;
                        $keepGoing = $this->insertEntry($entry);
                        if ($keepGoing !== true)
                        {
                            break 4;
                        }

                        /* se tiver patrocinador ou financiador, insere o titulo pra ele */
                        if ( $entry->haveSupporter == true )
                        {

                            $supporterInvoice = clone($invoices);
                            $supporterEntry   = clone($entry);

                            $supporterInvoice->data->personId = $entry->supporterId;
                            $supporterEntry->operationId      = $entry->supporterOperationId;
                            $supporterInvoice->data->accountSchemeId = $entry->supporterAccountSchemeId;

                            $supporterInvoiceId               = $this->insertReceivableInvoice($supporterInvoice->data);
                            $supporterEntry->invoiceId        = $supporterInvoiceId;

                            $keepGoing = $this->insertEntry($supporterEntry);
                            if ( $keepGoing !== true )
                            {
                                break 4;
                            }
                        }

                    }
                }
                else
                {
                    $keepGoing = false;
                }
                $this->updateNominalValue($invoiceId);
            }
        }
        else
        {
            $keepGoing = false;
        }
        $this->db->execute($keepGoing ? 'COMMIT' : 'ROLLBACK');
        return $keepGoing;
    }

   /**
    * Select the open entry by person
    *
    * @param: $personId : Person code
    *
    * @return: array of elements
    *
    */
    public function selectOpenEntryByPerson($personId, $maturityDate = null )
    {
        $sql = ' SELECT A.invoiceId,
                        B.operationId,
                        C.operationTypeId|| \': \' ||C.description||\'<br>\'||COALESCE(B.comments, \'\'),
                        TO_CHAR(A.maturityDate, \''.MASK_DATE.'\'),
                        ROUND(B.value, 2),
                        balanceWithPolicies(A.invoiceId)
                   FROM finReceivableInvoice A
             INNER JOIN finEntry B
                     ON (B.invoiceId = A.invoiceId)
             INNER JOIN finOperation C
                     ON (C.operationId = B.operationId)
                  WHERE A.personId = '.$personId.'
                    AND balanceWithPolicies(A.invoiceId) > 0
                    AND A.maturityDate <= now()::date
               ORDER BY A.maturityDate, C.operationId ' ;
        $return  = $this->db->query($sql);

        return $return;
    }

    /**
     * @author: Marcus Vinícius M. Machado [mvmmachado@gmail.com.br]
     *
     * @param $sagu1InvoiceId (int): Return sagu1Invoice code (unique)
     *
     * @return (int): the respectively invoice id
     *
     */
    public function getInvoiceIdBySagu1InvoiceId($sagu1InvoiceId)
    {
        $sql = '   SELECT invoiceId
                FROM ONLY finReceivableInvoice
                    WHERE sagu1InvoiceId = ? ';

        $args   = array($sagu1InvoiceId);
        $return = $this->db->query(SAGU::prepare($sql, $args));
        return $return[0][0];
    }

    function generateMaturityDate($beginDate, $maturityDay)
    {

        //Montando a data inicial das previsões
        $sql = 'SELECT TRIM(EXTRACT(MONTH FROM TO_DATE(?, \'' . MASK_DATE . '\')), \'00\'),
                       TRIM(EXTRACT(YEAR FROM TO_DATE(?, \'' . MASK_DATE . '\')), \'0000\')';
            
        $sql = 'SELECT EXTRACT(MONTH FROM TO_DATE(?, \'' . MASK_DATE . '\')),
                       EXTRACT(YEAR FROM TO_DATE(?, \'' . MASK_DATE . '\'))';
            
        $args = array(  $beginDate,
                        $beginDate  );
            
        $parcelsBeginDate = $this->db->query(SAGU::prepare($sql, $args));
            
        $parcelsBeginDate = $parcelsBeginDate[0][1] . '-' . $parcelsBeginDate[0][0] . '-' . $maturityDay;
            
        $sql = 'SELECT TO_CHAR(TO_DATE(?, \'yyyy/mm/dd\'), \'' . MASK_DATE . '\')';
            
        $parcelsBeginDate = $this->db->query(SAGU::prepare($sql, $parcelsBeginDate));
        return $parcelsBeginDate[0][0];
    }

    function haveEnrollFee($personId, $beginDate, $endDate, $courseId=null, $courseVersion=null, $unitId=null, $periodId=null )
    {
        

        $sql = 'SELECT 
                    count(*)
                FROM 
                    finReceivableInvoice A
                WHERE
                   A.status IS NULL
                   AND A.incomeSourceId IN ( ' . ENROLL_READMISSION_INCOME_SOURCE_ID . ' , ' . ENROLL_INCOME_SOURCE_ID . ', ' . ENROLL_ADDITTION_INCOME_SOURCE_ID . '  )
                   AND A.personId      = ? ';

        $args = array ($personId);

        if ( strlen((string)$courseId)>0 )
        {
            $sql   .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion)>0 )
        {
            $sql   .= ' AND A.courseVersion = ? ';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$unitId)>0 )
        {
            $sql   .= ' AND A.unitId = ? ';
            $args[] = $unitId;
        }
        if ( strlen((string)$periodId) > 0 )
        {
            $sql .= ' AND A.periodId = ?';
            $args[] = $periodId;
        }
        else
        {
            $sql .= 'AND A.maturityDate >= TO_DATE(?, \'' . MASK_DATE . '\')
                   AND A.maturityDate <= TO_DATE(?, \'' . MASK_DATE . '\') ';
            $args[] = $beginDate;
            $args[] = $endDate;
        }
        $enrollFee = $this->db->query(SAGU::prepare($sql, $args));
        $haveEnrollFee = ( (int)($enrollFee[0][0]) > 0 ) ? true : false;

        return $haveEnrollFee;
    }

    function getEnrollFeeInformations($personId, $beginDate, $periodId = null )
    {
        

        $sql = 'SELECT B.operationId,
                       C.description as operation,
                       C.operationTypeId,
                       TO_CHAR(B.entryDate, \'' . MASK_DATE . '\') as maturityDate,
                       ROUND(B.value, 2) as value,
                       ROUND(balance(A.invoiceId, true), 2) as balance
                  FROM finReceivableInvoice A
            INNER JOIN finEntry B
                    ON ( A.invoiceId   = B.invoiceId )
            INNER JOIN finOperation C
                    ON ( B.operationId = C.operationId )
                 WHERE                   A.status IS NULL
                   AND A.personId      = ? 
                   AND A.invoiceId IN ( SELECT 
                                            DISTINCT A.invoiceId
                                        FROM 
                                            finReceivableInvoice A
                                        WHERE 
                                            A.incomeSourceId IN ( '. ENROLL_INCOME_SOURCE_ID . ', ' . ENROLL_READMISSION_INCOME_SOURCE_ID . ', ' . ENROLL_ADDITTION_INCOME_SOURCE_ID . ' )
                                        AND A.status IS NULL
                                       )';
        $args = array ($personId);
        if ( strlen((string)$periodId) > 0 )
        {
            $sql .= ' AND A.periodId = ?';
            $args[] = $periodId;
        }
        else
        {
           $sql .= ' AND A.maturityDate >= TO_DATE(?, \'' . MASK_DATE . '\')';
            $args[] = $beginDate;
        }
        $sql .='    ORDER BY B.entryDate,
                       B.dateTime';


        $enrollFee = $this->db->query(SAGU::prepare($sql, $args));

        return $enrollFee;
    }

   /**
    * Verify the finalcial situation from a pupil who will change the enroll
    *
    * @param $contractId (integer): Field to be searched
    * @param $classId (integer): Field to be searched
    *
    * @return (boolean): True if the pupil can to change the enroll, or false if do not
    *
    */
    function getEnrollFinancialStatus($periodId, $contractId=null, $classId=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance';

        $sql = 'SELECT CASE WHEN count(*) > 0
                       THEN true 
                       ELSE false 
                        END
             FROM finEntry A
            WHERE A.invoiceId IN (
                                   SELECT B.invoiceId
                                     FROM finReceivableInvoice B
                                    WHERE B.personId = ?
                                      AND B.courseId = ?
                                      AND B.courseVersion = ?
                                      AND B.unitId        = ?
                                      AND B.maturityDate BETWEEN getPeriodBeginDate(?, B.courseId, B.courseVersion, B.unitId)
                                                             AND getPeriodEndDate(?, B.courseId, B.courseVersion, B.unitId)
                                 )
              AND A.operationId IN ( SELECT C.enrollOperation
                                       FROM finDefaultOperations C
                                      LIMIT 1 
                                   )';

        $sql2 = 'SELECT isFinanceGenerate
                   FROM acdLearningPeriod 
                  WHERE courseId = ( SELECT courseId FROM acdContract WHERE contractId = ?  )
                    AND courseVersion = ( SELECT courseVersion FROM acdContract WHERE contractId = ? )
                    AND unitId = ( SELECT unitId FROM acdContract WHERE contractId = ? )
                    AND turnId = ( SELECT turnId FROM acdContract WHERE contractId = ? )
                    AND periodId = ?';

        if ( strlen((string)$periodId) == 0 )
        {
            return false;
        }
        elseif ( strlen((string)$contractId) > 0 )
        {

            $args2 = array( $contractId,
                            $contractId,
                            $contractId,
                            $contractId,
                            $periodId );

            $financeValidation = $this->db->query(SAGU::prepare($sql2, $args2));

            //se tiver financeiro faz a verificação
            if ( $financeValidation[0][0] == DB_TRUE )
            {
                $sql_ = 'SELECT B.personId,
                                B.courseId,
                                B.courseVersion,
                                B.unitId
                           FROM acdContract B
                          WHERE B.contractId = ?';

                $args = array($contractId);
        
                $pupil = $this->db->query(SAGU::prepare($sql_, $args));

                $personId = $pupil[0][0];
                $courseId = $pupil[0][1];
                $courseVersion = $pupil[0][2];
                $unitId        = $pupil[0][3];

                $args  = array($personId,
                               $courseId,
                               $courseVersion,
                               $unitId,
                               $periodId,
                               $periodId);
                $check = $this->db->query(SAGU::prepare($sql, $args));

                //se tiver títulos de matrícula, retorna falso
                if ( $check[0][0] == DB_TRUE )
                {
                    return false;
                }
            }
            //se nao tiver financeiro, retorna true
            else
            {
                return true;
            }
        }
        elseif ( strlen((string)$classId) > 0 )
        {
            $sql_ = 'SELECT B.personId,
                            A.contractId,
                            B.courseId,
                            B.courseVersion,
                            B.unitId
                       FROM acdClassPupil A
                 INNER JOIN acdContract B
                         ON ( A.contractId = B.contractId )
                      WHERE A.endDate IS NULL
                        AND A.classId = ?';

            $args = array($classId);
        
            $pupils = $this->db->query(SAGU::prepare($sql_, $args));

            if ( count($pupils)>0 )
            {
                foreach ( $pupils as $personId )
                {
                    $courseId      = $personId[2];
                    $courseVersion = $personId[3];
                    $unitId        = $personId[4];

                    $args2 = array( $personId[1],
                                    $personId[1],
                                    $personId[1],
                                    $personId[1],
                                    $periodId );

                    $financeValidation = $this->db->query(SAGU::prepare($sql2, $args2));

                    //se tiver financeiro faz a verificação
                    if ( $financeValidation[0][0] == DB_TRUE )
                    {
                        $args  = array($personId[0],
                                       $courseId,
                                       $courseVersion,
                                       $unitId,
                                       $periodId,
                                       $periodId);

                        $check = $this->db->query(SAGU::prepare($sql, $args));
                        //se tiver títulos de matrícula, retorna falso
                        if ( $check[0][0] == DB_TRUE )
                        {
                            return false;
                        }
                    }
                    //se nao tiver financeiro, retorna verdadeiro para prosseguir
                    else
                    {
                        return true;
                    }
                }
            }
        }
        else
        {
            return false;
        }

        //deixa matricular somente se nao ocorreu nenhum erro
        return true;
    }
}

?>
