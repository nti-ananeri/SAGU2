<?php
/**
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 16/05/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the acdgenerateMultipleEnrollFee table
 **/
class BusinessFinanceBusGenerateMultiplePrice extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getPrices($filters)
    {
        $sql = 'SELECT B.learningPeriodId,
                       D.courseId,
                       SUBSTRING(D.name,0,30),
                       F.description,
                       TO_CHAR(E.startDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(E.endDate, \'' . MASK_DATE .'\'),
                       E.value
                FROM acdPeriod A
                INNER JOIN acdLearningPeriod B
                    USING (periodId)
                INNER JOIN acdCourseOccurrence C
                    USING (courseId, courseVersion, unitId, turnId) 
                INNER JOIN acdCourse D
                    USING (courseId)
                LEFT JOIN finPrice E
                    USING (learningPeriodId)
                INNER JOIN basUnit F
                    USING (unitId) ';

        if ( strlen((string)$filters->formationLevelId) > 0 )
        {
            $where .= ' AND D.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }

        if ( strlen((string)$filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $filters->periodId;
        }

        
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.courseId, C.unitId, C.turnId';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
        

    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getLearningPeriod($courseId, $courseVersion, $turnId, $unitId, $periodId)
    {
        $sql = 'SELECT B.learningPeriodId
                 FROM acdCourseOccurrence A
                 INNER JOIN acdLearningPeriod B
                    ON (A.courseId = B.courseId
                        AND A.courseVersion = B.courseVersion
                        AND A.unitId = B.unitId
                        AND A.turnId = B.turnId) ';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $turnId;
        }

        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $unitId;
        }

        if ( strlen((string)$periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) ;
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0][0];
        

    }

    
    public function beginTransaction()
    {

        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {

        $db = $this->getDatabase();
        $db->execute('COMMIT');

    }

}

?>
