<?php
/**
 *
 * This file handles the connection and actions for finIncentiveType table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finIncentiveType table
 **/
class BusinessFinanceBusIncentiveType extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessFinanceBusincentiveType()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listIncentiveType()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $incentiveTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getIncentiveType($incentiveTypeId)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.isExtinct,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
             FROM ONLY finIncentiveType A
            INNER JOIN finOperation B
                 USING ( operationId )
                 WHERE A.incentiveTypeId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $incentiveTypeId));
        //$db->close();

        $incentiveType = new finIncentiveType();

        list ( $incentiveType->incentiveTypeId,
               $incentiveType->description,
               $incentiveType->operationId,
               $incentiveType->operationDescription,
               $incentiveType->needAdjustAuthorization,
               $incentiveType->sendInvoices,
               $incentiveType->generateCredits,
               $incentiveType->isExtinct,
               $incentiveType->userName,
               $incentiveType->dateTime,
               $incentiveType->ipAddress ) = $result[0];

        return $incentiveType; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchIncentiveType($filters)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.isExtinct,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
             FROM ONLY finIncentiveType A
            INNER JOIN finOperation B
                 USING ( operationId ) ';

        if ( strlen((string)$filters->incentiveTypeId) > 0 )
        {
            $where .= ' AND A.incentiveTypeId = ?';
            $args[] = $filters->incentiveTypeId;
        }

        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $filters->description . '%';
        }

        if ( strlen((string)$filters->needAdjustAuthorization) > 0 )
        {
            $where .= ' AND A.needAdjustAuthorization = ?';
            $args[] = $filters->needAdjustAuthorization;
        }

        if ( strlen((string)$filters->sendInvoices) > 0 )
        {
            $where .= ' AND A.sendInvoices = ?';
            $args[] = $filters->sendInvoices;
        }

        if ( strlen((string)$filters->generateCredits) > 0 )
        {
            $where .= ' AND A.generateCredits = ?';
            $args[] = $filters->generateCredits;
        }

        if ( strlen((string)$filters->isExtinct) > 0 )
        {
            $where .= ' AND A.isExtinct = ?';
            $args[] = $filters->isExtinct;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertIncentiveType($data)
    {
        $sql = 'SELECT NEXTVAL(\'seq_incentivetypeid\')';
        $ret = $this->db->query(SAGU::prepare($sql,null));
        $data->incentiveTypeId = $ret[0][0];

        $sql = 'INSERT INTO finIncentiveType
                            (incentiveTypeId,
                             description,
                             operationId,
                             needAdjustAuthorization,
                             sendInvoices,
                             generateCredits,
                             isExtinct)
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( 
                       $data->incentiveTypeId,
                       $data->description,
                       $data->operationId,
                       $data->needAdjustAuthorization,
                       $data->sendInvoices,
                       $data->generateCredits,
                       $data->isExtinct
                     );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result && strlen((string)$data->incentiveTypeId)>0 )
        {
            return $data;
        }
        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateIncentiveType($data)
    {
        $sql = 'UPDATE finIncentiveType
                   SET description              = ?,
                       operationId              = ?,
                       needAdjustAuthorization  = ?,
                       sendInvoices             = ?,
                       generateCredits          = ?,
                       isExtinct                = ?
                 WHERE incentiveTypeId          = ?';

        $args = array( 
                       $data->description,
                       $data->operationId,
                       $data->needAdjustAuthorization,
                       $data->sendInvoices,
                       $data->generateCredits,
                       $data->isExtinct,
                       $data->incentiveTypeId
                     );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $incentiveTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteIncentiveType($incentiveTypeId)
    {
        $sql = 'DELETE FROM finIncentiveType
                      WHERE incentiveTypeId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $incentiveTypeId));

        return $result;
    }

}

?>
