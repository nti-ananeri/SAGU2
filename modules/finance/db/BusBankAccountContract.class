<?php
/**
 *
 * This file handles the connection and actions for finBankAccountContract table
 *
 * @author Daniel Afonso Heisler [daniel.heisler@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 22/01/2008
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finBankAccountContract table
 **/
class BusinessFinanceBusBankAccountContract extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
      * Return contracts list
      *
      * return (array): return a array with list
      *
      **/
    public function listBankAccountContract($bankAccountId=null)
    {
        $sql = 'SELECT A.bankContractId, A.bankAccountId||\' - \'||A.description 
                  FROM finBankAccountContract A ';

        if ( strlen((string)$bankAccountId)>0 )
        {
            $sql .= 'WHERE bankAccountId = ?';
            $args[] = $bankAccountId;
        }

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$args));
        return $result;
    
    }

    public function listBankAccountContract2($bankAccountId=null)
    {
        $sql = 'SELECT A.bankAccountId || \'-\' || A.bankContractId, A.bankAccountId||\' - \'||A.description 
                  FROM finBankAccountContract A ';

        if ( strlen((string)$bankAccountId)>0 )
        {
            $sql .= 'WHERE bankAccountId = ?';
            $args[] = $bankAccountId;
        }

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$args));
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $bankContractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankAccountContract($bankContractId, $bankAccountId)
    {
        $sql = 'SELECT A.bankContractId,
                       A.bankAccountId,
                       A.description,
                       B.description as bankAccountDescription,
                       B.accountnumber,
                       B.accountnumberdigit,
                       B.branchnumber,
                       B.branchnumberdigit,
                       B.bankid,
                       C.description as bankDescription,
                       A.collection,
                       A.wallet,
                       A.variation,
                       A.accord,
                       A.collectionTypeId,
                       D.description as collectionTypeDescription,
                       A.collectionBranch,
                       A.remittanceSequence,
                       A.remittanceSequenceReset,
                       A.returnSequence,
                       A.returnSequenceReset,
                       A.invoiceSequence,
                       A.invoiceSequenceReset,
                       A.seqLimit,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM finBankAccountContract A
            INNER JOIN finBankAccount B
                 USING ( bankAccountId )
            INNER JOIN finBank C
                 USING ( bankId )
             LEFT JOIN finCollectionType D
                 USING ( collectionTypeId )
                 WHERE A.bankContractId = ?
                   AND A.bankAccountId  = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,array($bankContractId, $bankAccountId)));

        $bankAccountContract = new FinBankAccountContract();

        list ( $bankAccountContract->bankContractId,
               $bankAccountContract->bankAccountId,
               $bankAccountContract->description,
               $bankAccountContract->bankAccountDescription,
               $bankAccountContract->accountNumber,
               $bankAccountContract->accountNumberDigit,
               $bankAccountContract->branchNumber,
               $bankAccountContract->branchNumberDigit,
               $bankAccountContract->bankId,
               $bankAccountContract->bankDescription,
               $bankAccountContract->collection,
               $bankAccountContract->wallet,
               $bankAccountContract->variation,
               $bankAccountContract->accord,
               $bankAccountContract->collectionTypeId,
               $bankAccountContract->collectionTypeDescription,
               $bankAccountContract->collectionBranch,
               $bankAccountContract->remittanceSequence,
               $bankAccountContract->remittanceSequenceReset,
               $bankAccountContract->returnSequence,
               $bankAccountContract->returnSequenceReset,
               $bankAccountContract->invoiceSequence,
               $bankAccountContract->invoiceSequenceReset,
               $bankAccountContract->seqLimit,
               $bankAccountContract->userName,
               $bankAccountContract->dateTime,
               $bankAccountContract->ipAddress) = $result[0];

        return $bankAccountContract; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankAccountContract($data)
    {
        $sql = 'SELECT A.bankContractId,
                       A.bankAccountId,
                       A.description,
                       B.description as bankAccountDescription,
                       B.accountnumber,
                       B.accountnumberdigit,
                       B.branchnumber,
                       B.branchnumberdigit,
                       B.bankid,
                       C.description as bankDescription,
                       A.collection,
                       A.wallet,
                       A.variation,
                       A.accord,
                       A.collectionTypeId,
                       D.description as collectionTypeDescription,
                       A.collectionBranch,
                       A.remittanceSequence,
                       A.remittanceSequenceReset,
                       A.returnSequence,
                       A.returnSequenceReset,
                       A.invoiceSequence,
                       A.invoiceSequenceReset,
                       A.seqLimit,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM finBankAccountContract A
            INNER JOIN finBankAccount B
                 USING ( bankAccountId )
            INNER JOIN finBank C
                 USING ( bankId )
             LEFT JOIN finCollectionType D
                 USING ( collectionTypeId ) ';

        $where = '';
        unset($args);
        if ( strlen((string)$data->bankContractId) > 0 )
        {
            $where .= '    AND   A.bankContractId = ?';
            $args[] = $data->bankContractId;
        }
        if ( strlen((string)$data->bankId) > 0 )
        {
            $where .= '    AND   C.bankId = ?';
            $args[] = $data->bankId;
        }
        if ( strlen((string)$data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '    AND   A.description ilike ?';
            $args[] = $data->description.'%';
        }
        if ( strlen((string)$data->collection) > 0 )
        {
            $where .= '    AND   A.collection = ?';
            $args[] = $data->collection;
        }
        if ( strlen((string)$data->wallet) > 0 )
        {
            $where .= '    AND   A.wallet = ?';
            $args[] = $data->wallet;
        }
        if ( strlen((string)$data->variation) > 0 )
        {
            $where .= '    AND   A.variation = ?';
            $args[] = $data->variation;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.bankAccountId';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankAccountContract($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finBankAccountContract
                            (bankContractId,
                             bankAccountId,
                             description,
                             collection,
                             wallet,
                             variation,
                             accord,
                             collectionTypeId,
                             collectionBranch,
                             remittanceSequence,
                             remittanceSequenceReset,
                             returnSequence,
                             returnSequenceReset,
                             invoiceSequence,
                             invoiceSequenceReset,
                             seqLimit)
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array($data->bankContractId,
                      $data->bankAccountId,
                      $data->description,
                      $data->collection,
                      $data->wallet,
                      $data->variation,
                      $data->accord,
                      $data->collectionTypeId,
                      $data->collectionBranch,
                      $data->remittanceSequence,
                      $data->remittanceSequenceReset,
                      $data->returnSequence,
                      $data->returnSequenceReset,
                      $data->invoiceSequence,
                      $data->invoiceSequenceReset,
                      $data->seqLimit);

        $ok = $db->execute(SAGU::prepare($sql,$args));

        return $ok;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankAccountContract($data)
    {
        $sql = 'UPDATE finBankAccountContract
                   SET description             = ?,
                       collection              = ?,
                       wallet                  = ?,
                       variation               = ?,
                       accord                  = ?,
                       collectionTypeId        = ?,
                       collectionBranch        = ?,
                       remittanceSequence      = ?,
                       remittanceSequenceReset = ?,
                       returnSequence          = ?,
                       returnSequenceReset     = ?,
                       invoiceSequence         = ?,
                       invoiceSequenceReset    = ?,
                       seqLimit                   = ?
                 WHERE bankContractId          = ?
                   AND bankAccountId           = ?';

        $args = array($data->description,
                      $data->collection,
                      $data->wallet,
                      $data->variation,
                      $data->accord,
                      $data->collectionTypeId,
                      $data->collectionBranch,
                      $data->remittanceSequence,
                      $data->remittanceSequenceReset,
                      $data->returnSequence,
                      $data->returnSequenceReset,
                      $data->invoiceSequence,
                      $data->invoiceSequenceReset,
                      $data->seqLimit,
                      $data->bankContractId,
                      $data->bankAccountId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankAccountContract($bankContractId, $bankAccountId)
    {
        $sql = 'DELETE FROM finBankAccountContract
                      WHERE bankContractId = ?
                        AND bankAccountId  = ?';

        $args = array($bankContractId);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,array($bankContractId, $bankAccountId)));

        return $result;
    }

}

?>
