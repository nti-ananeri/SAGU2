<?php
/**
 *
 * This file handles the connection and actions for finOperation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 17/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finOperation table
 **/
class BusinessFinanceBusOperation extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listOperation($operation = null, $orderById = false)
    {
        $sql = 'SELECT A.operationId,
                       A.description
                  FROM finOperation A ';
        
        if (in_array(strtoupper($operation), array('C', 'D')))
        {
            $sql.= ' WHERE operationTypeId   = ? ';
            $args[] = $operation;
        }
        if ($orderById == false)
        {
            $sql.= ' ORDER BY A.description';
        }
        else
        {
            $sql.= ' ORDER BY A.operationId';
        }

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
    
        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDefaultOperations($data = '')
    {
        $sql = 'SELECT A.operationId,
                       A.description
                  FROM finOperation A ';
        $where = '';
        if (in_array(strtoupper($data->operationTypeId), array('C', 'D')))
        {
            $where .= '    AND operationTypeId = ? ';
            $args[] = $data->operationTypeId;
        }
        if( strlen((string)$data->operationId) > 0 )
        {
            $where .= '    AND operationId in ('.$data->operationId.')';
            //$args[] = $data->operationId;
        }
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE '.substr($where,8);
        }
        $sql .= ' ORDER BY A.description';
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
    
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $operationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOperation($operationId)
    {
        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.bankAccountId,
                       A.bankContractId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.isExtinct,
                       A.isCounterMovement,
                       A.operationGroupId,
                       A.receivableOrPayable
                  FROM finOperation A
                 WHERE A.operationId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$operationId));
        //$db->close();

        $operation = new FinOperation();

        list ( $operation->operationId,
               $operation->description,
               $operation->operationTypeId,
               $operation->bankAccountId,
               $operation->bankContractId,
               $operation->userName,
               $operation->dateTime,
               $operation->isExtinct,
               $operation->isCounterMovement,
               $operation->operationGroupId,
               $operation->receivableOrPayable) = $result[0];

        return $operation; 
    }

 
    /**
     * Get the description for specified operation
     *
     * @param $operationId (int): Primary key for operation
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @return (string): The description operation
     **/
    public function getOperationDescription($operationId)
    {
        $sql = ' SELECT description
                   FROM finOperation
                  WHERE operationId = ? ';

        $db = $this->getDatabase();
        $args = array($operationId);
        $ret = $db->query(SAGU::prepare($sql, $args));
        return $ret[0][0];

    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial word search with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchOperation($data)
    {
        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.isExtinct,
                       A.isCounterMovement,
                       A.operationGroupId,
                       B.description,
                       A.receivableOrPayable
                  FROM finOperation A
             LEFT JOIN finBankAccountContract B 
                 USING (bankContractId, bankAccountId)';

        $where = '';
        unset($args);
        if ( strlen((string)$data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen((string)$data->operationGroupId) > 0 )
        {
            $where .= '    AND   A.operationGroupId = ?';
            $args[] = $data->operationGroupId;
        }
        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description.'%';
        }
        if ( strlen((string)$data->operationTypeId) > 0 )
        {
            $where .= '    AND   A.operationTypeId ILIKE ?';
            $args[] = $data->operationTypeId.'%';
        }
        if ( strlen((string)$data->receivableOrPayable) > 0 )
        {
            $where .= '    AND   A.receivableOrPayable = ?';
            $args[] = $data->receivableOrPayable;
        }

        if ( strlen((string)$data->isExtinct) > 0 )
        {
            $where .= '    AND   A.isExtinct = ?';
            $args[] = $data->isExtinct;
        }
        if ( strlen((string)$data->isCounterMovement) > 0 )
        {
            $where .= '    AND   A.isCounterMovement = ?';
            $args[] = $data->isCounterMovement;
        }

        if ( strlen((string)$data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
           if ( strlen((string)$data->bankContractId) > 0 )
        {
            $where .= '    AND   A.bankContractId = ?';
            $args[] = $data->bankContractId;
        }
        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.description';

            $db = $this->getDatabase();
            $sql = SAGU::prepare($sql,$args);
            $result = $db->query($sql);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertOperation($data)
    {
        $db = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_operationId\') FROM (select 1) a';
        $retval = $db->query($sql);

        unset($operationId);
        if ( isset($retval) )
        {
            $operationId = $retval[0][0];
            $sql = 'INSERT INTO finOperation
                                (operationId,
                                 description,
                                 operationTypeId,
                                 isExtinct,
                                 isCounterMovement,
                                 operationGroupId,
                                 bankAccountId,
                                 bankContractId,
                                 receivableOrPayable)
                         VALUES (?,?,?,?,?,?,?,?,?)';

            $args = array($operationId,
                          $data->description,
                          $data->operationTypeId,
                          $data->isExtinct,
                          $data->isCounterMovement,
                          $data->operationGroupId,
                          $data->bankAccountId,
                          $data->bankContractId,
                          $data->receivableOrPayable);
            if ( ! $db->execute(SAGU::prepare($sql,$args)) )
            {
                unset($operationId);
            }
        }

        //$this->checkError($db);
        //$db->close();

        return $operationId;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOperation($data)
    {
        $sql = 'UPDATE finOperation
                   SET description         = ?,
                       operationTypeId     = ?,
                       isExtinct           = ?,
                       isCounterMovement   = ?,
                       operationGroupId    = ?,
                       bankAccountId       = ?,
                       bankContractId      = ?,
                       receivableOrPayable = ?
                 WHERE operationId         = ?';

        $args = array($data->description,
                      $data->operationTypeId,
                      $data->isExtinct,
                      $data->isCounterMovement,
                      $data->operationGroupId,
                      $data->bankAccountId,
                      $data->bankContractId,
                      $data->receivableOrPayable,
                      $data->operationId);
        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$this->checkError($db);
        //$db->close();
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $operationId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteOperation($operationId)
    {
        $sql = 'DELETE FROM finOperation
                      WHERE operationId = ?';

        $args = array($operationId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));
        //$this->checkError($db);
        //$db->close();

        return $result;
    }

    /**
     * List all operation types
     *
     * @param $type (default 0) (int): Default type for passing parameters
     *
     * @return (array): An array containing all operation types
     *
     **/
    public function listOperationTypeId($type = 0)
    {
        $module = MIOLO::GetCurrentModule(); 
        if ($type == 0)
        {
           $data = array('C'=>_M('Credit', $module),
                         'D'=>_M('Debit', $module));
        }
        elseif ($type == 1)
        {
            $data = array(array(_M('Credit', $module), 'C'),
                          array(_M('Debit', $module), 'D'));
        }
        return $data;
    }

    
}

?>
