<?php
/**
 *
 * This file handles the connection and actions for finDefaultOperations table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * 
 * @since
 * Class created on 06/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finDefaultOperations table
 **/
class BusinessFinanceBusDefaultOperations extends MBusiness
{
    private $db;
    public $generationData;

    /**
     * Class constructor to instantiate a new database connection. This makes possible to use transactions
     **/
    function BusinessFinanceBusDefaultOperations()
    {
        $this->db = $this->getDatabase();
    }

    /** 
     *
    **/
    function addDatabaseTransaction()
    {

    }



    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($dbname=null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);

    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDefaultOperations()
    {
    
    }

    /**
     * Return a specific record from the database
     *
     * @param $incomeForecastId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getDefaultOperations()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql = ' SELECT addCurricularComponentOperation,
                        cancelCurricularComponentOperation,
                        protocolOperation,
                        interestOperation,
                        discountOperation,
                        libraryFineOperation,
                        closeIncomeForecastOperation,
                        enrollOperation,
                        paymentOperation,
                        agreementOperation,
                        selectiveProcessTaxOperation,
                        bankTaxOperation,
                        bankClosingTaxOperation,
                        enrollTaxOperation,
                        userName,
                        TO_CHAR(dateTime, \'' . MASK_DATE . '\'),
                        agreementOperationToNewInvoice,
                        libraryFineAllowanceOperation
                   FROM finDefaultOperations ';
                   
        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        $return = $return[0];
        if (is_array($return))
        {
            $defaultOperations = new finDefaultOperations();
            $defaultOperations->addCurricularComponentOperation    = $return[0];
            $defaultOperations->cancelCurricularComponentOperation = $return[1];
            $defaultOperations->protocolOperation                  = $return[2];
            $defaultOperations->interestOperation                  = $return[3];
            $defaultOperations->discountOperation                  = $return[4];
            $defaultOperations->libraryFineOperation               = $return[5];
            $defaultOperations->closeIncomeForecastOperation       = $return[6];
            $defaultOperations->enrollOperation                    = $return[7];
            $defaultOperations->paymentOperation                   = $return[8];
            $defaultOperations->agreementOperation                 = $return[9];
            $defaultOperations->selectiveProcessTaxOperation       = $return[10];
            $defaultOperations->bankTaxOperation                   = $return[11];
            $defaultOperations->bankClosingTaxOperation            = $return[12];
            $defaultOperations->enrollTaxOperation                 = $return[13];
            $defaultOperations->userName                           = $return[14];
            $defaultOperations->dateTime                           = $return[15];
            $defaultOperations->agreementOperationToNewInvoice     = $return[16];
            $defaultOperations->libraryFineAllowanceOperation      = $return[17];

            return $defaultOperations;
       }
       else
       {
            $MIOLO->Error(_M('Couldn\'t get default operations. Please, verify if there are registered on register session.', $module));
       }
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchDefaultOperations($data)
    {

        $sql = ' SELECT A.addCurricularComponentOperation,
                        A.cancelCurricularComponentOperation,
                        A.protocolOperation,
                        A.interestOperation,
                        A.discountOperation,
                        A.libraryFineOperation,
                        A.closeIncomeForecastOperation,
                        A.enrollOperation,
                        A.paymentOperation,
                        A.agreementOperation,
                        A.bankTaxOperation,
                        A.bankClosingTaxOperation,
                        A.enrollTaxOperation,
						A.selectiveProcessTaxOperation,
                        A.agreementOperationToNewInvoice,
                        A.libraryFineAllowanceOperation
                   FROM finDefaultOperations A';

        $where = '';
        unset($args);
        if ( strlen((string)$data->addCurricularComponentOperation) > 0 )
        {
            $where .= '    AND   A.addCurricularComponentOperation = ?';
            $args[] = $data->addCurricularComponentOperation;
        }
        if ( strlen((string)$data->cancelCurricularComponentOperation) > 0 )
        {
            $where .= '    AND   A.cancelCurricularComponentOperation = ?';
            $args[] = $data->cancelCurricularComponentOperation;
        }
        if ( strlen((string)$data->protocolOperation) > 0 )
        {
            $where .= '    AND   A.protocolOperation = ?';
            $args[] = $data->protocolOperation;
        }
        if ( strlen((string)$data->interestOperation) > 0 )
        {
            $where .= '    AND   A.interestOperation = ?';
            $args[] = $data->interestOperation;
        }
        if ( strlen((string)$data->discountOperation) > 0 )
        {
            $where .= '    AND   A.discountOperation = ?';
            $args[] = $data->discountOperation;
        }
        if ( strlen((string)$data->libraryFineOperation) > 0 )
        {
            $where .= '    AND   A.libraryFineOperation = ?';
            $args[] = $data->libraryFineOperation;
        }
        if ( strlen((string)$data->closeIncomeForecastOperation) > 0 )
        {
            $where .= '    AND   A.closeIncomeForecastOperation = ?';
            $args[] = $data->closeIncomeForecastOperation;
        }
        if ( strlen((string)$data->enrollOperation) > 0 )
        {
            $where .= '    AND   A.enrollOperation = ?';
            $args[] = $data->enrollOperation;
        }
        if ( strlen((string)$data->paymentOperation) > 0 )
        {
            $where .= '    AND   A.paymentOperation = ?';
            $args[] = $data->paymentOperation;
        }
        if ( strlen((string)$data->agreementOperation) > 0 )
        {
            $where .= '    AND   A.agreementOperation = ?';
            $args[] = $data->agreementOperation;
        }
        if ( strlen((string)$data->bankTaxOperation) > 0 )
        {
            $where .= '    AND   A.bankTaxOperation = ?';
            $args[] = $data->bankTaxOperation;
        }
        if ( strlen((string)$data->bankClosingTaxOperation) > 0 )
        {
            $where .= '    AND   A.bankClosingTaxOperation = ?';
            $args[] = $data->bankClosingTaxOperation;
        }
        if ( strlen((string)$data->selectiveProcessTaxOperation) > 0 )
        {
            $where .= '    AND   A.selectiveProcessTaxOperation = ?';
            $args[] = $data->selectiveProcessTaxOperation;
        }
        if ( strlen((string)$data->agreementOperationToNewInvoice) > 0 )
        {
            $where .= '    AND   A.agreementOperationToNewInvoice = ?';
            $args[] = $data->agreementOperationToNewInvoice;
        }
        if ( strlen((string)$data->libraryFineAllowanceOperation) > 0 )
        {
            $where .= '    AND   A.libraryFineAllowanceOperation = ?';
            $args[] = $data->libraryFineAllowanceOperation;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.addCurricularComponentOperation';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
          //  $db->close();
        }

        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDefaultOperations($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finDefaultOperations
                            (addCurricularComponentOperation,
                            cancelCurricularComponentOperation,
                            protocolOperation,
                            interestOperation,
                            discountOperation,
                            libraryFineOperation,
                            closeIncomeForecastOperation,
                            enrollOperation,
                            paymentOperation, 
                            agreementOperation,
                            bankTaxOperation,
                            bankClosingTaxOperation,
                            enrollTaxOperation,
							selectiveProcessTaxOperation,
                            agreementOperationToNewInvoice,
                            libraryFineAllowanceOperation)
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array  ( $data->addCurricularComponentOperation,
                         $data->cancelCurricularComponentOperation,
                         $data->protocolOperation,
                         $data->interestOperation,
                         $data->discountOperation,
                         $data->libraryFineOperation,
                         $data->closeIncomeForecastOperation,
                         $data->enrollOperation,
                         $data->paymentOperation,
                         $data->agreementOperation,
                         $data->bankTaxOperation,
                         $data->bankClosingTaxOperation,
                         $data->enrollTaxOperation,
						 $data->selectiveProcessTaxOperation,
                         $data->agreementOperationToNewInvoice,
                         $data->libraryFineAllowanceOperation
                       );
        
        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateDefaultOperations($data)
    {
        $sql = 'UPDATE finDefaultOperations
                   SET addCurricularComponentOperation    = ?,
                       cancelCurricularComponentOperation = ?,
                       protocolOperation       = ?,
                       interestOperation       = ?,
                       discountOperation       = ?,
                       libraryFineOperation    = ?,
                       closeIncomeForecastOperation       = ?,
                       enrollOperation         = ?,
                       paymentOperation        = ?,
                       agreementOperation      = ?,
                       bankTaxOperation        = ?,
                       bankClosingTaxOperation = ?,
                       enrollTaxOperation      = ?,
					   selectiveProcessTaxOperation = ?,
                       agreementOperationToNewInvoice = ?,
                       libraryFineAllowanceOperation = ?
                 WHERE 1 = 1';

        $args = array(  $data->addCurricularComponentOperation,
                        $data->cancelCurricularComponentOperation,
                        $data->protocolOperation,
                        $data->interestOperation,
                        $data->discountOperation,
                        $data->libraryFineOperation,
                        $data->closeIncomeForecastOperation,
                        $data->enrollOperation,
                        $data->paymentOperation,
                        $data->agreementOperation,
                        $data->bankTaxOperation,
                        $data->bankClosingTaxOperation,
                        $data->enrollTaxOperation,
						$data->selectiveProcessTaxOperation,
                        $data->agreementOperationToNewInvoice,
                        $data->libraryFineAllowanceOperation
                        );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        return $result;
    }
}
?>
