<?php
/**
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusInvoice.class', 'finance');

/**
 * Class to manipulate the finPayableInvoice table
 **/
class BusinessFinanceBusPayableInvoice extends BusinessFinanceBusInvoice
{
    /**
     * Class constructor to instantiate a new database connection. This makes possible to use transactions
     **/
    function BusinessFinanceBusPayableInvoice()
    {
        parent::__construct();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPayableInvoice()
    {
    }

    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPayableInvoice($invoiceId)
    {
        $payableInvoice = $this->getInvoice($invoiceId);


        $sql = 'SELECT TO_CHAR(A.payableDate,\'' . MASK_DATE . '\') AS payableDate
                  FROM finPayableInvoice A
                 WHERE A.invoiceId = ?';
        $result = $this->db->query(SAGU::prepare($sql, $invoiceId));

        list ( $payableInvoice->payableDate ) = $result[0];

        return $payableInvoice; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPayableInvoice($data)
    {
        $sql = 'SELECT A.invoiceId,
                       A.personId,
                       A.accountSchemeId,
                       A.costCenterId,
                       A.courseId,
                       A.courseVersion,
                       A.unitId,
                       A.parcelNumber,
                       TO_CHAR(A.emissionDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.maturityDate,\'' . MASK_DATE . '\'),
                       ROUND(A.value, \'' . REAL_ROUND_VALUE . '\'),
                       A.policyId,
                       A.bankInvoiceId,
                       A.automaticDebit,
                       A.comments,
                       A.incomeSourceId,
                       A.bankAccountId,
                       A.sagu1InvoiceId,
                       TO_CHAR(A.payableDate,\'' . MASK_DATE . '\')
                  FROM finPayableInvoice A';

        $where = '';
        unset($args);
        if ( strlen((string)$data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen((string)$data->personId) > 0 )
        {
            $where .= '    AND   A.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen((string)$data->accountSchemeId) > 0 )
        {
            $where .= '    AND   A.accountSchemeId = ?';
            $args[] = $data->accountSchemeId;
        }
        if ( strlen((string)$data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND   A.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen((string)$data->parcelNumber) > 0 )
        {
            $where .= '    AND   A.parcelNumber = ?';
            $args[] = $data->parcelNumber;
        }
        if ( strlen((string)$data->emissionDate) > 0 )
        {
            $where .= '    AND   A.emissionDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->emissionDate;
        }
        if ( strlen((string)$data->maturityDate) > 0 )
        {
            $where .= '    AND   A.maturityDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->maturityDate;
        }
        if ( strlen((string)$data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen((string)$data->policyId) > 0 )
        {
            $where .= '    AND   A.policyId = ?';
            $args[] = $data->policyId;
        }
        if ( strlen((string)$data->bankInvoiceId) > 0 )
        {
            $where .= '    AND   A.bankInvoiceId = ?';
            $args[] = $data->bankInvoiceId;
        }
        if ( strlen((string)$data->automaticDebit) > 0 )
        {
            $where .= '    AND   A.automaticDebit = ?';
            $args[] = $data->automaticDebit;
        }
        if ( strlen((string)$data->comments) > 0 )
        {
            $where .= '    AND   A.comments ILIKE ?';
            $args[] = $data->comments;
        }
        if ( strlen((string)$data->incomeSourceId) > 0 )
        {
            $where .= '    AND   A.incomeSourceId = ?';
            $args[] = $data->incomeSourceId;
        }
        if ( strlen((string)$data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen((string)$data->sagu1InvoiceId) > 0 )
        {
            $where .= '    AND   A.sagu1InvoiceId = ?';
            $args[] = $data->sagu1InvoiceId;
        }
        if ( strlen((string)$data->payableDate) > 0 )
        {
            $where .= '    AND   A.payableDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->payableDate;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                    ' ORDER BY A.maturityDate';

            $result = $this->db->query(SAGU::prepare($sql,$args));
        }

        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return The new generated invoice id if succed, otherwise FALSE
     *
     **/
    public function insertPayableInvoice($data)
    {
        $invoiceId = $this->insertInvoice($data);

        if ( $invoiceId !== false )
        {
            unset($field, $prepareValue, $dataValue);

            $field[] = 'invoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $invoiceId;
            $field[] = 'personId';
            $prepareValue[] = '?';
            $dataValue[] = $data->personId;
            $field[] = 'accountSchemeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->accountSchemeId;
            $field[] = 'costCenterId';
            $prepareValue[] = '?';
            $dataValue[] = $data->costCenterId;
            $field[] = 'courseId';
            $prepareValue[] = '?';
            $dataValue[] = $data->courseId;
            $field[] = 'courseVersion';
            $prepareValue[] = '?';
            $dataValue[] = $data->courseVersion;
            $field[] = 'unitId';
            $prepareValue[] = '?';
            $dataValue[] = $data->unitId;
            $field[] = 'parcelNumber';
            $prepareValue[] = '?';
            $dataValue[] = $data->parcelNumber;
            $field[] = 'emissionDate';
            if ( is_null($data->emissionDate) )
            {
                $prepareValue[] = 'now()';
            }
            else
            {
                $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
                $dataValue[] = $data->emissionDate;
            }
            $field[] = 'maturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
            $dataValue[] = $data->maturityDate;
            $field[] = 'value';
            $prepareValue[] = '?';
            $dataValue[] = $data->value;
            $field[] = 'policyId';
            $prepareValue[] = '?';
            $dataValue[] = $data->policyId;
            $field[] = 'bankInvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankInvoiceId;
            $field[] = 'automaticDebit';
            $prepareValue[] = '?';
            $dataValue[] = $data->automaticDebit;
            $field[] = 'comments';
            $prepareValue[] = '?';
            $dataValue[] = $data->comments;
            $field[] = 'incomeSourceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->incomeSourceId;
            $field[] = 'bankAccountId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankAccountId;
			$field[] = 'bankContractId';
			$prepareValue[] = '?';
			$dataValue[] = $data->bankContractId;
            $field[] = 'sagu1InvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->sagu1InvoiceId;
            $field[] = 'payableTypeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->payableTypeId;
            $field[] = 'payableDate';
            $prepareValue[] = 'TO_DATE(?,\'' . MASK_DATE . '\')';
            $dataValue[] = $data->payableDate;

            $sql = 'INSERT INTO finPayableInvoice
                                (';
            for ( $i=0; $i<count($field); $i++ )
            {
                $sql .= $field[$i] . ',';
            }
            $sql = substr($sql, 0, strlen((string)$sql)-1) . ')
                         VALUES (';
            for ( $i=0; $i<count($prepareValue); $i++ )
            {
                $sql .= $prepareValue[$i] . ',';
            }
            $sql = substr($sql, 0, strlen((string)$sql)-1) . ')';

            if ( ! $this->db->execute(SAGU::prepare($sql, $dataValue)) )
            {
                $invoiceId = false;
            }
        }

        return $invoiceId;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePayableInvoice($data)
    {
        $this->updateInvoice($data);

        $sql = 'UPDATE finPayableInvoice
                   SET personId        = ?,
                       accountSchemeId = ?,
                       costCenterId    = ?,
                       courseId        = ?,
                       courseVersion   = ?,
                       unitId          = ?,
                       parcelNumber    = ?,
                       emissionDate    = TO_DATE(?,\'' . MASK_DATE . '\'),
                       maturityDate    = TO_DATE(?,\'' . MASK_DATE . '\'),
                       value           = ?,
                       policyId        = ?,
                       bankInvoiceId   = ?,
                       automaticDebit  = ?,
                       comments        = ?,
                       incomeSourceId  = ?,
                       bankAccountId   = ?,
                       sagu1InvoiceId  = ?,
                       payableDate     = TO_DATE(?,\'' . MASK_DATE . '\')
                 WHERE invoiceId = ?';

        unset($args);
        $args[] = $data->personId;
        $args[] = $data->accountSchemeId;
        $args[] = $data->costCenterId;
        $args[] = $data->courseId;
        $args[] = $data->courseVersion;
        $args[] = $data->unitId;
        $args[] = $data->parcelNumber;
        $args[] = $data->emissionDate;
        $args[] = $data->maturityDate;
        $args[] = $data->value;
        $args[] = $data->policyId;
        $args[] = $data->bankInvoiceId;
        $args[] = $data->automaticDebit;
        $args[] = $data->comments;
        $args[] = $data->incomeSourceId;
        $args[] = $data->bankAccountId;
        $args[] = $data->sagu1InvoiceId;
        $args[] = $data->payableDate;
        $args[] = $data->invoiceId;

        $sqls = SAGU::prepare($sql, $args); 
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $retVal = $this->db->execute($sqls[$i]);
        }

        return $retVal;
    }

    /**
     * Delete a record
     *
     * @param $invoiceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePayableInvoice($invoiceId)
    {
        $this->deleteInvoice($invoiceId);

        $sql = 'DELETE FROM finPayableInvoice
                      WHERE invoiceId = ?';

        $retVal = $this->db->execute(SAGU::prepare($sql, $invoiceId));

        return $retVal;
    }


   /**
    * Generate a set of individual invoices 
    *
    * @param: $data (object): Invoices and entries 
    *
    * @return: True if runs otherwise false
    *
    */
    public function generateIndividualInvoices($data)
    {
        $keepGoing = true;
        $this->db->execute('BEGIN TRANSACTION');
        if ( is_array($data) )
        {
            foreach ( $data as $invoices )
            {
                $invoiceId = $this->insertPayableInvoice($invoices->data);
                if ( is_array($invoices->entries) && (strlen((string)$invoiceId)>0) )
                {
                    foreach ( $invoices->entries as $entry )
                    {
                        $entry->invoiceId = $invoiceId;
                        $keepGoing = $this->insertEntry($entry);
                        if ($keepGoing !== true)
                        {
                            break 4;
                        }

                        /* se tiver patrocinador ou financiador, insere o titulo pra ele */
                        if ( $entry->haveSupporter == true )
                        {

                            $supporterInvoice = clone($invoices);
                            $supporterEntry   = clone($entry);

                            $supporterInvoice->data->personId = $entry->supporterId;
                            $supporterEntry->operationId      = $entry->supporterOperationId;
                            $supporterInvoice->data->accountSchemeId = $entry->supporterAccountSchemeId;

                            $supporterInvoiceId               = $this->insertPayableInvoice($supporterInvoice->data);
                            $supporterEntry->invoiceId        = $supporterInvoiceId;

                            $keepGoing = $this->insertEntry($supporterEntry);
                            if ( $keepGoing !== true )
                            {
                                break 4;
                            }
                        }

                    }
                }
                else
                {
                    $keepGoing = false;
                }
                $this->updateNominalValue($invoiceId);
            }
        }
        else
        {
            $keepGoing = false;
        }
        $this->db->execute($keepGoing ? 'COMMIT' : 'ROLLBACK');
        return $keepGoing;
    }

   /**
    * Update the nominal value
    *
    * @param $invoiceId (int): The invoice primary key to update the nominal value
    *
    * @returns (boolean): True if do, otherwise false
    *
    */
    public function updateNominalValue($invoiceId)
    {
        $sql = ' UPDATE finPayableInvoice
                    SET value     = balance(invoiceId)
                  WHERE invoiceId = ? ';

        $args = array($invoiceId);
        $ret = $this->db->execute(SAGU::prepare($sql, $args));
        return $ret;
    }

}

?>
