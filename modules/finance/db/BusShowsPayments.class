<?php
/**
 *
 * This file handles the connection and actions for finShowsPayments table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finShowsPayments table
 **/
class BusinessFinanceBusShowsPayments extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getShowsPayments($personId)
    {
        $db     = $this->getDatabase();
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $sql = 'SELECT A.invoiceId,
                       TO_CHAR(A.maturityDate, \'' . MASK_DATE . '\'),
                       A.courseId||\' - \'||A.courseVersion,
                       (SELECT AA.shortName 
                          FROM acdCourse AA
                         WHERE AA.courseId =A.courseId) AS shortName,
                       B.operationId||\' - \'||(SELECT AB.description 
                                                  FROM finOperation AB
                                                 WHERE AB.operationId = B.operationId ) AS description,
                       TO_CHAR(B.entryDate, \'' . MASK_DATE . '\'),
                       ROUND(A.value, \''.REAL_ROUND_VALUE.'\' ),
                       ROUND(B.value, \''.REAL_ROUND_VALUE.'\' )
                  FROM finReceivableInvoice A
            INNER JOIN finEntry B
                    ON (B.invoiceId = A.invoiceId)
            INNER JOIN finOperation C
                    ON (B.operationId = C.operationId)
                 WHERE A.personId = ?
                   AND C.operationGroupId = \'' . PAYMENT_OPERATION_GROUP_ID . '\'
              ORDER BY A.maturityDate DESC  ';
        // Obtém os dados conforme grupo de operações relativo a pagamento   
        $args = array($personId);
		$sql = SAGU::prepare($sql, $args);
		MIOLO::vd($sql);
        $result = $db->query($sql);
        if (is_array($result[0]))
        {
            foreach ($result as $x => $res)
            {
                $str           = $res[3];
                $path          = $MIOLO->getActionURL($module, 'html:images:infoLittle.png');
                $string        = new MImage('imgCourseInfo'.$x, $str, $path);
                $result[$x][2].= $string->generate();

            }
        }
        return $result;
    }
}

?>
