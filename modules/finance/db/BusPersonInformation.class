<?php
/**
 *
 * This file handles the connection and actions for finPersonInformation table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the finPersonInformation table
 **/
class BusinessFinanceBusPersonInformation extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
         *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPersonInformation($type = 0)
    {
        if ($type == 0 )
        {
            $sql = '   SELECT personId,
                              information
                         FROM finPersonInformation
                     ORDER BY personId ';
        }
        else
        {
            $sql = '   SELECT information,
                              personId
                         FROM finPersonInformation
                     ORDER BY personId ';
        }
        $db = $this->getDatabase();

        $return = $db->query($sql);

        return $return;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPersonInformation($personId)
    {

        $sql = 'SELECT A.personId,
                       A.information,
                       B.name
                  FROM finPersonInformation A
             LEFT JOIN ONLY basPerson B 
                    ON (B.personId = A.personId)
                 WHERE A.personId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));
        $personInformation = new FinPersonInformation();

        list ( $personInformation->personId,
               $personInformation->information,
               $personInformation->name ) = $result[0];

        return $personInformation;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPersonInformation($data)
    {
        $sql = 'INSERT INTO finPersonInformation
                            (personId,
                             information)
                     VALUES (?,
                             ?)';

        $args = array( 
                       $data->personId,
                       $data->information
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePersonInformation($data)
    {
        $sql = 'UPDATE finPersonInformation
                   SET information  = ?
                 WHERE personId = ?';

        $args = array(
                       $data->information,
                       $data->personId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePersonInformation($personId)
    {
        $sql = 'DELETE FROM finPersonInformation
                      WHERE personId = ?';

        $pk = array(
                     $personId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

}

?>
