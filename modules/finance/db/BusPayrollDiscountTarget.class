<?php
/**
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the Invoice table
 **/
class BusinessFinanceBusPayrollDiscountTarget extends MBusiness
{
    protected $db;

    function BusinessFinanceBusPayrollDiscountTarget()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoice()
    {
    }



    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPayrollDiscountTarget($contractId)
    {
        $sql = 'SELECT A.contractId,
                       A.ispayrolldiscount,
                       A.employeeid,
                       A.userName,
                       A.dateTime,
                       A.ipAddress
                  FROM finPayrollDiscountTarget A
                 WHERE A.contractId = ?';

                       //A.TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),

        $args = array($contractId);
        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));
       //$db->close();

        $payrollDiscountTarget = new FinPayrollDiscountTarget();

        list ( 
               $payrollDiscountTarget->contractId,
               $payrollDiscountTarget->isPayrollDiscount,
               $payrollDiscountTarget->employeeId,
               $payrollDiscountTarget->userName,
               $payrollDiscountTarget->dateTime,
               $payrollDiscountTarget->ipAddress ) = $result[0];

         return $payrollDiscountTarget;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPayrollDiscountTarget($data)
    {
    // Not Implemented
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return If succed, return the invoice id. Otherwise return FALSE.
     *
     **/
    public function insertPayrollDiscountTarget($data)
    {

           $sql = 'INSERT INTO finPayrollDiscountTarget
                                (contractId,
                                 employeeId, 
                                 isPayrollDiscount )
                        VALUES ( ?, ?, ?)';

           $args = array( $data->contractId,
                          $data->employeeId,
                          $data->isPayrollDiscount);

           $db     = $this->getDatabase();

           if( ! $db->execute(SAGU::prepare($sql, $args)) )
           {
                $contractId = false;
           }
           else
           {
                $contractId = $data->contractId;
           }
        return $contractId;
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePayrollDiscountTarget($data)
    {
        $sql = 'UPDATE finPayrollDiscountTarget
                   SET employeeId        = ?,
                       isPayrollDiscount = ?
                 WHERE contractId = ?';
        unset($args);
        $args[] = $data->employeeId;
        $args[] = $data->isPayrollDiscount;
        $args[] = $data->contractId;

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $invoiceId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePayrollDiscountTarget($invoiceId)
    {
        $sql = 'DELETE FROM ONLY finPayrollDiscountTarget
                      WHERE contractId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $invoiceId));

        return $result;
    }

}
?>
