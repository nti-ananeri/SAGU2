<?php
/**
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusFile.class', 'basic');


/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusFile extends BusinessBasicBusFile
{


    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listFinanceFile()
    {
        $sql = 'SELECT A.fileId,
                       A.fileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finFile A
                 WHERE A.isProcessed = \'' . DB_FALSE . '\'
                   AND A.fileType = \''. 'T' . '\'
                   AND A.fileName ilike \''. '%.csv' .'\'
                 ORDER BY 1, 2 ';

        $db = $this->getDatabase();
        // $sqls = SAGU::prepare($sql);

        $result = $db->query($sql);


        return $result;
    }

  /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFinanceFileByName($fileName)
    {
        
        $sql = 'SELECT A.fileId,
                       A.fileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finFile A
                 WHERE A.fileName = ?
                 LIMIT 1     ';

        $db     = $this->getDatabase();
        $sqls   = SAGU::prepare($sql,$fileName);
        $result = $db->query($sqls);

        $file = new FinFile();

        list ( $file->fileId,
               $file->fileName,
               $file->bankAccountId,
               $file->fileType,
               $file->inputOrOutput,
               $file->isProcessed,
               $file->userName,
               $file->dateTime ) = $result[0];

        return $file;
    }


  /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function searchFinanceFile($data)
    {
        
        $sql = 'SELECT A.fileId,
                       A.fileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finFile A';
        $where = '';
        unset($args);
        if ( strlen((string)$data->fileId) > 0 )
        {
            $where .= '    AND   A.fileId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen((string)$data->fileName) > 0 )
        {
            $where .= '    AND   A.fileName ILIKE ?';
            $args[] = $data->fileName;
        }
        if ( strlen((string)$data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId ILIKE ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen((string)$data->fileType) > 0 )
        {
            $where .= '    AND   A.fileType ILIKE ?';
            $args[] = $data->fileType;
        }
        if ( strlen((string)$data->inputOrOutput) > 0 )
        {
            $where .= '    AND   A.inputOrOutput ILIKE ?';
            $args[] = $data->inputOrOutput;
        }
        if ( strlen((string)$data->isProcessed) > 0 )
        {
            $where .= '    AND   A.isProcessed = ?';
            $args[] = $data->isProcessed;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                    ' ORDER BY A.fileId, A.dateTime';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }


    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFinanceFile($fileId)
    {
        
        $sql = 'SELECT A.fileId,
                       A.fileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finFile A
                 WHERE A.fileId = ? ';

        $db     = $this->getDatabase();
        $sqls   = SAGU::prepare($sql,$fileId);
        $result = $db->query($sqls);

        $file = new FinFile();

        list ( $file->fileId,
               $file->fileName,
               $file->bankAccountId,
               $file->fileType,
               $file->inputOrOutput,
               $file->isProcessed,
               $file->userName,
               $file->dateTime ) = $result[0];

        return $file;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial words with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchBank($data)
    {

        return false;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertFinanceFile($data)
    {
        $fileData = $this->insertFile($data);
        if( strlen((string) $fileData->fileId ) > 0 )
        {
            $db = $this->getDatabase();
    
            $sql = 'INSERT INTO finFile
                                (fileId,
                                 fileName,
                                 bankAccountId,
                                 fileType,
                                 inputOrOutput,
                                 isProcessed)
                            VALUES (?,?,?,?,?,?)';
    
            $args = array($fileData->fileId,
                          $fileData->fileName,
                          $data->bankAccountId,
                          $data->fileType,
                          $data->inputOrOutput,
                          $data->isProcessed);
    
        }
        if( ! $return = $db->execute(SAGU::prepare($sql, $args)) )
        {
            return false;
        }

        return $fileData;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateFinanceFile($data)
    {
        $this->updateFile($data);

        $sql = 'UPDATE finFile
                   SET fileName      = ?,
                       bankAccountId = ?,
                       fileType      = ?,
                       inputOrOutput = ?,
                       isProcessed   = ? 
                 WHERE fileId        = ?';

        $args = array($data->fileName,
                      $data->bankAccount,
                      $data->fileType,
                      $data->inputOrOutput,
                      $data->isProcessed,
                      $data->fileId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFinanceFile($fileId)
    {
        $sql = 'DELETE FROM finFile
                      WHERE fileId = ?';

        $args = array($fileId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }


}

?>
