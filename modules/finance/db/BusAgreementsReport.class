<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 26/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
class BusinessFinanceBusAgreementsReport  extends Business
{
    public $db;

    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function __construct()
    {
        parent::__construct();
        $this->db = $this->getDatabase();
    }
    
    public function getAgreements($filters)
    {
        if ( count($filters) > 0 )
        {
            if( strlen((string)$filters->beginMonth) > 0 )
            {
                $month[0] = str_pad($filters->beginMonth,2,0,STR_PAD_LEFT);
            }
            if ( strlen((string)$filters->endMonth) > 0 )
            {
                $month[1] = str_pad($filters->endMonth,2,0,STR_PAD_LEFT);
            }
            if ( strlen((string)$filters->beginYear) > 0 )
            {
                $year[0] = $filters->beginYear;
            }
            if ( strlen((string)$filters->endYear) > 0 )
            {
                $year[1] = $filters->endYear;
            }
            if(count($month) == 2 && count($year) == 2 )
            {
                $dia = date('d',mktime(0,0,0,$month[1]+1,0, $year[1])) ;
                $beginDate = '01'.$month[0].$year[0];
                $endDate = $dia.$month[1].$year[1];
            }
            if(strlen((string)$filters->startDate) > 0 && strlen((string)$filters->endDate) > 0 )
            {
                $id = explode('/', $filters->startDate);
                $fd = explode('/', $filters->endDate);
                $beginDate = implode('', $id);
                $endDate = implode('', $fd);
            }
        }
        else
        {
            return;
        }
$sql = "select 
    extract(month from A.datetime) as mes,    
    extract(day from A.datetime) as dia,
    extract(year from A.datetime) as ano,
    A.datetime::time as hora,
    A.datetime as horario,
    A.username as usuario,
    A.ipaddress as enderecoIp,
    A.agreementId as codigoNegociacao,
    A.parcelsNumber as numeroDeParcelas,
    A.discount as desconto,
    A.balance as saldo,
    A.inputValue as valorEntrada,
    A.maturityDateInput as dataEntrada,
    C.personId as codigoPessoa,
    getPersonName(C.personId) as nomePessoa,
    B.invoiceId as codigoTitulo,
    D.description as origemTitulo,
    TO_CHAR(C.maturityDate, '".MASK_DATE."') as vencimentoTitulo,
            CASE 
                WHEN B.invoiceType = 'I' THEN 'Input'  ELSE 'Output' 
            END as tipoTitulo,
    ROUND((SELECT sum(value) FROM ONLY finEntry WHERE invoiceId = C.invoiceId AND operationId IN ( SELECT operationId FROM ONLY finOperation WHERE operationGroupId = 'P' )), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')) as valorPagoTitulo,
    ROUND((CASE WHEN B.invoiceType = 'I' THEN (SELECT sum(value) FROM ONLY finEntry WHERE operationId = (SELECT agreementoperation FROM findefaultoperations limit 1 ) AND invoiceId = C.invoiceId ) ELSE (SELECT sum(value) FROM ONLY finEntry WHERE operationId = (SELECT agreementoperationtonewinvoice FROM findefaultoperations limit 1 ) AND invoiceId = C.invoiceId ) END), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')) as valorGeradoOuNegociadoDoTitulo,
    COALESCE(ROUND((SELECT sum(value) FROM ONLY finEntry WHERE datetime::date >=  A.datetime::date and invoiceId = C.invoiceId AND operationId IN ( SELECT operationId FROM ONLY finOperation WHERE operationGroupId = 'D' )), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')),0) as descontosDoTitulo,
    COALESCE(ROUND((SELECT sum(value) FROM ONLY finEntry WHERE datetime::date >=  A.datetime::date and invoiceId = C.invoiceId AND operationId IN ( SELECT operationId FROM ONLY finOperation WHERE operationGroupId = 'I' )), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')),0) as incentivosDoTitulo,
    COALESCE(ROUND((SELECT sum(value) FROM ONLY finEntry WHERE datetime::date >=  A.datetime::date and invoiceId = C.invoiceId AND operationId IN ( SELECT operationId FROM ONLY finOperation WHERE operationGroupId = 'J' )), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')),0) as jurosDoTitulo,
    ROUND(balanceWithPoliciesDated(C.invoiceId, now()::date), (SELECT value::integer FROM basConfig WHERE parameter = 'REAL_ROUND_VALUE')) as saldoAtualDoTitulo,
    C.comments as comentarioDoTitulo,
    TO_CHAR((SELECT max(entryDate) FROM ONLY finEntry WHERE invoiceId = C.invoiceId AND operationId IN ( SELECT operationId FROM ONLY finOperation WHERE operationGroupId = 'P' AND NOT operationId = (SELECT agreementoperation FROM findefaultoperations limit 1) )), '". MASK_DATE . "') as dataPagamentoTitulo,
    ( CASE WHEN C.maturityDate = A.maturityDateInput AND B.invoiceType = 'O' THEN TRUE ELSE FALSE END) eParcelaDeEntrada,
    C.status,
    C.maturityDate,
    COALESCE(getPersonName(F.personId), 'O PROPRIO' ),
    H.content as cpf,
    G.content as cpfResponsavel
from 
    finAgreementHistory A LEFT JOIN
    finAgreementHistoryParcels B ON ( A.agreementId = B.agreementId ) LEFT JOIN
    ONLY finReceivableInvoice C ON ( C.invoiceId = B.invoiceId ) LEFT JOIN
    ONLY finIncomeSource D ON ( D.incomeSourceId = C.incomeSourceId ) LEFT JOIN
    ONLY basPhysicalPerson E ON ( E.personId = C.personId ) LEFT JOIN
    ONLY basPhysicalPerson F ON ( F.personId = E.responsableLegalId AND F.personId <> E.personId ) LEFT JOIN
    basDocument G ON ( G.personId = COALESCE(F.personId, E.personId) AND G.documentTypeId = (SELECT value::integer FROM basConfig WHERE parameter = 'CPF_CODE' ) ) LEFT JOIN
    basDocument H ON ( H.personId = C.personId AND H.documentTypeId = (SELECT value::integer FROM basConfig WHERE parameter = 'CPF_CODE' ) )
WHERE
    A.dateTime BETWEEN TO_DATE('".$beginDate."','ddmmyyyy') AND TO_DATE('".$endDate."','ddmmyyyy') 
ORDER BY
    A.datetime,
    B.agreementId,
    B.invoiceType,
    C.maturityDate
        ";
/*        $sql    ="
        SELECT 
            A.mes,
            A.dia,
            A.ano,
            A.hora,
            A.datetime,
            A.username,
            A.ipaddress,
            A.agreementId,
            A.parcelsNumber,
            A.discount,
            A.balance,
            A.inputValue,
            A.maturityDateInput,
            A.personId,
            A.name,
            C.invoiceId,
            D.description,
            TO_CHAR(C.maturityDate, '" . MASK_DATE . "'),
            CASE 
                WHEN B.invoiceType = 'I' THEN 'Input'  ELSE 'Output' 
            END as tipoTitulo,
            CASE 
                WHEN  SUM(F.value) > 0 THEN ROUND(SUM(F.value),2) ELSE 0
            END as pagamentos,
            CASE 
                WHEN  SUM(G.value) > 0 THEN ROUND(SUM(G.value),2) ELSE 0
            END as valorGerado,
            CASE 
                WHEN  SUM(H.value) > 0 THEN ROUND(SUM(H.value),2) ELSE 0
            END as descontos,
            CASE 
                WHEN  SUM(I.value) > 0 THEN ROUND(SUM(I.value),2) ELSE 0
            END as incentivos,
            CASE 
                WHEN  SUM(J.value) > 0 THEN ROUND(SUM(J.value),2) ELSE 0
            END as juros,
            CASE 
                WHEN C.invoiceid IS NULL THEN 0 ELSE balanceWithPoliciesDated(C.invoiceId,now()::date) 
            END as valorAtual,
            C.comments,
            TO_CHAR(max(F.entryDate), '" . MASK_DATE . "') as dataPamento,
            CASE 
                WHEN C.maturityDate = A.maturityDateInput AND B.invoiceType = 'O' THEN TRUE ELSE FALSE 
            END as parcelaDeEntrada,    
            C.status,
            C.maturitydate,
            COALESCE(FP2.name, 'O PROPRIO'),
            FPD1.content,
            FPD2.content
        FROM ( SELECT DISTINCT 
                extract(month from A.datetime) as mes,
                extract(day from A.datetime) as dia, 
                extract(year from A.datetime) as ano,
                to_char(A.datetime, 'hh:mm:ss') as hora,
                A.datetime,
                A.username,
                A.ipaddress,
                A.agreementid,
                A.parcelsnumber,
                A.discount,
                A.balance,
                A.inputValue,
                A.maturityDateInput,
                D.name,
                D.personId
            FROM 
                finagreementhistory A INNER JOIN
                finagreementhistoryparcels B ON ( B.agreementId = A.agreementId ) INNER JOIN 
                ONLY finInvoice C ON (C.invoiceId = B.invoiceId ) INNER JOIN
                ONLY basPerson D ON (C.personId = D.personId) 
            WHERE  
                A.dateTime BETWEEN TO_DATE('".$beginDate."','ddmmyyyy') AND TO_DATE('".$endDate."','ddmmyyyy') 
            GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
            ORDER BY 
                D.name 
            ) A INNER JOIN 
            finagreementhistoryparcels B ON (B.agreementId = A.agreementId) INNER JOIN
            ONLY finInvoice C ON ( C.invoiceId = B.invoiceId ) INNER JOIN
            finIncomeSource D ON (D.incomeSourceId = C.incomeSourceId ) INNER JOIN
            finEntry F ON ( F.invoiceId = C.invoiceId AND F.operationId IN (SELECT operationId FROM finOperation WHERE operationGroupId = 'P')) LEFT JOIN
	        finEntry G ON ( G.invoiceId = C.invoiceId AND G.operationId IN (SELECT operationId FROM finOperation WHERE operationGroupId = 'N')) LEFT JOIN
	        finEntry H ON ( H.invoiceId = C.invoiceId AND H.operationId IN (SELECT operationId FROM finOperation WHERE operationGroupId = 'D')) LEFT JOIN
	        finEntry I ON ( I.invoiceId = C.invoiceId AND I.operationId IN (SELECT operationId FROM finOperation WHERE operationGroupId = 'I')) LEFT JOIN
            finEntry J ON ( J.invoiceId = C.invoiceId AND J.operationId IN (SELECT operationId FROM finOperation WHERE operationGroupId = 'J')) LEFT JOIN
            ONLY basPhysicalPerson FP1 ON (FP1.personId = A.personId) LEFT JOIN
            ONLY basPhysicalPerson FP2 ON ( FP2.personid = FP1.responsableLegalId ) LEFT JOIN
            basDocument FPD1 ON (FP1.personId = FPD1.personId AND FPD1.documentTypeId = ".DEFAULT_DOCUMENT_TYPE_ID_CPF." ) LEFT JOIN
            basDocument FPD2 ON (FPD2.personId = FP2.personId AND FPD2.documentTypeId = ".DEFAULT_DOCUMENT_TYPE_ID_CPF." )
        GROUP BY
            A.mes,
            A.dia,
            A.ano,
            A.hora,
            A.datetime,
            A.username,
            A.ipaddress,
            A.agreementId,
            A.parcelsNumber,
            A.discount,
            A.balance,
            A.inputValue,
            A.maturityDateInput,
            A.personId,
            A.name,
            B.invoiceType,
            C.maturityDate,
            C.invoiceId,
            C.comments,
            C.status,
            D.description,
            FP2.name,
            FPD2.content,
            FPD1.content
    ORDER BY
            3,1,2,A.agreementId, B.invoiceType, C.maturityDate";*/
        $result = $this->db->query(SAGU::prepare($sql, $args));
        if(count($result) > 0 )
        {
            $c = 14;
            for($x=0;$x< count($result); $x++)
            {
                if(!$agreementId || $agreementId <> $result[$x][7])
                {
                    $agreementId = $result[$x][7];
                    if($obj) 
                    {
                        foreach ( $obj->invoices as $invoices => $invoice)
                        {
                            if($invoice->tipo == 'Input')
                            {
                                $obj->valorTotalSemJuros += $invoice->valor-$invoice->incentivos;
                                $obj->jurosTotal += $invoice->juros;
                                $obj->valorTotalAtualizado += $invoice->valorPago;
                            }
                        }
                        $result2[$obj->codNegociacao] = $obj;
                        unset($obj);
                    }
                    list(   $obj->mes, 
                            $obj->dia, 
                            $obj->ano, 
                            $obj->hora, 
                            $obj->datetime,
                            $obj->usuario, 
                            $obj->enderecoip, 
                            $obj->codNegociacao, 
                            $obj->numeroDeParcelas, 
                            $obj->desconto, 
                            $obj->valor, 
                            $obj->valorEntrada, 
                            $obj->vencimentoEntrada,
                            $obj->personId,
                            $obj->name) = $result[$x];

                    $lst->invoiceId         = $result[$x][$c+1];
                    $lst->origem            = $result[$x][$c+2];         
                    $lst->dataVencimento    = $result[$x][$c+3]; 
                    $lst->tipo              = $result[$x][$c+4];
                    $lst->valorPago         = $result[$x][$c+5]; 
                    $lst->valor             = $result[$x][$c+6]; 
                    $lst->descontos         = $result[$x][$c+7];
                    $lst->incentivos        = $result[$x][$c+8];
                    $lst->juros             = $result[$x][$c+9];
                    $lst->valorAtualizado   = $result[$x][$c+10];
                    $lst->comentarios       = $result[$x][$c+11];
                    $lst->dataPagamento     = $result[$x][$c+12];
                    $lst->eParcelaEntrada   = $result[$x][$c+13];
                    $lst->status            = $result[$x][$c+14];
                    $obj->responsableName   = $result[$x][$c+16];
                    $obj->cpf               = $result[$x][$c+17];
                    $obj->responsableCpf    = $result[$x][$c+18];
                    $obj->invoices[$result[$x][$c+1]] = $lst;
                    unset($lst);

                }
                else
                {
                    $lst->invoiceId         = $result[$x][$c+1];
                    $lst->origem            = $result[$x][$c+2];         
                    $lst->dataVencimento    = $result[$x][$c+3]; 
                    $lst->tipo              = $result[$x][$c+4];
                    $lst->valorPago         = $result[$x][$c+5]; 
                    $lst->valor             = $result[$x][$c+6]; 
                    $lst->descontos         = $result[$x][$c+7];
                    $lst->incentivos        = $result[$x][$c+8];
                    $lst->juros             = $result[$x][$c+9];
                    $lst->valorAtualizado   = $result[$x][$c+10];
                    $lst->comentarios       = $result[$x][$c+11];
                    $lst->dataPagamento     = $result[$x][$c+12];
                    $lst->eParcelaEntrada   = $result[$x][$c+13];
                    $lst->status            = $result[$x][$c+14];
                    $obj->invoices[$result[$x][$c+1]] = $lst;
                    unset($lst);
                }
            }
            if($obj)
            {
                $result2[$obj->codNegociacao] = $obj;
                unset($obj);
            }
            unset($result);
            $result = $result2;
        }
        return $result;
    }
}
?>
