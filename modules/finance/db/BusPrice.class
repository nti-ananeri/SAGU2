<?php
/**
 *
 * This file handles the connection and actions for finPrice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 16/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the Price table
 **/
class BusinessFinanceBusPrice extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPrice()
    {
    }

    /**
     * Return a specific record from the database
     *
     * @param $learningPeriodId (integer): Primary key of the record to be retrieved
     * @param $startDate(integer): Primary key of the record to be retrieved
     * @param $endDate (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPrice($pkId, $get=false)
    {

        if ( $get == false )
        {
            $sql = 'SELECT A.learningperiodid,
                           B.description,
                           C.name,
                           TO_CHAR(A.startDate,\'' . MASK_DATE . '\'),
                           TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                           A.value,
                           A.value2,
                           A.enrollValue,
                           A.minimumCurricularComponent,
                           A.curricularComponentPrice,
                           B.periodId,
                           A.userName,
                           A.dateTime,
                           A.ipAddress
                      FROM finPrice A
                INNER JOIN acdLearningPeriod B
                     USING (learningPeriodId)
                INNER JOIN acdCourse C
                     USING (courseId)
                     WHERE A.learningperiodid = ?
                       AND (SELECT max(startDate) 
                               FROM finPrice 
                              WHERE learningperiodid = A.learningperiodid 
                           GROUP by learningperiodid) BETWEEN TO_DATE(?, \'' . MASK_DATE . '\') AND TO_DATE(?,\'' . MASK_DATE .'\')';
    //                   AND A.startDate = TO_DATE(?, \'' . MASK_DATE . '\')
    //                   AND A.endDate   = TO_DATE(?, \'' . MASK_DATE . '\')';
        }
        else
        {
            $sql = 'SELECT A.learningperiodid,
                           B.description,
                           C.name,
                           TO_CHAR(A.startDate,\'' . MASK_DATE . '\'),
                           TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                           A.value,
                           A.value2,
                           A.enrollValue,
                           A.minimumCurricularComponent,
                           A.curricularComponentPrice,
                           B.periodId,
                           A.userName,
                           A.dateTime,
                           A.ipAddress
                      FROM finPrice A
                INNER JOIN acdLearningPeriod B
                     USING (learningPeriodId)
                INNER JOIN acdCourse C
                     USING (courseId)
                     WHERE A.learningperiodid = ?
                       AND A.startDate = TO_DATE(?, \'' . MASK_DATE . '\')
                       AND A.endDate   = TO_DATE(?, \'' . MASK_DATE . '\')';
        }

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$pkId));

        $price = new FinPrice();
        list ( $price->learningPeriodId,
               $price->learningPeriodDescription,
               $price->courseName,
               $price->startDate,
               $price->endDate,
               $price->value,
               $price->value2,
               $price->enrollValue,
               $price->minimumCurricularComponent,
               $price->curricularComponentPrice,
               $price->periodId,
               $price->userName,
               $price->dateTime,
               $price->ipAddress) = $result[0];
        return $price; 
    }

    /**
     * Return a specific record from the database
     *
     * @param $learningPeriodId (integer): Primary key of the record to be retrieved
     * @param $startDate(integer): Primary key of the record to be retrieved
     * @param $endDate (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLastPrice($learningPeriodId)
    {
        $sql = 'SELECT A.learningperiodid,
                       TO_CHAR(A.startDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.value,
                       A.value2,
                       A.enrollValue,
                       A.minimumCurricularComponent,
                       A.curricularComponentPrice
                  FROM finPrice A
                 WHERE A.learningPeriodId = ?
                   AND date(now()) BETWEEN A.startDate AND A.endDate
              ORDER BY A.startDate DESC';

        $db   = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$learningPeriodId));

        $price = new FinPrice();
        list ( $price->learningPeriodId,
               $price->startDate,
               $price->endDate,
               $price->value,
               $price->value2,
               $price->enrollValue,
               $price->minimumCurricularComponent,
               $price->curricularComponentPrice ) = $result[0];
        return $price; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPrice($data)
    {
        $sql = 'SELECT A.learningperiodid,
        			   B.description,
                       D.courseId,
                       D.courseVersion,
                       TO_CHAR ( A.startDate,\'' . MASK_DATE . '\' ),
                       TO_CHAR ( A.endDate,\'' . MASK_DATE . '\' ),
                       round(A.value, \'' . REAL_ROUND_VALUE . '\'),
                       round(A.value2, \'' . REAL_ROUND_VALUE . '\'),
                       round(A.enrollValue,\'' . REAL_ROUND_VALUE . '\'),
                       A.minimumCurricularComponent,
                       round(A.curricularComponentPrice,\'' . REAL_ROUND_VALUE . '\'),
                       SUM(COALESCE(A.value,0)+COALESCE(A.value2, 0)+COALESCE(a.enrollValue,0))::numeric(14,2) as courseTotalValue                       
             FROM finPrice A ,
                       acdLearningPeriod B,
                       acdCourse C,
                       acdCourseVersion D ';

        $where = '';
        unset($args);
        if ( strlen((string)$data->learningPeriodId) > 0 )
        {
            $where .= '    AND   A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }
        if ( strlen((string)$data->startDate) > 0 )
        {
            $where .= '    AND   A.startDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->startDate;
        }
        if ( strlen((string)$data->endDate) > 0 )
        {
            $where .= '    AND   A.endDate = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $data->endDate;
        }
        if ( strlen((string)$data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen((string)$data->enrollValue) > 0 )
        {
            $where .= '    AND   A.enrollValue = ?';
            $args[] = $data->enrollValue;
        }
        if ( strlen((string)$data->courseName) > 0 )
        {
            $where .= '    AND   C.name ILIKE ?';
            $args[] = $data->courseName . '%';
        }
        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND   C.courseId = ?';
            $args[] = $data->courseId ;
        }
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND   D.courseVersion = ?';
            $args[] = $data->courseVersion ;
        }
        if ( strlen((string)$data->periodId) > 0 )
        {
            $where .= '    AND   B.periodId = ?';
            $args[] = $data->periodId;
        }


        if ( strlen((string)$where) > 0 )
        {
            
        $sql .= ' WHERE ' . substr($where, 7) . '
                  AND A.learningPeriodId = B.learningPeriodId
                  AND B.courseId = C.courseId 
                  AND D.courseId = C.courseId
                  AND B.courseVersion = D.courseVersion
		     GROUP BY A.learningPeriodId, B.description, D.courseId, D.courseVersion, A.startDate, A.endDate, A.value, A.value2, A.enrollValue, A.minimumcurricularcomponent, A.curricularcomponentprice
             ORDER BY A.learningPeriodId';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }


        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPrice($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finPrice
                            (learningperiodid,
                             startDate,
                             endDate,
                             value,
                             value2,
                             enrollValue,
                             minimumCurricularComponent,
                             curricularComponentPrice )
                     VALUES (?,TO_DATE(?,\'' . MASK_DATE . '\'),TO_DATE(?,\'' . MASK_DATE . '\'),?,?,?,?,?)';

        $args = array($data->learningPeriodId,
                      $data->startDate,
                      $data->endDate,
                      $data->value,
                      $data->value2,
                      $data->enrollValue,
                      $data->minimumCurricularComponent,
                      $data->curricularComponentPrice);

        if ( $db->Execute(SAGU::Prepare($sql,$args)) )
        {
            $retval = array($data->learningPeriodId, $data->startDate, $data->endDate, $data->value,$data->enrollValue);
        }
        else
        {
            unset($retval);
        }

        //$this->CheckError($db);
        //$db->Close();

        return $retval;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePrice($data)
    {
        $sql = 'UPDATE finPrice
                   SET learningPeriodId = ?,
                       startDate     = TO_DATE(?,\'' . MASK_DATE . '\'),
                       endDate       = TO_DATE(?,\'' . MASK_DATE . '\'),
                       value         = ?,
                       value2        = ?,
                       enrollValue   = ?,
                       minimumCurricularComponent = ?,
                       curricularComponentPrice   = ?
                 WHERE learningPeriodId = ?
                   AND startDate     = TO_DATE(?,\'' . MASK_DATE . '\')   
                   AND endDate       = TO_DATE(?,\'' . MASK_DATE . '\') ';

        $args = array($data->learningPeriodId,
                      $data->startDate,
                      $data->endDate,
                      $data->value,
                      $data->value2,
                      $data->enrollValue,
                      $data->minimumCurricularComponent,
                      $data->curricularComponentPrice,
                      $data->learningPeriodId,
                      $data->oldStartDate,
                      $data->oldEndDate);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
       {
            $result = $db->execute($sqls[$i]);
       }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $learningPeriodId (integer): Primary key for deletion
     * @param $startDate(integer): Primary key for deletion
     * @param $endDate (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePrice($pkId)
    {
        $sql = 'DELETE FROM finPrice
                      WHERE learningPeriodId = ?
                        AND startDate     = TO_DATE(?,\'' . MASK_DATE . '\')
                        AND endDate       = TO_DATE(?,\'' . MASK_DATE . '\') ';

        $db   = $this->getDatabase();
        
        $result = $db->execute(SAGU::prepare($sql,$pkId));
        return $result;
    }

   /**
    * Get prices without value for a specific timeline
    *
    * @param $data (object): Object containing the search data
    *
    * @returns (array): Array containing the courses that needs value information
    *
    */
    public function getCoursesWithoutPrice($data)
    {
        $sql = ' SELECT courseId';
    }
}

?>
