<?php
/**
 *
 * This file handles the connection and actions for finFinancialAid table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusIncentiveType.class', 'finance');

/**
 * Class to manipulate the finFinancialAid table
 **/
class BusinessFinanceBusFinancialAid extends BusinessFinanceBusIncentiveType
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessFinanceBusFinancialAid()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listFinancialAid()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $incentiveTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFinancialAid($incentiveTypeId)
    {

        //get the finIncentiveType data
        $incentiveType = $this->getIncentiveType($incentiveTypeId);

        //get the adtFinancialAid data
        $sql = 'SELECT A.requireCostCenter
                  FROM finFinancialAid A
                 WHERE A.incentiveTypeId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $incentiveTypeId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $financialAid = new finFinancialAid();

        list ( $financialAid->requireCostCenter ) = $result[0];

        //put into financialAid attributes, all incentiveType attributes
        $array = get_object_vars($incentiveType);
        foreach ( $array as $key => $row )
        {
            $financialAid->$key = $incentiveType->$key;
        }

        return $financialAid; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchFinancialAid($filters)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.requireCostCenter,
                       A.isExtinct,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
             FROM ONLY finFinancialAid A
            INNER JOIN finOperation B
                 USING ( operationId ) ';

        if ( strlen((string)$filters->incentiveTypeId) > 0 )
        {
            $where .= ' AND A.incentiveTypeId = ?';
            $args[] = $filters->incentiveTypeId;
        }

        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $filters->description . '%';
        }
	
	if ( strlen((string)$filters->operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $filters->operationId;
        }

        if ( strlen((string)$filters->needAdjustAuthorization) > 0 )
        {
            $where .= ' AND A.needAdjustAuthorization = ?';
            $args[] = $filters->needAdjustAuthorization;
        }

        if ( strlen((string)$filters->sendInvoices) > 0 )
        {
            $where .= ' AND A.sendInvoices = ?';
            $args[] = $filters->sendInvoices;
        }

        if ( strlen((string)$filters->generateCredits) > 0 )
        {
            $where .= ' AND A.generateCredits = ?';
            $args[] = $filters->generateCredits;
        }

        if ( strlen((string)$filters->requireCostCenter) > 0 )
        {
            $where .= ' AND A.requireCostCenter = ?';
            $args[] = $filters->requireCostCenter;
        }

        if ( strlen((string)$filters->isExtinct) > 0 )
        {
            $where .= ' AND A.isExtinct = ?';
            $args[] = $filters->isExtinct;
        }


        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertFinancialAid($data)
    {
        $MIOLO  = MIOLO::getInstance();

        //$this->db->begin();

        $data = $this->insertIncentiveType($data);

        $financialAid = new finFinancialAid();
        $vars    = get_object_vars($financialAid);

        foreach ( $vars as $var => $value )
        {
            if ( strlen((string)$data->$var)>0 && strtolower($data->$var) != 'null' )
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
        }

        if ( strlen((string)$string1)>0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);
            $sql    = 'INSERT INTO finFinancialAid 
                                   ( ' . $string1 . ')
                            VALUES ( ' . $string2 . ')';

            $result = $this->db->execute(SAGU::prepare($sql, $args));

            return $data;
        }

        //$this->db->finish();
        return false;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateFinancialAid($data)
    {
        $sql = 'UPDATE finFinancialAid
                   SET requireCostCenter = ?
                 WHERE incentiveTypeId   = ?';

        $args = array( 
                       $data->requireCostCenter,
                       $data->incentiveTypeId
                     );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        $this->updateIncentiveType($data);

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $incentiveTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFinancialAid($incentiveTypeId)
    {
        $result = $this->deleteIncentiveType($incentiveTypeId);
        return $result;
    }

}

?>
