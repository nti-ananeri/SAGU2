<?php
/**
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 04/10/2007
 *
 * \b Organization: \n
 * iSolution - Soluções de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Soluções de Internet \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusBankReturnConfig extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBankReturn()
    {
        $sql = ' SELECT A.bankReturnId,
                        A.description
                   FROM finBankReturn A
               ORDER BY 2';

        $db = $this->getDatabase();
        
        $return = $db->query($sql);

        return $return;
    }

    /**
     * List all records from table finBankReturnLineType
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/

     public function listBankReturnLineType()
    {
        $sql = ' SELECT A.lineTypeId,
                        A.description
                   FROM finBankReturnLineType A
               ORDER BY 2';

        $db = $this->getDatabase();
        
        $return = $db->query($sql);

        return $return;
    }
       
    /**
     * List all records from table finBankReturnTypeField
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBankReturnTypeField()
    {
        $sql = 'SELECT A.typeFieldReturnId,
                        A.description
                   FROM finBankReturnTypeField A
               ORDER BY 2';

        $db = $this->getDatabase();
        
        $return = $db->query($sql);

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $bankReturnConfigId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankReturnConfig($bankReturnConfigId)
    {
        $sql = 'SELECT A.bankReturnConfigId,
        			   A.bankReturnId,
        			   A.typeFieldReturnId,
        			   A.lineTypeId,
                       A.position,
                       A.size,
                       A.segment,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finBankReturnConfig A
                  INNER JOIN finBankReturn B using(bankReturnId)
                 WHERE A.bankReturnConfigId = ?';

        $db = $this->getDatabase();
        $args = array($bankReturnConfigId);
        //$args[] = $typeFieldReturnId;
        $sqls = SAGU::prepare($sql,$args);

        $result = $db->query($sqls);
        $bankReturnConfig = new FinBankReturnConfig();

        list ( $bankReturnConfig->bankReturnConfigId,
        	   $bankReturnConfig->bankReturnId,
               $bankReturnConfig->typeFieldReturnId,
               $bankReturnConfig->lineTypeId,
               $bankReturnConfig->position,
               $bankReturnConfig->size,
               $bankReturnConfig->segment,
               $bankReturnConfig->userName,
               $bankReturnConfig->dateTime ) = $result[0];

        return $bankReturnConfig;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankReturnConfig($data)
    {
        $sql = 'SELECT B.description,
        			   C.description,
        			   D.description
                       A.position,
                       A.size,
                       A.segment,
                       A.bankReturnId,
                       A.typeFieldReturnId
                 FROM finBankReturnConfig A               
                 INNER JOIN finBankReturn B using(bankReturnId)
                 INNER JOIN finBankReturnTypeField C using(typeFieldReturnId)
                 INNER JOIN finBankReturnLineType D using(lineTypeId)';

        $where = '';
        unset($args);
        if ( strlen((string)$data->bankReturnConfigId) > 0 )
        {
            $where .= '    AND   A.bankReturnConfigId = ?';
            $args[] = $data->bankReturnConfigId;
        }
        if ( strlen((string)$data->bankReturnId) > 0 )
        {
            $where .= '    AND   A.bankReturnId = ?';
            $args[] = $data->bankReturnId;
        }
        if ( strlen((string)$data->typeFieldReturnId) > 0 )
        {
            $where .= '    AND   A.typeFieldReturnId = ?';
            $args[] = $data->typeFieldReturnId;
        }
        if ( strlen((string)$data->lineTypeId) > 0 )
        {
            $where .= '    AND   A.lineTypeId = ?';
            $args[] = $data->lineTypeId;
        }
        if ( strlen((string)$data->position) > 0 )
        {
            $where .= '    AND   A.position = ?';
            $args[] = $data->position;
        }
        if ( strlen((string)$data->size) > 0 )
        {
            $where .= '    AND   A.size = ?';
            $args[] = $data->size;
        }
        if ( strlen((string)$data->segment) > 0 )
        {
            $where .= '    AND   A.segment ILIKE ?';
            $args[] = $data->segment.'%';
        }


        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY 2,3,4';

            $db     = $this->getDatabase();
            $sqls   = SAGU::prepare($sql,$args);
            $result = $db->query($sqls);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankReturnConfig($data)
    {
    	$db = $this->getDatabase();

        $sql = 'INSERT INTO finBankReturnConfig
                            (bankReturnId,
                             typeFieldReturnId,
                             lineTypeId,
                             position,
                             size,
                             segment)
                        VALUES (?,?,?,?,?,?)';

        $args = array($data->bankReturnId,
        			  $data->typeFieldReturnId,
        			  $data->lineTypeId,
                      $data->position,
                      $data->size,
                      $data->segment);

        $return = $db->execute(SAGU::prepare($sql, $args));
        return $return;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankReturnConfig($data)
    {
    	$sql = 'UPDATE finBankReturnConfig
                   SET position = ?,
                   	   size = ?,
                       segment    = ?
                 WHERE bankReturnConfigId      = ?';

        $args = array($data->position,
        			  $data->size,
                      $data->segment,
                      $data->bankReturnConfigId
                      );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$this->checkError($db);
        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankReturnConfigId(integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankReturnConfig($bankReturnConfigId)
    {
        $sql = 'DELETE FROM finBankReturnConfig
                      WHERE bankReturnConfigId = ?';

        $args = array($bankReturnId,$typeFieldReturnId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));
        //$this->checkError($db);
        //$db->close();

        return $result;
    }


}

?>
