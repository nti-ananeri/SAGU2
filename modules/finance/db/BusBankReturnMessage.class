<?php
/**
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 04/10/2007
 *
 * \b Organization: \n
 * iSolution - Soluções de Internet \n
 * The iSolution TEAM
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2007 iSolution - Soluções de Internet \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusBankReturnMessage extends MBusiness
{
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBankReturnMessage()
    {
        $sql = ' SELECT A.bankReturnId,
                        A.messageType,
                        A.messageCod,
                        A.message
                   FROM finBankReturnMessage A
               ORDER BY 2,3,4';

        $db = $this->getDatabase();
        
        $return = $db->query($sql);

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankReturnMessage($bankReturnId,$messageType,$messageCod)
    {
        $sql = 'SELECT A.bankReturnId,
                       A.messageType,
                       A.messageCod,
                       A.message,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\')
                  FROM finBankReturnMessage A
                 WHERE A.bankReturnId = ?
                 AND A.messageType = ?
       			 AND A.messageCod = ?';

        $db = $this->getDatabase();
        $args = array($bankReturnId,$messageType,$messageCod);
        //$args[] = $typeFieldReturnId;
        $sqls = SAGU::prepare($sql,$args);

        $result = $db->query($sqls);
        $bankReturnMessage = new FinBankReturnMessage();

        list ( $bankReturnMessage->bankReturnId,
               $bankReturnMessage->messageType,
               $bankReturnMessage->messageCod,
               $bankReturnMessage->message,
               $bankReturnMessage->userName,
               $bankReturnMessage->dateTime ) = $result[0];
        return $bankReturnTypeField;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial words with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankReturnMessage($data)
    {
        $sql = 'SELECT A.bankReturnId,
        			   A.messageType,
        			   A.messageCod,
        			   A.message
        		 FROM finBankReturnMessage A';
        $where = '';
        unset($args);
        if ( strlen((string)$data->bankReturnId) > 0 )
        {
            $where .= '    AND   A.bankReturnId = ?';
            $args[] = $data->bankReturnId;
        }
        if ( strlen((string)$data->messageType) > 0 )
        {
            $where .= '    AND   A.messageType = ?';
            $args[] = $data->messageType;
        }
        if ( strlen((string)$data->messageCod) > 0 )
        {
            $where .= '    AND   A.messageCod = ?';
            $args[] = $data->messageCod;
        }
        if ( strlen((string)$data->message) > 0 )
        {
            $where .= '    AND   A.message ILIKE ?';
            $args[] = $data->message.'%';
        }                 
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY 1';

            $db     = $this->getDatabase();
            $sqls   = SAGU::prepare($sql,$args);
            $result = $db->query($sqls);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankReturnMessage($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finBankReturnMessage
                            (bankReturnId,messageType,messageCod,message)
                        VALUES (?,?,?,?)';

        $args = array(
        				$data->bankReturnId,
        				$data->messageType,
        				$data->messageCod,
        				$data->message
        			);

        $return = $db->execute(SAGU::prepare($sql, $args));
        return $return;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankReturnMessage($data)
    {
    	$sql = 'UPDATE  finBankReturnMessage
                   SET message = ?                   
                 WHERE bankReturnId = ?
                 AND messageType = ?
                 AND messageCod = ?';

        $args = array($data->message,
        			  $data->bankReturnId,			  
        			  $data->messageType,
                      $data->messageCod
                      );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$this->checkError($db);
        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankReturnId(integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankReturnMessage($bankReturnId,$messageType,$messageCod)
    {
        $sql = 'DELETE FROM finBankReturnMessage
                      WHERE bankReturnId = ?
                      AND messageType = ? 
                      AND messageCod = ?';

        $args = array($bankReturnId,$messageType,$messageCod);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));
        //$this->checkError($db);
        //$db->close();

        return $result;
    }


}

?>
