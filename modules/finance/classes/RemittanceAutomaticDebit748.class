<?php

$MIOLO->getClass($module, 'DefaultFormat');

/**
 *
 * Class to generate the file for export about automatic debit
 *
 * This class generates the automatic debit for bank 748 - BANRISUL
 * This file follows the rules of source code baseed on SAGU 1 (of course... some bugs are fixed here).
 *
 */
class RemittanceAutomaticDebit748
{
    private $business;
    private $invoiceData;
    private $string;

   /** 
    * Generate a module 11 for a 6 number value
    * 
    * @param $data (int): Data to generate the module11
    *
    * @return: Return the bank account information
    *
    */
    public function module11($data)
    {
        $dataSize = 6;
        $data     = DefaultFormat::formatField($data, 'N', $dataSize);

        $index    = 7;
        $sum      = 0;

        for ($x = 0; $x<$dataSize; $x++)
        {
            $sum += substr($data, $x, 1) * $index--;
        }
        $rest = $sum % 11;

        switch ($rest)
        {
            case 1:
                return 0;
                break;
            case 0:
                return 1;
                break;
            default:
                return 11 - $rest;
                break;
        }
    }

    /** 
     * Header of file
     *
     * @param $data (object): Object containing default information to generate and search header information
     *
     * @return (string): A string with 150 of size
     *
     */
    private function header($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $companyData = $this->business->getCompanyData(DEFAULT_COMPANY_CONF);
        $bankData    = $this->business->getBankAccountData($data->bankAccountId);
        
        $str[] = 'A';                                                               // Código do registro
        $str[] = '1';                                                               // Código da remessa
        $str[] = DefaultFormat::formatField($bankData->accordCode, 'A', 5);         // Numero do convenio
        $str[] = DefaultFormat::formatField(' ', 'A', 15);                          // Brancos
        $str[] = DefaultFormat::formatField($companyData->acronym, 'A', 20);        // Nome da Empresa cedente
        $str[] = '748';                                                             // Código do banco
        $str[] = DefaultFormat::formatField($bankData->bankDescription, 'A', 20);   // Nome do banco
        $str[] = date('Ymd');                                                       // Data atual (Ymd)
        $str[] = DefaultFormat::formatField($data->sequenceFile, 'N', 6);           // Número sequencial do arquivo
        $str[] = '04';                                                              // Número da versão do layout atual
        $str[] = 'DEBITO AUTOMATICO';                                               // Identificação escrita do tipo de serviço
        $str[] = DefaultFormat::formatField(' ', 'A', 52);                          // Brancos
        $string = implode($str);
        return $string;
    }
    
   /** 
    * Header of file
    *
    * @param $data (object): Object containing default information to generate and search header information
    *
    * @return (string): A string with 150 of size
    *
    */
    private function details($data)
    {

        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $detailsData = $this->business->listDetails($data);
        if (is_array($detailsData))
        {
            $this->invoiceInfo->registers = 2;
            foreach ($detailsData as $dd)
            {
                
                $originalRow[3] = $dd[3];
                $dd[3] = SAGU::formatDate($dd[3], 'yyyymmdd');
                $originalRow[4] = $dd[4];
                $dd[4] = SAGU::returnOnlyNumbers($dd[4]);
                $originalRow[5] = $dd[5];
                $dd[5].='='.date('dmY');
                
                if ($dd[12] !== NULL)
                {
                    $this->invoiceData->invoiceIncentives[] = array($dd[6], $dd[7], $originalRow[5], $originalRow[3], $originalRow[4], $dd[12]);
                }
                else
                {
                    $dd[2].=$this->module11(SAGU::calcNumber($dd[1].'+'.$dd[2]));
                    $str[] = 'E';                                               // Identificação do registro de débito automático
                    $str[] = DefaultFormat::formatField($dd[0], 'A', 25);       // Identificação do cliente na empresa == contractId
                    $str[] = DefaultFormat::formatField($dd[1], 'N', 4);        // Código da agência                30
                    $str[] = DefaultFormat::formatField($dd[2], 'N', 6);        // Numero da conta corrente + DV    36
                    $str[] = DefaultFormat::formatField(' ',    'A', '8');      // Brancos e Filter                 44
                    $str[] = DefaultFormat::formatField($dd[3], 'N', 8);        // Data do débito
                    $str[] = DefaultFormat::formatField($dd[4], 'N', 15);       // Valor do débito (2 casas após vírgula)
                    $str[] = '03';                                              // Código da moeda (03 = Real)
                    $str[] = DefaultFormat::formatField($dd[5], 'A', 60);       // Uso da empresa (código do título)
                    $str[] = DefaultFormat::formatField(' ', 'A', '20');        // Brancos
                    $str[] = '0';                                               // Código do movimento (0 para débito automático)
                    $string[] = implode($str);

                    unset($str);
                    $this->invoiceData->invoiceRemittance[] = array($dd[6], $dd[7], $originalRow[5], $originalRow[3], $originalRow[4]);
                    $this->invoiceInfo->registers++;
                    $this->invoiceInfo->value[] = $originalRow[4];
                    if (isset($this->invoiceData->invoiceTotal[$originalRow[3]]))
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]]++;
                    }
                    else
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]] = 1;
                    }
                }
                
            }

            return $string;
        }
        else
        {
            $MIOLO->information(_M('The system has no returned values', $module), $MIOLO->getActionURL($module, $action));
        }
    }

   /** 
    * Main function to generate remittance
    *
    * @param $data (object): Object containing the form values to handle the remittance
    *
    * @returns true if succeed, otherwise false
    *
    */
    private function footer($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $totalRegisters = $this->invoiceInfo->registers;
        if (is_array($this->invoiceInfo->value))
        {
            $totalValue = SAGU::returnOnlyNumbers(SAGU::calcNumber(implode('+', $this->invoiceInfo->value), true));
        }
        $str[] = 'Z';                                                   // Código de identificação do registro footer
        $str[] = DefaultFormat::formatField($totalRegisters, 'N', 6);   // Total de registros
        $str[] = DefaultFormat::formatField($totalValue, 'N', 17);      // Valor total das informações enviadas via remessa
        $str[] = DefaultFormat::formatField(' ', 'A', 126);             // Em branco
        
        $string = implode($str);
        return $string;
    }
   
   /** 
    * Main function to generate remittance
    *
    * @param $data (object): Object containing the form values to handle the remittance
    *
    * @returns true if succeed, otherwise false
    *
    */
    public function RemittanceAutomaticDebit748($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->business = $MIOLO->getBusiness($module, 'BusRemittanceAutomaticDebit748');

        $this->business->beginTransaction();

        $header[] = $this->header($data);
        $details  = $this->details($data);
        $footer[] = $this->footer($data);
        if(is_array($details))
        {
            $this->string = implode("\n", array_merge($header, $details, $footer)) . "\n";
        }
        else
        {
            $this->string = implode("\n", array_merge($header, $footer)) . "\n";
        }

        $dataConfig->value        = $data->sequenceFile;
        $dataConfig->moduleConfig = 'FINANCE';
        $dataConfig->parameter    = 'SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'.$data->bankId;

        $businessConfig = $MIOLO->getBusiness('basic', 'BusConfig');
        $businessConfig->updateConfigValue($dataConfig);
        //$this->business->endTransaction($this->keepGoing);
    }

   /**
    * Return the invoice data information
    *
    * @param: No parameters needed
    *
    * @return: Internal object called invoiceData
    *
    */
    public function returnInvoiceData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->invoiceData->invoiceTotal;
        unset($this->invoiceData->invoiceTotal);
        if (is_array($data))
        {
            foreach ($data as $key => $d)
            {
                $this->invoiceData->invoiceTotal[] = array($key, $d);
            }
        }
        if (is_array($this->invoiceData->invoiceRemittance))
        {
            foreach ($this->invoiceData->invoiceRemittance as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceRemittance[] = array('','','', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode($total, '+')));
            unset($total);
        }
        if (is_array($this->invoiceData->invoiceIncentives))
        {
            foreach ($this->invoiceData->invoiceIncentives as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceIncentives[] = array('','','', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode('+', $total)), '');
        }
        return $this->invoiceData;
    }

   /**
    * Return the string containing the invoice remittance data
    *
    * @param: No parameters needed
    *
    * @return: Internal object called string that contains the specific string of return invoice
    */
    public function returnString()
    {
        if (strlen((string)$this->string)>0)
        {
            return SAGU::stringToASCII($this->string);
        }
        else
        {
            return false;
        }
    }
}
?>
