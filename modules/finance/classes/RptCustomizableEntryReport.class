<?
/**
*
* @author Giovani Murilo Dantas Correa [gmurilo@isolution.inf.br]
*
* $version: $Id$
*
* \b Maintainers \n
* Daniel Afonso Heisler [daniel@isolution.inf.br]
*
* @since
* Class created on 25/03/2009
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/
set_time_limit(0);        
$MIOLO = MIOLO::getInstance();
$module = 'finance';

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

class RptCustomizableEntryReport extends PDF
{
    private $fsContent;
    public $fsHeader;
    public function __construct($filters = NULL)
    {
        $this->module = 'finance';
        $MIOLO = MIOLO::getInstance();
        $db = $MIOLO->getBusiness('finance', 'BusCustomizableEntryReport');
        foreach($filters as $item => $value)
        {
            $this->filters->{$item} = $value;
        }
        $this->relats = $db->getReport($this->filters);
        $this->title = strtoupper(_M('Customizable entry report', $this->module));
        parent::__construct();
        $this->useUserInfo = false;
        $this->aliasNbPages();
        if ( count($this->filters->fieldsSelect) > 5 )
        {
            $this->addPage('L', 'mm', 'A4');
        }
        else
        {
            $this->addPage('P', 'mm', 'A4');
        }
        $this->PageBreakTrigger = ($this->h-$this->tMargin)-6;

        if ( count($this->relats) == 0 )
        {
            $this->SetFillColor(255,0,0);
            $this->cell($this->psize, $this->lsize, _M('No data found to process', 'finance'), 1, null, 'C', 1);
            $this->outPut();
            return;
        }

        $this->generatePDF();
    }

    public function generatePDF()
    {
        $this->putContent();
        PDF::generatePDF();
    }

    public function putHeaderContent()
    {
        unset($this->col['name']);

        $dataFieldsSelect[0] = _M('User', 'sagu2');
        $dataFieldsSelect[1] = _M('Schedule', 'basic');
        $dataFieldsSelect[2] = '"IP"';
        $dataFieldsSelect[3] = _M('Invoice', 'finance');
        $dataFieldsSelect[4] = _M('Value', 'finance');
        $dataFieldsSelect[5] = 'Cod. Op.';
        $dataFieldsSelect[6] = _M('Operation', 'finance');
        $dataFieldsSelect[7] = 'Cod. Pessoa';
        $dataFieldsSelect[8] = _M('Name', 'basic');
        $dataFieldsSelect[9] = 'Tipo';
        $dataFieldsSelect[10]= 'Criação';
        $dataFieldsSelect[11]= 'M. Caixa';
        $dataFieldsSelect[12]= 'Retorno';
        
        foreach ( $this->filters->fieldsSelect as $item => $value )
        {
            if ( in_array($value, array(4)))
            {
                $this->col['align'][$value] = 'R';
            }
            else if ( in_array($value, array(1,2,3,5)))
            {
                $this->col['align'][$value] = 'C';
            }
            else
            {
                $this->col['align'][$value] = 'L';
            }
            $this->col['name'][$value] = $dataFieldsSelect[$value];
            if (  (stristr($this->col['name'][$value], 'Nome') !== FALSE)  )
            {
                $this->col['size'][$value] = $this->getStringWidth($this->col['name'][$value])*5;
            }
            else if (  (stristr($this->col['name'][$value], 'Operação') !== FALSE) )
            {
                $this->col['size'][$value] = $this->getStringWidth($this->col['name'][$value])*1.5;
            }
            else if ( (stristr($this->col['name'][$value], 'Criação') !== FALSE) || (stristr($this->col['name'][$value], 'Tipo') !== FALSE) || (stristr($this->col['name'][$value], 'Cod.') !== FALSE) || (stristr($this->col['name'][$value], 'Caixa') !== FALSE) || (stristr($this->col['name'][$value], 'Retorno') !== FALSE))
            {
                 $this->col['size'][$value] = $this->getStringWidth($this->col['name'][$value])*0.5;
            }
            else
            {
                $this->col['size'][$value] = $this->getStringWidth($this->col['name'][$value])+3;
            }
        }
        $m = $this->psize / array_sum($this->col['size']);
        foreach ( $this->col['size'] as $item => $value )
        {
            $this->col['size'][$item] = $value * $m;
        }
        $this->setFillColor(232,232,232);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $fs = 8;
        foreach ($this->col['name'] as $x => $value )
        {
            while ( $this->getStringWidth($value)+1 >= $this->col['size'][$x] ) 
            {
                $fs -= 0.1;
                $this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);
            }
            //$this->cell($this->col['size'][$x], $this->lsize, $this->col['name'][$x], 1, null, 'C', 1 );
        }
        $this->headerFontSize = $fs;
        foreach ( $this->col['name'] as $x => $value )
        {
            $this->cell($this->col['size'][$x], $this->lsize, $value, 1, null, 'C', 1 );
        }
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', $fs);
    }

    public function putContent()
    {
        $this->putHeaderContent();
        $this->headerFontSize = 8;
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $fs = 8;
        $this->setFillColor(232,232,232);
        foreach($this->relats as $line => $content )
        {
            foreach ( $this->col['name'] as $item => $value )
            {
                while ( $this->col['size'][$item] < $this->getStringWidth(_M(trim($content[$item]), 'basic'))+1.5 )
                {
                    $fs -= 0.1;
                    $this->setFont(DEFAULT_REPORT_FONT, '', $fs);
                }
            }
        }
        $this->fsContent = $fs;
        foreach($this->relats as $line => $content )
        {
            $this->setFillColor(242,242,242);
            $zebra = $zebra == true ? false : true;
            if ( $this->y+ $this->lsize >= $this->PageBreakTrigger )
            {
                $this->putHeaderContent();
                $this->setFont(DEFAULT_REPORT_FONT, '', $this->fsContent);
            }
            foreach ( $this->col['name'] as $item => $value )
            {
                $value = _M(trim($content[$item]), 'basic');
                if ( $item == 4 )
                {
                    if ( $content[9] == 'C' )
                    {
                        $total['C'][] = $content[$item];
                    }
                    else
                    {
                        $total['D'][] = $content[$item]; 
                    }
                }
                $this->cell($this->col['size'][$item], $this->lsize, $value, 1, null, $this->col['align'][$item], $zebra );
            }
            $this->ln();
        }
        
        if ( count($total['C']) > 0 )
        {
            $this->SetFillColor(0,180,255);
            $this->cell($this->psize, $this->lsize, 'Total Créditos: ' . SAGU::formatNumber(array_sum($total['C'])), null, null, 'R', true);
            $this->ln();
        }
         
        if ( count($total['D']) > 0 )
        {
            $this->setFillColor(230,180,0);
            $this->cell($this->psize, $this->lsize, 'Total Débitos: ' . SAGU::formatNumber(array_sum($total['D'])), null, null, 'R', true);
            $this->ln();
        }
        $this->ln();

        if ( count($total['D']) > 0 && count($total['C']) > 0 )
        {
            $totalX = array_sum($total['C']) - array_sum($total['D']);
        }
        else if ( count($total['D']) > 0 )
        {
            $totalX = array_sum($total['D']) * -1;
        }
        else if ( count($total['C']) > 0 )
        {
            $totalX = array_sum($total['C']);
        }
        else
        {
            $totalX = 0;
        }
        if ( $totalX < 0 )
        {
            $this->setFillColor(230,180,0);
        }
        else
        {
            $this->SetFillColor(0,180,255);
        }
        $this->cell($this->psize, $this->lsize, 'Total: '. SAGU::formatNumber($totalX), null, null, 'R', true);
        $this->setFillColor(232,232,232);
    }

    public function Header()
    {
        parent::Header();
    }
    public function Footer()
    {
        parent::Footer();
    }
}
?>
