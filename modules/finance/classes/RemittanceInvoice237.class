<?php
/**
 * Class to generate the bank remittance
 */
class RemittanceInvoice237 extends RemittanceInvoice
{

    public $history;
    public $fileBody;
    public $fileData;
    public $remittanceSequence;

    public function __construct($data)
    {
        parent::__construct($data);
    }
    /*
     * generate the header for the remittance invoice
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function header($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $business = $MIOLO->getBusiness($module, 'BusRemittanceInvoice237');
        $data->companyId = DEFAULT_COMPANY_CONF; 
        $dataCompany     = $business->getCompanyData($data->companyId);
        $dataBankAccount = $business->getBankAccountData($data->bankAccountId, $data->bankContractId );
        $this->remittanceSequence = $dataBankAccount->remittanceSequence;
        // 001 - 009 - Constante 01REMESSA
        $line = '01REMESSA';
        // 010 - 026 - Em branco
        $line .= DefaultFormat::formatField('01COBRANCA', 'A', 17);
        // 027 - 046 - Código do Cedente
        $line .= DefaultFormat::formatField($dataBankAccount->assignorCode, 'N', 20);
        // 047 - 076 - Nome da Empresa
        $line .= DefaultFormat::formatField($dataCompany->name, 'A', 30);
        // 077 - 094 - Em branco
        $line .= DefaultFormat::formatField('237BRADESCO', 'A', 18);
        // 095 - 100 - Data Gravação do arquivo
        $line .= date('dmy');
        // 101 - 108 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 8);
        // 109 - 110 - Identificação do Sistema
        $line .= DefaultFormat::formatField('MX', 'A', 2);
        // 111 - 117 - Sequencia da remessa
        $line .= DefaultFormat::formatField($dataBankAccount->remittanceSequence, 'N', 7);
        // 118 - 394 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 277);
        // 395 - 400 - Constante 000001
        $line .= DefaultFormat::formatField('1', 'N', 6);
        // Tira acentos, coloca em caixa alta e quebra linha
        $lineS .= strToUpper( SAGU::stringToASCII($line) ). "\r\n";

        return $lineS;
    }
    
    /**
     * Generate the details remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function details($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $business = $MIOLO->getBusiness($module, 'BusRemittanceInvoice237');
        $dataDetails     = $business->listDetails($data);

        if(!is_array($dataDetails))
        {
            return false;
        }

        // contador de linhas ... começa no 1 por causa do header.
        $counter = 1;
        $Total_Remessa = 0;
        
        foreach ($dataDetails as $key => $oneLine )
        {
            $counter++;
            $data->collectionBranch= $oneLine[0];
            $data->wallet          = $oneLine[1];
            $data->accountNumber   = $oneLine[2];
            $data->accountNumberDigit = $oneLine[3];
            $data->invoiceId       = $oneLine[4];
            $data->isFineInPercent = $oneLine[5];
            $data->fine            = $oneLine[6];
            $data->bankInvoiceId   = $oneLine[7];
            $data->maturityDate    = $oneLine[8];
            $data->value           = $oneLine[9];
            $data->emissionDate    = $oneLine[10];
            $data->interest        = $oneLine[11];
            $data->discountDate    = $oneLine[12];
            $data->discount        = $oneLine[13];
            $data->personType      = 'F'; 
            $document->personName  = $oneLine[14];
            $document->content     = $oneLine[15];
            $data->fullAddress     = $oneLine[16];
            $data->branchNumber    = $oneLine[17];
            // 001 - 001 - constante 1
            $line = '1';
    
            // 002 - 006 - Agência de Débito
            $line .= DefaultFormat::formatField($data->collectionBranch, 'N', 5);

            // 007 - 007 - Dígito da Agência de Débito
            $line .= DefaultFormat::formatField(' ', 'A', 1);

            // 008 - 012 - Razão da Conta Corrente
            $line .= DefaultFormat::formatField(' ', 'N', 5);

            // 013 - 019 - Conta Corrente
            $line .= DefaultFormat::formatField(' ', 'N', 7);

            // 020 - 020 - Dígito da Conta Corrente
            $line .= DefaultFormat::formatField(' ', 'A', 1);

            // 021 - 037 - Identificação da Empresa Cedente
            // 021 - 021 - Zero
            $line .= '0';
            // 022 - 024 - Código da Carteira
            $line .= DefaultFormat::formatField($data->wallet, 'N', 3);
            // 025 - 029 - Código da agência do cedente, sem o dígito
            $line .= DefaultFormat::formatField($data->branchNumber, 'N', 5);
            // 030 - 036 - Código da agência do cedente, sem o dígito
            $line .= DefaultFormat::formatField($data->accountNumber, 'N', 7);
            // 037 - 037 - Dígito da conta corrente
            $line .= DefaultFormat::formatField($data->accountNumberDigit, 'A', 1);

            // 038 - 062 - Identificação cedente  ( invoiceId )
            $line .= DefaultFormat::formatField($data->invoiceId, 'A', 25);
            
            // history for grid invoiceId
            /*$urlHistory = $MIOLO->getActionURL($module, 'main', null, array('event'=>'btnSearch_click', 'invoiceId'=>$newLine->invoiceId));
            $this->history[$key][0] = new MOpenWindow('invoice'.$newLine->invoiceId, $newLine->invoiceId, $urlHistory); */

            // 063 - 065 - Código do Banco à ser debitado na Câmara de Compensação, Quanto à débito automático, caso contrário 000
            $line .= DefaultFormat::formatField('0', 'N', 3);

            // 066 - 066 - Caso existe multa, converter a multa para percetual e preencher com 2, caso contrario 0 (sem multa)
            if (  $data->fine > 0  )
            {
                $hasFine = 2;
            }
            else
            {
                $hasFine = 0;
            }
            $line .= DefaultFormat::formatField($hasFine, 'N', 1);
            // 067 - 070 - Percentual da multa
            $line .= DefaultFormat::formatField($data->fine, 'N', 4);

            // 071 - 081 - Identificação do título para o Banco
            $line .= DefaultFormat::formatField($data->bankInvoiceId, 'N', 11);

            // 082 - 082 - Digito verificador do nosso numero
            $dvNN = $this->digitoVerificador_nossonumero($data->wallet.DefaultFormat::formatField($data->bankInvoiceId, 'N', 11));
            $line .= DefaultFormat::formatField($dvNN, 'A', 1);
            
            // 083 - 092 - Desconto/Bonificação por dia 
            $line .= DefaultFormat::formatField(0, 'N', 10);
            
            // 093 - 093 - Condição de Bloqueto (1 Banco Emite e Processa, 2 Cliente emite e o banco processa )
            $line .= DefaultFormat::formatField(2, 'N', 1);

            // 094 - 094 - Débito automático
            $line .= DefaultFormat::formatField('N', 'A', 1);

            // 095 - 104 - Identificação da Operação No Banco (Brancos)
            $line .= DefaultFormat::formatField(' ', 'A', 10);

            // 105 - 105 - Identificação de Rateio de Crédito (Opcional)
            $line .= DefaultFormat::formatField(' ', 'A', 1);

            // 106 - 106 - Endereçamento para aviso de Débito automático em conta corrente (Opcional)
            $line .= DefaultFormat::formatField('2', 'N', 1);

            // 107 - 108 - Brancos
            $line .= DefaultFormat::formatField(' ', 'A', 2);

            // 109 - 110 - Identificação da Ocorrência
            $line .= DefaultFormat::formatField($this->getOccurrenceOption($data->occurrence), 'A', 2);
            

            // 111 - 120 - Seu número, Código identificador do título dentro da instituição.
            $line .= DefaultFormat::formatField($data->invoiceId, 'A', 10);

            // 121 - 126 - Data de vencimento. 'ddmmyy'
            $line .= DefaultFormat::formatField($data->maturityDate, 'N', 6);

            // 127 - 139 - Valor do Título.
            $line .= DefaultFormat::formatField($data->value, 'N', 13);

            // 140 - 142 - Banco encarregado da cobrança (Em Branco)
            $line .= DefaultFormat::formatField(' ', 'A', 3);

            // 143 - 147 - Agência Depositária (Em branco)
            $line .= DefaultFormat::formatField(' ', 'A', 5);

            // 148 - 149 -Espécie do titulo
            $line .= DefaultFormat::formatField($this->getEspecieTitulo($data->especie), 'N', 2);

            // 150 - 150 - Código aceite - N - Não aceite | A - Aceite
            $line .= 'N';

            // 151 - 156 - // Data emissão do título
            $line .=  DefaultFormat::formatField($data->emissionDate, 'N', 6);;

            // 157 - 158 - Código da primeira instrução.
            $line .= DefaultFormat::formatField(0, 'N', 2);

            // 159 - 160 - Código da segunda instrução.
            $line .= DefaultFormat::formatField(0, 'N', 2);

            // 161 - 173 - Valor a ser cobrado por dia de atraso
            $line .= DefaultFormat::formatField($data->interest, 'N', 13);

            // 174 - 179 - Data para concessão do desconto
            $line .= DefaultFormat::formatField($data->discountDate, 'N', 6);
    
            // 180 - 192 - Valor do desconto a ser concedido
            $line .= DefaultFormat::formatField($data->discount, 'N', 13);

            // 193 - 205 - Valor iof
            $line .= DefaultFormat::formatField('0', 'N', 13);

            // 206 - 218 - Valor abatimento a ser concedido ou cancelado
            $line .= DefaultFormat::formatField('0', 'N', 13);

            $businessPersonDocument = $MIOLO->getBusiness('basic', 'BusDocument');
            // 219 - 220 - Identifição do Tipo do Sacado
            if ( strtoupper($data->personType) == 'F')
            {
                $ts = '01';
            }
            else
            {
                $ts = '02';
            }
            $line .= DefaultFormat::formatField($ts, 'N', 2);

            // 221 - 234 - Número da inscrição ( número do CPF ou CGC )
            $line .= DefaultFormat::formatField($document->content, 'N', 14);

            // 235 - 274 - Nome do sacado
            $line .= DefaultFormat::formatField($document->personName, 'A', 40);  // nome da pessoa

            // 275 - 314 - Endereço sacado
            $line .= DefaultFormat::formatField($data->fullAddress, 'A', 40);

            // 315 - 326 - Mensagem à ser impressa no boleto - Em brancos
            $line .= DefaultFormat::formatField(' ', 'A', 12);

            // 327 - 334 - CEP do sacado
            $line .= DefaultFormat::formatField($data->zipCode, 'N', 8);
    
            // 335 - 394 - Sacador avalista
            $sacadoAvalista = '';

            // 335 - 349 - CPF ou CNPJ
            if ( strtoupper($data->personType) == 'F')
            {
                $documentAvalista = DefaultFormat::formatField($document->content, 'N', 11);
                $documentAvalista = substr($documentAvalista, 0, 9) . '0000' . substr($documentAvalista, 10, 2);
            }
            else
            {
                $documentAvalista = DefaultFormat::formatField($document->content, 'N', 15);
            }
            $line .= DefaultFormat::formatField(' ', 'A', 60);

            // 395 - 400 - Número Sequencial do Registro
            $line .= DefaultFormat::formatField($counter, 'N', 6);
            $lineS .= strToUpper( SAGU::stringToASCII($line) ) . "\r\n";
        }
        $this->traillerValue = $traillerValue;
        $this->counter = $counter;
        return $lineS;
    }


   /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */

    public function trailler()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // 001 - 001 - Constante 9 - Obrigatório
        $line .= '9';
        // 002 - 394 - Em branco 
        $line .= DefaultFormat::formatField('', 'A', 393);
        // 395 - 400 - Número da sequência do registro.
        $counter = $this->counter + 1;
        $line .= DefaultFormat::formatField($counter, 'N', 6);
        
        $lineS .= strToUpper( SAGU::stringToASCII($line) );
        return $lineS;
    }

    private function digitoVerificador_nossonumero($numero)
    {
        $resto2 = $this->modulo_11($numero, 7, 1);
        $digito = 11 - $resto2;
        if ($digito == 10)
        {
            $dv = "P";
        }
        elseif($digito == 11)
        {
            $dv = 0;
        }
        else
        {
            $dv = $digito;
        }
        return $dv;
    }

    private function getOccurrenceOption ( $occurrence = null ) 
    {
        /*
        01..Remessa
        02..Pedido de baixa
        03..Pedido de Protesto Falimentar
        04..Concessão de abatimento
        05..Cancelamento de abatimento concedido
        06..Alteração de vencimento
        07..Alteração do controle do participante
        08..Alteração de seu número
        09..Pedido de protesto
        18..Sustar protesto e baixar Título
        19..Sustar protesto e manter em carteira
        22..Transferência Cessão crédito ID. Prod. 10
        23..Transferência entre Carteiras
        24..Dev. Transferência entre Carteiras
        31..Alteração de outros dados
        35..Desagendamento do débito automático
        68..Acerto nos dados do rateio de Crédito
        69..Cancelamento do rateio de crédito.
        */
        $occurrences = array ( '01', '02', '03', '04', '05', '06', '07', '08', '09', '18', '19', '22', '23', '24', '31', '35', '68', '69' );
        if ( in_array($occurrence, $occurrences) != false )
        {
            return $occurrence;
        }
        else
        {
            return '01';
        }
    }

    private function getEspecieTitulo ( $especie = null )
    {
        /*
        01-Duplicata
        02-Nota Promissória
        03-Nota de Seguro
        04-Cobrança Seriada
        05-Recibo
        10-Letras de Câmbio
        11-Nota de Débito
        12-Duplicata de Serv.
        99-Outros
         */
        $especies = array ( '01', '02', '03', '04', '05', '10', '11', '12', '99' );
        if ( in_array($especie, $especies) != false )
        {
            return $especie;
        }
        else
        {
            return '01';
        }
    }
    public function updateInvoicesRemittanceField($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $business = $MIOLO->getBusiness($module, 'BusRemittanceInvoice237');
        $data->remittanceSequence = $this->remittanceSequence;
        $business->updateInvoicesRemittanceField($data);
    }
}
?>
