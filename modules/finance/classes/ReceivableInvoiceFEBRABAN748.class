<?php

    $MIOLO  = MIOLO::getInstance();
    $MIOLO->uses('db/BusPrintInvoice.class', 'finance');
 
/**
 *
 * Class to generate the file for export about automatic debit
 *
 * This class generates the automatic debit for bank 748 - BANSICREDI 
 * (Brazilian bank registered on Central Bank of Brazil)
 * This file follows the rules of document "Regulamentação do Padrão FEBRABAN para o 
 * intercâmbio de informações através de arquivos 'ASCII'" created on year 2000.
 *
 */
class ReceivableInvoiceFEBRABAN748 extends BusinessFinanceBusPrintInvoice
{
     
     /**
     * receivable invoice file to database
     *
     * @param: $data: string to break and analyze
     *
     * @return (boolean): True if succeed, otherwise false
     *
     * @author  Eduardo Beal Miglioransa [eduardo@solis.coop.br]
     */

    public function generateBankInvoiceId($data, $commit = true)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance';

        $businessCompany     = $MIOLO->getBusiness('basic', 'BusCompany');
        $dataCompany         = $businessCompany->getCompany(DEFAULT_COMPANY_CONF);

        $actualDate    = getDate();
        // ano atual para nosso número 'yy';
        $actualYear   = substr($actualDate[year], 2, 2);
        
        // este campo está dizendo se o número do banco é gerado
        //      pela agência ou pelo cedente 1 = agência
        //                                   2 a 9 = Cedente                            
        $optionBankInvoiceId = '7';
        
        if ($commit === true)
        {
            // Faz chamada com begin e commit ou rollback
            $keepGoing           = $this->executeBeginSql(true);
        }

        // numero sequencial para criação do nosso número
        $numberBankInvoiceId = $this->getNumberBankInvoiceId();
        $results             = $this->getPrintInvoice($data->invoiceId);

        // coloca zeros a esquerda caso não tenha - filial
        $results->branchNumber     = str_pad($results->branchNumber, 4, "0", STR_PAD_LEFT);
        // coloca zeros a esquerda caso não tenha - id filial - posto
        $results->branchNumberId   = str_pad($results->branchNumberId, 2, "0", STR_PAD_LEFT);
        // coloca zeros a esquerda caso não tenha - Número da conta
        $results->accountNumber = str_pad($results->accountNumber, 5, "0", STR_PAD_LEFT);
        
        $number =  $results->branchNumber . 
                   $results->branchNumberId .
                   $results->accountNumber .
                   $actualYear .
                   $optionBankInvoiceId . 
                   $numberBankInvoiceId;

        for($i = strlen((string)$number) ; $i > 0; $i-- ) 
        {
            $inverseNumber    =        strlen((string)$number) + 1 - $i;
            $rest = substr($number, - $inverseNumber, 1); // retorna 
            switch ($i) 
            {
               case 19:
                  $value[$i] = 2;
                  break;
               case 18:
                  $value[$i] = 3;
                  break;
               case 17:
                  $value[$i] = 4;
                  break;
               case 16:
                  $value[$i] = 5;
                  break;
               case 15:
                  $value[$i] = 6;
                  break;
               case 14:
                  $value[$i] = 7;
                  break;
               case 13:
                  $value[$i] = 8;
                  break;
               case 12:
                  $value[$i] = 9;
                  break;
               case 11:
                  $value[$i] = 2;
                  break;
               case 10:
                  $value[$i] = 3;
                  break;
               case 9:
                  $value[$i] = 5;
                  break;
               case 8:
                  $value[$i] = 5;
                  break;
               case 7:
                  $value[$i] = 6;
                  break;
               case 6:
                  $value[$i] = 7;
                  break;
               case 5:
                  $value[$i] = 8;
                  break;
               case 4:
                  $value[$i] = 9;
                  break;
               case 3:
                  $value[$i] = 2;
                  break;
               case 2:
                  $value[$i] = 3;
                  break;
               case 1:
                  $value[$i] = 4;
                  break;
            }
            
            //array com valores após multiplicação
            $multiValue[$i] = $rest * $value[$i];

        }
        // soma os valores 
        unset($totalValueSum);
        for($i = 1 ; $i <= strlen((string)$number); $i++)
        {
            $totalValueSum = $totalValueSum + $multiValue[$i];
        }
        // PEGA a diferença(resto) do cálculo dividido por 11 / gera digito
        $restValue = $totalValueSum / 11;
        $restValue = floor($restValue);
        $difference = $restValue * 11;
        $difference = $totalValueSum - $difference;
        // digito
        $digit = 11 - $difference;

        // Nosso número.
        $bankInvoiceId = $actualYear.$optionBankInvoiceId.$numberBankInvoiceId.$digit;

        $businessInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');
        $dataInvoice     = $businessInvoice->getReceivableInvoice($data->invoiceId);
        $dataInvoice->bankInvoiceId = $bankInvoiceId;
        $resultInvoice   = $businessInvoice->updateReceivableInvoice($dataInvoice);
        if(strlen((string)$resultInvoice) > 0)
        {
            if ($commit === true)
            {
                $this->executeCommitSql(true);
            }
            return $bankInvoiceId;
        }
        else
        {
            if ($commit === true)
            {
                $this->executeCommitSql(false);
            }
            return ;        
        }
    }

    /**
     * receivable invoice file to database
     *
     * @param: $data: string to break and analyze
     *
     * @return (boolean): True if succeed, otherwise false
     */
    public function receivableInvoiceFEBRABAN748()
    {
        parent::__construct();
    }
}
?>
