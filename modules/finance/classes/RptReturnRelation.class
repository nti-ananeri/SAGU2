<?php

/**
*
* This file handles the connection and actions for finBank table
*
* @author Giovani Murilo Dantas Correa [gmurilo@gmail.com]
*
* $version: $Id$
*
* \b Maintainers \n
* Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
* Daniel Afonso Heisler [daniel@solis.coop.br]
* Jamiel Spezia [jamiel@solis.coop.br]
* Rafael Luís Spengler [rafael@solis.coop.br]
* William Prigol Lopes [william@solis.coop.br]
* Eduardo Beal Miglioransa [eduardo@solis.coop.br]
*
* @since
* Class created on 18/10/2007
*
* \b Organization: \n
* iSolution - Soluções de Internet \n
* The iSolution TEAM
*
* \b CopyLeft: \n
* CopyLeft (L) 2007 iSolution - Soluções de Internet \n
*
* \b License \n
* Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
*
* \b History \n
* See history in CVS repository: http://isolution.inf.br   
*
**/

define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = 'finance';
$MIOLO->Uses('classes/fpdf/pdf.php', 'basic');

/**
 * Create header and footer information
 */
class RptReturnRelation extends PDF
{
    public function __construct($filters = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $this->useUserInfo = true;
        $this->title = strtoupper(_M('Return relation', 'finance'));
        parent::__construct($filters);
        $this->aliasNbPages();
        $this->generatePDF($filters);
    }

    public function generatePDF($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'finance';
        $filters->returnDate = date('dmY');
		$this->addPage('L', 'mm', 'A4');
		$this->ln();
        $this->cellSize[0] = 10;
        $this->cellSize[1] = 13;
        $this->cellSize[2] = 20;
        $this->cellSize[3] = 15;
        $this->cellSize[4] = 15;
        $this->cellSize[5] = 20;
        $this->cellSize[6] = 20;
        $this->cellSize[7] = $this->psize-array_sum($this->cellSize);
        $this->cellLb[0]   = 'N.°';
        $this->cellLb[1]   = _M('Person', 'basic');
        $this->cellLb[2]   = _M('Invoice', 'finance');
        $this->cellLb[3]   = _M('Payment', 'finance');
        $this->cellLb[4]   = _M('Maturity', 'finance');
        $this->cellLb[5]   = _M('Payed value', 'finance');
        $this->cellLb[6]   = _M('Value', 'finance');
        $this->cellLb[7]   = _M('Occurrence', 'finance');

		$bReturnInvoice = $MIOLO->getBusiness('finance', 'BusReturnInvoice');
		$invoices = $bReturnInvoice->getReturnInvoices($filters);
		$this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $fs = 8;
        foreach ( $this->cellSize as $item => $size )
        {
            while($this->getStringWidth($this->cellLb[$item])+2 > $size )
            {
                $fs -= 0.1;
        		$this->setFont(DEFAULT_REPORT_FONT, 'B', $fs);        
            }
            $this->cell($size, $this->lsize, $this->cellLb[$item], 1, 0, 'C');
    		$this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
            $fs = 8;
        }
        $this->ln();
		$this->setFont(DEFAULT_REPORT_FONT, '', 8);
		for($x = 0; $x < count($invoices); $x++)
		{
            foreach ( $this->cellSize as $item => $size )
            {
                if ( in_array($item, array(5,6)) )
                {
                    $this->cell($size, $this->lsize, SAGU::formatNumber($invoices[$x][$item]),1,0,'R');
                }
                else if ( $item == 0 )
                {
                    $this->cell($size, $this->lsize, $x+1, 1, 0, 'C');
                }
                else
                {
                    $this->cell($size, $this->lsize, $invoices[$x][$item], 1, 0, 'C');
                }
            }
            $totalReceivable += (float)$invoices[$x][5];
            $totalReceivableByType[$invoices[$x][7]] += (float)$invoices[$x][5];
            $types[$invoices[$x][7]]++;
			$this->ln();
		}

        $this->ln();
        foreach( $types as $item => $value)
        {
    		$this->setFont(DEFAULT_REPORT_FONT, 'BI', 8);
 	    	$this->cell(80, 8,$item.': ','','L',null);
            $this->cell(40, 8, 'Quantidade :'.$value,'','R',null);
            $total += $value;
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
 		    $this->cell(10, 8,'R$ ','','','L');
 		    $this->cell(30, 8,SAGU::formatNumber($totalReceivableByType[$item]),'','','R');
		    $this->ln();       
        }
		$this->setFont(DEFAULT_REPORT_FONT, 'BI', 8);
 		$this->cell(80, 8,'TOTAL','','L',null);
        $this->cell(40, 8, 'Quantidade :'.$total,'','R',null);
        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
 		$this->cell(10, 8,'R$ ','','','L');
 		$this->cell(30, 8,$totalReceivable,'','','R');
		$this->ln();       
		$this->output();
    }
}
?>
