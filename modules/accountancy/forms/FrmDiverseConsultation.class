<?php

/**
 * Accountancy Diverse Consultation form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a diverse consultation
 **/
class FrmDiverseConsultation extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Assorted queries', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $personIdLabel = new MText('personIdLabel', _M('Person id', $module).':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $field1[]      = $personIdLabel;
        $field1[]      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('personName'), 'basic', 'Person', null, null, true);

        $validators[] = new MIntegerValidator('personId');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);

        // First group 
        $field1[]  = $personName;
        $field1[]  = new MSeparator('');
        $fields1[] = new MHContainer('container1', $field1);
        $fields[]  = new MBaseGroup('mbgFilterPerson', _M('Filter for a person', $module), $fields1);

        $courseIdLabel = new MText('courseIdLabel', _M('Course id', $module).':');
        $courseIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $field2[]      = $courseIdLabel;
        $field2[]      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('courseVersion', 'courseName', 'unitId'), $module, 'CourseAccount', null, null, true);

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', 10);
        $field2[]      = $courseVersion;
        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $field2[]      = $courseName;
        
        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitIdLabel  = new MText('unitIdLabel', _M('Unit id', $module).':');
        $unitIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $field2_[]    = $unitIdLabel;
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), '', $business->listUnit());
        $unitId->setJsHint(_M('Enter the unit code',$module));
        $field2_[]    = $unitId;


        // Second group 
        $fields2[]  = new MHContainer('container2', $field2);
        $fields2[]  = new MHContainer('container2_', $field2_);
        $fields2_[] = new MVContainer('containerv1', $fields2);
        $fields[]   = new MBaseGroup('mbgFilterCourse', _M('Filter for a course', $module), $fields2_);

        $accountSchemeIdLabel = new MText('accountSchemeIdLabel', _M('Account scheme id', $module).':');
        $accountSchemeIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $field3[]             = $accountSchemeIdLabel;
        $field3[]             = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('accountSchemeDescription'), $module, 'AccountScheme', null, null, true);
        //$validators[]         = new MIntegerValidator('accountSchemeId');
        
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->accountSchemeDescription), '', FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setReadOnly(true);
        $field3[]                 = $accountSchemeDescription;

        $costCenterIdLabel = new MText('costCenterIdLabel', _M('Cost center id', $module).':');
        $costCenterIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $field3_[]         = $costCenterIdLabel;
        $field3_[]         = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId', $data->costCenterId), '', FIELD_LOOKUPFIELD_SIZE, null, null, array('costCenterDescription'), $module, 'CostCenter', null, null, true);
        //$validators[]      = new MIntegerValidator('costCenterId');
        
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->costCenterDescription), '', FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $field3_[]             = $costCenterDescription;


        // Third group 
        $fields3[]  = new MHContainer('container2', $field3);
        $fields3[]  = new MHContainer('container3_', $field3_);
        $fields3_[] = new MVContainer('containerv2', $fields3);
        $fields[]   = new MBaseGroup('mbgFilterAccountScheme', _M('Filter for account scheme or cost center', $module), $fields3_);
        
        $fields[] = new MSeparator('');
        $fields[] = new MButton('btnSearch',_M('Search', $module));
        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnSearch_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $personId        = $this->getFormValue('personId');
        $courseId        = $this->getFormValue('courseId');
        $courseVersion   = $this->getFormValue('courseVersion');
        $unitId          = $this->getFormValue('unitId');
        $accountSchemeId = $this->getFormValue('accountSchemeId');
        $costCenterId    = $this->getFormValue('costCenterId');

        if (strlen((string)$personId)>0)
        {
            $filled['personConsultation'] = $personId;
        }
        
        if (strlen((string)$courseId)>0)
        {
            if (strlen((string)$courseVersion)>0)
            {
                if (strlen((string)$unitId)>0)
                {
                    $filled['courseConsultation'] = $courseId;
                }
            }
        }

        if (strlen((string)$accountSchemeId)>0)
        {
            $filled['accountSchemeConsultation'] = $accountSchemeId;
        }
        
        if (strlen((string)$costCenterId)>0)
        {
            $filled['costCenterConsultation'] = $costCenterId;
        }

        if (count($filled)>1)
        {
            $this->addError(_M('More than one search field is filled. Please fill one field by search.', $module));
        }
        else
        {
            if ( is_array($filled) )
            {
                $fkeys = array_keys($filled);
                if ($fkeys[0] == 'personConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'courseConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'accountSchemeConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'costCenterConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
            }

        }
     }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function personConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();
        
        $business = $MIOLO->getBusiness($module, 'BusDiverseConsultation');
        
        $businessPerson      = $MIOLO->getBusiness('basic', 'BusPerson');
        $filters->personName = $businessPerson->getPersonName($filters->personId);
        
        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('New search', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Balances for', $module) . ':</b> ' . $filters->personId . ' - ' . $filters->personName);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);
        

        list (
               $balanceValue,
               $balanceDate
              ) = $business->getPersonCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Open balance at', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
                            array(INCOME_FORECAST_IDENTIFIER, _M('Source', $module) . ': ' . _M('Income forecast', $module)),
                            array(ENTRY_IDENTIFIER,           _M('Source', $module) . ': ' . _M('Entry', $module))
                        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationPerson', $filters);
            $data = $business->getPersonBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);
            
            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }
       
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function courseConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();
        
        $business = $MIOLO->getBusiness($module, 'BusDiverseConsultation');
        
        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('New search', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Balances for', $module) . ':</b> ' . $filters->courseId . ' - ' . $filters->courseName);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);
        
        list (
               $balanceValue,
               $balanceDate
              ) = $business->getCourseCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Open balance at', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);

        $sources = array(
                            array(INCOME_FORECAST_IDENTIFIER, _M('Source', $module) . ': ' . _M('Income forecast', $module)),
                            array(ENTRY_IDENTIFIER,           _M('Source', $module) . ': ' . _M('Entry', $module))
                        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCourse', $filters);
            $data = $business->getCourseBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);
            
            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function accountSchemeConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();
        
        
        $business = $MIOLO->getBusiness($module, 'BusDiverseConsultation');
        
        $businessAccountScheme             = $MIOLO->getBusiness($module, 'BusAccountScheme');
        $filters->accountSchemeDescription = $businessAccountScheme->getAccountScheme($filters->accountSchemeId);
        $filters->accountSchemeDescription = $filters->accountSchemeDescription->description;
        
        
        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('New search', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Balances for', $module) . ':</b> ' . $filters->accountSchemeId . ' - ' . $filters->accountSchemeDescription);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);
        

        list (
               $balanceValue,
               $balanceDate
              ) = $business->getAccountSchemeCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Open balance at', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
                            array(INCOME_FORECAST_IDENTIFIER, _M('Source', $module) . ': ' . _M('Income forecast', $module)),
                            array(ENTRY_IDENTIFIER,           _M('Source', $module) . ': ' . _M('Entry', $module))
                        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationAccountScheme', $filters);
            $data = $business->getAccountSchemeBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);
            
            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function costCenterConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();

        $business = $MIOLO->getBusiness($module, 'BusDiverseConsultation');
        
        $businessCostCenter             = $MIOLO->getBusiness($module, 'BusCostCenter');
        $filters->costCenterDescription = $businessCostCenter->getCostCenter($filters->costCenterId);
        $filters->costCenterDescription = $filters->costCenterDescription->description;
        
        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('New search', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Balances for', $module) . ':</b> ' . $filters->costCenterId . ' - ' . $filters->costCenterDescription);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
                            array(INCOME_FORECAST_IDENTIFIER, _M('Source', $module) . ': ' . _M('Income forecast', $module)),
                            array(ENTRY_IDENTIFIER,           _M('Source', $module) . ': ' . _M('Entry', $module))
                        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCostCenter', $filters);
            $data = $business->getCostCenterBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);
            
            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }

        
    }


    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data->personId                 = $this->getFormValue('personId');
        $data->personName               = $this->getFormValue('personName');
        $data->courseId                 = $this->getFormValue('courseId');
        $data->courseName               = $this->getFormValue('courseName');
        $data->courseVersion            = $this->getFormValue('courseVersion');
        $data->unitId                   = $this->getFormValue('unitId');
        $data->accountSchemeId          = $this->getFormValue('accountSchemeId');
        $data->accountSchemeDescription = $this->getFormValue('accountSchemeDescription');
        $data->costCenterId             = $this->getFormValue('costCenterId');
        $data->costCenterDescription    = $this->getFormValue('costCenterDescription');
        return $data;
    }
}
?>
