<?php
/**
 * Generate IRRF
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to show the agreements
 **/
class FrmGenerateIRRF extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Generate IRRF', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $businessFile = $MIOLO->getBusiness('finance', 'BusFile');
        $dataGrid = $businessFile->listFinanceFile();
            
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');

        $fields[] = $toolBar;

        $grdGenerateIRRF = $MIOLO->getUI()->getGrid($module, 'GrdGenerateIRRF');
        $grdGenerateIRRF->setData($dataGrid);
        
        if(strlen((string)$grdGenerateIRRF->fileId) == 0)
        {
            $fieldPerson = new MText('information', _M('List all IRRF not processed', $module) );
            $field = new MDiv('divOptions', $fieldPerson, null, 'align="center"');
            $fields[] = $field;
        }

        $fileId   = $grdGenerateIRRF->fileId;
        $fileName = $grdGenerateIRRF->fileName;

        $fields[]  = new MHiddenField('fileId', $fileId);
        $fields[]  = new MHiddenField('fileName', $fileName);

        if(is_array($grdGenerateIRRF->toPrint[1]))
        {
             $fields2[] = new MTextLabel('toPrint', _M('File generated for', $module) . ' :');
            foreach ( $grdGenerateIRRF->toPrint as $key => $d )
            {
                $text = '<b>'. $key .' - '.  $d[0] .' - '. $d[1] .'</b>';
                $fields2[] = new MTextLabel('toPrint'.$key, $text);

            }
        $fields[] = new mvContainer( 'cont', $fields2 );
        }
        
        if(strlen((string)$grdGenerateIRRF->fileId) == 0 )
        {
            $fields[] = $grdGenerateIRRF;
        }

        if ($validators)
        {
            $this->setValidators($validators);
        }
        $this->setFields($fields);

        $this->setShowPostButton(false);
    }

    
    public function btnGenerateSelected_click()
    {


        $this->btnSave_click();
    }
    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $fileId   = $this->fileId->value;
        $fileName = $this->fileName->value;
//        $execute  = MIOLO::_request('execute');

        $file     = SAGUFile::getFileBody($fileId);
        if (strlen((string)$file) > 0 )
        {
            $sucess = new MText('text', '<b>' . _M('Sucess, file @1 generated ! Click in button \'Get file\' to download file.', $module, $fileName ) . '</b>' );
            $this->addField(new MDiv('divSucess', $sucess, null, 'align=center'));
            $this->addField(new MHiddenField('hiddenDataFile', urlencode($file)));
            $this->addField(new MHiddenField('hiddenDataFileName', urlencode($fileName)));
            $this->addField(new MSeparator(''));
            $button = new MButton('btnFile', _M('Get file', $module));
            $this->addField(new MDiv('divButton', $button, null, 'align=center'));
            $this->addField(new MSeparator(''));

            $businessFile = $MIOLO->getBusiness('finance', 'BusFile');
            $data = $businessFile->getFinanceFile($fileId);
//            $data->fileId = $fileId;
            $data->isProcessed = DB_TRUE;
            $ok = $businessFile->updateFinanceFile($fileId);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $vars['personId'] = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

    }
   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $file = urldecode(stripslashes($this->getFormValue('hiddenDataFile')));
        $fileName = urldecode(stripslashes($this->getFormValue('hiddenDataFileName')));
        SAGU::returnAsFile($fileName, $file, 'text/remittance-041');
    }
}

?>
