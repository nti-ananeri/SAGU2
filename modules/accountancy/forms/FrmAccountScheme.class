<?php
/**
 *
 * This file handles the connection and actions for accAccountScheme table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accAccountScheme table
 */
class FrmAccountScheme extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        
        $fields[] = $toolBar;
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $accountSchemeId = MIOLO::_request('accountSchemeId');

            $business = $MIOLO->getBusiness($module, 'BusAccountScheme');
            $data     = $business->getAccountScheme($accountSchemeId);

            $fields[] = new MHiddenField('accountSchemeId', $accountSchemeId);
            $fields[] = new MTextLabel('accountSchemeId', $data->accountSchemeId, _M('Cost center id', $module));
        }
        
        if ( $function == 'insert' )
        {
            $accountSchemeId = new MTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), _M('Account scheme id', $module), 12);
            $accountSchemeId->setJsHint(_M('Enter the account scheme id', $module));                    
            $validators[]    = new MRequiredValidator('accountSchemeId','', 'required');
            $fields[]        = $accountSchemeId;            
            
        }
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->description), _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setJsHint(_M('Enter description', $module));        
        $validators[]             = new MRequiredValidator('accountSchemeDescription','', 'required');
        $fields[]                 = $accountSchemeDescription;
        

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'.$this->name.'.accountSchemeDescription.focus();');

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
        $this->description->value = $this->getFormValue('descriptionS') ? $this->getFormValue('accountSchemeDescriptionS') : '';
    }
    
        /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'accountSchemeId'    => MIOLO::_request('accountSchemeId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusAccountScheme');
        $ok = $business->deleteAccountScheme(MIOLO::_request('accountSchemeId'));

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusAccountScheme');

        if ( $function == 'update' )
        {
            $ok  = $business->updateAccountScheme($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $dataAccountScheme = $business->getAccountScheme($data->accountSchemeId);

            if (strlen((string)$dataAccountScheme->accountSchemeId)>0)
            {
                $opts    = array('accountSchemeId'=>$data->accountSchemeId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('accountSchemeIdS'=>$data->accountSchemeId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('The account scheme @1 already exists, do you want to edit that account scheme?', $module, $data->accountSchemeId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok  = $business->insertAccountScheme($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }

        if ( $ok )
        {
            $opts = array('accountSchemeIdS'=>$data->accountSchemeId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    
    public function getTypesData()
    {
        $data = new accAccountScheme();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->accountSchemeDescription->value;
        }

        return $data;
    }

}

?>
