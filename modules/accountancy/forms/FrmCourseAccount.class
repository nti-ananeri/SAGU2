<?php
/**
 *
 * This file handles the connection and actions for accCourseAccount table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accCourseAccount table
 */
class FrmCourseAccount extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $goto     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( strlen((string)$goto)>0 )
        {
            $toolBar->disableButton('tbBtnNew');
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
            $toolBar->disableButton('tbBtnSearch');
            $toolBar->disableButton('tbBtnBack');
            $toolBar->disableButton('tbBtnExit');

        }
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        
        $fields[] = $toolBar;
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        if ( in_array($function, array('update', 'delete')) )
        {
            $data->courseId      = MIOLO::_request('courseId');
            $data->courseVersion = MIOLO::_request('courseVersion');
            $data->unitId        = MIOLO::_request('unitId');          

            $business = $MIOLO->getBusiness($module, 'BusCourseAccount');
            $data     = $business->getCourseAccount($data);

        }


        $courseIdLabel = new Mtext('courseIdLabel', _M('Course',$module) . ':' );
        $courseIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $courseIdLabel->setClass('m-caption m-caption-required');
        $flds[]         = $courseIdLabel;

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), _M('',$module), FIELD_ID_SIZE, null, null, 'courseVersion, courseName', 'academic', 'courseVersion', null, null, true);
        $courseId->setJsHint(_M('Enter the course id',$module));
        $validators[] = new MRequiredValidator('courseId', _M('Course', $module), 'required');
        if ( $function == 'update' )
        {
            $courseId->setReadOnly(true);
        }
        $flds[]       = $courseId;
        
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), _M('',$module), 3);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Enter the course version',$module));
        $flds[]        = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $flds[]     = $courseName;
        
        $hctCourse = new MHContainer('hctCourse', $flds);
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;
        unset($flds);

        $business = $MIOLO->getBusiness('basic','BusUnit');
  
        $unitIdLabel = new Mtext('unitIdLabel', _M('Unit',$module) . ':' );
        $unitIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $unitIdLabel->setClass('m-caption m-caption-required');

        $flds[]         = $unitIdLabel;

        $unitId        = new MComboBox('unitId', $this->getFormValue('unitId',$data->unitId), _M('',$module), $business->listUnit(), false, '', FIELD_ID_SIZE);
        $unitId->setJsHint( _M('Choose the unit',$module) );
        $flds[]        = $unitId;
        $validators[]  = new MRequiredValidator('unitId', _M('Unit', $module), 'required');

        $hctUnit = new MHContainer('hctUnit', $flds);
        $hctUnit->setShowLabel(true);
        $fields[]  = $hctUnit;
        unset($flds);

        $accountSchemeIdLabel = new Mtext('accountSchemeIdLabel', _M('Account scheme',$module) . ':' );
        $accountSchemeIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $accountSchemeIdLabel->setClass('m-caption m-caption-required');
        $flds[]         = $accountSchemeIdLabel;

        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), _M('',$module), 12, null, null, 'accountSchemeDescription', $module, 'AccountScheme', null, null, true);
        $accountSchemeId ->setJsHint(_M('Enter the account scheme id',$module));
        $validators[]    = new MRequiredValidator('accountSchemeId', _M('Account scheme',$module), 'required');
        $flds[]           = $accountSchemeId;

        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescription->setReadOnly(true);
        $flds[]                     = $accountSchemeDescription;
        
        $hctAccountScheme = new MHContainer('hctAccountScheme', $flds);
        $hctAccountScheme->setShowLabel(true);
        $fields[]  = $hctAccountScheme;
        unset($flds);
        
        $costCenterIdLabel = new Mtext('costCenterIdLabel', _M('Cost center',$module) . ':' );
        $costCenterIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $costCenterIdLabel->setClass('m-caption m-caption-required');
        $flds[]        = $costCenterIdLabel;

        $costCenterId  = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId), _M('',$module), 12, null, null, 'costCenterDescription', $module, 'CostCenter', null, null, true);
        $costCenterId ->setJsHint(_M('Enter the cost center id',$module));
        $validators[]  = new MRequiredValidator('costCenterId', _M('Cost center',$module), 'required');
        $flds[]        = $costCenterId;

        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$data->costCenterDescription), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $costCenterDescription->setReadOnly(true);
        $flds[]                = $costCenterDescription;
        
        $hctCostCenter = new MHContainer('hctCostCenter', $flds);
        $hctCostCenter->setShowLabel(true);
        $fields[]  = $hctCostCenter;
        unset($flds);
    
        $fields[] = new MHiddenField('goto', $goto);
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        if (strlen((string)$goto)>0)
        {
            $this->setClose('javascript:window.close()');
        }
        else
        {
            $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        }

        $this->page->onLoad('document.'.$this->name.'.courseId.focus();');
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
    **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
        $this->description->value = $this->getFormValue('descriptionS') ? $this->getFormValue('courseAccountDescriptionS') : '';
    }
    
   /**
    * Event triggered when user chooses Delete from the toolbar
    */
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'           => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'courseId'        => MIOLO::_request('courseId'),
                        'courseVersion'   => MIOLO::_request('courseVersion'),
                        'unitId'          => MIOLO::_request('unitId'),
                        'accountSchemeId' => MIOLO::_request('accountSchemeId'),
                        'costCenterId'    => MIOLO::_request('costCenterId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts                = new AccCourseAccount();
        $opts->courseId      = MIOLO::_request('courseId');
        $opts->courseVersion = MIOLO::_request('courseVersion');
        $opts->unitId        = MIOLO::_request('unitId');

        $business = $MIOLO->getBusiness($module, 'BusCourseAccount');
        $ok = $business->deleteCourseAccount($opts);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCourseAccount');

        if ( $function == 'update' )
        {
            $ok  = $business->updateCourseAccount($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $dt->courseId      = $data->courseId;
            $dt->courseVersion = $data->courseVersion;
            $dt->unitId        = $data->unitId;
            $dataCourseAccount = $business->getCourseAccount($dt);
            if ((strlen((string)$dataCourseAccount->courseId)>0) && (strlen((string)$dataCourseAccount->courseVersion)>0) && (strlen((string)$dataCourseAccount->unitId)>0))
            {
                $opts    = array('courseId'=>$dataCourseAccount->courseId, 'courseVersion'=>$dataCourseAccount->courseVersion, 'unitId'=>$dataCourseAccount->unitId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('courseIdS'=>$dataCourseAccount->courseId, 'courseVersionS'=>$dataCourseAccount->courseVersion, 'unitIdS'=>$dataCourseAccount->unitId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('This course account already exists, do you want to edit that course account?', $module);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok  = $business->insertCourseAccount($data);
                $msg = MSG_RECORD_INSERTED;
            }
        }

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $goto_ = $this->getFormValue('goto');
                if (strlen((string)$goto_)>0)
                {
                    $url = $MIOLO->getActionURL( 'basic', 'html:scripts:sagu.js' );
                    $this->page->scripts->add($url);
                    $MIOLO->information(_M('Record inserted', $module), $goto_);
                }
                else
                {
                    $opts    = array('event'=>'tbBtnNew_click',
                                     'function'=>'insert');
    
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    
    public function getTypesData()
    {
        $data = new accCourseAccount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->courseAccountDescription->value;
        }

        return $data;
    }

}

?>
