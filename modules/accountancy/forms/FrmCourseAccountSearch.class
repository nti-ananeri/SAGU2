<?php
/**
 *
 * This file handles the connection and actions for accCourseAccount table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accCourseAccount table
 */
class FrmCourseAccountSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Search', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Define a course account scheme and cost center', $this->home, 'courseAccount-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $courseIdLabelS = new Mtext('courseIdLabelS', _M('Course',$module) . ':');
        $courseIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $courseIdLabelS;

        $courseIdS = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS',$data->courseIdS), _M('',$module), FIELD_ID_SIZE, null, null, 'courseVersionS, courseNameS', 'academic', 'courseVersion', null, null, true);
        $courseIdS->setJsHint(_M('Enter the course id',$module));
//        $validators[] = new MRequiredValidator('courseIdS','', 'required');
        $flds[]         = $courseIdS;

        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS',$data->courseVersionS), _M('',$module), 3);
        $courseVersionS->setJsHint(_M('Enter the course version',$module));
        $flds[]         = $courseVersionS;

        $courseNameS = new MTextField('courseNameS', $this->getFormValue('courseNameS',$data->courseNameS), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);
        $flds[]      = $courseNameS;
        
        $hctCourseS = new MHContainer('hctCourseS', $flds);
        $hctCourseS->setShowLabel(true);
        $fields[]   = $hctCourseS;
        unset($flds);

        $business = $MIOLO->getBusiness('basic','BusUnit');

        $unitIdLabelS = new Mtext('unitIdLabelS', _M('Unit',$module) . ':');
        $unitIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $unitIdLabelS;

        $unitIdS  = new MComboBox('unitIdS', $this->unitIdS->value, _M('',$module), $business->listUnit(), false, '', FIELD_ID_SIZE);
        $validators[] = new MIntegerValidator('unitIdS','', 'required');
        $unitIdS->setJsHint( _M('Choose the unit',$module) );
        $flds[]        = $unitIdS;

        $hctUnitS = new MHContainer('hctUnitS', $flds);
        $hctUnitS->setShowLabel(true);
        $fields[]  = $hctUnitS;
        unset($flds);

        $accountSchemeIdLabelS = new Mtext('accountSchemeIdLabelS', _M('Account scheme id',$module) . ':' );
        $accountSchemeIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $accountSchemeIdLabelS;

        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->getFormValue('accountSchemeIdS',$data->accountSchemeIdS), _M('',$module), 12, null, null, 'accountSchemeDescriptionS', $module, 'AccountScheme', null, null, true);
        $accountSchemeIdS ->setJsHint(_M('Enter the account scheme id',$module));
        $validators[]    = new MRequiredValidator('accountSchemeIdS',_M('Account scheme id',$module), 'required');
        $flds[]           = $accountSchemeIdS;

        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->getFormValue('accountSchemeDescriptionS',$data->accountSchemeDescriptionS), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $accountSchemeDescriptionS->setReadOnly(true);
        $flds[]                     = $accountSchemeDescriptionS;
        
        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', $flds);
        $hctAccountSchemeS->setShowLabel(true);
        $fields[]  = $hctAccountSchemeS;
        unset($flds);
       
        $costCenterIdLabelS = new Mtext('costCenterIdLabelS', _M('Cost center',$module) . ':');
        $costCenterIdLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[]         = $costCenterIdLabelS;
 
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), _M('',$module), 12, null, null, 'costCenterDescriptionS', $module, 'CostCenter', null, null, true);
        $costCenterIdS ->setJsHint(_M('Enter the cost center id',$module));
        $validators[]    = new MRequiredValidator('costCenterIdS',_M('Cost center',$module), 'required');
        $flds[]           = $costCenterIdS;

        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$data->costCenterDescriptionS), _M('',$module), FIELD_DESCRIPTION_SIZE);
        $costCenterDescriptionS->setReadOnly(true);
        $flds[]                     = $costCenterDescriptionS;
        
        $hctCostCenterS = new MHContainer('hctCostCenterS', $flds);
        $hctCostCenterS->setShowLabel(true);
        $fields[]  = $hctCostCenterS;
        unset($flds);        
        
        $fields[] = new MButton('btnSearch', _M('Search', $module));
        
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);        
        
        $filters->courseId        = $this->courseIdS->value;
        $filters->courseVersion   = $this->courseVersionS->value;
        $filters->unitId          = $this->unitIdS->value;
        $filters->accountSchemeId = $this->accountSchemeIdS->value;
        $filters->costCenterId    = $this->costCenterIdS->value;
        
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCourseAccountSearch', $filters);
        $business = $this->manager->getBusiness($module,'BusCourseAccount');
        $data = $business->searchCourseAccount($filters);
        $grdResults->setData($data);
        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
        $this->addField($grdResults); 
        
    }

}

?>
