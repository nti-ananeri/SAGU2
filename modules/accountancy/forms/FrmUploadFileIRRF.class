<?php

/**
 * @author Eduardo Beal Miglioransa [eduard@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmUploadFileIRRF extends MForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Upload file IRRF to server', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $toolBar = new MToolBar( 'toolBar', $MIOLO->getActionURL($module, $action) );

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave' );
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');

        // Favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Upload file IRRF to server', $this->home, 'uploadFileIRRF-16x16.png', true);
        }
        //fim favoritos
 
        $fields[] = $toolBar;

        $fields[] = new MFileField('uploadFile', $this->getFormValue('uploadFile', $data->uploadFile), _M('Upload file', $module));
        $validators[]= new MRequiredValidator('uploadFile', $data->uploadFile);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('send', _M('Send', $module), 'SUBMIT');
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
    }

    /**
     * Get this action when submit button on this form is clicked
     */
    public function send_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ($_FILES["uploadFile"]["error"] === 0)
        {

            $data->fileName  = $_FILES["uploadFile"]["name"];
            $data->fileType  = $_FILES["uploadFile"]["type"];
            $data->localPath = $_FILES["uploadFile"]["tmp_name"];
            $data->size      = $_FILES["uploadFile"]["size"];

        }
        else
        {
            $MIOLO->information(_M('Some problems occurred updating the file. Please, try again.', $module));
        }
        $businessFile = $MIOLO->getBusiness('finance', 'BusFile');
        $data->inputOrOutput = 'I';
        $data->fileType      = 'T';
        $data->isProcessed   = DB_FALSE;

        $dataFile = $businessFile->insertFinanceFile($data);
        if ($dataFile == false)
        {
            $MIOLO->information(_M('Some problems occurred on update the file. Please, try again.', $module));
        }
        else
        {
            if (SAGUFile::saveFileToLocal($data->localPath, $dataFile->fileId))
            {

                $args = array('fileId'=>$dataFile->fileId,
                              'bankAccountId'=>$data->bankAccountId
                             );
                $goProcessURL = $MIOLO->getActionURL($module, $action, null, $args);
                $MIOLO->information(_M('File uploaded with success. Please, click on "OK" button to continue this process', $module), $goProcessURL);
            }
        }
    }
   
    /**
     * Get this action when submit button on this form is clicked
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->getClass($module, 'UploadFileIRRF');
        
        $data->fileId        = MIOLO::_request('fileId');
        $data->bankAccountId = MIOLO::_request('bankAccountId');
        $data->operationId   = MIOLO::_request('operationId');
        
        $automaticDebit = new UploadFileIRRF($data);
        $returnInfo = $automaticDebit->returnInfoData();
        $this->addField(new MSeparator('<hr>'));
        $this->addField(new MDiv('fileDate', '<b>'._M('File date', $module).':</b> '.$returnInfo->returnDate), null);
        $this->addField(new MSeparator(''));
        $cols = array(_M('Line', $module), _M('Debit date', $module), _M('Value', $module), _M('Message', $module), _M('Invoice id', $module), _M('Process status', $module));
        $tableReturnInfo = new MTableRaw(_M('Return information', $module), $returnInfo->invoiceData, $cols);
        $tableReturnInfo->setAlternate(true);

        $this->addField($tableReturnInfo);
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
//        $data->fileId = $this->getFormValue('fileId');
 //       $data->operationId   = $this->getFormValue('operationId');
        
        return $data;
    }
}
?>
