<?php
/**
 *
 * This file handles view of Generate income forecast accounting file
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 */
class FrmGenerateIncomeForecastAccountingFile extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Generate income forecast accounting file', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnNew');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Generate income forecast accounting file', $this->home, 'generateIncomeForecastAccountingFile-16x16.png', true);
        }
        //fim favoritos
       
        $fields[] = $toolBar;

        // date
        $dateLabel = new MText('dateLabel', _M('Date', $module).':');
        $dateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $dateLabel->setClass('m-caption m-caption-required');
        $date      = new MCalendarField('date', $this->getFormValue('date',$data->date), '', FIELD_DATE_SIZE);
        $date->setJsHint(_M('Enter the date',$module));
        $validators[] = new MDATEDMYValidator('date', '', 'required');
        
        //partial check box
        $partialLabel = new MText('partialLabel', _M('Is partial', $module));
        $partial = new MCheckBox('partial', 'true', '', $this->getFormValue('partial', $data->partial));
        $fields[] = new MHContainer('hctLimitDate', array($dateLabel, $date, $partialLabel, $partial));

        $fields[] = new MButton('btnGenerate',_M('Generate',$module));
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_CONTAINER_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }

    /**
     * Event triggered when user chooses Generate button
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filters->date    = $this->getFormValue('date');
        $filters->partial = $this->getFormValue('partial');

        $lot      = substr($filters->date,0,2) . substr($filters->date,3,2);
        
        $business   = $MIOLO->getBusiness($module, 'BusGenerateIncomeForecastAccountingFile');
        
        foreach ( $business->getAccountSchemeIds() as $value )
        {
            $endOfAccount[$value[0]] = $value[1];
            $iniOfAccount[$value[0]] = $value[2];
        }
        
        foreach ( $business->getUnitAccountingCode() as $value )
        {
            $unitCode[$value[0]] = $value[1];
        }

        $previousInvoiceId = -1;
        $document          = 0;
        $line              = 0;
        $values = $business->getIncomeForecastData($filters);
        
        if (is_array($values[0]))
        {
            foreach ( $values as $value )
            {
                list (
                        $incomeForecastData->incomeForecastId,
                        $incomeForecastData->personId,
                        $incomeForecastData->personName,
                        $incomeForecastData->month,
                        $incomeForecastData->courseId,
                        $incomeForecastData->unitId,
                        $incomeForecastData->operationId,
                        $incomeForecastData->recordDate,
                        $incomeForecastData->value
                      ) = $value;
                      
                $line ++;
                if ( $line==100 )
                {
                  $line              = 1;
                  $previousInvoiceId = -1; //força troca de documento
                }
                
                $coursePrefix = $iniOfAccount[$incomeForecastData->courseId];
                
                if ( ! $coursePrefix )
                {
                    $msg  = _M('Account scheme for course @1 and unit @2 undefined', $module, $incomeForecastData->courseId, $incomeForecastData->unitId);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );           
                }

                $courseSuffix = $endOfAccount[$incomeForecastData->courseId];
                
                if ( ! $courseSuffix )
                {
                    $msg  = _M('Account scheme for course @1 and unit @2 undefined', $module, $incomeForecastData->courseId, $incomeForecastData->unitId);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );           
                }
                
                $unitId = $unitCode[$incomeForecastData->unitId];

                if ( ! $unitId )
                {
                    $msg  = _M('Accounting code for unit @1 undefined', $module, $incomeForecastData->unitId);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Error', $module);
                    $MIOLO->error( $msg, $goto, $caption );           
                }

                $integration = $business->getIntegrationData($incomeForecastData->operationId);
                
                foreach ( $integration as $value )
                {
                    list (
                            $integrationData->externalIncomeForecastId,
                            $integrationData->operationTypeId,
                            $integrationData->debitAccount,
                            $integrationData->creditAccount,
                            $integrationData->operationDescription,
                            $integrationData->debitCostCenter,
                            $integrationData->creditCostCenter
                         ) = $value;
                         
            		/*******************************HARDCODE**************************/
            		$integrationData->debitAccount    = ereg_replace("UU", $unitId, $integrationData->debitAccount);
            		$integrationData->creditAccount   = ereg_replace("UU", $unitId, $integrationData->creditAccount);

            		$integrationData->debitAccount    = ereg_replace("PPP", $coursePrefix, $integrationData->debitAccount);
            		$integrationData->creditAccount   = ereg_replace("PPP", $coursePrefix, $integrationData->creditAccount);

            		$integrationData->debitAccount    = ereg_replace("SSSSSSSS", $courseSuffix, $integrationData->debitAccount);
            		$integrationData->creditAccount   = ereg_replace("SSSSSSSS", $courseSuffix, $integrationData->creditAccount);
        
                    $value   = $incomeForecastData->value;

                	if ($value<0)
                	{
                	    $value *= (-1);

                	    $integrationData->operationDescription = _M('Reversal', $module) . ' ' . $integrationData->operationDescription;

                	    ACCOUNTING::commuteAccounts($integrationData->debitAccount, $integrationData->creditAccount, $integrationData->debitCostCenter, $integrationData->creditCostCenter, $limbo1, $limbo2);

                	    if ($integrationData->operationTypeId == 'C')
                	    {
                	        $integrationData->operationTypeId          = 'D';
                            $integrationData->externalIncomeForecastId = '101';
                	    }
                	    else
                	    {
                	      if ($integrationData->operationTypeId == 'D')
                		  {
                		      $integrationData->operationTypeId          = 'C';
                		      $integrationData->externalIncomeForecastId = '102';
                	      }
                	    }
                    }

                	$integrationData->operationDescription = $incomeForecastData->personId . '/' . 
                	                                         $incomeForecastData->month . ': ' . 
                	                                         $integrationData->operationDescription;

                	$content[] = ACCOUNTING::writeToSigaFile(
                                	                            $integrationData->externalIncomeForecastId,
                                	                            $integrationData->operationTypeId,
                                	                            $integrationData->debitAccount,
                                	                            $integrationData->creditAccount,
                                	                            $integrationData->operationDescription,
                                	                            $value,
                                                                $integrationData->debitCostCenter,
                                                                $integrationData->debitCostCenter,
                                                                $lot,
                                                                $document,
                                                                $line
                                                             );
                		
                }
            }
        }

		if (is_array($content))
        {
        	$business->updateIncomeForecasts($filters);
        	
            $fileContent = implode(chr(13) . chr(10), $content);
            $fileContent.= chr(13) . chr(10);
        }
        if (strlen((string)$fileContent)>0)
        {
            SAGU::returnAsFile(str_replace('/', '', $filters->date) . '.txt', $fileContent, 'text/accounting-file');
        }        
        else
        {
            $url = $MIOLO->getActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
            $MIOLO->information(_M('No income forecasts found to process', $module), $url);
        }
    }    
}

?>
