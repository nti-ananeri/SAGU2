<?php

/**
 *
 * This file handles the connection and actions for accAccountancyBalance table
 
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmAccountancyBalance extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        parent::__construct(_M('Accountancy balances', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business  = $MIOLO->getBusiness('basic', 'BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        //inclui todas as grids
        $business = $MIOLO->getBusiness($module, 'BusAccountBalance');
        $years    = $business->getTopDates();

        $count = count($years);
        if ( $count > 0 )
        {
            $x   = 0;
            $y1  = 0;
            $y2  = 0;
            $mid = (int)($count / 2);
            foreach ( $years as $row )
            {
                if ( $x++ < $mid )
                {
                    $data1[$y1][0] = $row[1];
                    $data1[$y1++][1] = _M('Until', $module) . ' ' . $row[1];
                }
                else
                {
                    $data2[$y2][0] = $row[1];
                    $data2[$y2++][1] = _M('Until', $module) . ' ' . $row[1];
                }
            }

            $grdResults1 = $MIOLO->getUI()->getGrid($module, 'GrdAccountancyBalance');
            //$grdResults1->setTitle('');
            $grdResults1->setData($data1);

            $grdResults2 = $MIOLO->getUI()->getGrid($module, 'GrdAccountancyBalance');
            //$grdResults2->setTitle('');
            $grdResults2->setData($data2);

            $bsg1 = new MBasePanel('bsg1', '', array($grdResults1));
            $bsg1->showLabel = false;
            $bsg1->width     = '49%';

            $bsg2 = new MBasePanel('bsg2', '', array($grdResults2));
            $bsg2->showLabel = false;
            $bsg2->width     = '49%';

            $fields[] = new MHContainer('hctResult', array($bsg1, $bsg2));

            $fields[] = new Separator('');
        }

        $lastDate = $business->getLastDate();
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        //Processa saldos contábeis
        $initialDateLabel1 = new MText('initialDateLabel1', _M('Initial base date', $module) . ':');

        $initialDate1 = new MCalendarField('initialDate1', $this->getFormValue('initialDate1', $this->initialDate1->value) ? $this->getFormValue('initialDate1', $this->initialDate1->value) : $lastDate, null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('initialDate1', '', 'optional');
        $initialDate1->setJsHint(_M('Enter the initial base date', $module));

        $separatorLabel1 = new MText('separatorLabel1', '&nbsp;');
        $separatorLabel1->setWidth(20);
 
        $limitDateLabel1 = new MText('limitDateLabel1', _M('Limit date', $module) . ':');

        $limitDate1   = new MCalendarField('limitDate1', $this->getFormValue('limitDate1', $this->limitDate1->value), null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('limitDate1', '', 'optional');
        $initialDate1->setJsHint(_M('Enter the limit date', $module));

        $btnProcess1 = new MLinkButton('btnProcess1', _M('Execute', $module));
        $btnProcess1->showLabel = false;

        $bsg3 = new MBasePanel('bsg3', _M('Process Accountancy Balances', $module), array($initialDateLabel1, $initialDate1, $separatorLabel1, $limitDateLabel1, $limitDate1, $separatorLabel1, $btnProcess1));
        $bsg3->showLabel = false;
        $bsg3->width     = '99%';

        $fields[] = $bsg3;
        $fields[] = new Separator('');

        //Visualiza Saldos Contábeis
        $initialDateLabel2 = new MText('initialDateLabel2', _M('Initial base date', $module) . ':');

        $initialDate2 = new MCalendarField('initialDate2', $this->getFormValue('initialDate2', $this->initialDate2->value) ? $this->getFormValue('initialDate2', $this->initialDate2->value) : $lastDate, null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('initialDate2', '', 'optional');
        $initialDate2->setJsHint(_M('Enter the initial base date', $module));

        $separatorLabel2 = new MText('separatorLabel2', '&nbsp;');
        $separatorLabel2->setWidth(20);
 
        $limitDateLabel2 = new MText('limitDateLabel2', _M('Limit date', $module) . ':');

        $limitDate2   = new MCalendarField('limitDate2', $this->getFormValue('limitDate2', $this->limitDate2->value), null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('limitDate2', '', 'optional');
        $initialDate2->setJsHint(_M('Enter the limit date', $module));

        $btnProcess2 = new MLinkButton('btnProcess2', _M('Execute', $module));
 
        $bsg4 = new MBasePanel('bsg4', _M('View Accountancy Balances', $module), array($initialDateLabel2, $initialDate2, $separatorLabel2, $limitDateLabel2, $limitDate2, $separatorLabel2, $btnProcess2));
        $bsg4->showLabel = false;
        $bsg4->width     = '99%';

        $fields[] = $bsg4;
        $fields[] = new Separator('');

        //Visualiza Saldos Contábeis - Previsões
        $initialDateLabel3 = new MText('initialDateLabel3', _M('Initial base date', $module) . ':');

        $initialDate3 = new MCalendarField('initialDate3', $this->getFormValue('initialDate3', $this->initialDate3->value) ? $this->getFormValue('initialDate3', $this->initialDate3->value) : $lastDate, null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('initialDate3', '', 'optional');
        $initialDate3->setJsHint(_M('Enter the initial base date', $module));

        $separatorLabel3 = new MText('separatorLabel3', '&nbsp;');
        $separatorLabel3->setWidth(20);

        $limitDateLabel3 = new MText('limitDateLabel3', _M('Limit date', $module) . ':');

        $limitDate3   = new MCalendarField('limitDate3', $this->getFormValue('limitDate3', $this->limitDate3->value), null, FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('limitDate3', '', 'optional');
        $initialDate3->setJsHint(_M('Enter the limit date', $module));

        $btnProcess3 = new MLinkButton('btnProcess3', _M('Execute', $module));
 
        $bsg5 = new MBasePanel('bsg4', _M('View Accountancy Balances - Forecasts', $module), array($initialDateLabel3, $initialDate3, $separatorLabel3, $limitDateLabel3, $limitDate3, $separatorLabel3, $btnProcess3));
        $bsg5->showLabel = false;
        $bsg5->width     = '99%';

        $fields[] = $bsg5;
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }
    
    /**
     * Event triggered when user chooses Process1
     **/
    public function btnProcess1_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts['initialDate'] = MIOLO::_request('initialDate1');
        $opts['limitDate']   = MIOLO::_request('limitDate1');

        if ( strlen((string)$opts['initialDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('initial', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        elseif ( strlen((string)$opts['limitDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('limit', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $this->page->mGoto($MIOLO->getActionURL($module, 'main:process:generateBalances', null, $opts));
        }
    }
    
    /**
     * Event triggered when user chooses Process2
     **/
    public function btnProcess2_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts['type']        = 'ALL';
        $opts['initialDate'] = MIOLO::_request('initialDate2');
        $opts['limitDate']   = MIOLO::_request('limitDate2');

        if ( strlen((string)$opts['initialDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('initial', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        elseif ( strlen((string)$opts['limitDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('limit', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $this->page->mGoto($MIOLO->getActionURL($module, 'main:report:forecastAndInvoice', null, $opts));
        }
    }
    
    /**
     * Event triggered when user chooses Process3
     **/
    public function btnProcess3_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts['initialDate'] = MIOLO::_request('initialDate3');
        $opts['limitDate']   = MIOLO::_request('limitDate3');

        if ( strlen((string)$opts['initialDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('initial', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        elseif ( strlen((string)$opts['limitDate']) == 0 )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Type the @1 date', $module, _M('limit', $module)) . '!');
            $lblMsg1->color = 'red';
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $this->page->mGoto($MIOLO->getActionURL($module, 'main:report:forecastAndInvoice', null, $opts));
        }
    }
}

?>
