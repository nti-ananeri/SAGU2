<?php

/**
 *
 * This file handles the connection and actions for person balances table
 
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmPersonBalance extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        parent::__construct(_M('Stored person balances', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $action          = MIOLO::getCurrentAction();
        $source          = MIOLO::_request('source');
        $balanceDate     = MIOLO::_request('balanceDate');
        $accountSchemeId = MIOLO::_request('accountSchemeId');
        $dateType        = MIOLO::_request('dateType');
        $type            = MIOLO::_request('type');
        $courseId        = MIOLO::_request('courseId');
        $unitId          = MIOLO::_request('unitId');
        $personBalance   = MIOLO::_request('personBalance');

        $business  = $MIOLO->getBusiness('basic', 'BusConfig');
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        //inclui todas as grids
        $business = $MIOLO->getBusiness($module, 'BusPersonBalance');
        $personBalance = $business->getPersonBalance($balanceDate, $accountSchemeId, $source, $courseId, $unitId);

        if ( count($personBalance) > 0 )
        {

            foreach ( $personBalance as $row )
            {
                list (
                        $personId,
                        $personName,
                        $value
                     ) = $row;
                $matrix[] = array($personId, $personName, FINANCE::formatFinanceReportNumber($value));
            }

            $columns[] = "<div style=\"text-align: center;\">" . _M('Code', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Person', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Value', $module) . "</div>";

            $tableRaw = new MTableRaw(null, $matrix, $columns);
            $tableRaw->setAlternate(true);
            $tableRaw->addStyle('width', '100%');

            $tableRaw->setCellAttribute(0, 0, 'width', '20%');
            $tableRaw->setCellAttribute(0, 1, 'width', '60%');
            $tableRaw->setCellAttribute(0, 2, 'width', '20%');

            $fields[] = $tableRaw;

        }

        $valueTotal = $business->getTotalPersonBalance($balanceDate, $accountSchemeId, $source, $courseId, $unitId);

        $fields[]   = new Separator();
        $title      = new MDiv('div1', '<b>' . _M('Balance: ', $module) . '<i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i></b>', null, 'align=left');
        $title->addStyle('width', '100%');
        $tableRaw   = new MTableRaw($title, null, array(array()));
        $fields[]   = $tableRaw;

        $fields[]   = new Separator();
        $btnBack    = new MButton('btnBack', _M('Back', $module));
        $divButtons = new MDiv('divButtons', $btnBack, null, 'align=center');
        $divButtons->addStyle('text-align', 'center');
        $fields[]   = $divButtons;
        $fields[]   = new Separator();

        if ( count($fields) > 0 )
        {
            $this->setFields($fields);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

    }

    /**
     * Event triggered when user chooses button Back
     **/
    public function btnBack_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $opts['source']          = MIOLO::_request('source');
        $opts['balanceDate']     = MIOLO::_request('balanceDate');
        $opts['accountSchemeId'] = MIOLO::_request('accountSchemeId');
        $opts['dateType']        = MIOLO::_request('dateType');
        $opts['type']            = MIOLO::_request('type');
        $opts['personBalance']   = MIOLO::_request('personBalance');
        $opts['courseId']        = MIOLO::_request('courseId');
        $opts['unitId']          = MIOLO::_request('unitId');

        $this->page->mGoto($MIOLO->getActionURL($module, 'main:report:storedBalances', null, $opts));
    }

}

?>
