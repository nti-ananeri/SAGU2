<?php
/**
 *
 * This file handles the connection and actions for accAccountancyBalance table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmReasonAssistantOfFutureExercisesResults extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Generate reason assistant of future exercise results', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        // Begin page
        $beginPage = new MTextField('beginPage', is_null($this->getFormValue('beginPage', $data->beginPage)) ? 1 : $this->getFormValue('beginPage', $data->beginPage), _M('Begin page', $module), FIELD_ID_SIZE);
        $beginPage->setJsHint(_M('Enter the begin page of document', $module));
        $fields[] = $beginPage;
        $validators[] = new MRangeValidator('beginPage', '', '1', '9999999999999', 'i', 'REQUIRED');
        
        // End page
        $endPage   = new MTextField('endPage', $this->getFormValue('endPage', $data->endPage), _M('End page', $module), FIELD_ID_SIZE);
        $endPage->setJsHint(_M('Enter the end page of document', $module));
        $fields[] = $endPage;
        $validators[] = new MRangeValidator('endPage', '', '1', '9999999999999', 'i', 'REQUIRED');
        
        // emission date
        $emissionDateLabel = new MText('emissionDateLabel', _M('Emission date', $module).':');
        $emissionDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $emissionDateLabel->setClass('m-caption m-caption-required');
        $emissionDate      = new MCalendarField('emissionDate', $this->getFormValue('emissionDate',$data->emissionDate) ? $this->getFormValue('emissionDate',$data->emissionDate) : date(MASK_DATE_PHP), '', FIELD_DATE_SIZE);
        $emissionDate->setJsHint(_M('Enter the emission date',$module));
        $validators[] = new MDATEDMYValidator('emissionDate', _M('Emission date', $module), 'required');
        $fields[] = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));

        // beginDate
        $beginDateLabel = new MText('beginDateLabel', _M('Begin date', $module).':');
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginDateLabel->setClass('m-caption m-caption-required');        
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), '', FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required');
        $fields[] = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        
        // EndDate
        $endDateLabel = new MText('endDateLabel', _M('End date', $module).':');
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endDateLabel->setClass('m-caption m-caption-required');        
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), '', FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        $validators[] = new MDATEDMYValidator('endDate', _M('End date', $module), 'required');
        $fields[] = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        
        //begin account scheme
        $beginAccountSchemeLabel = new MText('beginAccountSchemeLabel', _M('Begin account scheme', $module) . ':');
        $beginAccountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);

        $beginAccountSchemeId = new MLookupTextField('beginAccountSchemeId', $this->getFormValue('beginAccountSchemeId', $data->beginAccountSchemeId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
            'beginAccountSchemeName',
            'accountancy', 'AccountScheme', null, null, true);
        $beginAccountSchemeId->setJsHint(_M('Enter the begin account scheme code', $module));

        $beginAccountSchemeName = new MTextField('beginAccountSchemeName', null, '', FIELD_DESCRIPTION_SIZE);
        $beginAccountSchemeName->setReadOnly(true);
        $beginAccountSchemeName->setJsHint(_M('Account scheme name', $module));

        $hctbeginAccountScheme  = new MHContainer('hctbeginAccountScheme', array($beginAccountSchemeLabel, $beginAccountSchemeId, $beginAccountSchemeName));
        $hctbeginAccountScheme->setShowLabel(true);
        $fields[] = $hctbeginAccountScheme;
        
        //end Course
        $endAccountSchemeLabel = new MText('endAccountSchemeLabel', _M('End account scheme', $module) . ':');
        $endAccountSchemeLabel->setWidth(FIELD_CONTAINER_SIZE);

        $endAccountSchemeId = new MLookupTextField('endAccountSchemeId', $this->getFormValue('endAccountSchemeId', $data->endAccountSchemeId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
            'endAccountSchemeName',
            'accountancy', 'AccountScheme', null, null, true);
        $endAccountSchemeId->setJsHint(_M('Enter the end account scheme code',$module));

        $endAccountSchemeName = new MTextField('endAccountSchemeName', null, '', FIELD_DESCRIPTION_SIZE);
        $endAccountSchemeName->setReadOnly(true);
        $endAccountSchemeName->setJsHint(_M('Account Scheme name', $module));

        $hctBeginAccountScheme  = new MHContainer('hctEndAccountScheme', array($endAccountSchemeLabel, $endAccountSchemeId, $endAccountSchemeName));
        $hctBeginAccountScheme->setShowLabel(true);
        $fields[] = $hctBeginAccountScheme;

        $fields[] = new Separator('');
        $fields[] = new MButton('generate', _M('Generate', $module));
        $fields[] = new Separator('');
       

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(140);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setShowPostButton(false);
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function generate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->beginPage            = $this->getFormValue('beginPage');
        $data->endPage              = $this->getFormValue('endPage');
        $data->emissionDate         = $this->getFormValue('emissionDate');
        $data->beginDate            = $this->getFormValue('beginDate');
        $data->endDate              = $this->getFormValue('endDate');
        $data->beginCourse          = $this->getFormValue('beginCourseId');
        $data->endCourse            = $this->getFormValue('endCourseId');
        $data->beginAccountSchemeId = $this->getFormValue('beginAccountSchemeId');
        $data->endAccountSchemeId   = $this->getFormValue('endAccountSchemeId');

        $MIOLO->getClass($module, 'RptReasonAssistantOfFutureExercisesResults');
        $report = new RptReasonAssistantOfFutureExercisesResults($data);
    }
}
?>
