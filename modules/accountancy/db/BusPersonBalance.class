<?php
/**
 *
 * This file handles the connection and actions for accPersonBalance table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accAccountBalance table
 **/
class BusinessAccountancyBusPersonBalance extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusPersonBalance()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all distinct values from onde person
     *
     * @param: balanceDate(date): filtered top date
     * @param: accountSchemeId(text): account scheme
     * @param: source(text): stored balance type: forecast or entry
     *
     * @returns (array): Return an array with respective data
     *
     **/
    public function getPersonBalance($balanceDate, $accountSchemeId, $source, $courseId=null, $unitId=null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $args[] = $balanceDate;
        $args[] = $source;

        if ( strlen((string)$courseId)>0 )
        {
            $par    .= ' AND A.courseId = ? ';
            $args[]  = $courseId;
        }

        if ( strlen((string)$unitId)>0 )
        {
            $par    .= ' AND A.unitId = ? ';
            $args[]  = $unitId;
        }

        $sql = 'SELECT A.personId,
                       getPersonName(A.personId),
                       round(A.value,' . REAL_ROUND_VALUE . ')
                  FROM accPersonBalance A
                 WHERE A.balanceDate = TO_DATE(?, \'' . MASK_DATE . '\')
                   AND A.source = ? ' . $par . '
                   AND A.accountSchemeId = ?
              ORDER BY A.personId';

        $args[] = $accountSchemeId;

        $result = $this->db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List all distinct top dates from accAccountBalance
     *
     * @param: balanceDate(date): filtered top date
     * @param: accountSchemeId(text): account scheme
     * @param: source(text): stored balance type: forecast or entry
     * @param: courseId(text): course to be filtered
     * @param: unitId(text): unit to be filtered
     *
     * @returns (array): Return an array with respective data
     *
     **/
    public function getTotalPersonBalance($balanceDate, $accountSchemeId, $source, $courseId=null, $unitId=null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $args[] = $balanceDate;
        $args[] = $source;

        if ( strlen((string)$courseId)>0 )
        {
            $par    .= ' AND A.courseId = ? ';
            $args[]  = $courseId;
        }

        if ( strlen((string)$unitId)>0 )
        {
            $par    .= ' AND A.unitId = ? ';
            $args[]  = $unitId;
        }

        $sql = 'SELECT round(sum(A.value),' . REAL_ROUND_VALUE . ')
                  FROM accPersonBalance A
                 WHERE A.balanceDate = TO_DATE(?, \'' . MASK_DATE . '\')
                   AND A.source = ? ' . $par . '
                   AND A.accountSchemeId = ?';

        $args[] = $accountSchemeId;

        $result = $this->db->query(SAGU::prepare($sql, $args));
        $result = $result[0][0];

        return $result;
    }

}
?>
