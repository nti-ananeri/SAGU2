<?php
/**
 *
 * This file handles the connection and actions for accCostCenter table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accCostCenter table
 **/
class BusinessAccountancyBusCostCenter extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusCostCenter()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCostCenter()
    {
        $sql = 'SELECT A.costCenterId,
                       A.description
                  FROM accCostCenter A
                  ORDER BY A.description';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,null));

        return ($result);

    }
    
    /**
     * Obtain the specified costCenter id data.
     *
     * @return If the specified courseId exists, returns an object (costCenter) containing its data.
     * Otherwise, returns null.
     *
     */
    function getCostCenter($costCenterId)
    {

        $sql = 'SELECT A.costCenterId,
                       A.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_DATE . '\'),
                       A.ipAddress
                  FROM accCostCenter A
                 WHERE A.costCenterId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, trim($costCenterId)));

        $costCenter = new accCostCenter();

        list ( $costCenter->costCenterId,
               $costCenter->description,
               $costCenter->userName,
               $costCenter->dateTime,
               $costCenter->ipAddress
             ) = $result[0];

        return $costCenter;
    }
    
    /**
     * Search for costCenter.
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCostCenter($data)
    {

        $sql = 'SELECT A.costCenterId,
                        A.description
                     FROM accCostCenter A';

        $where  = '';
        unset($args);

        if ( strlen((string)$data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }

        if ( strlen((string)$data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description . '%';
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                       ' ORDER BY A.description';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }
        
    /**
     * Insert a new accCostCenter.
     *
     * @param $data (object): Object (costCenter) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCostCenter($data)
    {

       $sql = 'INSERT INTO accCostCenter
                           (costCenterId,
                            description)
                     VALUES (?,?)';
        $args = array(
                       trim($data->costCenterId),
                       trim($data->description)
                      );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }
    
    /**
     * Update the specified costCenter data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCostCenter($data)
    {
        $sql    = 'UPDATE accCostCenter
                      SET description = ?
                    WHERE costCenterId = ?';

        $db     = $this->getDatabase();

        $args   = array(
                         trim($data->description),
                         trim($data->costCenterId)
                       );
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
               
    }
    
    /**
     * Delete the specified costCenter.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCostCenter($costCenterId)
    {
        $sql    = 'DELETE FROM accCostCenter
                    WHERE costCenterId = ?';


        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql,trim($costCenterId)));

        return $result;
    }
    
    /**
     * Import cost center from Siga system
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function importCostCenter()
    {

        $db = $this->getDatabase('siga');
        
        $sql = 'SELECT ctt_custo AS costCenterId, 
                       ctt_desc01 AS description
                  FROM ctt010';

        $db     = $this->getDatabase('siga');
        $result = $db->query(SAGU::prepare($sql,$args));

        if ( count($result) > 0 )
        {
            foreach ( $result as $row )
            {
                list ( $data->costCenterId,
                       $data->description ) = $row;

                $costCenter = $this->getCostCenter(trim($data->costCenterId));
                if ( strlen((string)$costCenter->costCenterId) == 0 )
                {
                    $this->insertCostCenter($data);
                }
                else
                {
                    $this->updateCostCenter($data);
                }
            }
            return true;
        }
        return false;
    }

}
?>
