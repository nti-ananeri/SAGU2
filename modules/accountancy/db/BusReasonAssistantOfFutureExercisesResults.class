<?php
/**
 *
 * This file handles the connection and actions for accDailyAssistantOfFutureExercisesResults table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to generate the reason assistant of future exercises document
 **/
class BusinessAccountancyBusReasonAssistantOfFutureExercisesResults extends MBusiness
{
    public $db;

    /**
     * Class constructor
     */
    public function BusinessAccountancyBusReasonAssistantOfFutureExercisesResults()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getReasonAssistantOfFutureExercisesResultsData($data)
    {
    
        $sql = ' SELECT substr(A.accountSchemeId,6,8) as accountSuffix,
                        substr(A.accountSchemeId,1,3) as accountPrefix,
                        substr(A.accountSchemeId,4,2) as accountRadical,
                        B.incomeForecastId,
                        B.courseId,
                        B.courseName,
                        B.personId,
                        B.personName,
                        B.unitId,
                        B.operationId,
                        B.operationDescription,
                        B.operationTypeId,
                        TO_CHAR(B.recordDate,\'' . MASK_DATE . '\'),
                        round(B.value, 2)
                  FROM ( SELECT accAccountScheme.accountSchemeId,
                                description
                           FROM accAccountScheme 
                          WHERE substr(accAccountScheme.accountSchemeId, 1, 3) IN (' . ACCOUNT_SCHEMES_FOR_ACCOUNTANCY . ')
                            AND LENGTH(accAccountScheme.accountSchemeId) = 13 ) AS A
             FULL JOIN (SELECT B.accountSchemeId,
                               B.incomeForecastId,
                               D.courseId,
                               ( SELECT name
                                   FROM acdCourse
                                  WHERE acdCourse.courseId = D.courseId ) as courseName,
                               D.personId,
                               ( SELECT name
                              FROM ONLY basPerson
                                  WHERE basPerson.personId = D.personId ) as personName,
                               D.unitId,
                               C.operationId,
                               C.description as operationDescription,
                               C.operationTypeId,
                               B.recordDate,
                               B.value
                          FROM finIncomeForecast B
                    INNER JOIN finOperation C
                         USING (operationId)
                    INNER JOIN (SELECT contractId, 
                                       courseId, 
                                       courseVersion,
                                       unitId,
                                       personId
                                  FROM acdContract) AS D
                         USING (contractId)
                         WHERE B.recordDate >= TO_DATE(?,\''.MASK_DATE.'\')
                           AND B.recordDate <= TO_DATE(?,\''.MASK_DATE.'\') 
                       ) AS B USING (accountSchemeId) ';
                           
        $args[] = $data->beginDate;
        $args[] = $data->endDate;
      
        if ( strlen((string)$data->beginAccountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId >= ? ';
            $args[] = $data->beginAccountSchemeId;
        }
        
        if ( strlen((string)$data->endAccountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId <= ? ';
            $args[] = $data->endAccountSchemeId;
        }
        
        if ( strlen((string)$where)>0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        $sql.= 'ORDER BY 2, 3, 1, 6';

        $db      = $this->getDatabase();
        
        $sql = SAGU::prepare($sql, $args);
        
        $sql  = 'DECLARE data CURSOR FOR ' . $sql;
            
                        $db      = $this->getDatabase();
                                    $db->execute($sql);

      
        return $result;
    }

    /**
     *
     * Move and get data from cursor
     *
     * @param: Get data from cursor and control data
     *
     */
    public function fetchData($number)
    {
        $sql    = 'FETCH ' . $number . ' FROM data';
        $db     = $this->getDatabase();
        $result = $db->query($sql);
        
        return $result;
    }

    /**
     *
     * Execute a begin transaction for database connection
     *
     * @param: No parameters
     *
     * @result: No result
     *
     */
    public function beginTransaction()
    {
        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');
    }
    
    /**
     * Execute a begin transaction for database connection
     *
     * @param: No parameters
     *
     * @result: No result
     *
     */
    public function commit()
    {
        $db = $this->getDatabase();
        $db->execute('COMMIT');
    }


    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getAccountSchemeDescription($accountSchemeId)
    {
        $sql = 'SELECT description
                FROM accAccountScheme';

        if ( strlen((string)$accountSchemeId) > 0 )
        {
            $where .= ' AND accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5);

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result[0][0];

    }


    /**
     * Get the name of the default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDefaultCompanyName()
    {
        $sql   = 'SELECT name
                  FROM basCompanyConf';

        $where = ' WHERE companyId = ' . DEFAULT_COMPANY_CONF ;

        $sql   .= $where;
        $db     = $this->getDatabase();
        $result = $db->query($sql, null);

        return $result[0][0];
    }

    /**
     * Get the previous balance 
     *
     * @param $filters (object): $accountSchemeId
     *
     * @return (array): An array containing the search results
     */
    public function getPreviousBalance($data)
    {
        $sql = '     SELECT personId,
                            (SELECT name
                               FROM ONLY basPerson
                              WHERE basPerson.personId=A.personId) as personName,
                            sum(value)
                       FROM accPersonBalance A
                      WHERE substr(accountSchemeId, 6, 8) 
                        AND substr(accountSchemeId, 1, 3) = ?
                        AND substr(accountSchemeId, 4, 2) = ?
                        AND balanceDate < TO_DATE(?, \''.MASK_DATE.'\')
                        AND source = \'P\'
                   GROUP BY personId
                     HAVING sum(value)<>0
                   ORDER BY 2 ';
                   
        $args = array( $data->accountSuffix,
                       $data->accountPrefix,
                       $data->accountRadical,
                       $data->beginDate);
                       
        $db = $this->getDatabase();
        $res = $db->query(SAGU::prepare($sql, $args));
        $result->value         = $res[0][0];
        $result->operationType = $res[0][1];
        return $result;
    }
    
    /**
     * Get the previous person balance 
     *
     * @param $filters (object): $accountSchemeId
     *
     * @return (array): An array containing the search results
     */
    public function getPersonPreviousBalance($data)
    {
        $sql = '     SELECT sum(value)
                       FROM accPersonBalance A
                      WHERE substr(accountSchemeId, 6, 8) = ?
                        AND substr(accountSchemeId, 1, 3) = ?
                        AND substr(accountSchemeId, 4, 2) = ?
                        AND balanceDate < TO_DATE(?, \''.MASK_DATE.'\')
                        AND source = \'P\'
                        AND personId = ?
                     HAVING sum(value)<>0 ';
                   
        $args = array( $data->accountSuffix,
                       $data->accountPrefix,
                       $data->accountRadical,
                       $data->beginDate,
                       $data->personId );
                       
        $db = $this->getDatabase();
        $res = $db->query(SAGU::prepare($sql, $args));
        if (is_array($res[0]))
        {
            return ACCOUNTANCY::returnOperationType($res[0][0]);
        }
        else
        {
            return ACCOUNTANCY::returnOperationType(0);
        }
    }


   /**
    *
    * Get the account scheme balance from invoices marked as 'P'
    *
    * @result (object): Object containing the value and operation type
    *
    */
    public function getAccountSchemePreviousBalance($data)
    {
        $sql = ' SELECT sum(value)
                   FROM accAccountBalance
                  WHERE substr(accountSchemeId, 6, 8) = ?
                    AND substr(accountSchemeId, 1, 3) = ?
                    AND substr(accountSchemeId, 4, 2) = ?
                    AND balanceDate < TO_DATE(?, \'' . MASK_DATE . '\')
                    AND source = \'P\'';
                   
        $args = array( $data->accountSuffix,
                       $data->accountPrefix,
                       $data->accountRadical,
                       $data->beginDate);
        
        $db = $this->getDatabase();

        $ret = $db->query(SAGU::prepare($sql, $args));
        
        return ACCOUNTANCY::returnOperationType($ret[0][0]);
    }
}
?>
