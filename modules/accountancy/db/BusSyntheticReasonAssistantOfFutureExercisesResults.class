<?php
/**
 *
 * This file handles the connection and actions for SyntheticReasonAssistantOfFutureExercisesResults
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accSyntheticReasonAssistantOfFutureExercisesResults table
 **/
class BusinessAccountancyBusSyntheticReasonAssistantOfFutureExercisesResults extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusSyntheticReasonAssistantOfFutureExercisesResults()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getSyntheticReasonAssistantOfFutureExercisesResults($data)
    {
        $sql = 'SELECT substr(Z.accountSchemeId,6,8),
                       substr(Z.accountSchemeId,1,3),
                       substr(Z.accountSchemeId,4,2),
                       T.courseId,
                       substr((SELECT name FROM acdCourse WHERE courseId = T.courseId),0,30) as courseName,
                       T.personId,
                       (SELECT name FROM ONLY basPerson WHERE personId = T.personId) as personName,
                       T.operationId,
                       T.description,
                       T.operationTypeId,
                       TO_CHAR(T.recordDate,\'' . MASK_DATE . '\'),
                       round(T.value,' . REAL_ROUND_VALUE . '),
		               Z.accountSchemeId,
                       T.balance
                FROM ( SELECT accountSchemeId 
                       FROM accAccountScheme ) as Z
                RIGHT OUTER JOIN ((SELECT B.courseId,
                                          B.personId,
                                          C.operationId,
                                          C.description,
                                          C.operationTypeId,
                                          A.recordDate,
                                          A.value,
		                                  A.accountSchemeId
		                           FROM finIncomeForecast A
                                   INNER JOIN (SELECT contractId,
                                                      personId,
                                                      courseId,
                                                      courseVersion,
                                                      unitId
                                               FROM acdContract) as B
                                       USING(contractId)
                                   INNER JOIN finOperation C
                                       USING (operationId)
                                   WHERE A.recordDate >= TO_DATE(?,\'' . MASK_DATE . '\') AND
                                         A.recordDate <= TO_DATE(?,\'' . MASK_DATE . '\') AND
                                         A.value <>0 ) AS Y
                                   FULL OUTER JOIN (SELECT accountSchemeId,
                                                           sum(A.value) as balance
                                                           FROM accAccountBalance A
                                                           WHERE source = \'P\' AND
                                                                 balanceDate < TO_DATE(?,\'' . MASK_DATE . '\') AND
                                                                 substr(accountSchemeId, 1, 3) IN (' . ACCOUNT_SCHEMES_FOR_ACCOUNTANCY . ') AND
                                                                 LENGTH(accountSchemeId) = 13 
                                                           GROUP BY accountSchemeId
                                                           HAVING sum(A.value) <> 0) AS X
                                   USING(accountSchemeId) ) as T
		            USING(accountSchemeId)';
                    

        if ( strlen((string)$data->beginDate) > 0 )
        {
            $args[] = $data->beginDate;
        }

        if ( strlen((string)$data->endDate) > 0 )
        {
            $args[] = $data->endDate;
        }
        
        if ( strlen((string)$data->beginDate) > 0 )
        {
            $args[] = $data->beginDate;
        }
        
        if ( strlen((string)$data->beginAccountScheme) > 0 )
        {
            $where .= ' AND T.accountSchemeId >= ? ';
            $args[] = $data->beginAccountScheme;
        }
        
        if ( strlen((string)$data->endAccountScheme) > 0 )
        {
            $where .= ' AND T.accountSchemeId <= ? ';
            $args[] = $data->endAccountScheme;
        }


        if ( $sql != '' )
        {
            if ( $where != '' )
            {
                $sql .= 'WHERE ' . substr($where,5);
            }
            $sql .= ' ORDER BY 2, 3, 1, personName, T.recordDate';
            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;

    }

    /**
     * Get account scheme description
     *
     * @param $accountSchemeId (varchar): accountSchemeId
     *
     * @returns (array): Return the description
     *
     **/
    public function getAccountSchemeDescription($accountSchemeId)
    {
        $sql = 'SELECT description
                FROM accAccountScheme';

        if ( strlen((string)$accountSchemeId) > 0 )
        {
            $where .= ' AND accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5);

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result[0][0];

    }


    /**
     * Get the name of the default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDefaultCompanyName()
    {
        $sql   = 'SELECT name
                  FROM basCompanyConf';

        $where = ' WHERE companyId = ' . DEFAULT_COMPANY_CONF ;

        $sql   .= $where;
        $db     = $this->getDatabase();
        $result = $db->query($sql, null);

        return $result[0][0];
    }

    /**
     * Get persons balance
     *
     * @param $accountSchemeId (varchar), $balanceDate (varchar)
     *
     * @returns (array): Return the array whith the results
     *
     **/
    public function getPersonBalance($accountSchemeId, $balanceDate, $personId)
    {
        $sql = 'SELECT CASE WHEN sum(A.value) IS NOT NULL THEN sum(A.value)
                       ELSE 0 END as balance
                FROM accPersonBalance A';

        if ( strlen((string)$accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }
        
        if ( strlen((string)$balanceDate) > 0 )
        {
            $where .= ' AND A.balanceDate < TO_DATE(?,?)';
            $args[] = $balanceDate;
            $args[] = MASK_DATE;
        }
        
        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }


        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5) . ' AND source = \'P\'';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result[0][0];

    }

}
?>
