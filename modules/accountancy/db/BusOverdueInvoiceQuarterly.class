<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 11/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 **/
class BusinessAccountancyBusOverdueInvoiceQuarterly extends Business
{
    function BusinessAccountancyBusOverdueInvoiceQuarterly()
    {
        $this->db = $this->getDatabase();
    }


    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Get the Overdue invoices (quarterly) in a specified period
     *
     * @param $filters (object): null
     *
     * @return (array): null
     **/
    public function createTempTable()
    {
        $sql = 'CREATE TEMP TABLE 
                finQuarterlyInvoice ( accountSchemeId varchar(30),
                                      courseId        varchar(10),
                                      courseName      varchar(50),
                                      balance         numeric(14,4),
                                      description     varchar(100) ) ';
                                 
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->execute($sql);
        }

        return $result;
    }

    /**
     * Get the quarterly dates
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getQuarterlyDates($filters)
    {
        $sql = 'select TO_CHAR(TO_DATE(?, \'' . MASK_DATE . '\'), \'' . MASK_DATE . '\'),
                       TO_CHAR((date(TO_DATE(?, \'' . MASK_DATE . '\')) - \'1 month\'::interval)::date, \'' . MASK_DATE . '\'),
                       TO_CHAR((date(TO_DATE(?, \'' . MASK_DATE . '\')) - \'2 month\'::interval)::date, \'' . MASK_DATE . '\'),
                       TO_CHAR((date(TO_DATE(?, \'' . MASK_DATE . '\')) - \'3 month\'::interval)::date, \'' . MASK_DATE . '\')' ;


                                 
        if ( strlen((string)$filters->limitDate) > 0 )
        {
            $args[] = $filters->limitDate;
            $args[] = $filters->limitDate;
            $args[] = $filters->limitDate;
            $args[] = $filters->limitDate;
        }

        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        return $result[0];
    }


    /**
     * Insert the values in the temporary table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): null
     **/
    public function insertIntoTempTable($filters)
    {
        $sql = 'SELECT A.accountSchemeId,
                       A.courseId,
                       (SELECT shortname FROM acdCourse WHERE courseId = A.courseId) as courseName,
                       round(sum(CASE WHEN
                                      (SELECT operationTypeId FROM finOperation WHERE operationId = B.operationId) = \'C\'
                                           THEN B.value * -1
                                           ELSE B.value
                                       END), 2) as balance, 
                        \'' . $filters->description . '\'
                FROM (SELECT invoiceId,
                             accountSchemeId,
                             A.courseId
                      FROM ONLY finInvoice A
                      WHERE maturityDate <= TO_DATE(?, \'' . MASK_DATE . '\')'; 

        if ( strlen((string)$filters->limitDate) > 0 )
        {
            $args[] = $filters->limitDate;
        }
        if ( strlen((string)$filters->previousDate) > 0 )
        {
            $sql .=  ' AND maturityDate >  TO_DATE(?, \'' . MASK_DATE . '\')';
            
            $args[] = $filters->previousDate;
        }
        
        $sql .= ') as A
                     INNER JOIN (SELECT invoiceId,
                                        operationId,
                                        value
                                 FROM finEntry
                                 WHERE entryDate <= TO_DATE(?, \'' . MASK_DATE . '\')) as B
                         USING(invoiceId)
                     INNER JOIN finOperation C
                         USING(operationId)
                GROUP BY A.accountSchemeId, A.courseId';

        if ( strlen((string)$filters->baseDate) > 0 )
        {
            $args[] = $filters->baseDate;
        }
      
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $sql  = SAGU::prepare($sql, $args);
            $sql  = 'INSERT INTO finQuarterlyInvoice (accountSchemeId,
                                                      courseId,
                                                      courseName,
                                                      balance,
                                                      description) ' . $sql;
            $result = $db->query($sql);
        }

        return $result;
    }

    /**
     * Get data from temporary table
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getData()
    {
        $sql = 'SELECT accountSchemeId,
                       courseId,
                       courseName,
                       round(balance,' . REAL_ROUND_VALUE . '),
                       description
                FROM finQuarterlyInvoice
                WHERE balance <> 0
                ORDER BY accountSchemeId, courseId::int';
        
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
}

?>
