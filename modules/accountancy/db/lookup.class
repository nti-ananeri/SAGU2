<?php
/**
 *
 * This file manipulate the lookups for the accountancy module of sagu 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}


$constants = $business->getModuleValues('accountancy');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

/**
 * Class to manipulate the Lookups
 **/
class BusinessAccountancyLookup
{

    /**
     * Auto complete for account scheme
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteAccountScheme(&$context)
    {
        $sql = 'SELECT A.description
                  FROM accAccountScheme A
                 WHERE A.accountSchemeId = ?';

        $context->setContext('accountancy', $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupAccountScheme(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $accountSchemeId = $lookup->getFilterValue('accountSchemeId');
        $description     = $lookup->getFilterValue('description');
        $courseId        = $lookup->getFilterValue('courseId');
        $courseVersion   = $lookup->getFilterValue('courseVersion');
        $unitId          = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('accountSchemeId', $accountSchemeId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('description',     $description,     _M('Account scheme', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseId',        $courseId, _M('Course id',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion',   $courseVersion, _M('Course version',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('accountSchemeId', _M('Code', $module),           'right', true, null, true),
           new DataGridColumn('description',     _M('Account scheme', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT DISTINCT A.accountSchemeId,
                                A.description
                           FROM accAccountScheme A
                      LEFT JOIN accCourseAccount B
                             ON ( A.accountSchemeId = B.accountSchemeId ) ';

        if ( strlen((string)$accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId ilike ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId ilike ?';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.accountSchemeId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Account scheme search', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for cost center
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCostCenter(&$context)
    {
        $sql = 'SELECT A.description
                  FROM accCostCenter A
                 WHERE A.costCenterId = ?';

        $context->setContext('accountancy', $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCostCenter(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $costCenterId    = $lookup->getFilterValue('costCenterId');
        $description     = $lookup->getFilterValue('description');
        $courseId        = $lookup->getFilterValue('courseId');
        $courseVersion   = $lookup->getFilterValue('courseVersion');
        $unitId          = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('costCenterId',  $costCenterId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('description',   $description,  _M('Cost center', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseId',      $courseId, _M('Course id',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('courseVersion', $courseVersion, _M('Course version',$module),   FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( fields::unit($unitId) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('costCenterId', _M('Code', $module),        'right', true, null, true),
           new DataGridColumn('description',  _M('Cost center', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT DISTINCT A.costCenterId,
                                A.description
                           FROM accCostCenter A
                      LEFT JOIN accCourseAccount B
                             ON ( A.costCenterId = B.costCenterId ) ';

        if ( strlen((string)$costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId ILIKE ?';
            $args[] = $costCenterId;
        }

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND B.courseId ilike ?';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.costCenterId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Cost center search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for couse account
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseAccount(&$context)
    {
        $sql = 'SELECT A.courseVersion,
                       B.name as courseName,
                       A.unitId
                FROM accCourseAccount A
                INNER JOIN acdCourse B
                    USING(courseId)
                WHERE courseId = ?';

        $context->setContext('accountancy', $sql);
    }

    /**
     * Lookup for course account
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseAccount(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $unitId        = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('courseId',       $courseId,      _M('Course id', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseVersion',  $courseVersion, _M('Course version', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('courseName',     $courseName,    _M('Course', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));
        $business     = $MIOLO->getBusiness('basic', 'BusUnit');        
        $lookup->addFilterField( new MComboBox('unitId',          $unitId,        _M('Unit',$module), $business->listUnit()));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('courseId',        _M('Course id', $module),        'left', true, null, true),
           new DataGridColumn('courseVersion',   _M('Course version', $module),   'left', true, null, true),
           new DataGridColumn('courseName',      _M('Course', $module),           'left', true, null, true),
           new DataGridColumn('unitId',          _M('Unit id', $module),          'left', true, null, true),
           new DataGridColumn('unitDescription', _M('Unit', $module),             'left', true, null, true),
           new DataGridColumn('accountSchemeId', _M('Account scheme id', $module),'left', true, null, true),
           new DataGridColumn('costCenterId',    _M('Cost center id', $module),   'left', true, null, true),

        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name as courseName,
                       A.unitId,
                       C.description as unitDescription,
                       A.accountSchemeId,
                       A.costCenterId
                FROM accCourseAccount A
                INNER JOIN acdCourse B
                    USING(courseId)
                INNER JOIN basUnit C
                    USING(unitId)';

        if ( strlen((string)$courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen((string)$courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }


        if ( strlen((string)$courseName) > 0 )
        {
            $where .= ' AND ( B.name ILIKE ? OR B.shortName ILIKE ?)';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        
        if ( strlen((string)$unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.courseId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Course account search', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

}
?>
