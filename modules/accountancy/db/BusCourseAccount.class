<?php
/**
 *
 * This file handles the connection and actions for accCourseAccount table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accCourseAccount table
 **/
class BusinessAccountancyBusCourseAccount extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusCourseAccount()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseAccount()
    {
        $sql = 'SELECT A.courseAccountId,
                       A.description
                  FROM accCourseAccount A
                  ORDER BY A.description';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,null));

        return ($result);

    }


    /**
     * Search for courseAccount.
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCourseAccount($data)
    {

        $sql = 'SELECT A.courseId,
                        A.courseVersion,
                        B.name,
                        D.unitId,
                        D.description,
                        E.accountSchemeId,
                        E.description,
                        F.costCenterId,
                        F.description
                 FROM ONLY acdCourseVersion A
                 INNER JOIN acdCourse B
                         ON (A.courseId = B.courseId)
                 INNER JOIN accCourseAccount C
                         ON (A.courseId = C.courseId
                             AND A.courseVersion = C.courseVersion)
                 INNER JOIN basUnit D
                         ON (C.unitId = D.unitId)
                 INNER JOIN accAccountScheme E
                         ON (C.accountSchemeId = E.accountSchemeId)
                 INNER JOIN accCostCenter F
                         ON (C.costCenterId = F.costCenterId)';

        $where  = '';
        unset($args);

        if ( strlen((string)$data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $args[] = $data->courseId;
        }
        
        if ( strlen((string)$data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }        

        if ( strlen((string)$data->unitId) > 0 )
        {
            $where .= '    AND   D.unitId = ?';
            $args[] = $data->unitId;
        }

        if ( strlen((string)$data->accountSchemeId) > 0 )
        {
            $where .= '    AND   E.accountSchemeId = ?';
            $args[] = $data->accountSchemeId;
        }
        
        if ( strlen((string)$data->costCenterId) > 0 )
        {
            $where .= '    AND   F.costCenterId = ?';
            $args[] = $data->costCenterId;
        }        

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                       ' ORDER BY B.name';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }
        
    /**
     * Insert a new accCourseAccount.
     *
     * @param $data (object): Object (courseAccount) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCourseAccount($data)
    {

       $sql = 'INSERT INTO accCourseAccount
                           (courseId,
                            courseVersion,
                            unitId,
                            accountSchemeId,
                            costCenterId)
                     VALUES (?,?,?,?,?)';
        $args = array(
                       $data->courseId,
                       $data->courseVersion,
                       $data->unitId,
                       $data->accountSchemeId,
                       $data->costCenterId
                       );                 

        $db = $this->getDatabase();

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }
    
    /**
     * Update the specified courseAccount data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCourseAccount($data)
    {
        $sql    = 'UPDATE accCourseAccount
                      SET accountSchemeId = ?,
                          costCenterId = ?
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND unitId = ?';

        $db     = $this->getDatabase();

        $args   = array(
                         $data->accountSchemeId,
                         $data->costCenterId,
                         $data->courseId,
                         $data->courseVersion,
                         $data->unitId
                         );
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
               
    }
    
    /**
     * Delete the specified courseAccount.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCourseAccount($data)
    {
        $sql    = 'DELETE FROM accCourseAccount
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND unitId = ?';


        $db     = $this->getDatabase();
        
        $args   = array(
                         $data->courseId,
                         $data->courseVersion,
                         $data->unitId
                         );
                         
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }
     
    /**
     * Get a specific course account information
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getCourseAccount($data)
    {
        $sql    = ' SELECT A.userName,
                           A.dateTime,
                           A.ipAddress,
                           A.courseId,
                           A.courseVersion,
                           (SELECT name FROM acdCourse WHERE courseId = A.courseId),
                           A.unitId,
                           A.accountSchemeId,
                           (SELECT description FROM accAccountScheme WHERE accountSchemeId = A.accountSchemeId),
                           A.costCenterId,
                           (SELECT description FROM accCostCenter WHERE costCenterId = A.costCenterId)
                     FROM accCourseAccount A
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND unitId = ?';


        $db     = $this->getDatabase();
        
        $args   = array( $data->courseId,
                         $data->courseVersion,
                         $data->unitId );
        
        $res = $db->query(SAGU::prepare($sql,$args));

        $result = new accCourseAccount();
        $result->userName                 = $res[0][0];
        $result->dateTime                 = $res[0][1];
        $result->ipAddress                = $res[0][2];
        $result->courseId                 = $res[0][3];
        $result->courseVersion            = $res[0][4];
        $result->courseName               = $res[0][5];
        $result->unitId                   = $res[0][6];
        $result->accountSchemeId          = $res[0][7];
        $result->accountSchemeDescription = $res[0][8];
        $result->costCenterId             = $res[0][9];
        $result->costCenterDescription    = $res[0][10];
        return $result;
    }
   


}
?>
