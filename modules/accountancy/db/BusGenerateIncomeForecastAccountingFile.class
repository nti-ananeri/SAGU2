<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 **/
class BusinessAccountancyBusGenerateIncomeForecastAccountingFile extends Business
{
    function BusinessAccountancyBusGenerateIncomeForecastAccountingFile()
    {
        $this->db = $this->getDatabase();
    }


    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Get the account scheme id from courses
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getAccountSchemeIds()
    {
        $sql = 'SELECT DISTINCT courseId::int,
                       substr(accountSchemeId,6,8),
                       substr(accountSchemeId,1,3)
                FROM accCourseAccount
                ORDER BY courseId::int'; 

        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, null));
        }

        return $result;
    }

    /**
     * Get the unit accounting code
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getUnitAccountingCode()
    {
        $sql = 'SELECT unitId, accountingCode from basUnit'; 
        
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, null));
        }

        return $result;
    }

    /**
     * Get the entry data
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getIncomeForecastData($filters)
    {
        $sql = 'SELECT A.incomeForecastId,
                       B.personId,
                       getPersonName(B.personId) as personName,
                       extract(month from maturityDate),
                       B.courseId,
                       B.unitId,
                       A.operationId,
                       A.recordDate,
                       A.value
                  FROM finIncomeForecast A
            INNER JOIN acdContract B
                 USING (contractId)
                 WHERE A.recordDate = TO_DATE(?, \'' . MASK_DATE . '\') 
                   AND A.value <> 0 
                   AND A.operationId <> 0 ';

        if ( strlen((string)$filters->partial) > 0 )
        {
            $sql .= '       AND isAccounted = \''.DB_FALSE.'\'';
        }                      
                      
        $sql .=' ORDER BY B.personId, 
                          A.incomeForecastId '; 

        if ( strlen((string)$filters->date) > 0 )
        {
            $args[] = $filters->date;
        }

        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the integration data
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getIntegrationData($operationId)
    {
        $sql = 'SELECT externalEntryId,
                       operationTypeId,
                       debitAccount,
                       creditAccount,
                       operationDescription,
                       debitCostCenter,
                       creditCostCenter
                FROM ONLY accIncomeForecastIntegration
                WHERE operationId = ?
                ORDER BY externalEntryId'; 

        if ( strlen((string)$operationId) > 0 )
        {
            $args[] = $operationId;
        }
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Update income forecasts information
     *
     * @param $filters (object): filters from form
     *
     * @return (array): true or false
     **/
    public function updateIncomeForecasts($filters)
    {
        $sql = 'UPDATE finIncomeForecast
                   SET isAccounted = TRUE
                 WHERE recordDate = TO_DATE(?, \'' . MASK_DATE . '\')'; 

        if ( strlen((string)$filters->partial) > 0 )
        {
            $sql .= '  AND isAccounted = \''.DB_FALSE.'\' ';
        }                      

        $args[] = $filters->date;
        
        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->execute(SAGU::prepare($sql, $args));
        }
        return $result;
    }


}

?>
