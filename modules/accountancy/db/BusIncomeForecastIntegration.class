<?php
/**
 *
 * This file handles the connection and actions for accIncomeForecastIntegration table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accIncomeForecastIntegration table
 **/
class BusinessAccountancyBusIncomeForecastIntegration extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusIncomeForecastIntegration()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Obtain the specified incomeForecastIntegration id data.
     *
     * @return If the specified courseId exists, returns an object (incomeForecastIntegration) containing its data.
     * Otherwise, returns null.
     *
     */
    function getIncomeForecastIntegration($operationId)
    {

        $sql = 'SELECT A.externalEntryId,
                       A.operationTypeId,
                       A.operationId,
                       A.debitAccount,
                       A.creditAccount,
                       A.operationDescription,
                       A.debitCostCenter,
                       A.creditCostCenter,
                       A.accountItem,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM accIncomeForecastIntegration A
                 WHERE A.operationId = ?
                 ORDER BY A.externalEntryId';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $operationId));

        $incomeForecastIntegration1 = new accIncomeForecastIntegration();

        list ( $incomeForecastIntegration1->externalEntryId,
               $incomeForecastIntegration1->operationTypeId,
               $incomeForecastIntegration1->operationId,
               $incomeForecastIntegration1->debitAccount,
               $incomeForecastIntegration1->creditAccount,
               $incomeForecastIntegration1->operationDescription,
               $incomeForecastIntegration1->debitCostCenter,
               $incomeForecastIntegration1->creditCostCenter,
               $incomeForecastIntegration1->accountItem,
               $incomeForecastIntegration1->userName,
               $incomeForecastIntegration1->dateTime,
               $incomeForecastIntegration1->ipAddress
             ) = $result[0];
             
        $incomeForecastIntegration2 = new accIncomeForecastIntegration();

        list ( $incomeForecastIntegration2->externalEntryId,
               $incomeForecastIntegration2->operationTypeId,
               $incomeForecastIntegration2->operationId,
               $incomeForecastIntegration2->debitAccount,
               $incomeForecastIntegration2->creditAccount,
               $incomeForecastIntegration2->operationDescription,
               $incomeForecastIntegration2->debitCostCenter,
               $incomeForecastIntegration2->creditCostCenter,
               $incomeForecastIntegration2->accountItem,
               $incomeForecastIntegration2->userName,
               $incomeForecastIntegration2->dateTime,
               $incomeForecastIntegration2->ipAddress
             ) = $result[1];
             
        $return->data1 = $incomeForecastIntegration1;
        $return->data2 = $incomeForecastIntegration2;

        return $return;
    }
    
    /**
     * Insert a new accIncomeForecastIntegration.
     *
     * @param $data (object): Object (incomeForecastIntegration) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertIncomeForecastIntegration($data)
    {

       $sql = 'INSERT INTO accIncomeForecastIntegration
                           (externalEntryId,
                            operationTypeId,
                            operationId,
                            debitAccount,
                            creditAccount,
                            operationDescription,
                            debitCostCenter,
                            creditCostCenter,
                            accountItem)
                     VALUES (?,?,?,?,?,?,?,?,?)';
        $args = array(
                       $data->externalEntryId,
                       $data->operationTypeId,
                       $data->operationId,
                       $data->debitAccount,
                       $data->creditAccount,
                       $data->operationDescription,
                       $data->debitCostCenter,
                       $data->creditCostCenter,
                       $data->accountItem
                      );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }
    
    /**
     * Delete the specified incomeForecastIntegration.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteIncomeForecastIntegration($operationId)
    {
        $sql    = 'DELETE FROM accIncomeForecastIntegration
                    WHERE operationId = ?';


        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql,$operationId));

        return $result;
    }

    public function beginTransaction()
    {

        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {

        $db = $this->getDatabase();
        $db->execute('COMMIT');

    }
    
}
?>
