<?php
/**
 *
 * This file handles the connection and actions for accaccountinglimit table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/10/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accDefineAccountingLimits table
 **/
class BusinessAccountancyBusDefineAccountingLimits extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusDefineAccountingLimits()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Insert a new accDefineAccountingLimits.
     *
     * @param $data (object): Object (defineAccountingLimits) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function getDefineAccountingLimits()
    {

        $sql = 'SELECT accountingLimitId,
                       TO_CHAR(recordDate, \'' . MASK_DATE . '\'),
                       accountingUser
                FROM accAccountingLimit
                ORDER BY recordDate DESC';


        if ( strlen((string)$sql) > 0 )
        {
            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,null));
        }
        return $result;
    }

    /**
     * Insert a new accAccountingLimit.
     *
     * @param $data (object): Object (accountScheme) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertAccountingLimit($data)
    {

       $sql = 'INSERT INTO accAccountingLimit
                           (recordDate,
                            accountingUser)
                     VALUES (TO_DATE(?,\'' . MASK_DATE . '\'),?)';
        $args = array(
                       $data->recordDate,
                       $data->accountingUser
                       );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }


    /**
     * Delete the specified AccountingLimit.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteAccountingLimit($accountingLimitId)
    {
        $sql    = 'DELETE FROM accAccountingLimit
                    WHERE accountingLimitId = ?';


        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$accountingLimitId));

        return $result;
    }
    
    
}
?>
