<?php
/**
 *
 * This file handles the connection and actions for DailyAssistantOfFutureExercisesResults
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/05/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the accDailyAssistantOfFutureExercisesResults table
 **/
class BusinessAccountancyBusDailyAssistantOfFutureExercisesResults extends MBusiness
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessAccountancyBusDailyAssistantOfFutureExercisesResults()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'accountancy' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getDailyAssistantOfFutureExercisesResults($data)
    {
        $sql = 'SELECT substr(A.accountSchemeId,6,8),
                       substr(A.accountSchemeId,1,3),
                       substr(A.accountSchemeId,4,2),
                       B.courseId,
                       substr((SELECT name FROM acdCourse WHERE courseId = B.courseId),0,29),
                       B.personId,
                       (SELECT name FROM ONLY basPerson WHERE personId = B.personId),
                       C.operationId,
                       C.description,
                       C.operationTypeId,
                       TO_CHAR(A.recordDate,\'' . MASK_DATE . '\'),
                       round(A.value,' . REAL_ROUND_VALUE . ')
                FROM finIncomeForecast A 
                    INNER JOIN (SELECT contractId, personId, courseId, courseVersion, unitId
                                FROM acdContract) as B
                        USING(contractId)
                    INNER JOIN finOperation C
                        USING (operationId) ';

        if ( strlen((string)$data->beginDate) > 0 )
        {
            $where .= ' AND A.recordDate >= TO_DATE(?,?)';
            $args[] = $data->beginDate;
            $args[] = MASK_DATE;
        }

        if ( strlen((string)$data->endDate) > 0 )
        {
            $where .= ' AND A.recordDate <= TO_DATE(?,?)';
            $args[] = $data->endDate;
            $args[] = MASK_DATE;
        }
        
        if ( strlen((string)$data->beginAccountScheme) > 0 )
        {
            $where .= ' AND A.accountSchemeId >= ?';
            $args[] = $data->beginAccountScheme;
        }

        if ( strlen((string)$data->endAccountScheme) > 0 )
        {
            $where .= ' AND A.accountSchemeId <= ?';
            $args[] = $data->endAccountScheme;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5) . ' ORDER BY 2, 3, 1, A.incomeForecastId, A.recordDate';
            $db      = $this->getDatabase();
            $sql  = SAGU::prepare($sql,$args);
            $sql  = 'DECLARE data CURSOR FOR ' . $sql;
            
            $db      = $this->getDatabase();
            $db->execute($sql);
        }
        return $result;

    }

    /*
     * Move and get data from cursor
     *
     */
    public function fetchData($number)
    {
        $sql = 'FETCH ' . $number . ' FROM data';
        $db      = $this->getDatabase();
        $result = $db->query($sql);
        
        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getAccountSchemeDescription($accountSchemeId)
    {
        $sql = 'SELECT description
                FROM accAccountScheme';

        if ( strlen((string)$accountSchemeId) > 0 )
        {
            $where .= ' AND accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5);

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result[0][0];

    }


    /**
     * Get the name of the default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDefaultCompanyName()
    {
        $sql   = 'SELECT name
                  FROM basCompanyConf';

        $where = ' WHERE companyId = ' . DEFAULT_COMPANY_CONF ;

        $sql   .= $where;
        $db     = $this->getDatabase();
        $result = $db->query($sql, null);

        return $result[0][0];
    }

    public function beginTransaction()
    {
        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');
    }

    public function commit()
    {
        $db = $this->getDatabase();
        $db->execute('COMMIT');
    }


}
?>
