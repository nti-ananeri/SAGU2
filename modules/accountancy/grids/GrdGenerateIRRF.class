<?php

/**
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/
class GrdGenerateIRRF extends MGrid
{
    public $toPrint;
    public $fileId;
    public $fileName;

    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */

        $columns = array( new MGridColumn( _M('File id',    $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('File name',    $module), 'right',  true, null, true, null, true),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( null ),
                          new MGridColumn( _M('Is processed', $module),     'right', true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('No',$module) ), true )
                        );


       // this foreach is necessary until the getActionURL function is
       // able to handle an object parameter
       unset($opts);
       if (is_array($filters))
       {
           foreach ( $filters as $k => $v )
           {
               $opts[$k] = $v;
           }
       }
 
       $url = $MIOLO->getActionURL($module, $action, null, $opts);
       parent::__construct(null, $columns, $url, 0, 0, 'GrdGenerateIRRF');
       $this->setRowMethod('GrdGenerateIRRF', 'myRowMethod');

       $this->addActionSelect();

       $ctlArray = array( new MButton( 'btnGenerateSelected', _M('Generate selected') ) );

       // set the controls in the grid
        $this->setControls( $ctlArray );

        $this->eventHandler();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'finance' : $module;

        return $MIOLO->getDatabase($module);
    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();

    }

   /**
     *
     */
    public function btnGenerateSelected_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        // Pega valores da grid select = invoiceId, $valueField = valor declarado do título. 
        $data->select = $this->page->request( 'select' . $this->name );

        // número das linhas selecionadas
        $data->allSelecteds = $this->allSelecteds;
        if(is_array($data->select) == false)
        {
            $msg  = _M('Error, select one file to generate !',$module);
            $vars['personId'] = $data->personId;
            $vars['personName'] = $data->personName;
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        $businessIRRF = $MIOLO->getBusiness($module, 'BusIRRF');
        $dataReturn = $businessIRRF->genereteIRRF($data);
        $this->toPrint = $dataReturn->toPrint;
        // Grava arquivo no servidor.
        $saveReturn = SAGUFile::saveDataToLocal($dataReturn );
        if($saveReturn == true)
        {
            $cont = 0;
            //   seta isProcessed true nos arquivos processados.
            while($data->select[$data->allSelecteds[1][$cont]])
            {
                $businessFile = $MIOLO->getBusiness('finance', 'BusFile');
                $dataFile = $businessFile->getFinanceFile($data->select[$data->allSelecteds[1][$cont]]);
                $dataFile->isProcessed = DB_TRUE;
                $ok = $businessFile->updateFinanceFile($dataFile);
                $cont++; 
            }
        }
        // faz commit de dados gravados na base de dados até o devido momento.  
        $commit     = $businessIRRF->commit();


        if( strlen((string) $dataReturn->file ) > 0 )
        {
            $this->fileId = $dataReturn->fileId;
            $this->fileName = $dataReturn->fileName;
        }
        $vars['event'] = 'btnSave_click';
        $postAction = substr( $action,0,strrpos( $action,':' ) ) . ':generateIRRF';
//        $this->page->mGoto($MIOLO->getActionURL($module, $postAction, null, $vars));
    }
}

?>
