<?php

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC002');
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        if ( strlen((string)$this->endPage) > 0 )
        {
            $page = ( ( $this->page - 1 ) % ($this->endPage - $this->beginPage + 1) ) + $this->beginPage;
        }
        else
        {
            $page = $this->page - 1 + $this->beginPage;
        }
       
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        
        $business = $MIOLO->getBusiness('basic','BusCompany');

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
        $companyConf = $business->getCompany(DEFAULT_COMPANY_CONF);
        $this->cell(180, 3, _M('Reason assistant of future exercises result', $module), 0, 0, 'L');
        $this->cell(100, 3, _M('Page number', $module) . ': ' . $page,           0, 0, 'R');
        $this->ln();
        $this->setFont(DEFAULT_REPORT_FONT, '', 8);
        $this->cell(180, 3, $companyConf->name, 0, 0, 'L');
        $this->cell(50,  3, _M('Emission', $module) . ': ' . $this->reportEmissionDate, 0, 0, 'L');
        $this->ln();
        $this->cell(280, 0, '', 1, 1, 'L');
        $this->ln(0.5);
        $this->cell(280,0, '', 1, 1, 'L');
        $this->ln();
        if (strlen((string)$this->reportAccountScheme)>0)
        {
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 8);
            $this->cell(100, 3, ' ', 'TB', 0);
            $this->cell(180, 3, _M('Account', $module).': '.$this->reportAccountSchemeToShow, 'TB', 0, 'L');
            $this->ln();
            $this->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 8);

            // Show the previous balance
            $this->cell(200, 3, '', '', 0);
            $this->ln();
        }
        $this->setFont(DEFAULT_FINANCE_REPORT_FONT, '', 8);
    }
}

/**
 * PDF extension to generate report
 */
class RptReasonAssistantOfFutureExercisesResults
{
    /**
     * Method to generate the report
     */
    public function RptReasonAssistantOfFutureExercisesResults($data = null)
    {
        set_time_limit(0);
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
         
        $business = $MIOLO->getBusiness($module,'BusReasonAssistantOfFutureExercisesResults');
        
        $business->beginTransaction();
        
        $business->getReasonAssistantOfFutureExercisesResultsData($data);

        
        // Generating PDF file
        $pdf = new PDF();
        $pdf->setMargins(10, 20);
        $pdf->aliasNbPages();
        $pdf->beginPage = strlen((string)$data->beginPage)>0 ? $data->beginPage : 0;
        $pdf->endPage   = strlen((string)$data->endPage)>0 ? $data->endPage : 0;
        $pdf->reportEmissionDate = strlen((string)$data->reportEmissionDate)>0 ? $data->reportEmissionDate : date(MASK_DATE_PHP);
        
        // First page
        $pdf->addPage('L', 'mm', 'A4');
        while (true)
        {
            $dataReport = $business->fetchData(5000);
            if (count($dataReport) == 0)
            {
                break;
            }
            
            foreach ($dataReport as $key => $dr)
            {
                // Verify if a different or new account scheme
                if ($pdf->reportAccountScheme != $dr[1].$dr[2].$dr[0])
                {
                    // Get the previous balance for the specific account
                    $dataPrevious->accountSuffix  = $dr[0];
                    $dataPrevious->accountPrefix  = $dr[1];
                    $dataPrevious->accountRadical = $dr[2];
                    $dataPrevious->beginDate      = $data->beginDate;
                    $previousBalance = $business->getAccountSchemePreviousBalance($dataPrevious);
                    if (SAGU::formatNumber($previousBalance->value) != SAGU::formatNumber(0))
                    {
                        // Put account scheme data
                        // Main title for account
                        $pdf->reportAccountScheme = $dr[1].$dr[2].$dr[0];
                        $pdf->reportAccountSchemeToShow = ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice(FINANCE::formatAccountSchemeId($dr[1].$dr[2].$dr[0])).' - '. $business->getAccountSchemeDescription($dr[1].$dr[2].$dr[0]);
                        $pdf->setFont(DEFAULT_REPORT_FONT, 'B', 8);
                        $pdf->cell(100, 3, ' ', 'TB', 0);
                        $pdf->cell(180, 3, _M('Account', $module).': '. ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice(FINANCE::formatAccountSchemeId($dr[1].$dr[2].$dr[0])).' - '. $business->getAccountSchemeDescription($dr[1].$dr[2].$dr[0]), 'TB', 0, 'L');
                        $pdf->ln();
                        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 8);

                        // Show the previous balance
                        $pdf->cell(200, 3, '', '', 0);
                        $pdf->cell(40,  3, _M('Previous balance account', $module), 'TBL', 0);
                        $pdf->cell(30,  3, FINANCE::formatFinanceReportNumber($previousBalance->value), 'TB', 0, 0, 'R');
                        $pdf->cell(10,  3, $previousBalance->operationType, 'TBR');
                        $pdf->ln();
                    }
                }
                if (strlen((string)$dr[6])>0)
                {
                    // Verify if is a different person
                    if (($personId != $dr[6]) && (strlen((string)$dr[6])>0))
                    {
                        $pdf->ln();
                        // Put person header
                        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 8);
                        $personId = $dr[6];
                        $pdf->cell(280, 3, $dr[6].' - '.$dr[7], 0, 0);
                        $pdf->ln();
                        $pdf->cell(280, 0.5, '', 'TB', 0, 0);
                        $pdf->ln();
                        $pdf->cell(25, 3, _M('Date', $module), 0, 0);
                        $pdf->cell(60, 3, _M('Operation', $module), 0, 0);
                        $pdf->cell(35, 3, _M('Invoice', $module), 0, 0);
                        $pdf->cell(25, 3, _M('Emission', $module), 0, 0);
                        $pdf->cell(25, 3, _M('Maturity', $module), 0, 0);
                        $pdf->cell(35, 3, _M('Debit', $module), 0, 0, 0, 'R');
                        $pdf->cell(35, 3, _M('Credit', $module), 0, 0, 0, 'R');
                        $pdf->cell(35, 3, _M('Balance', $module), 0, 0, 0, 'R');
                        $pdf->cell(5,  3, '', 0, 0);
                        $pdf->ln();
                        $pdf->cell(280, 0.5, '', 'TB', 0, 0);
                        $pdf->ln();
                        
                        // Accounts data...
                        $dataPrevious->accountSuffix  = $dr[0];
                        $dataPrevious->accountPrefix  = $dr[1];
                        $dataPrevious->accountRadical = $dr[2];
                        $dataPrevious->beginDate      = $data->beginDate;
                        $dataPrevious->personId       = $personId;
                        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, '', 8);
                        $personPreviousBalance = $business->getPersonPreviousBalance($dataPrevious);
                        $pdf->Cell(200, 3, _M('Previous balance', $module), 0, 0, 'R');
                        $pdf->Cell(75,  3, FINANCE::formatFinanceReportNumber($personPreviousBalance->value), 0, 0, 'R');
                        $pdf->Cell(5,   3, $personPreviousBalance->operationType, 0, 0, 'L');
                        $pdf->ln();
                        $accountancyLine = $personPreviousBalance;
                    }
                    $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, '', 8);
                    $pdf->cell(25, 2.55, $dr[12], 0, 0);
                    $pdf->cell(60, 2.55, $dr[10], 0, 0);
                    $pdf->cell(35, 2.55, $dr[3],  0, 0);
                    $pdf->cell(25, 2.55, '', 0, 0);
                    $pdf->cell(25, 2.55, '', 0, 0);
                    
                    // Accountancy report - Invert Debit and Credit
                    $pdf->cell(35, 2.55, $dr[11] == 'C' ? FINANCE::formatFinanceReportNumber($dr[13]) : '', 0, 0, 0, 'R');
                    $pdf->cell(35, 2.55, $dr[11] == 'D' ? FINANCE::formatFinanceReportNumber($dr[13]) : '', 0, 0, 0, 'R');

                    // Calculate total accountancy
                    $operator               = $dr[11] == 'C' ? '-' : '+';
                    $dataPerson[$dr[11]][]  = $dr[13];
                    $dataAccount[$dr[11]][] = $dr[13];
                    $accountancyLine->value = SAGU::calcNumber($accountancyLine->value.$operator.$dr[13]);
                    $accountancyLine = ACCOUNTANCY::returnOperationType($accountancyLine->value, $accountancyLine->operationType);
                    $pdf->cell(35, 2.55, FINANCE::formatFinanceReportNumber($accountancyLine->value), 0, 0, 0, 'R');
                    $pdf->cell(5,  2.55, $accountancyLine->operationType, 0, 0);
                    $pdf->ln();
                }
                else
                {
                    $personId = $dr[6];
                }

                // Make the totals of person
                if (($dataReport[$key+1][6] != $personId) && (strlen((string)$personId)>0))
                {
                    // This variable contains the final balance
                    $accountSchemeFinalBalance[] = $accountancyLine;
                    $dataPerson['C'] = is_array($dataPerson['C']) ? SAGU::calcNumber(implode('+', $dataPerson['C'])) : SAGU::formatNumber(0);
                    $dataPerson['D'] = is_array($dataPerson['D']) ? SAGU::calcNumber(implode('+', $dataPerson['D'])) : SAGU::formatNumber(0);
                    $pdf->cell(70,  3, '', 0, 0);
                    $pdf->cell(100, 3, _M('Totals', $module), 0, 0);
                    $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataPerson['C']), 0, 0, 'R');
                    $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataPerson['D']), 0, 0, 'R');
                    unset($dataPerson);
                    $pdf->ln();
                }

                // Make the totals for account
                if (($pdf->reportAccountScheme != null) && ($dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0] != $pdf->reportAccountScheme))
                {
                    $dataAccountToShow['C'] = is_array($dataAccount['C']) ? SAGU::calcNumber(implode('+', $dataAccount['C'])) : SAGU::formatNumber(0);
                    $dataAccountToShow['D'] = is_array($dataAccount['D']) ? SAGU::calcNumber(implode('+', $dataAccount['D'])) : SAGU::formatNumber(0);
                    unset($accountSchemeFinalBalanceCalc);
                    
                    if (is_array($accountSchemeFinalBalance))
                    {
                        foreach ($accountSchemeFinalBalance as $acfb)
                        {
                           $accountSchemeFinalBalanceCalc[] = '('.ACCOUNTANCY::returnSignal($acfb->value, $acfb->operationType).')';
                        }
                        unset($accountSchemeFinalBalance);
                        $accountSchemeFinalBalanceCalc = ACCOUNTANCY::returnOperationType(SAGU::calcNumber(implode('+', $accountSchemeFinalBalanceCalc)));
                    }
                    else
                    {
                        $accountSchemeFinalBalanceCalc = $previousBalance;
                    }
                    
                    //
                    if ((($dr[1].$dr[2].$dr[0] != $dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0]) && (SAGU::formatNumber($previousBalance->value) != SAGU::formatNumber(0))) /* || ($dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0] == null) */ )
                    {
                       // Totals of account
                       $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 8);
                       $pdf->cell(70, 3, '', 0, 0);
                       if (($dataAccountToShow['C'] != SAGU::formatNumber(0)) || ($dataAccountToShow['D'] != SAGU::formatNumber(0)))
                       {
                           $pdf->cell(100, 3, _M('Totals of account', $module), 0, 0);
                           $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataAccountToShow['C']), 0, 0, 'R');
                           $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataAccountToShow['D']), 0, 0, 'R');
                           unset($dataAccountToShow);
                       }
                           $pdf->ln();
                           $pdf->cell(70,  3, '', 0, 0);
                           $pdf->cell(100, 3, _M('Final balance of account', $module).' '. ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice(FINANCE::formatAccountSchemeId($dr[1].$dr[2].$dr[0])));
                       $pdf->cell(35,  3, '', 'TBL', 0);
                       $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($accountSchemeFinalBalanceCalc->value).'  ', 'TBR', 0, 0);
                       $pdf->cell(35,  3, '');
                       $pdf->cell(5,   3, $accountSchemeFinalBalanceCalc->operationType, 0, 0, 'L');
                       $dataAccount['C'] = $dataAccount['D'] = null;
                       $pdf->ln();
                       $pdf->ln();
                   }
               }
            }
        }
        $pdf->close();
        $pdf->output();
    }
}
?>
