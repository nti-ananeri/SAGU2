<?php

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();

    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        $business = $MIOLO->getBusiness($module,'BusDailyAssistantOfFutureExercisesResults');

        $this->SetMargins('20', '10');

        if ( $this->showHeader )
        {
            if ( strlen((string)$this->endPage) > 0 )
            {
                $page = ( ( $this->page - 1 ) % ($this->endPage - $this->beginPage + 1) ) + $this->beginPage;
            }
            else
            {
                $page = $this->page - 1 + $this->beginPage;
            }
            
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);
            $this->setY(10);
            $this->cell(120, 3, _M('Daily assistant of future exercises results', $module), 0, 0, 'L');
            $this->setFont(DEFAULT_REPORT_FONT, '', 7);
            $this->cell(50, 3, _M('Page', $module) . ': ' . $page, 0, 0, 'L');
            $this->ln();

            $this->setFont(DEFAULT_REPORT_FONT, '', 7);
            $companyName = $business->getDefaultCompanyName();
            $this->cell(120, 5, $companyName, 0, 0, 'L');
            $this->cell(50, 5, _M('Emission', $module) . ': ' . $this->reportEmissionDate, 0, 0, 'L');

            $this->ln();
            $this->cell(180,0, '', 1, 1, 'L');
            $this->ln(0.5);
            $this->cell(180,0, '', 1, 1, 'L');
            $this->ln();
            
            $this->setFont(DEFAULT_REPORT_FONT, 'B', 7);
               
            $this->cell(29,5, _M('Date', $module),       0, 0, 'L');
            $this->cell(13,5, _M('Id', $module),         0, 0, 'L');
            $this->cell(72,5, _M('Name', $module),       0, 0, 'L');
            $this->cell(29,5, _M('Operation', $module),  0, 0, 'L');
            $this->cell(18,5, _M('Debit', $module),      0, 0, 'R');
            $this->cell(18,5, _M('Credit', $module),     0, 0, 'R');
            $this->ln();
            $this->cell(180,0, '', 1, 1, 'L');
            $this->ln(0.5);
            $this->cell(180,0, '', 1, 1, 'L');
            $this->ln();
            
            if ( isset($this->accountScheme) )
            {
                $this->setFont(DEFAULT_REPORT_FONT, 'B', 7);
                        
                $this->ln();
                $this->cell(180,4, $this->accountScheme, 0, 0, 'L');
                $this->ln();
                $this->cell(180,0, '', 1, 1, 'L');        
            }
        }
    }

}


/**
 * PDF extension to generate report
 */
class RptDailyAssistantOfFutureExercisesResults
{

    /**
     * Method to generate the report
     */
    public function RptDailyAssistantOfFutureExercisesResults($filters = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        
        set_time_limit(0);

        $business = $MIOLO->getBusiness($module,'BusDailyAssistantOfFutureExercisesResults');
        
        // Generating PDF file
        $pdf = new PDF();
        
        $pdf->showHeader = true;

        $pdf->reportEmissionDate = $filters->emissionDate;

        if ( $filters->beginPage )
        {
            $pdf->beginPage  = $filters->beginPage;
        }
        else
        {
            $pdf->beginPage  = 0;
        }
        
        $pdf->endPage = $filters->endPage;
        
        $pdf->aliasNbPages();

        // First page
        $pdf->addPage('P', 'mm', 'A4');
        $pdf->SetMargins('20', '10');
        
//        $pdf->Header($pdf);
        
        $totalDebit[]       = 0;
        $totalCredit[]      = 0;
        $totalTotalDebit[]  = 0;
        $totalTotalCredit[] = 0;

        $business->beginTransaction();
        $business->getDailyAssistantOfFutureExercisesResults($filters);
        
        while (true)
        {

            $data = $business->fetchData(5000);
            
            if ( ! count($data) > 0 )
            {
                break;
            }
            else
            {

                
                foreach ( $data as $key => $value )
                {

                    if ( $value[11] < 0 )
                    {
                        if ( $value[9] == 'D' )
                        {
                            $value[9] = 'C';
                        }
                        else
                        {
                            $value[9] = 'D';
                        }
                        
                        $value[11] = SAGU::formatNumber($value[11] * (-1));
                    }

                    if ( $course != $value[0] && $course )
                    {
                        $debit  = SAGU::calcNumber(implode(' + ', $totalDebit));
                        $credit = SAGU::calcNumber(implode(' + ', $totalCredit));

                        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 7);
                        $pdf->ln();
                        $pdf->cell(143,3, '', 0, 0, 'L');
                        $pdf->cell(18,3,  FINANCE::formatFinanceReportNumber($debit),  0, 0, 'R');
                        $pdf->cell(18,3,  FINANCE::formatFinanceReportNumber($credit), 0, 0, 'R');

                        $totalTotalDebit [] = $debit;
                        $totalTotalCredit[] = $credit;
                        unset($totalDebit, $totalCredit);
                        $totalDebit[]       = 0;
                        $totalCredit[]      = 0;
                    }

                    if ( ($course != $value[0]) )
                    {
                        $accountScheme   = $business->getAccountSchemeDescription($value[1] . $value[2] . $value[0]);
                        $accountSchemeId = ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice($value[1] . $value[2] . $value[0]);
                        $accountSchemeId = FINANCE::formatAccountSchemeId($accountSchemeId);  


                        $pdf->setFont(DEFAULT_REPORT_FONT, 'B', 7);
                               
                        $pdf->ln();
                        $pdf->cell(180,4, $accountSchemeId . ' - ' . $accountScheme, 0, 0, 'L');
                        $pdf->ln();
                        $pdf->cell(180,0, '', 1, 1, 'L');
                        
                        $pdf->accountScheme = $accountSchemeId . ' - ' . $accountScheme;
                    }

                    $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, '', 7);
                       
                    $pdf->cell(29,2.55, $value[10],                0, 0, 'L');
                    $pdf->cell(13,2.55, $value[5],                 0, 0, 'L');
                    $pdf->cell(72,2.55, substr($value[6], 0, 40),  0, 0, 'L');
                    $pdf->cell(29,2.55, substr($value[8], 0, 20),  0, 0, 'L');
                    if ( $value[9] != 'D'  )
                    {
                        $pdf->cell(18,2.55, FINANCE::formatFinanceReportNumber($value[11]), 0, 0, 'R');
                        $pdf->cell(18,2.55, '',         0, 0, 'R');

                        $totalDebit[]  = $value[11];
                        $id++;

                        //computa dados a cada 1000 registros para não estourar a memória
                        if ( $id == 1000 )
                        {
                            $_debit  = SAGU::calcNumber(implode(' + ', $totalDebit));
                            unset($totalDebit);
                            $totalDebit[] = $_debit;
                            $id=0;
                        }

                    }
                    else
                    {
                        $pdf->cell(18,2.55, '',         0, 0, 'R');
                        $pdf->cell(18,2.55, FINANCE::formatFinanceReportNumber($value[11]), 0, 0, 'R');

                        $totalCredit[] = $value[11];
                        $ic++;

                        //computa dados a cada 1000 registros para não estourar a memória
                        if ( $ic == 1000 )
                        {
                            $_credit  = SAGU::calcNumber(implode(' + ', $totalCredit));
                            unset($totalCredit);
                            $totalCredit[] = $_credit;
                            $ic=0;
                        }
                    }

                    $pdf->ln();
                    

                    $course = $value[0];
                }
            }
        }
        
        //contabiliza última conta
        $debit  = SAGU::calcNumber(implode('+', $totalDebit));
        $credit = SAGU::calcNumber(implode('+', $totalCredit));

        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 7);
        $pdf->ln();
        $pdf->cell(143,3, '', 0, 0, 'L');
        $pdf->cell(18,3,  FINANCE::formatFinanceReportNumber($debit),  0, 0, 'R');
        $pdf->cell(18,3,  FINANCE::formatFinanceReportNumber($credit), 0, 0, 'R');

        $totalTotalDebit [] = $debit;
        $totalTotalCredit[] = $credit;
        unset($totalDebit, $totalCredit);
        $totalDebit[]       = 0;
        $totalCredit[]      = 0;


        $pdf->ln();
        $pdf->ln();
        $pdf->cell(180, 0, '', 1, 1, 'R');

        $pdf->showHeader = false;
        $pdf->addPage('P', 'mm', 'A4');

        $totalDebit  = SAGU::calcNumber(implode('+', $totalTotalDebit));
        $totalCredit = SAGU::calcNumber(implode('+', $totalTotalCredit));

        $pdf->setY(10);
        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, '', 8);
        $pdf->cell(30,4, _M('Debit total', $module)  . ': ',  0, 0, 'L');
        $pdf->cell(20,4, FINANCE::formatFinanceReportNumber($totalDebit), 0, 0, 'R');
        $pdf->ln();
        $pdf->cell(30,4, _M('Credit total', $module) . ': ', 0, 0, 'L');
        $pdf->cell(20,4, FINANCE::formatFinanceReportNumber($totalCredit), 0, 0, 'R');
        $pdf->ln();
        $pdf->setFont(DEFAULT_FINANCE_REPORT_FONT, 'B', 8);
        $pdf->cell(30,4, _M('Balance', $module)  . ': ',  0, 0, 'L');
        $pdf->cell(20,4, FINANCE::formatFinanceReportNumber(SAGU::calcNumber($totalDebit . ' - ' . $totalCredit)), 0, 0, 'R');

        $business->commit();
        
        $pdf->close();
        $pdf->output();
    }
}

?>
