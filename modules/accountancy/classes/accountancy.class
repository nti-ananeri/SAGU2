<?php

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();

/**
 * Class to get default operations and variables for accountancy module
 *
 * @author: William Prigol Lopes [william@solis.coop.br]
 *
 */
class ACCOUNTANCY
{
    /**
     *
     * Function that returns the operation type of normal operations
     *
     * @param: $value: integer or float value
     *
     * @return (object): A object containing the absolute value and the operation type (Debit or credit)
     *
     */
    function returnOperationType($value, $operationType = null, $concatenate = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'accountancy';
        $db = $MIOLO->getDatabase($module);
        if ($operationType != null)
        {
            $sql = ' SELECT CASE WHEN ? > '.SAGU::formatNumber(0).'
                                 THEN ?
                                 ELSE ?
                            END ';
                            
            $args = array($value,
                          $operationType,
                          $operationType == 'C' ? 'D' : 'C');

        }
        else
        {
            $sql = ' SELECT CASE WHEN ? > '.SAGU::formatNumber(0).'
                                 THEN \'C\'
                                 ELSE \'D\'
                            END ';
                            
            $args = array($value);
        }
        $ret = $db->query(SAGU::prepare($sql, $args));
        $return->value = abs($value);
        $return->operationType = $ret[0][0];
        if ( $concatenate == false )
        {
            return $return;
        }
        else
        {
            return $return->value . ' ' . $return->operationType;
        }
    }
    
    /**
     *
     * Function that returns the operation type of normal operations
     *
     * @param: $value: integer or float value
     *
     * @return (object): A object containing the absolute value and the operation type (Debit or credit)
     *
     */
    function returnSignal($value, $operationType = 'C')
    {
        if ($operationType == 'C')
        {
            return $value;
        }
        else
        {
            return $value*(-1.00);
        }
    }

    /**
     *
     * Function that returns the account scheme converted to invoice
     *
     * @param: $accountSchemeId: varchar
     *
     * @return (varchar): a varchar with the account scheme converted
     *
     */
    function convertAccountSchemePrefixFromIncomeForecastToInvoice($accountSchemeId)
    {
        $prefix = substr($accountSchemeId, 0, 3);
        
        if ( $prefix == ACCOUNT_SCHEME_INCOME_FORECAST_PREFIX )
        {
            $accountSchemeId = substr($accountSchemeId, 3, strlen((string)$accountSchemeId)-1);
            
            return ACCOUNT_SCHEME_INVOICE_PREFIX . $accountSchemeId;
        }
        else
        {
            return $accountSchemeId;
        }
    }


    /** 
     * Return the account scheme id formatted
     *
     * @param: $accountSchemeId (string): the account scheme id
     *
     * @returns (varchar): Returns the value formatted
     *
     */
     public function getAccountLimitDate($date)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = $MIOLO->getDatabase($module);


        $sql = ' SELECT  TO_DATE(? , \''. MASK_DATE .'\' ) > MAX(recordDate)
                   FROM accAccountingLimit ';

        $return = $db->query(SAGU::Prepare($sql,$date));
        return $return[0][0];
     }
}
?>
