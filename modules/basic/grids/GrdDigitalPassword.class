<?php
/**
 * Digital Password Search grid
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 21/12/2007
 *
 * \b Organization: \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDigitalPassword extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home = 'main:person:digitalpassword';
        $module = 'basic';

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
		
        $columns = array( new MGridColumn( _M('Person id', $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Name',$module), 'left', true, null, true, null, true),
						  new MGridColumn( _M('Inclusion date','services'),	'left', true, null, true, null, true),
   						  new MGridColumn( _M('Exclusion date','services'),	'left', true, null, true, null, true),
   						  new MGridColumn( _M('Active','services'),	'left', true, null, true, array(DB_TRUE => _M('Yes', $module), DB_FALSE => _M('No', $module)), true)
                     );

        $opts = array( 'function'       => 'update',
                       'personId'       => '%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array( 'function'        => 'delete',
                       'personId'        => '%0%',
                       'event'           => 'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridDigitalPassword' );

        $this->setIsScrollable();

        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );

        $this->eventHandler();

    }

}

?>
