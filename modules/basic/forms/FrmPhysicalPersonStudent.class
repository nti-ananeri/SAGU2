<?php

/**
 * Physical person student form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a physicalPersonStudent
 **/
class FrmPhysicalPersonStudent extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        if ( INCREASE_SECURITY_LEVEL == 'YES' )
        {
            $toolBar->disableButton('tbBtnDelete');
        }

        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $personId = $_GET['personId'] ? $_GET['personId'] : $_POST['personId'];
            $fields[] = new MTextLabel('personId', $personId, _M('Person id',$module));
            $fields[] = new MHiddenField('personId', $personId);

            $business = $MIOLO->getBusiness($module,'BusPhysicalPersonStudent');
            $data     = $business->getPhysicalPersonStudent($personId);
        }
        else
        {
            $personLabel = new MText('personLabel', _M('Person',$module).':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personLabel->setClass('m-caption m-caption-required');

            $personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Enter the person code',$module));
            $validators[] = new MIntegerValidator('personId', _M('Person',$module), 'required');

            $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
            $personName->setJsHint(_M('Person name',$module));
            $personName->setReadOnly(true);

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;
        }

        $externalCourseLabel = new MText('externalCourseLabel', _M('High school course',$module) . ':');
        $externalCourseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $externalCourseIdHs   = new MLookupTextField('externalCourseIdHs', $this->getFormValue('externalCourseIdHs',$data->externalCourseIdHs), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'externalCourseHsName', 'academic', 'ExternalCourse', null, null, true);
        $externalCourseIdHs->setJsHint(_M('Enter the high school', $module));
        $validators[] = new MIntegerValidator('externalCourseIdHs', '', 'optional');

        $externalCourseHsName = new MTextField('externalCourseHsName', $this->externalCourseHsName->value, '', FIELD_DESCRIPTION_SIZE);
        $externalCourseHsName->setJsHint(_M('External course name',$module));
        $externalCourseHsName->setReadOnly(true);

        $hctExternalCourse = new MHContainer('hctExternalCourse', array($externalCourseLabel, $externalCourseIdHs, $externalCourseHsName));
        $hctExternalCourse->setShowLabel(true);
        $fields[]  = $hctExternalCourse;

        $institutionLabel = new MText('institutionLabel', _M('High school institution',$module).':');
        $institutionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $institutionIdHs   = new MLookupTextField('institutionIdHs', $this->getFormValue('institutionIdHs',$data->institutionIdHs), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionHsName', 'basic', 'LegalPersonInstitution', null, null, true);
        $institutionIdHs->setJsHint(_M('Enter the institution code',$module));
        $validators[] = new MIntegerValidator('institutionIdHs', '', 'optional');

        $institutionHsName = new MTextField('institutionHsName', $this->institutionHsName->value, '', FIELD_DESCRIPTION_SIZE);
        $institutionHsName->setJsHint(_M('Institution name',$module));
        $institutionHsName->setReadOnly(true);

        $hctInstitution = new MHContainer('hctInstitution', array($institutionLabel, $institutionIdHs, $institutionHsName));
        $hctInstitution->setShowLabel(true);
        $fields[]  = $hctInstitution;

        $cityLabel = new MText('cityLabel', _M('City',$module).':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);

        $cityIdHs = new MLookupTextField('cityIdHs', $this->getFormValue('cityIdHs',$data->cityIdHs), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cityHsName', 'basic', 'City', null, null, true);
        $cityIdHs->setJsHint(_M('Enter the city code',$module));
        $validators[] = new MIntegerValidator('cityIdHs', '', 'optional');

        $cityHsName = new MTextField('cityHsName', $this->cityHsName->value, '', FIELD_DESCRIPTION_SIZE);
        $cityHsName->setJsHint(_M('City name',$module));
        $cityHsName->setReadOnly(true);

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityIdHs, $cityHsName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;

        $yearHs       = new MTextField('yearHs', $this->getFormValue('yearHs', $data->yearHs), _M('Year',$module), 4);
        $yearHs->setJsHint(_M('Enter the year',$module));
        $validators[] = new MIntegerValidator('yearHs', '', 'optional');
        $fields[]     = $yearHs;

        $conclusionDateHsLabel = new MText('conclusionDateHsLabel', _M('Conclusion date',$module).':');
        $conclusionDateHsLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$conclusionDateHsLabel->setClass('m-caption m-caption-required');

        $conclusionDateHs    = new MCalendarField('conclusionDateHs', $this->getFormValue('conclusionDateHs', $data->conclusionDateHs), '', FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('conclusionDateHs', _M('Conclusion date',$module), null);

        $hctConclusionDateHs = new MHContainer('hctConclusionDateHs', array($conclusionDateHsLabel, $conclusionDateHs));
        $hctConclusionDateHs->setShowLabel(true);
        $fields[]  = $hctConclusionDateHs;

        $passive      = new MTextField('passive', $this->getFormValue('passive', $data->passive), _M('Passive',$module), 4);
        $passive->setJsHint(_M('Enter the passive',$module));
        $fields[]     = $passive;

        //isInsured

        $isInsuredLabel = new MText('isInsuredLabel', _M('Is it insured',$module).'?');
        $isInsuredLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isInsured = $this->GetFormValue('isInsured',$data->isInsured) ? $this->GetFormValue('isInsured',$data->isInsured) : DB_FALSE;
        $isInsured = new MRadioButtonGroup('isInsured', '', SAGU::listYesNo(1), $isInsured, null, 'horizontal');
        $isInsured->SetShowLabel(false);

        $hctIsInsured = new MHContainer('hctIsInsured', array($isInsuredLabel, $isInsured));
        $fields[]  = $hctIsInsured;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'personId' => MIOLO::_request('personId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPhysicalPersonStudent');
        $ok       = $business->deletePhysicalPersonStudent($this->personId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //$data     = $this->getTypesData();
        $data       = $this->getData();

        $business = $MIOLO->getBusiness($module, 'BusPhysicalPersonStudent');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePhysicalPersonStudent($data);
            $msg = MSG_RECORD_UPDATED;

        }
        else
        {
            $ok  = $business->insertPhysicalPersonStudent($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('personIdS' => $data->personId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $physicalPerson = new BasPhysicalPerson();
                $business       = $MIOLO->getBusiness($module, 'BusPhysicalPerson');
                $physicalPerson = $business->getPhysicalPerson($data->personId);
                $business->updatePhysicalPerson($physicalPerson);

                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasPhysicalPersonStudent();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        return $data;
    }
}

?>
