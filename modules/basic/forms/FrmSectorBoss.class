<?php

/**
 * Sector boss form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a sectorBoss
 **/
class FrmSectorBoss extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $bossId   = $_GET['bossId'] ? $_GET['bossId'] : $_POST['bossId'];
            $fields[] = new MTextLabel('bossId', $bossId, _M('Responsible id',$module));
            $fields[] = new MHiddenField('bossId', $bossId);

            $sectorId = $_GET['sectorId'] ? $_GET['sectorId'] : $_POST['sectorId'];
            $fields[] = new MTextLabel('sectorId', $sectorId, _M('Sector id',$module));
            $fields[] = new MHiddenField('sectorId', $sectorId);

            $business = $MIOLO->getBusiness($module,'BusSectorBoss');
            $data     = $business->getSectorBoss($sectorId, $bossId);
        }
        else
        {
            $sectorLabel = new MText('sectorLabel', _M('Sector',$module).':');
            $sectorLabel->setWidth(FIELD_CONTAINER_SIZE);
            $sectorLabel->setClass('m-caption m-caption-required');

            $sectorId     = new MLookupTextField('sectorId', $this->sectorId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'sectorDescription', 'basic', 'Sector', null, null, true);
            $sectorId->setJsHint(_M('Enter the sector code',$module));
            $validators[] = new MIntegerValidator('sectorId', _M('Sector', $module), 'required');

            $sectorDescription = new MTextField('sectorDescription', $this->sectorDescription->value, '', FIELD_DESCRIPTION_SIZE);
            $sectorDescription->setJsHint(_M('Sector description',$module));
            $sectorDescription->setReadOnly(true);

            $hctSetor = new MHContainer('hctSetor', array($sectorLabel, $sectorId, $sectorDescription));
            $hctSetor->setShowLabel(true);
            $fields[]   = $hctSetor;

            $bossLabel = new MText('bossLabel', _M('Responsable',$module).':');
            $bossLabel->setWidth(FIELD_CONTAINER_SIZE);
            $bossLabel->setClass('m-caption m-caption-required');

            $bossId = new MLookupTextField('bossId', $this->bossId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'bossName', 'basic', 'PhysicalPersonEmployeeAndProfessor', null, null, true);
            $bossId->setJsHint(_M('Enter the sector responsible code',$module));
            $validators[] = new MIntegerValidator('bossId', _M('Responsable', $module), 'required');

            $bossName     = new MTextField('bossName', $this->bossName->value, '', FIELD_DESCRIPTION_SIZE);
            $bossName->setReadOnly(true);
            $bossName->setJsHint(_M('Responsible name',$module));

            $hctBoss = new MHContainer('hctBoss', array($bossLabel, $bossId, $bossName));
            $hctBoss->setShowLabel(true);
            $fields[]   = $hctBoss;
        }

        $email            = new MTextField('email', $this->getFormValue('email', $data->email), _M('E-mail',$module), 30);
        $email->setJsHint(_M('Enter the sector responsible e-mail',$module));
        $validators[]     = new MEmailValidator('email','','required');
        $fields[]         = $email;

        $level            = new MTextField('level', $this->getFormValue('level', $data->level), _M('Level',$module), 3);
        $level->setJsHint(_M('Enter the sector responsible level',$module));
        //$validators[]     = new MRequiredValidator('level');
        $validators[]     = new MRegExpValidator('level','','(^-?[0-9][0-9]*$)');
        $fields[]         = $level;

        $expirationLevel  = new MTextField('expirationLevel', $this->getFormValue('expirationLevel', $data->expirationLevel), _M('Expiration level',$module), 10, _M('Format: hh:mm:ss',$module));
        $expirationLevel->setJsHint(_M('Enter the sector responsible expiration level',$module));
        //$validators[]     = new MRequiredValidator('expirationLevel');
        $fields[]         = $expirationLevel;

        $isSendEmailLabel = new MText('isSendEmailLabel', _M('Send e-mail',$module) . ':');
        $isSendEmailLabel->setWidth('139');

        $isSendEmail = $this->GetFormValue('isSendEmail',$data->isSendEmail);
        if (! isset($isSendEmail) )
        {
            //default true
            $isSendEmail = 't';
        }
        $isSendEmail = new MRadioButtonGroup('isSendEmail', '', SAGU::listTrueFalse(1), $isSendEmail, null, 'horizontal');
        $isSendEmail->SetShowLabel(false);

        $hctIsSendEmail = new MHContainer('hctIsSendEmail', array($isSendEmailLabel, $isSendEmail));
        $fields[]  = $hctIsSendEmail;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.sectorId.focus()');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'sectorId' => MIOLO::_request('sectorId'),
                        'bossId'   => MIOLO::_request('bossId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusSectorBoss');
        $ok       = $business->deleteSectorBoss($this->sectorId->value, $this->bossId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusSectorBoss');

        if ( $function == 'update' )
        {
            $ok  = $business->updateSectorBoss($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertSectorBoss($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('sectorIdS' => $data->sectorId,
                          'bossIdS'   => $data->bossId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasSectorBoss();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        return $data;
    }
}

?>
