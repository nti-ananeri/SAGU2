<?php

/**
 * Physical person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate tabbs
 **/
 
class FrmPhysicalPerson extends MForm
{

    private $data;
    private $documents;

    /**
     * Class constructor
     **/
    function __construct($data=null)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $personData      = unserialize(urldecode(stripslashes(MIOLO::_request('personData'))));
        $this->data      = $personData;
        $this->documents = unserialize(urldecode(stripslashes(MIOLO::_request('documents'))));


        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module) . ' ' . _M('physical person',$module));
        }
        else
        {
            parent::__construct(_M('Update', $module) . ' ' . _M('physical person',$module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->data;

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnBack');
        $toolBar->disableButton('tbBtnPrint');
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnSave');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        $fields[] = new MHiddenField('limbo');

        //define os valores para os dados da pessoa
        $person = new BasPerson();
        $vars   = get_object_vars($person);

        foreach ( $vars as $var => $value )
        {
            if ( $var != 'name' )
            {
                $fields[]  = new MHiddenField($var, $data->$var);
            }
        }
        $fields[]  = new MHiddenField('personName', $data->name);
        $fields[]  = new MHiddenField('personTitleId', $data->personTitleId);

        //BaseGroup 1
        $residentialPhone = new MTextField('residentialPhone', $this->getFormValue('residentialPhone',$data->residentialPhone), _M('Residential',$module), 20);
        $residentialPhone->setJsHint(_M('Enter the residential phone',$module));
        $flds[]       = $residentialPhone;

        $workPhone    = new MTextField('workPhone', $this->getFormValue('workPhone',$data->workPhone), _M('Work',$module), 20);
        $workPhone->setJsHint(_M('Enter the work phone',$module));
        $flds[]       = $workPhone;

        $cellPhone    = new MTextField('cellPhone', $this->getFormValue('cellPhone',$data->cellPhone), _M('Cell',$module), 20);
        $cellPhone->setJsHint(_M('Enter the cell phone',$module));
        $flds[]       = $cellPhone;

        $messagePhone = new MTextField('messagePhone', $this->getFormValue('messagePhone',$data->messagePhone), _M('Message',$module), 20);
        $messagePhone->setJsHint(_M('Enter the message phone',$module));
        $flds[]       = $messagePhone;

        $bsg1            = new BaseGroup('bsg1',_M('Phones',$module),$flds,'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        unset($flds);

        //BaseGroup 2
        $WIDTH = 137;
        $flds[]       = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sex',$module), SAGU::listSex());
        $validators[] = new MRequiredValidator('sex');

        $business     = $MIOLO->GetBusiness($module, 'BusMaritalStatus');
        $flds[]       = new MComboBox('maritalStatusId', $this->getFormValue('maritalStatusId', $data->maritalStatusId), _M('Marital status',$module), $business->listMaritalStatus());
        $validators[] = new MRequiredValidator('maritalStatusId');

        $dateBirth    = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), _M('Birth date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('dateBirth','','required');
        $dateBirth->setJsHint(_M('Enter the birth date',$module));
        $flds[]       = $dateBirth;

        $cityIdBirth  = new MLookupTextField('cityIdBirth', $this->getFormValue('cityIdBirth',$data->cityIdBirth), _M('Birth city',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'cityNameBirth, limbo, stateBirthName, limbo, countryBirthName', $module, 'City', null, null, true);
        $validators[] = new MIntegerValidator('cityIdBirth', '', 'required');
        $cityIdBirth->setJsHint(_M('Enter the birth city code',$module));
        $cityIdBirth->setWidth($WIDTH);

        $cityNameBirth = new MTextField('cityNameBirth', $this->getFormValue('cityNameBirth',$data->cityNameBirth), _M('Birth city name',$module), 25);
        $cityNameBirth->setReadOnly(true);

        $hctCityBirth            = new MHContainer('hctCityBirth',array($cityIdBirth,$cityNameBirth));
        $hctCityBirth->showLabel = true;
        $flds[]                  = $hctCityBirth;

        $fatherId     = new MLookupTextField('fatherId', $this->getFormValue('fatherId',$data->fatherId), _M('Father id',$module), FIELD_ID_SIZE, null, null, 'fatherName', $module, 'PhysicalPerson', null, null, true);
        $fatherId->setJsHint(_M('Enter the father code',$module));
        $fatherId->setWidth($WIDTH);
        $validators[] = new MIntegerValidator('fatherId', '', 'required');

        $fatherName   = new MTextField('fatherName', $this->getFormValue('fatherName',$data->fatherName), _M('Father name',$module), 25);
        $fatherName->setReadOnly(true);

        $hctFather            = new MHContainer('hctFather',array($fatherId,$fatherName));
        $hctFather->showLabel = true;
        $flds[]               = $hctFather;

        $motherId     = new MLookupTextField('motherId', $this->getFormValue('motherId',$data->motherId), _M('Mother id',$module), FIELD_ID_SIZE, null, null, 'motherName', $module, 'PhysicalPerson', null, null, true);
        $motherId->setJsHint(_M('Enter the mother code',$module));
        $motherId->setWidth($WIDTH);
        $validators[] = new MIntegerValidator('motherId', '', 'required');

        $motherName   = new MTextField('motherName', $this->getFormValue('motherName',$data->motherName), _M('Mother name',$module), 25);
        $motherName->setReadOnly(true);

        $hctMother            = new MHContainer('hctMother',array($motherId,$motherName));
        $hctMother->showLabel = true;
        $flds[]               = $hctMother;
        
        //campo utilizado para passar um parametro para lookup de pessoal fisica
        $fields[] = new MHiddenField('source', 'responsableLegal');

        $responsableLegalId = new MLookupTextField('responsableLegalId', $this->getFormValue('responsableLegalId',$data->responsableLegalId), _M('Responsable',$module), FIELD_ID_SIZE, null, null, 'responsableLegalName', $module, 'PhysicalPerson', null, array('source' => 'source'), true);
        $responsableLegalId->setJsHint(_M('Enter the responsable legal code',$module));
        $responsableLegalId->setWidth($WIDTH);
        $validators[] = new MIntegerValidator('responsableLegalId', '', 'optional');

        $responsableLegalName = new MTextField('responsableLegalName', $this->getFormValue('responsableLegalName',$data->responsableLegalName), _M('Responsable legal name',$module), 25);
        $responsableLegalName->setReadOnly(true);

        $hctResponsableLegal            = new MHContainer('hctResponsableLegal',array($responsableLegalId,$responsableLegalName));
        $hctResponsableLegal->showLabel = true;
        $flds[]                         = $hctResponsableLegal;

        $carPlate     = new MTextField('carPlate', $this->getFormValue('carPlate',$data->carPlate), _M('Car plate',$module), 10);
        $carPlate->setJsHint(_M('Enter the plate car',$module));
        $flds[]       = $carPlate;

        $business     = $MIOLO->GetBusiness($module, 'BusEthnicOrigin');
        $flds[]       = new MComboBox('ethnicOriginId', $this->getFormValue('ethnicOriginId', $data->ethnicOriginId), _M('Ethnic origin',$module), $business->listEthnicOrigin());
        $validators[] = new MIntegerValidator('ethnicOriginId', '', 'optional');

        $healthCareId = new MLookupTextField('healthCareId', $this->getFormValue('healthCareId',$data->healthCareId), _M('Health care',$module), FIELD_ID_SIZE, null, null, 'healthCareName', $module, 'LegalPersonHealthCare', null, array('source' => 'source'), true);
        $healthCareId->setJsHint(_M('Enter the health care id',$module));
        $healthCareId->setWidth($WIDTH);
        $validators[] = new MIntegerValidator('healthCareId', '', 'optional');

        $healthCareName = new MTextField('healthCareName', $this->getFormValue('healthCareName',$data->healthCareName), _M('Health care name',$module), 25);
        $healthCareName->setReadOnly(true);

        $hctHealthCare            = new MHContainer('hctHealthCare',array($healthCareId,$healthCareName));
        $hctHealthCare->showLabel = true;
        $flds[]                         = $hctHealthCare;
        
        $business     = $MIOLO->GetBusiness($module, 'BusSpecialNecessity');
        $flds[]       = new MComboBox('specialNecessityId', $this->getFormValue('specialNecessityId', $data->specialNecessityId), _M('Special necessity',$module), $business->listSpecialNecessity());
        $validators[] = new MIntegerValidator('specialNecessityId', '', 'optional');

        $specialNecessityDescription = new MTextField('specialNecessityDescription', $this->getFormValue('specialNecessityDescription',$data->specialNecessityDescription), _M('Special necessity description',$module), FIELD_DESCRIPTION_SIZE);
        $specialNecessityDescription->setJsHint(_M('Enter the person special necessity description',$module));
        $flds[]       = $specialNecessityDescription;

        $businessReligion = $MIOLO->GetBusiness($module, 'BusReligion');
        $flds[]           = new MSelection('religionId', $this->getFormValue('religionId', $data->religionId), _M('Religion',$module), $businessReligion->listReligion());

        $businessCountry  = $MIOLO->GetBusiness('basic', 'BusCountry');
        $flds[]           = new Selection('countryIdBirth', $this->getFormValue('countryIdBirth', $data->countryIdBirth), _M('Nationality',$module), $businessCountry->listNationality());

        if ( $function == 'update' )
        {
            $dateDeath    = new MCalendarField('dateDeath', $this->getFormValue('dateDeath',$data->dateDeath), _M('Death date',$module), FIELD_DATE_SIZE);
            $dateDeath->setJsHint(_M('Enter the death date',$module));
            $validators[] = new MDateDMYValidator('dateDeath','');
            $flds[]       = $dateDeath;
        }

        $bsg2            = new BaseGroup('bsg2',_M('General data',$module),$flds,'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        unset($flds);

        //BaseGroup 3

        //lookup para o local de trabalho
        $workId            = new MLookupTextField('workId', $this->getFormValue('workId', $data->workId), _M('Company', 'basic'), FIELD_ID_SIZE, null, null, 'workName, cityIdWork, cityNameWork, stateNameWork, limbo, countryNameWork, zipCodeWork, locationWork, complementWork, neighborhoodWork', 'basic', 'LegalPersonWork', null, null, true);
        $workId->setJsHint(_M('Enter the institution code',$module));
        $validators[]      = new MIntegerValidator('workId', _M('Company',$module), 'optional');
        $flds[]            = $workId;
	
        if ( $function == 'update' )
        {
            $zipCodeWork  = new MTextField('zipCodeWork', $this->getFormValue('zipCodeWork',$data->zipCodeWork), _M('Zip code',$module), 10 );
        }
        elseif ( !isset($data->zipCodeWork) )
        {
            $zipCodeWork  = new MLookupTextField('zipCodeWork', $this->getFormValue('zipCodeWork',$data->zipCodeWork), _M('Zip code',$module), 10, null, null, 'locationWork, limbo, countryNameWork, limbo, stateNameWork, cityIdWork, cityNameWork, limbo, neighborhoodWork', 'basic', 'Location', null, null, true);
        }
        else
        {
            $zipCodeWork  = new MLookupTextField('zipCodeWork', $this->getFormValue('zipCodeWork',$data->zipCodeWork), _M('Zip code',$module), 10, null, null, 'limbo, limbo, countryNameWork, limbo, stateNameWork, cityIdWork, cityNameWork, limbo, limbo', 'basic', 'Location', null, null, true);
        }

        $zipCodeWork->setJsHint(_M('Enter the work zip code',$module));
        //$validators[] = new MCepValidator('zipCodeWork');
	$flds[]       = new MTextField('workName',$this->getFormValue('workName',$data->workName),_M('Name',$module),FIELD_DESCRIPTION_SIZE);
        $flds[]       = $zipCodeWork;

        if ( ! isset($data->zipCodeWork) )
        {
            $cityIdWork   = new MLookupTextField('cityIdWork', $this->getFormValue('cityIdWork',$data->cityIdWork), _M('City id',$module), FIELD_ID_SIZE, null, null, 'cityNameWork, limbo, stateNameWork, limbo, countryNameWork, zipCodeWork', $module, 'City', null, null, true);
        }
        else
        {
            $cityIdWork   = new MLookupTextField('cityIdWork', $this->getFormValue('cityIdWork',$data->cityIdWork), _M('City',$module), FIELD_ID_SIZE, null, null, 'cityNameWork, limbo, stateNameWork, limbo, countryNameWork', $module, 'City', null, null, true);
        }
//        $validators[] = new MRequiredValidator('cityIdWork');
        $cityIdWork->setWidth($WIDTH);
        $cityIdWork->setJsHint(_M('Enter the work city code',$module));
        $flds[]       = $cityIdWork;
        $validators[] = new MIntegerValidator('cityIdWork', '', 'optional');
 
        $cityNameWork = new MTextField('cityNameWork', $this->getFormValue('cityNameWork',$data->cityNameWork), _M('City name',$module), 20);
        $cityNameWork->setReadOnly(true);
        $flds[]       = $cityNameWork;
 
        $stateNameWork = new MTextField('stateNameWork', $this->getFormValue('stateNameWork',$data->stateNameWork), _M('State name',$module), 20);
        $stateNameWork->setReadOnly(true);
        $flds[]       = $stateNameWork;
 
        $countryNameWork = new MTextField('countryNameWork', $this->getFormValue('countryNameWork',$data->countryNameWork), _M('Country name',$module), 20);
        $countryNameWork->setReadOnly(true);
        $flds[]       = $countryNameWork;

        $locationWork = new MTextField('locationWork', $this->getFormValue('locationWork',$data->locationWork), _M('Location',$module), 30);
        $locationWork->setJsHint(_M('Enter the work location',$module));
        $flds[]       = $locationWork;

        $complementWork = new MTextField('complementWork', $this->getFormValue('complementWork',$data->complementWork), _M('Complement',$module), 10);
        $locationWork->setJsHint(_M('Enter the location complement',$module));
        $flds[]       = $complementWork;

        $neighborhoodWork = new MTextField('neighborhoodWork', $this->getFormValue('neighborhoodWork',$data->neighborhoodWork), _M('Neighborhood',$module), 20);
        $neighborhoodWork->setJsHint(_M('Enter the work neighborhood',$module));
        $flds[]       = $neighborhoodWork;

        //work
        $bsg3            = new BaseGroup('bsg3',_M('Work',$module),$flds,'vertical');
        $bsg3->showLabel = true;
        $bsg3->width     = '100%';
        unset($flds);

        //VerticalContainer 1: BaseGroup 1 + BaseGroup 3
        $vct1  = new MVContainer('vct1',array($bsg1,$bsg3));
        $vct1->showLabel = false;

        //VerticalContainer 2: BaseGroup 2
        $vct2  = new MVContainer('vct2',array($bsg2));
        $vct2->showLabel = false;

        //HorizontalContainer 1:  VerticalContainer 2 + VerticalContainer 1
        $hct1            = new MHContainer('hct1',array($vct2,$vct1));
        $hct1->showLabel = true;
        $fields[]        = $hct1;

        $fields[] = new Separator();
        $btn1[]   = new MButton('btnPrev',  '<< ' . _M('Previous', $module));
        $btn1[]   = new MButton('btnNext', _M('Next', $module) . ' >>');

        $div1     = new MDiv('div1', $btn1, null, 'align=center');
        $fields[] = $div1;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnPrev_click($sender = null)
    {

        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');

        $personData = serialize($this->getTypesData($action));

        if ( $this->fieldsOk() )
        {
            $args = array(
                           'function'   => $function,
                           'page'       => 1,
                           'personData' => $personData,
                           'documents'  => urlencode(serialize($this->documents))
                         );

            $this->page->mGoto($MIOLO->getActionURL($module, $postAction, NULL, $args));
        }
    }

    /**
     * Event triggered when user click next
     **/
    public function btnNext_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $personData = $this->getTypesData($action);
        if ( $this->fieldsOk() )
        {
            $personData = urlencode(serialize($personData));

            $args = array(
                           'function'   => $function,
                           'page'       => 3,
                           'personData' => $personData,
                           'documents'  => urlencode(serialize($this->documents))
                         );

            $this->page->mGoto($MIOLO->getActionURL($module, $postAction, NULL, $args));
        }
    }

    public function fieldsOk()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData($action);

        if ( strlen((string)$data->maritalStatusId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusMaritalStatus');
            $maritalStatus = $bus->getMaritalStatus($data->maritalStatusId);
            if ( is_null($maritalStatus->maritalStatusId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('marital status', $module)));
            }
        }
        if ( strlen((string)$data->cityIdBirth) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusCity');
            $city = $bus->getCity($data->cityIdBirth);
            if ( is_null($city->cityId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('city of birth', $module)));
            }
        }
        if ( strlen((string)$data->fatherId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusPerson');
            $person = $bus->getPerson($data->fatherId);
            if ( is_null($person->personId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('father', $module)));
            }
        }
        if ( strlen((string)$data->motherId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusPerson');
            $person = $bus->getPerson($data->motherId);
            if ( is_null($person->personId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('mother', $module)));
            }
        }
        if ( strlen((string)$data->responsableLegalId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusPerson');
            $person = $bus->getPerson($data->responsableLegalId);
            if ( is_null($person->personId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('legal responsible', $module)));
            }
        }
        if ( strlen((string)$data->specialNecessityId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusSpecialNecessity');
            $specialNecessity = $bus->getSpecialNecessity($data->specialNecessityId);
            if ( is_null($specialNecessity->specialNecessityId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('special necessity', $module)));
            }
        }
        if ( strlen((string)$data->ethnicOriginId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusEthnicOrigin');
            $ethnicOrigin = $bus->getEthnicOrigin($data->ethnicOriginId);
            if ( is_null($ethnicOrigin->ethnicOriginId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('ethnic origin', $module)));
            }
        }
        if ( strlen((string)$data->cityIdWork) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusCity');
            $city = $bus->getCity($data->cityIdWork);
            if ( is_null($city->cityId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('city of work', $module)));
            }
        }
   
        return ($this->hasErrors() == 0);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData($action = NULL)
    {

        if ( strlen((string)$action) == 0 )
        {
            $data = new BasPerson();
        }
        elseif ( strstr(strtolower($action), 'physical') )
        {
            $data = new BasPhysicalPerson();
        }
        elseif ( strstr(strtolower($action), 'legal') )
        {
            $data = new BasLegalPerson();
        }

        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = MIOLO::_request($var);
            }
        }
        $data->name = $this->personName->value;

        return $data;
    }

}
