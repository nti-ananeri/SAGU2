<?php

/**
 * Location form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a location
 **/
class FrmLocation extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {

            $locationId = MIOLO::_request('locationId');
            $business = $MIOLO->getBusiness($module,'BusLocation');
            $data     = $business->getLocation($locationId);
            $fields[] = new MHiddenField('locationId', $locationId);
            $this->page->onLoad('document.' . $this->name . '.locationName.focus();');

        }

        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $zipCode = new MTextField('zipCode', $this->getFormValue('zipCode',$data->zipCode), _M('Zip code',$module), FIELD_ZIPCODE_SIZE);
        $zipCode->setJsHint(_M('Enter the zip code',$module));
        $validators[] = new MRangeValidator('zipCode', '', '00000000', '99999999', 'i', 'required');
        $fields[] = $zipCode;

        $this->page->onLoad('document.' . $this->name . '.zipCode.focus();');

        $locationName = new MTextField('locationName', $this->getFormValue('locationName',$data->name), _M('Location name',$module), FIELD_DESCRIPTION_SIZE);
        $locationName->setJsHint(_M('Enter the location name',$module));
        $validators[] = new MRequiredValidator('locationName', _M('Location name', $module));
        $fields[] = $locationName;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $cityLabel = new MText('cityLabel', _M('City',$module).':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityLabel->setClass('m-caption m-caption-required');

        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId',$data->cityId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
//            'cityName,limbo,stateName,limbo,countryName,zipCode',
            'cityName,limbo,stateName,limbo,countryName,limbo',
            $module, 'City', null, null, true);
        $validators[] = new MIntegerValidator('cityId', _M('City', $module), 'required');
        $cityId->setJsHint(_M('Enter the city code',$module));
 
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setJsHint(_M('City name',$module));
        $cityName->setReadOnly(true);

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;
 
        $stateName = new MTextField('stateName', $this->getFormValue('stateName',$data->stateName), _M('State',$module), FIELD_DESCRIPTION_SIZE);
        $stateName->setJsHint(_M('Enter the state name',$module));
        $stateName->setReadOnly(true);
        $fields[] = $stateName;
 
        $countryName = new MTextField('countryName', $this->getFormValue('countryName',$data->countryName), _M('Country',$module), FIELD_DESCRIPTION_SIZE);
        $countryName->setJsHint(_M('Enter the country name',$module));
        $countryName->setReadOnly(true);
        $fields[] = $countryName;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Neighborhood',$module).':');
        $neighborhoodLabel->setWidth(FIELD_CONTAINER_SIZE);
        $neighborhoodLabel->setClass('m-caption m-caption-required');

        $neighborhoodId = new MLookupTextField('neighborhoodId', $this->getFormValue('neighborhoodId',$data->neighborhoodId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
            'neighborhoodName',
            $module, 'Neighborhood', null, null, true);
        $validators[] = new MIntegerValidator('neighborhoodId', _M('Neighborhood', $module), 'required');
        $neighborhoodId->setJsHint(_M('Enter the neighborhood code',$module));

        $neighborhoodName = new MTextField('neighborhoodName', $this->getFormValue('neighborhoodName',$data->neighborhoodName), '', FIELD_DESCRIPTION_SIZE);
        $neighborhoodName->setJsHint(_M('Neighborhood name',$module));
        $neighborhoodName->setReadOnly(true);

        $hctNeighborhood = new MHContainer('hctNeighborhood', array($neighborhoodLabel, $neighborhoodId, $neighborhoodName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctNeighborhood;
 
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
        $this->locationName->value = $this->getFormValue('locationNameS') ? $this->getFormValue('locationNameS') : '';
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'locationId'=>MIOLO::_request('locationId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusLocation');
        $ok = $business->deleteLocation($this->locationId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusLocation');

        if ( $function == 'update' )
        {
            $ok  = $business->updateLocation($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertLocation($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('zipCodeS'=>$data->zipCode);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasLocation();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->locationName->value;

        return $data;
    }
}

?>
