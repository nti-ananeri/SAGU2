<?php

/**
 * Product form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a product
 **/
class FrmProduct extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $productId = $_GET['productId'] ? $_GET['productId'] : $_POST['productId'];

            $fields[] = new MTextLabel('productId', $productId, _M('Product id',$module));
            $fields[] = new MHiddenField('productId', $productId);

            $business = $MIOLO->getBusiness($module,'BusProduct');
            $data     = $business->getProduct($productId);
        }

        //name
        $productNameLabel = new MText('productNameLabel', _M('Name',$module).':');
        $productNameLabel->setClass('m-caption m-caption-required');
        $productNameLabel->setWidth(FIELD_CONTAINER_SIZE);

        $productName      = new MTextField('productName', $this->getFormValue('productName', $data->name), '', FIELD_DESCRIPTION_SIZE);
        $productName->setJsHint(_M('Enter the product name',$module));
        $validators[]     = new MRequiredValidator('productName', _M('Name', $module), 'required');

        $hctProductName   = new MHContainer('hctProductName', array($productNameLabel, $productName));
        $hctProductName->setShowLabel(true);
        $fields[]         = $hctProductName;

        //short name
        $productShortNameLabel = new MText('productShortNameLabel', _M('Short name',$module).':');
        $productShortNameLabel->setWidth(FIELD_CONTAINER_SIZE);

        $productShortName      = new MTextField('shortName', $this->getFormValue('shortName', $data->shortName), '', FIELD_DESCRIPTION_SIZE);
        $productShortName->setJsHint(_M('Enter the product short name',$module));

        $hctProductShortName   = new MHContainer('hctProductName', array($productShortNameLabel, $productShortName));
        $hctProductShortName->setShowLabel(true);
        $fields[]              = $hctProductShortName;

        //description
        $productDescriptionLabel = new MText('productDescriptionLabel', _M('Description',$module).':');
        $productDescriptionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $productDescription      = new MTextField('productDescription', $this->getFormValue('productDescription', $data->description), '', FIELD_DESCRIPTION_SIZE);
        $productDescription->setJsHint(_M('Enter the product description',$module));

        $hctProductDescription   = new MHContainer('hctProductDescription', array($productDescriptionLabel, $productDescription));
        $hctProductDescription->setShowLabel(true);
        $fields[]                = $hctProductDescription;

        //product group id
        $productGroupIdLabel = new MText('productGroupIdLabel', _M('Product group',$module).':');
        $productGroupIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $productGroupIdLabel->setClass('m-caption m-caption-required');
        $busGroupProduct     = $MIOLO->GetBusiness($module, 'BusProductGroup');
        $productGroupId      = new Mselection('productGroupId', $this->getFormValue('productGroupId', $data->productGroupId), '', $busGroupProduct->listProductGroup(), true);
        $productGroupId->setJsHint(_M('Enter the product group id',$module));
        $validators[]        = new MRequiredValidator('productGroupId', _M('Product group', $module), 'required');
        $hctProductGroup     = new MHContainer('hctProductGroup', array($productGroupIdLabel, $productGroupId));
        $hctProductGroup->setShowLabel(true);
        $fields[]            = $hctProductGroup;

        //bar code
        $productBarCodeLabel = new MText('productBarCodeLabel', _M('Bar code',$module).':');
        $productBarCodeLabel->setWidth(FIELD_CONTAINER_SIZE);

        $productBarCode      = new MTextField('barCode', $this->getFormValue('barCode', $data->barCode), '', FIELD_DESCRIPTION_SIZE);
        $productBarCode->setJsHint(_M('Enter the product bar code',$module));

        $hctProductBarCode   = new MHContainer('hctProductBarCode', array($productBarCodeLabel, $productBarCode));
        $hctProductBarCode->setShowLabel(true);
        $fields[]                = $hctProductBarCode;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.productName.focus()');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'productId'   => MIOLO::_request('productId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusProduct');
        $ok       = $business->deleteProduct($this->productId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg     = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusProduct');

        if ( $function == 'update' )
        {
            $ok  = $business->updateProduct($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertProduct($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('productIdS' => $data->productId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasProduct();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name        = $this->productName->value;
        $data->description = $this->productDescription->value;

        return $data;
    }
}

?>
