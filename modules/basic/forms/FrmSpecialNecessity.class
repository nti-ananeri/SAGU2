<?php

/**
 * Special necessity form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a specialNecessity
 **/
class FrmSpecialNecessity extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update', 'delete')) )
        {
            $specialNecessityId = $_GET['specialNecessityId'] ? $_GET['specialNecessityId'] : $_POST['specialNecessityId'];
            $fields[]  = new MTextLabel('specialNecessityId', $specialNecessityId, _M('Special necessity id', $module));
            $fields[]  = new MHiddenField('specialNecessityId', $specialNecessityId);
            
            $business = $MIOLO->getBusiness($module, 'BusSpecialNecessity');
            $data     = $business->getSpecialNecessity($specialNecessityId);
        }

        $data->specialNecessityDescription = $this->getFormValue('specialNecessityDescription', $data->description);
        $fields[]     = new MTextField('specialNecessityDescription', $data->specialNecessityDescription, _M('Description', $module), FIELD_DESCRIPTION_SIZE);
        $validators[] = new MRequiredValidator('specialNecessityDescription');

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Special necessity begin date',$module), 15);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'optional');
        $fields[] = $beginDate;

        //easyAccess


        $easyAccessLabel = new MText('easyAccessLabel', _M('Easy access',$module).':');
        $easyAccessLabel->setWidth(FIELD_CONTAINER_SIZE);

        $easyAccess = $this->GetFormValue('easyAccess',$data->easyAccess) ? $this->GetFormValue('easyAccess',$data->easyAccess) : DB_FALSE;
        $easyAccess = new MRadioButtonGroup('easyAccess', '', SAGU::listTrueFalse(1), $easyAccess, null, 'horizontal');
        $easyAccess->SetShowLabel(false);

        $hctEasyAccess = new MHContainer('hctEasyAccess', array($easyAccessLabel, $easyAccess));
        $fields[]  = $hctEasyAccess;

        //accompanimentNeeds

        $accompanimentNeedsLabel = new MText('accompanimentNeedsLabel', _M('Accompaniment needs',$module).':');
        $accompanimentNeedsLabel->setWidth(FIELD_CONTAINER_SIZE);

        $accompanimentNeeds = $this->GetFormValue('accompanimentNeeds',$data->accompanimentNeeds) ? $this->GetFormValue('accompanimentNeeds',$data->accompanimentNeeds) : DB_FALSE;
        $accompanimentNeeds = new MRadioButtonGroup('accompanimentNeeds', '', SAGU::listTrueFalse(1), $accompanimentNeeds, null, 'horizontal');
        $accompanimentNeeds->SetShowLabel(false);

        $hctAccompanimentNeeds = new MHContainer('hctAccompanimentNeeds', array($accompanimentNeedsLabel, $accompanimentNeeds));
        $fields[]  = $hctAccompanimentNeeds;

        //isPermanent

        $isPermanentLabel = new MText('isPermanentLabel', _M('Is the special necessity permanent',$module).'?');
        $isPermanentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isPermanentValue = $this->GetFormValue('isPermanent',$data->isPermanent) ? $this->GetFormValue('isPermanent',$data->isPermanent) : DB_FALSE;
        $isPermanent = new MRadioButtonGroup('isPermanent', '', SAGU::listTrueFalse(1), $isPermanentValue, null, 'horizontal');
        $isPermanent->SetShowLabel(false);
        $isPermanent->setAutoSubmit(true);

        $hctIsPermanent = new MHContainer('hctIsPermanent', array($isPermanentLabel, $isPermanent));
        $fields[]  = $hctIsPermanent;

        if ( $isPermanentValue == DB_TRUE )
        {
            $fields[]     = new MHiddenField('howMuchWeeks', null);
            unset($howMuchWeeks);
            unset($data->howMuchWeeks);
        }
        else
        {
            $fields[]     = new MTextField('howMuchWeeks', $data->howMuchWeeks, _M('How many weeks will it least?', $module));
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.'. $this->name .'.specialNecessityDescription.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
//         $MIOLO  = MIOLO::getInstance();
//         $module = MIOLO::getCurrentModule();
//         $action = MIOLO::getCurrentAction();
// 
//         $data = $this->getTypesData();
//         $vars = get_object_vars($data);
//         foreach ( $vars as $var => $value )
//         {
//             if ( $this->$var && $var != 'name' )
//             {
//                 $var2 = $var.'S';
//                 $this->$var->value = $this->getFormValue($var2) ? $this->getFormValue($var2) : '';;
//             }
//         }
//         $this->specialNecessityDescription->value = $this->getFormValue('specialNecessityDescriptionS') ? $this->getFormValue('specialNecessityDescriptionS') : '';
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'specialNecessityId'=>MIOLO::_request('specialNecessityId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusSpecialNecessity');
        $ok = $business->deleteSpecialNecessity($this->specialNecessityId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusSpecialNecessity');

        if ( $function == 'update' )
        {
            $ok  = $business->updateSpecialNecessity($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertSpecialNecessity($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('specialNecessityIdS'=>$data->specialNecessityId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasSpecialNecessity();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->specialNecessityDescription->value;

        return $data;
    }
}

?>
