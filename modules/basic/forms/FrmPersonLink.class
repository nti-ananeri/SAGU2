<?php

/**
 * Person link form
 *
 * @author Rudi Uhri Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a personLink
 **/
class FrmPersonLink extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $personLabel = new MText('personLabel', _M('Person id',$module) . ':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds[] = $personLabel;

            $linkLabel = new MText('linkLabel', _M('Link id',$module) . ':');
            $linkLabel->setWidth(FIELD_CONTAINER_SIZE);
            $flds2[] = $linkLabel;

            $personId = $_GET['personId'] ? $_GET['personId'] : $_POST['personId'];
            $flds[]  = new MTextLabel('personId', $personId);
            $flds[]  = new MHiddenField('personId', $personId);

            $linkId = $_GET['linkId'] ? $_GET['linkId'] : $_POST['linkId'];
            $flds2[]  = new MTextLabel('linkId', $linkId, '');
            $flds2[]  = new MHiddenField('linkId', $linkId);

            $business = $MIOLO->getBusiness($module,'BusPersonLink');
            $data     = $business->getPersonLinK($personId, $linkId);

            $flds[]  = new MTextLabel('personName', $this->getFormValue('personName', $data->personName));
            $flds[]  = new MHiddenField('personName', $personName);

            $flds2[]  = new MTextLabel('linkDescription', $this->getFormValue('linkDescription', $data->linkDescription));
            $flds2[]  = new MHiddenField('linkDescription', $linkDescription);

            $hctPerson = new MHContainer('hctPerson', $flds);
            $hctPerson->setShowLabel(true);
            $fields[]   = $hctPerson;

            $hctLink = new MHContainer('hctLink', $flds2);
            $hctLink->setShowLabel(true);
            $fields[]   = $hctLink;
        }
        else
        {
            //personId
            $personLabel = new MText('personLabel', _M('Person',$module));
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personLabel->setClass('m-caption m-caption-required');
    
            $personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_ID_SIZE, null, null, 'personName', $module, 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Enter the person code',$module));
            $validators[] = new MIntegerValidator('personId', _M('Person',$module), 'required');
    
            $personName   = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Person name',$module));
    
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;
    
            //link
            $linkLabel = new MText('linkLabel', _M('Group link',$module));
            $linkLabel->setWidth(FIELD_CONTAINER_SIZE);
            $linkLabel->setClass('m-caption m-caption-required');
    
            $linkId = new MLookupTextField('linkId', $this->getFormValue('linkId',$data->linkId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'linkDescription', $module, 'Link', null, null, true);
            $linkId->setJsHint(_M('Enter the link code',$module));
            $validators[] = new MIntegerValidator('linkId', _M('Link',$module), 'required');
    
            $linkDescription = new MTextField('linkDescription', $this->getFormValue('linkDescription',$data->linkDescription), '', FIELD_DESCRIPTION_SIZE);
            $linkDescription->setReadOnly(true);
            $linkDescription->setJsHint(_M('Link description',$module));
    
            $hctLink  = new MHContainer('hctLink', array($linkLabel, $linkId, $linkDescription));
            $hctLink->setShowLabel(true);
            $fields[] = $hctLink;
        }

        $dateValidate = new MCalendarField('dateValidate', $this->getFormValue('dateValidate', $data->dateValidate), _M('Validity date',$module), FIELD_DATE_SIZE);
        $dateValidate->setValidator(new MDateDMYValidator('dateValidate'));
        //$validators[] = new MDateDMYValidator('dateValidate','','required');
        //$validators[] = new MRequiredValidator('dateValidate');
        $fields[]     = $dateValidate;


        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus()');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }

        $this->personName->value = $this->getFormValue('personNameS') ? $this->getFormValue('personNameS') : '';

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'personId'=>MIOLO::_request('personId'),
                        'linkId'=>MIOLO::_request('linkId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPersonLink');
        $ok = $business->deletePersonLink($this->personId->value, $this->linkId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPersonLink');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePersonLink($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertPersonLink($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('personIdS' => $data->personId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasPersonLink();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        return $data;
    }

}

?>
