<?php

/**
 * Document type form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a document type
 **/
class FrmDocumentType extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $documentTypeId = $_GET['documentTypeId'] ? $_GET['documentTypeId'] : $_POST['documentTypeId'];
            $fields[]  = new MTextLabel('documentTypeId', $documentTypeId, _M('Document type id',$module));
            $fields[]  = new MHiddenField('documentTypeId', $documentTypeId);
            
            $business = $MIOLO->getBusiness($module,'BusDocumentType');
            $data     = $business->getDocumentType($documentTypeId);
        }

        $data->documentTypeName = $this->getFormValue('documentTypeName', $data->name);
        $fields[]               = new MTextField('documentTypeName', $data->documentTypeName, _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $validators[]           = new MRequiredValidator('documentTypeName');
        
        $fields[] = new MTextField('mask', $this->getFormValue('mask', $data->mask), _M('Mask',$module), FIELD_DESCRIPTION_SIZE);
        
        $options = array(''=>_M('Not informed',$module),
                         'F'=>_M('Female',$module),
                         'M'=>_M('Male',$module));
        $fields[] = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sex',$module), $options, false, '');
        
        $options = array('P'=>_M('Physical',$module),
                         'L'=>_M('Legal',$module));
        $fields[] = new MSelection('personType', $this->getFormValue('personType', $data->personType), _M('Person type',$module), $options, false, '');
        $validators[] = new MRequiredValidator('personType');

        $fields[] = new MTextField('minAge', $this->getFormValue('minAge', $data->minAge), _M('Minimum age',$module), FIELD_ID_SIZE);
        $validators[] = new MRegExpValidator('minAge','','(^-?[0-9][0-9]*$)');
        
        $fields[] = new MTextField('maxAge', $this->getFormValue('maxAge', $data->maxAge), _M('Maximum age',$module), FIELD_ID_SIZE);
        $validators[] = new MRegExpValidator('maxAge','','(^-?[0-9][0-9]*$)');

        $needDeliverLabel = new MText('needDeliverLabel', _M('Does it need deliver',$module).'?');
        $needDeliverLabel->setWidth(FIELD_CONTAINER_SIZE);

        $needDeliver = $this->GetFormValue('needDeliver',$data->needDeliver) ? $this->GetFormValue('needDeliver',$data->needDeliver) : DB_TRUE;
        $needDeliver = new MRadioButtonGroup('needDeliver', '', SAGU::listTrueFalse(1), $needDeliver, null, 'horizontal');
        $needDeliver->SetShowLabel(false);

        $hctNeedDeliver = new MHContainer('hctNeedDeliver', array($needDeliverLabel, $needDeliver));
        $fields[]  = $hctNeedDeliver;
        
        //isBlockEnroll
        $isBlockEnrollLabel = new MText('isBlockEnrollLabel', _M('Does it block enroll',$module).'?');
        $isBlockEnrollLabel->setWidth(FIELD_CONTAINER_SIZE);

        $isBlockEnroll = $this->GetFormValue('isBlockEnroll',$data->isBlockEnroll) ? $this->GetFormValue('isBlockEnroll',$data->isBlockEnroll) : DB_TRUE;
        $isBlockEnroll = new MRadioButtonGroup('isBlockEnroll', '', SAGU::listTrueFalse(1), $isBlockEnroll, null, 'horizontal');
        $isBlockEnroll->SetShowLabel(false);

        $hctIsBlockEnroll = new MHContainer('hctIsBlockEnroll', array($isBlockEnrollLabel, $isBlockEnroll));
        $fields[]  = $hctIsBlockEnroll;

        //Observação
        $observation    = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation ) , _M('Obs',$module), 20, 3, 35);
        $observation->setJsHint(_M('Enter the document obs',$module));
        $fields[] = $observation;


        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.documentTypeName.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
        $this->countryName->value = $this->getFormValue('countryNameS') ? $this->getFormValue('countryNameS') : '';
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'documentTypeId'=>MIOLO::_request('documentTypeId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusDocumentType');
        $ok = $business->deleteDocumentType($this->documentTypeId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusDocumentType');

        if ( $function == 'update' )
        {
            $ok  = $business->updateDocumentType($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertDocumentType($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('documentTypeIdS'=>$data->documentTypeId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasDocumentType();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        $data->name             = $this->documentTypeName->value;
        $data->documentTypeId   = $this->documentTypeId->value;
        $data->mask             = $this->mask->value;
        $data->sex              = $this->sex->value;
        $data->personType       = $this->personType->value;
        $data->minAge           = $this->minAge->value;
        $data->maxAge           = $this->maxAge->value;
        $data->needDeliver      = $this->needDeliver->value;

        return $data;
    }
}

?>
