<?php

/**
 * Digital Password Search form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br]
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 21/12/2007
 *
 * \b Organization: \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to view digital password already assigned pupils
 **/
class FrmDigitalPasswordAssigned extends MForm
{

    private $postAction;

    /**
     * Class constructor
     **/
    function __construct($postAction)
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Digital password', 'services'));
		$this->setShowPostButton(false);
	
        $this->postAction = $postAction;
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->data;

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnPrint');
		if ( $function == 'insert' )
		{
		    $toolBar->disableButton('tbBtnDelete');
		}
		if ( $function == 'update' )
		{
			$businessDigitalPassword = $MIOLO->getBusiness($module,'BusDigitalPassword');
			$filter->personId = MIOLO::_request('personId');
			$data = $businessDigitalPassword->getDigitalPassword($filter);
			unset($filter);
		}
		$fields[] = $toolBar;

		//Person Lookup
		$personLabelS = new MText('personLabelS', _M('Person',$module).':');
		$personLabelS->setWidth(FIELD_LABEL_SIZE);
		$personLabelS->setClass('m-caption m-caption-required');
		if ( $function != 'update' )
		{
			$personId   = new MLookupTextField('personId', $this->personId->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personNameS', 'basic', 'Person', null, null, true);
			$personId->setJsHint(_M('Enter the person code',$module));
			$validators[] = new MIntegerValidator('personId', '', 'required');

			$personNameS = new MTextField('personNameS', $this->personNameS->value, '', FIELD_DESCRIPTION_SIZE);
			$personNameS->setJsHint(_M('Person name',$module));
			$personNameS->setReadOnly(true);

		}
		else
		{
			$personNameS = new MTextLabel('personNameS', $data->name, '', FIELD_DESCRIPTION_SIZE);
			$personId  = new MHiddenField('personId', $this->personId->value);
		}
		$hctPerson = new MHContainer('hctPerson', array($personLabelS, $personId, $personNameS));
		$hctPerson->setShowLabel(true);
		$fields[]  = $hctPerson;

		$password     = new  MPasswordField('password', $this->getFormValue('password'), _M('Password',$module), FIELD_DESCRIPTION_SIZE);
        $password->setJsHint(_M('Type your digital password','services'));
        $validators[] = new MRequiredValidator('password');
        $fields[]     = $password;

        $passwordResponsable  = new MPasswordField('passwordResponsable', $this->getFormValue('passwordResponsable'), _M('Responsable password','services'), FIELD_DESCRIPTION_SIZE);
        $passwordResponsable->setJsHint(_M('Type your responsable digital password', 'services'));
        $validators[] = new MRequiredValidator('passwordResponsable');
        $fields[]     = $passwordResponsable;

        if ( $function == 'update' )
        {
			$fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        $fields[]     = new Separator('');

		$this->setFields($fields);
		$this->setValidators($validators);

    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
		$data->personId = MIOLO::_request('personId','POST');
		$data->password = MIOLO::_request('password','POST');
		$data->passwordResponsable = MIOLO::_request('passwordResponsable','POST');
		$businessPasswordDigital = $MIOLO->getBusiness($module,'BusDigitalPassword');
		if ( $function == 'update' )
        {
			$msg = MSG_RECORD_UPDATED;
            $ok  = $businessPasswordDigital->updateDigitalPassword($data);
            if ( !$ok )
            {
				break;
            }
		}
		else if ( $function == 'insert' )
		{
       		$msg = MSG_RECORD_INSERTED;
			$ok  = $businessPasswordDigital->insertDigitalPassword($data);
            if ( !$ok )
            {
				break;
            }
		}
		$msg .= '<br>';
		$msg .= _M('Print','miolo').' '._M('Inscription voucher','selectiveProcess').' ?';
		$goto = $MIOLO->getActionURL( $module, $action, null, $opts);
        $opts = array('event'=>'btnPrintVoucher_click','personId'=>$data->personId,'function'=>'insert','printVoucher'=>'yes');
		$gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
		$caption = _M('Question',$module);
        $MIOLO->Question($msg, $gotoYes, $goto);
	}

	public function btnPrintVoucher_click($sender = null)
	{
	    $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
   		$data->personId = MIOLO::_request('personId','GET');
		$businessPasswordDigital = $MIOLO->getBusiness($module,'BusDigitalPassword');
		$personData = $businessPasswordDigital->getDigitalPassword($data);
		$MIOLO->getClass('basic', 'RptDigitalPasswordVoucher');
		
		$report = new RptDigitalPasswordVoucher($personData);
		$msg = _M('Does your voucher was correctly printed','basic') . ' ?';
		$caption = _M('Information', $module);
		$MIOLO->Question($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
	}

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'personId' => MIOLO::_request('personId', 'GET'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusDigitalPassword');
        $ok = $business->deleteDigitalPassword($this->personId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

}

?>
