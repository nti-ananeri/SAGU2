<?php

/**
 * Professional activity people form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a professionalActivityPeople
 **/
class FrmProfessionalActivityPeople extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $professionalActivityPeopleId = $_GET['professionalActivityPeopleId'] ? $_GET['professionalActivityPeopleId'] : $_POST['professionalActivityPeopleId'];
            $fields[]  = new MTextLabel('professionalActivityPeopleId', $professionalActivityPeopleId, _M('Professional activity people id',$module));
            $fields[]  = new MHiddenField('professionalActivityPeopleId', $professionalActivityPeopleId);
            
            $business = $MIOLO->getBusiness($module,'BusProfessionalActivityPeople');
            $data     = $business->getProfessionalActivityPeople($professionalActivityPeopleId);
        }

        //personId
        $personLabel = new MText('personLabel', _M('Person',$module).':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personLabel->setClass('m-caption m-caption-required');

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', $module, 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('personId', _M('Person',$module), 'required');

        $personName   = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Person name',$module));

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //professionalActivity
        $professionalActivityLabel = new MText('professionalActivityLabel', _M('Professional activity',$module).':');
        $professionalActivityLabel->setWidth(FIELD_CONTAINER_SIZE);
        $professionalActivityLabel->setClass('m-caption m-caption-required');

        $professionalActivityId = new MLookupTextField('professionalActivityId', $this->getFormValue('professionalActivityId',$data->professionalActivityId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'professionalActivityDescription', $module, 'ProfessionalActivity', null, null, true);
        $professionalActivityId->setJsHint(_M('Enter the professional activity code',$module));
        $validators[] = new MIntegerValidator('professionalActivityId', _M('Professional activity',$module), 'required');

        $professionalActivityDescription = new MTextField('professionalActivityDescription', $this->getFormValue('professionalActivityDescription',$data->professionalActivityDescription), '', FIELD_DESCRIPTION_SIZE);
        $professionalActivityDescription->setReadOnly(true);
        $professionalActivityDescription->setJsHint(_M('Professional activity description',$module));

        $hctProfessionalActivity = new MHContainer('hctProfessionalActivity', array($professionalActivityLabel, $professionalActivityId, $professionalActivityDescription));
        $hctProfessionalActivity->setShowLabel(true);
        $fields[]  = $hctProfessionalActivity;

        //legalPerson
        $legalPersonLabel = new MText('legalPersonLabel', _M('Company',$module).':');
        $legalPersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $legalPersonLabel->setClass('m-caption m-caption-required');

        $legalPersonId = new MLookupTextField('legalPersonId', $this->getFormValue('legalPersonId',$data->legalPersonId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'legalPersonName', $module, 'LegalPerson', null, null, true);
        $legalPersonId->setJsHint(_M('Enter the legal person code',$module));
        $validators[] = new MIntegerValidator('legalPersonId', _M('Legal person',$module), 'required');

        $legalPersonName = new MTextField('legalPersonName', $this->getFormValue('legalPersonName',$data->legalPersonName), '', FIELD_DESCRIPTION_SIZE);
        $legalPersonName->setReadOnly(true);
        $legalPersonName->setJsHint(_M('Legal person name',$module));

        $hctLegalPerson= new MHContainer('hctLegalPerson', array($legalPersonLabel, $legalPersonId, $legalPersonName));
        $hctLegalPerson->setShowLabel(true);
        $fields[]  = $hctLegalPerson;

        $business     = $MIOLO->getBusiness($module, 'BusProfessionalActivityLinkType');
        $professionalActivityLinkTypeId = new MComboBox('professionalActivityLinkTypeId', $this->getFormValue('professionalActivityLinkTypeId', $data->professionalActivityLinkTypeId), _M('Professional activity link type id',$module), $business->listProfessionalActivityLinkType());
        $validators[] = new MRequiredValidator('professionalActivityLinkTypeId');
        $fields[]     = $professionalActivityLinkTypeId;

        //professionalActivityAgentId
        $professionalActivityAgentLabel = new MText('professionalActivityAgentLabel', _M('Professional activity agent',$module).':');
        $professionalActivityAgentLabel->setWidth(FIELD_CONTAINER_SIZE);

        $professionalActivityAgentId = new MLookupTextField('professionalActivityAgentId', $this->getFormValue('professionalActivityAgentId', $data->professionalActivityAgentId), '', FIELD_LOOKUPFIELD_SIZE, null, null,
                'professionalActivityAgentName',
                'basic', 'ProfessionalActivityAgent', null, null, true);
        $professionalActivityAgentId->setJsHint(_M('Professional activity agent id',$module));

        $professionalActivityAgentName = new MTextField('professionalActivityAgentName', $professionalActivityAgentName, '', FIELD_DESCRIPTION_SIZE);
        $professionalActivityAgentName->setReadOnly(true);
        $professionalActivityAgentName->setJsHint(_M('Professional activity agent name',$module));

        $hctprofessionalActivityAgent = new MHContainer('hctprofessionalActivityAgent', array($professionalActivityAgentLabel, $professionalActivityAgentId, $professionalActivityAgentName));
        $hctprofessionalActivityAgent->setShowLabel(true);
        $fields[]  = $hctprofessionalActivityAgent;


        $beginDateLabel = new MText('beginDateLabel', _M('Begin date',$module).':');
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginDateLabel->setClass('m-caption m-caption-required');

        $beginDate    = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('beginDate', _M('Begin date',$module), 'required');

        $hctBeginDate = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $hctBeginDate->setShowLabel(true);
        $fields[]  = $hctBeginDate;


        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('endDate', _M('End date',$module),'optional');
        $fields[]     = $endDate;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personName.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }

        //$this->professionalActivityPeopleName->value = $this->getFormValue('professionalActivityPeopleNameS') ? $this->getFormValue('professionalActivityPeopleNameS') : '';

        $this->personName->value = $this->getFormValue('personNameS') ? $this->getFormValue('personNameS') : '';

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'professionalActivityPeopleId'=>MIOLO::_request('professionalActivityPeopleId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusProfessionalActivityPeople');
        $ok = $business->deleteProfessionalActivityPeople($this->professionalActivityPeopleId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusProfessionalActivityPeople');

        if ( $function == 'update' )
        {
            $ok  = $business->updateProfessionalActivityPeople($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertProfessionalActivityPeople($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('personIdS' => $data->personId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            } 
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasProfessionalActivityPeople();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        return $data;
    }

}

?>
