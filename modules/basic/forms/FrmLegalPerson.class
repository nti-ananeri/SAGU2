<?php

/**
 * Legal person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate tabbs
 **/
 
class FrmLegalPerson extends MForm
{

    private $data;

    /**
     * Class constructor
     **/
    function __construct($data=null)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $this->data = $data;

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module) . ' ' . _M('legal person', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module) . ' ' . _M('legal person', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->data;

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnBack');
        $toolBar->disableButton('tbBtnPrint');
        if ( $function == 'insert' || $function == 'update' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnSave');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        //define os valores para os dados da pessoa
        $person = new BasPerson();
        $vars   = get_object_vars($person);
        foreach ( $vars as $var => $value )
        {
            if ( $var != 'name' )
            {
                $fields[]  = new MHiddenField($var, $data->$var);
            }
        }
        $fields[]  = new MHiddenField('personName', $data->name);

        //BaseGroup 1
        $fakeName     = new MTextField('fakeName', $this->getFormValue('fakeName',$data->fakeName), _M('Fake name',$module), FIELD_DESCRIPTION_SIZE);
        $fakeName->setJsHint(_M('Enter the legal person fake name',$module));
        $validators[] = new MRequiredValidator('fakeName');
        $flds[]       = $fakeName;

        $currentName  = new MTextField('currentName', $this->getFormValue('currentName',$data->currentName), _M('Current name',$module), FIELD_DESCRIPTION_SIZE);
        $currentName->setJsHint(_M('Enter the legal person current name',$module));
        $flds[]       = $currentName;

        $phone        = new MTextField('phone', $this->getFormValue('phone',$data->phone), _M('Phone',$module), 20, _M('Use the two first ones to DDD code', $module));
        $phone->setJsHint(_M('Enter the phone number',$module));
        $flds1[]       = $phone;

        $fax          = new MTextField('fax', $this->getFormValue('fax',$data->fax), _M('Fax',$module), 20);
        $fax->setJsHint(_M('Enter the fax number',$module));
        $flds1[]       = $fax;

        $flds[] = new MHContainer('hctPhones', $flds1);

        $schoolStudentCardId = new MTextField('schoolStudentCardId', $this->getFormValue('schoolStudentCardId',$data->schoolStudentCardId), _M('School code for student card',$module), 20);
        $schoolStudentCardId->setJsHint(_M('Enter the code for student identity card',$module));
        $flds[]       = $schoolStudentCardId;

        $bsg1            = new BaseGroup('bsg1',_M('General data',$module),$flds,'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '45%';
        unset($flds1);
        unset($flds);

        //BaseGroup 2
        $cnpj         = new MTextField('cnpj', $this->getFormValue('cnpj',$data->cnpj), _M('Cnpj',$module), 20);
        $cnpj->setJsHint(_M('Enter the cnpj',$module));
        $validators[] = new MCnpjValidator('cnpj');
        $flds[]       = $cnpj;

        $stateRegistration = new MTextField('stateRegistration', $this->getFormValue('stateRegistration',$data->stateRegistration), _M('State registration',$module), 20);
        $stateRegistration->setJsHint(_M('Enter the state registration',$module));
        $flds[]       = $stateRegistration;

        $cityRegistration = new MTextField('cityRegistration', $this->getFormValue('cityRegistration',$data->cityRegistration), _M('City registration',$module), 20);
        $cityRegistration->setJsHint(_M('Enter the city registration',$module));
        $flds[]       = $cityRegistration;

        $business     = $MIOLO->GetBusiness($module, 'BusLegalPersonType');
        $flds[]       = new MComboBox('legalPersonTypeId', $this->getFormValue('legalPersonTypeId', $data->legalPersonTypeId), _M('Legal person type',$module), $business->listLegalPersonType());
        $validators[] = new MIntegerValidator('legalPersonTypeId','','required');


        $bsg2            = new BaseGroup('bsg2',_M('Registration',$module),$flds,'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '350px';
        unset($flds);

        //HorizontalContainer 1: BaseGroup 1 + BaseGroup 2
        $hct1 = new MHContainer('hct1',array($bsg1,$bsg2));
        $hct1->showLabel = true;
        $fields[] = $hct1;

        $fields[] = new MSeparator();
        $btn1[]   = new MButton('btnPrev',  '<< ' . _M('Previous', $module));
        $btn1[]   = new MButton('btnSave', _M('Save', $module));
        $div1     = new MDiv('div1', $btn1, null, 'align=center');
        $fields[] = $div1;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click next
     **/
    public function btnPrev_click($sender = null)
    {

        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');

        if ( $this->fieldsOk() )
        {
            $personData = serialize($this->getTypesData($action));

            $args = array(
                           'function'   => $function,
                           'page'       => 1,
                           'personData' => $personData
                         );

            $this->page->mGoto($MIOLO->getActionURL($module, $postAction, NULL, $args));
        }
    }

    /**
     * Event triggered when user click save
     **/
    public function btnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $this->fieldsOk() )
        {
            $data      = $this->getTypesData($action);
            $business2 = $MIOLO->getBusiness($module, 'BusLegalPerson');

            $business  = $MIOLO->getBusiness('basic', 'BusTransaction');
            $business->beginTransaction();

            //PERSON e LEGAL PERSON
            if ( $function == 'update' )
            {
                $ok2 = $business2->updateLegalPerson($data);
                $msg = MSG_RECORD_UPDATED;
            }
            elseif ( $function == 'insert' )
            {
                $ok2 = $business2->insertLegalPerson($data);
                $msg = MSG_RECORD_INSERTED;
                $data->personId = $ok2->personId;
            }
            //Grava a imagem da pessoa
            if ( strlen((string)$data->timeStamp) > 0 )
            {
                $this->btnSaveImage_click(NULL, $data);
            }

            if ( $ok2 )
            {
                $business->commit();
                $opts = array('personIdS' => $data->personId);

                if ( $function == 'update' )
                {
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    unset($opts);
                    $goto = $MIOLO->getActionURL( $module, $action, null, $opts);

                    $opts    = array('function'=>'insert');
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }

    public function fieldsOk()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData($action);

        if ( strlen((string)$data->legalPersonTypeId) > 0 )
        {
            $bus = $MIOLO->getBusiness($module, 'BusLegalPersonType');
            $legalPersonType = $bus->getLegalPersonType($data->legalPersonTypeId);
            if ( is_null($legalPersonType->legalPersonTypeId) )
            {
                $this->addError(_M('The @1 id entered does not exists.', $module, _M('legal person type', $module)));
            }
        }

        return ($this->hasErrors() == 0);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData($action = NULL)
    {

        if ( strlen((string)$action) == 0 )
        {
            $data = new BasPerson();
        }
        elseif ( strstr(strtolower($action), 'physical') )
        {
            $data = new BasPhysicalPerson();
        }
        elseif ( strstr(strtolower($action), 'legal') )
        {
            $data = new BasLegalPerson();
        }

        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->personName->value;

        return $data;
    }

    /**
     * Event triggered when user click save
     **/
    public function btnSaveImage_click($sender = null, $data)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $input  = $MIOLO->getModulePath('basic', PHOTO_PATH . '/' . $data->timeStamp . '.tmp.' . PHOTO_FORMAT);
        if (file_exists($input))
        {
            $output = $MIOLO->getModulePath('basic', PHOTO_PATH . '/' . $data->personId . '.' . PHOTO_FORMAT);
            if ( copy($input, $output) )
            {
                unlink($input);
            }
        }
    }

}

?>
