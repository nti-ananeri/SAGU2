<?php

/**
 * City form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
if ( count($constants)>0 )
{
    foreach ( $constants as $cnt )
    {
        define($cnt[0],$cnt[1]);
    }
}

/**
 * Form to manipulate a city lookup
 **/
class FrmCityLookup extends MForm
{

    function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = 'basic';

        parent::__construct( _M('Insert city', $module) );

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }


    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    function createFields()
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();
        $defaultCountryId = DEFAULT_COUNTRY_ID;

        $business  = $MIOLO->GetBusiness($module, 'BusCountry');
        $countryId = new MComboBox('countryId', $this->getFormValue('countryId', $defaultCountryId), _M('Country',$module), $business->listCountry());
        $countryId->setAutoSubmit(true);
        $fields[]  = $countryId;
        $validators[] = new MRequiredValidator('countryId');

        $actualCountryId = $this->getFormValue('countryId', $defaultCountryId);
        if ( isset($actualCountryId) )
        {
            $business = $MIOLO->GetBusiness($module, 'BusState');
            $options = $business->listState($actualCountryId);
            // este if deve permanecer ate que o problema de o $options nao poder ser
            // nulo ser resolivdo pelo MIOLO2.
            if ( count($options) == 0 )
            {
                $options = array();
            }
            $fields[] = new MComboBox('stateId', $this->getFormValue('stateId', $data->stateId) ? $this->getFormValue('stateId', $data->stateId) : DEFAULT_STATE_ID, _M('State id',$module), $options);
            $validators[] = new MRequiredValidator('stateId');
        }

        $data->cityName = $this->getFormValue('cityName', $data->name);
        $fields[]       = new MTextField('cityName', $data->cityName, _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $validators[]   = new MRequiredValidator('cityName');

        $fields[]     = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), _M('Zip code',$module), 10);
        $validators[] = new MRequiredValidator('zipCode');

        $this->setFields($fields);
        $this->setValidators( $validators );
        $this->setShowPostButton( false );

        $this->addButton( new formButton('tbBtnSave' , _M('Save', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Back', $module), 'history.go(-1)'));
    }

    function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = 'basic';
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCity');

        if ( $cityId = $business->insertCity($data) )
        {
            $data = $business->getCity($cityId);

            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$data->cityId}','{$data->name}','','{$data->stateName}','','{$data->countryName}','{$data->zipCode}')" );
        }
        else
        {
            $this->AddError(_M('Invalid parameters','basic'));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasCity();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->cityName->value;

        return $data;
    }

}
?>
