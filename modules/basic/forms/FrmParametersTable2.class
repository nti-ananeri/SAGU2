<?php

/**
 * Parameters table form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 27/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate parameters table
 **/
class FrmParametersTable2 extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Parameters table', 'basic'));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->hideButton('tbBtnPrint');
        $toolBar->hideButton('tbBtnDelete');
        $toolBar->hideButton('tbBtnNew');
        $toolBar->hideButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnBack');

        $fields[] = $toolBar;
        $fields[] = new MDiv('promptMsg', null);

        $filters->moduleConfig = $module;
        $business = $MIOLO->getBusiness('basic','BusConfig');
        $data     = $business->searchConfig($filters);

        if ( count($data)>0 )
        {
            $basConfig = new BasConfig();
            foreach ( $data as $row )
            {
                list ( $basConfig->moduleConfig,
                        $basConfig->parameter,
                        $basConfig->value,
                        $basConfig->description,
                        $basConfig->type ) = $row;

                $field         = new MTextField($basConfig->parameter, $this->getFormValue($basConfig->parameter, $basConfig->value), '', FIELD_DESCRIPTION_SIZE);
                $field->setJsHint($basConfig->description);
                //$validators[] = new MRequiredValidator($basConfig->parameter);

                $field2 = new MText('txt' . $basConfig->parameter, $basConfig->parameter, 'red');


                $field3 = new MText('txt', ' - ' . $basConfig->description);


                $hct1            = new MHContainer('hct1', array($field, $field2, $field3));
                $hct1->width     = '100%';
                $hct1->showLabel = false;

                $fields[] = $hct1;
            }
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness('basic', 'BusConfig');
        $data      = $this->getTypesData();

        try
        {
            if ( count($data)>0 )
            {
                $basConfig = new BasConfig();
                $business->beginTransaction();
                foreach ( $data as $parameter => $row )
                {
                    $basConfig->moduleConfig = $module;
                    $basConfig->parameter    = $parameter;
                    $basConfig->value        = $row;

                    $business->updateConfigValue($basConfig);
                }
                $business->commitTransaction();
            }
            $msg      = MSG_RECORD_UPDATED;
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        catch( Exception $e )
        {
            $msg  = _M('Error executing requested operation.',$module) . $e->getMessage();
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $this->addError($msg);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $filters->moduleConfig = $module;
        $business = $MIOLO->getBusiness('basic','BusConfig');
        $data      = $business->searchConfig($filters);

        if ( count($data)>0 )
        {
            $basConfig = new BasConfig();
            foreach ( $data as $row )
            {
                list ( $basConfig->moduleConfig,
                        $basConfig->parameter,
                        $basConfig->value,
                        $basConfig->description,
                        $basConfig->type ) = $row;

                eval('$data2[\'' . $basConfig->parameter . '\'] = $this->' . $basConfig->parameter . '->value;');
            }
        }

        return $data2;
    }
}

?>
