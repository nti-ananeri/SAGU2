<?php

/**
 *
 * This file handles the connection and actions for basCitySquare table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCitySquare table
 */
class FrmCitySquareSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('City square', $this->home, 'citySquare-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limboS   = new MHiddenField('limboS', '');
        $fields[] = $limboS;
        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $cityLabel = new MText('cityLabel', _M('City',$module) . ':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);

        $cityIdS = new MLookupTextField('cityIdS', $this->cityIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cityNameS,limboS,stateNameS,limboS,countryNameS', $module, 'City', null, null, true);
//        $fields[] = $cityIdS;
        $validators[] = new MIntegerValidator('cityIdS');

        $cityNameS = new MTextField('cityNameS', $this->cityNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $cityNameS->setJsHint(_M('Enter the city name',$module));
        //$cityNameS->setReadOnly(true);
//        $fields[] = $cityNameS;

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityIdS, $cityNameS));
        $fields[]  = $hctCity;


        $stateNameS = new MTextField('stateNameS', $this->stateNameS->value, _M('State',$module), FIELD_DESCRIPTION_SIZE);
        $stateNameS->setReadOnly(true);
        $stateNameS->setJsHint(_M('Enter the state name',$module));
        $fields[] = $stateNameS;

        $countryNameS = new MTextField('countryNameS', $this->countryNameS->value, _M('Country',$module), FIELD_DESCRIPTION_SIZE);
        $countryNameS->setJsHint(_M('Enter the country name',$module));
        $countryNameS->setReadOnly(true);
        $fields[] = $countryNameS;

        $squareS = new MTextField('squareS', $this->squareS->value, _M('Square',$module), 6);
        $squareS->setJsHint(_M('Enter the square',$module));
        $fields[] = $squareS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters->cityId   = $this->cityIdS->value;
        $filters->cityName = $this->cityNameS->value;
        $filters->square   = $this->squareS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCitySquareSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusCitySquare');
        $data       = $business->searchCitySquare($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setValidators($validators);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.cityIdS.focus();');
        }

    }

}

?>
