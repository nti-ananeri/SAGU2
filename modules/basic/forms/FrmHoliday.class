<?php
/**
 *
 * Holiday form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 31/03/2008
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to manipulate a holiday
 **/
class FrmHoliday extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $holidayDate   = $_GET['holidayDate'] ? $_GET['holidayDate'] : $_POST['holidayDate'];
            $business = $MIOLO->getBusiness($module,'BusHoliday');
            $data     = $business->getHoliday($holidayDate);

            $holidayDate    = new MHiddenField('holidayDate', $holidayDate);
            $fields[] = $holidayDate;
            $cityIdOld  =   MIOLO::_request('cityIdOld') ? MIOLO::_request('cityIdOld') : MIOLO::_request('cityId');
            $cityIdOld    = new MHiddenField('cityIdOld', $cityIdOld);
            $fields[] = $cityIdOld;
        }
        else
        {

            $holidayDateLabel = new MText('holidayDateLabel',_M('Holiday',$module));
            $holidayDateLabel->setWidth(FIELD_CONTAINER_SIZE);
            $holidayDateLabel->setClass('m-caption m-caption-required');

            $holidayDate    = new MCalendarField('holidayDate', $this->getFormValue('holidayDate',$data->holidayDate),'', FIELD_DATE_SIZE);
            $holidayDate->setJsHint(_M('Enter the holiday date',$module));
        
            $validators[] = new MDateDMYValidator('holidayDate','',false);
        
            $hctHolidayDate = new MHContainer('hctHolidayDate',array($holidayDateLabel,$holidayDate));
            $hctHolidayDate->setShowLabel(false);
            $fields[] = $hctHolidayDate;

        }
        $data->description = $this->getFormValue('description', $data->description);
        
        $descriptionLabel = new MText('holidayDateLabel',_M('Description',$module));
        $descriptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $descriptionLabel->setClass('m-caption m-caption-required');
        
        $description        = new MTextField('description', $data->description,'', FIELD_DESCRIPTION_SIZE);
        $hctDescription = new MHContainer('hctDescription',array($descriptionLabel, $description));
        $fields[] = $hctDescription;

        $cityLabel = new MText('cityLabel', _M('City',$module) . ':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$cityLabel->setClass('m-caption m-caption-required');

        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId',$data->cityId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cityName,limbo,stateName,limbo,countryName,limbo', $module, 'City', null, null, true);
        $cityId->setJsHint(_M('Enter the city code',$module));
        $validators[] = new MIntegerValidator('cityId', _M('City',$module), null);
 
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setJsHint(_M('City name',$module));
        $cityName->setReadOnly(true);

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;

        $validators[]    = new MRequiredValidator('description');

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( $function == 'insert' && !isset($_GET['event']) )
        {
            $this->page->onLoad('document.' . $this->name . '.holidayDate.focus();');
        }

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'holidayDate'=>MIOLO::_request('holidayDate'),
                        'cityIdOld'=>MIOLO::_request('cityIdOld'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusHoliday');
        $data = $this->getTypesData();
        $data->cityIdOld = MIOLO::_request('cityIdOld');
        $ok = $business->deleteHoliday($data);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $data->cityIdOld = MIOLO::_request('cityIdOld');
        $business = $MIOLO->getBusiness($module, 'BusHoliday');

        if ( $function == 'update' )
        {
            $ok  = $business->updateHoliday($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertHoliday($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('holidayDateS'=>$data->holydayDate);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasHoliday();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
