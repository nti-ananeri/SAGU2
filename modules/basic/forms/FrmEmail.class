<?php

/**
 * E-mail form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a curricular component 
 **/
class FrmEmail extends MForm
{
    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function, array('update', 'delete')) )
        {
            $emailId      = MIOLO::_request('emailId');

            $business = $MIOLO->getBusiness($module, 'BusEmail');
            $data     = $business->getEmail($emailId);

            $data1->emailId = $emailId;

            $fields[] = new MHiddenField('emailId', $emailId);
            $fields[] = new MTextLabel('emailId', $emailId, _M('E-mail id', $module));
        }

        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the description e-mail',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        $from = new MTextField('from', $this->getFormValue('from', $data->from), _M('From',$module), FIELD_DESCRIPTION_SIZE);
        $from->setJsHint(_M('Enter the from e-mail',$module));
        $fields[] = $from;
        $validators[] = new MRequiredValidator('from');

        $bcc = new MTextField('bcc', $this->getFormValue('bcc', $data->bcc), _M('Bcc',$module), FIELD_DESCRIPTION_SIZE);
        $bcc->setJsHint(_M('Enter the bcc e-mail',$module));
        $fields[] = $bcc;

        $subject = new MTextField('subject', $this->getFormValue('subject', $data->subject), _M('Subject',$module), FIELD_DESCRIPTION_SIZE);
        $subject->setJsHint(_M('Enter the subject',$module));
        $fields[] = $subject;
        $validators[] = new MRequiredValidator('subject');

        $body = new MMultiLineField('body', $this->getFormValue('body', $data->body), _M('Body',$module), 40, 5, 40);
        $fields[] = $body;
        $validators[] = new MRequiredValidator('body');

        $server = new MTextField('server', $this->getFormValue('server', $data->server), _M('Server',$module), FIELD_DESCRIPTION_SIZE);
        $server->setJsHint(_M('Enter the server',$module));
        $fields[] = $server;
        $validators[] = new MRequiredValidator('server');

        $port = new MTextField('port', $this->getFormValue('port', $data->port), _M('Port',$module), FIELD_DESCRIPTION_SIZE);
        $port->setJsHint(_M('Enter the port',$module));
        $fields[] = $port;
        $validators[] = new MRequiredValidator('port');

        $mimeVersion = new MTextField('mimeVersion', $this->getFormValue('mimeVersion', $data->mimeVersion), _M('Mime version',$module), FIELD_DESCRIPTION_SIZE);
        $mimeVersion->setJsHint(_M('Enter the mimeVersion',$module));
        $fields[] = $mimeVersion;
        $validators[] = new MRequiredValidator('mimeVersion');

        $contentType = new MTextField('contentType', $this->getFormValue('contentType', $data->contentType), _M('Content-type',$module), FIELD_DESCRIPTION_SIZE);
        $contentType->setJsHint(_M('Enter the contentType',$module));
        $fields[] = $contentType;
        $validators[] = new MRequiredValidator('contentType');

        $data1->description = $description->value;
        $data1->from        = $from->value;
        $data1->bcc         = $bcc->value;
        $data1->subject     = $subject->value;
        $data1->body        = $body->value;
        $data1->server      = $server->value;
        $data1->port        = $port->value;
        $data1->mimeVersion = $mimeVersion->value;
        $data1->contentType = $contentType->value;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Last modification', $module));
        }
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'emailId'=>MIOLO::_request('emailId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusEmail');

        $ok = $business->deleteEmail($this->emailId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusEmail');

        if ( $function == 'update' )
        {
            $ok  = $business->updateEmail($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertEmail($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {

            $opts = array('emailIdS' => $data->emailId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new basEmail();

        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = $this->$var->value;
            }
        }
        return $data;
    }

}

?>
