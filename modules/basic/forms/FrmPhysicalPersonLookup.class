<?php

/**
 * Physical person lookup form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/03/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
if ( count($constants)>0 )
{
    foreach ( $constants as $cnt )
    {
        define($cnt[0],$cnt[1]);
    }
}

/**
 * Form to manipulate a city lookup
 **/
class FrmPhysicalPersonLookup extends MForm
{

    function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = 'basic';

        parent::__construct( _M('Insert physical person', $module) );

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }


    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));
        $fields[]     = $personName; 
        $validators[] = new MRequiredValidator('personName');

        $fields[]     = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sex',$module), SAGU::listSex());
        $validators[] = new MRequiredValidator('sex');

        $dateBirth    = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), _M('Birth date',$module), FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('dateBirth','','optional');
        $dateBirth->setJsHint(_M('Enter the birth date',$module));
        $fields[]     = $dateBirth;
        
        if ( MIOLO::_request('source') == 'responsableLegal' )
        {
            $cpf          = new MTextField('cpf', $this->getFormValue('cpf',$data->cpf), _M('CPF',$module), 20);
            $validators[] = new MRequiredValidator('cpf');
            $cpf->setJsHint(_M('Enter the CPF',$module));
            $fields[]     = $cpf;
        }

        $rg           = new MTextField('rg', $this->getFormValue('rg',$data->rg), _M('RG',$module), 20);
        $rg->setJsHint(_M('Enter the RG',$module));
        $fields[]     = $rg;

        $this->setFields($fields);
        $this->setValidators( $validators );
        $this->setShowPostButton( false );
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->page->onLoad('document.'.$this->name.'.personName.focus();');

        $this->addButton( new formButton('tbBtnSave' , _M('Save', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Back', $module), 'history.go(-1)'));
    }

    function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = 'basic';
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();

        $filters->name = $this->getFormValue('personName', $data->personName);
        $filters->sex  = $this->getFormValue('sex', $data->sex);

        $business   = $this->manager->getBusiness($module,'BusPhysicalPerson');
        $data2      = $business->searchPhysicalPerson2($filters);

        //se nao existirem pessoas com esse nome, grava os dados
        if ( count($data2) == 0 )
        {
            if ( $data = $business->insertPhysicalPerson($data) )
            {

                //testa se eh para inserir o cpf
                if ( $this->getFormValue('cpf') )
                {
                    $data->content        = $this->getFormValue('cpf');
                    $data->documentTypeId = CPF_CODE;
                    $data->isDelivered    = DB_FALSE;

                    $business = $MIOLO->getBusiness($module, 'BusDocument');
                    $business->insertDocument($data);
                }

                if ( strlen((string)$this->getFormValue('rg'))>0 )
                {
                    $data->content        = $this->getFormValue('rg');
                    $data->documentTypeId = RG_CODE;
                    $data->isDelivered    = DB_FALSE;

                    $business = $MIOLO->getBusiness($module, 'BusDocument');
                    $business->insertDocument($data);
                }

                $this->page->addScript('m_lookup.js');
                $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$data->personId}','{$data->name}')" );
            }
            else
            {
                $this->AddError(_M('Invalid parameters','basic'));
            }
        }
        //senao exibe para ver se nao é umadessas pessoas
        else
        {
            unset($fields);
            unset($this->buttons[0], $this->buttons[1]);

            if ( count($data2)>0 )
            {
                $this->page->addScript('m_lookup.js');
                for ( $x=0; $x<count($data2); $x++)
                {
                    $data3[$x]    = $data2[$x];
                    $data3[$x][0] = "<a href=\"javascript:MIOLO_Deliver('$name', 0, '{$data2[$x][0]}','{$data2[$x][1]}')\">" . $data2[$x][0] . '</a>';
                }
                $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPhysicalPersonSearch2',$filters);
                $grdResults->setData($data3);

//                $fields[] = new MText('lbl', '<br>' . 'Are you sure that the person is not one of the persons below? Case is one of them, click on top of their code. Otherwise, click Save.' . '</b>');
                $fields[] = new MText('lbl', '<br>' . _M('Are you sure that the person is not one of the persons below? Case is one of them, click on top of their code. Otherwise, click Save.', 'basic') . '</b>');
                $fields[] = $grdResults;
                $fields[] = new Separator();
                $fields[] = new Separator();
            }

            $personName = new MText('personName_text', _M('Name',$module) . ': ' . $this->getFormValue('personName', $data->personName));
            $fields[]   = $personName; 

            $sex        = new MText('sex_text', _M('Sex',$module) . ': ' . $this->getFormValue('sex', $data->sex));
            $fields[]   = $sex; 

            $dateBirth  = new MText('dateBirth_text', _M('Birth date',$module) . ': ' . $this->getFormValue('dateBirth', $data->dateBirth));
            $fields[]   = $dateBirth; 

            $personName = new MHiddenField('personName', $this->getFormValue('personName', $data->personName));
            $fields[]   = $personName; 

            if ( MIOLO::_request('source') == 'responsableLegal' )
            {
                $cpf          = new MHiddenField('cpf', $this->getFormValue('cpf',$data->cpf));
                $fields[]     = $cpf;
            }

            $sex        = new MHiddenField('sex', $this->getFormValue('sex', $data->sex));
            $fields[]   = $sex; 

            $dateBirth  = new MHiddenField('dateBirth', $this->getFormValue('dateBirth', $data->dateBirth));
            $fields[]   = $dateBirth; 

            $this->setFields($fields);
            $this->setShowPostButton( false );
            $this->setLabelWidth(FIELD_LABEL_SIZE);

            $this->addButton( new formButton('tbBtnSave2' , _M('Save', $module)));
            $this->addButton( new formButton('tbBtnBack2' , _M('Back', $module), 'history.go(-1)'));
        }
    }

    function tbBtnSave2_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = 'basic';
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPhysicalPerson');

        if ( $data = $business->insertPhysicalPerson($data) )
        {
            //testa se eh para inserir o cpf
            if ( $this->getFormValue('cpf') )
            {
                $data->content        = $this->getFormValue('cpf');
                $data->documentTypeId = CPF_CODE;
                $data->isDelivered    = DB_FALSE;

                $business = $MIOLO->getBusiness($module, 'BusDocument');
                $business->insertDocument($data);
            }
            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$data->personId}','{$data->name}')" );
        }
        else
        {
            $this->AddError(_M('Invalid parameters','basic'));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasPhysicalPerson();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->personName->value;

        return $data;
    }

}
?>
