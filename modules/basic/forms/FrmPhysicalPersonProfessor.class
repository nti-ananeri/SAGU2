<?php

/**
 * Physical person professor form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a physical person professor
 **/
class FrmPhysicalPersonProfessor extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Insert', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( $function == 'delete' )
        {
            $personId = $_GET['personId'] ? $_GET['personId'] : $_POST['personId'];
            $fields[]  = new MTextLabel('personId', $personId, _M('Code',$module));
            $fields[]  = new MHiddenField('personId', $personId);
            
            $business = $MIOLO->getBusiness($module,'BusPhysicalPersonProfessor');
            $data     = $business->getPhysicalPersonProfessor($personId);
        }
        else
        {
            $personLabel = new MText('personLabel', _M('Person', $module).':');
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);
            $personLabel->setClass('m-caption m-caption-required');
            
            $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('Code',$module), FIELD_ID_SIZE, null, null, 'personName', $module, 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Enter the physical person id',$module));
            //$fields[] = $personId;
//             $validators[] = new MRequiredValidator('personId');
            $validators[] = new MIntegerValidator('personId', _M('Person', $module), 'required');

            $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
            $personName->setReadOnly(true);
            //$fields[] = $personName;
            
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(false);
            $fields[] = $hctPerson;
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'personId' => MIOLO::_request('personId'));
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        $opts   = array('personIdS' => MIOLO::_request('personId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPhysicalPersonProfessor');
        $ok = $business->deletePhysicalPersonProfessor($this->personId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPhysicalPersonProfessor');

        $ok  = $business->insertPhysicalPersonProfessor($data);
        $msg = MSG_RECORD_INSERTED;

        if ( $ok )
        {
            $opts = array('personIdS'=>$data->personId);
            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasPhysicalPersonProfessor();
        $data->personId   = $this->personId->value;
        $data->personName = $this->personName->value;

        return $data;
    }
}

?>
