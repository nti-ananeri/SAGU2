<?php

/**
 * Company form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a company
 **/
class FrmCompany extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $companyId = $_GET['companyId'] ? $_GET['companyId'] : $_POST['companyId'];
            $fields[]  = new MTextLabel('companyId', $companyId, _M('Code',$module));
            $fields[]  = new MHiddenField('companyId', $companyId);

            $business = $MIOLO->getBusiness($module,'BusCompany');
            $data     = $business->getCompany($companyId);
        }

        $data->companyName = $this->getFormValue('companyName', $data->name);
        $companyName       = new MTextField('companyName', $data->companyName, _M('Corporate name',$module), FIELD_DESCRIPTION_SIZE);
        $companyName->setJsHint(_M('Enter the company\'s name',$module));
        $fields[]          = $companyName;
        $validators[]      = new MRequiredValidator('companyName');

        $acronym  = new MTextField('acronym', $this->getFormValue('acronym', $data->acronym), _M('Acronym',$module), 10);
        $acronym->setJsHint(_M('Enter the company\'s acronym',$module));
        $fields[] = $acronym;
        $validators[]      = new MRequiredValidator('acronym');

        $personLabel = new MText('personLabel', _M('Legal person',$module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personLabel->setClass('m-caption m-caption-required');

        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'LegalPerson', null, null, true);
        $personId->setJsHint(_M('Enter the legal person code',$module));
        $validators[] = new MIntegerValidator('personId', _M('Legal person',$module), 'required');

        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        $noteOrConcept = new MSelection('noteOrConcept', $this->getFormValue('noteOrConcept', $data->noteOrConcept), _M('Note or concept',$module), array('N' => _M('Note',$module),'C' => _M('Concept',$module)));
        $noteOrConcept->setJsHint(_M('Enter if company uses note or concept',$module));
        $fields[]      = $noteOrConcept;
        $validators[] = new MRequiredValidator('noteOrConcept');

        $maskNumberSchoolRegistration = new MTextField('maskNumberSchoolRegistration', $this->getFormValue('maskNumberSchoolRegistration',$data->maskNumberSchoolRegistration), _M('Registry number mask',$module), FIELD_DESCRIPTION_SIZE);
        $maskNumberSchoolRegistration->setJsHint(_M('Enter the mask for the company\'s registry number. Eg.: 99.999.999/9999-99',$module));

        $fields[]     = $maskNumberSchoolRegistration;

        $companyTypeDescription = new MTextField('companyTypeDescription', $this->getFormValue('companyTypeDescription', $data->companyTypeDescription), _M('Company type',$module), FIELD_DESCRIPTION_SIZE);
        $companyTypeDescription->setJsHint(_M('Enter the company\'s type description',$module));
        $fields[]          = $companyTypeDescription;

        $responsablePersonLabel = new MText('legalPersonLabel', _M('Responsable person',$module) . ':');
        $responsablePersonLabel->setWidth(FIELD_CONTAINER_SIZE);
        $responsablePersonLabel->setClass('m-caption m-caption-required');

        $legalResponsableId = new MLookupTextField('legalResponsableId', $this->getFormValue('legalResponsableId', $data->legalResponsableId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'legalResponsableName', 'basic', 'PhysicalPerson', null, null, true);
        $legalResponsableId->setJsHint(_M('Enter the legal responsable person code',$module));
        $validators[] = new MIntegerValidator('legalResponsableId', _M('Responsable person',$module), 'required');

        $legalResponsableName = new MTextField('legalResponsableName', $this->getFormValue('legalResponsableName', $data->legalResponsableName), '', FIELD_DESCRIPTION_SIZE);
        $legalResponsableName->setReadOnly(true);

        $hctPerson2 = new MHContainer('hctPerson', array($responsablePersonLabel, $legalResponsableId, $legalResponsableName));
        $hctPerson2->setShowLabel(true);
        $fields[]  = $hctPerson2;

        $fields[] = new MTextField('inep', $this->getFormValue('inep', $data->inep), _M('Inep',$module), 5);
        $validators[] = new MMaskValidator('inep','','aaaa','required');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.companyName.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'companyId'=>MIOLO::_request('companyId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusCompany');
        $ok = $business->deleteCompany($this->companyId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusCompany');

        if ( $function == 'update' )
        {
            $ok  = $business->updateCompany($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertCompany($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('companyIdS'=>$data->companyId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $data  = new BasCompanyConf();
        $vars  = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name = $this->companyName->value;

        return $data;
    }
}

?>
