<?php

/**
 *
 * This file handles the connection and actions for basPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basPerson table
 */
class FrmPhysicalPersonSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Physical person', $this->home, 'physicalPerson-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $personLabelS = new MText('personLabelS', _M('Person',$module).':');
        $personLabelS->setWidth(FIELD_LABEL_SIZE);

        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS',$data->personIdS), '', FIELD_ID_SIZE, null, null, 'personNameS', $module, 'PhysicalPerson', null, null, true);
        $personIdS->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('personIdS', '', 'optional');

        $personNameS = new MTextField('personNameS', $this->personNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $personNameS->setJsHint(_M('Person name',$module));
//         $personNameS->setReadOnly(true);

        $hctPerson = new MHContainer('hctPerson', array($personLabelS, $personIdS, $personNameS));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        $checkAccess = $MIOLO->checkAccess($module, A_ACCESS, false, false);
        if ( $checkAccess )
        {
            $userLabel = new MText('userNameLabel',_M('Username', 'admin').':');
            $userLabel->setWidth(FIELD_LABEL_SIZE);
            $userName = new MTextField('userName', $this->getFormValue('userName',$data->userName), NULL, FIELD_ID_SIZE);
//        $userName->setReadOnly(true);
            $miololk     = new MLookupField('miololk', null, null, null, 'userName', 'admin', 'User', null, null, true);

            $hctMiolo    = new MHContainer('hctMiolo', array($userLabel, $userName, $miololk, $btnClean));
            $hctMiolo->setShowLabel(true);
            $fields[]      = $hctMiolo;
        }

        $responsableLabelS = new MText('responsableLabelS', _M('Responsable',$module).':');
        $responsableLabelS->setWidth(FIELD_LABEL_SIZE);

        $responsableLegalIdS = new MLookupTextField('responsableLegalIdS', $this->getFormValue('responsableLegalIdS',$data->responsableLegalIdS), '', FIELD_ID_SIZE, null, null, 'responsableNameS', $module, 'PhysicalPerson', null, null, true);
        $responsableLegalIdS->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('responsableLegalIdS', '', 'optional');

        $responsableNameS = new MTextField('responsableNameS', $this->responsableNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $responsableNameS->setJsHint(_M('Responsable legal name',$module));
//         $personNameS->setReadOnly(true);

        $hctResponsable = new MHContainer('hctResponsable', array($responsableLabelS, $responsableLegalIdS, $responsableNameS));
        $hctResponsable->setShowLabel(true);
        $fields[]  = $hctResponsable;

        $fatherLabelS = new MText('fatherLabelS', _M('Father id',$module).':');
        $fatherLabelS->setWidth(FIELD_LABEL_SIZE);

        $fatherLegalIdS = new MLookupTextField('fatherLegalIdS', $this->getFormValue('fatherLegalIdS',$data->fatherLegalIdS), '', FIELD_ID_SIZE, null, null, 'fatherNameS', $module, 'PhysicalPerson', null, null, true);
        $fatherLegalIdS->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('fatherLegalIdS', '', 'optional');

        $fatherNameS = new MTextField('fatherNameS', $this->fatherNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $fatherNameS->setJsHint(_M('Father name',$module));
//         $personNameS->setReadOnly(true);

        $hctFather = new MHContainer('hctFather', array($fatherLabelS, $fatherLegalIdS, $fatherNameS));
        $hctFather->setShowLabel(true);
        $fields[]  = $hctFather;

        $motherLabelS = new MText('motherLabelS', _M('Mother id',$module).':');
        $motherLabelS->setWidth(FIELD_LABEL_SIZE);

        $motherLegalIdS = new MLookupTextField('motherLegalIdS', $this->getFormValue('motherLegalIdS',$data->motherLegalIdS), '', FIELD_ID_SIZE, null, null, 'motherNameS', $module, 'PhysicalPerson', null, null, true);
        $motherLegalIdS->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('motherLegalIdS', '', 'optional');

        $motherNameS = new MTextField('motherNameS', $this->motherNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $motherNameS->setJsHint(_M('Mother name',$module));
//         $personNameS->setReadOnly(true);

        $hctMother = new MHContainer('hctMother', array($motherLabelS, $motherLegalIdS, $motherNameS));
        $hctMother->setShowLabel(true);
        $fields[]  = $hctMother;
        
        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->personId = $this->personIdS->value;
        $filters->name     = $this->personNameS->value;
        $filters->motherId = $this->motherIdS->value;
        $filters->fatherId = $this->fatherIdS->value;
        $filters->motherName = $this->motherNameS->value;
        $filters->responsableLegalId = $this->responsableLegalIdS->value;
        $filters->fatherName = $this->fatherNameS->value;
        $filters->responsableName = $this->responsableNameS->value;
        if ( $checkAccess )
        {
            $filters->userName = $this->userName->value;
        }

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPhysicalPersonSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusPhysicalPerson');
        $data       = $business->searchPhysicalPerson($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.personIdS.focus();');

    }

}

?>
