<?php

/**
 * Unit form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a unit
 **/
class FrmUnit extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $unitId = $_GET['unitId'] ? $_GET['unitId'] : $_POST['unitId'];
            $fields[]  = new MTextLabel('unitId', $unitId, _M('Code',$module));
            $fields[]  = new MHiddenField('unitId', $unitId);
            
            $business = $MIOLO->getBusiness($module,'BusUnit');
            $data     = $business->getUnit($unitId);
        }

        $data->description = $this->getFormValue('description', $data->description);
        $fields[]          = new MTextField('description', $data->description, _M('Description',$module), 40);
        $validators[]      = new MRequiredValidator('description');

        $business     = $MIOLO->GetBusiness($module, 'BusCompany');
        $companyId   = new MComboBox('companyId', $this->getFormValue('companyId',  $data->companyId), _M('Company id',$module), $business->listCompany());
        $companyId->setJsHint(_M('Enter the company code',$module));
        $fields[]     = $companyId;
        $validators[] = new MRequiredValidator('companyId');

        if ( MODULE_ACCOUNTANCY_INSTALLED == 'YES' )
        {
            $fields[]     = new MTextField('accountingCode', $this->getFormValue('accountingCode',  $data->accountingCode), _M('Accounting code',$module), 20, _M('@1 digits', $module, '2'));
            //$validators[] = new MRequiredValidator('accountingCode');
            $validators[] = new MRegExpValidator('accountingCode',_M('Accounting code',$module),'[0-9]+[0-9]+','required');
        }

/*
        $color = new MTextField('color', $this->getFormValue('color', $data->color), _M('Color',$module), 20);
        $fields[] = $color;
        $validators[]      = new MRequiredValidator('color');
*/

        $options = array (
                           '#000000' => _M('Black', $module),
                           '#008000' => _M('Green', $module),
                           '#C0C0C0' => _M('Silver', $module),
                           '#00FF00' => _M('Lime', $module),
                           '#808080' => _M('Gray', $module),
                           '#808000' => _M('Olive', $module),
                           '#FFFFFF' => _M('White', $module),
                           '#FFFF00' => _M('Yellow', $module),
                           '#800000' => _M('Maroon', $module),
                           '#000080' => _M('Navy', $module),
                           '#FF0000' => _M('Red', $module),
                           '#0000FF' => _M('Blue', $module),
                           '#800080' => _M('Purple', $module),
                           '#008080' => _M('Teal', $module),
                           '#FF00FF' => _M('Fuchsia', $module),
                           '#00FFFF' => _M('Aqua', $module)
                         );

        $fields[] = new MSelection('color', $this->getFormValue('color', $data->color), _M('Color', $module), $options);

        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[] = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), _M('Zip code',$module), FIELD_ID_SIZE);
        $validators[] = new MRangeValidator('zipCode', _M('Zip code',$module), '00000000', '99999999', 'i', 'optional');

        $cityLabel = new MText('cityLabel', _M('City',$module) . ':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityLabel->setClass('m-caption m-caption-required');

        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId',$data->cityId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'cityName,limbo,stateName,limbo,countryName,limbo', $module, 'City', null, null, true);
        $cityId->setJsHint(_M('Enter the city code',$module));
        $validators[] = new MIntegerValidator('cityId', _M('City',$module), 'required');
 
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setJsHint(_M('City name',$module));
        $cityName->setReadOnly(true);

        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;
 
        $stateName = new MTextField('stateName', $this->getFormValue('stateName',$data->stateName), _M('State',$module), 40);
        $stateName->setJsHint(_M('Enter the state name',$module));
        $stateName->setReadOnly(true);
        $fields[] = $stateName;
 
        $countryName = new MTextField('countryName', $this->getFormValue('countryName',$data->countryName), _M('Country',$module), 40);
        $countryName->setJsHint(_M('Enter the country name',$module));
        $countryName->setReadOnly(true);
        $fields[] = $countryName;

        $fields[] = new MTextField('location', $this->getFormValue('location', $data->location), _M('Location',$module), FIELD_DESCRIPTION_SIZE);

        $fields[] = new MTextField('number', $this->getFormValue('number', $data->number), _M('Number',$module), FIELD_ID_SIZE);

        $fields[] = new MTextField('complement', $this->getFormValue('complement', $data->complement), _M('Complement',$module), FIELD_DESCRIPTION_SIZE);

        $fields[] = new MTextField('neighborhood', $this->getFormValue('neighborhood', $data->neighborhood), _M('Neighborhood',$module), FIELD_DESCRIPTION_SIZE);

        $fields[] = new MTextField('inep', $this->getFormValue('inep', $data->inep), _M('Inep',$module), 6);
        $validators[] = new MMaskValidator('inep','','aaaaa','required');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'unitId'=>MIOLO::_request('unitId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusUnit');
        $ok = $business->deleteUnit($this->unitId->value);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusUnit');

        if ( $function == 'update' )
        {
            $ok  = $business->updateUnit($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertUnit($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('unitIdS'=>$data->unitId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasUnit();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
