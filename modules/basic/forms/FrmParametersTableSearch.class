<?php

/**
 *
 * This file handles the connection and actions for basConfig table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Mauricio de Castro [mcastro@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solucoes Livres \n
 * The SAGU2 Development Team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basConfig table
 */
class FrmParametersTableSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Parameters table', $this->home, 'parameters-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $business = $MIOLO->getBusiness($module,'BusConfig');
        $moduleConfigS = new MComboBox('moduleConfigS', $this->moduleConfigS->value, _M('Module',$module), $business->listModules());
        $moduleConfigS->setJsHint(_M('Choose the module',$module));
        $fields[] = $moduleConfigS;

        $parameterS = new MTextField('parameterS', $this->parameterS->value, _M('Parameter',$module), 20);
        $parameterS->setJsHint(_M('Enter the module parameter',$module));
        $fields[] = $parameterS;

        $configValueS = new MTextField('configValueS', $this->configValueS->value, _M('Value',$module), 20);
        $configValueS->setJsHint(_M('Enter the parameter value',$module));
        $fields[] = $configValueS;
        
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the parameter description',$module));
        $fields[] = $descriptionS;

        $typeS = new MComboBox('typeS', $this->typeS->value, _M('Field type',$module), $business->listTypes());
        $typeS->setJsHint(_M('Enter the field type',$module));
        $fields[] = $typeS;
        
        $isValueChangeableLabelS = new MText('isValueChangeableLabelS', _M('Is value changeable',$module) . '?');
        $isValueChangeableLabelS->setWidth(FIELD_LABEL_SIZE);

        $isValueChangeableS = new MRadioButtonGroup('isValueChangeableS', '', SAGU::listYesNo(1), $this->isValueChangeableS->value, null, 'horizontal');
        $isValueChangeableS->SetShowLabel(false);

        $hctIsChangeableS = new MHContainer('hctIsChangeableS', array($isValueChangeableLabelS, $isValueChangeableS));
        $fields[]  = $hctIsChangeableS;


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        $filters = new BasConfig;
        $filters->moduleConfig = $this->moduleConfigS->value;
        $filters->parameter    = $this->parameterS->value;
        $filters->value        = $this->configValueS->value;
        $filters->description  = $this->descriptionS->value;
        $filters->type         = $this->typeS->value;
        $filters->isValueChangeable   = $this->isValueChangeableS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdParametersTableSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusConfig');
        $data = $business->searchConfig($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        if ( $this->isSubmitted() )
        {
                $this->page->onLoad('document.' . $this->name . '.moduleConfigS.focus();');
        }

    }

}

?>
