<?php
/**
 *
 * This file handles the connection and actions for basPhysicalPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPerson extends BusinessBasicBusPerson
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPhysicalPerson()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPerson 
              ORDER BY name';

        $ret = $this->db->query(SAGU::prepare($sql, $args));
        //$this->db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPerson($personId)
    {
        //get the basPerson data
        $person = $this->getPerson($personId);

        //get the basPhysicalPerson data
        $sql = 'SELECT A.sex,
                       A.maritalStatusId,
                       A.residentialPhone,
                       A.workPhone,
                       A.cellPhone,
                       A.messagePhone,
                       A.messageContact,
                       TO_CHAR(A.dateBirth,\'' . MASK_DATE . '\'),
                       A.cityIdBirth,
                       A.countryIdBirth,
                       A.fatherId,
                       A.motherId,
                       A.responsableLegalId,
                       A.carPlate,
                       A.specialNecessityId,
                       A.specialNecessityDescription,
                       A.cityIdWork,
                       A.zipCodeWork,
                       A.locationWork,
                       A.complementWork,
                       A.neighborhoodWork,
                       A.ethnicOriginId,
                       TO_CHAR(A.dateDeath,\'' . MASK_DATE . '\'),
                       A.number,
                       C.name as stateName,
                       D.name as countryName,
                       A.personTitleId,
                       E.description AS personTitleDescription,
                       A.religionId,
                       A.workId,
                       A.workName,
                       F.content,
                       F.organ,
                       G.content,
                       A.healthCareId
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
             LEFT JOIN basState C
                    ON (     B.stateId   = C.stateId 
                         AND B.countryId = C.countryId )
             LEFT JOIN basCountry D
                    ON ( C.countryId = D.countryId )
             LEFT JOIN basPersonTitle E
                    ON ( E.personTitleId = A.personTitleId )
             LEFT JOIN basDocument F 
                    ON ( F.personId = A.personId AND F.documentTypeId = ' . RG_CODE . ' )
             LEFT JOIN basDocument G 
                    ON ( G.personId = A.personId AND G.documentTypeId = ' . CPF_CODE . ' )
                 WHERE A.personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));
        //$db->close();

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPerson = new basPhysicalPerson();
        list ( $physicalPerson->sex,
               $physicalPerson->maritalStatusId,
               $physicalPerson->residentialPhone,
               $physicalPerson->workPhone,
               $physicalPerson->cellPhone,
               $physicalPerson->messagePhone,
               $physicalPerson->messageContact,
               $physicalPerson->dateBirth,
               $physicalPerson->cityIdBirth,
               $physicalPerson->countryIdBirth,
               $physicalPerson->fatherId,
               $physicalPerson->motherId,
               $physicalPerson->responsableLegalId,
               $physicalPerson->carPlate,
               $physicalPerson->specialNecessityId,
               $physicalPerson->specialNecessityDescription,
               $physicalPerson->cityIdWork,
               $physicalPerson->zipCodeWork,
               $physicalPerson->locationWork,
               $physicalPerson->complementWork,
               $physicalPerson->neighborhoodWork,
               $physicalPerson->ethnicOriginId,
               $physicalPerson->dateDeath,
               $physicalPerson->number,
               $physicalPerson->stateName,
               $physicalPerson->countryName,
               $physicalPerson->personTitleId,
               $physicalPerson->personTitleDescription,
               $physicalPerson->religionId,
               $physicalPerson->workId,
               $physicalPerson->workName,
               $physicalPerson->rg,
               $physicalPerson->rgSSP,
               $physicalPerson->cpf,
               $physicalPerson->healthCareId ) = $result[0];

        //put into physicalPerson attributes all person attributes
        $array = get_object_vars($person);
        foreach ( $array as $key => $row )
        {
            $physicalPerson->$key = $person->$key;
        }

        return $physicalPerson; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPerson($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.mioloUserName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }

        if ( strlen((string)$filters->userName) > 0 )
        {
            $where .= ' AND TO_ASCII(TRIM(A.mioloUserName)) ILIKE TO_ASCII(?) ';
            $where .= ' AND LENGTH(TRIM(A.mioloUserName)) > 0 ';
            $args[] = $filters->userName . '%';
        }
        if ( strlen((string)$filters->responsableLegalId) > 0 )
        {
            $where .= ' AND A.responsableLegalId = ?';
            $args[] = $filters->responsableLegalId;
        }

        if ( strlen((string)$filters->motherId) > 0 )
        {
            $where .= ' AND A.motherId = ?';
            $args[] = $filters->motherId;
        }

        if ( strlen((string)$filters->fatherId) > 0 )
        {
            $where .= ' AND A.fatherId = ?';
            $args[] = $filters->fatherId;
        }

        if ( strlen((string)$filters->resaponsableName) > 0 )
        {
            $where .= ' AND TO_ASCII(getPersonName(A.responsableLegalId)) ILIKE TO_ASCII(?)';
            $args[] = $filters->responsableName.'%';
        }

        if ( strlen((string)$filters->motherName) > 0 )
        {
            $where .= ' AND TO_ASCII(getPersonName(A.motherId)) ILIKE TO_ASCII(?)';
            $args[] = $filters->motherName.'%';
        }

        if ( strlen((string)$filters->fatherName) > 0 )
        {
            $where .= ' AND TO_ASCII(getPersonName(A.fatherId)) ILIKE TO_ASCII(?)';
            $args[] = $filters->fatherName.'%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPerson($data)
    {
        $MIOLO  = MIOLO::getInstance();

        //$this->db->begin();

        $data = $this->insertPerson($data);

        $physicalPerson = new basPhysicalPerson();
        $vars           = get_object_vars($physicalPerson);

        foreach ( $vars as $var => $value )
        {
            if ( $var == 'password' )
            {
                $string1 .= $var . ',';
                $string2 .= 'upper(md5(upper(?))),';
                $args[]   = $data->$var;
            }
            elseif ( strlen((string)$data->$var)>0 && strtolower($data->$var) != 'null' && $var != 'dateBirth' && $var != 'dateDeath' && $var != 'timeStamp' && $var != 'uploadFile' && $var != 'stateId')
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
            elseif ( $var == 'dateBirth' || $var == 'dateDeath')
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?,\'' . MASK_DATE . '\'),';
                $args[]   = $data->$var;
            }
        }

        if ( strlen((string)$string1)>0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);
            $sql     = 'INSERT INTO basPhysicalPerson 
                                    ( ' . $string1 . ')
                             VALUES ( ' . $string2 . ')';

            $result = $this->db->execute(SAGU::prepare($sql, $args));
            //$this->db->finish();

            //return $data;
            if ( is_array($data->document) )
            {
                $businessDocument = $MIOLO->GetBusiness('basic', 'BusDocument');
                foreach ( $data->document as $doc )
                {
                    $document = new basDocument();
                    $vars     = get_object_vars($document);
                    foreach ( $vars as $var => $value )
                    {
                        eval('$dataDocument->' . $var . ' = $doc->' . $var . ';');
                    }

                    $dataDocument->isDelivered = DB_FALSE;

                    $dataDocument->personId = $data->personId;
                    $result = $businessDocument->insertDocument($dataDocument);
                }
            }

            return $data;
        }

        //$this->db->finish();
        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPerson($data)
    {

        //$this->db->begin();
        $sql = 'UPDATE basPhysicalPerson SET
                       sex                         = ?,
                       maritalStatusId             = ?,
                       residentialPhone            = ?,
                       workPhone                   = ?,
                       cellPhone                   = ?,
                       messagePhone                = ?,
                       messageContact              = ?,
                       dateBirth                   = to_date(?, \''.MASK_DATE.'\'),
                       cityIdBirth                 = ?,
                       countryIdBirth              = ?,
                       fatherId                    = ?,
                       motherId                    = ?,
                       responsableLegalId          = ?,
                       carPlate                    = ?,
                       specialNecessityId          = ?,
                       specialNecessityDescription = ?,
                       cityIdWork                  = ?,
                       zipCodeWork                 = ?,
                       locationWork                = ?,
                       complementWork              = ?,
                       neighborhoodWork            = ?,
                       ethnicOriginId              = ?,
                       dateDeath                   = to_date(?, \''.MASK_DATE.'\'),
                       personTitleId               = ?,
                       religionId                  = ?,
        		       workName			   = ?,
		               workId			   = ?,
                       healthCareId        = ?
                 WHERE personId                    = ?';

        $args[] = $data->sex;
        $args[] = $data->maritalStatusId;
        $args[] = $data->residentialPhone;
        $args[] = $data->workPhone;
        $args[] = $data->cellPhone;
        $args[] = $data->messagePhone;
        $args[] = $data->messageContact;
        $args[] = $data->dateBirth;
        $args[] = $data->cityIdBirth;
        $args[] = $data->countryIdBirth;
        $args[] = $data->fatherId;
        $args[] = $data->motherId;
        $args[] = $data->responsableLegalId;
        $args[] = $data->carPlate;
        $args[] = $data->specialNecessityId;
        $args[] = $data->specialNecessityDescription;
        $args[] = $data->cityIdWork;
        $args[] = $data->zipCodeWork;
        $args[] = $data->locationWork;
        $args[] = $data->complementWork;
        $args[] = $data->neighborhoodWork;
        $args[] = $data->ethnicOriginId;
        $args[] = $data->dateDeath;
        $args[] = $data->personTitleId;
        $args[] = $data->religionId;
    	$args[] = $data->workName;
	    $args[] = $data->workId;
        $args[] = $data->healthCareId;
        $args[] = $data->personId;

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        $this->updatePerson($data);
        //$db->close();
        return $result;

    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonToInscriptions($data)
    {
        //$this->db->begin();
        $sql = 'UPDATE basPhysicalPerson SET ';

        if ( strlen((string)$data->sex)>0 )
        {
            $sql   .= ' sex = ?, ';
            $args[] = $data->sex;
        }

        if ( strlen((string)$data->maritalStatusId)>0 )
        {
            $sql   .= ' maritalStatusId = ?, ';
            $args[] = $data->maritalStatusId;
        }

        if ( strlen((string)$data->residentialPhone)>0 )
        {
            $sql   .= ' residentialPhone = ?, ';
            $args[] = $data->residentialPhone;
        }

        if ( strlen((string)$data->workPhone)>0 )
        {
            $sql   .= ' workPhone = ?, ';
            $args[] = $data->workPhone;
        }

        if ( strlen((string)$data->cellPhone)>0 )
        {
            $sql   .= ' cellPhone = ?, ';
            $args[] = $data->cellPhone;
        }

        if ( strlen((string)$data->messagePhone)>0 )
        {
            $sql   .= ' messagePhone = ?, ';
            $args[] = $data->messagePhone;
        }

        if ( strlen((string)$data->messageContact)>0 )
        {
            $sql   .= ' messageContact = ?, ';
            $args[] = $data->messageContact;
        }

        if ( strlen((string)$data->dateBirth)>0 )
        {
            $sql   .= ' dateBirth = to_date(?, \''.MASK_DATE.'\'), ';
            $args[] = $data->dateBirth;
        }

        if ( strlen((string)$data->cityIdBirth)>0 )
        {
            $sql   .= ' cityIdBirth = ?, ';
            $args[] = $data->cityIdBirth;
        }

        if ( strlen((string)$data->countryIdBirth) > 0 )
        {
            $sql   .= ' countryIdBirth = ?, ';
            $args[] = $data->countryIdBirth;
        }

        if ( strlen((string)$data->fatherId)>0 )
        {
            $sql   .= ' fatherId = ?, ';
            $args[] = $data->fatherId;
        }

        if ( strlen((string)$data->motherId)>0 )
        {
            $sql   .= ' motherId = ?, ';
            $args[] = $data->motherId;
        }

        if ( strlen((string)$data->responsableLegalId)>0 )
        {
            $sql   .= ' responsableLegalId = ?, ';
            $args[] = $data->responsableLegalId;
        }

        if ( strlen((string)$data->carPlate)>0 )
        {
            $sql   .= ' carPlate = ?, ';
            $args[] = $data->carPlate;
        }

        if ( strlen((string)$data->specialNecessityId)>0 )
        {
            $sql   .= ' specialNecessityId = ?, ';
            $args[] = $data->specialNecessityId;
        }

        if ( strlen((string)$data->specialNecessityDescription)>0 )
        {
            $sql   .= ' specialNecessityDescription = ?, ';
            $args[] = $data->specialNecessityDescription;
        }

        if ( strlen((string)$data->cityIdWork)>0 )
        {
            $sql   .= ' cityIdWork = ?, ';
            $args[] = $data->cityIdWork;
        }

        if ( strlen((string)$data->zipCodeWork)>0 )
        {
            $sql   .= ' zipCodeWork = ?, ';
            $args[] = $data->zipCodeWork;
        }

        if ( strlen((string)$data->locationWork)>0 )
        {
            $sql   .= ' locationWork = ?, ';
            $args[] = $data->locationWork;
        }

        if ( strlen((string)$data->complementWork)>0 )
        {
            $sql   .= ' complementWork = ?, ';
            $args[] = $data->complementWork;
        }

        if ( strlen((string)$data->neighborhoodWork)>0 )
        {
            $sql   .= ' neighborhoodWork = ?, ';
            $args[] = $data->neighborhoodWork;
        }

        if ( strlen((string)$data->ethnicOriginId)>0 )
        {
            $sql   .= ' ethnicOriginId = ?, ';
            $args[] = $data->ethnicOriginId;
        }

        if ( strlen((string)$data->dateDeath)>0 )
        {
            $sql   .= ' dateDeath = to_date(?, \''.MASK_DATE.'\'), ';
            $args[] = $data->dateDeath;
        }

        if ( strlen((string)$data->name)>0 )
        {
            $sql   .= ' name = ?, ';
            $args[] = $data->name;
        }

        if ( strlen((string)$data->religionId)>0 )
        {
            $sql   .= ' religionId = ?, ';
            $args[] = $data->religionId;
        }

        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);
            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->db->execute($sqls[$i]);
            }

            $this->updatePersonToInscriptions($data);
            //$db->close();
            return $result;
        }


        //$this->db->finish();

    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPerson($personId)
    {
        /*$sql = 'DELETE FROM basPhysicalPerson 
                      WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));*/

        //$this->db->close();

        $result = $this->deletePerson($personId);
        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPerson2($filters)
    {
        $sql = 'SELECT A.personId,
                       A.name,
                       A.location,
                       B.name,
                       (SELECT content FROM basDocument WHERE personId = A.personId AND documentTypeId = \'' . DEFAULT_DOCUMENT_TYPE_ID_CPF . '\') as CPF,
                       (SELECT content FROM basDocument WHERE personId = A.personId AND documentTypeId = \'' . DEFAULT_DOCUMENT_TYPE_ID_RG . '\') as RG
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }

        if ( strlen((string)$filters->sex) > 0 )
        {
            $where .= ' AND UPPER(A.sex) = UPPER(?) ';
            $args[] = $filters->sex;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


}

?>
