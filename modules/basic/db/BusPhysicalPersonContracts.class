<?php
/**
 *
 * This file handles the connection and actions for basPhysicalPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonContracts extends Business
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPhysicalPersonContracts()
    {
        $this->db = $this->getDatabase();
    }

	public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

 
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getGizContract($filters)
    {
        $sql = 'SELECT 
				P.personId,
				COALESCE(C.personMask, P.personId::varchar),
				P.name FROM 
				gizPersonMask C RIGHT JOIN only basPerson P using(personId)';
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND P.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->matricula) > 0 )
        {
            $where .= ' AND C.personMask = ? ';
            $args[] = $filters->matricula;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4);
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
		$Amigo->personId = $result[0][0];
		$Amigo->matricula = $result[0][1];
		$Amigo->name = $result[0][2];
		return $Amigo;
    }
}

?>
