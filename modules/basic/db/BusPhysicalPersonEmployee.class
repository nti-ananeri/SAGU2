<?php
/**
 *
 * This file handles the connection and actions for basPhysicalPersonEmployee table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonEmployee extends BusinessBasicBusPhysicalPerson
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPhysicalPersonEmployee()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonEmployee()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPersonEmployee 
              ORDER BY name';

        $result = $this->db->query(SAGU::prepare($sql, $args));
        //$this->db->close();
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonEmployee($personId)
    {

        //get the basPersonPhysical data
        $physicalPerson = $this->getPhysicalPerson($personId);

        //get the basPhysicalPersonEmployee data
        $sql = 'SELECT 1
             FROM ONLY basPhysicalPersonEmployee
                 WHERE personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));
        //$db->close();

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPersonEmployee = new basPhysicalPersonEmployee();

        //put into physicalPersonEmployee attributes all person attributes
        $array = get_object_vars($physicalPerson);
        foreach ( $array as $key => $row )
        {
            $physicalPersonEmployee->$key = $physicalPerson->$key;
        }

        return $physicalPersonEmployee;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonEmployee($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonEmployee($data)
    {
        //vd($data);

        $sql = 'INSERT INTO basPhysicalPersonEmployee 
                            ( personId, name, sex)
                     VALUES ( ?, ?, ? )';

        $result = $this->db->execute(SAGU::prepare($sql, array($data->personId, $data->name, $data->sex)));

        if ( count($result) == 0 )
        {
            return null;
        }

        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);
        return $data2;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonEmployee($data)
    {
        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);
        return $data2;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonEmployee($personId)
    {
        $sql = 'DELETE FROM ONLY basPhysicalPersonEmployee 
                           WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));

        return $result;
    }

}

?>
