<?php
/**
 *
 * This file handles the connection and actions for basPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPerson extends Business
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPerson()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPerson 
              ORDER BY name';

        $ret = $this->db->query(SAGU::prepare($sql, $args));
        //$this->db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPerson($personId)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.number,
                       B.stateId,
                       A.mioloUserName,
                       A.neighborhoodId
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
                 WHERE A.personId = ?';
        $result = $this->db->query(SAGU::prepare($sql, $personId));
        //$db->close();

        $person = new basPerson();
        list ( $person->personId,
               $person->personDv,
               $person->personMask,
               $person->name,
               $person->shortName,
               $person->cityId,
               $person->cityName,
               $person->zipCode,
               $person->location,
               $person->complement,
               $person->neighborhood,
               $person->email,
               $person->emailAlternative,
               $person->url,
               $person->dateIn,
               $person->password,
               $person->isAllowPersonalData,
               $person->userName,
               $person->dateTime,
               $person->ipAddress,
               $person->number,
               $person->stateId,
               $person->mioloUserName,
               $person->neighborhoodId ) = $result[0];

        return $person; 
    }

     /**
     * Get the person name if that exists
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): The person name
     **/
    public function getPersonName($personId)
    {
        $sql = ' SELECT A.name
              FROM ONLY basPerson A
                  WHERE A.personId = ? ';

        $args = array($personId);

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $args));

        return $return[0][0];
    }
   
     /**
     * Get the person age if that exists
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (int): The person age in years
     **/
    public function getPersonAge($personId)
    {
        $sql = 'SELECT getPhysicalPersonAge(?)';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return $return[0][0];
    }
  

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPerson($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.number,
                       A.neighborhoodid
             FROM ONLY basPerson A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen((string)$filters->email) > 0 )
        {
            $where .= ' AND A.email ILIKE ? ';
            $args[] = $filters->email . '%';
        }
        if ( strlen((string)$filters->emailAlternative) > 0 )
        {
            $where .= ' AND A.emailAlternative ILIKE ? ';
            $args[] = $filters->emailAlternative . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }

    /**
     * Generate a person DV
     *
     * @param $data (personId): basPerson primary key
     *
     * @return the respective code
     *
     **/
    function getDv($personId)
    {

        $max  = 9;                      //max number of chars
        $len  = strlen((string)(int)$personId); //chars number of person_id
        $acum = 0;

        if ( $len <= $max && is_numeric($personId) )
        {
            for ( $x=$len; $x<$max; $x++ )
            {
                $personId = '0' . $personId;
            }

            for ( $x=0; $x<$max; $x++ )
            {
                $acum += $personId[$x] * ($x+1);
            }

            $acum *= 10;
            $res   = $acum % 11;
            if ( $res >= 10 )
                $res = 0;
            return $res;
        }
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPerson($data)
    {

        $sql = 'SELECT NEXTVAL(\'seq_personid\')';
        $ret = $this->db->query(SAGU::prepare($sql,null));
        $data->personId = $ret[0][0];
        $data->personDv = $this->getDv($data->personId);

        $sql = 'INSERT INTO basPerson
                            (personId,
                             personDv,
                             personMask,
                             name,
                             shortName,
                             cityId,
                             zipCode,
                             location,
                             complement,
                             neighborhood,
                             email,
                             emailAlternative,
                             url,
                             password,
                             isAllowPersonalData,
                             number,
                             mioloUserName,
                             neighborhoodid )
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,upper(md5(upper(?))),?,?,?,?)';

        $args = array( $data->personId,
                       $data->personDv,
                       $data->personMask,
                       $data->name,
                       $data->shortName,
                       $data->cityId,
                       $data->zipCode,
                       $data->location,
                       $data->complement,
                       $data->neighborhood,
                       $data->email,
                       $data->emailAlternative,
                       $data->url,
                       $data->password,
                       $data->isAllowPersonalData,
                       $data->number,
                       $data->mioloUserName,
                       $data->neighborhoodId );

        $result = $this->db->execute(SAGU::prepare($sql, $args));

        if ( $result && strlen((string)$data->personId)>0 )
        {
            return $data;
        }
        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePerson($data)
    {

        $sql = 'UPDATE basPerson SET 
                       personDv            = ?, 
                       personMask          = ?, 
                       name                = ?, 
                       shortName           = ?, 
                       cityId              = ?, 
                       zipCode             = ?, 
                       location            = ?, 
                       complement          = ?, 
                       neighborhood        = ?, 
                       email               = ?, 
                       emailAlternative    = ?, 
                       url                 = ?, 
                       mioloUserName       = ?, 
                       password            = CASE WHEN ( (SELECT upper(password) FROM ONLY basPerson WHERE personId = ?) = upper(?) OR ? IS NULL OR length(?) = 0) THEN upper(?) ELSE upper(md5(upper(?))) END, 
                       neighborhoodId      = ?::integer,';

        $args[] = $data->personDv;
        $args[] = $data->personMask;
        $args[] = $data->name;
        $args[] = $data->shortName;
        $args[] = $data->cityId;
        $args[] = $data->zipCode;
        $args[] = $data->location;
        $args[] = $data->complement;
        $args[] = $data->neighborhood;
        $args[] = $data->email;
        $args[] = $data->emailAlternative;
        $args[] = $data->url;
        $args[] = $data->mioloUserName;
        $args[] = $data->personId;
        $args[] = $data->password;
        $args[] = $data->password;
        $args[] = $data->password;
        $args[] = $data->password;
        $args[] = $data->password;
        $args[] = $data->neighborhoodId;

        if(strlen((string)$data->isAllowPersonalData) > 0)
        {
              $sql .= 'isAllowPersonalData = ?, ';
              $args[] = $data->isAllowPersonalData;
        }

        $sql .= 'number              = ? 
           WHERE personId            = ?';

        $args[] = $data->number;
        $args[] = $data->personId;

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }
        return $result;
    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePersonToInscriptions($data)
    {

        $sql = 'UPDATE basPerson SET ';

        if ( strlen((string)$data->personDv)>0 )
        {
            $sql   .= ' personDv = ?, ';
            $args[] = $data->personDv;
        }

        if ( strlen((string)$data->personMask)>0 )
        {
            $sql   .= 'personMask  = ?, ';
            $args[] = $data->personMask;
        }

        if ( strlen((string)$data->name)>0 )
        {
            $sql   .= ' name = ?, ';
            $args[] = $data->name;
        }

        if ( strlen((string)$data->shortName)>0 )
        {
            $sql   .= ' shortName = ?, ';
            $args[] = $data->shortName;
        }

        if ( strlen((string)$data->cityId)>0 )
        {
            $sql   .= ' cityId = ?, ';
            $args[] = $data->cityId;
        }

        if ( strlen((string)$data->zipCode)>0 )
        {
            $sql   .= ' zipCode = ?, ';
            $args[] = $data->zipCode;
        }

        if ( strlen((string)$data->location)>0 )
        {
            $sql   .= ' location = ?, ';
            $args[] = $data->location;
        }

        if ( strlen((string)$data->complement)>0 )
        {
            $sql   .= ' complement = ?, ';
            $args[] = $data->complement;
        }

        if ( strlen((string)$data->neighborhood)>0 )
        {
            $sql   .= ' neighborhood = ?, ';
            $args[] = $data->neighborhood;
        }

        if ( strlen((string)$data->email)>0 )
        {
            $sql   .= ' email = ?, ';
            $args[] = $data->email;
        }

        if ( strlen((string)$data->emailAlternative)>0 )
        {
            $sql   .= ' emailAlternative = ?, ';
            $args[] = $data->emailAlternative;
        }

        if ( strlen((string)$data->url)>0 )
        {
            $sql   .= ' url = ?, ';
            $args[] = $data->url;
        }

        if ( strlen((string)$data->password)>0 )
        {
            $sql   .= ' password = CASE WHEN ( (SELECT upper(password) FROM ONLY basPerson WHERE personId = ?) = upper(?) OR ? IS NULL OR length(?) = 0) THEN upper(?) ELSE upper(md5(upper(?))) END, ';

            $args[] = $data->personId;
            $args[] = $data->password;
            $args[] = $data->password;
            $args[] = $data->password;
            $args[] = $data->password;
            $args[] = $data->password;
        }

        if ( strlen((string)$data->isAllowPersonalData)>0 )
        {
            $sql   .= ' isAllowPersonalData = ?, ';
            $args[] = $data->isAllowPersonalData;
        }

        if ( strlen((string)$data->number)>0 )
        {
            $sql   .= ' number = ?, ';
            $args[] = $data->number;
        }

        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);
            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->db->execute($sqls[$i]);
            }
            //$db->close();
            return $result;
        }
        return false;

    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePerson($personId)
    {
        $sql = 'DELETE FROM basPerson 
                      WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));
        //$this->db->close();

        return $result;
    }

    /**
     * Verify if the informed user and password match
     *
     * @param $personId (string): Primary key of the basPerson table
     * @param $password (string): Password for the informed personId
     *
     * @return (boolean): True if personId and password are valid, otherwise False
     *
     **/
    public function authenticate($personId, $password)
    {

        $sql = 'SELECT personId,
                       password
             FROM ONLY basPerson
                 WHERE personId = ?
                   AND upper(password) = upper(?)';

        $args = array ( $personId, $password);

        $result = $this->db->query(SAGU::Prepare($sql,$args));

        return (count($result) > 0);
    }

    /**
     * Get the physical person type (professor)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is professor
     **/
    public function isPersonProfessor($personId)
    {
        $sql = 'SELECT COUNT(*) 
                  FROM basPhysicalPersonProfessor
                 WHERE personId = ?';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return ($return[0][0] > 0);
    }
   
    /**
     * Get the physical person type (employee)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is employee
     **/
    public function isPersonEmployee($personId)
    {
        $sql = 'SELECT COUNT(*) 
                  FROM basPhysicalPersonEmployee
                 WHERE personId = ?';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return ($return[0][0] > 0);
    }
   
    /**
     * Get the physical person type (student)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is student
     **/
    public function isPersonStudent($personId)
    {
        $sql = 'SELECT COUNT(*) 
                  FROM basPhysicalPersonStudent
                 WHERE personId = ?';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return ($return[0][0] > 0);
    }
   
    /**
     * Get the physical person type (student)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is student
     **/
    public function isPersonLegal($personId)
    {
        $sql = 'SELECT COUNT(*) 
                  FROM basLegalPerson
                 WHERE personId = ?';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return ($return[0][0] > 0);
    }

    /**
     * Get the person by miolo username
     *
     * @param $mioloUserName (string): Miolo username linked to person
     *
     * @return (array): Return all person data just like getPerson
     **/
    public function getPersonByMioloUserName($mioloUserName)
    {
        $sql = 'SELECT personId
                  FROM ONLY basPerson
                 WHERE trim(upper(mioloUserName)) = trim(upper(?))';

        $db = $this->getDatabase();
        $sql =SAGU::prepare($sql, $mioloUserName,false);
        $personId = $db->query($sql);

        unset($person);
        if ( isset($personId) )
        {
            $person = $this->getPerson($personId[0][0]);
        }

        return $person;
    }

     /**
     * Get the person type
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): The person type: P => Physical, L => Legal
     **/
    public function getPersonType($personId)
    {
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*)
                                     FROM ONLY basPhysicalPerson
                                    WHERE personId = ? ) > 0
                             AND ( SELECT COUNT(*)
                                     FROM basLegalPerson
                                    WHERE personId = ? ) = 0
                            THEN \'' . DB_PHYSICAL . '\'
                  ELSE CASE WHEN ( SELECT COUNT(*)
                                     FROM basLegalPerson
                                    WHERE personId = ? ) > 0
                             AND ( SELECT COUNT(*)
                                     FROM ONLY basPhysicalPerson
                                    WHERE personId = ? ) = 0
                            THEN \'' . DB_LEGAL . '\'
                             END
                             END';

        $args = array( $personId,
                       $personId,
                       $personId,
                       $personId);

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $args));

        return $return[0][0];
    }

     /**
     * Get the physical person type (professor)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is professor
     **/
    public function isPhysicalPersonProfessor($personId)
    {
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*)
                                     FROM basPhysicalPersonProfessor
                                    WHERE personId = ? ) > 0
                            THEN true
                            ELSE false
                             END';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return $return[0][0];
    }

    /**
     * Get the physical person type (employee)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is employee
     **/
    public function isPhysicalPersonEmployee($personId)
    {
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*)
                                     FROM basPhysicalPersonEmployee
                                    WHERE personId = ? ) > 0
                            THEN true
                            ELSE false
                             END';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return $return[0][0];
    }

    /**
     * Get the physical person type (student)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     *
     * @return (varchar): Return true if is student
     **/
    public function isPhysicalPersonStudent($personId)
    {
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*)
                                     FROM basPhysicalPersonStudent
                                    WHERE personId = ? ) > 0
                            THEN true
                            ELSE false
                             END';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return $return[0][0];
    }

    /**
     * Update the person password
     *
     * @param $pesonId (int): Person id (primary key for basPerson)
     * @param $password (md5): Person password in md5 and upper cas format
     *
     * @return (boolean): Return true if the password be updated
     **/
    public function updatePassword($personId, $password)
    {
        $sql  = 'UPDATE basPerson
                    SET password = UPPER(?)
                  WHERE personId = ?';

        $db   = $this->getDatabase();

        $args = array($password,$personId);
        $res  = $db->execute(SAGU::prepare($sql, $args));

        return $res;
    }

    /**
     * get the physical person sex
     *
     * @param $pesonId (int): Person id (primary key for basPerson)
     *
     * @return (char): Return M if the MALE or F if is FEMALE
     **/
    public function getPhysicalPersonSex($personId)
    {
        $sql  = 'SELECT sex
                   FROM basPhysicalPerson
                  WHERE personId = ?';

        $db   = $this->getDatabase();
        $args = array($personId);
        $res  = $db->query(SAGU::prepare($sql, $args));

        return $res[0][0];
    }

    public function getPersonByCPF($cpf)
    {
        $sql = 'SELECT basPerson.personId
             FROM ONLY basPerson
            INNER JOIN basDocument
                 USING ( personId )
                 WHERE basDocument.documentTypeId = ?
                   AND basDocument.content        = ?';

        $db  = $this->getDatabase();
        $sql = SAGU::prepare($sql, array(DEFAULT_DOCUMENT_TYPE_ID_CPF, $cpf));

        $personId = $db->query($sql);

        return $personId[0][0];
    }

    public function getPersonByRG($rg)
    {
        $sql = 'SELECT basPerson.personId
             FROM ONLY basPerson
            INNER JOIN basDocument
                 USING ( personId )
                 WHERE basDocument.documentTypeId = ?
                   AND basDocument.content        = ?';

        $db  = $this->getDatabase();
        $sql = SAGU::prepare($sql, array(DEFAULT_DOCUMENT_TYPE_ID_RG, $rg));

        $personId = $db->query($sql);

        return $personId[0][0];
    }

}

?>
