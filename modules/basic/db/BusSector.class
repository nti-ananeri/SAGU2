<?php
/**
 *
 * File to manipulate basSector on system
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * William Prigol Lopes [william] [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
**/

/**
 * Class to manipulate the basBasicLocation table
 *
**/
class BusinessBasicBusSector extends Business
{
   /**
    * Get a database connection
    *
    * @param: No parameters needed
    *
    * @return (object): MIOLO Database connection
    *
   **/
   public function getDatabase()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

   /**
    * Insert a specific sector
    *
    * @param $data (object): sector object
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function insertSector($data)
    {
        $sql = ' INSERT INTO basSector
                            (description,
                             email,
                             iscoordinatorsSector,
                             phone,
                             fax,
                             place)
                      VALUES (?, ?, ?, ?, ?, ?)';
        $args = array( $data->description,
                       $data->email,
                       $data->iscoordinatorsSector,
                       $data->phone,
                       $data->fax,
                       $data->place);

        $db  = $this->getDatabase();
        $ret = $db->execute(SAGU::prepare($sql, $args) );
        //$db->close();
        return $ret;
    }

   /**
    *
    * get a specific sector
    *
    * @param $sectorId (int): Primary key for sector
    *
    * @return (object): sector object referred by primary key
    *
   **/
   public function getSector($sectorId)
    {
        $sql = ' SELECT description,
                        email,
                        iscoordinatorsSector,
                        phone,
                        fax,
                        place,
                        userName,
                        TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\')
                   FROM basSector 
                  WHERE sectorId = ? ';
        $args = array($sectorId);
        
        $db = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, $args));
        //$db->close();
        $ret=$ret[0];
        
        $return = new basSector;
        $return->sectorId             = $sectorId;
        $return->description          = $ret[0];
        $return->email                = $ret[1];
        $return->iscoordinatorsSector = $ret[2];
        $return->phone                = $ret[3];
        $return->fax                  = $ret[4];
        $return->place                = $ret[5];
        $return->userName             = $ret[6];
        $return->dateTime             = $ret[7];
        return $return;
    }

   /**
    * Update a specific sector
    *
    * @param $data (object): Sector object containing data to update
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function updateSector($data)
    {
        $sql = ' UPDATE basSector
                    SET description = ?,
                        email = ?,
                        iscoordinatorsSector = ?,
                        phone = ?,
                        fax = ?,
                        place = ?
                  WHERE sectorId = ? ';
        $args = array($data->description,
                      $data->email,
                      $data->iscoordinatorsSector,
                      $data->phone,
                      $data->fax,
                      $data->place,
                      $data->sectorId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ret = $db->execute($sqls[$i]);
        }

        //$db->close();
        return $ret;
    }

   /**
    * Search a specific sector filtering by specific fields
    *
    * @param $range (object): MIOLO PageNavigator Object
    * @param $filter (object): Object containing filters
    *
    * @return (array): Array containing a sector list
    *
   **/
   public function searchSector($filter)
    {
        $sql = ' SELECT sectorId,
                        description,
                        email,
                        isCoordinatorsSector,
                        phone,
                        fax, 
                        place
                   FROM basSector ';

        if (strlen((string)$filter->sectorId)>0 )
        {
            $where.= ' AND sectorId = ? ';
            $args[] = $filter->sectorId;
        }

        if (strlen((string)$filter->description)>0 )
        {
            $where.= ' AND TO_ASCII(description) ilike TO_ASCII(?) ';
            $args[] = $filter->description .'%';
        }

        if (strlen((string)$filter->place) > 0 )
        {
            $where.= ' AND TO_ASCII(place) ilike TO_ASCII(?) ';
            $args[] = $filter->place .'%';
        }

        if (strlen((string)$filter->phone) > 0 )
        {
            $where.= ' AND TO_ASCII(phone) ilike TO_ASCII(?) ';
            $args[] = $filter->phone .'%';
        }

        if (strlen((string)$filter->fax) > 0 )
        {
            $where.= ' AND TO_ASCII(fax) ilike TO_ASCII(?) ';
            $args[] = $filter->fax .'%';
        }

        if (strlen((string)$filter->email)>0 )
        {
            $where.= ' AND email ilike ? ';
            $args[] = $filter->email . '%';
        }
        if (strlen((string)$filter->isCoordinatorsSector)>0 )
        {
            $where.= ' AND isCoordinatorsSector = ? ';
            $args[] = $filter->isCoordinatorsSector;
        }



        if (strlen((string)$where)>0 )
        {
            $sql.= ' WHERE '.substr($where, 4, strlen((string)$where)).' ORDER BY description ';
            $db = $this->getDatabase();
            $ret = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
            return $ret;
        }
        return null;
                 
    }
    
   /**
    * delete a specific sector
    *
    * @param $sectorId (int): Sector object
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function deleteSector($sectorId)
    {
        $sql = ' DELETE FROM basSector
                       WHERE sectorId = ? ';
        $args = array($sectorId);
        $db = $this->getDatabase();
        $ret = $db->execute(SAGU::prepare($sql, $args) );
        //$db->close();
        return $ret;
    }

   /**
    * List all sectors
    *
    * @return (array): Array containing all sectors
    *
   **/
   public function listSector()
    {
        $sql = ' SELECT sectorId,
                        description
                   FROM basSector 
               ORDER BY description';

        $db  = $this->getDatabase();
        $ret = $db->queryRange(SAGU::prepare($sql, $args), $range);
        //$db->close();
        return $ret;
    }
}
?>
