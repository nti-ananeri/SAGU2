<?php
/**
 *
 * This file handles the connection and actions for basLegalPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 31/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusLegalPerson extends BusinessBasicBusPerson
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusLegalPerson()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLegalPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basLegalPerson 
              ORDER BY name';

        $ret = $this->db->query(SAGU::prepare($sql, $args));
        //$this->db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLegalPerson($personId)
    {
        //get the basPerson data
        $person = $this->getPerson($personId);
        //get the basLegalPerson data
        $sql = 'SELECT A.fakeName,
                       A.currentName,
                       A.cnpj,
                       A.stateRegistration,
                       A.cityRegistration,
                       A.legalPersonTypeId,
                       B.description,
                       A.phone,
                       A.fax,
                       A.name,
                       A.shortName,
                       A.location,
                       A.number,
                       A.neighborhood,
                       C.name,
                       C.stateId,
                       A.schoolStudentCardId
             FROM ONLY basLegalPerson A
             LEFT JOIN basLegalPersonType B
                 USING ( legalPersonTypeId )
             LEFT JOIN basCity C
                 ON    ( A.cityId = C.cityId )
                 WHERE A.personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));
        //$db->close();

        if ( count($result) == 0 )
        {
            return null;
        }

        $legalPerson = new basLegalPerson();
        list ( $legalPerson->fakeName,
               $legalPerson->currentName,
               $legalPerson->cnpj,
               $legalPerson->stateRegistration,
               $legalPerson->cityRegistration,
               $legalPerson->legalPersonTypeId,
               $legalPerson->description,
               $legalPerson->phone,
               $legalPerson->fax,
               $legalPerson->name,
               $legalPerson->shortName,
               $legalPerson->location,
               $legalPerson->number,
               $legalPerson->neighborhood,
               $legalPerson->cityName,
               $legalPerson->stateId,
               $legalPerson->schoolStudentCardId) = $result[0];
               
        //put into legalPerson attributes all person attributes
        $array = get_object_vars($person);
        foreach ( $array as $key => $row )
        {
            $legalPerson->$key = $person->$key;
        }

        return $legalPerson;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLegalPerson($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.fakeName,
                       A.currentName,
                       A.phone,
                       A.fax,
                       A.cnpj,
                       A.stateRegistration,
                       A.cityRegistration,
                       A.legalPersonTypeId,
                       A.schoolStudentCardId
             FROM ONLY basLegalPerson A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen((string)$filters->fakeName) > 0 )
        {
            $where .= ' AND TO_ASCII(A.fakeName) ILIKE TO_ASCII(?) ';
            $args[] = $filters->fakeName . '%';
        }
        if ( strlen((string)$filters->currentName) > 0 )
        {
            $where .= ' AND A.currentName ILIKE ? ';
            $args[] = $filters->currentName . '%';
        }
        if ( strlen((string)$filters->cnpj) > 0 )
        {
            $where .= ' AND A.cnpj = ? ';
            $args[] = $filters->cnpj;
        }
        if ( strlen((string)$filters->stateRegistration) > 0 )
        {
            $where .= ' AND A.stateRegistration = ? ';
            $args[] = $filters->stateRegistration;
        }
        if ( strlen((string)$filters->cityRegistration) > 0 )
        {
            $where .= ' AND A.cityRegistration = ? ';
            $args[] = $filters->cityRegistration;
        }
        if ( strlen((string)$filters->legalPersonTypeId) > 0 )
        {
            $where .= ' AND A.legalPersonTypeId = ? ';
            $args[] = $filters->legalPersonTypeId;
        }
        if ( strlen((string)$filters->phone) > 0 )
        {
            $where .= ' AND A.phone = ? ';
            $args[] = $filters->phone;
        }
        if ( strlen((string)$filters->fax) > 0 )
        {
            $where .= ' AND A.fax = ? ';
            $args[] = $filters->fax;
        }

        if ( strlen((string)$filters->schoolStudentCardId) > 0 )
        {
            $where .= ' AND A.schoolStudentCardId = ? ';
            $args[] = $filters->schoolStudentCardId;
        }
        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLegalPerson($data)
    {

        //$this->db->begin();

        $data = $this->insertPerson($data);

        $legalPerson = new basLegalPerson();
        $vars        = get_object_vars($legalPerson);

        foreach ( $vars as $var => $value )
        {
            if ( strlen((string)$data->$var)>0 && strtolower($data->$var) != 'null' && $var != 'timeStamp' && $var != 'uploadFile' && $var != 'stateId')
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
        }

        if ( strlen((string)$string1)>0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);
            $sql    = 'INSERT INTO basLegalPerson 
                                   ( ' . $string1 . ')
                            VALUES ( ' . $string2 . ')';

            $result = $this->db->execute(SAGU::prepare($sql, $args));
            //$this->db->finish();
            return $data;
        }

        //$this->db->finish();
        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLegalPerson($data)
    {

        //$this->db->begin();
        $sql = 'UPDATE basLegalPerson SET
                       fakeName             = ?,
                       currentName          = ?,
                       cnpj                 = ?,
                       stateRegistration    = ?,
                       cityRegistration     = ?,
                       legalPersonTypeId    = ?,
                       phone                = ?,
                       fax                  = ?,
                       schoolStudentCardId  = ?
                 WHERE personId          = ?';

        $args[] = $data->fakeName;
        $args[] = $data->currentName;
        $args[] = $data->cnpj;
        $args[] = $data->stateRegistration;
        $args[] = $data->cityRegistration;
        $args[] = $data->legalPersonTypeId;
        $args[] = $data->phone;
        $args[] = $data->fax;
        $args[] = $data->schoolStudentCardId;
        $args[] = $data->personId;

        $sqls[] = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        $this->updatePerson($data);

        return $result;
        //$this->db->finish();

    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLegalPersonToInscriptions($data)
    {

        //$this->db->begin();

        $sql = 'UPDATE basLegalPerson SET ';

        if ( strlen((string)$data->fakeName)>0 )
        {
            $sql   .= ' fakeName = ?, ';
            $args[] = $data->fakeName;
        }

        if ( strlen((string)$data->currentName)>0 )
        {
            $sql   .= ' currentName = ?, ';
            $args[] = $data->currentName;
        }

        if ( strlen((string)$data->cnpj)>0 )
        {
            $sql   .= ' cnpj = ?, ';
            $args[] = $data->cnpj;
        }

        if ( strlen((string)$data->stateRegistration)>0 )
        {
            $sql   .= ' stateRegistration = ?, ';
            $args[] = $data->stateRegistration;
        }

        if ( strlen((string)$data->cityRegistration)>0 )
        {
            $sql   .= ' cityRegistration = ?, ';
            $args[] = $data->cityRegistration;
        }

        if ( strlen((string)$data->legalPersonTypeId)>0 )
        {
            $sql   .= ' legalPersonTypeId = ?, ';
            $args[] = $data->legalPersonTypeId;
        }

        if ( strlen((string)$data->description)>0 )
        {
            $sql   .= ' description = ?, ';
            $args[] = $data->description;
        }

        if ( strlen((string)$data->schoolStudentCardId)>0 )
        {
            $sql   .= ' schoolStudentCardId = ?, ';
            $args[] = $data->schoolStudentCardId;
        }

        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);
            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->db->execute($sqls[$i]);
            }

            $this->updatePersonToInscriptions($data);
            //$db->close();
            return $result;
        }

        //$this->db->finish();

    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteLegalPerson($personId)
    {
        /*$sql = 'DELETE FROM basLegalPerson 
                      WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));*/

        //$this->db->close();

        $result = $this->deletePerson($personId);
        return $result;
    }

}

?>
