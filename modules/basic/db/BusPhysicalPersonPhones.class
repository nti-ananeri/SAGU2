<?php

$MIOLO  = MIOLO::getInstance();

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonPhones extends Business
{

    public $db;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }


    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonPhones($personId)
    {
        $sql = 'SELECT A.personId,
                       A.name,
                       A.residentialPhone,
                       A.workPhone,
                       A.cellPhone,
                       A.messagePhone,
                        A.userName,
                       TO_CHAR (A.dateTime, \'' . MASK_TIMESTAMP . '\'),
                      A.ipAddress
             FROM ONLY basPhysicalPerson A
                 WHERE A.personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPerson = new basPhysicalPerson();
        list ( $physicalPerson->personId,
               $physicalPerson->name,
               $physicalPerson->residentialPhone,
               $physicalPerson->workPhone,
               $physicalPerson->cellPhone,
               $physicalPerson->messagePhone,
               $physicalPerson->userName,
	           $physicalPerson->dateTime,
               $physicalPerson->ipAddress) = $result[0];

        return $physicalPerson; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonPhones($filters)
    {
        $sql = 'SELECT A.personId,
                       A.name,
                       A.residentialPhone,
                       A.workPhone,
                       A.cellPhone,
                       A.messagePhone
             FROM ONLY basPhysicalPerson A ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonPhones($data)
    {

        //$this->db->begin();
        $sql = 'UPDATE basPhysicalPerson SET
                       residentialPhone            = ?,
                       workPhone                   = ?,
                       cellPhone                   = ?,
                       messagePhone                = ?
                 WHERE personId                    = ?';

        $args[] = $data->residentialPhone;
        $args[] = $data->workPhone;
        $args[] = $data->cellPhone;
        $args[] = $data->messagePhone;
        $args[] = $data->personId;

        $sqls = SAGU::prepare($sql, $args);
        $result = $this->db->execute($sqls);

        return $result;

    }
}

?>
