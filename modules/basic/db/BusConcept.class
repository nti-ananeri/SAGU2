<?php
/**
 *
 * This file handles the connection and actions for basConcept table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basConcept table
 **/
class BusinessBasicBusConcept extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listConcept()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT concept,
                       concept
                  FROM basConcept
              ORDER BY concept';

        $ret = $db->query(SAGU::prepare($sql, $args));
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $conceptId (integer): Primary key of the record to be retrieved
     * @param $companyId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConcept($companyId, $conceptId)
    {
        $sql = 'SELECT A.conceptId,
                       A.concept,
                       A.companyId,
                       B.name,
                       A.isApproved,
                       A.needsDescriptive,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basConcept A
             LEFT JOIN basCompanyConf B
                 USING ( companyId )
                 WHERE A.conceptId = ?
                   AND A.companyId = ?';

        $args = array ( $conceptId,
                        $companyId );
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $concept = new basConcept();
        list ( $concept->conceptId,
               $concept->concept,
               $concept->companyId,
               $concept->companyName,
               $concept->isApproved,
               $concept->needsDescriptive,
               $concept->userName,
               $concept->dateTime,
               $concept->ipAddress ) = $result[0];

        return $concept; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConcept($filters)
    {
        $sql = 'SELECT A.conceptId,
                       A.concept,
                       A.companyId,
                       B.name,
                       A.isApproved,
                       A.needsDescriptive,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basConcept A
             LEFT JOIN basCompanyConf B
                 USING ( companyId ) ';

        if ( strlen((string)$filters->conceptId) > 0 )
        {
            $where .= ' AND A.conceptId = ? ';
            $args[] = $filters->conceptId;
        }

        if ( strlen((string)$filters->concept) > 0 )
        {
            $where .= ' AND A.concept ILIKE ? ';
            $args[] = $filters->concept . '%';
        }

        if ( strlen((string)$filters->companyId) > 0 )
        {
            $where .= ' AND A.companyId = ? ';
            $args[] = $filters->companyId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name, 
                                                               A.concept';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql,$args));
            //$db->close();
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertConcept($data)
    {
        $sql = 'INSERT INTO basConcept
                            (concept,
                             companyId,
                             isApproved,
                             needsDescriptive)
                     VALUES (?,?,?,?)';

        $args = array( $data->concept,
                       $data->companyId,
                       $data->isApproved,
                       $data->needsDescriptive );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConcept($data)
    {
        $sql = 'UPDATE basConcept   
                   SET concept          = ?,
                       isApproved       = ?,
                       needsDescriptive = ?
                 WHERE conceptId        = ?
                   AND companyId        = ?';
              
        $args = array( $data->concept,
                       $data->isApproved,
                       $data->needsDescriptive,
                       $data->conceptId,
                       $data->companyId, );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $conceptId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConcept($companyId, $conceptId)
    {
        $sql = 'DELETE FROM basConcept 
                      WHERE conceptId = ?
                        AND companyId = ?';

        $args = array ( $conceptId,
                        $companyId );
        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

}

?>
