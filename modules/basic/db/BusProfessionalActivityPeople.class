<?php
/**
 *
 * This file handles the connection and actions for basProfessionalActivityPeople table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basProfessionalActivityPeople table
 **/
class BusinessBasicBusProfessionalActivityPeople extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $professionalActivityPeopleId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessionalActivityPeople($professionalActivityPeopleId)
    {
        $sql = 'SELECT A.professionalActivityPeopleId,
                       A.personId,
                       C.name,
                       A.professionalActivityId,
                       B.description,
                       A.legalPersonId,
                       D.name,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.professionalActivityLinkTypeId,
                       E.description,
                       A.professionalActivityAgentId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basProfessionalActivityPeople A
             LEFT JOIN basProfessionalActivity B
                 USING (professionalActivityId)
        LEFT JOIN ONLY basPerson C
                 USING (personId)
        LEFT JOIN ONLY basLegalPerson D
                 USING (personId)
             LEFT JOIN basProfessionalActivityLinkType E
                 USING (professionalActivityLinkTypeId)
                 WHERE A.professionalActivityPeopleId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $professionalActivityPeopleId));
        //$db->close();

        $professionalActivityPeople = new basProfessionalActivityPeople();
        list ( $professionalActivityPeople->professionalActivityPeopleId,
               $professionalActivityPeople->personId,
               $professionalActivityPeople->personName,
               $professionalActivityPeople->professionalActivityId,
               $professionalActivityPeople->professionalActivityDescription,
               $professionalActivityPeople->legalPersonId,
               $professionalActivityPeople->legalPersonName,
               $professionalActivityPeople->beginDate,
               $professionalActivityPeople->endDate,
               $professionalActivityPeople->professionalActivityLinkTypeId,
               $professionalActivityPeople->professionalActivityLinkTypeDescription,
               $professionalActivityPeople->professionalActivityAgentId,
               $professionalActivityPeople->userName,
               $professionalActivityPeople->dateTime,
               $professionalActivityPeople->ipAddress ) = $result[0];

        return $professionalActivityPeople; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessionalActivityPeople($filters)
    {
        $sql = 'SELECT A.professionalActivityPeopleId,
                       A.personId,
                       C.name,
                       A.professionalActivityId,
                       B.description,
                       A.legalPersonId,
                       D.name,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.professionalActivityLinkTypeId,
                       E.description,
                       A.professionalActivityAgentId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basProfessionalActivityPeople A
             LEFT JOIN basProfessionalActivity B
                 USING (professionalActivityId)
        LEFT JOIN ONLY basPerson C
                 USING (personId)
        LEFT JOIN ONLY basLegalPerson D
                 USING (personId)
             LEFT JOIN basProfessionalActivityLinkType E
                 USING (professionalActivityLinkTypeId) ';

        if ( strlen((string)$filters->professionalActivityPeopleId) > 0 )
        {
            $where .= ' AND professionalActivityPeopleId = ? ';
            $args[] = $filters->professionalActivityPeopleId;
        }

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND personId = ? ';
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.name, B.description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessionalActivityPeople($data)
    {
        $sql = 'INSERT INTO basProfessionalActivityPeople
                            (professionalActivityId,
                             personId,
                             legalPersonId,
                             beginDate,
                             endDate,
                             professionalActivityLinkTypeId,
                             professionalActivityAgentId)
                     VALUES (?,?,?,TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),?,?)';

        $args = array( $data->professionalActivityId,
                       $data->personId,
                       $data->legalPersonId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professionalActivityLinkTypeId,
                       $data->professionalActivityAgentId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateProfessionalActivityPeople($data)
    {
        $sql = 'UPDATE basProfessionalActivityPeople
                   SET professionalActivityId          = ?,
                       personId                        = ?,
                       legalPersonId                   = ?,
                       beginDate                       = TO_DATE(?, \'' . MASK_DATE . '\'),
                       endDate                         = TO_DATE(?, \'' . MASK_DATE . '\'),
                       professionalActivityLinkTypeId  = ?,
                       professionalActivityAgentId     = ?
                 WHERE professionalActivityPeopleId    = ?';

        $args = array( $data->professionalActivityId,
                       $data->personId,
                       $data->legalPersonId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professionalActivityLinkTypeId,
                       $data->professionalActivityAgentId,
                       $data->professionalActivityPeopleId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professionalActivityPeopleId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteProfessionalActivityPeople($professionalActivityPeopleId)
    {
        $sql = 'DELETE FROM basProfessionalActivityPeople
                      WHERE professionalActivityPeopleId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $professionalActivityPeopleId));
        //$db->close();

        return $result;
    }

}

?>
