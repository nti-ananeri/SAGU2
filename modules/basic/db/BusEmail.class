<?php
/**
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCity table
 **/
class BusinessBasicBusEmail extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
//     public function listCity($countryId=null, $stateId=null)
//     {
//         $db  = $this->getDatabase();
// 
//         $sql = 'SELECT cityId,
//                        name
//                   FROM basCity ';
// 
//         if ( strlen((string)$countryId)>0 )
//         {
//             $sql .= ' countryId = ? ';
//             $args[] = $countryId;
//         }
// 
//         if ( strlen((string)$stateId)>0 )
//         {
//             $sql .= ' stateId = ? ';
//             $args[] = $stateId;
//         }
// 
//         $sql .= ' ORDER BY name';
// 
//         $ret = $db->query(SAGU::prepare($sql, $args));
//         //$db->close();
//         return $ret;
//     }
    
    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEmail($emailId)
    {
        $sql = 'SELECT A.emailId,
                       A.description,
                       A.from,
                       A.bcc,
                       A.subject,
                       A.body,
                       A.server,
                       A.port,
                       A.mimeVersion,
                       A.contentType,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basEmail A 
                 WHERE A.emailId = ?';
 
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $emailId));

        $email  = new BasEmail();
        list (  $email->emailId,
                $email->description,
                $email->from,
                $email->bcc,
                $email->subject,
                $email->body,
                $email->server,
                $email->port,
                $email->mimeVersion,
                $email->contentType,
                $email->userName,
                $email->dateTime,
                $email->ipAddress ) = $result[0];

        return $email; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmail($filters)
    {
        $sql = 'SELECT A.emailId,
                       A.description,
                       A.from,
                       A.bcc,
                       A.subject,
                       A.body,
                       A.server,
                       A.port,
                       A.mimeVersion,
                       A.contentType,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basEmail A ';

        if ( strlen((string)$filters->emailId) > 0 )
        {
            $where .= ' AND A.emailId = ?';
            $args[] = $filters->emailId;
        }
         if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen((string)$filters->subject) > 0 )
        {
            $where .= ' AND TO_ASCII(A.subject) ILIKE TO_ASCII(?) ';
            $args[] = $filters->subject . '%';
        }
 
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ';

            $db     = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql,$args));

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEmail($data)
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_emailid\')';
        $ret = $db->query(SAGU::prepare($sql,null));

        $data->emailId = $ret[0][0];

        $sql = 'INSERT INTO basEmail
                            (emailId,
                             description,
                             "from",
                             bcc,
                             subject,
                             body,
                             server,
                             port,
                             mimeVersion,
                             contentType)
                     VALUES (?,?,?,?,?,?,?,?,?,?)';

        $args = array(  $data->emailId,
                        $data->description,
                        $data->from,
                        $data->bcc,
                        $data->subject,
                        $data->body,
                        $data->server,
                        $data->port,
                        $data->mimeVersion,
                        $data->contentType);

        $result = $db->execute(SAGU::prepare($sql, $args, false));

        //$db->close();
        if ( $result )
        {
            return $data->emailId;
        }
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateEmail($data)
   {
        $sql = 'UPDATE basEmail
                   SET description  = ?,
                       "from"       = ?,
                       bcc          = ?,
                       subject      = ?,
                       body         = ?,
                       server       = ?,
                       port         = ?,
                       mimeVersion  = ?,
                       contentType  = ?
                 WHERE emailId    = ?';

        $args = array(  $data->description,
                        $data->from,
                        $data->bcc,
                        $data->subject,
                        $data->body,
                        $data->server,
                        $data->port,
                        $data->mimeVersion,
                        $data->contentType,
                        $data->emailId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEmail($emailId)
    {
        $sql = 'DELETE FROM basEmail 
                      WHERE emailId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $emailId));
        //$db->close();

        return $result;
    }

}

?>
