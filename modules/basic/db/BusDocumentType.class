<?php
/**
 *
 * This file handles the connection and actions for basDocumentType table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basDocumentType table
 **/

class BusinessBasicBusDocumentType extends Business
{
   /**
    * Get a database connection
    *
    * @param: No parameters needed
    *
    * @return (object): MIOLO Database connection
    *
   **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->GetDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDocumentType()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT documentTypeId,
                       name,
                       mask,
                       sex,
                       personType,
                       minAge,
                       maxAge,
                       needDeliver,
                       isBlockEnroll,
                       observation
                  FROM basDocumentType
              ORDER BY name';

        $ret = $db->query(SAGU::prepare($sql, $args));
        //$db->close();
        return $ret;
    }

   /**
    * Insert a specific documentType
    *
    * @param $data (object): documentType object
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function insertDocumentType($data)
    {
        $sql = ' INSERT INTO basDocumentType
                            (name,
                             mask,
                             sex,
                             personType,
                             minAge,
                             maxAge,
                             needDeliver,
                             isBlockEnroll,
                             observation)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ';
        $args = array( $data->name,
                       $data->mask,
                       $data->sex,
                       $data->personType,
                       $data->minAge,
                       $data->maxAge,
                       $data->needDeliver,
                       $data->isBlockEnroll,
                       $data->observation );
        
        $db  = $this->getDatabase();
   
        $ret = $db->execute(SAGU::prepare($sql, $args) );
//        $db->Close();
        return $ret;
    }

   /**
    *
    * get a specific documentType
    *
    * @param $documentTypeId (int): Primary key for documentType
    *
    * @return (object): documentType object referred by primary key
    *
   **/
   public function getDocumentType($documentTypeId)
    {
        $sql = '     SELECT name,
                            mask,
                            sex,
                            personType,
                            minAge,
                            maxAge,
                            needDeliver,
                            TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                            userName,
                            isBlockEnroll,
                            observation
                       FROM basDocumentType
                  WHERE documentTypeId = ? ';
        $args = array($documentTypeId);
        
        $db  = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, $args));
//        $db->Close();
        $ret = $ret[0];
        
        $return = new basDocumentType;
        $return->documentTypeId         = $documentTypeId;
        $return->name                   = $ret[0];
        $return->mask                   = $ret[1];
        $return->sex                    = $ret[2];
        $return->personType             = $ret[3];
        $return->minAge                 = $ret[4];
        $return->maxAge                 = $ret[5];
        $return->needDeliver            = $ret[6];
        $return->dateTime               = $ret[7];
        $return->userName               = $ret[8];
        $return->isBlockEnroll          = $ret[9];
        $return->observation            = $ret[10];
        return $return;
    }

   /**
    * Update a specific documentType
    *
    * @param $data (object): DocumentType object containing data to update
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function updateDocumentType($data)
    {
        $sql = ' UPDATE basDocumentType
                    SET name           = ?,
                        mask           = ?,
                        sex            = ?,
                        personType     = ?,
                        minAge         = ?,
                        maxAge         = ?,
                        needDeliver    = ?,
                        isBlockEnroll  = ?,
                        observation    = ?
                  WHERE documentTypeId = ? ';
        $args = array($data->name,
                      $data->mask,
                      $data->sex,
                      $data->personType,
                      $data->minAge,
                      $data->maxAge,
                      $data->needDeliver,
                      $data->isBlockEnroll,
                      $data->observation,
                      $data->documentTypeId);

        $db = $this->GetDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ret = $db->execute($sqls[$i]);
        }

        return $ret;
    }

   /**
    * Search a specific documentType filtering by specific fields
    *
    * @param $range (object): MIOLO PageNavigator Object
    * @param $filter (object): Object containing filters
    *
    * @return (array): Array containing a documentType list
    *
   **/
   public function searchDocumentType($filter)
    {
        $module = MIOLO::getCurrentModule();
        $sql = ' SELECT documentTypeId,
                        name,
                        personType,
                        mask,
                        needDeliver,
                        isBlockEnroll,
                        observation
                   FROM basDocumentType'; 
//                         CASE WHEN personType = \'P\'
//                              THEN \'' . _M('Physical', $module) . '\'
//                              ELSE CASE WHEN personType= \'L\'
//                                        THEN \'' . _M('Legal', $module) . '\'
//                                   END
//                         END,
        if ( strlen((string)$filter->sex) > 0 )
        {
            $where .= ' AND sex = ? ';
            $args[] = $filter->sex;
        }

        if ( strlen((string)$filter->age) > 0 )
        {
            $where .= ' AND ?::integer BETWEEN minAge AND maxAge ';
            $args[] = $filter->age;
        }

        if ( $filter->needDeliver == DB_TRUE  )
        {
            $where .= ' AND needDeliver IS true ';
        }

        if (strlen((string)$filter->documentTypeId)>0 )
        {
            $where.= ' AND documentTypeId = ?::integer ';
            $args[] = $filter->documentTypeId;
        }
        if (strlen((string)$filter->name)>0 )
        {
            $where.= ' AND TO_ASCII(name) ILIKE TO_ASCII(?) ';
            $args[] = $filter->name . '%';
        }
        if (strlen((string)$filter->personType)>0 )
        {
            $where.= ' AND UPPER(personType) = UPPER(?) ';
            $args[] = $filter->personType;
        }

        if ( strlen((string)$filter->observation) > 0 )
        {
            $where.= ' AND observation ILIKE ? ';
            $args[] = $filter->observation . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4, strlen((string)$where)).' ORDER BY name, personType ';
            $db = $this->getDatabase();
            $ret = $db->query(SAGU::prepare($sql, $args), $range);

//            $db->Close();
            return $ret;
        }
        return null;
                 
    }
    
   /**
    * delete a specific documentType
    *
    * @param $documentTypeId (int): DocumentType object
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function deleteDocumentType($documentTypeId)
    {
        $sql = ' DELETE FROM basDocumentType
                       WHERE documentTypeId = ? ';
        $args = array($documentTypeId);
        $db = $this->getDatabase();
        $ret = $db->Execute(SAGU::Prepare($sql, $args) );
        //$db->Close();
        return $ret;
    }
}
?>
