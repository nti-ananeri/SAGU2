<?php
/**
 *
 * This file handles the connection and actions for basPhysicalPersonProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPhysicalPersonProfessor table
 **/
class BusinessBasicBusPhysicalPersonProfessor extends BusinessBasicBusPhysicalPerson
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPhysicalPersonProfessor()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonProfessor()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPersonProfessor
              ORDER BY name';

        $res = $this->db->query($sql);

        return $res;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonProfessor($personId)
    {

        // check if this person is a professor
        $sql = 'SELECT 1
             FROM ONLY basPhysicalPersonProfessor
                 WHERE personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));

        if ( count($result) == 0 )
        {
            unset($physicalPersonProfessor);
        }
        else
        {
            // if it is a professor, get the basPhysicalPerson data
            $physicalPerson = $this->getPhysicalPerson($personId);
            $physicalPersonProfessor = new basPhysicalPersonProfessor();

            // put all physicalPerson attributes into physicalPersonProfessor object
            $array = get_object_vars($physicalPerson);
            foreach ( $array as $key => $row )
            {
                $physicalPersonProfessor->$key = $physicalPerson->$key;
            }

        }
        return $physicalPersonProfessor;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonProfessor($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . MASK_DATE . '\'),
                       A.password,
                       A.isAllowPersonalData
             FROM ONLY basPhysicalPersonProfessor A
             LEFT JOIN basCity B 
                 USING (cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonProfessor($data)
    {
        $sql = 'INSERT INTO basPhysicalPersonProfessor 
                            ( sex, name, personId )
                     VALUES ( \'\', \'\', ? )';

        $result = $this->db->execute(SAGU::prepare($sql, $data->personId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);
        return $data2;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonProfessor($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonProfessor($personId)
    {
        $sql = 'DELETE FROM ONLY basPhysicalPersonProfessor 
                           WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));

        return $result;
    }


    public function isPhysicalPersonProfessorCoordinator($personId)
    {
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*)
                                     FROM basPhysicalPersonProfessor A
                               INNER JOIN acdCourseCoordinator B
                                       ON (     A.personId = B.coordinatorId
                                            AND B.endDate IS NULL )
                                    WHERE A.personId = ? ) > 0
                            THEN true
                            ELSE false
                             END';

        $db = $this->getDatabase();

        $return = $db->query(SAGU::prepare($sql, $personId));

        return $return[0][0];
    }

}

?>
