<?php
/**
 *
 * This file handles the connection and actions for basPhysicalPersonStudent table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonStudent extends BusinessBasicBusPhysicalPerson
{

    public $db;

    /**
     * Class constructor
     **/
    public function BusinessBasicBusPhysicalPersonStudent()
    {
        $this->db = $this->getDatabase();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonStudent()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPersonStudent 
              ORDER BY name';

        $result = $this->db->query(SAGU::prepare($sql, $args));
        //$this->db->close();
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonStudent($personId)
    {
        //get the basPersonPhysical data
        $physicalPerson = $this->getPhysicalPerson($personId);

        //get the basPhysicalPersonStudent data
        $sql = 'SELECT A.externalCourseIdHs,
                       B.name,
                       A.institutionIdHs,
                       C.name,
                       A.cityIdHs,
                       D.name,
                       A.yearHs,
                       A.isInsured,
                       A.passive,
                       D.stateId,
                       TO_CHAR(A.conclusionDateHs, \'' . MASK_DATE . '\')
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN acdExternalCourse B
                    ON ( A.externalCourseIdHs = B.externalCourseId )
        LEFT JOIN ONLY basLegalPerson C
                    ON ( A.institutionIdHs = C.personId )
             LEFT JOIN basCity D
                    ON ( A.cityIdHs = D.cityId )
                 WHERE A.personId = ?';

        $result = $this->db->query(SAGU::prepare($sql, $personId));
        //$db->close();

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPersonStudent = new basPhysicalPersonStudent();
        list ( $physicalPersonStudent->externalCourseIdHs,
               $physicalPersonStudent->externalCourseHsName,
               $physicalPersonStudent->institutionIdHs,
               $physicalPersonStudent->institutionHsName,
               $physicalPersonStudent->cityIdHs,
               $physicalPersonStudent->cityHsName,
               $physicalPersonStudent->yearHs,
               $physicalPersonStudent->isInsured,
               $physicalPersonStudent->passive,
               $physicalPersonStudent->stateIdHs,
               $physicalPersonStudent->conclusionDateHs) = $result[0];

        //put into physicalPersonStudent attributes all person attributes
        $array = get_object_vars($physicalPerson);
        foreach ( $array as $key => $row )
        {
            $physicalPersonStudent->$key = $physicalPerson->$key;
        }

        return $physicalPersonStudent;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonStudent($filters)
    {
        $sql = 'SELECT C.personId,
                       C.personDv,
                       C.personMask,
                       C.name,
                       C.shortName,
                       C.cityId,
                       B.name,
                       C.zipCode,
                       C.location,
                       C.complement,
                       C.neighborhood,
                       C.email,
                       C.emailAlternative,
                       C.url,
                       TO_CHAR(C.dateIn,\'' . MASK_DATE . '\'),
                       C.password,
                       C.isAllowPersonalData
             FROM ONLY basPhysicalPersonStudent A
       INNER JOIN ONLY basPhysicalPerson C
                    ON (C.personId = A.personId)
             LEFT JOIN basCity B 
                    ON (B.cityId = C.cityId) ';

        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(A.name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen((string)$filters->email) > 0 )
        {
            $where .= ' AND A.email = ? ';
            $args[] = $filters->email;
        }
        if ( strlen((string)$filters->emailAlternative) > 0 )
        {
            $where .= ' AND A.emailAlternative = ? ';
            $args[] = $filters->emailAlternative;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->db->query(SAGU::Prepare($sql,$args));
            //$this->db->close();
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonStudent($data)
    {
        $physicalPersonStudent = new basPhysicalPersonStudent();
        $vars                  = get_object_vars($physicalPersonStudent);

        foreach ( $vars as $var => $value )
        {
            if ( $var == 'password' )
            {
                $string1 .= $var . ',';
                $string2 .= 'CASE WHEN ( length(?) = 0 OR ? IS NULL ) THEN ( SELECT password from only basperson WHERE personId = ? LIMIT 1) ELSE upper(md5(upper(?))) END,';
                $args[]   = $data->$var;
                $args[]   = $data->$var;
                $args[]   = $data->personId;
                $args[]   = $data->$var;
            }
            elseif ( strlen((string)$data->$var) > 0 && strtolower($data->$var) != 'null' && $var != 'dateBirth' && $var != 'ipAddress' && $var != 'dateTime' && $var != 'userName' && $var != 'stateId' )
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
            elseif ( $var == 'dateBirth' || $var == 'conclusionDateHs' )
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?,\'' . MASK_DATE . '\'),';
                $args[]   = $data->$var;
            }
        }

        if ( strlen((string)$string1) > 0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);

            $stringSex  = stripos($string1, 'sex');
            $stringName = stripos($string1, 'name');

            if ( ($stringSex === FALSE) || ($stringName === FALSE) )
            {

                //Sexo, nome, ou ambos não vieram para incluir
                if ( ($stringSex === FALSE) && ($stringName === FALSE) )
                {
                    //Não veio name nem sexo da pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent 
                                           ( sex, name, ' . $string1 . ')
                                    VALUES ( \'\', \'\', ' . $string2 . ')';
                }
                elseif ( ($stringSex !== FALSE) && ($stringName === FALSE) )
                {
                    //Não veio name e veio sexo pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent 
                                           ( sex, ' . $string1 . ')
                                    VALUES ( \'\', ' . $string2 . ')';
                }
                elseif ( ($stringSex === FALSE) && ($stringName !== FALSE) )
                {
                    //Não veio sexo e veio name da pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent 
                                           ( name, ' . $string1 . ')
                                    VALUES ( \'\', ' . $string2 . ')';
                }
            }
            else
            {
                //Vieram sexo e nome da pessoa para incluir
                $sql    = 'INSERT INTO basPhysicalPersonStudent 
                                        (' . $string1 . ')
                                 VALUES (' . $string2 . ')';
            }

            $result = $this->db->execute(SAGU::prepare($sql, $args));

            $data2  = $this->getPhysicalPerson($data->personId);
            $this->updatePhysicalPerson($data2);

            return $data;
        }

        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonStudent($data)
    {
        //$this->db->begin();

        $sql = 'UPDATE basPhysicalPersonStudent SET ';

        if ( strlen((string)$data->externalCourseIdHs)>0 )
        {
            $sql   .= ' externalCourseIdHs = ?, ';
            $args[] = $data->externalCourseIdHs;
        }

        if ( strlen((string)$data->institutionIdHs)>0 )
        {
            $sql   .= ' institutionIdHs = ?, ';
            $args[] = $data->institutionIdHs;
        }

        if ( strlen((string)$data->cityIdHs)>0 )
        {
            $sql   .= ' cityIdHs = ?, ';
            $args[] = $data->cityIdHs;
        }

        if ( strlen((string)$data->yearHs)>0 )
        {
            $sql   .= ' yearHs = ?, ';
            $args[] = $data->yearHs;
        }

        if ( strlen((string)$data->conclusionDateHs)>0 )
        {
            $sql   .= ' conclusionDateHs = TO_DATE(?, \'' . MASK_DATE . '\'), ';
            $args[] = $data->conclusionDateHs;
        }
        else
        {
            $sql   .= ' conclusionDateHs = NULL, ';
        }

        if ( strlen((string)$data->isInsured)>0 )
        {
            $sql   .= ' isInsured = ?, ';
            $args[] = $data->isInsured;
        }

        if ( strlen((string)$data->passive)>0 )
        {
            $sql   .= ' passive = ?, ';
            $args[] = $data->passive;
        }

//         if ( strlen((string)$data->employeeIdPaymentPaperDebit)>0 )
//         {
//             $sql   .= ' employeeIdPaymentPaperDebit = ?, ';
//             $args[] = $data->employeeIdPaymentPaperDebit;
//         }

//        if ( strlen((string)$data->payrollDiscountEmployeeId)>0 )
//        {
        //            $sql   .= ' payrollDiscountEmployeeId = ?, ';
        //            $args[] = $data->payrollDiscountEmployeeId;
//        }
        
        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);
            $sqls = SAGU::prepare($sql, $args);
                
            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->db->execute($sqls[$i]);
            }

            //$db->close();
            return $result;
        }

        //$this->db->finish();

    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonStudent($personId)
    {
        $sql = 'DELETE FROM ONLY basPhysicalPersonStudent 
                           WHERE personId = ?';

        $result = $this->db->execute(SAGU::prepare($sql, $personId));

        //$this->db->close();

        return $result;
    }
    
    public function beginTransaction()
    {
        return $this->db->execute('BEGIN TRANSACTION');
    }
    
    public function commit()
    {
        return $this->db->execute('COMMIT');
    }

}

?>
