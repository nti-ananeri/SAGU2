<?php
/**
 *
 * This file handles the connection and actions for basCvsLog table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 18/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCvsLog table
 **/
class BusinessBasicBusCvsLog extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessBasicBusCvsLog()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'academic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $cvsLogId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCvsLog($cvsLogId)
    {
        $sql = 'SELECT A.cvsLogId,
                       A.tableName,
                       A.fieldName,
                       A.oldValue,
                       A.tablePkey,
                       A.tablePkeyValue,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_DATE . '\'),
                       A.ipAddress
                  FROM basCvsLog A
                 WHERE A.cvsLogId = ? ';

        //$db     = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $cvsLogId));
        //$db->close();

        $cvsLog = new basCvsLog();
        list ( $cvsLog->cvsLogId,
               $cvsLog->tableName,
               $cvsLog->fieldName,
               $cvsLog->oldValue,
               $cvsLog->tablePkey,
               $cvsLog->tablePkeyValue,
               $cvsLog->userName,
               $cvsLog->dateTime,
               $cvsLog->ipAddress ) = $result[0];

        return $cvsLog; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCvsLog($filters)
    {
        $sql = 'SELECT A.cvsLogId,
                       A.tableName,
                       A.fieldName,
                       A.oldValue,
                       A.tablePkey,
                       A.tablePkeyValue
                 FROM basCvsLog A ';

        if ( strlen((string)$filters->cvsLogId) > 0 )
        {
            $where .= ' AND A.cvsLogId = ? ';
            $args[] = $filters->cvsLogId;
        }
        if ( strlen((string)$filters->tableName) > 0 )
        {
            $where .= ' AND A.tableName ILIKE ? ';
            $args[] = $filters->tableName.'%';
        }
        if ( strlen((string)$filters->fieldName) > 0 )
        {
            $where .= ' AND A.fieldName = ? ';
            $args[] = $filters->fieldName;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY A.tableName,
                           A.fieldName ';
            //$db = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCvsLog($data)
    {
        $sql = 'INSERT INTO basCvsLog
                            (tableName,
                             fieldName,
                             oldValue,
                             tablePkey,
                             tablePkeyValue)
                     VALUES (?,?,?,?,?) ';

        $args = array( $data->tableName,
                       $data->fieldName,
                       $data->oldValue,
                       $data->tablePkey,
                       $data->tablePkeyValue );

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCvsLog($data)
    {
    }

    /**
     * Delete a record
     *
     * @param $cvsLogId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCvsLog($cvsLogId)
    {
    }
}
?>
