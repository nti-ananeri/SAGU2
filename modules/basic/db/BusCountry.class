<?php
/**
 *
 * This file handles the connection and actions for basCountry table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessBasicBusCountry extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCountry()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT countryId,
                       name   
                  FROM basCountry   
              ORDER BY name';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }

    public function listNationality()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT countryId,
                       nationality
                  FROM basCountry   
              ORDER BY nationality';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $countryId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCountry($countryId)
    {
        $sql = 'SELECT countryId,
                       name,
                       nationality,
                       currency,
                       pluralCurrency,
                       decimalDescription,
                       pluralDecimalDescription,
                       currencySymbol,
                       inep,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM basCountry
                 WHERE countryId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $countryId));
        //$db->close();

        $country = new basCountry();
        list ( $country->countryId,
               $country->name,
               $country->nationality,
               $country->currency,
               $country->pluralCurrency,
               $country->decimalDescription,
               $country->pluralDecimalDescription,
               $country->currencySymbol,
               $country->inep,
               $country->userName,
               $country->dateTime,
               $country->ipAddress ) = $result[0];

        return $country; 
    }

    /**
     * Return a specific record from the database
     *
     * @param $countryId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCountryByCityId($cityId)
    {
        $sql = 'SELECT A.countryId,
                       A.name,
                       A.nationality,
                       A.currency,
                       A.pluralCurrency,
                       A.decimalDescription,
                       A.pluralDecimalDescription,
                       A.currencySymbol,
                       A.inep,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basCountry A
            INNER JOIN basState B
                    ON ( A.countryId = B.countryId )
            INNER JOIN basCity C
                    ON (     C.stateId = B.stateId
                         AND C.countryId = B.countryId )
                 WHERE C.cityId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $cityId));
        //$db->close();

        $country = new basCountry();
        list ( $country->countryId,
               $country->name,
               $country->nationality,
               $country->currency,
               $country->pluralCurrency,
               $country->decimalDescription,
               $country->pluralDecimalDescription,
               $country->currencySymbol,
               $country->inep,
               $country->userName,
               $country->dateTime,
               $country->ipAddress ) = $result[0];

        return $country; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCountry($filters)
    {
        $sql= 'SELECT countryId,
                      name,
                      nationality,
                      currency,
                      pluralCurrency,
                      decimalDescription,
                      pluralDecimalDescription,
                      currencySymbol,
                      inep
                 FROM basCountry ';

        if ( strlen((string)$filters->countryId) > 0 )
        {
            $where .= ' AND countryId = ? ';
            $args[] = $filters->countryId;
        }
        if ( strlen((string)$filters->name) > 0 )
        {
            $where .= ' AND TO_ASCII(name) ILIKE TO_ASCII(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen((string)$filters->nationality) > 0 )
        {
            $where .= ' AND TO_ASCII(nationality) ILIKE TO_ASCII(?) ';
            $args[] = $filters->nationality . '%';
        }
        if ( strlen((string)$filters->currency) > 0 )
        {
            $where .= ' AND currency ILIKE ? ';
            $args[] = $filters->currency . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY name';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCountry($data)
    {
        $sql = 'INSERT INTO basCountry
                            (name,
                             nationality,
                             currency,
                             pluralCurrency,
                             decimalDescription,
                             pluralDecimalDescription,
                             currencySymbol,
                             inep)
                     VALUES (?,?,?,?,?,?,?,?)';

        $args = array( $data->name,
                       $data->nationality,
                       $data->currency,
                       $data->pluralCurrency,
                       $data->decimalDescription,
                       $data->pluralDecimalDescription,
                       $data->currencySymbol,
                       $data->inep );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCountry($data)
    {
        $sql = 'UPDATE basCountry
                   SET name                     = ?,
                       nationality              = ?,
                       currency                 = ?,
                       pluralCurrency           = ?,
                       decimalDescription       = ?,
                       pluralDecimalDescription = ?,
                       currencySymbol           = ?,
                       inep                     = ?
                 WHERE countryId = ?';

        $args = array( $data->name,
                       $data->nationality,
                       $data->currency,
                       $data->pluralCurrency,
                       $data->decimalDescription,
                       $data->pluralDecimalDescription,
                       $data->currencySymbol,
                       $data->inep,
                       $data->countryId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $countryId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCountry($countryId)
    {
        $sql = 'DELETE FROM basCountry
                      WHERE countryId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $countryId));
        //$db->close();

        return $result;
    }

}

?>
