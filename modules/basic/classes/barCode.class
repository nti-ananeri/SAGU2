<?php

include_once("fpdf/fpdf16.php");

class barCode extends FPDF
{
    function i25($xpos, $ypos, $code, $basewidth=1, $height=10)
    {
        $wide = $basewidth;
        $narrow = $basewidth / 3 ;
    
        // wide/narrow codes for the digits
        $barChar['0'] = 'nnwwn';
        $barChar['1'] = 'wnnnw';
        $barChar['2'] = 'nwnnw';
        $barChar['3'] = 'wwnnn';
        $barChar['4'] = 'nnwnw';
        $barChar['5'] = 'wnwnn';
        $barChar['6'] = 'nwwnn';
        $barChar['7'] = 'nnnww';
        $barChar['8'] = 'wnnwn';
        $barChar['9'] = 'nwnwn';
        $barChar['A'] = 'nn';
        $barChar['Z'] = 'wn';
    
        // add leading zero if code-length is odd
        if(strlen((string)$code) % 2 != 0)
        {
            $code = '0' . $code;
        }
    
        //$this->SetFont('Arial','',10);
        //$this->Text($xpos, $ypos + $height + 4, $code);
        //$this->SetFillColor(0);
    
        // add start and stop codes
        $code = 'AA'.strtolower($code).'ZA';
    
        for($i=0; $i<strlen((string)$code); $i=$i+2)
        {
            // choose next pair of digits
            $charBar = $code{$i};
            $charSpace = $code{$i+1};
            // check whether it is a valid digit
            if(!isset($barChar[$charBar]))
            {
                $this->Error('Invalid character in barcode: '.$charBar);
            }
            if(!isset($barChar[$charSpace]))
            {
                $this->Error('Invalid character in barcode: '.$charSpace);
            }
            // create a wide/narrow-sequence (first digit=bars, second digit=spaces)
            $seq = '';
            for($s=0; $s<strlen((string)$barChar[$charBar]); $s++)
            {
                $seq .= $barChar[$charBar]{$s} . $barChar[$charSpace]{$s};
            }
            for($bar=0; $bar<strlen((string)$seq); $bar++)
            {
                // set lineWidth depending on value
                if($seq{$bar} == 'n')
                {
                    $lineWidth = $narrow;
                }
                else
                {
                    $lineWidth = $wide;
                }
                // draw every second value, because the second digit of the pair is represented by the spaces
                if($bar % 2 == 0)
                {
                    $this->Rect($xpos, $ypos, $lineWidth, $height, 'F');
                }
                $xpos += $lineWidth;
            }
        }
    }
    
    function codabar($xpos, $ypos, $code, $larguraBase=0.5, $altura=10)
    {
        //Relação dos números com o binário.
        //Padrão Codabar - Cbr
        $bar[0] = 'NnNnNwW';
        $bar[1] = 'NnNnWwN';
        $bar[2] = 'NnNwNnW';
        $bar[3] = 'WwNnNnN';
        $bar[4] = 'NnWnNwN';
        $bar[5] = 'WnNnNwN';
        $bar[6] = 'NwNnNnW';
        $bar[7] = 'NwNnWnN';
        $bar[8] = 'NwWnNnN';
        $bar[9] = 'WnNwNnN';
        $bar['-'] = 'NnNwWnN';
        $bar['$'] = 'NnWwNnN';
        $bar[':'] = 'WnNnWnW';
        $bar['/'] = 'WnWnNnW';
        $bar['.'] = 'WnWnWnN';
        $bar['+'] = 'NnWnWnW';
        $bar[A] = 'NnWwNwN';
        $bar[B] = 'NwNwNnW';
        $bar[C] = 'NnNwNwW';
        $bar[D] = 'NnNwWwN';
    
        $bin = $bar[A] . 'n';//o n adiciona um espaço entre os caractes
        //forma o código conforme tabela acima:
        for($p=0;$p<strlen((string)$code);$p++)
        {
            $bin = $bin . $bar[substr($code,$p,1)] . 'n';
        }
        //Fim do Código
        $bin = $bin . $bar[B];
    
        if ($bin)
        {
            for ($c=0;$c<strlen((string)$bin);$c++)
            {
                switch (substr($bin,$c,1))
                {
                    case 'W':
                        $largura = 3;
                        $barra = true;
                        break;
                    case 'N':
                        $largura = 1;
                        $barra = true;
                        break;
                    case 'w':
                        $largura = 3;
                        $barra = false;
                        break;
                    case 'n':
                        $largura = 1;
                        $barra = false;
                        break;
                }
    
                $largura *= $larguraBase;
                if ($barra)
                {
                    $this->Rect($xpos, $ypos, $largura, $altura, 'F');
                    $xpos += $largura;
                }
                else
                {
                    $xpos += $largura;
                }
            }
        }
    }
}

?>
