<?php
/**
 * Class to manipulate files
 *
 * @author William Prigol Lopes [william] [William Prigol Lopes]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/03/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
**/

/**
 * Class to manipulate files
 *
**/
class FileBusiness
{
    var $types;
    var $path;
    var $error;

   /**
    * Verify if upload has been executed
    * 
    * @param $field: FileField name
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
    function VerifyUpload($field)
    {
        global $_FILES;
        if ($_FILES['frm_'.$field]['error'] == 0)
        {
            return true;
        }   
        else
        {   
            return false;
        }       
    }
    
   /**
    * Save uploaded file to local file
    *
    * @param $field (string): FileField name 
    * @param $table (string): Table name to save on specific folder
    *
    * @return (varchar): path to file
    *
   **/
    function SaveFileToLocal($field, $table, $key)
    {
        global $_FILES, $MIOLO, $module;
        if (is_null($_FILES['frm_'.$field]))
        {   
            // No file uploaded
            $this->error = _M('No valid filefield supplied.', $module);
            return false;
        }
        else
        {
            $field = 'frm_'.$field;
        }
        // Generate the mimetypes
        if ($types = $this->generateValidMimeType())
        {
            // Analyse if the file equals to mimetype type
            if (!is_null(array_search($_FILES[$field]['type'], $types) ) )
            {
                // extract original extension (if exists)
                $ext = explode('.', $_FILES[$field]['name']);
                $ext = $ext[count($ext)-1];
                $ldirp = 'etc/images/'.$table;
                $ldir = $MIOLO->getModulePath($module, $ldirp);

                // if the table dir not exists, create it.
                if (!file_exists($ldir))
                {
                    mkdir($ldir);
                }
                // Verify the permissions
                if (is_readable($ldir) )
                {
                    // arbitrary size of extension (default 5)
//                  if (strlen((string)$ext)>5)
//                  {
//                      unset ($ext);
                        $lpath = $ldirp.'/'.$key;
//                  }
//                  else
//                  {
//                      $lpath = $ldirp.'/'.$key.'.'.$ext;
//                  }
                    
                    // Get the path to hold file
                    $path = $MIOLO->getModulePath($module, $lpath);
                    if (is_writable($ldir) )
                    {
                        if (!copy($_FILES[$field]['tmp_name'], $path) )
                        {
                            $this->error(_M('Failed to copy file', $module));
                            return false;
                        }
                        return true;
                    }
                    else
                    {
                        $this->error(_M('The directory is not writable', $module));
                        return false;
                    }
                }
                else
                {
                    $this->error(_M('No file to upload', $module));
                    return true;
                }

            }
            else
            {
                $this->error(_M('No valid mimetype for file', $module));
                return false;
            }
        }
        else
        {
            $this->error(_M('No mimetypes loaded, please load mimetypes', $module));
            return false;
        }
    }

   /**
    * Set the valid mimetype to upload 
    *
    * @param $type (varchar): Mimetype to include on list
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
    function ValidateType($type, $extension)
    {
        $this->types[] = array('type'=>$type, 'extension'=>$extension);
    }

   /**
    * generate a array of types to validate a mimetype
    * 
    * @param: No parameters needed (internal function)
    *
    * @return (array): Array with types on mimetype format;
   **/
    function generateValidMimeType()
    {
        if (is_array($this->types))
        {
            foreach ($this->types as $t)
            {
                $types[] = $t['type'].'/'.$t['extension'];
            }
            return $types;
        }
        return false;
    }

   /** 
    * delete a specific image
    *
    * @param: $table (varchar): Table name
    * @param: $key (int): Primary key
    *
    * @return (boolean): True if succed otherwise false
   **/
    function deleteFile($table, $key)
    {
        global $MIOLO, $module;
        $lpathp = 'etc/images/'.$table;
        $lpath = $MIOLO->getModulePath($module, $lpathp);
        if (is_writable($lpath))
        {
            $lfile = $MIOLO->getModulePath($module, $lpathp.'/'.$key);
            if (file_exists($lfile))
            {
                if (is_writable($lfile))
                {
                    if (unlink($lfile) )
                    {
                        return true;    
                    }
                    else
                    {
                        $this->error(_M('Problems on delete file @1', $module, $key) );
                        return false;
                    }
                }
            }
        }
        else
        {
            $this->error(_M('Directory of files not writable', $module));
            return false;
        }
    }

   /**
    * return the error
    *
    * @param: No parameters needed
    *
    * @return (string): Error message
   **/
    function getError()
    {
        return $this->error;
    }

}

?>
