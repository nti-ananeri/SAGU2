<?php
/**
 *
 * Holiday form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 01/02/2009
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to manipulate a holiday
 **/
class FrmVacationSearch extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Search', 'basic'));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnDelete');
        //$toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $fields[] = $toolBar;

        $personLabel = new MText('personLabel', _M('Employee','basic').':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Enter the employee code','basic'));
        $validators[] = new MIntegerValidator('personId', _M('Person','basic'));
        
        $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Person name','basic'));

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        $referenceYearLabel = new MText('referenceYearLabel',_M('Reference year',$module));
        $referenceYearLabel->setWidth(FIELD_CONTAINER_SIZE);

        $referenceYear       = new MTextField('referenceYear', $this->getFormValue('referenceYear', $data->referenceYear), null , 4);
        $referenceYear->setJsHint(_M('Enter the reference year',$module));
        $validators[] = new MRangeValidator('referenceYear', '', 1920 , 2019 , 'i');
        $hctReferenceYear     = new MHContainer('hctReferenceYear', array ( $referenceYearLabel, $referenceYear ) );
        $fields[] = $hctReferenceYear;
        
        $beginDateLabel = new MText('beginDateLabel',_M('Begin date','basic'));
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);

        $beginDate    = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate),'', FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date','basic'));
        
        $validators[] = new MDateDMYValidator('beginDate');
        
        $hctBeginDate = new MHContainer('hctBeginDate',array($beginDateLabel,$beginDate));
        $hctBeginDate->setShowLabel(false);
        $fields[] = $hctBeginDate;

        $endDateLabel = new MText('endDateLabel',_M('End date','basic'));
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);

        $endDate    = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate),'', FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        
        $validators[] = new MDateDMYValidator('endDate');
        
        $hctEndDate = new MHContainer('hctEndDate',array($endDateLabel,$endDate));
        $hctEndDate->setShowLabel(false);
        $fields[] = $hctEndDate;

        $fields[] = new Separator('');

        $fields[] = new MButton('btnSearch',_M('Search','basic'));
 
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        // get filters values
        $filters->personId      = $this->holidayDateS->value;
        $filters->personName    = $this->personName->value;
        $filters->referenceYear = $this->referenceYear->value;
        $filters->beginDate     = $this->beginDate->value;
        $filters->endDate       = $this->endDate->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdVacationSearch',$filters);
        $business = $this->manager->getBusiness($module,'BusVacation');
        $data = $business->searchVacation($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');

    }

    public function getTypesData()
    {
        $data = new PntVacation();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
