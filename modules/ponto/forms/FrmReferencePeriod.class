<?php
/**
 *
 * start form
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 01/02/2009
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to manipulate a period table
 **/
class FrmReferencePeriod extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', 'basic'));
        }
        else
        {
            parent::__construct(_M('Update', 'basic'));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $data->referencePeriodId        = MIOLO::_request('referencePeriodId', 'GET');
            $business = $MIOLO->getBusiness($module,'BusReferencePeriod');
            $data     = $business->getReferencePeriod($data);
            $referencePeriodLabel = new MText('referencePeriodLabel',_M('Reference period',$module));
            $referencePeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
            //$referenceYearLabel->setClass('m-caption m-caption-required');
            $referencePeriodId       = new MTextField('referencePeriodId', $data->referencePeriodId, null , 4);
            $referencePeriodId->setJsHint(_M('Enter the reference period code',$module));
            $validators[] = new MRangeValidator('referencePeriodId', '', 1 , 100 , 'i', 'required');
            $hctReferencePeriod     = new MHContainer('hctReferencePeriod', array ( $referencePeriodLabel, $referencePeriodId ) );
            $fields[] = $hctReferencePeriod;
            $referencePeriodId->setReadOnly(true);
        }
        
        $beginDateLabel = new MText('beginDateLabel',_M('Begin date','basic'));
        $beginDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $beginDateLabel->setClass('m-caption m-caption-required');

        $beginDate    = new MCalendarField('beginDate', $data->beginDate,'', FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date','basic'));
        
        $validators[] = new MDateDMYValidator('beginDate','','required');
        
        $hctBeginDate = new MHContainer('hctBeginDate',array($beginDateLabel,$beginDate));
        $hctBeginDate->setShowLabel(false);
        $fields[] = $hctBeginDate;

        $endDateLabel = new MText('endDateLabel',_M('End date','basic'));
        $endDateLabel->setWidth(FIELD_CONTAINER_SIZE);
        $endDateLabel->setClass('m-caption m-caption-required');

        $endDate    = new MCalendarField('endDate', $data->endDate,'', FIELD_DATE_SIZE);
        $endDate->setJsHint(_M('Enter the end date',$module));
        
        $validators[] = new MDateDMYValidator('endDate','','required');
        
        $hctEndDate = new MHContainer('hctEndDate',array($endDateLabel,$endDate));
        $hctEndDate->setShowLabel(false);
        $fields[] = $hctEndDate;

        $lastReferencePeriodLabel = new MText('lastReferencePeriodLabel',_M('Last reference period',$module));
        $lastReferencePeriodLabel->setWidth(FIELD_CONTAINER_SIZE);
        //$referenceYearLabel->setClass('m-caption m-caption-required');

        $lastReferencePeriodId       = new MTextField('lastReferencePeriodId', $data->lastReferencePeriodId, null , 4);
        $lastReferencePeriodId->setJsHint(_M('Enter the last reference period code',$module));
        $validators[] = new MRangeValidator('lastReferencePeriodId', '', 1 , 100 , 'i');
        $hctLastReferencePeriod     = new MHContainer('hctLastReferencePeriod', array ( $lastReferencePeriodLabel, $lastReferencePeriodId ) );
        $fields[] = $hctLastReferencePeriod;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( $function == 'insert' && !isset($_GET['event']) )
        {
            $this->page->onLoad('document.' . $this->name . '.referencePeriodId.focus();');
        }

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'personId'=>MIOLO::_request('personId'),
                        'referenceYear'=>MIOLO::_request('referenceYear'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusReferencePeriod');
        $data = $this->getTypesData();
        $ok = $business->deleteReferencePeriod($data);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusReferencePeriod');

        if ( $function == 'update' )
        {
            $ok  = $business->updateReferencePeriod($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertReferencePeriod($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('personId'=>$data->personId, 'referenceYear'=>$data->referenceYear);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new PntReferencePeriod();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
