<?php
/**
 *
 * This file handles the connection and actions for basHoliday table
 *
 * @author Giovani Murilo Dantas Corrêa [gmurilo@isolution.inf.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Daniel Afonso Heisler [daniel@isolution.inf.br]
 *
 * @since
 * Class created on 01/02/2009
 *
 * \b @organization \n
 * iSolution - Soluções em TI \n
 * The iSolution Development Team
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate Holidays
 **/
class BusinessPontoBusReferencePeriod extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $date (date): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getReferencePeriod($data)
    {
        $sql = 'SELECT A.referencePeriodId, 
                       TO_CHAR(A.beginDate,\''.MASK_DATE.'\'),
                       TO_CHAR(A.endDate,\''.MASK_DATE.'\'),
                       A.lastReferencePeriodId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM pntReferencePeriod A 
                 WHERE A.referencePeriodId = ? ';
        $args = array($data->referencePeriodId);
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        $referencePeriod  = new PntReferencePeriod();
        list (  $referencePeriod->referencePeriodId,
                $referencePeriod->beginDate,
                $referencePeriod->endDate,
                $referencePeriod->lastReferencePeriodId,
                $referencePeriod->userName,
                $referencePeriod->dateTime,
                $referencePeriod->ipAddress) = $result[0];

        return $referencePeriod; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchReferencePeriod($filters)
    {
        $sql = 'SELECT A.referencePeriodId,
                       TO_CHAR(A.beginDate,\''. MASK_DATE .'\'),
                       TO_CHAR(A.endDate,\''. MASK_DATE .'\'),
                       A.lastReferencePeriodId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM pntReferencePeriod A '; 

/*        if ( strlen((string)$filters->beginDate) > 0 && strlen((string)$filters->endDate) > 0 )
        {
            $where .= ' AND A.beginDate BETWEEN TO_DATE(?,\''.MASK_DATE.'\') AND TO_DATE(?, \''.MASK_DATE.'\')';
            $args[] = $filters->beginDate;
            $args[] = $filters->endDate;

        }*/
        if ( strlen((string)$filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\''.MASK_DATE.'\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen((string)$filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\''.MASK_DATE.'\')';
            $args[] = $filters->endDate;
        }

        if ( strlen((string)$filters->referencePeriodId) > 0 )
        {
            $where .= ' AND A.referencePeriodId = ? ';
            $args[] = $filters->referencePeriodId;
        }

        if ( strlen((string)$filters->lastReferencePeriodId) > 0 )
        {
            $where .= ' AND A.lastReferencePeriodId = ? ';
            $args[] = $filters->lastReferencePeriodId;
        }
        
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ';

            $db     = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql,$args));

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertReferencePeriod($data)
    {
        $db  = $this->getDatabase();



        $sql = 'INSERT INTO pntReferencePeriod
                            (beginDate,
                             endDate,
                             lastReferencePeriodId)
                     VALUES (TO_DATE(?,\''.MASK_DATE.'\'),
                             TO_DATE(?, \''.MASK_DATE.'\'),
                             ?)';

        $args = array(  $data->beginDate,
                        $data->endDate,
                        $data->lastReferencePeriodId );
  
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateReferencePeriod($data)
   {
        $sql = 'UPDATE pntReferencePeriod
                   SET beginDate  = TO_DATE(?, \'' . MASK_DATE . '\'),
                       endDate  = TO_DATE(?, \'' . MASK_DATE . '\'),
                       lastReferencePeriodId = ?
                 WHERE referencePeriodId    = ? ';

        $args = array(  $data->beginDate,
                        $data->endDate,
                        $data->lastReferencePeriodId,
                        $data->referencePeriodId);

        $db   = $this->getDatabase();
        $sql = SAGU::prepare($sql, $args);

        $result = $db->execute($sql);
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $holidayDate (date): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteReferencePeriod($data)
    {
        $sql = 'DELETE 
                    FROM pntReferencePeriod
                WHERE 
                    referencePeriodId = ?';
        $args[] = $data->referencePeriodId;

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

}

?>
