<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 31/03/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU Development Team
 *
 * \b Copyright \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluções Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html )
 *
 * \b History \n
 * See: http://sagu.solis.coop.br   
 *
 **/


class BusinessHumanResourcesBusOpeningAccountRemittance extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }


    /**
     * Get data about bank account
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getBankData($bankAccountId)
    {
           $sql = 'SELECT A.accountnumber,
                          A.accountnumberdigit,
                          A.branchNumber,
                          A.branchNumberDigit
                  FROM finBankAccount A
                INNER JOIN finBank B
                  USING(bankId)
               WHERE A.bankaccountid = ?';

           $args[] = $bankAccountId;

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result[0];
    }
    /**
     * Search employee
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmployee($employeeTypeId)
    {
        $sql = 'SELECT A.personId,
                       B.name,
                       C.description,
                       D.content,
                       E.content,
                       E.organ,
                       TO_CHAR(B.datebirth, \'' . MASK_DATE . '\'),
                       F.name,
                       G.name,
                       H.name,
                       B.location,
                       B.neighborhood,
                       B.zipCode,
                       B.cellPhone,
                       B.countryidbirth,
                       B.sex
                FROM basEmployee A
                INNER JOIN ONLY basPhysicalPersonEmployee B
                    USING(personId)
                LEFT JOIN basEmployeeType C
                    USING (employeeTypeId)
                LEFT JOIN basDocument D
                    USING (personId)
                LEFT JOIN basDocument E
                    USING (personId)
                LEFT JOIN basCity F
                    ON ( B.cityIdBirth = F.cityId )
                LEFT JOIN ONLY basPhysicalPerson G
                    ON ( B.motherId = G.personId )
                LEFT JOIN ONLY basPhysicalPerson H
                    ON ( B.fatherId = H.personId )';


        if ( strlen((string)$employeeTypeId) > 0 )
        {
            $where .= ' AND C.employeeTypeId IN (' . $employeeTypeId . ') ';
        }
        
        $where .= ' AND D.documentTypeId = ' . CPF_CODE;
        $where .= ' AND E.documentTypeId = ' . RG_CODE;
        
        $sql .= ' WHERE A.isActiveAccount = false' . $where . ' ORDER BY B.name';
        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Get data about default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCompanyData()
    {
	   $sql = 'SELECT B.cnpj,
                      B.currentName,
                      B.location,
                      B.neighborhood,
                      B.zipcode,
                      B.phone
                  FROM basCompanyConf A
                INNER JOIN ONLY basLegalPerson B
                      USING(personId)';

       $sql   .= ' WHERE  A.companyId = ?';

	   $args[] = DEFAULT_COMPANY_CONF;

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result[0];
    }
}

?>
