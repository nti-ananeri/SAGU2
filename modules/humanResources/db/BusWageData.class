<?php
/**
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU Development Team
 *
 * \b Copyright \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluções Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html )
 *
 * \b History \n
 * See: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessHumanResourcesBusWageData extends Business
{
    function BusinessHumanResourcesBusWageData()
    {
        $this->db = $this->getDatabase();
    }



    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'humanResources' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listWageData()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT A.employeeId,
                       B.name   
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                    ON ( A.employeeId = B.personId )
              ORDER BY B.name';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $employeeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getWageData($employeeId)
    {

        $sql = 'SELECT A.employeeId,
                       A.personId,
                       B.name,
                       A.externalId,
                       A.sectorId,
                       C.description,
                       A.salary,
                       A.valueHour,
                       A.weeklyhours,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.employeeTypeId,
                       D.description,
                       A.bankId,
                       E.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActiveAccount,
                       A.accountType,
                       A.clearingHouse,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN ONLY basSector C
                 USING (sectorId)
             LEFT JOIN basEmployeeType D
                    ON (A.employeeTypeId = D.employeeTypeId)
             LEFT JOIN finBank E
                    ON (A.bankId = E.bankId)
                 WHERE A.employeeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $employeeId));
        //$db->close();

        $employee = new basEmployee();
        list ( $employee->employeeId,
               $employee->personId,
               $employee->personName,
               $employee->externalId,
               $employee->sectorId,
               $employee->sectorDescription,
               $employee->salary,
               $employee->valueHour,
               $employee->weeklyhours,
               $employee->beginDate,
               $employee->endDate,
               $employee->employeeTypeId,
               $employee->description,
               $employee->bankId,
               $employee->description,
               $employee->branchNumber,
               $employee->branchNumberDigit,
               $employee->accountNumber,
               $employee->accountNumberDigit,
               $employee->isActiveAccount,
               $employee->accountType,
               $employee->clearingHouse,
               $employee->userName,
               $employee->dateTime,
               $employee->ipAddress ) = $result[0];

        return $employee; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchWageData($filters)
    {

        $sql = 'SELECT A.employeeId,
                       A.personId,
                       B.name,
                       A.externalId,
                       A.sectorId,
                       C.description,
                       A.salary,
                       A.valueHour,
                       A.weeklyhours,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       A.employeeTypeId,
                       D.description,
                       A.bankId,
                       E.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActiveAccount,
                       A.accountType,
                       A.clearingHouse,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN ONLY basSector C
                 USING (sectorId)
             LEFT JOIN basEmployeeType D
                    ON (A.employeeTypeId = D.employeeTypeId)
             LEFT JOIN finBank E
                    ON (A.bankId = E.bankId)';

        if ( strlen((string)$filters->employeeId) > 0 )
        {
            $where .= ' AND A.employeeId = ? ';
            $args[] = $filters->employeeId;
        }
        if ( strlen((string)$filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen((string)$filters->sectorId) > 0 )
        {
            $where .= ' AND A.sectorId = ? ';
            $args[] = $filters->sectorId;
        }
        if ( strlen((string)$filters->sectorName) > 0 )
        {
            $where .= ' AND C.description ILIKE ? ';
            $args[] = $filters->sectorName .'%';
        }
        if ( strlen((string)$filters->personName) > 0 )
        {
            $where .= ' AND B.name ILIKE ? ';
            $args[] = $filters->personName . '%';
        }

        //Acrescentar outros ANDs necessários.

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertWageData($data)
    {
        $sql = 'INSERT INTO basEmployee
                            (personId,
                             externalId,
                             sectorId,
                             salary,
                             valueHour,
                             weeklyhours,
                             beginDate,
                             endDate,
                             employeeTypeId,
                             bankId,
                             branchNumber,
                             branchNumberDigit,
                             accountNumber,
                             accountNumberDigit,
                             isActiveAccount,
                             accountType,
                             clearingHouse)

                     VALUES (?,?,?,?,?,?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,?,?,?,?,?,?,?,?)';

        $args = array( $data->personId,
                       $data->externalId,
                       $data->sectorId,
                       $data->salary,
                       $data->valueHour,
                       $data->weeklyhours,
                       $data->beginDate,
                       $data->endDate,
                       $data->employeeTypeId,
                       $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       $data->isActiveAccount,
                       $data->accountType,
                       $data->clearingHouse );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateWageData($data)
    {
        $sql = 'UPDATE basEmployee
                   SET personId           = ?,
                       salary             = ?,
                       beginDate          = TO_DATE(?, \'' . MASK_DATE . '\'),
                       endDate            = TO_DATE(?, \'' . MASK_DATE . '\'),
                       bankId             = ?,
                       branchNumber             = ?,
                       branchNumberDigit        = ?,
                       accountNumber      = ?,
                       accountNumberDigit = ?,
                       accountType        = ?,
                       clearingHouse      = ?
                 WHERE employeeId         = ?';

        $args = array( $data->personId,
                       $data->salary,
                       $data->beginDate,
                       $data->endDate,
                       $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       $data->accountType,
                       $data->clearingHouse,
                       $data->employeeId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $employeeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteWageData($employeeId)
    {
        $sql = 'DELETE FROM basEmployee
                      WHERE employeeId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $employeeId));
        //$db->close();

        return $result;
    }

}

?>
