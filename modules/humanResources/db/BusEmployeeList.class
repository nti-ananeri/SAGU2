<?php
/**
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 15/03/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU Development Team
 *
 * \b Copyright \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluções Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html )
 *
 * \b History \n
 * See: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessHumanResourcesBusEmployeeList extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmployee($employeeTypeId)
    {
        $sql = 'SELECT A.employeeId,
                       A.personId,
                       B.name,
                       A.branchNumber || \'-\' || A.branchNumberDigit,
                       A.accountNumber || \'-\' || A.accountNumberDigit,
                       round(A.salary,' . REAL_ROUND_VALUE . '),
		       D.content
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN basEmployeeType C
                    ON (A.employeeTypeId = C.employeeTypeId)
             LEFT JOIN basDocument D
                    ON (A.personId = D.personId)';

	$where = ' AND D.documentTypeId = ' . CPF_CODE;

        if ( strlen((string)$employeeTypeId) > 0 )
        {
            $where .= ' AND C.employeeTypeId IN (' . $employeeTypeId . ')';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name';
            $db     = $this->getDatabase();
            $result = $db->query($sql);
            //$db->close();
        }

        return $result;
    }

    public function searchEmployeeRemittance($employeeTypeId)
    {
        $sql = 'SELECT A.clearingHouse,
                       A.bankId,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       B.name,
                       A.personId,
                       round(round(A.salary,2)*100,0) as salary
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN basEmployeeType C
                    ON (A.employeeTypeId = C.employeeTypeId)';

        if ( strlen((string)$employeeTypeId) > 0 )
        {
            $where .= ' AND C.employeeTypeId IN (' . $employeeTypeId . ')';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name';
            $db     = $this->getDatabase();
            $result = $db->query($sql);
            //$db->close();
        }

        return $result;
    }

}

?>
