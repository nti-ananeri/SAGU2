<?php
/**
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 04/04/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU Development Team
 *
 * \b Copyright \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluções Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html )
 *
 * \b History \n
 * See: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessHumanResourcesBusProfessorCostCenter extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'basic' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Get data about bank account
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCostCenters($periodId)
    {
	   $sql = 'SELECT L.externalId,
	                  D.professorId,
	                  F.curricularComponentId,
	                  B.groupId,
	                  H.costCenterId,
                      count(A.contractId),
                      I.academicCredits
                FROM acdEnroll A INNER JOIN acdGroup B
                     ON (A.groupId = B.groupId)
                INNER JOIN acdSchedule C
                     ON (A.groupId = C.groupId)
                INNER JOIN acdScheduleProfessor D
                     ON (C.scheduleId = D.scheduleId)
                INNER JOIN ONLY basPhysicalPersonProfessor E
                     ON (D.professorId = E.personId)
                INNER JOIN acdCurriculum F 
                     ON (A.curriculumId = F.curriculumId)
                INNER JOIN acdContract G
                     ON (A.contractId = G.contractId)
                INNER JOIN accCourseAccount H
                     ON (G.courseId = H.courseId
                         AND G.courseVersion = H.courseVersion
                         AND G.unitId = H.unitId)
                INNER JOIN acdCurricularComponent I
                     ON (F.curricularComponentId = I.curricularComponentId
                         AND F.curricularComponentVersion = I.curricularComponentVersion)
                INNER JOIN acdLearningPeriod J
                     ON (B.learningPeriodId = J.learningPeriodId)
                LEFT JOIN basEmployee L
                     ON (E.personId = L.personId)
               WHERE J.periodId = ?
                AND A.dateCancellation is null
                AND (B.isCancellation = false
                     OR B.isCancellation is null)
               GROUP BY H.costCenterId,
                        D.professorId,
                        F.curricularComponentId,
                        B.groupId,
                        I.academicCredits,
                        L.externalId
               ORDER BY D.professorId,
                        B.groupId,
                        H.costCenterId,
                        F.curricularComponentId';

	   $args[] = $periodId;

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result;
    }

}

?>
