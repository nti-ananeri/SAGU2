<?php
/**
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 15/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU Development Team
 *
 * \b Copyright \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluções Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html )
 *
 * \b History \n
 * See: http://sagu.solis.coop.br   
 *
 **/

/**
 **/
class BusinessHumanResourcesBusDiverseConsultation extends Business
{
    function BusinessHumanResourcesBusDiverseConsultation()
    {
        $this->db = $this->getDatabase();
    }


    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'humanResources' : $module;

        return $MIOLO->getDatabase($module);
    }
    
    /**
     * Get the employee data
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getEmployeeData($filters)
    {
        $sql = 'SELECT A.employeeId,
                       (SELECT description FROM basEmployeeType WHERE employeeTypeId = A.employeeTypeId),
                       (SELECT description FROM ONLY basSector WHERE sectorId = A.sectorId),
                       TO_CHAR(A.beginDate, \'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate, \'' . MASK_DATE . '\'),
                       (SELECT description FROM finBank WHERE bankId = A.bankId),
                       A.branchNumber || \'-\' || A.branchNumberDigit,
                       A.accountNumber || \'-\' || A.accountNumberDigit,
                       A.accountType,
                       A.weeklyHours,
                       A.valueHour,
                       A.salary
                FROM basEmployee A
                WHERE personId = ?' ;
                                 
        if ( strlen((string)$filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the incentive data
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getIncentiveData($filters)
    {
        $sql = 'SELECT B.contractId,
                       TO_CHAR(C.startdate, \'' . MASK_DATE . '\'),
                       TO_CHAR(C.endDate, \'' . MASK_DATE . '\'),
                       C.value,
                       C.valueIsPercent,
                       C.agglutinate,
                       C.costCenterId,
                       (SELECT description FROM accCostCenter WHERE costCenterId = C.costCenterId),
                       (SELECT description FROM ONLY finIncentiveType WHERE incentiveTypeId = C.incentiveTypeId)
                FROM basEmployee A
                INNER JOIN acdContract B
                    USING(personId)
                INNER JOIN finIncentive C
                    USING(contractId)
                WHERE C.endDate > now()::date AND
                      personId = ?' ;
                                 
        if ( strlen((string)$filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen((string)$sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }


}

?>
