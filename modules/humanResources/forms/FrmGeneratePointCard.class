<?php
/**
 * Generate point card form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 16/08/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to employee list
 **/
class FrmGeneratePointCard extends MForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Generate point card', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Generate point card', $this->home, 'generatePointCard-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $professor = new MCheckBox('professor', 'P', '', true, _M('Professor', $module));
        $flds[]    = $professor;
        
        $employee  = new MCheckBox('employee',  'E', '', true, _M('Employee', $module));
        $flds[]    = $employee;

        $trainee   = new MCheckBox('trainee',   'T', '', true, _M('Trainee', $module));
        $flds[]    = $trainee;

        $bsg1            = new BaseGroup('bsg1', _M('Link type', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '100%';
        unset($flds);
        
        $personIdLabel = new MText('personIdLabel', _M('Employee ids, separated by comma (,)',$module) . ':');
        $personIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds1[]       = $personIdLabel;
        
        $personId = new MMultiLineField('personId', $this->getFormValue('personId',$data->personId), ' ', 20, 2, 30);
        $personId->setJsHint(_M('Enter the ids of people, seperateds by comma (,)',$module));
        $flds1[] = $personId;
        
        $hct1   = new MHContainer('hct1', $flds1);
        $hct1->showLabel = true;
        $flds[] = $hct1;

        $bsg2            = new BaseGroup('bsg2', _M('Specific person (optional)', $module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '100%';
        unset($flds, $flds1);
        
        $normal    = new MCheckBox('normal',     'N', '', true,  _M('Normal', $module));
        $flds[]    = $normal;
        
        $vacation  = new MCheckBox('vacation',   'V', '', true,  _M('Vacation', $module));
        $flds[]    = $vacation;

        $dismissed = new MCheckBox('dismissed',  'D', '', false, _M('Dismissed', $module));
        $flds[]    = $dismissed;
        
        $movedAway = new MCheckBox('movedAway',  'M', '', false, _M('Moved away', $module));
        $flds[]    = $movedAway;
        
        $contract  = new MCheckBox('contract',   'C', '', false, _M('With contract upper to', $module));
        $flds1[]   = $contract;
        
        $date      = new MCalendarField('date', $this->getFormValue('date',date(MASK_DATE_PHP)), '', FIELD_DATE_SIZE);
        $flds1[]   = $date;

        $hct2   = new MHContainer('hct2', $flds1);
        $hct2->showLabel = true;
        $flds[] = $hct2;
        
        $bsg3            = new BaseGroup('bsg3', _M('Situation', $module), $flds, 'vertical');
        $bsg3->showLabel = true;
        $bsg3->width     = '48%';
        unset($flds, $flds1, $flds2, $flds3, $hct1, $hct2, $hct3);

        $hct3   = new MVContainer('hct3', array($bsg1, $bsg2));
        $hct3->showLabel = true;
        $hct3->width     = '49%';
//        $flds[] = $hct1;

        $hct4           = new MHContainer('hct4', array($hct3, $bsg3));
        $hct4->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        $hct4->showLabel = true;
        $fields[] = $hct4;
        
        $fields[] = new MSeparator('');
        
        $btn1[]   = new MButton('btnGenerate', _M('Generate', $module));
        $div1     = new MDiv('div1', $btn1, null, 'align=center');
        $fields[] = $div1;
        
        $fields[] = new MSeparator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses Next from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filters = $this->getTypesData();
        
        if ( $this->checkValidators($filters) )
        {
            $business = $MIOLO->getBusiness($module, 'BusGeneratePointCard');

            $data1 = $business->getData($filters);
            
            if (count($data1) > 0 )
            {
                foreach( $data1 as $value )
                {
                    $fileContent[] = $value[0] . ',' . $value[1] . ',' . substr($value[1],0,strpos($value[1],' ')) . ', ' . $value[2] . ',';
                }

                $fileContent = implode($fileContent, chr(hexdec("\X0D\X0A")));
                $fileContent.= chr(hexdec("\X0D\X0A"));        
                
                SAGU::returnAsFile('employeecard-' . date(dmY) . '.txt', $fileContent, 'text/card-file');
            }
            else
            {
                $lblMsg1        = new MText('lblMsg1', _M('No data found', $module));
                $lblMsg1->color = 'red';
                $sep1           = new Separator('');
                $cntErrors      = new MVContainer('cntErrors', array($lblMsg1,$sep1));
                $this->divError->addControl($cntErrors);
            }
        }

    }

    /**
     * Event triggered when user click save or next button
     **/
    public function checkValidators($data)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        if ( strlen((string)$data->professorId) == 0 &&
             strlen((string)$data->employeeId) == 0 &&
             strlen((string)$data->traineeId) == 0
           )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Link type not defined', $module));
            $lblMsg1->color = 'red';
            $sep1           = new Separator('');
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1,$sep1));
            $this->divError->addControl($cntErrors);
            return false;
        }
        return true;
    }

    public function getTypesData()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filters->professorId = $this->getFormValue('professor');
        $filters->employeeId  = $this->getFormValue('employee');
        $filters->traineeId   = $this->getFormValue('trainee');
        $filters->normalId    = $this->getFormValue('normal');
        $filters->vacationId  = $this->getFormValue('vacation');
        $filters->dismissedId = $this->getFormValue('dismissed');
        $filters->movedAwayId = $this->getFormValue('movedAway');
        $filters->contractId  = $this->getFormValue('contract');
        $filters->date        = $this->getFormValue('date');
        $filters->personId    = $this->getFormvalue('personId');
        
        return $filters;
    }

}

?>
