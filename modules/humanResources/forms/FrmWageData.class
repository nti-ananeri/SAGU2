<?php

/**
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 14/03/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basEthnic Origin table
 */
class FrmWageData extends MForm
{
    private $location;
    /**
     * Class constructor
     */
    function __construct()
    {
    
        $module = MIOLO::getCurrentModule();
        
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( strlen((string)MIOLO::_request('location')) > 0 )
        {
            $this->location = MIOLO::_request('location');
        }

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnNew');
        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        $fields[] = $toolBar;
        
        $location_ = new MHiddenField('location_', $this->getFormValue('location_', $this->location));
        $fields[] = $location_;

        if ( in_array($function, array('update', 'delete')) )
        {
            $employeeId = MIOLO::_request('employeeId');

            $fields[]  = new MTextLabel('employeeId', $employeeId, _M('Employee id',$module));
            $fields[]  = new MHiddenField('employeeId', $this->getFormValue('employeeId', $employeeId));

            $business = $MIOLO->getBusiness($module, 'BusWageData');
            $data      = $business->getWageData($employeeId);
        }
        
        $personLabel = new MText('personLabel', _M('Person', $module) . ':');
        $personLabel->setWidth(FIELD_CONTAINER_SIZE);
        $personLabel->setClass('m-caption m-caption-required');
        $flds[] = $personLabel;

        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), _M('Person',$module), FIELD_LOOKUPFIELD_SIZE, null, null, 'personName', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $personId->setJsHint(_M('Enter the person code',$module));
        $validators[] = new MIntegerValidator('personId', '', 'required');
        $flds[]         = $personId;

        $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), _M('Name',$module), FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $flds[]         = $personName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);
        
        $clearingHouse   = new MTextField('clearingHouse', $this->getFormValue('clearingHouse', $data->clearingHouse), _M('Clearing house',$module), FIELD_ID_SIZE);
        $fields[]       = $clearingHouse;

        $bankLabel = new MText('bankLabel', _M('Bank', $module) . ':');
        $bankLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $bankLabel;
                
        $bankId     = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'bankDescription', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Enter the bank code',$module));
        $validators[] = new MRangeValidator('bankId', _M('Bank id', $module), '001', '999', 'i', 'optional');
        $flds[]     = $bankId;
        
        $bankDescription = new MTextField('bankDescription', $this->getFormValue('bankDescription',$data->bankDescription), '', FIELD_DESCRIPTION_SIZE);
        $bankDescription->setReadOnly(true);
        $flds[]         = $bankDescription;

        $hctBank = new MHContainer('hctBank', $flds);
        $hctBank->setShowLabel(false);
        $fields[]  = $hctBank;
        unset($flds);
        
        $branchNumberLabel = new MText('branchNumberLabel', _M('Branch', $module) . ':');
        $branchNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $branchNumberLabel;
        
        $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber',$data->branchNumber), '', FIELD_ID_SIZE);
        $validators[] = new MRangeValidator('branchNumber', _M('Branch number', $module), '1', '9999', 'i', 'optional');
        $flds[]  = $branchNumber;
        
        $branchNumberDigitLabel = new MText('branchNumberDigitLabel', ' - ');
        $flds[] = $branchNumberDigitLabel;
        
        $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), '', 1);
        $validators[] = new MRangeValidator('branchNumberDigit', _M('Branch number', $module), '0', '99', 'i', 'optional');
        $flds[]  = $branchNumberDigit;
        
        $hctBranch = new MHContainer('hctBranch', $flds);
        $fields[]  = $hctBranch;
        unset($flds);
        
        $accountLabel = new MText('accountLabel', _M('Account', $module) . ':');
        $accountLabel->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $accountLabel;
        
        $accountNumber = new MTextField('accountNumber', $this->getFormValue('accountNumber',$data->accountNumber), '', FIELD_ID_SIZE);
        $validators[] = new MRangeValidator('accountNumber', _M('Account number', $module), '1', '9999999999999', 'i', 'optional');
        $flds[]  = $accountNumber;
        
        $accountDigitLabel = new MText('accountDigitLabel', ' - ');
        $flds[] = $accountDigitLabel;
        
        $accountNumberDigit = new MTextField('accountNumberDigit', $this->getFormValue('accountNumberDigit',$data->accountNumberDigit), '', 1);
        $validators[] = new MRangeValidator('accountNumberDigit', _M('Account number', $module), 0, 'zz', 's', 'optional');
        $flds[]  = $accountNumberDigit;
        
        $hctAccount = new MHContainer('hctAccount', $flds);
        $fields[]  = $hctAccount;
        unset($flds);

        $accountType =  new MSelection('accountType', $this->getFormValue('accountType', $data->accountType), _M('Account type',$module), SAGU::listAccountTypes());
        $fields[]       = $accountType;
        
//        $externalId   = new MTextField('externalId', $this->getFormValue('externalId', $data->externalId), _M('External id',$module), FIELD_ID_SIZE);
//        $fields[]       = $externalId;
        
        $salary   = new MTextField('salary', $this->getFormValue('salary', $data->salary), _M('Salary',$module), FIELD_MONETARY_SIZE);
        $validators[] =   new MFloatValidator('salary', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE);
        $fields[]       = $salary;
        
        if ( $function == 'insert' )
        {
            $data->beginDate = date(MASK_DATE_PHP);
        }

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), _M('Begin date',$module), FIELD_DATE_SIZE);
        $fields[]       = $beginDate;
        
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), _M('End date',$module), FIELD_DATE_SIZE);
        $fields[]       = $endDate;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[] = new MSeparator(' ');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personId.focus();');

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            =>'tbBtnDelete_confirm',
                          'function'         =>'delete',
                          'employeeId' =>MIOLO::_request('employeeId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $employeeId = MIOLO::_request('employeeId');

        $business = $MIOLO->getBusiness($module, 'BusWageData');
        $ok = $business->deleteWageData($employeeId);

        if ( $ok )
        {
            $msg  = MSG_RECORD_DELETED;
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusWageData');

        if ( $function == 'update' )
        {
            $ok  = $business->updateWageData($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertWageData($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('employeeIdS'=>$data->employeeId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);


            if ( $this->getFormValue('location_') == 'employeeList' )
            {
                $goto = $MIOLO->getActionURL( $module, 'main:report:employeeList', null, array('event'=>'btnFilter_click'));
            }             

            if ( $this->getFormValue('location_') == 'diverseConsultation' )
            {
                $goto = $MIOLO->getActionURL( $module, 'main', null, null);
            }             


            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new hrsEmployee();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
