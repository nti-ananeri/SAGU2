<?php
/**
 *
 * This file handles the connection and actions for insPhysicalResource table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the insPhysicalResource table
 **/
class BusinessInstitutionalBusPhysicalResource extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'institutional' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalResource()
    {
        $sql = 'SELECT room || \'/\' || building, 
                       description
                  FROM insPhysicalResource 
              ORDER BY building, room';

        $db = $this->getDatabase();
        $result = $db->query($sql);
        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $physicalResourceId (integer): Primary key of the record to be retrieved
     * @param $physicalResourceVersion (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalResource($physicalResourceId, $physicalResourceVersion)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       TO_CHAR(A.dateVersion,\'' . MASK_DATE . '\'),
                       A.description,
                       A.unitId,
                       A.room,
                       A.building,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaType,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.coord)
             LEFT JOIN insGroupType C
                    ON (C.groupTypeId = A.groupTypeId)
                 WHERE A.physicalResourceId = ?
                   AND A.physicalResourceVersion = ?';

        $args = array(
                       $physicalResourceId,
                       $physicalResourceVersion
                     );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $physicalResource = new InsPhysicalResource();

        list (
               $physicalResource->physicalResourceId,
               $physicalResource->physicalResourceVersion,
               $physicalResource->dateVersion,
               $physicalResource->description,
               $physicalResource->unitId,
               $physicalResource->room,
               $physicalResource->building,
               $physicalResource->coord,
               $physicalResource->coordName,
               $physicalResource->areaM2,
               $physicalResource->areaType,
               $physicalResource->costCenter,
               $physicalResource->groupTypeId,
               $physicalResource->groupTypeDescription,
               $physicalResource->userName,
               $physicalResource->dateTime,
               $physicalResource->ipAddress
             ) = $result[0];

        return $physicalResource; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalResource($filters)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       TO_CHAR(A.dateVersion,\'' . MASK_DATE . '\'),
                       A.description,
                       A.unitId,
                       D.description AS unitDescription,
                       A.room,
                       A.building,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaType,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.coord)
             LEFT JOIN insGroupType C
                    ON (C.groupTypeId = A.groupTypeId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)';

        if ( strlen((string)$filters->physicalResourceId) > 0 )
        {
            $where .= ' AND A.physicalResourceId = ?';
            $args[] = $filters->physicalResourceId;
        }
        if ( strlen((string)$filters->physicalResourceVersion) > 0 )
        {
            $where .= ' AND A.physicalResourceVersion = ?';
            $args[] = $filters->physicalResourceVersion;
        }
        if ( strlen((string)$filters->dateVersion) > 0 )
        {
            $where .= ' AND A.dateVersion = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $filters->dateVersion;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->description . '%';
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->room) > 0 )
        {
            $where .= ' AND A.room ILIKE ?';
            $args[] = $filters->room . '%';
        }
        if ( strlen((string)$filters->building) > 0 )
        {
            $where .= ' AND A.building ILIKE ?';
            $args[] = $filters->building . '%';
        }
        if ( strlen((string)$filters->coord) > 0 )
        {
            $where .= ' AND A.coord = ?';
            $args[] = $filters->coord;
        }
        if ( strlen((string)$filters->coordName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $filters->coordName . '%';
        }
        if ( strlen((string)$filters->areaM2) > 0 )
        {
            $where .= ' AND A.areaM2 = ?';
            $args[] = $filters->areaM2;
        }
        if ( strlen((string)$filters->areaType) > 0 )
        {
            $where .= ' AND A.areaType = ?';
            $args[] = $filters->areaType;
        }
        if ( strlen((string)$filters->costCenter) > 0 )
        {
            $where .= ' AND A.costCenter = ?';
            $args[] = $filters->costCenter;
        }
        if ( strlen((string)$filters->groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ?';
            $args[] = $filters->groupTypeId;
        }
        if ( strlen((string)$filters->groupTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->groupTypeDescription . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalResource($data)
    {
        $sql = 'INSERT INTO insPhysicalResource
                            (physicalResourceVersion,
                             dateVersion,
                             description,
                             unitId,
                             room,
                             building,
                             coord,
                             areaM2,
                             areaType,
                             costCenter,
                             groupTypeId)
                     VALUES (?,
                             TO_DATE(?,\'' . MASK_DATE . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->physicalResourceVersion,
                       $data->dateVersion,
                       $data->description,
                       $data->unitId,
                       $data->room,
                       $data->building,
                       $data->coord,
                       $data->areaM2,
                       $data->areaType,
                       $data->costCenter,
                       $data->groupTypeId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalResource($data)
    {
        $sql = 'UPDATE insPhysicalResource
                   SET dateVersion             = TO_DATE(?,\'' . MASK_DATE . '\'),
                       description             = ?,
                       unitId                  = ?,
                       room                    = ?,
                       building                = ?,
                       coord                   = ?,
                       areaM2                  = ?,
                       areaType                = ?,
                       costCenter              = ?,
                       groupTypeId             = ?
                 WHERE physicalResourceId      = ?
                   AND physicalResourceVersion = ?';

        $args = array( 
                       $data->dateVersion,
                       $data->description,
                       $data->unitId,
                       $data->room,
                       $data->building,
                       $data->coord,
                       $data->areaM2,
                       $data->areaType,
                       $data->costCenter,
                       $data->groupTypeId,
                       $data->physicalResourceId,
                       $data->physicalResourceVersion
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $physicalResourceId (string): Primary key for deletion
     * @param $physicalResourceVersion (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalResource($physicalResourceId, $physicalResourceVersion)
    {
        $sql = 'DELETE FROM insPhysicalResource
                      WHERE physicalResourceId      = ?
                        AND physicalResourceVersion = ?';

        $args = array(
                       $physicalResourceId,
                       $physicalResourceVersion
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

}

?>
