<?php
/**
 *
 * This file manipulate the lookups for the institutional module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

$constants = $business->getModuleValues('institutional');
if ( count($constants)>0 )
{
    foreach ( $constants as $cnt )
    {
        define($cnt[0],$cnt[1]);
    }
}

/**
 * Class to manipulate the Lookups
 **/
class BusinessInstitutionalLookup
{
    /**
     * Auto complete for material
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteMaterial(&$context)
    {
        $sql = 'SELECT description
                  FROM insMaterial
                 WHERE materialId = ?';

        $context->setContext('institutional', $sql);
    }

    /**
     * Lookup for material
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupMaterial(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $materialId  = $lookup->getFilterValue('materialId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('materialId',  $materialId,  _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Material',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('materialId',  _M('Code', $module),     'right', true, null, true),
           new DataGridColumn('description', _M('Material', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.materialId,
                       A.description
                  FROM insMaterial A';

        if ( strlen((string)$materialId) > 0 )
        {
            $where .= ' AND A.materialId = ? ';
            $args[] = $materialId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?) ';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Material search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for group type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteGroupType(&$context)
    {
        $sql = 'SELECT description
                  FROM insGroupType
                 WHERE groupTypeId = ?';

        $context->setContext('institutional', $sql);
    }

    /**
     * Lookup for group type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupGroupType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $groupTypeId = $lookup->getFilterValue('groupTypeId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('groupTypeId', $groupTypeId, _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Group type',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('groupTypeId', _M('Code', $module),       'right', true, null, true),
           new DataGridColumn('description', _M('Group type', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.groupTypeId,
                       A.description
                  FROM insGroupType A';

        if ( strlen((string)$groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ? ';
            $args[] = $groupTypeId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?) ';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Group type search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for physical resource
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePhysicalResource(&$context)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       A.description,
                       A.room,
                       A.building,
                       TO_CHAR(A.dateVersion,\'' . MASK_DATE . '\') as dateVersion,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaType,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId ),
                       (  SELECT physicalResourceId,
                                 MAX(physicalResourceVersion) AS physicalResourceVersion
                            FROM insPhysicalResource
                           WHERE physicalResourceId = ?
                        GROUP BY physicalResourceId ) D
                 WHERE A.physicalResourceId = D.physicalResourceId
                   AND A.physicalResourceVersion = D.physicalResourceVersion';

        $context->setContext('institutional', $sql);
    }

    /**
     * Lookup for physical resource
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPhysicalResource(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $physicalResourceId      = $lookup->getFilterValue('physicalResourceId');
        $physicalResourceVersion = $lookup->getFilterValue('physicalResourceVersion');
        $dateVersion             = $lookup->getFilterValue('dateVersion');
        $description             = $lookup->getFilterValue('description');
        $room                    = $lookup->getFilterValue('room');
        $building                = $lookup->getFilterValue('building');
        $groupTypeId             = $lookup->getFilterValue('groupTypeId');

        $lookup->addFilterField( new MTextField('physicalResourceId',  $physicalResourceId, _M('Physical resource id', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('physicalResourceVersion', $physicalResourceVersion, _M('Physical resource version', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('dateVersion', $dateVersion, _M('Date version', $module),  FIELD_DATE_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Description', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('room', $room, _M('Room', $module),          FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('building', $building, _M('Building', $module), FIELD_ID_LOOKUP_SIZE) );

        $business = $MIOLO->getBusiness('institutional', 'BusGroupType');
        $lookup->addFilterField( new MComboBox('groupTypeId', $groupTypeId, _M('Group type', $module), $business->listGroupType() ) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('physicalResourceId',      _M('Physical resource id', $module),      'right', true, null, true),
           new DataGridColumn('physicalResourceVersion', _M('Physical resource version', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Description', $module),   'left',  true, null, true),
           new DataGridColumn('room',        _M('Room', $module),          'left',  true, null, true),
           new DataGridColumn('building',    _M('Building', $module),      'left',  true, null, true),
           new DataGridColumn('dateVersion', _M('Date version', $module),  'left',  true, null, true),
           new DataGridColumn('coord',       _M('Coord', $module),         'right', true, null, false),
           new DataGridColumn('coordName',   _M('Coord', $module),         'left',  true, null, true),
           new DataGridColumn('areaM2',      _M('Area', $module),          'right', true, null, true),
           new DataGridColumn('areaType',    _M('Area type', $module),     'left',  true, null, true),
           new DataGridColumn('costCenter',  _M('Cost center', $module),   'right', true, null, true),
           new DataGridColumn('groupTypeId', _M('Group type id', $module), 'right', true, null, false),
           new DataGridColumn('groupTypeDescription', _M('Group type', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       A.description,
                       A.room,
                       A.building,
                       TO_CHAR(A.dateVersion,\'' . MASK_DATE . '\') as dateVersion,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaType,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId )';

        if ( strlen((string)$physicalResourceId) > 0 )
        {
            $where .= ' AND A.physicalResourceId = ?';
            $args[] = $physicalResourceId;
        }

        if ( strlen((string)$physicalResourceVersion) > 0 )
        {
            $where .= ' AND A.physicalResourceVersion = ?';
            $args[] = $physicalResourceVersion;
        }

        if ( strlen((string)$dateVersion) > 0 )
        {
            $where .= ' AND A.dateVersion = TO_DATE(?,\'' . MASK_DATE . '\')';
            $args[] = $dateVersion;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND TO_ASCII(A.description) ILIKE TO_ASCII(?)';
            $args[] = $description . '%';
        }

        if ( strlen((string)$room) > 0 )
        {
            $where .= ' AND A.room ILIKE ?';
            $args[] = $room . '%';
        }

        if ( strlen((string)$building) > 0 )
        {
            $where .= ' AND A.building ILIKE ?';
            $args[] = $building . '%';
        }

        if ( strlen((string)$coord) > 0 )
        {
            $where .= ' AND A.coord = ?';
            $args[] = $coord;
        }

        if ( strlen((string)$coordName) > 0 )
        {
            $where .= ' AND TO_ASCII(B.name) ILIKE TO_ASCII(?)';
            $args[] = $coordName . '%';
        }

        if ( strlen((string)$areaM2) > 0 )
        {
            $where .= ' AND A.areaM2 = ?';
            $args[] = $areaM2;
        }

        if ( strlen((string)$areaType) > 0 )
        {
            $where .= ' AND A.areaType = ?';
            $args[] = $areaType;
        }

        if ( strlen((string)$costCenter) > 0 )
        {
            $where .= ' AND A.costCenter = ?';
            $args[] = $costCenter;
        }

        if ( strlen((string)$groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ?';
            $args[] = $groupTypeId;
        }

        if ( strlen((string)$groupTypeDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(C.description) ILIKE TO_ASCII(?)';
            $args[] = $groupTypeDescription . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Physical resource search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

}
