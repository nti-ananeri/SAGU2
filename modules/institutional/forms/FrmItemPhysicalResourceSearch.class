<?php

/**
 *
 * This file handles the connection and actions for acdItemPhysicalResource table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdItemPhysicalResource table
 */
class FrmItemPhysicalResourceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'institutional';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Item physical resource', $this->home, 'itemPhysicalResource-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;


        $physicalResourceLabelS = new MText('physicalResourceLabelS', _M('Physical resource id',$module) . ':');
        $physicalResourceLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $physicalResourceIdS = new MLookupTextField('physicalResourceIdS', $this->getFormValue('physicalResourceIdS', $data->physicalResourceIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'physicalResourceIdS, physicalResourceVersionS, physicalResourceDescriptionS, roomS, buildingS', $module, 'PhysicalResource', null, null, true);
        $physicalResourceIdS->setJsHint(_M('Enter the physical resource id',$module));
        $validators[] = new MIntegerValidator('physicalResourceIdS', '', 'optional');

        $physicalResourceVersionS = new MTextField('physicalResourceVersionS', $this->getFormValue('physicalResourceVersionS', $data->physicalResourceVersionS), '', 10);
        $physicalResourceVersionS->setJsHint(_M('Physical resource version',$module));
        $physicalResourceVersionS->setReadOnly(true);

        $physicalResourceDescriptionS = new MTextField('physicalResourceDescriptionS', $this->getFormValue('physicalResourceDescriptionS', $data->physicalResourceDescriptionS), '', 10);
        $physicalResourceDescriptionS->setJsHint(_M('Physical resource description',$module));
        $physicalResourceDescriptionS->setReadOnly(true);

        $roomS    = new MTextField('roomS', $this->getFormValue('roomS', $data->roomS), '', 10);
        $roomS->setJsHint(_M('Room',$module));
        $roomS->setReadOnly(true);

        $buildingS = new MTextField('buildingS', $this->getFormValue('buildingS', $data->buildingS),'', 10);
        $buildingS->setJsHint(_M('Building',$module));
        $buildingS->setReadOnly(true);

        $hctPhysicalResourceS = new MHContainer('hctPhysicalResourceS', array($physicalResourceLabelS, $physicalResourceIdS, $physicalResourceVersionS, $physicalResourceDescriptionS, $roomS, $buildingS));
        $fields[]   = $hctPhysicalResourceS;

        $materialLabelS = new MText('materialLabelS', _M('Material id',$module) . ':');
        $materialLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $materialIdS = new MLookupTextField('materialIdS', $this->getFormValue('materialIdS', $data->materialIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'materialDescriptionS', $module, 'Material', null, null, true);
        $materialIdS->setJsHint(_M('Enter the material id',$module));
        //$fields[]    = $materialIdS;
        $validators[] = new MIntegerValidator('materialIdS', '', 'optional');

        $materialDescriptionS = new MTextField('materialDescriptionS', $this->getFormValue('materialDescriptionS', $data->materialDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        //$materialDescriptionS->setReadOnly(true);
        $materialDescriptionS->setJsHint(_M('Enter the material description', $module));

        $hctMaterialS = new MHContainer('hctMaterialS', array($materialLabelS, $materialIdS, $materialDescriptionS));
        $fields[]   = $hctMaterialS;


        $quantityS = new MTextField('quantityS', $this->quantityS->value, _M('Quantity',$module), 10);
        $quantityS->setJsHint(_M('Enter the quantity',$module));
        $fields[]  = $quantityS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->physicalResourceId      = $this->physicalResourceIdS->value;
        $filters->physicalResourceVersion = $this->physicalResourceVersionS->value;
        $filters->materialId              = $this->materialIdS->value;
        $filters->materialDescription     = $this->materialDescriptionS->value;
        $filters->quantity                = $this->quantityS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdItemPhysicalResourceSearch',$filters);
        $business   = $MIOLO->getBusiness($module,'BusItemPhysicalResource');
        $data       = $business->searchItemPhysicalResource($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.physicalResourceIdS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
