<?php

/**
 * Form to manipulate insPhysicalResource table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmPhysicalResource extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $physicalResourceId = $_GET['physicalResourceId'] ? $_GET['physicalResourceId'] : $_POST['physicalResourceId'];
            $fields[] = new MTextLabel('physicalResourceId', $physicalResourceId, _M('Physical resource id',$module));
            $fields[] = new MHiddenField('physicalResourceId', $physicalResourceId);

            $physicalResourceVersion = $_GET['physicalResourceVersion'] ? $_GET['physicalResourceVersion'] : $_POST['physicalResourceVersion'];
            $fields[] = new MTextLabel('physicalResourceVersion', $physicalResourceVersion, _M('Physical resource version',$module));
            $fields[] = new MHiddenField('physicalResourceVersion', $physicalResourceVersion);

            $business = $MIOLO->getBusiness($module,'BusPhysicalResource');
            $data = $business->getPhysicalResource($physicalResourceId, $physicalResourceVersion);

            $this->page->onLoad('document.' . $this->name . '.description.focus();');
        }
        else
        {
            $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), _M('Physical resource version',$module), 10);
            $physicalResourceVersion->setJsHint(_M('Enter the physical resource version', $module));
            $fields[] = $physicalResourceVersion;
            $validators[] = new MIntegerValidator('physicalResourceVersion', '', 'required');

            $this->page->onLoad('document.' . $this->name . '.physicalResourceVersion.focus();');
        }

        $dateVersion = new MCalendarField('dateVersion', $this->getFormValue('dateVersion', $data->dateVersion), _M('Date version',$module), FIELD_DATE_SIZE);
        $dateVersion->setJsHint(_M('Enter the date version', $module));
        $dateVersion->setValidator( new MDateDMYValidator('dateVersion', '', 'required') );
        $fields[] = $dateVersion;

        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the description', $module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unit id',$module), $business->listUnit());
        $unitId->setJsHint(_M('Enter the unit code',$module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[]     = $unitId;

        $room = new MTextField('room', $this->getFormValue('room', $data->room), _M('Room',$module), 10);
        $room->setJsHint(_M('Enter the room', $module));
        $fields[] = $room;
        $validators[] = new MRequiredValidator('room', _M('Room', $module), 'required');

        $building = new MTextField('building', $this->getFormValue('building', $data->building), _M('Building',$module), 10);
        $building->setJsHint(_M('Enter the building', $module));
        $fields[] = $building;
        $validators[] = new MRequiredValidator('building', _M('Building', $module), 'required');

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $coorLabel = new MText('coorLabel', _M('Coordinator',$module) . ':');
        $coorLabel->setWidth(FIELD_CONTAINER_SIZE);

        $coordId = new MLookupTextField('coordId', $this->getFormValue('coordId2', $data->coord), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'coordName', 'basic', 'PhysicalPersonEmployeeAndProfessor', null, null, true);
        $coordId->setJsHint(_M('Enter the coord id',$module));
        $validators[] = new MIntegerValidator('coordId', '', 'optional');

        $coordName = new MTextField('coordName', $this->coordName->value, '', FIELD_DESCRIPTION_SIZE);
        $coordName->setJsHint(_M('Enter the coord name',$module));
        $coordName->setReadOnly(true);

        $hctCoor = new MHContainer('hctCoor', array($coorLabel, $coordId, $coordName));
        $fields[]   = $hctCoor;

        $areaM2 = new MTextField('areaM2', $this->getFormValue('areaM2', $data->areaM2), _M('Area',$module), 10, 'm<sup>2</sup>');
        $areaM2->setJsHint(_M('Enter the area', $module));
        $fields[] = $areaM2;
        $validators[] = new MIntegerValidator('areaM2', '', 'optional');

        $areaType = new MSelection('areaType', $this->getFormValue('areaType', $data->areaType), _M('Area type',$module), INSTITUTIONAL::getAreaTypes());
        $areaType->setJsHint(_M('Enter the area type', $module));
        $fields[] = $areaType;

        if ( MODULE_ACCOUNTANCY_INSTALLED == 'YES' )
        {
            $costCenterLabel = new MText('costCenterLabel', _M('Cost center',$module) . ':');
            $costCenterLabel->setWidth(FIELD_CONTAINER_SIZE);

            $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenter), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
            $costCenterId ->setJsHint(_M('Enter the cost center id',$module));

            $costCenterDescription = new MTextField('costCenterDescription', $this->costCenterDescription->value, '', FIELD_DESCRIPTION_SIZE);
            $costCenterDescription->setJsHint(_M('Cost center',$module));
            $costCenterDescription->setReadOnly(true);

            $hctcostCenter = new MHContainer('hctcostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
            $fields[]      = $hctcostCenter;
        }

        $groupTypeLabel = new MText('groupTypeLabel', _M('Group type id',$module) . ':');
        $groupTypeLabel->setWidth(FIELD_CONTAINER_SIZE);
        $groupTypeLabel->setClass('m-caption m-caption-required');

        $groupTypeId = new MLookupTextField('groupTypeId', $this->getFormValue('groupTypeId',$data->groupTypeId), '', FIELD_ID_SIZE, null, null, 'groupTypeDescription', $module, 'GroupType', null, null, true);
        $groupTypeId->setJsHint(_M('Enter the group type id',$module));
        $validators[] = new MIntegerValidator('groupTypeId', _M('Group type id',$module), 'required');

        $groupTypeDescription = new MTextField('groupTypeDescription', $this->groupTypeDescription->value, '', FIELD_DESCRIPTION_SIZE);
        $groupTypeDescription->setJsHint(_M('Enter the group type description',$module));
        $groupTypeDescription->setReadOnly(true);

        $hctGroupType = new MHContainer('hctGroupType', array($groupTypeLabel, $groupTypeId, $groupTypeDescription));
        $fields[]      = $hctGroupType;


        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        /*
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $this->$var->value = $this->getFormValue($var . 'S','');
        }
        */
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'physicalResourceId'      => MIOLO::_request('physicalResourceId'),
                        'physicalResourceVersion' => MIOLO::_request('physicalResourceVersion'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('physicalResourceIdS'      => MIOLO::_request('physicalResourceId'),
                        'physicalResourceVersionS' => MIOLO::_request('physicalResourceVersion'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, NULL, $opts);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPhysicalResource');
        $ok = $business->deletePhysicalResource($this->physicalResourceId->value, $this->physicalResourceVersion->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPhysicalResource');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePhysicalResource($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertPhysicalResource($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('physicalResourceIdS' => $data->physicalResourceId,
                          'physicalResourceVersionS' => $data->physicalResourceVersion);

            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new InsPhysicalResource();
        $data->physicalResourceId      = $this->physicalResourceId->value;
        $data->physicalResourceVersion = $this->physicalResourceVersion->value;
        $data->dateVersion             = $this->dateVersion->value;
        $data->description             = $this->description->value;
        $data->unitId                  = $this->unitId->value;
        $data->room                    = $this->room->value;
        $data->building                = $this->building->value;
        $data->coord                   = $this->coordId->value;
        $data->areaM2                  = $this->areaM2->value;
        $data->areaType                = $this->areaType->value;
        $data->costCenter              = $this->costCenterId->value;
        $data->groupTypeId             = $this->groupTypeId->value;

        return $data;
    }

}

?>
