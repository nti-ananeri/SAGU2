<?php

/**
 *
 * This file handles the connection and actions for acdPhysicalResource table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the acdPhysicalResource table
 */
class FrmPhysicalResourceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'institutional';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Physical resource', $this->home, 'physicalResource-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $fields[]  = new MHiddenField('physicalResourceIdS', $this->getFormValue('physicalResourceIdS',$physicalResourceIdS));

        $fields[]  = new MHiddenField('physicalResourceVersionS', $physicalResourceVersionS);

        $dateVersionS = new MCalendarField('dateVersionS', $this->dateVersionS->value, _M('Date version',$module), FIELD_DATE_SIZE);
        $dateVersionS->setJsHint(_M('Enter the date version',$module));
        $validators[] = new MDateDMYValidator('dateVersionS');
        $fields[] = $dateVersionS;

        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Description',$module), FIELD_DESCRIPTION_SIZE);
        $descriptionS->setJsHint(_M('Enter the description',$module));
        $fields[] = $descriptionS;

        $business     = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitIdS      = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $this->unitIdS->value), _M('Unit id',$module), $business->listUnit());
        $unitIdS->setJsHint(_M('Enter the unit code',$module));
        $fields[]     = $unitIdS;

        $roomS = new MTextField('roomS', $this->roomS->value, _M('Room',$module), 10);
        $roomS->setJsHint(_M('Enter the room',$module));
        $fields[] = $roomS;

        $buildingS = new MTextField('buildingS', $this->buildingS->value, _M('Building',$module), 10);
        $buildingS->setJsHint(_M('Enter the building',$module));
        $fields[] = $buildingS;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $coorLabelS = new MText('coorLabelS', _M('Coordinator',$module) . ':');
        $coorLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $coordIdS = new MLookupTextField('coordIdS', $this->coordIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'coordNameS', 'basic', 'PhysicalPersonEmployeeAndProfessor', null, null, true);
        $coordIdS->setJsHint(_M('Enter the coord id',$module));
        $validators[] = new MIntegerValidator('coordIdS', '', 'optional');

        $coordNameS = new MTextField('coordNameS', $this->coordNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $coordNameS->setJsHint(_M('Enter the coord name',$module));

        $hctCoorS = new MHContainer('hctCoorS', array($coorLabelS, $coordIdS, $coordNameS));
        $fields[]   = $hctCoorS;

        $areaM2S = new MTextField('areaM2S', $this->areaM2S->value, _M('Area',$module), 10, 'm<sup>2</sup>');
        $areaM2S->setJsHint(_M('Enter the area',$module));
        $fields[] = $areaM2S;

        $areaTypeS = new MSelection('areaTypeS', $this->areaTypeS->value, _M('Area type',$module), INSTITUTIONAL::getAreaTypes());
        $areaTypeS->setJsHint(_M('Enter the area types',$module));
        $fields[] = $areaTypeS;

        if ( MODULE_ACCOUNTANCY_INSTALLED == 'YES' )
        {
            $costCenterLabelS = new MText('costCenterLabelS', _M('Cost center',$module) . ':');
            $costCenterLabelS->setWidth(FIELD_CONTAINER_SIZE);

            $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
            $costCenterIdS ->setJsHint(_M('Enter the cost center id',$module));
            //$fields[] = $costCenterIdS;

            $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
            $costCenterDescriptionS->setJsHint(_M('Cost center',$module));
            $costCenterDescriptionS->setReadOnly(true);

            $hctcostCenter = new MHContainer('hctcostCenter', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
            $fields[]      = $hctcostCenter;
        }

        $groupTypeLabelS = new MText('groupTypeLabelS', _M('Group type id',$module) . ':');
        $groupTypeLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $groupTypeIdS = new MLookupTextField('groupTypeIdS', $this->groupTypeIdS->value, '', FIELD_ID_SIZE, null, null, 'groupTypeDescriptionS', $module, 'GroupType', null, null, true);
        $groupTypeIdS->setJsHint(_M('Enter the group type id',$module));
        $validators[] = new MIntegerValidator('groupTypeIdS', '', 'optional');

        $groupTypeDescriptionS = new MTextField('groupTypeDescriptionS', $this->groupTypeDescriptionS->value, '', FIELD_DESCRIPTION_SIZE);
        $groupTypeDescriptionS->setJsHint(_M('Enter the group type description',$module));
        $groupTypeDescriptionS->setReadOnly(true);

        $hctGroupType = new MHContainer('hctGroupType', array($groupTypeLabelS, $groupTypeIdS, $groupTypeDescriptionS));
        $fields[]      = $hctGroupType;


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->physicalResourceId      = $this->physicalResourceIdS->value;
        $filters->physicalResourceVersion = $this->physicalResourceVersionS->value;
        $filters->dateVersion             = $this->dateVersionS->value;
        $filters->description             = $this->descriptionS->value;
        $filters->unitId                  = $this->unitIdS->value;
        $filters->room                    = $this->roomS->value;
        $filters->building                = $this->buildingS->value;
        $filters->coord                   = $this->coordS->value;
        $filters->coordName               = $this->coordNameS->value;
        $filters->areaM2                  = $this->areaM2S->value;
        $filters->areaType                = $this->areaTypeS->value;
        $filters->costCenter              = $this->costCenterIdS->value;
        $filters->groupTypeId             = $this->groupTypeIdS->value;
        $filters->groupTypeDescription    = $this->groupTypeDescriptionS->value;
        unset($this->physicalResourceIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPhysicalResourceSearch',$filters);
        $business   = $MIOLO->getBusiness($module,'BusPhysicalResource');
        $data       = $business->searchPhysicalResource($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.dateVersionS.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
