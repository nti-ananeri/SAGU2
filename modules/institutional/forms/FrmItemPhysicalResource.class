<?php

/**
 * Form to manipulate insItemPhysicalResource table records
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

class FrmItemPhysicalResource extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $physicalResourceId = $_GET['physicalResourceId'] ? $_GET['physicalResourceId'] : $_POST['physicalResourceId'];
            $fields[]           = new MTextLabel('physicalResourceId', $physicalResourceId, _M('Physical resource id',$module));
            $fields[]           = new MHiddenField('physicalResourceId', $physicalResourceId);

            $physicalResourceVersion = $_GET['physicalResourceVersion'] ? $_GET['physicalResourceVersion'] : $_POST['physicalResourceVersion'];
            $fields[]                = new MTextLabel('physicalResourceVersion', $physicalResourceVersion, _M('Physical resource version',$module));
            $fields[]                = new MHiddenField('physicalResourceVersion', $physicalResourceVersion);

            $materialId = $_GET['materialId'] ? $_GET['materialId'] : $_POST['materialId'];
            $fields[]   = new MTextLabel('materialId', $materialId, _M('Material id',$module));
            $fields[]   = new MHiddenField('materialId', $materialId);

            $business = $MIOLO->getBusiness($module,'BusItemPhysicalResource');
            $data     = $business->getItemPhysicalResource($physicalResourceId, $physicalResourceVersion, $materialId);

            $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), _M('Physical resource description',$module), FIELD_DESCRIPTION_SIZE);
            $physicalResourceDescription->setReadOnly(true);
            $fields[] = $physicalResourceDescription;

            $this->page->onLoad('document.' . $this->name . '.quantity.focus();');
        }
        else
        {
            $physicalResourceLabelS = new MText('physicalResourceLabelS', _M('Physical resource id',$module) . ':');
            $physicalResourceLabelS->setWidth(FIELD_CONTAINER_SIZE);
            $physicalResourceLabelS->setClass('m-caption m-caption-required');

            $physicalResourceId = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId', $data->physicalResourceId), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', $module, 'PhysicalResource', null, null, true);
            $physicalResourceId->setJsHint(_M('Physical resource code',$module));
            $validators[] = new MIntegerValidator('physicalResourceId', _M('Physical resource id',$module), 'required');

            $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), '', 8);
            $physicalResourceVersion->setReadOnly(true);
            $physicalResourceVersion->setJsHint(_M('Physical resource version', $module));
            //$fields[] = $physicalResourceVersion;

            $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), '', FIELD_DESCRIPTION_SIZE);
            $physicalResourceDescription->setReadOnly(true);
            //$fields[] = $physicalResourceDescription;

            $hctMaterialS = new MHContainer('hctMaterialS', array($physicalResourceLabelS, $physicalResourceId, $physicalResourceVersion, $physicalResourceDescription));
            $fields[]   = $hctMaterialS;

            $this->page->onLoad('document.' . $this->name . '.physicalResourceId.focus();');
        }

        $roomLabelS = new MText('roomLabelS', _M('Room',$module) . ':');
        $roomLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $room = new MTextField('room', $this->getFormValue('room', $data->room), '', 10);
        $room->setReadOnly(true);
        $room->setJsHint(_M('Room', $module));

        $building = new MTextField('building', $this->getFormValue('building', $data->building), '', 10);
        $building->setReadOnly(true);
        $building->setJsHint(_M('Building', $module));

        $hctRoomS = new MHContainer('hctRoomS', array($roomLabelS, $room, $building));
        $fields[]   = $hctRoomS;


        if ( !in_array($function,array('update','delete')) )
        {
            $materialLabelS = new MText('materialLabelS', _M('Material description',$module) . ':');
            $materialLabelS->setWidth(FIELD_CONTAINER_SIZE);
            $materialLabelS->setClass('m-caption m-caption-required');

            $materialId = new MLookupTextField('materialId', $this->getFormValue('materialId', $data->materialId), '', 10, null, null, 'materialDescription', $module, 'Material', null, null, true);
            $materialId->setJsHint(_M('Enter the material id',$module));
            $validators[] = new MIntegerValidator('materialId', _M('Material description',$module), 'required');

            $materialDescription = new MTextField('materialDescription', $this->getFormValue('materialDescription', $data->materialDescription), '', 30);
            $materialDescription->setReadOnly(true);
            $materialDescription->setJsHint(_M('Material description', $module));
            
            $hctMaterialS = new MHContainer('hctMaterialS', array($materialLabelS, $materialId, $materialDescription));
            $fields[]   = $hctMaterialS;

        }
        else
        {
            $materialDescription = new MTextField('materialDescription', $this->getFormValue('materialDescription', $data->materialDescription), _M('Material description',$module), 30);
            $materialDescription->setReadOnly(true);
            $materialDescription->setJsHint(_M('Material description', $module));
            $fields[] = $materialDescription;
        }
        
        $quantity = new MTextField('quantity', $this->getFormValue('quantity', $data->quantity), _M('Quantity',$module), 10);
        $quantity->setJsHint(_M('Enter the quantity', $module));
        $fields[] = $quantity;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'    => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'physicalResourceId'      => MIOLO::_request('physicalResourceId'),
                        'physicalResourceVersion' => MIOLO::_request('physicalResourceVersion'),
                        'materialId'              => MIOLO::_request('materialId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('physicalResourceId'      => MIOLO::_request('physicalResourceId'),
                        'physicalResourceVersion' => MIOLO::_request('physicalResourceVersion'),
                        'meterialId'              => MIOLO::_request('meterialId'));
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Question',$module);
        $MIOLO->question(MSG_CONFIRM_RECORD_DELETE, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusItemPhysicalResource');
        $ok = $business->deleteItemPhysicalResource($this->physicalResourceId->value, $this->physicalResourceVersion->value, $this->materialId->value);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusItemPhysicalResource');

        if ( $function == 'update' )
        {
            $ok  = $business->updateItemPhysicalResource($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertItemPhysicalResource($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('physicalResourceIdS'      => $data->physicalResourceId,
                          'physicalResourceVersionS' => $data->physicalResourceVersion,
                          'materialIdS'              => $data->materialId);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new InsItemPhysicalResource();
        $data->physicalResourceId      = $this->physicalResourceId->value;
        $data->physicalResourceVersion = $this->physicalResourceVersion->value;
        $data->materialId              = $this->materialId->value;
        $data->quantity                = $this->quantity->value;

        return $data;
    }

}

?>
