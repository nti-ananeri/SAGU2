<?php
/**
 *
 * This file handles the connection and actions for sprExamProcessOccurrence table
 *
 * @author Rafael Dutra  [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2006 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the ccpService table
 **/


class BusinessControlCopiesBusService extends MBusiness   
{

    public function getDatabase ()
    {
        $MIOLO = MIOLO::getInstance($module = null);
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'controlCopies' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function insertService($values)
    {
        $sql = 'INSERT INTO ccpService (description, 
                                        unitaryValue, 
                                        unit) 
                     VALUES (?, ?, ?)';
        
        $args   = array($values->description,
                        $values->unitaryValue,
                        $values->unit);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }


    public function searchService($values)
    {
        $sql = 'SELECT serviceId, 
                       description, 
                       unitaryValue, 
                       unit,
                       userName, 
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'), 
                       ipAddress 
                  FROM ccpservice';

        if (strlen((string)$values->description) > 0 )
        {
            $where .= " AND upper (description) ILIKE upper('".$values->description."%')";
        } 
        if (strlen((string)$values->unitaryValue) > 0 )
        {
            $where .= " AND upper (unitaryvalue) ILIKE upper('".$values->unitaryValue."%')";
        } 
        if (strlen((string)$values->unit) > 0 )
        {
            $where .= " AND upper (unit) ILIKE ('".$values->unit."%')";
        }
        if (strlen((string)$values->serviceId) > 0 )
        {
            $where .= " AND serviceId = ?";
            $args[] = $values->serviceId;
        }
    
        if (strlen((string)$where) > 0)
        {
            $sql   .= ' WHERE ' . substr($where, 4) ;
            $db     = $this->getDatabase(); 
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
   }

    public function getService($serviceId)
    {
        $sql = 'SELECT description, 
                       unitaryValue, 
                       unit,
                       userName, 
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'), 
                       ipAddress 
                  FROM ccpservice 
                 WHERE serviceid = ?'; 

        $db     = $this->getDatabase(); 
        $result = $db->query(SAGU::prepare($sql, $serviceId));

        list($data->description,
             $data->unitaryValue,
             $data->unit,
             $data->userName,
             $data->dateTime,
             $data->ipAddress ) = $result[0];

        return $data;
    }


    public function updateService($values)
    {
        $sql = 'UPDATE ccpService 
                    SET description  = ?,
                        unitaryValue = ?,
                        unit         = ? 
                WHERE serviceId    = ?';

        $args   = array($values->description,
                        $values->unitaryValue,
                        $values->unit,
                        $values->serviceId);
    
        $db   = $this->getDatabase(); 
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    
    } 

    public function deleteService($serviceId)
    {
        $sql   = 'DELETE FROM ccpservice
                        WHERE serviceid = ?';
    
        $args  = array($value->serviceid);
        $db    = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $serviceId));
    
        return $result;
    }

}
?>
