<?php
/**
 *
 * This file manipulate the lookups for the control  module of sagu
 *
 * @author Jamiel Spezia [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Load global defines for the basic module
 */
$business  = $MIOLO->getBusiness('basic','BusConfig');
$constants = $business->getModuleValues('basic');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}


$constants = $business->getModuleValues('controlCopies');
foreach ( $constants as $cnt )
{
    define($cnt[0],$cnt[1]);
}

/**
 * Class to manipulate the Lookups
 **/
class BusinessControlCopiesLookup
{
    /**
     * Auto complete for person
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePerson(&$context)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        /**
        * Load global defines for the academic module
        */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('academic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }
        /**
        * Load global defines for the basic module
        */
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        /**
        * Load global defines for the ControlCopies module
        */
        $constants = $business->getModuleValues('controlCopies');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $sqlCopies = 'SELECT sum(copiesNumber) as copiesNumber 
                        FROM ccpCopy 
                       WHERE ccpCopy.periodId in ( \'' . implode("','", explode(',',str_replace(' ', '', CURRENTPERIODID))) . '\')
                         AND ccpCopy.personId = A.personid ';

        $sql = ' SELECT B.name, 
                        sum((A.amount2 * A.copiesNumber) / A.amount) as possibleCopies,
                        (' . $sqlCopies . ') as effectedCopies,
                        sum((A.amount2 * A.copiesNumber) / A.amount) - CASE WHEN (' . $sqlCopies . ') IS NOT NULL THEN (' . $sqlCopies . ') ELSE 0 END as remainingCopies,
                        A.personId
                   FROM (       SELECT A.professorId as personId, 
                                       D.periodID, 
                                       \'1\' as amount2, 
                                       E.copiesNumber, 
                                       E.amount,
                                       D.unitId
                                  FROM acdScheduleProfessor A
                            INNER JOIN acdSchedule B
                                    ON ( A.scheduleId = B.scheduleId )
                            INNER JOIN acdGroup C
                                    ON ( B.groupId = C.groupId )
                            INNER JOIN acdLearningPeriod D
                                    ON ( D.learningPeriodId = C.learningPeriodId )
                            INNER JOIN ccpRule E
                                    ON ( E.formationLevel = D.formationLevelId AND E.isProfessor = \'' . DB_TRUE . '\' )
                                 WHERE C.isCancellation = \'' . DB_FALSE . '\'
                      UNION ALL SELECT A.personId, 
                                       F.periodId, 
                                       E.financeCredits as amount2, 
                                       G.copiesNumber, 
                                       G.amount,
                                       F.unitId
                                  FROM acdContract A
                            INNER JOIN acdEnroll B
                                    ON ( A.contractId = B.contractId )
                            INNER JOIN acdGroup C
                                    ON ( C.groupId = B.groupId )
                            INNER JOIN acdCurriculum D
                                    ON ( D.curriculumId = C.curriculumId )
                            INNER JOIN acdCurricularComponent E
                                    ON ( E.curricularComponentId = D.curricularComponentID )
                            INNER JOIN acdLearningPeriod F
                                    ON ( F.learningPeriodId = C.learningPeriodId )
                            INNER JOIN ccpRule G
                                    ON ( G.formationLevel = F.formationLevelId AND G.isProfessor = \'' . DB_FALSE . '\' )
                                 WHERE B.statusId not in ( ' . ENROLL_STATUS_CANCELLED . ',' . ENROLL_STATUS_DESISTING . ',' . ENROLL_STATUS_EXCUSED . ')
                                   AND C.isCancellation = \'' . DB_FALSE . '\'
                        ) A
        INNER JOIN ONLY basPhysicalPerson B
                     ON ( A.personId = B.personId )
                  WHERE A.personId = ?
                    AND A.periodId in ( \'' . implode("','", explode(',',str_replace(' ', '', CURRENTPERIODID))) . '\')
                    AND A.unitId in ( ' . UNITCODE . ' )
               GROUP BY A.personId,
                        B.name';

        $context->setContext('controlCopies', $sql);
    }

    /**
     * Lookup for person
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPerson(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        /**
        * Load global defines for the academic module
        */
        $business  = $MIOLO->getBusiness('basic','BusConfig');
        $constants = $business->getModuleValues('academic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }
        /**
        * Load global defines for the basic module
        */
        $constants = $business->getModuleValues('basic');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        /**
        * Load global defines for the ControlCopies module
        */
        $constants = $business->getModuleValues('controlCopies');
        foreach ( $constants as $cnt )
        {
            define($cnt[0],$cnt[1]);
        }

        $periodId   = $lookup->getFilterValue('periodId') ? $lookup->getFilterValue('periodId') : CURRENT_PERIOD_ID;
        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Person',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        $lookup->addFilterField( new MHiddenField('periodId', $personId ));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('personId',        _M('Code', $module),             'right', true, null, true),
           new DataGridColumn('name',            _M('Person', $module),           'left',  true, null, true),
           new DataGridColumn('possibleCopies',  _M('Possible copies', $module),  'left',  true, null, true),
           new DataGridColumn('effectedCopies',  _M('Effected copies', $module),  'left',  true, null, true),
           new DataGridColumn('remainingCopies', _M('Remaining copies', $module), 'left',  true, null, true),
        );

    $sqlCopies = 'SELECT sum(copiesNumber) as copiesNumber 
                    FROM ccpCopy 
                   WHERE ccpCopy.periodId in ( \'' . implode("','", explode(',',str_replace(' ', '', CURRENTPERIODID))) . '\')
                     AND ccpCopy.personId = A.personid ';

    $sql = ' SELECT A.personId, 
                    B.name, 
                    sum((A.amount2 * A.copiesNumber) / A.amount) as possibleCopies,
                    (' . $sqlCopies . ') as effectedCopies,
                    sum((A.amount2 * A.copiesNumber) / A.amount) - CASE WHEN (' . $sqlCopies . ') IS NOT NULL THEN  (' . $sqlCopies . ') ELSE 0 END as remainingCopies
               FROM (       SELECT A.professorId as personId, 
                                   D.periodID, 
                                   \'1\' as amount2, 
                                   E.copiesNumber, 
                                   E.amount,
                                   D.unitId
                              FROM acdScheduleProfessor A
                        INNER JOIN acdSchedule B
                                ON ( A.scheduleId = B.scheduleId )
                        INNER JOIN acdGroup C
                                ON ( B.groupId = C.groupId )
                        INNER JOIN acdLearningPeriod D
                                ON ( D.learningPeriodId = C.learningPeriodId )
                        INNER JOIN ccpRule E
                                ON ( E.formationLevel = D.formationLevelId AND E.isProfessor = \'' . DB_TRUE . '\' )
                             WHERE C.isCancellation = \'' . DB_FALSE . '\'
                  UNION ALL SELECT A.personId, 
                                   F.periodId, 
                                   E.financeCredits as amount2, 
                                   G.copiesNumber, 
                                   G.amount,
                                   F.unitId
                              FROM acdContract A
                        INNER JOIN acdEnroll B
                                ON ( A.contractId = B.contractId )
                        INNER JOIN acdGroup C
                                ON ( C.groupId = B.groupId )
                        INNER JOIN acdCurriculum D
                                ON ( D.curriculumId = C.curriculumId )
                        INNER JOIN acdCurricularComponent E
                                ON ( E.curricularComponentId = D.curricularComponentID )
                        INNER JOIN acdLearningPeriod F
                                ON ( F.learningPeriodId = C.learningPeriodId )
                        INNER JOIN ccpRule G
                                ON ( G.formationLevel = F.formationLevelId AND G.isProfessor = \'' . DB_FALSE . '\' )
                             WHERE B.statusId not in ( ' . ENROLL_STATUS_CANCELLED . ',' . ENROLL_STATUS_DESISTING . ',' . ENROLL_STATUS_EXCUSED . ' )
                               AND C.isCancellation = \'' . DB_FALSE . '\'
                    ) A 
    INNER JOIN ONLY basPhysicalPerson B
                 ON ( A.personId = B.personId ) ';

        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND B.name ILIKE ?';
            $args[] = $personName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                      AND A.periodId in ( \'' . implode("','", explode(',',str_replace(' ', '', CURRENTPERIODID))) . '\')
                        AND A.unitId in ( ' . UNITCODE . ')
                   GROUP BY A.personId,
                            B.name
                   ORDER BY B.name';
        }
        else
        {
            $sql .= ' GROUP BY A.personId,
                               B.name
                         LIMIT 0';
        }
        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Person search',$module), 15, 0);
        $lookup->grid->setIsScrollable();
      
    }


    public function autoCompleteService (&$context)
    {
     $sql = 'SELECT A.description AS serviceName,
                    A.unitaryValue
               FROM ccpService A
              WHERE serviceId = ?';
     
    $context->setContext('controlCopies', $sql);
    }

    public function lookupService(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);


        $serviceId   = $lookup->getFilterValue('serviceId');
        $serviceName = $lookup->getFilterValue('serviceName');

        $lookup->addFilterField( new MTextField  ('serviceId',   $serviceId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField  ('serviceName', $serviceName, _M('Service',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );


    $columns = array(
           new DataGridColumn('serviceId',    _M('Code',   $module),        'left', true, null, true),
           new DataGridColumn('serviceName',  _M('Service',  $module),      'left', true, null, true),
           new DataGridColumn('unitaryValue', _M('Unitary value', $module), 'left', true, null, true),
           new DataGridColumn('unit',         _M('Unit',         $module),  'left', true, null, true),
                    );

    $sql = 'SELECT serviceId,
                   description AS serviceName,
                   unitaryValue,
                   unit
             FROM ccpservice';

         if (strlen ($serviceId) > 0)
         {
             $where  .= ' AND serviceId ILIKE ?';
             $args[]  = $serviceId;
         }
         if (strlen ($serviceName) > 0)
         {
             $where  .= ' AND description ILIKE ?';
             $args[]  = $serviceName . '%';
         } 

         if (strlen ($where) > 0)
         {
             $sql .= ' WHERE ' . substr($where, 5);
         }
         else 
         {
             $sql .= ' LIMIT 0'; 
         }
          $sqlObject = new sql();
          $sqlObject->createFrom(SAGU::prepare($sql,$args));
     $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Service search',$module), 15, 0);
     $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->grid->setIsScrollable();
    
    }

    public function autoCompleteSector (&$context)
    {
     $sql = 'SELECT description
               FROM basSector 
              WHERE sectorId = ?';
     
    $context->setContext('controlCopies', $sql);
    }

    public function lookupSector(&$lookup)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $sectorId    = $lookup->getFilterValue('sectorId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('sectorId',    $sectorId,    _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Sector',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('sectorId',    _M('Code', $module),   'left', true, null, true),
           new DataGridColumn('description', _M('Sector', $module), 'left', true, null, true),
        );

        $sql = 'SELECT sectorId,
                       description
                  FROM basSector ';

        if ( strlen((string)$sectorId) > 0 )
        {
            $where .= ' AND sectorId = ?';
            $args[] = $sectorId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Sector search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteCenter(&$context)
    {
        $sql = 'SELECT name AS centerName
                  FROM acdCenter
                 WHERE centerId = ?';

        $context->setContext('controlCopies', $sql);
    }

    public function lookupCenter(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $centerId            = $lookup->getFilterValue('centerId');
        $centerName          = $lookup->getFilterValue('centerName');

        $lookup->addFilterField( new MTextField('centerId',   $centerId,   _M('Code', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('centerName', $centerName, _M('Center',$module), FIELD_DESCRIPTION_LOOKUP_SIZE));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('centerId',   _M('Code', $module),   'right', true, null, true),
           new DataGridColumn('centerName', _M('Center', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT centerId,
                       name AS centerName
                  FROM acdCenter';

        if ( strlen((string)$centerId) > 0 )
        {
            $where .= ' AND centerId = ?';
            $args[] = $centerId;
        }

        if ( strlen((string)$centerName) > 0 )
        {
            $where .= ' AND name ILIKE ?';
            $args[] = $centerName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY name';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Center search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
    

    public function autoCompleteProject (&$context)
    {
     $sql = 'SELECT A.description
               FROM acdProject A
              WHERE projectId = ?';
     
    $context->setContext('controlCopies', $sql);
    }


    public function lookupProject(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $projectId   = $lookup->getFilterValue('projectId');
        $projectName = $lookup->getFilterValue('projectName');

        $lookup->addFilterField( new MTextField('projectId',   $projectId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('projectName', $projectName, _M('Project',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('projectId',   _M('Code', $module),    'right', true, null, true),
           new DataGridColumn('projectName', _M('Project', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT projectId,
                       description AS projectName
                  FROM acdProject';

        if ( strlen((string)$projectId) > 0 )
        {
            $where .= ' AND projectId = ?';
            $args[] = $projectId;
        }

        if ( strlen((string)$projectName) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $projectName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Project search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteCostCenter (&$context)
    {
        $sql = 'SELECT A.description
                  FROM accCostCenter A
                 WHERE costCenterId = ?';
     
        $context->setContext('controlCopies', $sql);
    }

    public function lookupCostCenter(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $costCenterId = $lookup->getFilterValue('costCenterId');
        $description  = $lookup->getFilterValue('costName');

        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Code', $module), FIELD_ID_LOOKUP_SIZE));
        $lookup->addFilterField( new MTextField('costName',     $description,  _M('Cost center', $module), FIELD_DESCRIPTION_LOOKUP_SIZE));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('costCenterId', _M('Code', $module),        'left', true, null, true),
           new DataGridColumn('costName',     _M('Cost center', $module), 'left', true, null, true),
        );

        $sql = 'SELECT A.costCenterId,
                       A.description AS costName
                  FROM accCostCenter A';

        if ( strlen((string)$costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId ILIKE ?';
            $args[] = $costCenterId;
        }

        if ( strlen((string)$description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.costCenterId';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Cost center search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompletePhysicalPersonEmployee (&$context)
    {
        $sql = 'SELECT A.name AS personName
                  FROM basPhysicalPersonEmployee A
                 WHERE personId = ?';
     
        $context->setContext('controlCopies', $sql);
    }

    public function lookupPhysicalPersonEmployee(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Code', $module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Employee', $module), FIELD_DESCRIPTION_LOOKUP_SIZE) );
        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('personId',   _M('Code', $module),     'right', true, null, true),
           new DataGridColumn('personName', _M('Employee', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT A.personId,
                       A.name AS personName
                 FROM basPhysicalPersonEmployee A';

        if ( strlen((string)$personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen((string)$personName) > 0 )
        {
            $where .= ' AND A.name ILIKE ?';
            $args[] = $personName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Physical person employee search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteOperator (&$context)
    {
        $sql = 'SELECT description
               FROM ccpSector
              WHERE sectorId = ?';
     
        $context->setContext('controlCopies', $sql);
    }

    public function lookupOperator(&$lookup)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $operatorId   = $lookup->getFilterValue('operatorId');
        $operatorName = $lookup->getFilterValue('operatorName');

        $lookup->addFilterField( new MTextField('operatorId',   $operatorId,   _M('Code',$module), FIELD_ID_LOOKUP_SIZE) );
        $lookup->addFilterField( new MTextField('operatorName', $operatorName, _M('Operator',$module), FIELD_DESCRIPTION_LOOKUP_SIZE) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('operatorId',   _M('Code', $module),     'right', true, null, true),
           new DataGridColumn('operatorName', _M('Operator', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT sectroId AS operatorId,
                       description AS operatorName
                  FROM ccpsector ';

        if ( strlen((string)$operatorId) > 0 )
        {
            $where .= ' AND sectroId = ?';
            $args[] = $operatorId;
        }

        if ( strlen((string)$operatorName) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $operatorName . '%';
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';

        $sqlObject = new sql();
        if ( strlen((string)$where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(LOOKUP_FILTER_COLUMNS);
        $lookup->setLookupGrid($module, $sqlObject, $columns, _M('Operator search',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

}
?>
