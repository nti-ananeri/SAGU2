<?php
/**
 *
 * @author Rafael Dutra  [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2006 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the ccpPayRollDiscount table
 **/


class BusinessControlCopiesBusPayRollDiscount extends MBusiness   
{

    public function getDatabase ()
    {
        $MIOLO = MIOLO::getInstance($module = null);
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'controlCopies' : $module;
        
        return $MIOLO->getDatabase($module);
    }

    public function searchPayRollDiscount($ids)
    { 
    $sql = 'SELECT A.payRollDiscountId,
                   TO_CHAR(A.datetime,\'' . MASK_TIMESTAMP . '\'),
                   A.branch,
                   A.sectorid,
                   B.description AS sectorDescription,
                   A.serviceid,
                   C.description AS serviceDescription,
                   A.amount,
                   A.unitaryValue,
                   A.personId,
                   A.operatorSectorId,
                   A.operator
              FROM ccpPayRollDiscount A
             LEFT JOIN ccpSector B     
                    ON (B.sectorId = A.sectorId)
             LEFT JOIN ccpService C
                    ON (C.serviceId = A.serviceId)
             LEFT JOIN basPhysicalPersonEmployee D    
                    ON (D.personId = A.personId)';

            if (strlen((string)$ids->payRollDiscount) > 0 )
            {
                $where .= ' AND A.payRollDiscountId = ?';
                $args[] = $ids->payRollDiscount;
            } 
            
            if (strlen((string)$ids->beginDate) > 0 )
            {
                $where .= ' AND DATE(A.datetime) >= TO_DATE(?, \'' . MASK_DATE . '\')';
                $args[] = $ids->beginDate;
            }

            if (strlen((string)$ids->endDate) > 0 )
            {
                $where .= ' AND DATE(A.datetime) <= TO_DATE(?, \'' . MASK_DATE . '\')';
                $args[] = $ids->endDate;
            }
            
            if (strlen((string)$ids->sectorId) > 0 )
            {
                $where .= ' AND A.sectorId = ?';
                $args[] = $ids->sectorId;
            } 

            if (strlen((string)$ids->serviceId) > 0 )
            {
                $where .= ' AND A.serviceId = ?';
                $args[] = $ids->serviceId;
            } 

            if (strlen((string)$ids->personId) > 0 )
            {
                $where .= ' AND A.personId = ?';
                $args[] = $ids->personId;
            } 

            if (strlen((string)$ids->operatorSectorId) > 0 )
            {
                $where .= ' AND A.operatorSectorId = ?';
                $args[] = $ids->operatorSectorId;
            } 
          
            if (strlen((string)$where) > 0)
            {

            $sql .= ' WHERE ' . substr($where, 4);
            $db     = $this->getDatabase(); 
            $result = $db->query(SAGU::prepare($sql, $args));
            }
            return $result;

    }

    public function insertPayRollDiscount($ids)
    {

        $sql = 'INSERT INTO ccpPayRollDiscount (branch,
                                                sectorId,
                                                serviceId,
                                                amount,
                                                unitaryValue,
                                                personId,
                                                operator,
                                                operatorSectorId)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)';
        
        $args   = array($ids->branch,
                        $ids->sectorId,
                        $ids->serviceId,
                        $ids->amount,
                        $ids->unitaryValue,
                        $ids->personId,
                        $ids->operator,
                        $ids->operatorSectorId);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getPayRollDiscount($payRollDiscountId)
    {
    
     $sql = 'SELECT payRollDiscountId,
                    branch,
                    sectorId,
                    serviceId,
                    amount,
                    unitaryvalue,
                    personId,
                    operator,
                    operatorsectorId,
                    username,
                    TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\')
              FROM ccpPayRollDiscount 
                WHERE payRollDiscountId  = ?';

    
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $payRollDiscountId));

        list( $data->payRollDiscount,
              $data->branch,
              $data->sectorId,
              $data->serviceId,        
              $data->unitaryvalue,      
              $data->amount,               
              $data->personId,         
              $data->operator,
              $data->operatorSectorId,
              $data->userName,
              $data->dateTime) = $result[0];

        return $data;
    }
    
    public function deletePayRollDiscount($payRollDiscountId)
    {
    $sql    = 'DELETE FROM ccpPayRollDiscount
                        WHERE payRollDiscountId = ?';
    $db     = $this->getDatabase();
    $result = $db->execute(SAGU::prepare($sql, $payRollDiscountId));

    return $result;
    }

    public function updatePayRollDiscount($ids)
    {

        $sql = 'UPDATE ccpPayRollDiscount
                SET branch           = ? , 
                    sectorId         = ? , 
                    serviceId        = ? , 
                    amount           = ? , 
                    unitaryvalue     = ? ,         
                    personId         = ? ,     
                    operator         = ? ,   
                    operatorsectorId = ?   
                WHERE payRollDiscountId = ?'; 
    
        $args   = array($ids->branch,                
                        $ids->sectorId,             
                        $ids->serviceId,           
                        $ids->amount,             
                        $ids->unitaryValue,              
                        $ids->personId,             
                        $ids->operator,          
                        $ids->operatorSectorId,
                        $ids->payRollDiscountId); 
    
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
           
        return $result;
    } 
    
     public function rptPayRollDiscountForPeriod($data)
    {
        $sql = ' SELECT C.personId              ,
                        A.branch                ,
                        C.name                  ,     
                        D.description           , 
                        B.description           , 
                        A.amount                ,
                        A.unitaryValue                   
                   FROM ccpPayRollDiscount A
             LEFT JOIN basPhysicalPersonEmployee C
                     ON (A.personId  = C.personId)
             LEFT JOIN ccpService D
                     ON (A.serviceId = D.serviceId)
             LEFT JOIN ccpSector B
                    ON (A.sectorId = B.sectorId)';

        if ( count($data->beginDate) > 0 )
        {
            $where .= ' AND DATE(A.datetime) >= TO_DATE(?, \'' . MASK_DATE . '\')';
            $args[] = $data->beginDate;
        }

        if ( count($data->endDate) > 0 )
        {
            $where .= ' AND DATE(A.datetime) <= TO_DATE(?, \'' . MASK_DATE . '\')';
            $args[] = $data->endDate;
        }

        if ( strlen((string)$data->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $data->personId;
        }

        if ( $where )
        {

            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY 2, C.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql, $args));
        }

        return $result;
    }

}
