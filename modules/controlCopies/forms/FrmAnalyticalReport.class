<?php

/**
 * Analytical report form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a AnalyticalReport
 **/
class FrmAnalyticalReport extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Analytical', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $type = new MSelection('type', $this->getFormValue('type', $data->type), _M('Type', $module), array('1'=>_M('All person', $module), _M('One person', $module)) );
        //$type->setAutoSubmit(true);
        $type->setAutoPostBack(true);
        $fields[] = $type;
        $fields[] = new MSeparator();

        $typeData = $this->getFormValue('type', $data->type);

        if ( $typeData )
        {
            $date = date(MASK_DATE_PHP);
            $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $date), _M('Begin date', $module), 15);
            $validators[] = new MDateDMYValidator('beginDate', '', 'required');
            $fields[] = $beginDate;

            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $date), _M('End date', $module), 15);
            $validators[] = new MDateDMYValidator('endDate', '', 'required');
            $fields[] = $endDate;

            if ( $typeData == '2' )
            {
                $personId           = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('Person id',$module), 10, null, null, 'personName', $module, 'Person', null, null, true);
                $personId->setJsHint(_M('Enter the person code',$module));
                $fields[]           = $personId;
                $validators[]       = new MRequiredValidator('personId');

                $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Person name',$module), 40);
                $personName->setReadOnly(true);
                $fields[]           = $personName;
            }
        }

        $fields[] = new Separator('');

        $saveButton = new MButton('tbBtnPrint',_M('Print',$module));
        $fields[] = $saveButton;

        $this->setFields($fields);
        if ( $validators )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(140);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.type.focus();' );
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Print from the toolbar
     **/
    public function tbBtnPrint_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $business = $MIOLO->getBusiness($module, 'BusCopy');

        if ( $data->type == 2 && $data->personId || $data->type == 1 && !MIOLO::_request('personId') )
        {
            $result = $business->copiesAnalyticalForPeriod($data);
            $MIOLO->getClass($module, 'RptAnalyticalForPeriod');
            new RptAnalyticalForPeriod($result, $data);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->type       = $this->type->value;
        $data->beginDate  = $this->beginDate->value;
        $data->endDate    = $this->endDate->value;
        $data->personId   = $this->personId->value;

        return $data;
    }
}

?>
