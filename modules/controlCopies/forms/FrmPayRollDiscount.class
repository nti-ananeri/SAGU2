<?php
/**
 *
 * @author Rafael Dutra [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Dutra [rdutra@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n $module, $m[4]
 * Copyleft (L) 2006- SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmPayRollDiscount extends MForm
{
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
        }
        else
        {
            parent::__construct(_M('Update', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
        }

    }

    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:payrolldiscount'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $this->defaultButton = false;
        $fields[]  = $toolBar;
        
        $complete = 'serviceName, unitaryValue';
        if ( in_array($function,array('update','delete')) )
        {
            $business  = $MIOLO->getBusiness($module,'BusPayRollDiscount');
            $payRollDiscountId = MIOLO::_request('payRollDiscountId');
            $data      = $business->getPayRollDiscount($payRollDiscountId);
            $fields[]  = new MTextLabel('payRollDiscountId', $data->payRollDiscountId, _M('Pay Roll Discount id',$module));

        }

    
        $branchLabel = new MText('branchLabel', _M('Branch', $module).':');
        $branchLabel->setWidth(FIELD_LABEL_SIZE);
        $branchLabel->setClass('m-caption m-caption-required');
        $branchDescription = new MTextField('branch', $this->getFormValue('branch', $data->branch), '');
        $branchDescription->setJsHint(_M('Enter the branch',$module));
        $validators[] = new MRequiredValidator('branch', _M('Branch', $module));

        $fields[]  = new MHiddenField('limbo', '');
        
        $sectorLabel   = new MText('sectorId', _M('Sector code',$module).':');
        $sectorLabel->setWidth(FIELD_LABEL_SIZE);
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorID      = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId),
                        '', FIELD_ID_SIZE, null, null, 'sectorName', $module,'Sector', null, null, true);
        $sectorID->setJsHint(_M('Enter the sector code',$module));
        $sectorName    = new MTextField('sectorName', $this->getFormValue('sectorName',$data->sectorName), '', FIELD_DESCRIPTION_SIZE);
        $sectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('sectorName', _M('Sector code',$module));

        $serviceLabel  = new MText('serviceId', _M('Service code',$module).':');
        $serviceLabel->setWidth(FIELD_LABEL_SIZE);
        $serviceLabel->setClass('m-caption m-caption-required');
        $serviceID     = new MLookupTextField('serviceId', $this->getFormValue('serviceId', $data->serviceId),
                     '', FIELD_ID_SIZE, null, null, $complete, $module, 'Service', 'filler', null, true);
        $serviceID->setJsHint(_M('Enter the service code',$module));
        $serviceName   = new MTextField('serviceName', $this->getFormValue('serviceName',$data->serviceName), '', FIELD_DESCRIPTION_SIZE);
        $serviceName->setReadOnly(true);
        $validators[] = new MRequiredValidator('serviceName', _M('Service code',$module));
        
        $unitaryLabel = new MText('unitaryLabel', _M('Unitary Value', $module).':');
        $unitaryLabel->setWidth(FIELD_LABEL_SIZE);
        $unitaryLabel->setClass('m-caption m-caption-required');
        $unitaryDescription = new MTextField  ('unitaryValue', $this->getFormValue('unitaryValue', $data->unitaryValue),'');
        $unitaryDescription->setJsHint(_M('Enter the unitary value',$module));
        $validators[] = new MRequiredValidator('unitaryValue', _M('Unitary Value', $module));
        
        $amountLabel = new MText('amountLabel', _M('Amount', $module).':');
        $amountLabel->setWidth(FIELD_LABEL_SIZE);
        $amountLabel->setClass('m-caption m-caption-required');
        $amountDescription = new MTextField  ('amount', $this->getFormValue('amount', $data->amount),'');
        $amountDescription->setJsHint(_M('Enter the amount value',$module));
        $validators[] = new MRequiredValidator('amount', _M('Amount', $module));
        
        $personLabel   = new MText('personLabel', _M('Person code',$module).':');
        $personLabel->setWidth(FIELD_LABEL_SIZE);
        $personLabel->setClass('m-caption m-caption-required');
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId),
                        '', FIELD_ID_SIZE, null, null, 'personName', $module,'PhysicalPersonEmployee', null, null, true);
        $personId->setJsHint(_M('Enter the person code',$module));
        $personName    = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $validators[] = new MRequiredValidator('personId', _M('Person code',$module));

        $password = new MPasswordField('password', $this->password->value, _M('Password',$module), '');
        $password->setJsHint(_M('Enter the password',$module));
        $validators[] = new MRequiredValidator('password', _M('Password',$module)); 
       
        $operatorLabel = new MText('operatorLabel', _M('Operator', $module).':');
        $operatorLabel->setWidth(FIELD_LABEL_SIZE);
        $operatorLabel->setClass('m-caption m-caption-required');
        $operatorDescription = new MTextField('operator', $this->getFormValue('operator', $data->operator), '');
        $operatorDescription->setJsHint(_M('Enter the operator',$module));
        $validators[] = new MRequiredValidator('operator', _M('Operator', $module));

        $operatorSectorLabel = new MText('operatorSectorLabel', _M('Sector operator code',$module).':');
        $operatorSectorLabel->setWidth(FIELD_LABEL_SIZE);
        $operatorSectorLabel->setClass('m-caption m-caption-required');
        $operatorSectorId = new MLookupTextField('operatorSectorId', $this->getFormValue('operatorSectorId',$data->operatorSectorId),
                        '', FIELD_ID_SIZE, null, null, 'operatorName', $module,'Operator', null, null, true);
        $operatorSectorId->setJsHint(_M('Enter the operator code',$module));
        $operatorSectorName  = new MTextField('operatorName', $this->operatorName->value, '', FIELD_DESCRIPTION_SIZE);
        $operatorSectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('operatorSectorId', _M('Sector operator code',$module)); 

        $hctBranch         = new MHContainer(null,array($branchLabel,  $branchDescription));
        $hctSector         = new MHContainer(null,array($sectorLabel,  $sectorID,     $sectorName)); 
        $hctService        = new MHContainer(null,array($serviceLabel, $serviceID,    $serviceName));
        $hctUnitaryValue   = new MHContainer(null,array($unitaryLabel, $unitaryDescription));
        $hctAmount         = new MHContainer(null,array($amountLabel,  $amountDescription));
        $hctPerson         = new MHContainer(null,array($personLabel,  $personId,     $personName)); 
        $hctOperator       = new MHContainer(null,array($operatorLabel, $operatorDescription));
        $hctOperatorSector = new MHContainer(null,array($operatorSectorLabel, $operatorSectorId, $operatorSectorName));

        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]        = $divError;
        $fields[]        = new Separator();

        $fields[]  = new MHiddenField('payRollDiscountId', MIOLO::_request('payRollDiscountId'));

        $fields[]  = $hctBranch ;
        $fields[]  = $hctSector ;
        $fields[]  = $hctService ;
        $fields[]  = $hctUnitaryValue ;
        $fields[]  = $hctAmount ;
        $fields[]  = $hctPerson  ;
        $fields[]  = $password;
        $fields[]  = $hctOperator;
        $fields[]  = $hctOperatorSector;
        $fields[]  = new separator();
     
        if ($function == 'update')
        {
        $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[]  = new separator();

        $this->setLabelWidth(FIELD_LABEL_SIZE+3);
        $this->setFields($fields);
        $this->setValidators($validators);

    }

    function getTypesData()
    {
        $data->branch            = $this->branch           ->getValue();
        $data->sectorId          = $this->sectorId         ->getValue();
        $data->serviceId         = $this->serviceId        ->getValue();
        $data->amount            = $this->amount           ->getValue();
        $data->unitaryValue      = $this->unitaryValue     ->getValue();
        $data->personId          = $this->personId         ->getValue();
        $data->operator          = $this->operator         ->getValue();
        $data->operatorSectorId  = $this->operatorSectorId ->getValue();
        $data->payRollDiscountId = $this->payRollDiscountId ->getValue();
        return $data;
    }

    function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPayRollDiscount');

        //Valida somente por LDAP
      //  if ( false)//!@$this->manager->auth->Authenticate($data->personId, $this->password->value, false) )
      //  {
      //      $msg           = _M('Invalid password, please tries again',$module);
      //      $lblMsg        = new MText('lblMsg',$msg);
      //      $lblMsg->color = 'red';

      //      $fields[] = $lblMsg;
      //      $fields[] = new Separator('');

      //      $this->divError->addControl($fields);
      //      $this->page->onLoad('document.' . $this->name . '.password.focus();' );
      //  }
      //  else
      //  {
            if ( $function == 'update' )
            {
                $ok  = $business->updatePayRollDiscount($data);
                $msg = _M(MSG_RECORD_UPDATED,$module);
            }
            else
            {
                $data->date = date(MASK_DATE_PHP . ' '. MASK_TIME_PHP);
                $ok  = $business->insertPayRollDiscount($data);
                $msg = _M(MSG_RECORD_INSERTED,$module);
            }
    
            if ( $ok )
            {
                $opts = array('payRollDiscountId' => $data->payRollDiscountId);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                if ( $function == 'update' )
                {
                    $caption = _M('Information',$module);
                    $MIOLO->information($msg, $goto);
                }
                else
                {
                    $opts    = array('event'    => 'tbBtnNew_click',
                                     'function' => 'insert');
    
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        
   } 
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'payRollDiscountId' => MIOLO::_request('payRollDiscountId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business  = $MIOLO->getBusiness($module, 'BusPayRollDiscount');
        $payRollDiscountId = MIOLO::_request('payRollDiscountId');

        $ok       = $business->deletePayRollDiscount($payRollDiscountId);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

}
?>
