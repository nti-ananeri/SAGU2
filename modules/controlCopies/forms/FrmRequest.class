<?php
/**
 *
 * @author Rafael Dutra [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Dutra [rdutra@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 27/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n $module, $m[4]
 * Copyleft (L) 2006- SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmRequest extends MForm
{
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
        }
        else
        {
            parent::__construct(_M('Update', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
        }

    }

    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:request'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $this->defaultButton = false;
        $fields[]  = $toolBar;

        $complete = 'serviceName, unitaryValue';
        if ( in_array($function,array('update','delete')) )
        {
            $business  = $MIOLO->getBusiness($module,'BusRequest');
            $requestId = MIOLO::_request('requestId');
            $data      = $business->getRequest($requestId);
            $fields[]  = new MTextLabel('requestId', $data->requestId, _M('Request id',$module));
            $complete = 'serviceName';

            if ($data->serviceId == 21)
            {
                $dataFax = $business->getRequestFax($requestId);
            }
        }

      
        $requestFax    = new MTextField('telephone', $this->getFormValue('telephone', $dataFax->telephone), _M('Telephone', $module) , 14);

        $sendedLabelS  = new MText('sendedLabelS', _M('Sended',$module) . '?');
        $sendedLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $sendedS       = new MRadioButtonGroup('sended', null, SAGU::listYesNo(1), $this->getFormValue('sended', $dataFax->sended), null, 'horizontal');
        $sendedS->setShowLabel(false);
        $tariff        = new MTextField('tariff', $this->getFormValue('tariff',$dataFax->tariff), _M('Tariff', $module), 14);

        $fields[]  = new MHiddenField('limbo', '');
        $serviceLabel  = new MText('serviceID', _M('Service code',$module).':');
        $serviceLabel->setWidth(FIELD_LABEL_SIZE);
        $serviceLabel->setClass('m-caption m-caption-required');
        $serviceID     = new MLookupTextField('serviceId', $this->getFormValue('serviceId', $data->serviceId),
                     '', FIELD_ID_SIZE, null, null, $complete, $module, 'Service', 'filler', null, true);
        $serviceID->setJsHint(_M('Enter the service code',$module));
        $serviceName   = new MTextField('serviceName', $this->getFormValue('serviceName',$data->serviceName), '', FIELD_DESCRIPTION_SIZE);
        $serviceName->setReadOnly(true);
        $validators[] = new MRequiredValidator('serviceName');
        
        $sectorLabel   = new MText('sectorId', _M('Sector code',$module).':');
        $sectorID      = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId),
                        '', FIELD_ID_SIZE, null, null, 'sectorName', $module,'Sector', null, null, true);
        $sectorID->setJsHint(_M('Enter the sector code',$module));
        $sectorName    = new MTextField('sectorName', $this->getFormValue('sectorName',$data->sectorName), '', FIELD_DESCRIPTION_SIZE);
        $sectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('sectorName');
        
        
        $centerLabel   = new MText('centerId', _M('Departament code',$module).':');
        $centerLabel->setWidth(FIELD_LABEL_SIZE);
        $centerID      = new MLookupTextField('centerId', $this->getFormValue('centerId',$data->centerId),
                        '', FIELD_ID_SIZE, null, null, 'centerName', $module, 'Center', null, null, true);
        $centerID->setJsHint(_M('Enter the center code',$module));
        $centerName    = new MTextField('centerName', $this->getFormValue('centerName',$data->centerName), '', FIELD_DESCRIPTION_SIZE);
        $centerName->setReadOnly(true);
        $validators[] = new MRequiredValidator('serviceName');

        $projectLabel  = new MText('projectId', _M('Project code',$module).':');
        $projectLabel->setWidth(FIELD_LABEL_SIZE);
        $projectID     = new MLookupTextField('projectId', $this->getFormValue('projectId',$data->projectId),
                        '', FIELD_ID_SIZE, null, null, 'projectName', $module, 'Project', null, null, true);
        $projectID->setJsHint(_M('Enter the project code',$module));
        $projectName   = new MTextField('projectName', $this->projectName->value, '', FIELD_DESCRIPTION_SIZE);
        $projectName->setReadOnly(true);
        $validators[] = new MRequiredValidator('projectName');
        
        
        $costLabel     = new MText('costIdS', _M('Cost Center code',$module).':');
        $costLabel->setWidth(FIELD_LABEL_SIZE);
        $costLabel->setClass('m-caption m-caption-required');
        $costcenterID  = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId),
                            '', FIELD_ID_SIZE, null, null, 'costName', $module,'CostCenter', null, null, true);
        $costcenterID->setJsHint(_M('Enter the cost center code',$module));
        $costName      = new MTextField('costName', $this->costName->value, '', FIELD_DESCRIPTION_SIZE);
        $costName->setReadOnly(true);
        $validators[] = new MRequiredValidator('costName');
        
        $personLabel   = new MText('personId', _M('Person code',$module).':');
        $personLabel->setWidth(FIELD_LABEL_SIZE);
        $personLabel->setClass('m-caption m-caption-required');
        $personID      = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId),
                        '', FIELD_ID_SIZE, null, null, 'personName', $module,'PhysicalPersonEmployee', null, null, true);
        $personID->setJsHint(_M('Enter the person code',$module));
        $personName    = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
        $personName->setReadOnly(true);
        $validators[] = new MRequiredValidator('personName');

        $password = new MPasswordField('password', $this->password->value, _M('Password',$module), 10);
        $password->setJsHint(_M('Enter the password',$module));
        $validators[] = new MRequiredValidator('password'); 

        $operatorSectorLabel = new MText('operatorSectorId', _M('Sector operator code',$module).':');
        $operatorSectorLabel->setWidth(FIELD_LABEL_SIZE);
        $operatorSectorLabel->setClass('m-caption m-caption-required');
        $operatorSectorID = new MLookupTextField('operatorSectorId', $this->getFormValue('operatorSectorId',$data->operatorSectorId),
                        '', FIELD_ID_SIZE, null, null, 'operatorName', $module,'Operator', null, null, true);
        $operatorSectorID->setJsHint(_M('Enter the operator code',$module));
        $operatorSectorName  = new MTextField('operatorName', $this->operatorName->value, '', FIELD_DESCRIPTION_SIZE);
        $operatorSectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('operatorName'); 
 
        $referringLabel = new MText('referringLabel', _M('Referring', $module).':');
        $referringLabel->setWidth(FIELD_LABEL_SIZE);
        $referringLabel->setClass('m-caption m-caption-required');
        $referringDescription = new MTextField('referring', $this->getFormValue('referring', $data->referring), '', FIELD_DESCRIPTION_SIZE);
        $referringDescription->setJsHint(_M('Referring',$module));
        $validators[] = new MRequiredValidator('referring');

        $operatorLabel = new MText('operatorLabel', _M('Operator', $module).':');
        $operatorLabel->setWidth(FIELD_LABEL_SIZE);
        $operatorLabel->setClass('m-caption m-caption-required');
        $operatorDescription = new MTextField('operator', $this->getFormValue('operator', $data->operator), '', FIELD_DESCRIPTION_SIZE);
        $operatorDescription->setJsHint(_M('Enter the operator',$module));
        $validators[] = new MRequiredValidator('operator');
        
        $hctService        = new MHContainer(null,array($serviceLabel, $serviceID,    $serviceName));
        $hctSector         = new MHContainer(null,array($sectorLabel,  $sectorID,     $sectorName)); 
        $hctCenter         = new MHContainer(null,array($centerLabel,  $centerID,     $centerName)); 
        $hctProject        = new MHContainer(null,array($projectLabel, $projectID,    $projectName));
        $hctCost           = new MHContainer(null,array($costLabel,    $costcenterID, $costName));
        $hctPerson         = new MHContainer(null,array($personLabel,  $personID,     $personName)); 
        $hctOperatorSector = new MHContainer(null,array($operatorSectorLabel,$operatorSectorID,$operatorSectorName));
        $hctReferring      = new MHContainer(null,array($referringLabel, $referringDescription));
        $hctOperator       = new MHContainer(null,array($operatorLabel, $operatorDescription));

        $pnlSectorCenterProject = new BaseGroup('pnlSectorCenterProject',_M('Name sector/center/project', $module),array($hctSector, $hctCenter, $hctProject),'horizontal','css');

        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]        = $divError;
        $fields[]        = new Separator();

        $fields[]  = new MHiddenField('requestId', MIOLO::_request('requestId'));

        $fields[]  = $hctService ;
        $fields[]  = new MTextField  ('unitaryValue', $this->getFormValue('unitaryValue', $data->unitaryValue), _M('Unitary value', $module),'14');
        $fields[]  = new MTextField  ('amount', $this->getFormValue('amount', $data->amount), _M('Amount', $module),'14');
        $fields[]  = new separator();
        $fields[]  = $pnlSectorCenterProject;
        $fields[]  = new separator();
        $fields[]  = $hctCost    ; 
        $fields[]  = $hctReferring;

        $fields[]  = $hctPerson  ;
        $fields[]  = $password;
        
        $fields[]  = $hctOperator;
        
        $fields[]  = $hctOperatorSector;

        $fields[]  = new separator();

        $fields[]  = $requestFax;
        $fields[]  = $tariff;
        $flds[]    = $sendedLabelS;
        $flds[]    = $sendedS;
        $hctSended = new MHContainer(null,$flds); // fields from requestFax
        $fields[]  = $hctSended;

        if ( $function == 'update' )
        {
        $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }

        $fields[]  = new separator();

        $serviceLabel->setWidth(FIELD_LABEL_SIZE);
        $sectorLabel->setWidth(FIELD_LABEL_SIZE);
        $centerLabel->setWidth(FIELD_LABEL_SIZE);
        $projectLabel->setWidth(FIELD_LABEL_SIZE);
        $costLabel->setWidth(FIELD_LABEL_SIZE);
        $personLabel->setWidth(FIELD_LABEL_SIZE);
        $operatorSectorLabel->setWidth(FIELD_LABEL_SIZE);


        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE+3);

    }

    function getTypesData()
    {
        $data->telephone        = $this->telephone->getValue();
        $data->sended           = $this->sended->getValue();
        $data->tariff           = $this->tariff->getValue();
        $data->serviceId        = $this->serviceId->getValue();
        $data->amount           = $this->amount->getValue();
        $data->sectorId         = $this->sectorId->getValue();
        $data->centerId         = $this->centerId->getValue();
        $data->projectId        = $this->projectId->getValue();
        $data->costCenterId     = $this->costCenterId->getValue();
        $data->referring        = $this->referring->getValue();
        $data->personId         = $this->personId->getValue();
        $data->operator         = $this->operator->getValue();
        $data->operatorSectorId = $this->operatorSectorId->getValue();
        $data->unitaryValue     = $this->unitaryValue->getValue();
        $data->requestId        = $this->requestId->getValue();
        return $data;
    }

    function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusRequest');

        //Valida somente por LDAP
        if ( false)//!@$this->manager->auth->Authenticate($data->personId, $this->password->value, false) )
        {
            $msg           = _M('Invalid password, please tries again',$module);
            $lblMsg        = new MText('lblMsg',$msg);
            $lblMsg->color = 'red';

            $fields[] = $lblMsg;
            $fields[] = new Separator('');

            $this->divError->addControl($fields);
            $this->page->onLoad('document.' . $this->name . '.password.focus();' );
        }
        else
        {
            if ( $function == 'update' )
            {
                $ok  = $business->updateRequest($data);
                $msg = _M(MSG_RECORD_UPDATED,$module);
            }
            else
            {
                $data->date = date(MASK_DATE_PHP . ' '. MASK_TIME_PHP);
                $ok  = $business->insertRequest($data);
                $msg = _M(MSG_RECORD_INSERTED,$module);
            }
    
            if ( $ok )
            {
                $opts = array('requestIdS' => $data->requestId);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                if ( $function == 'update' )
                {
                    $caption = _M('Information',$module);
                    $MIOLO->information($msg, $goto);
                }
                else
                {
                    $opts    = array('event'    => 'tbBtnNew_click',
                                    'function' => 'insert');
    
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
   } 
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'requestId'        => MIOLO::_request('requestId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business  = $MIOLO->getBusiness($module, 'BusRequest');
        $requestId = MIOLO::_request('requestId');

        $ok       = $business->deleteRequest($requestId);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

}
?>
