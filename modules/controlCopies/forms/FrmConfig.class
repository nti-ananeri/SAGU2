<?php

/**
 * Parameters table form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a config
 **/
class FrmConfig extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $moduleConfig = $_GET['moduleConfig'] ? $_GET['moduleConfig'] : $_POST['moduleConfig'];
            $parameter    = $_GET['parameter'] ? $_GET['parameter'] : $_POST['parameter'];
            $fields[]  = new MTextLabel('parameter', $parameter, _M('Parameter',$module));
            $fields[]  = new MHiddenField('parameter', $parameter);

            $business = $MIOLO->getBusiness('basic','BusConfig');
            $data     = $business->getConfig($moduleConfig, $parameter);
        }
        else
        {
            $parameter = new MTextField('parameter', $this->parameter->value, _M('Parameter',$module), 20);
            $parameter->setJsHint(_M('Enter the module parameter',$module));
            $validators[] = new MRequiredValidator('parameter');
            $fields[] = $parameter;
        }

        $configValue = new MMultiLineField('configValue', $this->getFormValue('configValue',$data->value), _M('Value',$module), 20, 5, 40);
        $configValue->setJsHint(_M('Enter the parameter value',$module));
        $fields[] = $configValue;
        
        $description = new MMultiLineField('description', $this->getFormValue('description',$data->description), _M('Description',$module), 40, 5, 40);
        $description->setJsHint(_M('Enter the parameter description',$module));
        $fields[] = $description;

        $business = $MIOLO->getBusiness('basic','BusConfig');
        $type = new MComboBox('type', $this->getFormValue('type',$data->type), _M('Field type',$module), $business->listTypes());
        $type->setJsHint(_M('Enter the field type',$module));
        $fields[] = $type;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( $validators )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(140);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( $function == 'update' )
        {
            $this->page->onLoad('document.' . $this->name . '.content.focus();');
        }
        else
        {
            $this->page->onLoad('document.' . $this->name . '.parameter.focus();');
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'value' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . '\') ? $this->getFormValue(\'' . $var . '\') : \'\';');
            }
        }
        $this->configValue->value = $this->getFormValue('configValue') ? $this->getFormValue('configValue') : '';
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'moduleConfig'=>MIOLO::_request('moduleConfig'),
                        'parameter'=>MIOLO::_request('parameter'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $gotoNo = SAGU::getStackBackUrl() ? SAGU::getStackBackUrl() : $MIOLO->getActionURL( $module, $action );
        $msg     = MSG_CONFIRM_RECORD_DELETE;
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness('basic', 'BusConfig');
        $ok = $business->deleteConfig(MIOLO::_request('moduleConfig'), MIOLO::_request('parameter'));

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information(MSG_RECORD_DELETED, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness('basic', 'BusConfig');

        if ( $function == 'update' )
        {
            $ok  = $business->updateConfig($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {
            $ok  = $business->insertConfig($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('configIdS'=>$data->configId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $module = MIOLO::getCurrentModule();
        $data = new CcpConfig();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'value' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->value        = $this->configValue->value;
        $data->moduleConfig = $module;

        return $data;
    }
}

?>
