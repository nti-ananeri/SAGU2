<?php
/**
 *
 * This file handles the connection and actions for sprExamProcessOccurrence table
 *
 * @author Rafael Dutra [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Dutra [rdutra@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n $module, $m[4]
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/

class FrmRequestFax extends MForm
{
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
    
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
        }
        else
        {
            parent::__construct(_M('Update', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler(); 
            $id = MIOLO::_request('requestId');
            $this->loadFields($id);
        }

    }

    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:requestfax'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $this->defaultButton = false;
        $fields[]  = $toolBar;

        $requestID = new MTextField('request', $this->getFormValue('request',$data->request), _M('Request Id') , 14);
        $fields[]   = $requestID;

        $requestFax = new MTextField('telephone', $this->getFormValue('telephone',$data->telephone), _M('Telephone') , 14);
        $fields[]   = $requestFax;

        $sendedLabelS = new MText('sendedLabelS', _M('Sended',$module) . '?');
        $sendedLabelS->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $sendedLabelS;

        $sendedS    = new MRadioButtonGroup('sended', null, SAGU::listYesNo(1), $data->sended, null, 'horizontal');
        $sendedS->setShowLabel(false);
        $flds[]     = $sendedS;
        $tariff     = new MTextField('tariff', $this->getFormValue('tariff',$data->tariff), _M('Tariff'), 14);
        $fields[]   = $tariff;
        $fields[]  = new MHiddenField('requestId', MIOLO::_request('requestId')); 

        $hctSended = new MHContainer(null,$flds);
        $fields[]  = $hctSended; 
        unset ($flds);

        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $this->setFields($fields);
        $filters->tariff     = $this->tariff->value;
    }

    function getTypesData()
    {
    $data[] = $this->requestId->value;
    $data[] = $this->request->value;
    $data[] = $this->telephone->value;
    $data[] = $this->sended->value;
    $data[] = $this->tariff->value;
    
    return $data;
    }

    function loadFields($id)
    {
    $MIOLO    = MIOLO::getInstance();
    $module   = MIOLO::getCurrentModule();
    $action   = MIOLO::getCurrentAction();          
    $function = MIOLO::_request('function');
                                                    
    $business = $MIOLO->getBusiness($module,'BusRequestFax');
    $data     = $business->getRequestFax($id);
                                                    
       $this->request   ->setValue($data[0][0]);    
       $this->telephone ->setValue($data[0][1]);    
       $this->sended    ->setValue($data[0][2]);
       $this->tariff    ->setValue($data[0][3]);
    }

    function tbBtnSave_click()
    {
    $MIOLO    = MIOLO::getInstance();
    $module   = MIOLO::getCurrentModule();
    $action   = MIOLO::getCurrentAction();
    $function = MIOLO::_request('function');

       if ($function == 'insert')
       {
       $business = $MIOLO->getBusiness($module,'BusRequestFax');
       $values   = $this->getTypesData();
       $data     = $business->insertRequestFax($values);
       $opt      = array('function' => 'insert');
       $msg      = $MIOLO->Information("Inserido com sucesso", $MIOLO->getActionURL($module,'main:register:requestfax', null, $opt));
       }

       elseif ($function == 'update')
       {
       $business = $MIOLO->getBusiness($module,'BusRequestFax');
       $values   = $this->getTypesData();
       $data     = $business->updateRequestFax($values);
       $opt      = array('function' => 'search');
       $msg      = $MIOLO->Information("Atualizado com sucesso", $MIOLO->getActionURL($module,'main:register:requestfax', null, $opt));
       }
   } 
    
    function tbBtnDelete_click ()   
    {
    $MIOLO    = MIOLO::getInstance();
    $module   = MIOLO::getCurrentModule();
    $action   = MIOLO::getCurrentAction();
    $function = MIOLO::_request('function');
    $id = MIOLO::_request('requestId');

       if ($function == 'delete')
       {
       $business = $MIOLO->getBusiness($module,'BusRequestFax');
       $values   = $this->getTypesData();
       $data     = $business->deleteRequestFax($values);
       $opt      = array('function' => 'search');
       $msg      = $MIOLO->Information("Removido com sucesso",$MIOLO->getActionURL($module,'main:register:requestfax', null, $opt));
       }
   }

}
?>
