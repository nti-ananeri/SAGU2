<?php

/**
 *
 * This file handles the connection and actions for sprClassification table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdClassification extends MGrid
{
    /**
     * Class constructor
     **/
    function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        $home   = 'main:process:classification';
        $module = MIOLO::_request('module');
        $selectiveProcessId = MIOLO::_request('selectiveProcessId');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */

        $columns = array(
                          new MGridColumn(null),
                          new MGridColumn(null),
                          new MGridColumn(_M('Unit description', $module),     'left', true, null, false, null, false),
                          new MGridColumn(null),
                          new MGridColumn(null),
                          new MGridColumn( _M('Course name', $module),         'left', true, null, true, null, true ),
                          new MGridColumn( _M('Vacant', $module),              'left', true, null, true, null, true ),
                          new MGridColumn(null)
                        );


        $url = $MIOLO->getActionURL($module,"$home");
        parent::__construct( null, $columns, $url, 0, 0, 'gridClassification' );

        $urlClassify = $MIOLO->getActionURL($module, $action, '', array('event'=>'tbBtnClassifyAllTheCourse:click', 'courseId'=>'#3#', 'courseVersion'=>'#4#', 'vacant'=>'#6#', 'unitIdGrid'=>'#1#', 'unitDescription'=>'#2#', 'turnId'=>'#7#'));
        $this->addActionText('classify', _M('Classify', $module), $urlClassify);

        $urlName = $MIOLO->getActionURL($module, $action, '', array('event'=>'tbListOption:click', 'optionNumber'=>$x+1, 'orderBy'=>'C.name', 'courseId'=>'#3#', 'courseVersion'=>'#4#', 'courseName'=>'#5#', 'vacant'=>'#6#', 'unitDescription'=>'#2#', 'turnId'=>'#7#'));
        $this->addActionText('name', 'A-Z', $urlName);

        $businessSelectiveProcess = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcess = $businessSelectiveProcess->getSelectiveProcess($selectiveProcessId);

        for ( $x=0; $x < $selectiveProcess->optionsNumber; $x++ )
        {
            $urlOption = $MIOLO->getActionURL($module, $action, '', array('event'=>'tbListOption:click', 'optionNumber'=>$x+1, 'courseId'=>'#3#', 'courseVersion'=>'#4#', 'courseName'=>'#5#', 'vacant'=>'#6#', 'unitDescription'=>'#2#', 'turnId'=>'#7#'));
            $this->addActionText('classify', ($x+1).'ª', $urlOption);
        }

        $this->setIsScrollable();

        $this->eventHandler();

    }

}

?>
