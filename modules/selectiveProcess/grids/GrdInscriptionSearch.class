<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdInscriptionSearch extends MGrid
{
	/**
	 * Class constructor
	 **/
	function __construct($filters)
	{
		$MIOLO  = MIOLO::getInstance();
		$home   = 'main:register:inscription';
		$module = MIOLO::_request('module');

		/*
		 * MGridColumn constructor parameters:
		 *    $title = ''
		 *    $align = 'left'
		 *    $nowrap = false
		 *    $width = 0
		 *    $visible = true
		 *    $options = null
		 *    $order = false
		 *    $filter = false
		 */

		$columns = array(
		new MGridColumn( null ),
		new MGridColumn( _M('Selective process id', $module),     'right', true, null, true, null, true ),
		new MGridColumn( _M('Person id', $module),                'right', true, null, true, null, true ),
		new MGridColumn( _M('Person name', $module),              'left', true, null, true, null, true ),
		new MGridColumn( _M('City exam', $module),                'right', true, null, true, null, true ),
		new MGridColumn( _M('City name', $module),                'left', true, null, true, null, true ),
		new MGridColumn( _M('Language id', $module),              'right', true, null, true, null, true ),
		new MGridColumn( _M('Language description', $module),     'left', true, null, true, null, true ),
		new MGridColumn( _M('Vacancy occurrence id', $module),    'right', true, null, true, null, true ),
		new MGridColumn( _M('Course version', $module),           'right', true, null, true, null, true ),
		new MGridColumn( _M('Course id', $module),                'right', true, null, true, null, true ),
		new MGridColumn( _M('Course name', $module),              'left', true, null, true, null, true ),
		new MGridColumn( _M('Option number', $module),            'right', true, null, true, null, true ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( null ),
		new MGridColumn( _M('Is canceled', 'academic'),              'center', true, null, true, null, true )
		);

		$opts = array('function'           => 'update',
                      'inscriptionId'      => '%0%');
		$href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );
		$opts = array('function'           => 'delete',
                      'inscriptionId'      => '%0%',
                      'event'              => 'tbBtnDelete_click');
		$href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

		// this foreach is necessary until the getActionURL function is
		// able to handle an object parameter
		unset($opts);
		foreach ( $filters as $k => $v )
		{
			$opts[$k] = $v;
		}
		$url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
		parent::__construct( null, $columns, $url, LISTING_NREGS, 0, 'gridInscriptionSearch' );

		$this->setIsScrollable();

		$this->addActionUpdate( $href_edit );
		$this->addActionDelete( $href_delete );

		$this->setRowMethod($this, 'myRowMethod');

		$this->eventHandler();
	}

	public function myRowMethod($i, $row, $actions, $columns )
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();
		$action = MIOLO::getCurrentAction();

		if ( strlen((string)$row[0]) > 0 )
		{
			$actions[0]->enabled = true;
			$actions[1]->enabled = true;
		}
		else
		{
			$actions[0]->enabled = false;
			$actions[1]->enabled = false;
		}
	}



}

?>
