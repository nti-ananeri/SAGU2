<?php

/**
 * Place occurrence form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmPlaceOccurrence extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $selectiveProcessIdOld = $_GET['selectiveProcessId'] ? $_GET['selectiveProcessId'] : $_POST['selectiveProcessIdOld'];
            $placeIdOld = $_GET['placeId'] ? $_GET['placeId'] : $_POST['placeIdOld'];
            $fields[]   = new MHiddenField('selectiveProcessIdOld', $selectiveProcessIdOld);
            $fields[]   = new MHiddenField('placeIdOld', $placeIdOld);

            $business = $MIOLO->getBusiness($module,'BusPlaceOccurrence');
            $data     = $business->getPlaceOccurrence($selectiveProcessIdOld, $placeIdOld);
        }

/*        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), 10, null, null, 'selectiveProcessDescription', $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), _M('Description',$module), 40);
        $selectiveProcessDescription->setReadOnly(true);
        $fields[]                    = $selectiveProcessDescription; */
        
        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

        $business     = $MIOLO->getBusiness($module,'BusPlace');
        $placeId      = new MComboBox('placeId', $this->getFormValue('placeId', $data->placeId), _M('Place id',$module), $business->listplace());
        $fields[]     = $placeId;
        $validators[] = new MRequiredValidator('placeId');

//         $isHighSchoolLabel = new MText('isHighSchoolLabel', _M('Is high school',$module) . ':');
//         $isHighSchoolLabel->setWidth(FIELD_CONTAINER_SIZE);
// 
//         $isHighSchool = $this->GetFormValue('isHighSchool',$data->isHighSchool);
//         if (! isset($isHighSchool) )
//         {
//             //default false
//             $isHighSchool = 'f';
//         }
//         $isHighSchool = new MRadioButtonGroup('isHighSchool', '', SAGU::listYesNo(1), $isHighSchool, null, 'horizontal');
//         $isHighSchool->SetShowLabel(false);
// 
//         $hctIsHighSchool = new MHContainer('hctIsHighSchool', array($isHighSchoolLabel, $isHighSchool));
//         $fields[]  = $hctIsHighSchool;
// 
// 
//         $isInternetLabel = new MText('isInternetLabel', _M('Is internet',$module) . ':');
//         $isInternetLabel->setWidth(FIELD_CONTAINER_SIZE);
// 
//         $isInternet = $this->GetFormValue('isInternet',$data->isInternet);
//         if (! isset($isInternet) )
//         {
//             //default false
//             $isInternet = 'f';
//         }
//         $isInternet = new MRadioButtonGroup('isInternet', '', SAGU::listYesNo(1), $isInternet, null, 'horizontal');
//         $isInternet->SetShowLabel(false);
// 
//         $hctIsInternet = new MHContainer('hctIsInternet', array($isInternetLabel, $isInternet));
//         $fields[]  = $hctIsInternet;


        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));

        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessOccurrenceDescription.focus();');

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'                  => 'tbBtnDelete_confirm',
                        'function'               => 'delete',
                        'selectiveProcessId'     => MIOLO::_request('selectiveProcessId'),
                        'placeId'                => MIOLO::_request('placeId'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusPlaceOccurrence');
        $ok = $business->deletePlaceOccurrence($this->selectiveProcessId->value, $this->placeId->value);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusPlaceOccurrence');

        if ( $function == 'update' )
        {
            $ok  = $business->updatePlaceOccurrence($data);
            $msg = _M(MSG_RECORD_UPDATED,$module);
        }
        else
        {
            $ok  = $business->insertPlaceOccurrence($data);
            $msg = _M(MSG_RECORD_INSERTED,$module);
        }

        if ( $ok )
        {
            $opts = array('selectiveProcessIdS' => $data->selectiveProcessId,
                          'placeIdS'            => $data->placeId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new SprPlaceOccurrence();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->selectiveProcessIdOld     = $this->selectiveProcessIdOld->value;
        $data->placeIdOld = $this->placeIdOld->value;

        return $data;
    }
}

?>
