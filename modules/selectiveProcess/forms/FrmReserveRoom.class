<?php

/**
 * Reserve room form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *         Hélio H. R. Guimarães
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a reserve room
 **/
class FrmReserveRoom extends MForm
{
    private $home;

    private $list;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        parent::__construct(_M('Reserve room', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $isSetGrig  = MIOLO::_request('isSetGrig');

        if ( ! isSet($selectiveProcessId) )
        {
            $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        }

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');

        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process',$module), $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));

        $fields[]     = $selectiveProcessId;
        $validators[] = new MRequiredValidator('selectiveProcessId');
        $selectiveProcessId->setAutoPostBack('true');

        $fields[]     = new MSeparator();
        $fields[]     = new MSeparator();

        if ( strlen((string)$selectiveProcessId->value) > 0 )
        {
            $dataSelectiveProcess = $business->getSelectiveProcess($selectiveProcessId->value);

            $msg          = new MTextLabel('msg', _M('Below, select the order that the fields will be grouped by room', $module));
            $cntMsg       = new MHContainer('cntMsg', array($msg));

            $cntMsg->setDisposition('center');

            $fields[]     = $cntMsg;

            $fields[]     = new MSeparator();
            $fields[]     = new MSeparator();

            $opts = array('1'=>'1 - ' . _M('First criteria', $module));

            if ( ($dataSelectiveProcess->isLanguage == DB_TRUE) && ($dataSelectiveProcess->isHighSchool == DB_TRUE) )
            {
                $opts['2'] = '2 - ' . _M('Second criteria', $module);
                $opts['3'] = '3 - ' . _M('Thirth criteria', $module);
            }
            elseif ( ($dataSelectiveProcess->isLanguage == DB_TRUE) || ($dataSelectiveProcess->isHighSchool == DB_TRUE) )
            {
                $opts['2'] = '2 - ' . _M('Second criteria', $module);
            }

            if ( $dataSelectiveProcess->isHighSchool == DB_TRUE )
            {
                $highSchoolOrder = new MSelection('highSchoolOrder', $this->getFormValue('highSchoolOrder', $data->highSchoolOrder), _M('High school',$module), $opts);
                $highSchoolOrder->setJsHint(_M('Enter the high school order',$module));
                $fields[]     = $highSchoolOrder;
                $validators[] = new MRequiredValidator('highSchoolOrder');
            }

            if ( $dataSelectiveProcess->isLanguage == DB_TRUE )
            {
                $languageOrder = new MSelection('languageOrder', $this->getFormValue('languageOrder', $data->languageOrder), _M('Language',$module), $opts);
                $languageOrder->setJsHint(_M('Enter the language order',$module));
                $fields[]     = $languageOrder;
                $validators[] = new MRequiredValidator('languageOrder');
            }

            $internetOrder = new MSelection('internetOrder', $this->getFormValue('internetOrder', $data->internetOrder), _M('Internet',$module), $opts);
            $internetOrder->setJsHint(_M('Enter the internet order',$module));
            $fields[]     = $internetOrder;
            $validators[] = new MRequiredValidator('internetOrder');

            $fields[] = new MSeparator();

            $alphabeticOrderLabel = new MText('alphabeticOrderLabel', _M('Use alphabetic order',$module) . '?');
            $alphabeticOrderLabel->setWidth(FIELD_CONTAINER_SIZE);

            $alphabeticOrder = $this->GetFormValue('alphabeticOrder', $data->alphabeticOrder);

            if ( ! isset($alphabeticOrder) )
            {
                $alphabeticOrder = DB_FALSE;
            }

            $alphabeticOrder = new MRadioButtonGroup('alphabeticOrder', '', SAGU::listYesNo(1), $alphabeticOrder, null, 'horizontal');
            $alphabeticOrder->SetShowLabel(false);
            $alphabeticOrder->setJsHint(_M('Choice if is to use alphabetic order',$module));

            $hctAlphabeticOrder = new MHContainer('hctAlphabeticOrder', array($alphabeticOrderLabel, $alphabeticOrder));
            $fields[]  = $hctAlphabeticOrder;

            $fields[] = new MSeparator();
            $fields[] = new MButton('submit_button', _M('Submit', $module));
            $fields[] = new MSeparator();

            $divError = new MDiv('divError', null, null, 'align=center');
            $fields[] = $divError;
        }


        $this->setFields($fields);

        //###GRID///is_array($amount) ?  $this->grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }


    public function submit_button_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $selectiveProcessId      = MIOLO::_request('selectiveProcessId');
        $highSchoolOrder         = MIOLO::_request('highSchoolOrder');
        $languageOrder           = MIOLO::_request('languageOrder');
        $internetOrder           = MIOLO::_request('internetOrder');
        $alphabeticOrder         = MIOLO::_request('alphabeticOrder');

        $highSchoolOrder === NULL ? NULL : $args[] = $highSchoolOrder;
        $languageOrder   === NULL ? NULL : $args[] = $languageOrder;
        $internetOrder   === NULL ? NULL : $args[] = $internetOrder;

        $generateMsgError = false;

        for ( $x=0; $x < count($args); $x++ )
        {
            for ( $y=0; $y < count($args); $y++ )
            {
                if ( $x != $y )
                {
                    if ( $args[$x] == $args[$y] )
                    {
                        $generateMsgError = true;
                        break;
                        break;
                    }
                }
            }
        }


        if ( $generateMsgError === true )
        {
            $lblMsg1 = new MText('lblMsg1', _M('Order of fields need are different', $module));
            $lblMsg1->color = 'red';

            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            switch ($highSchoolOrder)
            {
                case 1: $auxOp1 = 'A.isHighSchool, '; break;
                case 2: $auxOp2 = 'A.isHighSchool, '; break;
                case 3: $auxOp3 = 'A.isHighSchool, '; break;
                case 4: $auxOp4 = 'A.isHighSchool, '; break;
            }

            switch ($languageOrder)
            {
                case 1: $auxOp1 = 'A.languageId, '; break;
                case 2: $auxOp2 = 'A.languageId, '; break;
                case 3: $auxOp3 = 'A.languageId, '; break;
                case 4: $auxOp4 = 'A.languageId, '; break;
            }

            switch ($internetOrder)
            {
                case 1: $auxOp1 = 'A.isInternet, '; break;
                case 2: $auxOp2 = 'A.isInternet, '; break;
                case 3: $auxOp3 = 'A.isInternet, '; break;
                case 4: $auxOp4 = 'A.isInternet, '; break;
            }

            $auxSelect = $auxOp1 . $auxOp2 . $auxOp3 . $auxOp4;
            $auxSelect = substr($auxSelect, 0, (strlen((string)$auxSelect)-2));

            $filters1->auxSelect          = $auxSelect;
            $filters1->selectiveProcessId = $selectiveProcessId;
            $filters1->alphabeticOrder    = $alphabeticOrder;

            //Setá como nulo o campo do placeRoomId da sprInscription
            $businessInscription = $MIOLO->GetBusiness($module, 'BusInscription');
            $businessInscription->setPlaceRoomInscription($selectiveProcessId, null, null);

            $listInscription = $businessInscription->listInscriptionReserveRoom($filters1);

            //PlaceRoom
            $businessPlaceRoom  = $MIOLO->GetBusiness($module, 'BusPlaceRoom');
            $listPlaceRoom      = $businessPlaceRoom->listPlaceRoomInscription($selectiveProcessId, $auxSelect);


            foreach($listPlaceRoom as $key1 => $row1)
            {
                //Zera as vagas ocupadas de uma determinada sala
                $listPlaceRoom[$key1][count($row1)] = 0;
            }

            $countCaract = substr_count($auxSelect, ',');

            foreach ( $listInscription as $key1 => $row1 ) // Percorre os inscritos, e aloca eles 
                                                           // em salas conforme CRITÉRIOS
            {
                foreach ( $listPlaceRoom as $key2 => $row2) //Percorre todas as salas
                {
                    $isInsert = TRUE;

                    if ( ($row2[count($row2)-1] < $row2[1]) && ($row1[1] == $row2[2]) ) // Se ainda tem vagas na sala e a cidade e a mesma
                    {
                        for ( $x = 0; $x <= $countCaract; $x++ ) // Verifica as restri
                                                                 //ções (ens.medio, internet)
                        {
                            if ( $row1[2+$x] == NULL ) //No caso de neces. especial nula
                            {
                                $listInscription[$key1][2+$x] = DB_FALSE;
                            }

                            if ( !($row1[2+$x] == $row2[3+$x]) && $isInsert) //Algum dos dados é diferente
                            {
                                $isInsert = FALSE;
                            }
                        }

                        if ( ($isInsert === TRUE) && ($row2[count($row2)-1] < $row2[1]))
                        {
                            $auxRoom[$row2[0]] .= $row1[0] . ', '; //Inseri lista para inserir posteriormente
                            $listPlaceRoom[$key2][count($row2)-1] = $listPlaceRoom[$key2][count($row2)-1] + 1;
                            break;
                        }
                    }
                    else
                    {
                        $isInsert = FALSE;
                    }
                }

                if ( $isInsert == false )
                {
                    //Se algum dos critérios estiver diferente, entra neste vetor
                    $auxInscription[] = $row1;
                }

            }

            //Neste for, tem alguns trechos de código comentado, devido
            //ao hoje utilizarmos o sistema de, se sobrou vagas em qualquer sala
            //independente do critério, inseriormos as pessoas lá.
            foreach ($auxInscription as $key1 => $row1) // Percorre os inscritos, e aloca eles em salas
                                                        // que tem lugar, independente de critério
            {
                foreach ( $listPlaceRoom as $key2 => $row2) //Percorre todas as salas
                {
                    $isInsert = TRUE;

                    if ( ($row2[count($row2)-1] < $row2[1]) && ($row1[1] == $row2[2]) ) // Se ainda tem vagas na sala
                    {
//                         for ( $x = 0; $x <= $countCaract; $x++ )
//                         {
//                             if ( $row1[2+$x] == NULL ) //No caso de neces. especial nula
//                             {
//                                 $row1[2+$x] = DB_FALSE;
//                             }
// 
//                             if ( $row1[2+$x] == $row2[2+$x] ) //Algum dos dados é igual
//                             {
//                                 $isInsert = FALSE;
//                                 break;
//                             }
//                         }

                        if ( $isInsert && ($row2[count($row2)-1] < $row2[1]))
                        {
                            $auxRoom[$row2[0]] .= $row1[0] . ', '; //Inseri lista para 
                                                                   //inserir posteriormente
                            $listPlaceRoom[$key2][count($row2)-1] = $listPlaceRoom[$key2][count($row2)-1] + 1;
                            break;
                        }
                    }
                    else
                    {
                        $isInsert = FALSE;
                    }
                }

                if ( $isInsert == false )
                {
                    $auxInscription1[] = $row1[0];
                }
            }

            foreach ( $auxRoom as $key1 => $row1)
            {
                $auxRoom[$key1] = substr($row1, 0, strlen((string)$row1)-2);
            }


            //UPDATE REGISTER IN DATABASE
            $businessInscription->beginTransaction();

            foreach ($auxRoom as $placeRoomId => $inscriptionId)
            {
                //$inscriptionId = substr($inscriptionId, 0, (strlen((string)$inscriptionId)-2));

                $ok = $businessInscription->setPlaceRoomInscription($selectiveProcessId, $inscriptionId, $placeRoomId);
            }

            $businessInscription->commit();
         }

        $this->grdResults = $MIOLO->getUI()->getGrid($module,'GrdReserveRoom');

        $businessInscription = $MIOLO->GetBusiness('selectiveProcess', 'BusInscription');
        $amount = $businessInscription->listAmountInscriptionRoom($selectiveProcessId);

        $this->grdResults->setData($amount);

        $this->addField($this->grdResults);
    }
}

?>
