<?php

/**
 * Other listings form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 26/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmComplementaryInformation extends MForm
{
    private $home;
    
    var $business;
    
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusComplementaryInformation');
        $this->home   = $data->home;

        parent::__construct(_M('Complementary information', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $this->setAction('main');

        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        $event          = MIOLO::_request('event');
        $cityExam       = MIOLO::_request('cityExam');
        $classification = MIOLO::_request('classification');
        $unit           = MIOLO::_request('unit');
        $workPhone      = MIOLO::_request('workPhone');
        $cityExam       = MIOLO::_request('cityExam');
        $cityExam       = MIOLO::_request('cityExam');
        $cityExam       = MIOLO::_request('cityExam');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Complementary information', $this->home, 'complementaryInformation-16x16.png', true);
        }
        //fim favoritos
        $fields[] = $toolBar;

        // Selective process id 
        $business                = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessIdLabel = new MLabel(_M('Selective process id', $module).':');
        $selectiveProcessIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $selectiveProcessId      = new MSelection('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[]            = new MRequiredValidator('selectiveProcessId', _M('Selective process id', $module)); 
        $fields[]                  = new MHContainer('hctSelectiveProcessId', array($selectiveProcessIdLabel, $selectiveProcessId));

        // City id
        $cityIdLabel = new MLabel(_M('City id', $module).':');
        $cityIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $cityId      = new MLookupTextField('cityId', $this->getFormValue('cityId', $data->cityId), '', FIELD_ID_SIZE, null, null, array('cityName'), 'basic', 'City', null, null, true);
        $cityId->setJsHint(_M('Enter the city id', $module));
        $cityName    = new MTextField('cityName', $this->getFormValue('cityName', $data->cityName), '', FIELD_DESCRIPTION_SIZE);
        $cityName->setReadOnly(true);
        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array($cityIdLabel, $cityId, $cityName));
        $fields[] = $hctSelectiveProcess;
        $fields[] = new MSeparator('');            

        // Report option
        $reportOptions = array( array(_M('Origin',             $module), 1),
                                array(_M('Age of candidates',  $module), 2),
                                array(_M('Enrolled by city',   $module), 3),
                                array(_M('Classified by city', $module), 4)
                               );

        $data->reportOption = strlen((string)$data->reportOption)>0 ? $data->reportOption : 1;
        
        $reportOptionLabel = new MLabel(_M('Report option', $module).':');
        $reportOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $reportOption = new MRadioButtonGroup('reportOption', '', $reportOptions, $this->getFormValue('reportOption', $data->reportOption));
        $reportOption->setShowLabel(false);
        $fields[] = new MHContainer('hctReportOption', array($reportOptionLabel, $reportOption));

        $sep1 = new MSeparator('<hr>');
        $sep1->setWidth('99%');
        $fields[] = $sep1;
        $fields[] = new MButton('btnGenerate', _M('Generate', $module), 'SUBMIT');
        $fields[] = new MSeparator('');
        $this->setValidators($validators);

        $this->page->setAction($MIOLO->getActionURL($module, $action));
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }


    /*
     *
     * Function to handle generate button click
     *
     */
    public function btnGenerate_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $reportOption       = $this->getFormValue('reportOption');
        $cityId             = $this->getFormValue('cityId');
        $selectiveProcessId = $this->getFormValue('selectiveProcessId');

        if ( strlen((string)$reportOption)>0)
        {
            if ( $reportOption == 1 )
            {
                $gridData   = $this->business->origin($selectiveProcessId, $cityId);
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryInformationOrigin', '', $filters);
                $grdResults->setData($gridData);
                $grdResults->setClose(null);
            }

            if ( $reportOption == 2 )
            {
                $gridData   = $this->business->ageOfCandidates($selectiveProcessId, $cityId);
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryInformationAge', '', $filters);
                $grdResults->setData($gridData);
                $grdResults->setClosE(null);
            }
            
            if ( ( $reportOption == 3 || $reportOption == 4 ) && $cityId == null )
            {
                $msg           = _M('Please, select the city',$module);
                $lblMsg        = new MText('lblMsg',$msg);
                $lblMsg->color = 'red';
                $this->addField($lblMsg);
                $this->addField(new MSeparator(''));
            }
            
            if ( $reportOption == 3 && $cityId != null )
            {
                $gridData   = $this->business->enrolled($selectiveProcessId, $cityId);
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryInformationEnrolled', '', $filters);
                $grdResults->setData($gridData);
                $grdResults->setClose(null);
            }

            if ( $reportOption == 4 && $cityId != null )
            {
                unset($flds2);
                $txtData1 = $this->business->classified ($selectiveProcessId, $cityId);
                $txtData[] = '';
                $txtData[] = array('<b>'._M('Classified',$module).'</b>', '', '', '', '', '' );
                $txtData[] = '';

                foreach ( $txtData1 as $value1 )
                {
                    if ( ($value1[5] == 3) && (!$flagDesclassified)) //Desclassificado
                    {
                        $txtData[] = '';
                        $txtData[] = array('<b>'._M('Desclassified',$module).'</b>', '', '', '', '', '' );
                        $txtData[] = '';
                        $flagDesclassified = true;
                    }

                    if ( ($value1[5] == 2) && (!$flagSuplied) ) //Excedente
                    {
                        $txtData[] = '';
                        $txtData[] = array('<b>'._M('Suplied',$module).'</b>', '', '', '', '', '' );
                        $txtData[] = '';
                        $flagSuplied = true;
                    }

                    $txtData[] = $value1;
                }
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryInformationByCity', '', $filters);
                $grdResults->setData($txtData);
                $grdResults->setClose(null);
            }
        }
        if ($grdResults)
        {
            $this->addField($grdResults);
        }
    }
}
?>
