<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Form to search the basInscription table
 */
class FrmInscriptionSearch extends MForm
{
	private $home;
	private $module;

	/**
	 * Class constructor
	 */
	function __construct($data)
	{
		$this->module = 'basic';
		$module = $this->module;
		$this->home   = $data->home;
		parent::__construct(_M('Search',$module));
		// hide the 'Submit' button
		$this->setShowPostButton(false);
		$this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
		$this->eventHandler();

	}

	/**
	 *  Default method to define fields
	 */
	public function createFields()
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();
		$action = MIOLO::getCurrentAction();

		$toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
		$toolBar->disableButton('tbBtnSave');
		$toolBar->disableButton('tbBtnDelete');
		//        $toolBar->disableButton('tbBtnPrint');

		//favoritos
		$enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
		$disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
		$url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
		$toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

		if ( MIOLO::_request('event') == 'bookmark' )
		{
			$MIOLO->getClass('basic', 'access');
			access::insert('Inscription', $this->home, 'otherListings-16x16.png', true);
		}
		//fim favoritos

		$fields[] = $toolBar;

		$business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');         $selectiveProcessIdS = new MSelection('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
		$selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
		$selectiveProcessIdS->addAttribute('onChange','document.' . $this->getName() . '.submit()' );
		$fields[]           = $selectiveProcessIdS;

		$personLabelS = new MText('personLabelS', _M('Person',$module) . ':');
		$personLabelS->setWidth(FIELD_CONTAINER_SIZE);

		$personIdS  = new MLookupTextField('personIdS', $this->personIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, ('personNameS') , 'basic', 'PhysicalPerson', null, null, true);
		$personIdS->setJsHint(_M('Enter the person code',$module));
		$validators[] = new MIntegerValidator('personIdS', '', 'optional');

		$personNameS  = new MTextField('personNameS', $this->getFormValue('personNameS', $data->personNameS), '', FIELD_DESCRIPTION_SIZE);


		$hctPerson = new MHContainer('hctPerson', array( $personLabelS, $personIdS, $personNameS) );
		$hctPerson->setShowLabel(true);
		$fields[]  = $hctPerson;

		$cityExamLabelS = new MText('cityExamLabelS', _M('City exam',$module) . ':');
		$cityExamLabelS->setWidth('137');

		$cityExamS  = new MLookupTextField('cityExamS', $this->cityExamS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null, ('cityNameS, stateIdS') , 'basic', 'City', null, null, true);
		$cityExamS->setJsHint(_M('Enter the city exam',$module));
		$validators[] = new MIntegerValidator('cityExamS', '', 'optional');

		$cityNameS  = new MTextField('cityNameS', $this->cityNameS->value, '', FIELD_DESCRIPTION_SIZE);

		$hctCityExam = new MHContainer('hctCityExam', array( $cityExamLabelS, $cityExamS, $cityNameS) );
		$hctCityExam->setShowLabel(true);
		$fields[]  = $hctCityExam;

		$business                = $MIOLO->getBusiness($module,'BusLanguage');
		$languageIdS = new MComboBox('languageIdS', $this->languageIdS->value, _M('Foreign language id',$module), $business->listLanguage());
		$fields[]                = $languageIdS;
		$validators[] = new MIntegerValidator('languageIdS', '', 'optional');

		$courseOccurrenceIdS  = new MLookupTextField('courseOccurrenceIdS' . $x, $this->getFormValue('courseOccurrenceIdS', $this->inscriptionData->courseOccurrenceIdS), _M('Vacancy occurrence id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, ('limbo, limbo, limbo, courseNameS' . $x) , $module, 'CourseOccurrence', null, null, true);
		$fields[]             = $courseOccurrenceIdS;
		$validators[] = new MIntegerValidator('courseOccurrenceIdS', '', 'optional');

		$courseVersionS     = new MTextField('courseVersionS' . $x, $this->courseVersionS->value, _M('Course version', $module), 8);
		$fields[]           = $courseVersionS;

		$courseIdS          = new MTextField('courseIdS' . $x, $this->courseVersionS->value, _M('Course id', $module), 8);
		$fields[]           = $courseIdS;

		$courseNameS        = new MTextField('courseNameS' . $x, $this->courseNameS->value, _M('Course name', $module), FIELD_DESCRIPTION_SIZE);
		$fields[]           = $courseNameS;

		$optionNumberS      = new MTextField('optionNumberS' . $x, $this->optionNumberS->value, _M('Option number', $module), 8);
		$fields[]           = $optionNumberS;
		$validators[] = new MIntegerValidator('optionNumberS', '', 'optional');

		//Cancelamento de Inscrição
		$fields[]        = new Separator('');
		$isCanceledLabel = new MText('isCanceledLabel', _M('Is canceled','academic').'?');
		$isCanceledLabel->setWidth(FIELD_LABEL_SIZE);
		//$data->isCanceled = $this->GetFormValue('isCanceledLabel',$data->isCanceledLabel);
		//echo '<pre>'; print_r($data); die();
		$isCanceledS = new MRadioButtonGroup('isCanceledS', '', SAGU::listYesNo('1'),  $this->getFormValue('isCanceledS', ''), null, 'horizontal');
		$isCanceledS->SetShowLabel(false);

		$hctIsCanceled = new MHContainer('hctIsCanceled', array($isCanceledLabel, $isCanceledS));

		$fields[] = $hctIsCanceled;

		$fields[] = new MButton('btnSearch',_M('Search',$module));

		$this->setFields($fields);
		$this->setValidators($validators);

		// get filters values
		//$filters->inscriptionId     = $this->inscriptionIdS->value;
		$filters->selectiveProcessId    = $this->selectiveProcessIdS->value;
		$filters->personId              = $this->personIdS->value;
		$filters->personName            = $this->personNameS->value;
		$filters->cityExam              = $this->cityExamS->value;
		$filters->cityName              = $this->cityNameS->value;
		$filters->languageId            = $this->languageIdS->value;
		$filters->languageDescription   = $this->languageDescriptionS->value;
		$filters->courseOccurrenceId    = $this->courseOccurrenceIdS->value;
		$filters->courseVersion         = $this->courseVersionS->value;
		$filters->courseId              = $this->courseIdS->value;
		$filters->courseName            = $this->courseNameS->value;
		$filters->optionNumber          = $this->optionNumberS->value;
		$filters->isCanceled            = $this->isCanceledS->value;

		$grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdInscriptionSearch', $filters);
		$business   = $this->manager->getBusiness($module,'BusInscription');
		$data       = $business->searchInscription($filters);

		if ( is_array($data) && (count($data) > 0) )
		{
			$data1Iterador = 0;

			foreach ( $data as $key1 => $value1 )
			{
				if ( $value1[0] == $oldInscriptionId )
				{
					//Mesmo inscrito
					for ( $x=8 ; $x < count($value1); $x++ )
					{
						$data1[$data1Iterador][$x] = $data[$key1][$x];
					}
				}
				else
				{
					//outro inscriptionId
					for ( $x=7 ; $x >= 0; $x-- )
					{
						$data1[$data1Iterador][$x] = $data[$key1][$x];
					}

					$data1Iterador++;

					for ( $x=8 ; $x < count($value1); $x++ )
					{
						$data1[$data1Iterador][$x] = $data[$key1][$x];
					}
				}

				$data1Iterador++;

				$oldInscriptionId = $value1[0];
			}

			$grdResults->setData($data1);
		}


		$this->addField($grdResults);
		$this->setLabelWidth(FIELD_LABEL_SIZE);
	}
}
?>
