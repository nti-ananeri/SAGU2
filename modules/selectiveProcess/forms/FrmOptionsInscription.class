<?php

/**
 * Inscription form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmOptionsInscription extends MForm
{
    private $optionsNumber;
    private $inscriptionData;
    private $selectiveProcess;
    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->inscriptionData = unserialize(urldecode(stripslashes($MIOLO->session->getValue('inscriptionData'))));

        parent::__construct( _M('Step', $module) . ' 4 ' . _M('of', $module) .  ' ' . $this->inscriptionData->stepTotal . ' -> ' . _M('Informations', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

/**
* Default method to define fields
**/

    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fontText = new MText('fontText', "<font color=" . INSCRIPTION_TEXT_COLOR . ">");
        $fields[] = $fontText;
        
        if ( strlen((string)$this->inscriptionData->inscription->selectiveProcessId) > 0 )
        {
            //OPTIONS
            $businessSelectiveProcess    = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
            $filters->selectiveProcessId = $this->inscriptionData->inscription->selectiveProcessId;
            $selectiveProcess            = $businessSelectiveProcess->searchSelectiveProcess($filters);

            $this->optionsNumber = $selectiveProcess[0][7];

            for ($x = 1; $x <= $this->optionsNumber; $x++)
            {
                $flds2[]   = new Separator('');
                $auxLabel  = new MLabel( _M('Option', $module) . ' ' . ($x) . ' ', 'red');

                if ( $x <= $this->inscriptionData->inscription->optionsNumberRequired )
                {
                    //Esta opção é obrigatória
                    $auxLabel->setClass('m-caption m-caption-required');
                }

                $flds2[]   = $auxLabel;

                $businessCourseOccurence = $MIOLO->getBusiness($module,'BusCourseOccurrence');
                $businessCourse          = $MIOLO->getBusiness('academic','BusCourse');
                $businessTurn            = $MIOLO->getBusiness('basic','BusTurn');

                eval('$courseOccurrenceId'.$x.' = new MSelection(\'courseOccurrenceId'. $x .'\', $this->getFormValue(\'courseOccurrenceId'. $x .'\', $this->inscriptionData->inscriptionOption->o'.$x.'->courseOccurrenceId), _M(\'Course\',$module).\':\', $businessCourseOccurence->listCourseOccurenceToInscription($this->inscriptionData->inscription->selectiveProcessId, DB_TRUE));');
                
                eval('$courseOccurrenceId'.$x.'->setJsHint(_M(\'Enter the course code\', $module));');
                eval('$flds2[]             = $courseOccurrenceId'.$x.';');
                
                if ( $x <= $this->inscriptionData->inscription->optionsNumberRequired )
                {
                    eval('$validators[]       = new MRequiredValidator(\'courseOccurrenceId'.$x.'\');');
                }

                //Informações para e-mail
                eval('
                if ( strlen((string)$courseOccurrenceId'.$x.'->value) > 0 )
                {
                    $courseOccurrenceIdAux = explode(\'/\', $courseOccurrenceId'.$x.'->value);
                    /*$filters->selectiveProcessId = $data->selectiveProcessId;
                    $filters->courseId           = $courseOccurrenceIdAux[0];
                    $filters->courseVersion      = $courseOccurrenceIdAux[1];
                    $filters->turnId             = $courseOccurrenceIdAux[2];
                    $filters->unitId             = $courseOccurrenceIdAux[3];

                    $courseOccurrenceIdAux = $businessCourseOccurence->searchCourseOccurrence($filters);

                    $courseOption = $businessCourseOccurence->getCourseOccurrence($courseOccurrenceIdAux[0][0]);
                    $course = $businessCourse->getCourse($courseOption->courseId);

                    $courseOccurrenceIdResult'.$x.'->value = $courseOccurrenceIdAux[0][0];

                    $this->inscriptionData->email->courseId'.$x.'       = $course->courseId;
                    $this->inscriptionData->email->courseDesc'.$x.'     = $course->shortName;
                    $this->inscriptionData->email->courseUnitId'.$x.'   = $courseOption->unitId;
                    $this->inscriptionData->email->turnId'.$x.'         = $courseOption->turnId;

                    $turnData = $businessTurn->getTurn($courseOption->turnId);

                    $this->inscriptionData->email->turnDesc'.$x.'       = $turnData->description;

                    $businessUnit = $MIOLO->getBusiness(\'basic\',\'BusUnit\');
                    $unitData = $businessUnit->getUnit($courseOption->unitId);

                    $this->inscriptionData->email->courseUnitDesc'.$x.' = $unitData->description;*/
                }');
            }

            for ($x = 1; $x <= $this->optionsNumber; $x++)
            {
                eval('$this->inscriptionData->inscriptionOption->o'.$x.'->optionNumber        = $x;');
                eval('$this->inscriptionData->inscriptionOption->o'.$x.'->courseOccurrenceId  = $courseOccurrenceId'.$x.'->value;');
            }

            $bsg1            = new BaseGroup('bsg1', _M('Options',$module), $flds2, 'vertical');
            $bsg1->showLabel = true;
            $bsg1->width     = '100%';

            $this->selectiveProcess->isLanguage = $selectiveProcess[0][8];


            if ($selectiveProcess[0][8] == DB_TRUE)
            {
                $businessLanguageOccurrence = $MIOLO->getBusiness($module, 'BusLanguageOccurrence');

                $auxLabel  = new MLabel(_M('Language',$module).' ', 'red');
                $auxLabel->setClass('m-caption m-caption-required');
                $flds[]   = $auxLabel;

                $languageId = new mComboBox('languageId', $this->getFormValue('languageId', $this->inscriptionData->inscription->languageId), '', $businessLanguageOccurrence->listLanguageOccurrence($this->inscriptionData->inscription->selectiveProcessId));

                $validators[] = new mRequiredValidator('languageId');
                $flds[] = $languageId;

                $flds[]        = new separator('');

                $languageOccurrenceData = $businessLanguageOccurrence->getLanguageOccurrence($this->inscriptionData->inscription->selectiveProcessId, $languageId->value);

                $this->inscriptionData->email->languageDescription = $languageOccurrenceData->languageDescription;

                $this->inscriptionData->inscription->languageId = $languageId->value;
            }
            
            $bsg2            = new BaseGroup('bsg2', '', $flds, 'vertical');
            $bsg2->showLabel = true;
            $bsg2->width     = '100%';
            unset($flds);

            $businessPlace = $MIOLO->getBusiness($module,'BusPlaceOccurrence');

            $auxLabel  = new MLabel(_M('City exam',$module).' ', 'red');
            $auxLabel->setClass('m-caption m-caption-required');
            $flds[]   = $auxLabel;
            $cityExam = new MComboBox('cityExam', $this->getFormValue('cityExam', $this->inscriptionData->inscription->cityExam) ? $this->getFormValue('cityExam', $this->inscriptionData->inscription->cityExam) : DEFAULT_CITYEXAM  , '', $businessPlace->listCityExamOccurrence($this->inscriptionData->inscription->selectiveProcessId));

            $flds[] = $cityExam;
            $validators[] = new MRequiredValidator('cityExam');

            $this->inscriptionData->inscription->cityExam = $cityExam->value;
            
            if ( strlen((string) $cityExam->value ) > 0 )
            {
                $this->inscriptionData->email->cityExam = $cityExam->value;

                $filters9->cityId             = $cityExam->value;
                $filters9->selectiveProcessId = $this->inscriptionData->inscription->selectiveProcessId;

                $placeOccurrences = $businessPlace->searchPlaceOccurrence($filters9);

                $this->inscriptionData->email->cityExamDescription = $placeOccurrences[0][7];
            }

            $bsg3            = new BaseGroup('bsg3', '', $flds, 'vertical');
            $bsg3->showLabel = true;
            $bsg3->width     = '100%';
            unset($flds);
        }
        //INSERÇÃO DO DESCONTO AMIGO FAMA 

        if(USE_INDICATION == 'TRUE')
        {
            $descontoAmigo           = new MTextField('descontoAmigo',$this->getFormValue('descontoAmigo',$this->descontoAmigo->value),'',20);
            if(strlen((string)$descontoAmigo->value) > 0)
            {
                $busGizContracts = $MIOLO->getBusiness('basic','BusPhysicalPersonContracts');
                $filtersGiz->matricula = $descontoAmigo->value;
                $amigoFama = $busGizContracts->getGizContract($filtersGiz);
            }
            $MPesquisar           = new MButton('btnPesquisar', 'Pesquisar', 'submit');
            $flds[]           = new MLabel('Mátricula do Aluno FAMA que indicou nossa Faculdade a você');
            $flds[]           = $descontoAmigo;
            $flds[]           = $MPesquisar;
            if($descontoAmigo->value && strlen((string)$amigoFama->matricula) > 1)
            {   
                $msg = 'Seu Amigo FAMA é :'.$amigoFama->name;
                $flds[] = new MHiddenField('friendPersonId',"$amigoFama->personId");
                $flds[] = new MHiddenField('personMask',"$amigoFama->matricula");
            }
            else if($descontoAmigo->value && strlen((string)$amigoFama->matricula) == 0)
            {
                $msg = 'Não foi possível encontrar seu Amigo FAMA!';
            }
            else
            {
                $msg = 'Informe a matrícula do Amigo FAMA';
            }
            $flds[]           = new MLabel($msg);        
            $descontoAmigo->showLabel = false;
            $bsg4                  = new BaseGroup('dAmigoBaseGroup', 'Desconto Amigo', $flds, 'horizontal');
            $bsg4->showLabel       = true;
            $bsg4->width           = '100%';
            unset($flds);
        }

    //FIM DE DESCONTO AMIGO

        $searchData  = array( "\$CURRENT_DATE" );

        //Dados que substituirã os corpos das mensagens
        $replaceData = array(date('d/m/Y'));
        
        $msgDeclarationText = str_replace($searchData, $replaceData, $this->inscriptionData->message->messageHighSchoolConcluedInscription);

        $msgDeclaration      = new MText('msgDeclaration', $msgDeclarationText);
        
        if ( count($this->inscriptionData->selectiveProcessTypeData) > 0 )
        {
            //Have ENEM
            $msgStep = _M('Step',$module).' 5 >>';
        }
        elseif ( $this->inscriptionData->inscription->isSocialEconomic == DB_TRUE )
        {
            //Have Social Economic
            $msgStep = _M('Step',$module).' 5 >>';
        }
        else
        {
            //Dont have SocialEconomic and ENEM
            $msgStep = _M('Save inscription', $module);
        }
        $btnNext = new MButton('btnNext', $msgStep);
        $btnNext->attachEventHandler('click', 'tbBtnNext_click', true);

        $btnBack = new MButton('btnBack', '<< ' . _M('Step',$module) . ' 3');
        $btnBack->attachEventHandler('click', 'tbBtnBack_click', true);

        $div1     = new MDiv('div1', array($btnBack, $btnNext), null, 'align=center');

        $separator = new Separator('');
        
        $cntInscription     = new MHContainer('cntInscription', array($bsg1, new separator(''), $bsg2, new separator(''), $bsg4, new separator(''),$bsg3, $msgDeclaration, $div1, $separator, $separator));
        
        $cntInscription->addBoxStyle('background', 'white');
        $cntInscription->setDisposition('center');

        $fields[] = $cntInscription;

        $fields[] = new Separator('');

        $fontText1 = new MHiddenField('fontText1', "<\font>");
        $fields[] = $fontText1;
    
    
        $this->setFields($fields);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnNext_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        for ($x = 1; $x <= $this->optionsNumber; $x++)
        {
            eval('$stringOptions[] = \'$this->inscriptionData->inscriptionOption->o'.$x.'->courseOccurrenceId\';');

            eval('$stringOptionsCourses[] = \'$this->inscriptionData->inscriptionOption->o'.$x.'->courseOccurrenceId\';');

            eval('$stringName[]    = _M(\'Option\', $module) . \' \' . $x;');
        }

        if ($this->selectiveProcess->isLanguage == DB_TRUE)
        {
                $stringOptions[] = '$this->inscriptionData->inscription->languageId';
                $stringName[]    = _M('Language',$module);
        }

        $stringOptions[] = '$this->inscriptionData->inscription->cityExam';
        $stringName[]    = _M('City exam',$module);

        $lblMsg1         = '';

        $flagFaultRequired = false; //Se faltar algum campo requerido, esta flag fica true

        $varsRequired      = $stringOptions;
        $varsRequiredNames = $stringName;
 
        for($x1=0; $x1 < count($varsRequired); $x1++)
        {
            $msgRequired = _M('Required',$module) . ': ';

            if ( $x1 < $this->inscriptionData->inscription->optionsNumberRequired )
            {
                eval(
                    'if(strlen((string)'.$varsRequired[$x1].') > 0)
                    {
                    }
                    else
                    {
                    $lblMsg1 = new MText(\'lblMsg1\', $msgRequired . \''.$varsRequiredNames[$x1].'\' . \' !\');
                    $lblMsg1->color = \'red\';

                    $cntErrors      = new MVContainer(\'cntErrors\', array($lblMsg1));
                    $this->divError->addControl($cntErrors);
                    $flagFaultRequired = true;
                    }'
                );
            }
        }

        //Conferir se as opções de curso não são as mesmas
        if(is_array($stringOptionsCourses))
        {
            foreach ( $stringOptionsCourses as $options )
            {
                eval('$aux[] = '.$options.';');
            }
        }
        if(isset($aux))
        {
            for ( $x=0; $x < count($aux); $x++ ) //Para ver se tem opções de curso diferentes
            {
                for ( $y=($x+1); $y < count($aux); $y++ )
                {
                    if ( $aux[$x] == $aux[$y]) //Mesma opção de curso. Div error.
                    {
                        $stringErr[] = _M('Option', $module) . ' ' . ($x+1) . ' ' .  _M('is equal', $module) . ' ' . ($y+1) . '. ' . _M('Is necessary be diferent.', $module);
                        $flagFaultRequired = true;
                        $flagOptionsEqual  = true;
                    }
                }
            }
        }
        if ( $flagOptionsEqual )
        {
            for($x1=0; $x1 < count($stringErr); $x1++)
            {
                $lblMsg1 = new MText('lblMsg1', $stringErr[$x1]);
                $lblMsg1->color = 'red';

                $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
                $this->divError->addControl($cntErrors);
                $flagFaultRequired = true;
            }
        }

        if(!$flagFaultRequired)
        {
            $opts1 = $opts1 = urlencode(serialize($this->inscriptionData));

            if ( count($this->inscriptionData->selectiveProcessTypeData) > 0 )
            {
                //Have ENEM
                $opts = array('page'            => '7');  //Verify documents
            }
            elseif ( $this->inscriptionData->inscription->isSocialEconomic == DB_TRUE )
            {
                //Have Social Economic
                $opts = array('page'            => '8');  //Verify documents
            }
            else
            {
                $opts = array('page'            => '8',
                              'event'           => 'btnSave_click');  //Verify documents
            }
            if(USE_INDICATION == 'TRUE')
            {
                if(strlen((string)$this->friendPersonId->value) > 0)
                {
                    $this->inscriptionData->friendPersonId = $this->friendPersonId->value;
                    $this->inscriptionData->personMask = $this->personMask->value;
                }
            }
            $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));
            $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
        }
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnBack_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array('page' => '5');  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }


}

?>
