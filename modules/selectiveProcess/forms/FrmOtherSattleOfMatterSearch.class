<?php

/**
 *
 * This file handles the connection and actions for sprOtherSattleOfMatter table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 24/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basOtherSattleOfMatter table
 */
class FrmOtherSattleOfMatterSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Other sattle of matter', $this->home, 'otherSattleOfMatter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('otherSattleOfMatterIdS', $this->getFormValue('otherSattleOfMatterIdS', $otherSattleOfMatterIdS));

//        $selectiveProcessIdS  = new MLookupTextField('selectiveProcessIdS', $this->selectiveProcessIdS->value, _M('Selective process id',$module), 10, null, null, ('descriptionS'), $module, 'SelectiveProcess', null, null, true);
//        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
//        $fields[]             = $selectiveProcessIdS;

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessIdS;

        $descriptionS  = new MTextField('descriptionS', $this->descriptionsS->value, _M('Description', $module), FIELD_DESCRIPTION_SIZE);
//        $descriptionS->setReadOnly(true);
        $fields[]             = $descriptionS;


        $tables = array('sprInscription'=>          _M('Inscription',$module),
                        'sprInscriptionOption'=>    _M('Inscription option',$module),
                        'sprCourseOccurrence'=>     _M('Vacancy occurrence',$module),
                        'basPhysicalPersonStudent'=>_M('Physical person student', $module) );

        $tableNameS = new MSelection('tableNameS', $this->getFormValue('tableNameS', $data->tableNameS), _M('Table name', $module), $tables);
        $fields[]             = $tableNameS;

        //$tableNameS = new MTextField('tableNameS', $this->tableNameS->value, _M('Table name',$module), 10);
        //$fields[] = $tableNameS;

        $fieldNameS = new MTextField('fieldNameS', $this->fieldNameS->value, _M('Field name',$module), 10);
        $fields[] = $fieldNameS;

        $priorityS = new MTextField('priorityS', $this->priorityS->value, _M('Priority',$module), 10);
        $fields[] = $priorityS;
        $validators[] = new MIntegerValidator('priorityS', '', 'optional');

        $orderByS = new MSelection('orderByS', $this->getFormValue('orderByS', $data->orderBy), _M('Order by', $module), array('ASC'=>_M('Ascendant', $module), 'DESC'=>_M('Descendant', $module)));
        $fields[]             = $orderByS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
      //$filters->otherSattleOfMatterId = $this->otherSattleOfMatterIdS->value;
        $filters->otherSattleOfMatterId = $this->otherSattleOfMatterIdS->value;
        $filters->selectiveProcessId    = $this->selectiveProcessIdS->value;
        $filters->description           = $this->descriptionS->value;
        $filters->tableName             = $this->tableNameS->value;
        $filters->fieldName             = $this->fieldNameS->value;
        $filters->priority              = $this->priorityS->value;
        $filters->orderBy               = $this->orderByS->value;
        $filters->selectiveProcessId    = $this->selectiveProcessIdS->value;

        unset($this->otherSattleOfMatterIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdOtherSattleOfMatterSearch', $filters);
        $business   = $this->manager->getBusiness($module,'BusOtherSattleOfMatter');
        $data       = $business->searchOtherSattleOfMatter($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);



//        $this->page->onLoad('document.' . $this->name . '.courseVacantIdS.focus();');

    }

}

?>
