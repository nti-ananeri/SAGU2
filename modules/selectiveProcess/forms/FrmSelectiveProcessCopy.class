<?php

/**
 *
 * This file handles the connection and actions for sprPupilsAndSchoolsPerformanceBulletinPupilsData table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmSelectiveProcessCopy extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = MIOLO::getCurrentModule();
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Selective process copy',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');
        $event      = MIOLO::_request('event');

        $selectiveProcessIdText = new MText('oldSelectiveProcessId',_M('Old selective process', $module));
        $selectiveProcessIdText->setClass('m-caption m-caption-required');
        $selectiveProcessIdText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $selectiveProcessIdText;
        $business       =   $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $processList    =   $business->listSelectiveProcess(null);
        $flds[] = new Selection('selectiveProcessId',($this->getFormValue('selectiveProcessId',$data->selectiveProcessId) ? $this->getFormValue('selectiveProcessId',$data->selectiveProcessId) : ''),null ,$processList);
        $fields[] = new MHContainer('hctSelectiveProces',$flds);
        unset($flds);

        $businessPeriod = $MIOLO->getBusiness('academic','BusPeriod');
        if ( is_null($this->getFormValue('periodId', $data->periodId)) ||
             strlen((string)$this->getFormValue('periodId', $data->periodId)) == 0 )
        {
            $periodIdValue = CURRENT_PERIOD_ID;
        }
        else
        {
            $periodIdValue = $this->getFormValue('periodId', $data->periodId);
        }
        $periodIdText = new MText('periodIdText',_M('Period id', $module));
        $periodIdText->setClass('m-caption m-caption-required');
        $periodIdText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $periodIdText;

        $periodId = new Selection('periodId', $periodIdValue, null , $businessPeriod->listPeriod(), true );
        $flds[] = $periodId;
        $fields[] = new MHContainer('hctPeriod', $flds);
        unset($flds);

        $validators[] = new MRequiredValidator('periodId', _M('Period id', $module));

        $descriptionText = new MText('descriptionText',_M('Description', $module));
        $descriptionText->setClass('m-caption m-caption-required');
        $descriptionText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $descriptionText;

        $description = new MTextField('description', $this->getFormValue('description', $data->description), null, FIELD_DESCRIPTION_SIZE);
        $description->setJsHint(_M('Enter the description',$module));
        $flds[] = $description;
        $fields[] = new MHContainer('hctDescription', $flds);
        unset($flds);
        $validators[] = new MRequiredValidator('description', _M('Description',$module));
    
        $selectiveProcessNumberLabel    =   new MText('selectiveProcessNumberLabel', _M('Id', $module).':');
        $selectiveProcessNumberLabel->setWidth(FIELD_CONTAINER_SIZE);
        $selectiveProcessNumberLabel->setClass('m-caption m-caption-required');
        $flds[] = $selectiveProcessNumberLabel;

        $selectiveProcessNumber         =   new MTextField('selectiveProcessNumber', null);
        $selectiveProcessNumber->setWidth(FIELD_LABEL_SIZE);
        $flds[] = $selectiveProcessNumber;
        $validators[] =  new MRequiredValidator('selectiveProcessId');
        $fields[] = new MHContainer('hctSelectiveProcessNumber', $flds );
        unset ($flds);

        $beginDateText = new MText('beginDateText',_M('Begin date', $module));
        $beginDateText->setClass('m-caption m-caption-required');
        $beginDateText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $beginDateText;
         
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), null, FIELD_DATE_SIZE);
        $beginDate->setJsHint(_M('Enter the begin date',$module));
        /* Alterado por Marcos Serra
          $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Begin date', $module), 'required'));
        */
        $validators[] = new MDATEDMYValidator('beginDate');
        $flds[] = $beginDate;
        $fields[] = new MHContainer('hctBeginDate', $flds);
        unset ($flds);
        
        $fields[] = new Separator(''); 
        $fields[] = new MButton('btnGenerate',_M('Generate',$module));

        $this->setFields($fields);

        $validators[] = new MRequiredValidator('selectiveProcessId',  _M('Old selective process', $module));

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
    } 

    public function btnGenerate_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->getTypesData();
        $opts = array(  'selectiveProcessId'        => $data->selectiveProcessId,
                        'periodId'                  => $data->periodId,
                        'description'               => $data->description,
                        'selectiveProcessNumber'    => $data->selectiveProcessNumber,
                        'beginDate'                 => $data->beginDate);
        $business = $MIOLO->getBusiness($module, 'BusSelectiveProcessCopy');

        $ok  = $business->executeSelectiveProcessCopy($data);
        if ( $ok )
        {
            unset($opts);
            $msg = _M('Selective process copy has been implemented successfully', $module);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }


    }
    public function getTypesData()
    {
        $data->selectiveProcessId       = $this->selectiveProcessId->value;
        $data->periodId                 = $this->periodId->value;
        $data->description              = $this->description->value;
        $data->selectiveProcessNumber   = $this->selectiveProcessNumber->value;
        $data->beginDate                = $this->beginDate->value;
        return $data;
    }
}

?>
