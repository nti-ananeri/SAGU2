<?php

/**
 * Person form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate tabbs
 **/
 
class FrmPersonInscription extends MForm
{
    private $personData;
    private $validators;

    private $inscriptionData;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $this->inscriptionData = unserialize(urldecode(stripslashes($MIOLO->session->getValue('inscriptionData'))));
        parent::__construct(_M('Step', $module) . ' 3 ' . _M('of', $module) .  ' '.$this->inscriptionData->stepTotal.' -> ' . _M('Informations', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $fields[] = new MHiddenField('limbo');
        $separator = new Separator('');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fontText = new MText('fontText', "<font color=" . INSCRIPTION_TEXT_COLOR . ">");
        $fields[] = $fontText;

        //BaseGroup 1
        $flds1[] = $separator;

        if ( strlen((string)$personId->value) > 0 || strlen((string)$this->inscriptionData->physicalPerson->personId )>0 )
        {
            $personIdLabel = new MText('personIdLabel', _M('Person id',$module).':');
            $personIdLabel->setWidth(FIELD_CONTAINER_SIZE+20);

            $personId = new MTextLabel('personId', strlen((string)$personId)>0 ? $personId : $this->inscriptionData->physicalPerson->personId);

            $hctPersonId = new MHContainer('hctPersonId', array($personIdLabel, $personId));
            $flds1[]                 = $hctPersonId;

            $flds1[] = $separator;
        }

        $personNameLabel = new MText('personNameLabel', _M('Candidate name',$module).': ');
        $personNameLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $personNameLabel->setClass('m-caption m-caption-required');

        $personName   = new MTextField('personName', $this->getFormValue('personName', $this->inscriptionData->physicalPerson->name), '', FIELD_DESCRIPTION_SIZE);
        $personName->setJsHint(_M('Enter the person name',$module));

        $hctPersonName = new MHContainer('hctPersonName', array($personNameLabel, $personName));
        $flds1[] = $hctPersonName;
        $flds1[] = $separator;

        $emailLabel = new MText('emailLabel', _M('E-mail', $module).':');
        $emailLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $email        = new MTextField('email', strtolower($this->getFormValue('email', $this->inscriptionData->physicalPerson->email)), '', 40);
        $email->setJsHint(_M('Enter the person e-mail',$module));
        $validators[] = new MEmailValidator('email', _M('E-mail', $module),'optional');


        $hctEmail = new MHContainer('hctEmail', array($emailLabel, $email));
        $flds1[] = $hctEmail;
        $flds1[] = $separator;

        $rgNumberLabel = new MText('rgNumberLabel', _M('RG number', $module).': ');
        $rgNumberLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $rgNumberLabel->setClass('m-caption m-caption-required');

        $rgNumber      = new MTextField('rgNumber', strtolower($this->getFormValue('rgNumber', $this->inscriptionData->document->rgNumber)), '', 30);
        $rgNumber->setJsHint(_M('Enter the person RG',$module));

        if ( ($this->inscriptionData->documentReadOnly == 1) OR (($this->inscriptionData->documentReadOnly == 2)))
        {
            $rgNumber->setReadOnly(true);
        }

        $hctRG = new MHContainer('hctRG', array($rgNumberLabel, $rgNumber));
        $flds1[] = $hctRG;
        $flds1[] = $separator;


        $organLabel = new MText('organLabel', _M('Organ of RG', $module).': ');
        $organLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $organLabel->setClass('m-caption m-caption-required');


        $organ      = new MTextField('organ', strtolower($this->getFormValue('organ', $this->inscriptionData->document->organ)), '', 30);
        $organ->setJsHint(_M('Enter the organ of RG',$module));


        $hctOrgan = new MHContainer('hctOrgan', array($organLabel, $organ));
        $flds1[] = $hctOrgan;
        $flds1[] = $separator;


        $nacionalityLabel = new MText('nacionalityLabel', _M('Country birth id', $module).': ');
        $nacionalityLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $nacionalityLabel->setClass('m-caption m-caption-required');

        $businessCountry     = $MIOLO->GetBusiness('basic', 'BusCountry');
        $nacionality         = new Selection('nacionality', $this->getFormValue('nacionality', $this->inscriptionData->physicalPerson->countryIdBirth), '', $businessCountry->listCountry());

        $hctNacionality = new MHContainer('hctNacionality', array($nacionalityLabel, $nacionality));
        $flds1[] = $hctNacionality;
        $flds1[] = $separator;

        $cpfLabel = new MText('cpfLabel', _M('CPF number', $module).':');
        $cpfLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $cpf      = new MTextField('cpf', strtolower($this->getFormValue('cpf', $this->inscriptionData->document->cpf)), '', 30);
        $cpf->setJsHint(_M('Enter the person CPF',$module));

        $validators[]  = new MCPFValidator('cpf', _M('CPF',$module), 'optional');

        if ( ($this->inscriptionData->documentReadOnly == 1) OR (($this->inscriptionData->documentReadOnly == 3)))
        {
            $cpf->setReadOnly(true);
        }

        $hctCPF = new MHContainer('hctCPF', array($cpfLabel, $cpf));
        $flds1[] = $hctCPF;
        $flds1[] = $separator;

        $dateBirthLabel = new MText('dateBirthLabel', _M('Birth day', $module).': ');
        $dateBirthLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $dateBirthLabel->setClass('m-caption m-caption-required');

        $dateBirth    = new MCalendarField('dateBirth', $this->getFormValue('dateBirth', $this->inscriptionData->physicalPerson->dateBirth), '', FIELD_DATE_SIZE);
        $validators[] = new MDateDMYValidator('dateBirth', _M('Birth day', $module),'optional');
        $dateBirth->setJsHint(_M('Enter the birth date',$module));

        $hctBirthDay = new MHContainer('hctBirthDay', array($dateBirthLabel, $dateBirth));
        $flds1[] = $hctBirthDay;
        $flds1[] = $separator;

        $bsg1            = new BaseGroup('bsg1',_M('Personal',$module),$flds1,'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '90%';
        unset($flds);
        unset($flds1);

        $flds[] = $separator;

        $locationLabel = new MText('locationLabel', _M('Location', $module).': ');
        $locationLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $locationLabel->setClass('m-caption m-caption-required');

        $location     = new MTextField('location', $this->getFormValue('location', $this->inscriptionData->physicalPerson->location), '', 30);
        $location->setJsHint(_M('Enter the person location',$module));

        $hctLocation = new MHContainer('hctLocation', array($locationLabel, $location));
        $flds[] = $hctLocation;
        $flds[] = $separator;


        $numberLabel = new MText('numberLabel', _M('Number', $module).':');
        $numberLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $number     = new MTextField('number', $this->getFormValue('number', $this->inscriptionData->physicalPerson->number), '', 10);
        $number->setJsHint(_M('Enter the person location number',$module));

        $hctNumber = new MHContainer('hctNumber', array($numberLabel, $number));
        $flds[] = $hctNumber;
        $flds[] = $separator;


        $complementLabel = new MText('complementLabel', _M('Complement', $module).':');
        $complementLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $complement   = new MTextField('complement', $this->getFormValue('complement', $this->inscriptionData->physicalPerson->complement), '', 10);
        $complement->setJsHint(_M('Enter the location complement',$module));


        $hctComplement = new MHContainer('hctComplement', array($complementLabel, $complement));
        $flds[] = $hctComplement;
        $flds[] = $separator;


        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Neighborhood', $module).': ');
        $neighborhoodLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $neighborhoodLabel->setClass('m-caption m-caption-required');

        $neighborhood = new MTextField('neighborhood', $this->getFormValue('neighborhood', $this->inscriptionData->physicalPerson->neighborhood), '', 20);
        $neighborhood->setJsHint(_M('Enter the person neighborhood',$module));

        $hctNeighborhood = new MHContainer('hctComplement', array($neighborhoodLabel, $neighborhood));
        $flds[] = $hctNeighborhood;
        $flds[] = $separator;


        $cityIdLabel = new MText('cityIdLabel', _M('City id', $module).': ');
        $cityIdLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $cityIdLabel->setClass('m-caption m-caption-required');

        if ( $MIOLO->checkAccess($module, BAS_INSERT, false, true) )
        {
            $isPossibleNew = DB_TRUE;
        }
        else
        {
            $isPossibleNew = DB_FALSE;
        }

        $isPossibleNew      = new MHiddenField('isPossibleNew', $isPossibleNew);
        $flds[]             = $isPossibleNew;
        $isSelectiveProcess = new MHiddenField('isSelectiveProcess', DB_TRUE);
        $flds[]             = $isSelectiveProcess;
        
        $businessCity  = $MIOLO->getBusiness('basic','BusCity');
        //$periodId = new MComboBox('periodId', strlen((string)$this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : CURRENT_PERIOD_ID, _M('Period',$module), $businessPeriod->listPeriod(), true );
        //$fields[] = $periodId;
        $citys = $businessCity->listCity(null,'MA');
        $cityLabel = new MText('cityLabel', _M('City', $module).':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $cityId = new Selection('cityId',strlen((string)$this->getFormValue('cityId', $this->inscriptionData->physicalPerson->cityId)) > 0 ? $this->getFormValue('cityId', $this->inscriptionData->physicalPerson->cityId) : '2568',null,$citys,false); 
        /*$cityId   = new MLookupTextField('cityId', $this->getFormValue('cityId', $this->inscriptionData->physicalPerson->cityId), '', FIELD_ID_SIZE, null, null, 'cityName, limbo, stateName, limbo, countryName', 'basic', 'City', null, array('isPossibleNew' => 'isPossibleNew', 'isSelectiveProcess' => 'isSelectiveProcess'), true);
        $cityId->setJsHint(_M('Enter the person city code',$module));

        $cityName     = new MTextField('cityName', $this->getFormValue('cityName',$this->personData->cityName), '', 20);
        $cityName->setReadOnly(true);
        $cityName->setJsHint(_M('Enter the person city name',$module));

        $hctCityId = new MHContainer('hctCityId', array($cityIdLabel, $cityId, $cityName));
        $flds[] = $hctCityId;
        $flds[] = $separator;

        $stateLabel = new MText('stateLabel', _M('State name', $module).':');
        $stateLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $stateName    = new MTextField('stateName', $this->getFormValue('stateName',$this->personData->stateName), '', 20);
        $stateName->setReadOnly(true);
        $stateName->setJsHint(_M('Enter the person state name',$module));

        $countryName  = new MTextField('countryName', $this->getFormValue('countryName',$this->personData->countryName), '', 20);
        $countryName->setReadOnly(true);
        $countryName->setJsHint(_M('Enter the person country name',$module));*/

        $hctCityId = new MHContainer('hctCityId', array($cityLabel, $cityId));
        $flds[] = $hctCityId;
        $flds[] = $separator;

        $zipLabel = new MText('zipLabel', _M('Zip', $module).': ');
        $zipLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $zipLabel->setClass('m-caption m-caption-required');

        $zipCode      = new MLookupTextField('zipCode', $this->getFormValue('zipCode', $this->inscriptionData->physicalPerson->zipCode), '', FIELD_ZIPCODE_SIZE, null, null, 'limbo, limbo, limbo, limbo, limbo, cityId, limbo, limbo, limbo', 'basic', 'Location', null, array('cityId' => 'cityId'), $this->page->isPostBack() );
        $zipCode->setJsHint(_M('Enter the person zip code',$module));
        $validators[] = new MRangeValidator('zipCode', _M('Zip', $module), '10000000', '99999999', 'i', 'optional');

        $hctZip = new MHContainer('hctZip', array($zipLabel, $zipCode));
        $flds[] = $hctZip;
        $flds[] = $separator;

        $bsg2            = new BaseGroup('bsg2',_M('Location',$module),$flds,'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '90%';
        unset($flds);

        //BaseGroup 3
        $flds[] = $separator;

        $residentialPhoneLabel = new MText('residentialPhoneLabel', _M('Residential Phone', $module).':');
        $residentialPhoneLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $residentialPhone   = new MTextField('residentialPhone', $this->getFormValue('residentialPhone', $this->inscriptionData->physicalPerson->residentialPhone), '', 10);
        $residentialPhone->setJsHint(_M('Enter the residential Phone',$module));

        $hctResidentialPhone = new MHContainer('hctResidentialPhone', array($residentialPhoneLabel, $residentialPhone));
        $flds[] = $hctResidentialPhone;
        $flds[] = $separator;

        $workPhoneLabel = new MText('workPhoneLabel', _M('Work Phone', $module).':');
        $workPhoneLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $workPhone   = new MTextField('workPhone', $this->getFormValue('workPhone', $this->inscriptionData->physicalPerson->workPhone), '', 10);
        $workPhone->setJsHint(_M('Enter the work Phone',$module));

        $hctWorkPhone = new MHContainer('hctWorkPhone', array($workPhoneLabel, $workPhone));
        $flds[] = $hctWorkPhone;
        $flds[] = $separator;

        $celularPhoneLabel = new MText('celularPhoneLabel', _M('Mobile Phone', $module).':');
        $celularPhoneLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $celularPhone   = new MTextField('celularPhone', $this->getFormValue('celularPhone', $this->inscriptionData->physicalPerson->cellPhone), '', 10);
        $celularPhone->setJsHint(_M('Enter the mobile Phone',$module));

        $hctWorkPhone = new MHContainer('hctWorkPhone', array($celularPhoneLabel, $celularPhone));
        $flds[] = $hctWorkPhone;
        $flds[] = $separator;

        $WIDTH = 137;

        $maritalStatusLabel = new MText('maritalStatusLabel', _M('Marital status', $module).': ');
        $maritalStatusLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $maritalStatusLabel->setClass('m-caption m-caption-required');

        $business      = $MIOLO->GetBusiness('basic', 'BusMaritalStatus');
        $maritalStatusId = new Selection('maritalStatusId', $this->getFormValue('maritalStatusId', $this->inscriptionData->physicalPerson->maritalStatusId), '', $business->listMaritalStatus());

        $hctMaritalStatus = new MHContainer('hctMaritalStatus', array($maritalStatusLabel, $maritalStatusId));
        $flds[] = $hctMaritalStatus;
        $flds[] = $separator;


        $sexLabel = new MText('sexLabel', _M('Sex', $module).': ');
        $sexLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $sexLabel->setClass('m-caption m-caption-required');

        $sex       = new Selection('sex', $this->getFormValue('sex', $this->inscriptionData->physicalPerson->sex), '', SAGU::listSex());

        $hctSex = new MHContainer('hctSex', array($sexLabel, $sex));
        $flds[] = $hctSex;
        $flds[] = $separator;

        /*$fatherLabel = new MText('fatherLabel', _M('Father id', $module).':');
        $fatherLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $fatherId     = new MLookupTextField('fatherId', $this->getFormValue('fatherId', $this->inscriptionData->physicalPerson->fatherId), '', FIELD_ID_SIZE, null, null, 'fatherName', 'basic', 'PhysicalPerson', null, null, true);
        $fatherId->setJsHint(_M('Enter the father code',$module));
        $fatherId->setWidth($WIDTH);

        $fatherName   = new MTextField('fatherName', $this->getFormValue('fatherName',$this->personData->fatherName), '', 25);
        $fatherName->setReadOnly(true);
        $fatherName->setJsHint(_M('Enter the father name',$module));

        $hctFather            = new MHContainer('hctFather',array($fatherLabel, $fatherId, $fatherName));
        $hctFather->showLabel = true;
        $flds[]               = $hctFather;
        $flds[] = $separator;

        $motherLabel = new MText('motherLabel', _M('Mother id', $module).':');
        $motherLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $motherId     = new MLookupTextField('motherId', $this->getFormValue('motherId', $this->inscriptionData->physicalPerson->motherId), '', FIELD_ID_SIZE, null, null, 'motherName', 'basic', 'PhysicalPerson', null, null, true);
        $motherId->setJsHint(_M('Enter the mother code',$module));
        $motherId->setWidth($WIDTH);

        $motherName   = new MTextField('motherName', $this->getFormValue('motherName',$this->personData->motherName), '', 25);
        $motherName->setReadOnly(true);

        $hctMother            = new MHContainer('hctMother',array($motherLabel, $motherId, $motherName));
        $hctMother->showLabel = true;
        $flds[]               = $hctMother;
        $flds[] = $separator;*/

        $business     = $MIOLO->GetBusiness('basic', 'BusSpecialNecessity');

        $specialNecessityLabel = new MText('specialNecessityLabel', _M('Special necessity', $module).' : ');
        $specialNecessityLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $specialNecessityLabel->setClass('m-caption m-caption-required');

        $specialNecessityOption = $this->getFormValue('specialNecessityId', $this->inscriptionData->physicalPerson->specialNecessityId);

        count($specialNecessityOption) > 0 ? NULL : $specialNecessityOption = NOTHING_SPECIAL_NECESSITY_ID;

        $specialNecessityId = new Selection('specialNecessityId', $specialNecessityOption, '', $business->listSpecialNecessity());

        $hctSpecialNecessity = new MHContainer('hctSpecialNecessity', array($specialNecessityLabel, $specialNecessityId));
        $hctSpecialNecessity->showLabel = true;
        $flds[]               = $hctSpecialNecessity;
        $flds[] = $separator;

        $specialNecessityDescriptionLabel = new MText('specialNecessityDescriptionLabel', _M('Special necessity description', $module).':');
        $specialNecessityDescriptionLabel->setWidth(FIELD_CONTAINER_SIZE+20);

        $specialNecessityDescription = new MTextField('specialNecessityDescription', $this->getFormValue('specialNecessityDescription', $this->inscriptionData->physicalPerson->specialNecessityDescription), '', FIELD_DESCRIPTION_SIZE);
        $specialNecessityDescription->setJsHint(_M('Enter the person special necessity description',$module));

        $hctSpecialNecessityDescription = new MHContainer('hctSpecialNecessityDescription', array($specialNecessityDescriptionLabel, $specialNecessityDescription));
        $hctSpecialNecessityDescription->showLabel = true;
        $flds[]               = $hctSpecialNecessityDescription;
        $flds[] = $separator;

        $business     = $MIOLO->GetBusiness('basic', 'BusEthnicOrigin');

        $ethnicOriginIdLabel = new MText('ethnicOriginIdLabel', _M('Ethnic origin', $module).': ');
        $ethnicOriginIdLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        $ethnicOriginIdLabel->setClass('m-caption m-caption-required');

        $ethnicOriginId       = new Selection('ethnicOriginId', $this->getFormValue('ethnicOriginId', $this->inscriptionData->physicalPerson->ethnicOriginId), '', $business->listEthnicOrigin());

        $hctEthnicOrigin = new MHContainer('hctEthnicOrigin', array($ethnicOriginIdLabel, $ethnicOriginId));
        $hctEthnicOrigin->showLabel = true;
        $flds[]               = $hctEthnicOrigin;
        $flds[] = $separator;

        $isHighSchoolLabel = new MText('isHighSchoolLabel', _M('Is high school or will be high school even enrol date',$module) . ': ');
        $isHighSchoolLabel->setClass('m-caption m-caption-required');

        $isHighSchool = new MRadioButtonGroup('isHighSchool', '', SAGU::listYesNo(1), $this->getFormValue('isHighSchool', $this->inscriptionData->inscription->isHighSchool), null, 'horizontal');
        $isHighSchool->setShowLabel(false);

        $hctHighSchool = new MHContainer('hctHighSchool', array($isHighSchoolLabel, $isHighSchool));
        $hctHighSchool->showLabel = true;
        $flds[]         = $hctHighSchool;

        //$institutionLabel = new MText('institutionLabel', _M('High school concluded id',$module).': ');
        //$institutionLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        //$institutionLabel->setClass('m-caption m-caption-required');

        $institutionIdHs   = new MHiddenField('institutionIdHs', strlen((string)$this->getFormValue('institutionIdHs', $this->inscriptionData->physicalPersonStudent->institutionIdHs))>0 ? $this->getFormValue('institutionIdHs', $this->inscriptionData->physicalPersonStudent->institutionIdHs) : DEFAULT_SELECTIVE_PROCESS_INSTITUTIONIDHS, '', FIELD_LOOKUPFIELD_SIZE, null, null, 'institutionHsName', 'basic', 'LegalPersonInstitution', null, null, true);
        $institutionIdHs->setJsHint(_M('Enter the institution code',$module));
        //$validators[] = new MIntegerValidator('institutionIdHs', _M('High school concluded id',$module), 'optional');

        //$institutionHsName = new MTextField('institutionHsName', $this->personData->institutionHsName->value, '', FIELD_DESCRIPTION_SIZE);
        //$institutionHsName->setJsHint(_M('Institution name',$module));
        //$institutionHsName->setReadOnly(true);

        //$hctInstitution = new MHContainer('hctInstitution', array($institutionLabel, $institutionIdHs, $institutionHsName));
        //$hctInstitution->setShowLabel(true);
        //$flds[]  = $hctInstitution;
        //$flds[]  = $institutionIdHs;

        //$citySchoolLabel = new MText('citySchoolLabel', _M('City of school',$module).': ');
        //$citySchoolLabel->setWidth(FIELD_CONTAINER_SIZE+20);
        //$citySchoolLabel->setClass('m-caption m-caption-required');

        $cityIdHs = new MHiddenField('cityIdHs', strlen((string)$this->getFormValue('cityIdHs', $this->inscriptionData->physicalPersonStudent->cityIdHs))>0 ? $this->getFormValue('cityIdHs', $this->inscriptionData->physicalPersonStudent->cityIdHs) : (defined('DEFAULT_SELECTIVE_PROCESS_CITYIDHS') ? DEFAULT_SELECTIVE_PROCESS_CITYIDHS : ''), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'citySchoolHsName', 'basic', 'City', null, array('isPossibleNew' => 'isPossibleNew'), true);
        $cityIdHs->setJsHint(_M('Enter the city school code',$module));
        //$validators[] = new MIntegerValidator('cityIdHs', _M('City of school',$module), 'optional');

        //$citySchoolHsName = new MTextField('citySchoolHsName', $this->personData->cityIdHs->value, '', FIELD_DESCRIPTION_SIZE);
        //$citySchoolHsName->setJsHint(_M('City school name',$module));
        //$citySchoolHsName->setReadOnly(true);

        //$hctCitySchool = new MHContainer('hctCitySchool', array($citySchoolLabel, $cityIdHs, $citySchoolHsName));
        //$hctCitySchool->setShowLabel(true);
        //$flds[]  = $hctCitySchool;
        //$flds[] = $cityIdHs;

        $bsg3            = new BaseGroup('bsg3',_M('General data',$module),$flds,'vertical');
        $bsg3->showLabel = true;
        $bsg3->width     = '90%';
        unset($flds);

        $fields[] = new Separator();

        $separator = new Separator();

        $btnNext   = new MButton('btnNext', _M('Step', $module) . ' 4 >>');
        $btnBack   = new MButton('btnBack', '<< '. _M('Step', $module) . ' 2');

        $div1     = new MDiv('div1', array($btnBack, $btnNext), null, 'align=center');

        //HorizontalContainer 1: BaseGroup 1 + BaseGroup 2 + BaseGroup 3
        $hct1            = new MVContainer('hct1',array($bsg1, $bsg2, $bsg3, $separator, $div1, $separator, $separator));
        $hct1->showLabel = true;

        $hct1->addBoxStyle('background', 'white');
        $hct1->setDisposition('center');

        $fields[]        = $hct1;
        $this->inscriptionData->physicalPerson->name                           = $personName->value;
        $this->inscriptionData->physicalPerson->personId                       = $personId->value;
        $this->inscriptionData->physicalPerson->email                          = $email->value;
        $this->inscriptionData->document->rgNumber                             = $rgNumber->value;
        $this->inscriptionData->document->organ                                = $organ->value;
        $this->inscriptionData->physicalPerson->countryIdBirth                 = $nacionality->value;
        $this->inscriptionData->document->cpf                                  = $cpf->value;
        $this->inscriptionData->physicalPerson->dateBirth                      = $dateBirth->value;
        $this->inscriptionData->physicalPerson->location                       = $location->value;
        $this->inscriptionData->physicalPerson->number                         = $number->value;
        $this->inscriptionData->physicalPerson->complement                     = $complement->value;
        $this->inscriptionData->physicalPerson->neighborhood                   = $neighborhood->value;
        $this->inscriptionData->physicalPerson->cityId                         = $cityId->value;
        $this->inscriptionData->physicalPerson->zipCode                        = $zipCode->value;
        $this->inscriptionData->physicalPerson->residentialPhone               = $residentialPhone->value;
        $this->inscriptionData->physicalPerson->workPhone                      = $workPhone->value;
        $this->inscriptionData->physicalPerson->cellPhone                      = $celularPhone->value;
        $this->inscriptionData->physicalPerson->maritalStatusId                = $maritalStatusId->value;
        $this->inscriptionData->physicalPerson->sex                            = $sex->value;
        $this->inscriptionData->physicalPerson->fatherId                       = $fatherId->value;
        $this->inscriptionData->physicalPerson->motherId                       = $motherId->value;
        $this->inscriptionData->physicalPerson->specialNecessityId             = $specialNecessityId->value;
        $this->inscriptionData->physicalPerson->specialNecessityDescription    = $specialNecessityDescription->value;
        $this->inscriptionData->physicalPerson->ethnicOriginId                 = $ethnicOriginId->value;
        $this->inscriptionData->inscription->isHighSchool                      = $isHighSchool->value;
        
        //editado

    	$ensino = DEFAULT_SELECTIVE_PROCESS_INSTITUTIONIDHS;
    	$this->inscriptionData->physicalPersonStudent->institutionIdHs         = $ensino;
	    //$institutionIdHs->value;

    	$cidade = DEFAULT_SELECTIVE_PROCESS_CITYIDHS;
        $this->inscriptionData->physicalPersonStudent->cityIdHs                = $cidade;
    	//$cityIdHs->value;

        //fim ediÃ§Ã£o
    
        $fontText1 = new MHiddenField('fontText1', "</font>");
        $fields[] = $fontText1;
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnNext_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business3         = $MIOLO->getBusiness('basic', 'BusDocument');

        $flagFaultRequired = false; //Se faltar algum campo requerido, esta flag fica true

        //Verificação dos documentos se já não estão cadastrados
        if ( (strlen((string)$this->inscriptionData->physicalPerson->personId) > 0) )
        {
            $filters1->nonPersonId = $this->inscriptionData->physicalPerson->personId;
        }
        //else
        //{   //Esta sendo inserida uma nova pessoa
        //}

        if ( strlen((string)$this->inscriptionData->document->rgNumber) > 0 )
        {
            $filters1->content        = $this->inscriptionData->document->rgNumber;
            $filters1->documentTypeId = RG_CODE;

            $searchRegisteredRG       = $business3->searchDocument($filters1);
        }

        if ( is_array($searchRegisteredRG) && (count($searchRegisteredRG) > 0) )
        {
            //Já tem cadastrado este documento
            $msgRequired .= _M('This RG number just is registered to other person', $module);
            $msgRequired .= '<br>';
            $flagFaultRequired = true;
        }

        if ( strlen((string)$this->inscriptionData->document->cpf) > 0 )
        {
            $filters1->content        = SAGU::convertInCPFWithoutDelimiters($this->inscriptionData->document->cpf);
            $filters1->documentTypeId = CPF_CODE;

            $searchRegisteredCPF       = $business3->searchDocument($filters1);
        }

        if ( is_array($searchRegisteredCPF) && (count($searchRegisteredCPF) > 0) )
        {
            //Já tem cadastrado este documento
            $msgRequired .= _M('This CPF number just is registered to other person', $module);
            $msgRequired .= '<br>';
            $flagFaultRequired = true;
        }


        $lblMsg1        = '';
	//PASSANDO VARIAVEIS DE VERIFICAÃÃO DE VALIDAÃÃO
        $varsRequired = array('$this->inscriptionData->physicalPerson->name','$this->inscriptionData->document->rgNumber','$this->inscriptionData->document->organ', '$this->inscriptionData->physicalPerson->countryIdBirth', '$this->inscriptionData->physicalPerson->dateBirth', '$this->inscriptionData->physicalPerson->location', '$this->inscriptionData->physicalPerson->neighborhood', '$this->inscriptionData->physicalPerson->cityId', '$this->inscriptionData->physicalPerson->zipCode', '$this->inscriptionData->physicalPerson->maritalStatusId', '$this->inscriptionData->physicalPerson->sex', '$this->inscriptionData->physicalPerson->specialNecessityId', '$this->inscriptionData->physicalPerson->ethnicOriginId');

        $varsRequiredNames = array(_M('Candidate name', $module), 
                                   _M('Rg number', $module),
                                   _M('Organ', $module),
                                   _M('Country birth id', $module),
                                   _M('Birth day', $module),
                                   _M('Location', $module),
                                   _M('Neighborhood', $module),
                                   _M('City id', $module),
                                   _M('Zip', $module),
                                   _M('Marital status', $module),
                                   _M('Sex', $module),
                                   _M('Special necessity', $module),
                                   _M('Ethnic origin', $module),
                                   _M('High school', $module),
                                   _M('High school concluded id', $module),
                                   _M('City of school', $module));

        for($x1=0; $x1 < count($varsRequired); $x1++)
        {
            eval(
                 'if(strlen((string)'.$varsRequired[$x1].') > 0)
                  {
                  }
                  else
                  {
                    $msgRequired .= _M(\'Required\',$module) . \': \' . $varsRequiredNames[$x1] . \'<br>\';

                    $flagFaultRequired = true;
                  }'
                );
        }

        if ( $flagFaultRequired == true )
        {
            eval('
                    $lblMsg1 = new MText(\'lblMsg1\', $msgRequired);
                    $lblMsg1->color = \'red\';

                    $cntErrors      = new MVContainer(\'cntErrors\', array($lblMsg1));
                    $this->divError->addControl($cntErrors);
                 ');
        }


        if ( !$flagFaultRequired )
        {
            $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

            $opts = array('page' => '6');  //Verify documents

            $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
        }
    }

    /**
     * Event triggered when user click next
     **/
    public function btnBack_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array('page' => '3');  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }
}
