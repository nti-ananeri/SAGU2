<?php

/**
 *
 * This file handles the connection and actions for sprPupilsAndSchoolsPerformanceBulletinPupilsData table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmInscriptionReserve extends MForm
{
    private $home;
    private $module;

    var $business;
//     var $gridData;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Generate',MIOLO::getCurrentModule()));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {

        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');
        $event      = MIOLO::_request('event');
        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $data->personId           = MIOLO::_request('personId');        

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Inscription reserve', $this->home, 'inscriptionSheet-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Selective process id',$module).':');
        $selectiveProcessLabel->setWidth(FIELD_CONTAINER_SIZE);
        $selectiveProcessLabel->setClass('m-caption m-caption-required');

        $business           = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[]       = new MRequiredValidator('selectiveProcessId', _M('Selective process id', $module)); 
        $selectiveProcessId->setAutoPostBack(true);

        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array( $selectiveProcessLabel, $selectiveProcessId));
        $hctSelectiveProcess->setShowLabel(true);
        $fields[]  = $hctSelectiveProcess;


        $inscriptionLabel = new MText('inscriptionLabel', _M('Inscription id',$module) . ':');
        $inscriptionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $inscriptionIdS = new MLookupTextField('inscriptionIdS', $this->getFormValue('inscriptionIdS', $data->inscriptionIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('limbo, inscriptionPersonIdS, inscriptionPersonNameS'), 'selectiveProcess', 'Inscription', null, array('selectiveProcessId' => 'selectiveProcessId'), true);
        $inscriptionIdS->setJsHint(_M('Enter the inscription id',$module));

        $validators[] = new MIntegerValidator('inscriptionIdS', '', 'optional');

        $inscriptionPersonIdS = new MTextField('inscriptionPersonIdS', $this->getFormValue('inscriptionPersonIdS', $data->inscriptionPersonIdS), '', FIELD_ID_SIZE);
        $inscriptionPersonIdS->setReadOnly(true);
        $inscriptionPersonIdS->setJsHint(_M('Person code',$module));

        $inscriptionPersonNameS = new MTextField('inscriptionPersonNameS', $this->getFormValue('inscriptionPersonNameS', $data->inscriptionPersonNameS), '', FIELD_DESCRIPTION_SIZE);

        $inscriptionPersonNameS->setReadOnly(true);
        $inscriptionPersonNameS->setJsHint(_M('Person name',$module));

        $hctInscription = new MHContainer('hctInscription', array($inscriptionLabel, $inscriptionIdS, $inscriptionPersonIdS, $inscriptionPersonNameS));
        $fields[]  = $hctInscription;

        if( strlen((string)$selectiveProcessId->value) > 0 )
        {
            $businessPlaceOccurrence = $MIOLO->getBusiness($module,'BusPlaceOccurrence');
            $cityExamId = new MComboBox('cityExamId', $this->cityExamId->value, _M('City exam id',$module), $businessPlaceOccurrence->listCityExamOccurrence($selectiveProcessId->value), '', FIELD_CONTAINER_SIZE);
            $fields[] = $cityExamId;

            $filters->cityExamId      = $data->cityExamId->value;
        }

        $typeSheet1Label = new MText('typeSheet1Label', _M('Sheets - ENEM',$module) . ':');
        $typeSheet1Label->setWidth(FIELD_CONTAINER_SIZE);

        $optionsTypeSheet1 = array(array(_M('All sheets', $module), 0),
                                   array(_M('Sheets with ENEM only', $module), 1),
                                   array(_M('Sheets without ENEM only', $module), 2));

        $typeSheet1 = new MRadioButtonGroup('typeSheet1', '', $optionsTypeSheet1, $this->getFormValue('typeSheet1', $data->typeSheet1) ? $this->getFormValue('typeSheet1', $data->typeSheet1) : 0, null, 'horizontal');
        $typeSheet1->SetShowLabel(false);

        $hctTypeSheet1 = new MHContainer('hctTypeSheet1', array($typeSheet1Label, $typeSheet1));
        $fields[]  = $hctTypeSheet1;


        $typeSheet2Label = new MText('typeSheet2Label', _M('Sheets',$module) . ' - ' . _M('Options',$module) . ':');
        $typeSheet2Label->setWidth(FIELD_CONTAINER_SIZE);

        $optionsTypeSheet2 = array(array(_M('All subscriptions', $module), 0),
                                   array(_M('Manual subscriptions only', $module), 1),
                                   array(_M('Internet subscriptions only', $module), 2));

        $typeSheet2 = new MRadioButtonGroup('typeSheet2', '', $optionsTypeSheet2, $this->getFormValue('typeSheet2', $data->typeSheet2) ? $this->getFormValue('typeSheet2', $data->typeSheet2) : 0, null, 'horizontal');
        $typeSheet2->SetShowLabel(false);

        $hctTypeSheet2 = new MHContainer('hctTypeSheet2', array($typeSheet2Label, $typeSheet2));
        $fields[]  = $hctTypeSheet2;

        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $this->setFields($fields);

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->selectiveProcessId     = $data->selectiveProcessId->value;
        $filters->inscriptionId          = $data->inscriptionIdS->value;
        $filters->typeSheet1             = $data->typeSheet1->value;
        $filters->typeSheet2             = $data->typeSheet2->value;

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO             = MIOLO::getInstance();
        $module            = MIOLO::getCurrentModule();
        $action            = MIOLO::getCurrentAction();

        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $data->inscriptionId      = MIOLO::_request('inscriptionIdS');
        $data->cityExamId         = MIOLO::_request('cityExamId');
        $data->typeSheet1         = MIOLO::_request('typeSheet1');
        $data->typeSheet2         = MIOLO::_request('typeSheet2');

        $busInscriptionSheet    = $MIOLO->getBusiness($module, 'BusInscriptionSheet');
        
        $data->inscriptions       = $busInscriptionSheet->pupilsData($data);
        
        $busInscriptionSheet    = $MIOLO->getBusiness($module, 'BusInscriptionSheet');

        $data->coursesOptions = $busInscriptionSheet->getCourseOfOptions($data->inscriptions[0][0]);
        
        $MIOLO->getClass($module, 'RptInscriptionReserve');
        $report = new RptInscriptionReserve($data);
    }
}

?>
