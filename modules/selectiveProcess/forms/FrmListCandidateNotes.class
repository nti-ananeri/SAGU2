<?php

/**
 *
 * This file handles the connection and actions for sprPupilsAndSchoolsPerformanceBulletinPupilsData table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmListCandidateNotes extends MForm
{
    private $home;
    private $module;

    var $business;
//     var $gridData;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Generate',MIOLO::getCurrentModule()));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {

        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');
        $event      = MIOLO::_request('event');
        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        //$toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('List candidate notes by exam', $this->home, 'listCandidateNotes-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;


        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Selective process id',$module).':');
        $selectiveProcessLabel->setWidth(FIELD_CONTAINER_SIZE);
        $selectiveProcessLabel->setClass('m-caption m-caption-required');

        $business           = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[]       = new MRequiredValidator('selectiveProcessId', _M('Selective process id',$module)); 

        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array( $selectiveProcessLabel, $selectiveProcessId));
        $hctSelectiveProcess->setShowLabel(true);
        $fields[]  = $hctSelectiveProcess;


        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $fields[] = new MButton('btnGenerate',_M('Generate',$module));

        $this->setFields($fields);

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        // get filters values
        $filters->selectiveProcessId     = $data->selectiveProcessId->value;

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

    /**
     * Event triggered when user chooses Print from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $this->btnGenerate_click();
    }

    public function btnGenerate_click($sender = null)
    {
        $MIOLO             = MIOLO::getInstance();
        $module            = MIOLO::getCurrentModule();
        $action            = MIOLO::getCurrentAction();

        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');

        $MIOLO->getClass($module, 'RptListCandidateNotes');

        $report = new RptListCandidateNotes($data);
    }
}

?>
