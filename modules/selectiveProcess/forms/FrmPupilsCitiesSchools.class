<?php

/**
 * Pupils/Cities/Schools listing form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/01/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a Candidates/cities/schools Listing
 **/
class FrmPupilsCitiesSchools extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Candidates/cities/schools', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');
        
        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert(_M('Candidates/cities/schools', $module), $this->home, 'candidatesCitiesSchools-16x16.png', true);
        }
        //fim favoritos
            
        $fields[] = $toolBar;

        // Selective process id
        $selectiveProcessIdLabel = new MLabel(_M('Selective process id', $module).':');
        $selectiveProcessIdLabel->setWidth(FIELD_CONTAINER_SIZE);
        $fldsBg11[] = $selectiveProcessIdLabel;
        
        $businessSelectiveProcess = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessId       = new MSelection('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', $businessSelectiveProcess->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[]             = new MRequiredValidator('selectiveProcessId', _M('Selective process id',$module));
        $fldsBg11[]               = $selectiveProcessId;
        $flds[]                   = new MHContainer('hct1', $fldsBg11);

        // Report options
        $reportOptions = array( array(_M('Candidates by alphabetic order', $module), 1),
                                array(_M('Candidates by city',             $module), 2),
                                array(_M('Candidates by school',           $module), 3)
                              );
                              
        if ( strlen((string)$data->reportOption) > 0 )
        {
            //Seta uma opção por default
            $data->reportOption = _M('Pupils by alphabetic order', $module);
        }

        $reportOptionLabel = new MLabel(_M('Report option', $module).':');
        $reportOptionLabel->setWidth(FIELD_CONTAINER_SIZE);
        $fldsBg12[] = $reportOptionLabel;
        $reportOption = new MRadioButtonGroup('reportOption', '', $reportOptions, $this->getFormValue('reportOption', $data->reportOption));
        $reportOption->setShowLabel(false);
        $reportOption->setAutoPostBack(true);
        $fldsBg12[] = $reportOption;
        $flds[]   = new MHContainer('hct2', $fldsBg12);
        $fields[] = new MBaseGroup('bg1', _M('Main information', $module), $flds, 'vertical');
       
        // DYNAMIC FIELDS
        // If report option equals Candidates By school, obtain the college graduation year...
        if ( $this->getFormValue('reportOption', $data->reportOption) == 3 )
        {
            $yearLabel = new MText('text1', _M('Whats the college graduation year? (aaaa)', $module).':');
            $yearLabel->setWidth(FIELD_CONTAINER_SIZE);
            $fldsBg21[] = $yearLabel;
            $fldsBg21[] = new MTextField('year', $this->getFormValue('year', $data->year), '', 5);
            $flds2[]  = new MHContainer('hct3', $fldsBg21);
            $flds2[]  = new MText('text2', _M('If you want to show all years, keep this field blank', $module), 'red');

            $fields[] = new MBaseGroup('bg2', _M('School information', $module), $flds2, 'vertical');
        }
        $sep1 = new MSeparator('<hr>');
        $sep1->setWidth('99%');
        $fields[] = $sep1;
        $btnGenerate = new MButton('btnGenerate', _M('Generate', $module), 'SUBMIT');
        $fields[] = $btnGenerate;
        $fields[] = new Separator('');
        
        $this->setValidators($validators);
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $this->selectiveProcessId->setAutoPostBack(true);
        $optionId           = $this->getFormValue('reportOption');
        $selectiveProcessId = $this->getFormValue('selectiveProcessId');
        $year               = $this->getFormValue('year');

        $businessPupilsCitiesSchools = $MIOLO->getBusiness($module, 'BusPupilsCitiesSchools');
        $data->optionId = $optionId;
        switch ($optionId)
        {
            case 1:
                $pupilsData = $businessPupilsCitiesSchools->pupilsByAlphabeticOrder($selectiveProcessId);

                $optionsNumber = 0;

                if ( is_array($pupilsData) )
                {
                    foreach ($pupilsData as $pupilData)
                    {
                        $gridLine = array($pupilData[2], $pupilData[3], $pupilData[4], $pupilData[6]);

                        $inscriptionOptions = $businessPupilsCitiesSchools->getInscriptionOptions($pupilData[0]);

                        if (count($inscriptionOptions) > $optionsNumber)
                        {
                            $optionsNumber = count($inscriptionOptions);
                        }

                        if ( is_array($inscriptionOptions) )
                        {
                            foreach ($inscriptionOptions as $inscriptionOption)
                            {
                                $gridLine[] = $inscriptionOption[4];
                            }
                        }

                        $gridData[] = $gridLine;
                    }
                }
                else
                {
                    //Não tem alunos para ordenar por ordem alfabética
                }

                $data->gridData      = $gridData;
                $data->optionsNumber = $optionsNumber;

                $gridPupilsCitiesSchoolsOp1 = $MIOLO->getUI()->getGrid($module, 'GrdPupilsCitiesSchoolsOp1', $data);
                $gridPupilsCitiesSchoolsOp1->setTitle(_M('Candidates by alphabetic order', $module));
                $gridPupilsCitiesSchoolsOp1->setClose(null);
                $this->addField($gridPupilsCitiesSchoolsOp1);
                break;
            case 2:
                $pupilsData = $businessPupilsCitiesSchools->pupilsByCity($selectiveProcessId);

                $optionsNumber = 0;

                for ($i = 0; $i < count($pupilsData); $i++)
                {
                    $inscriptionOptions = $businessPupilsCitiesSchools->getInscriptionOptions($pupilsData[$i][0]);
                    if (count($inscriptionOptions) > $optionsNumber)
                    {
                        $optionsNumber = count($inscriptionOptions);
                    }


                    $gridLine = array ($pupilsData[$i][1], $pupilsData[$i][3], $pupilsData[$i][4], $pupilsData[$i][5]);

                    if ( is_array($inscriptionOptions) )
                    {
                        foreach ($inscriptionOptions as $inscriptionOption)
                        {
                            $gridLine[] = $inscriptionOption[4];
                        }
                    }

                    $gridData[] = $gridLine;

                    if ($pupilsData[$i][2] != $pupilsData[$i+1][2] || $pupilsData[$i+1] == null)
                    {
                        $data->gridData = $gridData;
                        $data->optionsNumber = $optionsNumber;
                        $gridPupilsCitiesSchoolsOp2 = $MIOLO->getUI()->getGrid($module, 'GrdPupilsCitiesSchoolsOp2', $data);   
                        $gridPupilsCitiesSchoolsOp2->setTitle(_M('City name', $module).': '.$data->gridData[0][1]);
                        $gridPupilsCitiesSchoolsOp2->setClose(null);

                        $this->addField($gridPupilsCitiesSchoolsOp2);
                        $this->addField(new MSeparator());
                        $this->addField(new MSeparator());
                        $optionsNumber = 0;
                        unset($gridData);
                    }
                }

                break;
            case 3:
                $pupilsData = $businessPupilsCitiesSchools->pupilsBySchool($selectiveProcessId, $year);

                $optionsNumber = 0;

                for ($i = 0; $i < count($pupilsData); $i++)
                {
                    $inscriptionOptions = $businessPupilsCitiesSchools->getInscriptionOptions($pupilsData[$i][0]);

                    if ( count($inscriptionOptions) > $optionsNumber )
                    {
                        $optionsNumber = count($inscriptionOptions);
                    }

                    $gridLine = array ($pupilsData[$i][2], $pupilsData[$i][3], $pupilsData[$i][4], $pupilsData[$i][6]);

                    if ( is_array($inscriptionOptions) )
                    {
                        foreach ( $inscriptionOptions as $inscriptionOption )
                        {
                            $gridLine[] = $inscriptionOption[4];
                        }
                    }

                    $gridData[] = $gridLine;

                    if (($pupilsData[$i][5] != $pupilsData[$i+1][5] || $pupilsData[$i][7] != $pupilsData[$i+1][7]) || $pupilsData[$i+1] == null)
                    {
                        $data->gridData      = $gridData;
                        $data->optionsNumber = $optionsNumber;
                        $gridPupilsCitiesSchoolsOp2 = $MIOLO->getUI()->getGrid($module, 'GrdPupilsCitiesSchoolsOp2', $data);
                        $gridPupilsCitiesSchoolsOp2->setTitle(_M('School', $module).': '.$gridData[0][3]);
                        $gridPupilsCitiesSchoolsOp2->setClose(null);
                        $this->addField($gridPupilsCitiesSchoolsOp2);
                        $optionsNumber = 0;
                        unset($gridData);
                    }
                }
                break;
            default:
                break;
        }
    }
}

?>
