<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basInscription table
 */
class FrmInscriptionSearch extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $this->module = 'basic';
        $module = $this->module;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $fields[] = $toolBar;

        $selectiveProcessIdS  = new MLookupTextField('selectiveProcessIdS', $this->selectiveProcessIdS->value, _M('Selective process id',$module), 10, null, null, null , $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $fields[]             = $selectiveProcessIdS;

        $personIdS  = new MLookupTextField('personIdS', $this->personIdS->value, _M('Person id',$module), FIELD_ID_SIZE, null, null, ('personNameS') , 'basic', 'Person', null, null, true);
        $personIdS->setJsHint(_M('Enter the person code',$module));
        $fields[]             = $personIdS;
        $validators[] = new MIntegerValidator('personIdS', '', 'optional');

        $personNameS  = new MTextField('personNameS', $this->personNameS->value, _M('Person name', $module), 40);
        $fields[]             = $personNameS;

        $cityExamS  = new MLookupTextField('cityExamS', $this->cityExamS->value, _M('City exam',$module), 10, null, null, ('cityNameS, stateIdS') , 'basic', 'City', null, null, true);
        $cityExamS->setJsHint(_M('Enter the city exam',$module));
        $fields[]             = $cityExamS;
        $validators[] = new MIntegerValidator('cityExamS', '', 'optional');

        $cityNameS  = new MTextField('cityNameS', $this->cityNameS->value, _M('City name', $module), 40);
//      $descriptionS->setReadOnly(true);
        $fields[]             = $cityNameS;

        $languageIdS  = new MLookupTextField('languageIdS', $this->languageIdS->value, _M('Language id',$module), FIELD_ID_SIZE, null, null, null, $module, 'Language', null, null, true);
        $languageIdS->setJsHint(_M('Enter the language code',$module));
        $fields[]             = $languageIdS;
        $validators[] = new MIntegerValidator('languageIdS', '', 'optional');

        $languageDescriptionS = new MTextField('languageDescriptionS', $this->getFormValue('languageDescriptionS', $this->inscriptionData->languageDescriptionS), _M('Language description', $module), 30);
        $fields[]             = $languageDescriptionS;

        $courseOccurrenceIdS  = new MLookupTextField('courseOccurrenceIdS' . $x, $this->getFormValue('courseOccurrenceIdS', $this->inscriptionData->courseOccurrenceIdS), _M('Vacancy occurrence id',$module), FIELD_ID_SIZE, null, null, ('limbo, limbo, limbo, courseNameS' . $x) , $module, 'CourseOccurrence', null, null, true);
        $fields[]             = $courseOccurrenceIdS;
        $validators[] = new MIntegerValidator('courseOccurrenceIdS', '', 'optional');

        $courseVersionS     = new MTextField('courseVersionS' . $x, $this->courseVersionS->value, _M('Course version', $module), 30);
        $fields[]           = $courseVersionS;

        $courseIdS          = new MTextField('courseIdS' . $x, $this->courseVersionS->value, _M('Course id', $module), 30);
        $fields[]           = $courseIdS;

        $courseNameS        = new MTextField('courseNameS' . $x, $this->courseNameS->value, _M('Course name', $module), 30);
        $fields[]           = $courseNameS;

        $optionNumberS      = new MTextField('optionNumberS' . $x, $this->optionNumberS->value, _M('Option number', $module), 30);
        $fields[]           = $optionNumberS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);

        // get filters values
        //$filters->inscriptionId     = $this->inscriptionIdS->value;
        $filters->selectiveProcessId    = $this->selectiveProcessIdS->value;
        $filters->personId              = $this->personIdS->value;
        $filters->personName            = $this->personNameS->value;
        $filters->cityExam              = $this->cityExamS->value;
        $filters->cityName              = $this->cityNameS->value;
        $filters->languageId            = $this->languageIdS->value;
        $filters->languageDescription   = $this->languageDescriptionS->value;
        $filters->courseOccurrenceId    = $this->courseOccurrenceIdS->value;
        $filters->courseVersion         = $this->courseVersionS->value;
        $filters->courseId              = $this->courseIdS->value;
        $filters->courseName            = $this->courseNameS->value;
        $filters->optionNumber          = $this->optionNumberS->value;

        $grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdInscriptionSearch', $filters);
        $business   = $this->manager->getBusiness($module,'BusInscription');
        $data       = $business->searchInscription($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);


//        $this->page->onLoad('document.' . $this->name . '.courseVacantIdS.focus();');

    }

}

?>
