<?php

/**
 * Inscription reports form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 01/06/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmObjectiveExam extends MForm
{
    private $home;
    
    var $business;
    var $gridData;
	private $selectiveProcessId;
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusInscriptionReport');
        $this->home   = $data->home;

        parent::__construct(_M('Objective Exam', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
		$this->selectiveProcessId = $this->selectiveProcessId ? $this->selectiveProcessId : SELECTIVE_PROCESS_CURRENT;

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');

//         if ($function == 'print')
//         {
            $toolBar->disableButton('tbBtnPrint');
//         }

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Objective Exam', $this->home, 'objectiveExam-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;


        if ((strlen((string)$function) == 0) || ($function == null))
        {
            $flds[] = new Separator('');

            $business           = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
            $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
            $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
            $validators[]       = new MRequiredValidator('selectiveProcessId'); 
            $flds1[]           = $selectiveProcessId;
            $flds1[]           = new Separator('');


            $numberSheet  = new MTextField('numberSheet', $this->getFormValue('numberSheet', $data->numberSheet), _M('Number of answer sheet',$module), 10);
            $numberSheet->setJsHint(_M('Enter the number of answer sheet',$module));
            $flds1[]     = $numberSheet;
            $validators[] = new MRequiredValidator('numberSheet');
            $flds1[]             = new Separator('');


            $inscriptionLabel = new MText('inscriptionLabel', _M('Inscription id',$module) . ':');
            $inscriptionLabel->setWidth(FIELD_CONTAINER_SIZE);

            $inscriptionIdS = new MLookupTextField('inscriptionIdS', $this->getFormValue('inscriptionIdS', $data->inscriptionIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('limbo, inscriptionPersonIdS, inscriptionPersonNameS'), 'selectiveProcess', 'Inscription', null, array('selectiveProcessId' => 'selectiveProcessId'), true);
            $inscriptionIdS->setJsHint(_M('Enter the inscription id',$module));


            $validators[] = new MIntegerValidator('inscriptionIdS', '', 'optional');

            $inscriptionPersonIdS = new MTextField('inscriptionPersonIdS', $this->getFormValue('inscriptionPersonIdS', $data->inscriptionPersonIdS), '', FIELD_ID_SIZE);
            $inscriptionPersonIdS->setReadOnly(true);
            $inscriptionPersonIdS->setJsHint(_M('Person code',$module));

            $inscriptionPersonNameS = new MTextField('inscriptionPersonNameS', $this->getFormValue('inscriptionPersonNameS', $data->inscriptionPersonNameS), '', FIELD_DESCRIPTION_SIZE);

            $inscriptionPersonNameS->setReadOnly(true);
            $inscriptionPersonNameS->setJsHint(_M('Person name',$module));

            $hctInscription = new MHContainer('hctInscription', array($inscriptionLabel, $inscriptionIdS, $inscriptionPersonIdS, $inscriptionPersonNameS));
            $flds1[]  = $hctInscription;


            $flds1[]        = new Separator('');
            $isConfigureObjectiveExamLabel = new MText('isConfigureObjectiveExamLabel', _M('Configuration objective exam',$module) . '?');
            $isConfigureObjectiveExamLabel->setClass('m-caption m-caption-required');

            $isConfigureObjectiveExam = new MRadioButtonGroup('isConfigureObjectiveExam', '', SAGU::listYesNo('1'), $this->getFormValue('isConfigureObjectiveExam', $data->isConfigureObjectiveExam) ? $this->getFormValue('isConfigureObjectiveExam', $data->isConfigureObjectiveExam) : 'f', null, 'horizontal');
            $isConfigureObjectiveExam->SetShowLabel(false);
            $isConfigureObjectiveExam->setAutoPostBack(true);

            $hctIsConfigureObjectiveExam = new MHContainer('hctIsConfigureObjectiveExam', array($isConfigureObjectiveExamLabel, $isConfigureObjectiveExam));

            $flds1[] = $hctIsConfigureObjectiveExam;

            $btnGenerate = new MButton('btnGenerate',_M('Generate',$module));
            $btnGenerate->attachEventHandler('click', 'btnGenerateClick');
            $flds1[] = $btnGenerate;

            $fields[]          = new MHiddenField('PageInformations', $PageInformations);

            $bsg1            = new BaseGroup('bsg1', _M('Objective exam informations', $module), $flds1, 'vertical');
            $bsg1->showLabel = true;
            $bsg1->width     = '70%';


            $flds2[] = new Separator('');

            $rightMarginOfPage = new MTextField('rightMarginOfPage', $this->getFormValue('rightMarginOfPage', $data->rightMarginOfPage) ? $this->getFormValue('rightMarginOfPage', $data->rightMarginOfPage) : GR_RIGHT_MARGIN , _M('Right margin of page',$module), 15);
            $rightMarginOfPage->setJsHint(_M('Enter the right margin of page (in millimeters)',$module));
            $flds2[]           = $rightMarginOfPage;
            $validators[] = new MIntegerValidator('rightMarginOfPage', '', 'required');

            $flds2[] = new Separator('');

            $upperLeftMarcPositionX = new MTextField('upperLeftMarcPositionX', $this->getFormValue('upperLeftMarcPositionX', $data->upperLeftMarcPositionX) ? $this->getFormValue('upperLeftMarcPositionX', $data->upperLeftMarcPositionX) : GR_UPPER_LEFT_POS_X , _M('Upper-left position X',$module), 15);

            $upperLeftMarcPositionY = new MTextField('upperLeftMarcPositionY', $this->getFormValue('upperLeftMarcPositionY', $data->upperLeftMarcPositionY) ? $this->getFormValue('upperLeftMarcPositionY', $data->upperLeftMarcPositionY) : GR_UPPER_LEFT_POS_Y , _M('Upper-left position Y',$module), 15);

            $upperLeftMarcHeigth = new MTextField('upperLeftMarcHeigth', $this->getFormValue('upperLeftMarcHeigth', $data->upperLeftMarcHeigth) ? $this->getFormValue('upperLeftMarcHeigth', $data->upperLeftMarcHeigth) : GR_UPPER_LEFT_HEIGTH , _M('Upper-left height',$module), 15);

            $upperLeftMarcThickness = new MTextField('upperLeftMarcThickness', $this->getFormValue('upperLeftMarcThickness', $data->upperLeftMarcThickness) ? $this->getFormValue('upperLeftMarcThickness', $data->upperLeftMarcThickness) : GR_UPPER_LEFT_THICKNESS , _M('Upper-left thickness',$module), 15);


            $upperrightMarcPositionX = new MTextField('upperrightMarcPositionX', $this->getFormValue('upperrightMarcPositionX', $data->upperrightMarcPositionX) ? $this->getFormValue('upperrightMarcPositionX', $data->upperrightMarcPositionX) : GR_UPPER_RIGHT_POS_X, _M('Upper-right position X',$module), 15);

            $upperrightMarcPositionY = new MTextField('upperrightMarcPositionY', $this->getFormValue('upperrightMarcPositionY', $data->upperrightMarcPositionY) ? $this->getFormValue('upperrightMarcPositionY', $data->upperrightMarcPositionY) : GR_UPPER_RIGHT_POS_Y , _M('Upper-right position Y',$module), 15);

            $upperrightMarcHeigth = new MTextField('upperrightMarcHeigth', $this->getFormValue('upperrightMarcHeigth', $data->upperrightMarcHeigth) ? $this->getFormValue('upperrightMarcHeigth', $data->upperrightMarcHeigth) : GR_UPPER_RIGHT_HEIGTH , _M('Upper-left height',$module), 15);

            $upperrightMarcThickness = new MTextField('upperrightMarcThickness', $this->getFormValue('upperrightMarcThickness', $data->upperrightMarcThickness) ? $this->getFormValue('upperrightMarcThickness', $data->upperrightMarcThickness) : GR_UPPER_RIGHT_THICKNESS, _M('Upper-right thickness',$module), 15);


            $bottomLeftMarcPositionX = new MTextField('bottomLeftMarcPositionX', $this->getFormValue('bottomLeftMarcPositionX', $data->bottomLeftMarcPositionX) ? $this->getFormValue('bottomLeftMarcPositionX', $data->bottomLeftMarcPositionX) : GR_BOTTOM_LEFT_POS_X , _M('bottom-left position X',$module), 15);

            $bottomLeftMarcPositionY = new MTextField('bottomLeftMarcPositionY', $this->getFormValue('bottomLeftMarcPositionY', $data->bottomLeftMarcPositionY) ? $this->getFormValue('bottomLeftMarcPositionY', $data->bottomLeftMarcPositionY) : GR_BOTTOM_LEFT_POS_Y , _M('bottom-left position Y',$module), 15);

            $bottomLeftMarcHeigth = new MTextField('bottomLeftMarcHeigth', $this->getFormValue('bottomLeftMarcHeigth', $data->bottomLeftMarcHeigth) ? $this->getFormValue('bottomLeftMarcHeigth', $data->bottomLeftMarcHeigth) : GR_BOTTOM_LEFT_HEIGTH , _M('bottom-left height',$module), 15);

            $bottomLeftMarcThickness = new MTextField('bottomLeftMarcThickness', $this->getFormValue('bottomLeftMarcThickness', $data->bottomLeftMarcThickness) ? $this->getFormValue('bottomLeftMarcThickness', $data->bottomLeftMarcThickness) : GR_BOTTOM_LEFT_THICKNESS , _M('bottom-left thickness',$module), 15);


            $bottomrightMarcPositionX = new MTextField('bottomrightMarcPositionX', $this->getFormValue('bottomrightMarcPositionX', $data->bottomrightMarcPositionX) ? $this->getFormValue('bottomrightMarcPositionX', $data->bottomrightMarcPositionX) : GR_BOTTOM_RIGHT_POS_X, _M('bottom-right position X',$module), 15);

            $bottomrightMarcPositionY = new MTextField('bottomrightMarcPositionY', $this->getFormValue('bottomrightMarcPositionY', $data->bottomrightMarcPositionY) ? $this->getFormValue('bottomrightMarcPositionY', $data->bottomrightMarcPositionY) : GR_BOTTOM_RIGHT_POS_Y, _M('bottom-right position Y',$module), 15);

            $bottomrightMarcHeigth = new MTextField('bottomrightMarcHeigth', $this->getFormValue('bottomrightMarcHeigth', $data->bottomrightMarcHeigth) ? $this->getFormValue('bottomrightMarcHeigth', $data->bottomrightMarcHeigth) : GR_BOTTOM_RIGHT_HEIGTH, _M('bottom-left height',$module), 15);

            $bottomrightMarcThickness = new MTextField('bottomrightMarcThickness', $this->getFormValue('bottomrightMarcThickness', $data->bottomrightMarcThickness) ? $this->getFormValue('bottomrightMarcThickness', $data->bottomrightMarcThickness) : GR_BOTTOM_RIGHT_THICKNESS, _M('bottom-right thickness',$module), 15);


            //Configuration writting sheetCode
            $sheetCodeFont = new MSelection('sheetCodeFont', $this->getFormValue('sheetCodeFont', $data->sheetCodeFont) ? $this->getFormValue('sheetCodeFont', $data->sheetCodeFont) : GR_SHEET_CODE_FONT, _M('Sheet code font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));
            $stylesheetCodeFont = new MSelection('stylesheetCodeFont', $this->getFormValue('stylesheetCodeFont', $data->stylesheetCodeFont) ? $this->getFormValue('stylesheetCodeFont', $data->stylesheetCodeFont) : GR_SHEET_CODE_STYLE, _M('Sheet code style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));

            $heightsheetCode = new MTextField('heightsheetCode', $this->getFormValue('heightsheetCode', $data->heightsheetCode) ? $this->getFormValue('heightsheetCode', $data->heightsheetCode) : GR_SHEET_CODE_HEIGHT, _M('Height of sheet code ',$module), 15);
            $heightsheetCode->setJsHint(_M('Enter the height of sheetCode',$module));
            $validators[] = new MIntegerValidator('heightsheetCode', '', 'required');

            $xPositionsheetCode = new MTextField('xPositionsheetCode', $this->getFormValue('xPositionsheetCode', $data->xPositionsheetCode) ? $this->getFormValue('xPositionsheetCode', $data->xPositionsheetCode) : GR_SHEET_CODE_POS_X, _M('Position in X of sheet code ',$module), 15);
            $xPositionsheetCode->setJsHint(_M('Enter the xPosition of sheetCode',$module));
            $validators[] = new MIntegerValidator('xPositionsheetCode', '', 'required');

            $lengthsheetCode = new MTextField('lengthsheetCode', $this->getFormValue('lengthsheetCode', $data->lengthsheetCode) ? $this->getFormValue('lengthsheetCode', $data->lengthsheetCode) : GR_SHEET_CODE_LENGTH , _M('Length of Sheet Code',$module), 15);
            $lengthsheetCode->setJsHint(_M('Enter the length of sheetCode',$module));
            $validators[] = new MIntegerValidator('lengthsheetCode', '', 'required');


            $vctBord1            = new MVContainer('vctBord1',array($upperLeftMarcPositionX, $upperrightMarcPositionX, $bottomLeftMarcPositionX, $bottomrightMarcPositionX, $sheetCodeFont));
            $vctBord1->addBoxStyle('width', '20%');

            $vctBord2            = new MVContainer('vctBord2',array($upperLeftMarcPositionY, $upperrightMarcPositionY, $bottomLeftMarcPositionY, $bottomrightMarcPositionY, $stylesheetCodeFont));
            $vctBord2->addBoxStyle('width', '20%');

            $vctBord3            = new MVContainer('vctBord3',array($upperLeftMarcHeigth, $upperrightMarcHeigth, $bottomLeftMarcHeigth, $bottomrightMarcHeigth, $heightsheetCode));
            $vctBord3->addBoxStyle('width', '20%');

            $vctBord4            = new MVContainer('vctBord4',array($upperLeftMarcThickness, $upperrightMarcThickness, $bottomLeftMarcThickness, $bottomrightMarcThickness, $xPositionsheetCode));
            $vctBord4->addBoxStyle('width', '20%');

            $hctBord1 = new MHContainer('hctBord1', array($vctBord1, $vctBord2, $vctBord3, $vctBord4));
            $flds2[] = $hctBord1;

            $flds2[] = $lengthsheetCode;

            $bsg2            = new BaseGroup('bsg2', _M('Configure writting sheet', $module), $flds2, 'vertical');
            $bsg2->showLabel = true;
            $bsg2->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');


            //Title
            $titleFont = new MSelection('titleFont', $this->getFormValue('titleFont', $data->titleFont) ? $this->getFormValue('titleFont', $data->titleFont) : DEFAULT_REPORT_FONT, _M('Font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));

            $titleFont->addBoxStyle('width', '20%');

            $styleTitleFont = new MSelection('styleTitleFont', $this->getFormValue('styleTitleFont', $data->styleTitleFont) ? $this->getFormValue('styleTitleFont', $data->styleTitleFont) : 'B', _M('Style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));

            $styleTitleFont->addBoxStyle('width', '20%');

            $alignTitleFont = new MSelection('alignTitleFont', $this->getFormValue('alignTitleFont', $data->alignTitleFont) ? $this->getFormValue('alignTitleFont', $data->alignTitleFont) : 'C', _M('Align', $module), 
                                            array('L'=>_M('left', $module), 
                                                'R'=>_M('right', $module), 
                                                'C'=>_M('center', $module)));

            $alignTitleFont->addBoxStyle('width', '20%');

            $heightTitle = new MTextField('heightTitle', $this->getFormValue('heightTitle', $data->heightTitle) ? $this->getFormValue('heightTitle', $data->heightTitle) : 6 , _M('Height of title',$module), 15);
            $heightTitle->setJsHint(_M('Enter the height of title',$module));
            $validators[] = new MIntegerValidator('heightTitle', '', 'required');
            $heightTitle->addBoxStyle('width', '20%');

            $lengthTitle = new MTextField('lengthTitle', $this->getFormValue('lengthTitle', $data->lengthTitle) ? $this->getFormValue('lengthTitle', $data->lengthTitle) : 16 , _M('Length of title',$module), 15);
            $lengthTitle->setJsHint(_M('Enter the length of title',$module));
            $validators[] = new MIntegerValidator('lengthTitle', '', 'required');

            $titleDescription = new MTextField('titleDescription', $this->getFormValue('titleDescription', $data->titleDescription) ? $this->getFormValue('titleDescription', $data->titleDescription) : $business->getSelectiveProcess($this->selectiveProcessId)->selectiveProcessId . ' ' . $business->getSelectiveProcess($this->selectiveProcessId)->description, _M('Title',$module), 50);
            $heightTitle->setJsHint(_M('Enter the title description',$module));

            $hctTitleConfiguration = new MHContainer('hctTitleConfiguration', array($titleFont, $styleTitleFont, $alignTitleFont, $heightTitle, $lengthTitle, $titleDescription));
            $flds2[] = $hctTitleConfiguration;

            $bsg3            = new BaseGroup('bsg3', _M('Title writting sheet', $module), $flds2, 'vertical');
            $bsg3->showLabel = true;
            $bsg3->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');


            //SUB-TITULO
            $subtitleFont = new MSelection('subtitleFont', $this->getFormValue('subtitleFont', $data->subtitleFont) ? $this->getFormValue('subtitleFont', $data->subtitleFont) : DEFAULT_REPORT_FONT, _M('Font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));

            $subtitleFont->addBoxStyle('width', '20%');

            $stylesubtitleFont = new MSelection('stylesubtitleFont', $this->getFormValue('stylesubtitleFont', $data->stylesubtitleFont) ? $this->getFormValue('stylesubtitleFont', $data->stylesubtitleFont) : 'B', _M('Style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));

            $stylesubtitleFont->addBoxStyle('width', '20%');

            $alignsubtitleFont = new MSelection('alignsubtitleFont', $this->getFormValue('alignsubtitleFont', $data->alignsubtitleFont) ? $this->getFormValue('alignsubtitleFont', $data->alignsubtitleFont) : 'C', _M('Align', $module), 
                                            array('L'=>_M('left', $module), 
                                                'R'=>_M('right', $module), 
                                                'C'=>_M('center', $module)));

            $alignsubtitleFont->addBoxStyle('width', '20%');

            $heightsubtitle = new MTextField('heightsubtitle', $this->getFormValue('heightsubtitle', $data->heightsubtitle) ? $this->getFormValue('heightsubtitle', $data->heightsubtitle) : 8 , _M('Height of subtitle',$module), 15);
            $heightsubtitle->setJsHint(_M('Enter the height of subtitle',$module));
            $validators[] = new MIntegerValidator('heightsubtitle', '', 'required');
            $heightsubtitle->addBoxStyle('width', '20%');

            $lengthsubtitle = new MTextField('lengthsubtitle', $this->getFormValue('lengthsubtitle', $data->lengthsubtitle) ? $this->getFormValue('lengthsubtitle', $data->lengthsubtitle) : 16 , _M('Length of subtitle',$module), 15);
            $lengthsubtitle->setJsHint(_M('Enter the length of subtitle',$module));
            $validators[] = new MIntegerValidator('lengthsubtitle', '', 'required');

            $subtitleDescription = new MTextField('subtitleDescription', $this->getFormValue('subtitleDescription', $data->subtitleDescription) ? $this->getFormValue('subtitleDescription', $data->subtitleDescription) : _M('ANSWERS PAGE', $module), _M('subtitle',$module), 50);
            $heightsubtitle->setJsHint(_M('Enter the subtitle description',$module));
            $subtitleDescription->addBoxStyle('width', '20%');

            $hctsubtitleConfiguration = new MHContainer('hctsubtitleConfiguration', array($subtitleFont, $stylesubtitleFont, $alignsubtitleFont, $heightsubtitle, $lengthsubtitle, $subtitleDescription));
            $flds2[] = $hctsubtitleConfiguration;

            $bsg4            = new BaseGroup('bsg4', _M('Subtitle configuration', $module), $flds2, 'vertical');
            $bsg4->showLabel = true;
            $bsg4->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');


            //Informations
            $informationFont = new MSelection('informationFont', $this->getFormValue('informationFont', $data->informationFont) ? $this->getFormValue('informationFont', $data->informationFont) : DEFAULT_REPORT_FONT, _M('Font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));

            $informationFont->addBoxStyle('width', '20%');

            $styleinformationFont = new MSelection('styleinformationFont', $this->getFormValue('styleinformationFont', $data->styleinformationFont) ? $this->getFormValue('styleinformationFont', $data->styleinformationFont) : 'B', _M('Style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));

            $styleinformationFont->addBoxStyle('width', '20%');

            $aligninformationFont = new MSelection('aligninformationFont', $this->getFormValue('aligninformationFont', $data->aligninformationFont) ? $this->getFormValue('aligninformationFont', $data->aligninformationFont) : 'C', _M('Align', $module), 
                                            array('L'=>_M('left', $module), 
                                                'R'=>_M('right', $module), 
                                                'C'=>_M('center', $module)));

            $aligninformationFont->addBoxStyle('width', '20%');


            $heightinformation = new MTextField('heightinformation', $this->getFormValue('heightinformation', $data->heightinformation) ? $this->getFormValue('heightinformation', $data->heightinformation) : 8 , _M('Height of information',$module), 15);
            $heightinformation->setJsHint(_M('Enter the height of information',$module));
            $validators[] = new MIntegerValidator('heightinformation', '', 'required');
            $heightinformation->addBoxStyle('width', '20%');

            $lengthinformation = new MTextField('lengthinformation', $this->getFormValue('lengthinformation', $data->lengthinformation) ? $this->getFormValue('lengthinformation', $data->lengthinformation) : 12 , _M('Length of information',$module), 15);
            $lengthinformation->setJsHint(_M('Enter the length of information',$module));
            $validators[] = new MIntegerValidator('lengthinformation', '', 'required');

            $informationDescription = new MMultiLineField('informationDescription', $this->getFormValue('informationDescription', $data->informationDescription) ? $this->getFormValue('informationDescription', $data->informationDescription) : 'Preencha esta folha com caneta azul ou preta e com muita atenção, pois não será substituída', _M('information',$module), 50, 3, 50);
            $heightinformation->setJsHint(_M('Enter the information description',$module));

            $hctinformationConfiguration = new MHContainer('hctinformationConfiguration', array($informationFont, $styleinformationFont, $aligninformationFont, $heightinformation, $lengthinformation, $informationDescription));
            $flds2[] = $hctinformationConfiguration;


            $bsg5            = new BaseGroup('bsg5', _M('Information configuration', $module), $flds2, 'vertical');
            $bsg5->showLabel = true;
            $bsg5->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');

            //Inscription number
            $inscriptionNumberFont = new MSelection('inscriptionNumberFont', $this->getFormValue('inscriptionNumberFont', $data->inscriptionNumberFont) ? $this->getFormValue('inscriptionNumberFont', $data->inscriptionNumberFont) : DEFAULT_REPORT_FONT, _M('Font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));

            $inscriptionNumberFont->addBoxStyle('width', '20%');

            $styleinscriptionNumberFont = new MSelection('styleinscriptionNumberFont', $this->getFormValue('styleinscriptionNumberFont', $data->styleinscriptionNumberFont) ? $this->getFormValue('styleinscriptionNumberFont', $data->styleinscriptionNumberFont) : ' ', _M('Style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));
            $styleinscriptionNumberFont->addBoxStyle('width', '20%');

            $aligninscriptionNumberFont = new MSelection('aligninscriptionNumberFont', $this->getFormValue('aligninscriptionNumberFont', $data->aligninscriptionNumberFont) ? $this->getFormValue('aligninscriptionNumberFont', $data->aligninscriptionNumberFont) : 'R', _M('Align', $module), 
                                            array('L'=>_M('left', $module), 
                                                'R'=>_M('right', $module), 
                                                'C'=>_M('center', $module)));

            $aligninscriptionNumberFont->addBoxStyle('width', '20%');

            $heightinscriptionNumber = new MTextField('heightinscriptionNumber', $this->getFormValue('heightinscriptionNumber', $data->heightinscriptionNumber) ? $this->getFormValue('heightinscriptionNumber', $data->heightinscriptionNumber) : GR_INSCRIPTION_NUMBER_POS_Y , _M('Height of inscriptionNumber',$module), 15);
            $heightinscriptionNumber->setJsHint(_M('Enter the height of inscriptionNumber',$module));
            $validators[] = new MIntegerValidator('heightinscriptionNumber', '', 'required');
            $heightinscriptionNumber->addBoxStyle('width', '20%');

            $lengthinscriptionNumber = new MTextField('lengthinscriptionNumber', $this->getFormValue('lengthinscriptionNumber', $data->lengthinscriptionNumber) ? $this->getFormValue('lengthinscriptionNumber', $data->lengthinscriptionNumber) : GR_INSCRIPTION_NUMBER_LENGTH , _M('Length of inscriptionNumber',$module), 15);
            $lengthinscriptionNumber->setJsHint(_M('Enter the length of inscriptionNumber',$module));
            $validators[] = new MIntegerValidator('lengthinscriptionNumber', '', 'required');

            $spaceTitleNumberInscription = new MTextField('spaceTitleNumberInscription', $this->getFormValue('spaceTitleNumberInscription', $data->spaceTitleNumberInscription) ? $this->getFormValue('spaceTitleNumberInscription', $data->spaceTitleNumberInscription) : 2 , _M('Space between title and value',$module), 15);
            $spaceTitleNumberInscription->setJsHint(_M('Enter de value',$module));
            $validators[] = new MIntegerValidator('spaceTitleNumberInscription', '', 'required');

            $hctinscriptionNumberConfiguration = new MHContainer('hctinscriptionNumberConfiguration', array($inscriptionNumberFont, $styleinscriptionNumberFont, $aligninscriptionNumberFont, $heightinscriptionNumber, $lengthinscriptionNumber, $spaceTitleNumberInscription));
            $flds2[] = $hctinscriptionNumberConfiguration;

            $bsg6            = new BaseGroup('bsg6', _M('Inscription number configuration', $module), $flds2, 'vertical');
            $bsg6->showLabel = true;
            $bsg6->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');


            //Students Information
            $studentsInformationFont = new MSelection('studentsInformationFont', $this->getFormValue('studentsInformationFont', $data->studentsInformationFont) ? $this->getFormValue('studentsInformationFont', $data->studentsInformationFont) : DEFAULT_REPORT_FONT, _M('Font', $module), 
                                            array('Courier'=>_M('Courier', $module), 
                                            'Arial'=>_M('Arial', $module),
                                            'Times'=>_M('Times', $module),
                                            'Symbol'=>_M('Symbol', $module),
                                            'ZapfDingbats'=>_M('ZapfDingbats', $module)));

            $studentsInformationFont->addBoxStyle('width', '20%');

            $styleStudentsInformationFont = new MSelection('styleStudentsInformationFont', $this->getFormValue('styleStudentsInformationFont', $data->styleStudentsInformationFont) ? $this->getFormValue('styleStudentsInformationFont', $data->styleStudentsInformationFont) : 'B', _M('Style', $module), 
                                            array('B'=>_M('bold', $module), 
                                                'I'=>_M('italic', $module),
                                                'U'=>_M('underline', $module)));

            $styleStudentsInformationFont->addBoxStyle('width', '20%');

            $heightStudentsInformation = new MTextField('heightStudentsInformation', $this->getFormValue('heightStudentsInformation', $data->heightStudentsInformation) ? $this->getFormValue('heightStudentsInformation', $data->heightStudentsInformation) : 70 , _M('Height of students information',$module), 15);
            $heightStudentsInformation->setJsHint(_M('Enter the height of inscriptionNumber',$module));
            $validators[] = new MIntegerValidator('heightStudentsInformation', '', 'required');
            $heightStudentsInformation->addBoxStyle('width', '20%');

            $XpositionStudentsInformation = new MTextField('XpositionStudentsInformation', $this->getFormValue('XpositionStudentsInformation', $data->XpositionStudentsInformation) ? $this->getFormValue('XpositionStudentsInformation', $data->XpositionStudentsInformation) : 10 , _M('X position',$module), 15);
            $XpositionStudentsInformation->setJsHint(_M('Enter the X position',$module));
            $validators[] = new MIntegerValidator('XpositionStudentsInformation', '', 'required');
            $XpositionStudentsInformation->addBoxStyle('width', '20%');

            $lengthStudentsInformation = new MTextField('lengthStudentsInformation', $this->getFormValue('lengthStudentsInformation', $data->lengthStudentsInformation) ? $this->getFormValue('lengthStudentsInformation', $data->lengthStudentsInformation) : 10 , _M('Length of students information',$module), 15);
            $lengthStudentsInformation->setJsHint(_M('Enter the length of inscriptionNumber',$module));
            $validators[] = new MIntegerValidator('lengthStudentsInformation', '', 'required');

            $spaceTitleStudentsInformation = new MTextField('spaceTitleStudentsInformation', $this->getFormValue('spaceTitleStudentsInformation', $data->spaceTitleStudentsInformation) ? $this->getFormValue('spaceTitleStudentsInformation', $data->spaceTitleStudentsInformation) : 5 , _M('Space between lines',$module), 15);
            $spaceTitleStudentsInformation->setJsHint(_M('Enter de value',$module));
            $validators[] = new MIntegerValidator('spaceTitleStudentsInformation', '', 'required');

            $hctStudentsInformationConfiguration = new MHContainer('hctStudentsInformationConfiguration', array($studentsInformationFont, $styleStudentsInformationFont, $heightStudentsInformation, $XpositionStudentsInformation, $lengthStudentsInformation, $spaceTitleStudentsInformation));
            $flds2[] = $hctStudentsInformationConfiguration;

            $bsg7            = new BaseGroup('bsg7', _M('Students informations', $module), $flds2, 'vertical');
            $bsg7->showLabel = true;
            $bsg7->width     = '100%';
            unset($flds2);
            $flds2[]        = new Separator('');


            //####################################
            //QUADRADO 1
            //####################################
            for($numExamUseAux = 1; $numExamUseAux <= GR_EXAMS_USE; $numExamUseAux++)
            {
                eval('$quad' . $numExamUseAux . 'ChoiceFont = new MSelection(\'quad' . $numExamUseAux . 'ChoiceFont\', $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceFont\', $data->quad' . $numExamUseAux . 'ChoiceFont) ? $this->getFormValue(\'quad'. $numExamUseAux .'ChoiceFont\', $data->quad' . $numExamUseAux . 'ChoiceFont) : GR_EXAM' . $numExamUseAux . '_CHOICE_FONT, _M(\'Font of choices\', $module), 
                                            array(\'Courier\'=>_M(\'Courier\', $module), 
                                            \'Arial\'=>_M(\'Arial\', $module),
                                            \'Times\'=>_M(\'Times\', $module),
                                            \'Symbol\'=>_M(\'Symbol\', $module),
                                            \'ZapfDingbats\'=>_M(\'ZapfDingbats\', $module)));');
                eval('$quad' . $numExamUseAux . 'ChoiceFont->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'ChoiceStyle = new MSelection(\'quad'. $numExamUseAux .'ChoiceStyle\', $this->getFormValue(\'quad'. $numExamUseAux .'ChoiceStyle\', $data->quad' . $numExamUseAux . 'ChoiceStyle) ? $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceStyle\', $data->quad' . $numExamUseAux . 'ChoiceStyle) : GR_EXAM' . $numExamUseAux . '_CHOICE_STYLE, _M(\'Style of choices\', $module), 
                                            array(\'B\'=>_M(\'bold\', $module), 
                                                \'I\'=>_M(\'italic\', $module),
                                                \'U\'=>_M(\'underline\', $module)));');
                eval('$quad' . $numExamUseAux . 'ChoiceStyle->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'ChoiceLength = new MTextField(\'quad' . $numExamUseAux . 'ChoiceLength\', $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceLength\', $data->quad' . $numExamUseAux . 'ChoiceLength) ? $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceLength\', $data->quad' . $numExamUseAux . 'ChoiceLength) : GR_EXAM' . $numExamUseAux . '_CHOICE_LENGTH , _M(\'Height choices\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'ChoiceLength->setJsHint(_M(\'Enter the height of choices\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'ChoiceLength\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'ChoiceLength->addBoxStyle(\'width\', \'20%\');');
    
    
                eval('$quad' . $numExamUseAux . 'TitleLine1Font = new MSelection(\'quad' . $numExamUseAux . 'TitleLine1Font\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Font\', $data->quad' . $numExamUseAux . 'TitleLine1Font) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Font\', $data->quad' . $numExamUseAux . 'TitleLine1Font) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE1_FONT, _M(\'Font of title line 1\', $module), 
                                                array(\'Courier\'=>_M(\'Courier\', $module), 
                                                \'Arial\'=>_M(\'Arial\', $module),
                                                \'Times\'=>_M(\'Times\', $module),
                                                \'Symbol\'=>_M(\'Symbol\', $module),
                                                \'ZapfDingbats\'=>_M(\'ZapfDingbats\', $module)));');
                eval('$quad' . $numExamUseAux . 'TitleLine1Font->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'TitleLine1Style = new MSelection(\'quad' . $numExamUseAux . 'TitleLine1Style\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Style\', $data->quad' . $numExamUseAux . 'TitleLine1Style) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Style\', $data->quad' . $numExamUseAux . 'TitleLine1Style) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE1_STYLE, _M(\'Style of title line 1\', $module), 
                                                array(\'B\'=>_M(\'bold\', $module), 
                                                    \'I\'=>_M(\'italic\', $module),
                                                    \'U\'=>_M(\'underline\', $module)));');
                eval('$quad' . $numExamUseAux . 'TitleLine1Style->addBoxStyle(\'width\', \'20%\');');
    
                eval('$quad' . $numExamUseAux . 'TitleLine1Length = new MTextField(\'quad' . $numExamUseAux . 'TitleLine1Length\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Length\', $data->quad' . $numExamUseAux . 'TitleLine1Length) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Length\', $data->quad' . $numExamUseAux . 'TitleLine1Length) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE1_LENGTH , _M(\'Length of title in line 1\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'TitleLine1Length->setJsHint(_M(\'Enter title line 1 length\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'TitleLine1Length\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'TitleLine1Length->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'TitleLine1Description = new MTextField(\'quad' . $numExamUseAux . 'TitleLine1Description\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Description\', $data->quad' . $numExamUseAux . 'TitleLine1Description) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Description\', $data->quad' . $numExamUseAux . 'TitleLine1Description) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE1_DESCRIPTION, _M(\'Title line 1 description\',$module), 50);');
                eval('$quad' . $numExamUseAux . 'TitleLine1Description->setJsHint(_M(\'Enter the title line 1 description\',$module));');
                eval('$quad' . $numExamUseAux . 'TitleLine1Description->addBoxStyle(\'width\', \'20%\');');


                eval('$quad' . $numExamUseAux . 'TitleLine2Font = new MSelection(\'quad' . $numExamUseAux . 'TitleLine2Font\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Font\', $data->quad' . $numExamUseAux . 'TitleLine2Font) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Font\', $data->quad' . $numExamUseAux . 'TitleLine2Font) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE2_FONT, _M(\'Font title line 2\', $module), 
                                                array(\'Courier\'=>_M(\'Courier\', $module), 
                                                \'Arial\'=>_M(\'Arial\', $module),
                                                \'Times\'=>_M(\'Times\', $module),
                                                \'Symbol\'=>_M(\'Symbol\', $module),
                                                \'ZapfDingbats\'=>_M(\'ZapfDingbats\', $module)));');
                eval('$quad' . $numExamUseAux . 'TitleLine2Font->addBoxStyle(\'width\', \'20%\');');
    
                eval('$quad' . $numExamUseAux . 'TitleLine2Style = new MSelection(\'quad' . $numExamUseAux . 'TitleLine2Style\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Style\', $data->quad' . $numExamUseAux . 'TitleLine2Style) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Style\', $data->quad' . $numExamUseAux . 'TitleLine2Style) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE2_STYLE, _M(\'Style title line 2\', $module), 
                                                array(\'B\'=>_M(\'bold\', $module), 
                                                    \'I\'=>_M(\'italic\', $module),
                                                    \'U\'=>_M(\'underline\', $module)));');
                eval('$quad' . $numExamUseAux . 'TitleLine2Style->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'TitleLine2Length = new MTextField(\'quad' . $numExamUseAux . 'TitleLine2Length\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Length\', $data->quad' . $numExamUseAux . 'TitleLine2Length) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Length\', $data->quad' . $numExamUseAux . 'TitleLine2Length) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE2_LENGTH , _M(\'Length of title in line 2\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'TitleLine2Length->setJsHint(_M(\'Enter the of title in line 2\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'TitleLine2Length\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'TitleLine2Length->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'TitleLine2Description = new MTextField(\'quad' . $numExamUseAux . 'TitleLine2Description\', $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Description\', $data->quad' . $numExamUseAux . 'TitleLine2Description) ? $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Description\', $data->quad' . $numExamUseAux . 'TitleLine2Description) : GR_EXAM' . $numExamUseAux . '_TITLE_LINE2_DESCRIPTION, _M(\'Title line 2 description\',$module), 50);');
                eval('$quad' . $numExamUseAux . 'TitleLine2Description->setJsHint(_M(\'Enter the title line 2 description\',$module));');
                eval('$quad' . $numExamUseAux . 'TitleLine2Description->addBoxStyle(\'width\', \'20%\');');


                eval('$quad' . $numExamUseAux . 'number2Font = new MSelection(\'quad' . $numExamUseAux . 'number2Font\', $this->getFormValue(\'quad' . $numExamUseAux . 'number2Font\', $data->quad' . $numExamUseAux . 'number2Font) ? $this->getFormValue(\'quad' . $numExamUseAux . 'number2Font\', $data->quad' . $numExamUseAux . 'number2Font) : GR_EXAM' . $numExamUseAux . '_NUMBER_FONT, _M(\'Font of number\', $module), 
                                                array(\'Courier\'=>_M(\'Courier\', $module), 
                                                \'Arial\'=>_M(\'Arial\', $module),
                                                \'Times\'=>_M(\'Times\', $module),
                                                \'Symbol\'=>_M(\'Symbol\', $module),
                                                \'ZapfDingbats\'=>_M(\'ZapfDingbats\', $module)));');
                eval('$quad' . $numExamUseAux . 'number2Font->addBoxStyle(\'width\', \'20%\');');
    
                eval('$quad' . $numExamUseAux . 'number2Style = new MSelection(\'quad' . $numExamUseAux . 'number2Style\', $this->getFormValue(\'quad' . $numExamUseAux . 'number2Style\', $data->quad' . $numExamUseAux . 'number2Style) ? $this->getFormValue(\'quad' . $numExamUseAux . 'number2Style\', $data->quad' . $numExamUseAux . 'number2Style) : GR_EXAM' . $numExamUseAux . '_NUMBER_STYLE, _M(\'Style of numbers\', $module), 
                                                array(\'B\'=>_M(\'bold\', $module), 
                                                    \'I\'=>_M(\'italic\', $module),
                                                    \'U\'=>_M(\'underline\', $module)));');
                eval('$quad' . $numExamUseAux . 'number2Style->addBoxStyle(\'width\', \'20%\');');
    
    
                eval('$quad' . $numExamUseAux . 'number2Length = new MTextField(\'quad' . $numExamUseAux . 'number2Length\', $this->getFormValue(\'quad' . $numExamUseAux . 'number2Length\', $data->quad' . $numExamUseAux . 'number2Length) ? $this->getFormValue(\'quad' . $numExamUseAux . 'number2Length\', $data->quad' . $numExamUseAux . 'number2Length) : GR_EXAM' . $numExamUseAux . '_NUMBERS_LENGTH , _M(\'Length of numbers\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'number2Length->setJsHint(_M(\'Enter the length of numbers\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'number2Length\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'number2Length->addBoxStyle(\'width\', \'20%\');');


                eval('$quad' . $numExamUseAux . 'ChoicesUse = new MTextField(\'quad' . $numExamUseAux . 'ChoicesUse\', GR_EXAM' . $numExamUseAux . '_CHOICES_USE, _M(\'Choices use\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'ChoicesUse->setJsHint(_M(\'Enter the choice use\',$module));');
                eval('$validators[] = new MRequiredValidator(\'quad' . $numExamUseAux . 'ChoicesUse\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'ChoicesUse->addBoxStyle(\'width\', \'20%\');');


                eval('$quad' . $numExamUseAux . 'X = new MTextField(\'quad' . $numExamUseAux . 'X\', $this->getFormValue(\'quad' . $numExamUseAux . 'X\', $data->quad' . $numExamUseAux . 'X) ? $this->getFormValue(\'quad' . $numExamUseAux . 'X\', $data->quad' . $numExamUseAux . 'X) : GR_EXAM' . $numExamUseAux . '_POS_X , _M(\'Position quad 1 in X\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'X->setJsHint(_M(\'Enter the quad 1 position in X\',$module));');
                eval('$validators[] = new MRequiredValidator(\'quad' . $numExamUseAux . 'X\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'X->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'Y = new MTextField(\'quad' . $numExamUseAux . 'Y\', $this->getFormValue(\'quad' . $numExamUseAux . 'Y\', $data->quad' . $numExamUseAux . 'Y) ? $this->getFormValue(\'quad' . $numExamUseAux . 'Y\', $data->quad' . $numExamUseAux . 'Y) : GR_EXAM' . $numExamUseAux . '_POS_Y, _M(\'Position quad 1 in Y\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'Y->setJsHint(_M(\'Enter the quad 1 position in Y\',$module));');
                eval('$validators[] = new MRequiredValidator(\'quad' . $numExamUseAux . 'Y\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'Y->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'Widht = new MTextField(\'quad' . $numExamUseAux . 'Widht\', $this->getFormValue(\'quad' . $numExamUseAux . 'Widht\', $data->quad' . $numExamUseAux . 'Widht) ? $this->getFormValue(\'quad' . $numExamUseAux . 'Widht\', $data->quad' . $numExamUseAux . 'Widht) : GR_EXAM' . $numExamUseAux . '_WIDHT, _M(\'Widht quad 1\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'Widht->setJsHint(_M(\'Enter the quad 1 widht\',$module));');
                eval('$validators[] = new MRequiredValidator(\'quad' . $numExamUseAux . 'Widht\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'Widht->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'Heigth = new MTextField(\'quad' . $numExamUseAux . 'Heigth\', $this->getFormValue(\'quad' . $numExamUseAux . 'Heigth\', $data->quad' . $numExamUseAux . 'Heigth) ? $this->getFormValue(\'quad' . $numExamUseAux . 'Heigth\', $data->quad' . $numExamUseAux . 'Heigth) : GR_EXAM' . $numExamUseAux . '_HEIGTH_1, _M(\'Heigth quad 1\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'Heigth->setJsHint(_M(\'Enter the quad 1 heigth\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'Heigth\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'Heigth->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'Rad = new MTextField(\'quad' . $numExamUseAux . 'Rad\', $this->getFormValue(\'quad' . $numExamUseAux . 'Rad\', $data->quad' . $numExamUseAux . 'Rad) ? $this->getFormValue(\'quad' . $numExamUseAux . 'Rad\', $data->quad' . $numExamUseAux . 'Rad) : GR_EXAM' . $numExamUseAux . '_RAD, _M(\'Rad quad 1\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'Rad->setJsHint(_M(\'Enter the quad 1 rad\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'Rad\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'Rad->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . '_2Height = new MTextField(\'quad' . $numExamUseAux . '_2Height\', $this->getFormValue(\'quad' . $numExamUseAux . '_2Height\', $data->quad' . $numExamUseAux . '_2Height) ? $this->getFormValue(\'quad' . $numExamUseAux . '_2Height\', $data->quad' . $numExamUseAux . '_2Height) : GR_EXAM' . $numExamUseAux . '_HEIGTH_2, _M(\'Quad 2 of quad ' . $numExamUseAux . ' height\',$module), 15);');
                eval('$quad' . $numExamUseAux . '_2Height->setJsHint(_M(\'Enter the quad 2 of quad ' . $numExamUseAux . ' height\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . '_2Height\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . '_2Height->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'NumberQuestions = new MTextField(\'quad' . $numExamUseAux . 'NumberQuestions\', $this->getFormValue(\'quad' . $numExamUseAux . 'NumberQuestions\', $data->quad' . $numExamUseAux . 'NumberQuestions) ? $this->getFormValue(\'quad' . $numExamUseAux . 'NumberQuestions\', $data->quad' . $numExamUseAux . 'NumberQuestions) : GR_EXAM' . $numExamUseAux . '_NUMBER_QUESTIONS, _M(\'Numbers of questions\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'NumberQuestions->setJsHint(_M(\'Enter the numbers of questions\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'NumberQuestions\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'NumberQuestions->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsX = new MTextField(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsX\', $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsX\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuestionsX) ? $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsX\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuestionsX) : GR_EXAM' . $numExamUseAux . '_SPACE_BETWEEN_QUESTIONS_X, _M(\'Space between questions in X\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsX->setJsHint(_M(\'Enter space between questions in X\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsX\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsX->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsY = new MTextField(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsY\', $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsY\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuestionsY) ? $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsY\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuestionsY) : GR_EXAM' . $numExamUseAux . '_SPACE_BETWEEN_QUESTIONS_Y, _M(\'Space between questions in Y\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsY->setJsHint(_M(\'Enter the space between questions in Y\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsY\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuestionsY->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY = new MTextField(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY\', $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY) ? $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY) : GR_EXAM' . $numExamUseAux . '_SPACE_BETWEEN_FIRST_QUESTIONS_Y, _M(\'Space to first question in Y\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY->setJsHint(_M(\'Enter the space to first question in Y\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX = new MTextField(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX\', $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX) ? $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX\', $data->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX) : GR_EXAM' . $numExamUseAux . '_SPACE_BETWEEN_FIRST_QUESTIONS_X, _M(\'Space to first question in X\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX->setJsHint(_M(\'Enter the space to first question in X\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX->addBoxStyle(\'width\', \'20%\');');


                eval('$quad' . $numExamUseAux . 'NumberChoices = new MTextField(\'quad' . $numExamUseAux . 'NumberChoices\', $this->getFormValue(\'quad' . $numExamUseAux . 'NumberChoices\', $data->quad' . $numExamUseAux . 'NumberChoices) ? $this->getFormValue(\'quad' . $numExamUseAux . 'NumberChoices\', $data->quad' . $numExamUseAux . 'NumberChoices) : GR_EXAM' . $numExamUseAux . '_NUMBER_CHOICES, _M(\'Number of choices\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'NumberChoices->setJsHint(_M(\'Enter the number of choices\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'NumberChoices\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'NumberChoices->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'SpaceNumberCircle = new MTextField(\'quad' . $numExamUseAux . 'SpaceNumberCircle\', $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceNumberCircle\', $data->quad' . $numExamUseAux . 'SpaceNumberCircle) ? $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceNumberCircle\', $data->quad' . $numExamUseAux . 'SpaceNumberCircle) : GR_EXAM' . $numExamUseAux . '_SPACE_BETWEEN_NUMBER_CIRCLE, _M(\'Space number to circle\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'SpaceNumberCircle->setJsHint(_M(\'Enter the space number to circle\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'SpaceNumberCircle\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'SpaceNumberCircle->addBoxStyle(\'width\', \'20%\');');

                eval('$quad' . $numExamUseAux . 'NumberBeginToWriter = new MTextField(\'quad' . $numExamUseAux . 'NumberBeginToWriter\', $this->getFormValue(\'quad' . $numExamUseAux . 'NumberBeginToWriter\', $data->quad' . $numExamUseAux . 'NumberBeginToWriter) ? $this->getFormValue(\'quad' . $numExamUseAux . 'NumberBeginToWriter\', $data->quad' . $numExamUseAux . 'NumberBeginToWriter) : GR_EXAM' . $numExamUseAux . '_NUMBER_BEGIN_WRITER, _M(\'Number to begin\',$module), 15);');
                eval('$quad' . $numExamUseAux . 'NumberBeginToWriter->setJsHint(_M(\'Enter the number to begin questions\',$module));');
                eval('$validators[] = new MIntegerValidator(\'quad' . $numExamUseAux . 'NumberBeginToWriter\', \'\', \'required\');');
                eval('$quad' . $numExamUseAux . 'NumberBeginToWriter->addBoxStyle(\'width\', \'20%\');');

                eval('$hctQuad' . $numExamUseAux . 'Configuration = new MHContainer(\'hctQuad' . $numExamUseAux . 'Configuration\', array($quad' . $numExamUseAux . 'ChoiceFont, $quad' . $numExamUseAux . 'ChoiceStyle, $quad' . $numExamUseAux . 'ChoiceLength, $quad' . $numExamUseAux . 'TitleLine1Font, $quad' . $numExamUseAux . 'TitleLine1Style, $quad' . $numExamUseAux . 'TitleLine1Length, $quad' . $numExamUseAux . 'TitleLine2Font, $quad' . $numExamUseAux . 'TitleLine2Style, $quad' . $numExamUseAux . 'TitleLine2Length,  $quad' . $numExamUseAux . 'number2Font, $quad' . $numExamUseAux . 'number2Style, $quad' . $numExamUseAux . 'number2Length, $quad' . $numExamUseAux . 'ChoicesUse, $quad' . $numExamUseAux . 'X, $quad' . $numExamUseAux . 'Y, $quad' . $numExamUseAux . 'Widht, $quad' . $numExamUseAux . 'Heigth, $quad' . $numExamUseAux . 'Rad, $quad' . $numExamUseAux . '_2Height, $quad' . $numExamUseAux . 'NumberQuestions, $quad' . $numExamUseAux . 'SpaceBetweenQuestionsX, $quad' . $numExamUseAux . 'SpaceBetweenQuestionsY, $quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY, $quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX, $quad' . $numExamUseAux . 'NumberChoices, $quad' . $numExamUseAux . 'SpaceNumberCircle, $quad' . $numExamUseAux . 'NumberBeginToWriter, $quad' . $numExamUseAux . 'TitleLine1Description, $quad' . $numExamUseAux . 'TitleLine2Description));');
                eval('$flds2[] = $hctQuad' . $numExamUseAux . 'Configuration;');

                eval('$bsg1' . $numExamUseAux . ' = new BaseGroup(\'bsg1' . $numExamUseAux . '\', _M(\'Exam ' . $numExamUseAux . '\', $module), $flds2, \'vertical\');');
                eval('$bsg1' . $numExamUseAux . '->showLabel = true;');
                eval('$bsg1' . $numExamUseAux . '->width     = \'100%\';');

                eval('$quantBsg[] = $bsg1' . $numExamUseAux . ';');
                unset($flds2);
                $flds2[]        = new Separator('');
            }


            $vct1            = new MVContainer('vct1',array($bsg2, $bsg3, $bsg4, $bsg5, $bsg6, $bsg7, $bsg11, $bsg12, $bsg13, $bsg14, $bsg15, $bsg16, $bsg17, $bsg18, $bsg19 /*sizeOf($quantBsg)>0 ? $quantBsg : ''*/));
            $hct1            = new MHContainer('hct1',array($bsg1,$vct1));


            if($isConfigureObjectiveExam->value == 'f')
            {
            $vct1->addBoxStyle('display', 'none');
            }
            $fields[] = $hct1;
        }

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    public function btnGenerateClick($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data->selectiveProcessId                         = $this->getFormValue('selectiveProcessId');
        $data->numberSheet                                = $this->getFormValue('numberSheet');
        $data->inscriptionId                              = $this->getFormValue('inscriptionIdS');

        //Page
        $data->PageInformations->rightMarginOfPage        = $this->getFormValue('rightMarginOfPage');
        $data->PageInformations->upperLeftMarcPositionX   = $this->getFormValue('upperLeftMarcPositionX');
        $data->PageInformations->upperLeftMarcPositionY   = $this->getFormValue('upperLeftMarcPositionY');
        $data->PageInformations->upperLeftMarcHeigth      = $this->getFormValue('upperLeftMarcHeigth');
        $data->PageInformations->upperLeftMarcThickness   = $this->getFormValue('upperLeftMarcThickness');
        $data->PageInformations->upperRightMarcPositionX  = $this->getFormValue('upperrightMarcPositionX');
        $data->PageInformations->upperRightMarcPositionY  = $this->getFormValue('upperrightMarcPositionY');
        $data->PageInformations->upperRightMarcHeigth     = $this->getFormValue('upperrightMarcHeigth');
        $data->PageInformations->upperRightMarcThickness  = $this->getFormValue('upperrightMarcThickness');
        $data->PageInformations->bottomLeftMarcPositionX  = $this->getFormValue('bottomLeftMarcPositionX');
        $data->PageInformations->bottomLeftMarcPositionY  = $this->getFormValue('bottomLeftMarcPositionY');
        $data->PageInformations->bottomLeftMarcHeigth     = $this->getFormValue('bottomLeftMarcHeigth');
        $data->PageInformations->bottomLeftMarcThickness  = $this->getFormValue('bottomLeftMarcThickness');
        $data->PageInformations->bottomRightMarcPositionX = $this->getFormValue('bottomrightMarcPositionX');
        $data->PageInformations->bottomRightMarcPositionY = $this->getFormValue('bottomrightMarcPositionY');
        $data->PageInformations->bottomRightMarcHeigth    = $this->getFormValue('bottomrightMarcHeigth');
        $data->PageInformations->bottomRightMarcThickness = $this->getFormValue('bottomrightMarcThickness');

        $data->PageInformations->sheetCodeFont            = $this->getFormValue('sheetCodeFont');
        $data->PageInformations->stylesheetCodeFont       = $this->getFormValue('stylesheetCodeFont');
        $data->PageInformations->heightsheetCode          = $this->getFormValue('heightsheetCode');
        $data->PageInformations->xPositionsheetCode       = $this->getFormValue('xPositionsheetCode');
        $data->PageInformations->lengthsheetCode          = $this->getFormValue('lengthsheetCode');



        //Título
        $data->PageInformations->titleFont           = $this->getFormValue('titleFont');
        $data->PageInformations->styleTitleFont      = $this->getFormValue('styleTitleFont');
        $data->PageInformations->alignTitleFont      = $this->getFormValue('alignTitleFont');
        $data->PageInformations->heightTitle         = $this->getFormValue('heightTitle');
        $data->PageInformations->lengthTitle         = $this->getFormValue('lengthTitle');
        $data->PageInformations->titleDescription    = $this->getFormValue('titleDescription');

        //Sub-Título
        $data->PageInformations->subtitleFont           = $this->getFormValue('subtitleFont');
        $data->PageInformations->stylesubtitleFont      = $this->getFormValue('stylesubtitleFont');
        $data->PageInformations->alignsubtitleFont      = $this->getFormValue('alignsubtitleFont');
        $data->PageInformations->heightsubtitle         = $this->getFormValue('heightsubtitle');
        $data->PageInformations->lengthsubtitle         = $this->getFormValue('lengthsubtitle');
        $data->PageInformations->subtitleDescription    = $this->getFormValue('subtitleDescription');

        //Information
        $data->PageInformations->informationFont           = $this->getFormValue('informationFont');
        $data->PageInformations->styleinformationFont      = $this->getFormValue('styleinformationFont');
        $data->PageInformations->aligninformationFont      = $this->getFormValue('aligninformationFont');
        $data->PageInformations->heightinformation         = $this->getFormValue('heightinformation');
        $data->PageInformations->lengthinformation         = $this->getFormValue('lengthinformation');
        $data->PageInformations->informationDescription    = $this->getFormValue('informationDescription');

        //Inscription number
        $data->PageInformations->inscriptionNumberFont           = $this->getFormValue('inscriptionNumberFont');
        $data->PageInformations->styleinscriptionNumberFont      = $this->getFormValue('styleinscriptionNumberFont');
        $data->PageInformations->aligninscriptionNumberFont      = $this->getFormValue('aligninscriptionNumberFont');
        $data->PageInformations->heightinscriptionNumber         = $this->getFormValue('heightinscriptionNumber');
        $data->PageInformations->lengthinscriptionNumber         = $this->getFormValue('lengthinscriptionNumber');
        $data->PageInformations->spaceTitleNumberInscription     = $this->getFormValue('spaceTitleNumberInscription');

        //Students informations
        $data->PageInformations->studentsInformationFont         = $this->getFormValue('studentsInformationFont');
        $data->PageInformations->styleStudentsInformationFont    = $this->getFormValue('styleStudentsInformationFont');
        $data->PageInformations->heightStudentsInformation       = $this->getFormValue('heightStudentsInformation');
        $data->PageInformations->XpositionStudentsInformation    = $this->getFormValue('XpositionStudentsInformation');
        $data->PageInformations->lengthStudentsInformation       = $this->getFormValue('lengthStudentsInformation');
        $data->PageInformations->spaceTitleStudentsInformation   = $this->getFormValue('spaceTitleStudentsInformation');

        //Quad1 informations
        for($numExamUseAux = 1; $numExamUseAux <= GR_EXAMS_USE; $numExamUseAux++)
        {
            eval('$data->PageInformations->quad' . $numExamUseAux . 'ChoiceFont                     = $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceFont\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'ChoiceStyle                    = $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceStyle\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'ChoiceLength                   = $this->getFormValue(\'quad' . $numExamUseAux . 'ChoiceLength\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine1Font                 = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Font\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine1Style                = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Style\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine1Length               = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Length\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine1Description          = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine1Description\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine2Font                 = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Font\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine2Style                = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Style\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine2Length               = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Length\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'TitleLine2Description          = $this->getFormValue(\'quad' . $numExamUseAux . 'TitleLine2Description\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'number2Font                    = $this->getFormValue(\'quad' . $numExamUseAux . 'number2Font\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'number2Style                   = $this->getFormValue(\'quad' . $numExamUseAux . 'number2Style\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'number2Length                  = $this->getFormValue(\'quad' . $numExamUseAux . 'number2Length\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'ChoicesUse                     = $this->getFormValue(\'quad' . $numExamUseAux . 'ChoicesUse\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'X                              = $this->getFormValue(\'quad' . $numExamUseAux . 'X\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'Y                              = $this->getFormValue(\'quad' . $numExamUseAux . 'Y\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'Widht                          = $this->getFormValue(\'quad' . $numExamUseAux . 'Widht\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'Heigth                         = $this->getFormValue(\'quad' . $numExamUseAux . 'Heigth\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'Rad                            = $this->getFormValue(\'quad' . $numExamUseAux . 'Rad\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . '_2Height                       = $this->getFormValue(\'quad' . $numExamUseAux . '_2Height\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'NumberQuestions                = $this->getFormValue(\'quad' . $numExamUseAux . 'NumberQuestions\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'SpaceBetweenQuestionsX         = $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsX\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'SpaceBetweenQuestionsY         = $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuestionsY\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY = $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionY\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX = $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceBetweenQuadFirstQuestionX\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'NumberChoices                  = $this->getFormValue(\'quad' . $numExamUseAux . 'NumberChoices\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'SpaceNumberCircle              = $this->getFormValue(\'quad' . $numExamUseAux . 'SpaceNumberCircle\');');
            eval('$data->PageInformations->quad' . $numExamUseAux . 'NumberBeginToWriter            = $this->getFormValue(\'quad' . $numExamUseAux . 'NumberBeginToWriter\');');
        }

        $MIOLO->getClass($module, 'RptObjectiveExam');
        $report = new RptObjectiveExam($data);
    }
}

?>
