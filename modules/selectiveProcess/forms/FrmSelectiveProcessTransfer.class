<?php

/**
 *
 * This file handles the connection and actions for sprPupilsAndSchoolsPerformanceBulletinPupilsData table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

class FrmSelectiveProcessTransfer extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = MIOLO::getCurrentModule();
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Selective process transfer',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $function   = MIOLO::_request('function');
        $event      = MIOLO::_request('event');

        $selectiveProcessFromIdText = new MText('fromSelectiveProcessId',_M('Old selective process', $module));
        $selectiveProcessFromIdText->setClass('m-caption m-caption-required');
        $selectiveProcessFromIdText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $selectiveProcessFromIdText;
        $business       =   $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $processList    =   $business->listSelectiveProcess(null);
        $flds[] = new Selection('selectiveProcessFromId',($this->getFormValue('selectiveProcessFromId',$data->selectiveProcessFromId) ? $this->getFormValue('selectiveProcessFromId',$data->selectiveProcessFromId) : ''),null ,$processList);
        $fields[] = new MHContainer('hctSelectiveProces',$flds);
        unset($flds);
        
        
        $selectiveProcessToIdText = new MText('fromSelectiveProcessId',_M('New selective process', $module));
        $selectiveProcessToIdText->setClass('m-caption m-caption-required');
        $selectiveProcessToIdText->setWidth(FIELD_CONTAINER_SIZE);
        $flds[] = $selectiveProcessToIdText;
        //$business       =   $MIOLO->getBusiness($module,'BusSelectiveProcess');
        //$processList    =   $business->listSelectiveProcess(null);
        $flds[] = new Selection('selectiveProcessToId',($this->getFormValue('selectiveProcessToId',$data->selectiveProcessToId) ? $this->getFormValue('selectiveProcessToId',$data->selectiveProcessToId) : ''),null ,$processList);
        $fields[] = new MHContainer('hctSelectiveProces',$flds);
        unset($flds);

        /*Add from Marcos Serra*/
        
        $fields[] = new Separator('');
        
        $data   = $this->getFormValue('selectiveProcessFromId');
                
        //Buttons
        $btn1[]     = new MButton('btnList', _M('Search', $module));
        $div1       = new MDiv('div1', $btn1);

        $fields[] = $div1;
        $fields[] = new Separator('');        
        
        if ( (strlen((string)$this->getFormValue('selectiveProcessFromId')) > 0) && 
             (strlen((string)$this->getFormValue('selectiveProcessToId')) > 0) )
        {
        	$business2        = $MIOLO->getBusiness($module, 'BusSelectiveProcessCopy');
	        $group2 = $business2->getInscriptionsGrid($data);
	      
	        $grid2 = $MIOLO->getUI()->getGrid($module,'GrdSelectiveProcessTransfer', null);
	        $grid2->setData($group2);
	        unset($grid2->actions);
		        
	        $fields[] = $grid2;
	        $fields[] = new Separator(''); 
        	$fields[] = new MButton('btnGenerate',_M('Generate',$module));

        }       
        
        /**/

        $this->setFields($fields);

        $validators[] = new MRequiredValidator('selectiveProcessFromId',  _M('Old selective process', $module));
        $validators[] = new MRequiredValidator('selectiveProcessToId',    _M('New selective process', $module));

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
    } 

    public function btnGenerate_confirm()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = $this->getTypesData();
        $opts = array(  'selectiveProcessFromId'    => $data->selectiveProcessFromId,
                        'selectiveProcessToId'      => $data->selectiveProcessToId 
                      );
        $business = $MIOLO->getBusiness($module, 'BusSelectiveProcessCopy');
        
        $data->inscriptionsId = MIOLO::_request('inscriptionsId');
        
        $ok  = $business->executeSelectiveProcessTransfer($data);
        if ( $ok )
        {
            unset($opts);
            $msg = _M('Selective process tranfer has been implemented successfully', $module);
            $caption = _M('Information', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }


    }
    
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();        
        $selects = MIOLO::_request('selectGrdSelectiveProcessTransfer');
        $inscriptionsId = implode(',',$selects);
        
        if(strlen((string)$inscriptionsId) > 0)
        {       	
        
	        $opts   = array('event'                  => 'btnGenerate_confirm',
	                        'function'               => 'transfer',
	                        'selectiveProcessFromId' => MIOLO::_request('selectiveProcessFromId'),
	                        'selectiveProcessToId'   => MIOLO::_request('selectiveProcessToId'),
	        				'inscriptionsId'         => $inscriptionsId 
	                       );		
	        
	        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
	
	        // This return the primary key to the search form so that user
	        // can see the record he would delete
	        $opts    = array('selectiveProcessFromId' => MIOLO::_request('selectiveProcessFromId'),
	                         'selectiveProcessToId'   => MIOLO::_request('selectiveProcessToId')
	                        );
	        $goto    = SAGU::getStackBackUrl();
	        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
	
	        $caption = _M('Question',$module);
	        $MIOLO->question('Você tem certeza que quer EXECUTAR?', $gotoYes, $gotoNo);
        }
        else
        {
        	$opts   = array('selectiveProcessFromId' => MIOLO::_request('selectiveProcessFromId'),
	                        'selectiveProcessToId'   => MIOLO::_request('selectiveProcessToId')	        				 
	                       );
        	$msg = _M('Please, select at least one inscription', $module);
            $caption = _M('Error', $module);
            $MIOLO->error($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
    }
    
    public function getTypesData()
    {
        $data->selectiveProcessFromId   = $this->selectiveProcessFromId->value;
        $data->selectiveProcessToId     = $this->selectiveProcessToId->value;
        return $data;
    }
}

?>
