<?php

/**
 *
 * This file handles the connection and actions for sprCourseOccurrence table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCourseOccurrence table
 */
class FrmCourseOccurrenceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Vacancy occurrence', $this->home, 'courseOccurrence-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('courseOccurrenceIdS', $this->getFormValue('courseOccurrenceIdS', $courseOccurrenceIdS));


        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $selectiveProcessIdS->addAttribute('onChange','document.' . $this->getName() . '.submit()' );
        $fields[]           = $selectiveProcessIdS;

        $courseVacantLabel = new MText('courseVacantLabel', _M('Vacancy',$module) . ':');
        $courseVacantLabel->setWidth(FIELD_LABEL_SIZE);

        $courseVacantIdS  = new MLookupTextField('courseVacantIdS', $this->courseVacantIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
//                    null , $module, 'CourseVacant', null, null, true);
                'limbo,limbo,vacant,CourseVacantDescription' , $module,'CourseVacant', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $courseVacantIdS->setJsHint(_M('Enter the vacancy code',$module));
        $validators[] = new MIntegerValidator('courseVacantIdS', '', 'optional');

        $CourseVacantDescription  = new MTextField('CourseVacantDescription', $this->getFormValue('CourseVacantDescription', $data->CourseVacantDescription), '', FIELD_DESCRIPTION_SIZE);
        $CourseVacantDescription->setReadOnly(true);
        $CourseVacantDescription->setJsHint(_M('Vacancy description',$module));

        $vacant  = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), '', 10);
        $vacant->setReadOnly(true);
        $vacant->setJsHint(_M('Vacancy number',$module));
        $validators[] = new MIntegerValidator('vacant', 'Vagas do curso', 'optional');

        $hctVacant = new MHContainer('hctVacant', array( $courseVacantLabel, $courseVacantIdS, $CourseVacantDescription, $vacant) );
        $hctVacant->setShowLabel(true);
        $fields[]  = $hctVacant;

        $courseLabel = new MText('courseLabel', _M('Course',$module) . ':');
        $courseLabel->setWidth(FIELD_LABEL_SIZE);

        $courseIdS  = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', FIELD_ID_SIZE, null, null,
//                ('courseVersionS, limbo, unitIdS, limbo, turnIdS'),
                    ('courseVersionS, courseName, unitIdS, unitDescriptionS, turnIdS, turnDescriptionS'),
                'academic', 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Enter the course code',$module));

        $courseName  = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersionS  = new MTextField('courseVersionS', $this->courseVersionS->value, '', 10);
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Course version',$module));
        $validators[] = new MIntegerValidator('courseVersionS', '', 'optional');

        $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseIdS, $courseVersionS, $courseName) );
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $turnLabelS = new MText('turnLabelS', _M('Turn',$module) . ':');
        $turnLabelS->setWidth(FIELD_LABEL_SIZE);

        $turnIdS  = new MTextField('turnIdS', $this->getFormValue('turnIdS', $data->turnIdS), '', FIELD_ID_SIZE);
        $turnIdS->setReadOnly(true);
        $turnIdS->setJsHint(_M('Turn id',$module));
        $validators[] = new MIntegerValidator('turnIdS', '', 'optional');

        
        $turnDescriptionS  = new MTextField('turnDescriptionS', $this->getFormValue('turnDescriptionS', $data->turnDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $turnDescriptionS->setReadOnly(true);
        $turnDescriptionS->setJsHint(_M('Turn description',$module));

        $hctTurn = new MHContainer('hctTurn', array( $turnLabelS, $turnIdS, $turnDescriptionS) );
        $hctTurn->setShowLabel(true);
        $fields[]  = $hctTurn;

        $unitLabelS = new MText('unitLabelS', _M('Unit',$module) . ':');
        $unitLabelS->setWidth(FIELD_LABEL_SIZE);
        
        $unitIdS  = new MTextField('unitIdS', $this->getFormValue('unitIdS', $data->unitIdS), '', FIELD_ID_SIZE);
        $unitIdS->setReadOnly(true);
        $unitIdS->setJsHint(_M('Unit id',$module));
        $validators[] = new MIntegerValidator('unitIdS', '', 'optional');
        
        $unitDescriptionS  = new MTextField('unitDescriptionS', $this->getFormValue('unitDescriptionS', $data->unitDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $unitDescriptionS->setReadOnly(true);
        $unitDescriptionS->setJsHint(_M('Unit description',$module));
        
        $hctUnit = new MHContainer('hctUnit', array( $unitLabelS, $unitIdS, $unitDescriptionS) );
        $hctUnit->setShowLabel(true);
        $fields[]  = $hctUnit;
        

        $isAvailableLabel = new MText('isAvailableLabel', _M('Is available',$module).':');
        $isAvailableLabel->setWidth('134');

        $isAvailableS = new MRadioButtonGroup('isAvailableS', '', SAGU::listYesNo(1), $this->isAvailableS->value, null, 'horizontal');
        $isAvailableS->SetShowLabel(false);

        $hctIsAvailable = new MHContainer('hctIsAvailable', array($isAvailableLabel, $isAvailableS));
        $fields[]  = $hctIsAvailable;


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        //$filters->courseOccurrenceId     = $this->courseOccurrenceIdS->value;
        $filters->courseOccurrenceId     = $this->courseOccurrenceIdS->value;
        $filters->courseVacantId         = $this->courseVacantIdS->value;
        $filters->courseId               = $this->courseIdS->value;
        $filters->courseVersion          = $this->courseVersionS->value;
        $filters->turnId                 = $this->turnIdS->value;
        $filters->unitId                 = $this->unitIdS->value;
        $filters->isAvailable            = $this->isAvailableS->value;
        $filters->selectiveProcessId     = $this->selectiveProcessIdS->value;

        unset($this->courseOccurrenceIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdCourseOccurrenceSearch', $filters);
        $business   = $this->manager->getBusiness($module,'BusCourseOccurrence');
        $data       = $business->searchCourseOccurrence($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);


//        $this->page->onLoad('document.' . $this->name . '.courseVacantIdS.focus();');

    }

}

?>
