<?php

/**
 * Inscription form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmOtherSelectiveProcessInscription extends MForm
{
    private $othersSelectiveProcessNumbers;
    private $inscriptionData;
    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->inscriptionData = unserialize(urldecode(stripslashes($MIOLO->session->getValue('inscriptionData'))));

        parent::__construct(_M('Step', $module) . ' 5 ' . _M('of', $module) .  ' '.$this->inscriptionData->stepTotal.' -> ' . _M('Informations', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fontText = new MText('fontText', "<font color=" . INSCRIPTION_TEXT_COLOR . ">");
        $fields[] = $fontText;

        $separator = new Separator('');

        //OTHERS SELECTIVE PROCESS
        $businessSelectiveProcessOccurrence = $MIOLO->getBusiness('selectiveProcess', 'BusSelectiveProcessOccurrence');
        $filters2->selectiveProcessId = $this->inscriptionData->inscription->selectiveProcessId;
        $othersSelectiveProcess = $businessSelectiveProcessOccurrence->searchSelectiveProcessOccurrence($filters2);

        $businessExamOccurrence = $MIOLO->getBusiness('selectiveProcess', 'BusExamOccurrence');

        foreach($othersSelectiveProcess as $selectiveProcess)
        {
            if($selectiveProcess[2] != DEFAULT_SELECTIVE_PROCESS_TYPE)
            {
                $flds3[] = $separator;

                $numberInscriptionLabel = new MText('numberInscriptionLabel', _M('Number inscription',$module).':');
                $numberInscriptionLabel->setWidth(FIELD_CONTAINER_SIZE+20);

                eval('$numberInscription'.$selectiveProcess[2].' = new MTextField(\'numberInscription' . $selectiveProcess[2].'\',    $this->GetFormValue(\'numberInscription' . $selectiveProcess[2].'\', $this->inscriptionData->selectiveProcessTypeData->o'.$selectiveProcess[2].'->numberInscription), \'\');');

                eval('$this->inscriptionData->selectiveProcessTypeData->o'.$selectiveProcess[2].'->numberInscription = $numberInscription'.$selectiveProcess[2].'->value;');

                eval('$hctInscription'.$selectiveProcess[2].' = new MHContainer(\'hctInscription'.$selectiveProcess[2].'\', array($numberInscriptionLabel, $numberInscription'.$selectiveProcess[2].'));');
                eval('$hctInscription'.$selectiveProcess[2].'->setShowLabel(true);');
                eval('$flds3[]  = $hctInscription'.$selectiveProcess[2].';');

                $filters3->selectiveProcessId     = $this->inscriptionData->inscription->selectiveProcessId;
                $filters3->selectiveProcessTypeId = $selectiveProcess[2];
                $examsOccurrences = $businessExamOccurrence->searchExamOccurrence($filters3);

                foreach($examsOccurrences as $examOccurrence)
                {
                    $flds3[] = $separator;

                    eval('$flds3[] = new MHiddenField(\'examOccurrenceId'.$examOccurrence[0].'\', $examOccurrence[0]);');

                    $examOccurrenceLabel = new MText('examOccurrenceLabel', $examOccurrence[6] . ': ');
                    $examOccurrenceLabel->setWidth(FIELD_CONTAINER_SIZE+20);

                    eval('$note'.$examOccurrence[0].' = new MTextField(\'note'.$examOccurrence[0].'\', $this->getFormValue(\'note'.$examOccurrence[0].'\', $this->inscriptionData->selectiveProcessTypeData->o'.$selectiveProcess[2].'->o'.$examOccurrence[0].'->note), \'\', 10 );');

                    eval('$this->inscriptionData->selectiveProcessTypeData->o'.$selectiveProcess[2].'->o'.$examOccurrence[0].'->note = $note'.$examOccurrence[0].'->value;');

                    eval('$hctExamOccurrence'.$examOccurrence[0].' = new MHContainer(\'hctExamOccurrence'.$examOccurrence[0].'\', array($examOccurrenceLabel, $note'.$examOccurrence[0].'));');
                    eval('$hctExamOccurrence'.$examOccurrence[0].'->setShowLabel(true);');
                    eval('$flds3[]  = $hctExamOccurrence'.$examOccurrence[0].';');
                }

                $bsg3            = new BaseGroup('bsg3', $selectiveProcess[3], $flds3, 'vertical');
                $bsg3->showLabel = true;
                $bsg3->width     = '100%';
            }
        }

        if ( $this->inscriptionData->inscription->isSocialEconomic == DB_TRUE )
        {
            //Have Social Economic
            $msgStep = _M('Step',$module).' 6 >>';
        }
        else
        {
            //Dont Have Social Economiv
            $msgStep = _M('Save inscription', $module);
        }

        $btnNext = new MButton('btnNext',$msgStep);
        $btnNext->attachEventHandler('click', 'tbBtnNext_click', true);

        $btnBack = new MButton('btnBack', '<< ' . _M('Step',$module) . ' 4');
        $btnBack->attachEventHandler('click', 'tbBtnBack_click', true);

        $div1     = new MDiv('div1', array($btnBack, $btnNext), null, 'align=center');

        $separator = new Separator('');

        $cntInscription     = new MHContainer('cntInscription', array($bsg3, $separator, $div1, $separator, $separator));

        $cntInscription->addBoxStyle('background', 'white');
        $cntInscription->setDisposition('center');

        $fields[] = $cntInscription;

        $fontText1 = new MHiddenField('fontText1', "<\font>");
        $fields[] = $fontText1;

        $fields[] = new Separator('');

        $this->setFields($fields);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnNext_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $businessSelectiveProcessOccurrence = $MIOLO->getBusiness('selectiveProcess', 'BusSelectiveProcessOccurrence');

        foreach ( $this->inscriptionData->selectiveProcessTypeData as $selectiveProcessTypeIdIdentify => $selectiveProcessTypeData )
        {
            $othersSelectiveProcess = $businessSelectiveProcessOccurrence->getSelectiveProcessOccurrence($this->inscriptionData->inscription->selectiveProcessId, $selectiveProcessTypeData->selectiveProcessTypeId);

            if ( strlen((string)$selectiveProcessTypeData->numberInscription) > 0 )
            {
                //Se foi informado um número de inscrição
            }
            else
            {
                //Nao foi informado um número de inscrição, temos que ver se 
                //foi informada alguma nota, daí tem que dar uma mensagem de erro
                foreach ( $selectiveProcessTypeData as $key1 => $value1 )
                {
                    if ( strlen((string)$value1->note) > 0 )
                    {
                        //Foi informada alguma nota, tem que pedir o número de inscrição
                        $msg .= _M('Were informed note for some exam from the selective process', $module) . ' ' . $othersSelectiveProcess->selectiveProcessTypeDescription . ', ' . _M('but not were informed the inscription number to this selective process', $module) . '<br>';
                    }
                }
            }
        }

        if ( strlen((string)$msg) > 0 )
        {
            //Existe alguma prova com nota em algum processo seletivo que não tem número de inscrição
            $this->addError($msg);
        }
        else
        {
            if ( $this->inscriptionData->inscription->isSocialEconomic == DB_TRUE )
            {
                //Have Social Economic
                $opts = array('page'            => '8'/*,
                                'inscriptionData' => $opts1*/);  //Verify documents
            }
            else
            {
                $opts = array('page'            => '8'/*,
                                'inscriptionData' => $opts1*/,
                                'event'           => 'btnSave_click');  //Verify documents
            }

            $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

            $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
        }
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnBack_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        //$opts1 = $opts1 = urlencode(serialize($this->inscriptionData));

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array( 'page' => '6'/*,
                       'inscriptionData' => $opts1*/ );  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

}

?>
