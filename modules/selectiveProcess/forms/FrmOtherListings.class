<?php

/**
 * Other listings form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 26/12/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmOtherListings extends MForm
{
    private $home;
    
    var $business;
    
    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = $MIOLO->getBusiness($module, 'BusOtherListings');
        $this->home   = $data->home;

        parent::__construct(_M('Other listings', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $this->setAction('main');

        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        $event          = MIOLO::_request('event');
        $cityExam       = MIOLO::_request('cityExam');
        $classification = MIOLO::_request('classification');
        $unit           = MIOLO::_request('unit');
        $workPhone      = MIOLO::_request('workPhone');
        $cityExam       = MIOLO::_request('cityExam');
        $cityExam       = MIOLO::_request('cityExam');
        $cityExam       = MIOLO::_request('cityExam');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Inscriptions report', $this->home, 'otherListings-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        if ((strlen((string)$function) == 0) || ($function == null))
        {
            $flds[] = new Separator('');
            $business           = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
            $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());            
            $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
            $selectiveProcessId->setAutoPostBack(true);
            $validators[]       = new MRequiredValidator('selectiveProcessId'); 
            $flds[]             = $selectiveProcessId;
            $flds[] = new Separator('');

            $reportOptions = array(
                                    array(_M('Localization of pupils', $module), 1),
                                    array(_M('Newspaper file', $module), 2),
                                    array(_M('Classified/desclassified/surplus', $module), 3)
                                   );

            $reportOption = new MRadioButtonGroup('reportOption', _M('Report option', $module), $reportOptions, $this->getFormValue('reportOption', $data->reportOption));
            $validators[] = new MRequiredValidator('reportOption');
            $reportOption->setShowLabel(false);
            $reportOption->setAutoPostBack(true);
            $flds[] = $reportOption;

            $reportOption = $this->getFormValue('reportOption');

            if ( strlen((string)$reportOption)>0 && strlen((string)$selectiveProcessId->value)>0 )
            {
                if ( $reportOption == 1 )
                {
                    $gridData = $this->business->inscriptionForGeneralLocation($selectiveProcessId->value);

                    $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdOtherListingsLocalizationOfPupils', '', $filters);
                    $grdResults->setData($gridData);
                    $grdResults->setClose(null);

                    if ( $event == 'tbBtnPrint_click'/* && 'placeRoomId == 2'*/)
                    {
                        $lblGenLocation = new MText('lblGenLocation', $txtMessage);
                        $flds4[] = $lblGenLocation;

                        $gridData = $this->business->inscriptionForRoom($selectiveProcessId->value, $cityExam);

                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdOtherListingsLocalizationOfPupilsByCity', $filters);
                        $grdResults->setData($gridData);
                        $grdResults->setClose(null);

                        //###GRID///is_array($gridData) ?  $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
                    }
                    else
                    {
                        $txtMessage = _M('If you want to show all places, click in the button below:', $module);
                        $lblAct = new MText('lblAct', $txtMessage);
                        $flds3[] = $lblAct;

                        $btnOnLblAct = new MButton('btnOnLblAct',_M('All locals',$module));
                        $btnOnLblAct->attachEventHandler('click', 'onLblActClick');
                        $flds3[] = $btnOnLblAct;

                        $divAct        = new BaseGroup ('divAct', _M('Select the report', $module), $flds3, 'vertical');
                        $divAct->showLabel = true;
                        $divAct->width     = '40%';
                    }


                }

                if ( $reportOption == 2 )
                {
                    $txtData = $this->business->archiveForPeriodical($selectiveProcessId->value, $workPhone, $unit);

                    $isClassified[] = _M('List of approved - selective process ', $module) . $selectiveProcessId->value;
                    $isClassified[] = _M('Cont', $module) . ';' . _M('Inscr', $module) . ';' . _M('Candidate name', $module) . ';' . _M('Course name', $module) . '/' . _M('Unit', $module) . ';' . _M('Situation', $module);

                    $x = 0;
                    foreach ( $txtData as $countLn => $k )
                    {
                        if ( $k[4] == 2 )
                        {
                            $x++;
                            $isClassified[] = $x . ';' . $k[0] . ';' . $k[1] . ';' . $k[2] . '/' . $k[3] . ';' . _M('Classified', $module);
                        }
                    }
                    $fileContent = implode("\n", $isClassified);

                    $isSurplus[] = "\n" . _M('List of surplus - selective process @1', $module, $selectiveProcessId->value);
                    $isSurplus[] = _M('Cont', $module) . ';' . _M('Inscr', $module) . ';' . _M('Candidate name', $module) . ';' . _M('Course name', $module) . '/' . _M('Unit', $module) . ';' . _M('Situation', $module);

                    $y = 0;
                    foreach ( $txtData as $countLn=>$k )
                    {
                        if ( $k[4] == 3 )
                        {
                            $y++;
                            $isSurplus[] = $y . ';' . $k[0] . ';' . $k[1] . ';' . $k[2] . '/' . $k[3] . ';' . _M('Surplus', $module);
                        }
                    }
                    $fileContent .= implode("\n", $isSurplus);

                    SAGU::returnAsFile('report.csv', $fileContent, 'text/application');
                }
                if ( $reportOption == 3 )
                {
                    if ( $event == 'tbBtnPrint_click' )
                    {
                        $gridData = $this->business->otherListingsClassifiedB($selectiveProcessId->value, $classification);

                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdOtherListingsClassifiedB', '', $filters);
                        $grdResults->setData($gridData);
                        $grdResults->setClose(null);
                    }
                    else
                    {
                        $gridData = $this->business->otherListingsClassified($selectiveProcessId->value);
                        if ( $gridData )
                        {
                            foreach( $gridData as $key=>$gD )
                            {
                                $gridData[$key][2] = $gD[1];
                                if ( $gD[0] == 1 )
                                {
                                    $gridData[$key][1] = _M('Desclassified', $module);
                                }
                                elseif ( $gD[0] == 2 )
                                {
                                    $gridData[$key][1] = _M('Classified', $module);
                                }
                                elseif ( $gD[0] == 3 )
                                {
                                    $gridData[$key][1] = _M('Surplus', $module);
                                }
                            }
                        }

                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdOtherListingsClassified', '', $filters);
                        $grdResults->setData($gridData);

                        //###GRID///is_array($gridData) ?  $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;
                    }
                }

            }

            $bsg1            = new BaseGroup('bsg1', _M('Report type', $module), $flds, 'vertical');
            $bsg1->showLabel = true;
            $bsg1->width     = '35%';


            $hct1            = new MHContainer('hct1',array($bsg1, $divAct));
            $hct1->showLabel = true;
            $fields[] = $hct1;

            if ( $grdResults )
            {
                $fields[] = $grdResults;
            }
        }

        $fields[] = new Separator('');

        if (isset($dataGrid))
        {
            $fields[] = $dataGrid;
        }

        $this->page->setAction($MIOLO->getActionURL($module, $action));
        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Event triggered when user chooses a link inside the grid
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO             = MIOLO::getInstance();
        $module            = MIOLO::getCurrentModule();
        $action            = MIOLO::getCurrentAction();

        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $data->reportOption       = MIOLO::_request('reportOption');
        $data->placeRoomId        = MIOLO::_request('placeRoomId'); 
        $data->build              = MIOLO::_request('build');
        $data->room               = MIOLO::_request('room');
        $data->count              = MIOLO::_request('count');
        $data->isClassified       = MIOLO::_request('isClassified');
    }

    public function onLblActClick($sender=NULL)
    {
            $MIOLO  = MIOLO::getInstance();
            $module = MIOLO::getCurrentModule();
            $action            = MIOLO::getCurrentAction();
            $postAction = $action;
            $vars = array ( 'event'=>'tbBtnPrint_click',
                            'cityExam' => null,
                            'reportOption'=>$this->reportOption->value,
                            'selectiveProcessId'=>$this->selectiveProcessId->value
                            );
            
            $this->page->mGoto($MIOLO->getActionURL($module, $postAction,null,$vars));

    }

    public function onLblActClick2($sender=NULL)
    {

        if ( $this->getFormValue('reportOption', $data->reportOption) ==4 )
        {
            $MIOLO  = MIOLO::getInstance();
            $module = MIOLO::getCurrentModule();

            $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
            $data->reportOption       = MIOLO::_request('reportOption');
            $data->placeRoomId        = MIOLO::_request('placeRoomId');
            $data->build              = MIOLO::_request('build');
            $data->room               = MIOLO::_request('room');
            $data->count              = MIOLO::_request('count');

            $MIOLO->getClass($module, 'RptInscriptionByRoomAct');
            $data->optionNumber = 2;
            $report = new RptInscriptionByRoomAct($data);
        }
    }

    public function onLblActClick3($sender=NULL, $dataGrid)
    {
        //$query = $this->business->inscriptionForRoom($this->getFormValue('selectiveProcessId'));

        if ( $this->getFormValue('reportOption', $data->reportOption) == 4 )
        {
            $MIOLO  = MIOLO::getInstance();
            $module = MIOLO::getCurrentModule();

            /*$data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
            $data->reportOption       = MIOLO::_request('reportOption');
            $data->placeRoomId        = MIOLO::_request('placeRoomId');
            $data->build              = MIOLO::_request('build');
            $data->room               = MIOLO::_request('room');
            $data->count              = MIOLO::_request('count');

            $MIOLO->getClass($module, 'RptInscriptionByRoomActs');
            $data->optionNumber = 1;
            $report = new RptInscriptionByRoomAllActs($data);*/
        }

    }

    public function onLblActClick4($sender=NULL)
    {

        if ( $this->getFormValue('reportOption', $data->reportOption) ==4 )
        {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $data->reportOption       = MIOLO::_request('reportOption');
        $data->placeRoomId        = MIOLO::_request('placeRoomId');
        $data->build              = MIOLO::_request('build');
        $data->room               = MIOLO::_request('room');
        $data->count              = MIOLO::_request('count');

        $MIOLO->getClass($module, 'RptInscriptionByRoomAllWritingActs');
        $data->optionNumber = 2;
        $report = new RptInscriptionByRoomWritingAllActs($data);
        }

        else
        {
        }

    }



    
}

?>
