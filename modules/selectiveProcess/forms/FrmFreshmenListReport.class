<?php

/**
 * Freshmen list report form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmFreshmenListReport extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
        $this->home   = $data->home;

            parent::__construct(_M('Insert', $module));
        }
        else
        {
        $this->home   = $data->home;

            parent::__construct(_M('Freshmen list report', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');


        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Freshmen list report', $this->home, 'freshmenListReport-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $business           = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());             $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[]       = new MRequiredValidator('selectiveProcessId'); 
        $fields[]           = $selectiveProcessId;


        $cityLabel = new MText('cityLabel', _M('City id',$module) . ':');
        $cityLabel->setWidth(FIELD_CONTAINER_SIZE);

        $cityIdS = new MLookupTextField('cityIdS', $this->cityIdS->value, '', FIELD_ID_SIZE, null, null, array('cityNameS'), 'basic', 'City', null, null, true);
        $cityIdS->setJsHint(_M('Enter the course id',$module));
        $validators[] = new MIntegerValidator('cityIdS', '', 'optional');

        $cityNameS = new MTextField('cityNameS', $this->getFormValue('cityNameS', $data->cityNameS), '', FIELD_DESCRIPTION_SIZE);
        $cityNameS->setReadOnly(true);
        $cityNameS->setJsHint(_M('Company name',$module));

        $hctCity = new MHContainer('hctCity', array( $cityLabel, $cityIdS, $cityNameS) );
        $hctCity->setShowLabel(true);
        $fields[]  = $hctCity;


        $courseLabel = new MText('courseLabel', _M('Course id',$module) . ':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value,'', FIELD_ID_SIZE, null, null, array('courseNameS'), 'academic', 'Course', null, null, true);
        $courseIdS->setJsHint(_M('Enter the course id',$module));

        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', FIELD_DESCRIPTION_SIZE);
        $courseNameS->setReadOnly(true);

        $cntCourse = new MHContainer('cntCourse', array($courseLabel, $courseIdS, $courseNameS));
        $fields[] = $cntCourse;

        $businessUnit = $MIOLO->getBusiness('basic', 'BusUnit');
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId',$data->unitId), _M('Unit',$module), $businessUnit->listUnit());
        $fields[] = $unitId;

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $filters->selectiveProcessId = $this->getFormValue('selectiveProcessId', $data->selectiveProcessId);
        $filters->cityId             = $this->getFormValue('cityIdS', $data->cityIdS);
        $filters->courseId           = $this->getFormValue('courseIdS', $data->courseIdS);
        $filters->cityName           = $this->getFormValue('cityNameS', $data->cityNameS);
        $filters->unitId             = $this->getFormValue('unitId', $data->unitId);

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdFreshmenListReport', $filters);
        $business   = $MIOLO->getBusiness($module,'BusFreshmenListReport');
        $data       = $business->freshmenList($filters);
        $grdResults->setData($data);

        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

}

?>
