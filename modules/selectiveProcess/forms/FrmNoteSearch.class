<?php

/**
 *
 * This file handles the connection and actions for sprNote table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * 
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basNote table
 */
class FrmNoteSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Note', $this->home, 'note-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

         /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $selectiveProcessIdS->addAttribute('onChange','document.' . $this->getName() . '.submit()' );
        $fields[]           = $selectiveProcessIdS;

        $personLabelS = new MText('personLabel', _M('Person id',$module) . ':');
        $personLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $personIdS= new MLookupTextField('personIdS', $this->getFormValue('personIdS', $data->personIdS), '', FIELD_ID_SIZE, null, null, array('personNameS'), 'basic', 'PersonPupils', null, null, true);
        $personIdS->setJsHint(_M('Enter the person code',$module));


        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS',$data->personNameS), '', FIELD_DESCRIPTION_SIZE);
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Person name',$module));

        $hctPerson = new MHContainer('hctContract', array($personLabelS, $personIdS, $personNameS));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        $inscriptionLabel = new MText('inscriptionLabel', _M('Inscription id',$module) . ':');
        $inscriptionLabel->setWidth(FIELD_CONTAINER_SIZE);

        $inscriptionIdS = new MLookupTextField('inscriptionIdS', $this->getFormValue('inscriptionIdS', $data->inscriptionIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('limbo, inscriptionPersonIdS, inscriptionPersonNameS'), 'selectiveProcess', 'Inscription', null, array('selectiveProcessId' => 'selectiveProcessIdS', 'personId' => 'personIdS'), true);
        $inscriptionIdS->setJsHint(_M('Enter the inscription id',$module));


        //$fields[] = $inscriptionIdS;
        $validators[] = new MIntegerValidator('inscriptionIdS', '', 'optional');

        $inscriptionPersonIdS = new MTextField('inscriptionPersonIdS', $this->getFormValue('inscriptionPersonIdS', $data->inscriptionPersonIdS), '', FIELD_ID_SIZE);
        $inscriptionPersonIdS->setReadOnly(true);
        $inscriptionPersonIdS->setJsHint(_M('Person code',$module));

        $inscriptionPersonNameS = new MTextField('inscriptionPersonNameS', $this->getFormValue('inscriptionPersonNameS', $data->inscriptionPersonNameS), '', FIELD_DESCRIPTION_SIZE);

        $inscriptionPersonNameS->setReadOnly(true);
        $inscriptionPersonNameS->setJsHint(_M('Person name',$module));

        $hctInscription = new MHContainer('hctInscription', array($inscriptionLabel, $inscriptionIdS, $inscriptionPersonIdS, $inscriptionPersonNameS));
        $fields[]  = $hctInscription;

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
//         $examOccurrenceIdS = new MLookupTextField('examOccurrenceIdS', $this->getFormValue('examOccurrenceIdS', $data->examOccurrenceIdS), _M('Exam occurrence id',$module), FIELD_LOOKUPFIELD_SIZE, null, null, '', 'selectiveProcess', 'ExamOccurrence', null, null, true);
//         $examOccurrenceIdS->setJsHint(_M('Enter the exam occurrence id',$module));
//         $fields[] = $examOccurrenceIdS;
//         $validators[] = new MIntegerValidator('examOccurrenceIdS', '', 'optional');

        $examOccurrenceLabelS = new MText('examOccurrenceLabelS', _M('Exam occurrence id',$module) . ':');
        $examOccurrenceLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $examOccurrenceIdS = new MLookupTextField('examOccurrenceIdS', $this->getFormValue('examOccurrenceIdS', $data->examOccurrenceIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('examOcurrenceIdS, limbo, limbo, limbo, limbo, examOccurrenceDescriptionS'), 'selectiveProcess', 'ExamOccurrence', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $examOccurrenceIdS->setJsHint(_M('Enter the exam occurrence id',$module));
        $validators[] = new MIntegerValidator('examOccurrenceIdS', '', 'optional');

        $examOccurrenceDescriptionS = new MTextField('examOccurrenceDescriptionS', $this->getFormValue('examOccurrenceDescriptionS', $data->examOccurrenceDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        $examOccurrenceDescriptionS->setReadOnly(true);
        $examOccurrenceDescriptionS->setJsHint(_M('Exam occurrence description',$module));

        $hctExamOccurrence = new MHContainer('hctExamOccurrence', array($examOccurrenceLabelS, $examOccurrenceIdS, $examOccurrenceDescriptionS));
        $fields[]  = $hctExamOccurrence;


        $noteS  = new MTextField('note', $this->noteS->value, _M('Note', $module), 8);
        $validators[] = new MIntegerValidator('note', '', 'optional');

        $fields[]             = $noteS;

        $fields[] = new MButton('btnSearch',_M('Search',$module));


        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->selectiveProcessId     = $this->selectiveProcessIdS->value;
        $filters->note                   = $this->noteS->value;
        $filters->examOccurrenceId       = $this->examOccurrenceIdS->value;
        $filters->inscriptionId          = $this->inscriptionIdS->value;
        $filters->personId               = $this->personIdS->value;

        $grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdNoteSearch', $filters);
        $business   = $this->manager->getBusiness($module,'BusNote');

        $data       = $business->searchNote($filters);

        $data1Iterator = 0;

        for ( $x=0 ; $x < count($data); $x++ )
        {
            if ( ($oldInscriptionId == $data[$x][0]) && ($oldSelectiveProcessId == $data[$x][2]) )
            {
                //É a mesma pessoa para o mesmo processo seletivo anterior
                $data1[$data1Iterator][4] = $data[$x][5];
                $data1[$data1Iterator][5] = $data[$x][6];
            }
            else
            {
                //Mudou a pessoa ou o processo seletivo
                $data1[$data1Iterator][0] = $data[$x][0];
                $data1[$data1Iterator][1] = $data[$x][1];
                $data1[$data1Iterator][2] = $data[$x][2];
                $data1[$data1Iterator][3] = $data[$x][3] . ' - ' . $data[$x][4];
                $data1Iterator++;
                $data1[$data1Iterator][4] = $data[$x][5];
                $data1[$data1Iterator][5] = $data[$x][6];
                //$data1[$data1Iterator] = $data[$x];
            }

            $oldInscriptionId        = $data[$x][0];
            $oldSelectiveProcessId   = $data[$x][2];

            $data1Iterator++;
        }

        $grdResults->setData($data1);

        //###GRID///is_array($data) ?  $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);


//        $this->page->onLoad('document.' . $this->name . '.courseVacantIdS.focus();');

    }

}

?>
