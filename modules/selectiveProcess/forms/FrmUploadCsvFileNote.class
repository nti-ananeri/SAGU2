<?php

/**
 * Upload csv file note form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *         Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a uploadCsvFileNote
 **/
class FrmUploadCsvFileNote extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
        $this->home   = $data->home;

            parent::__construct(_M('Insert', $module));
        }
        else
        {
        $this->home   = $data->home;

            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO                  = MIOLO::getInstance();
        $module                 = MIOLO::getCurrentModule();
        $action                 = MIOLO::getCurrentAction();

        $business               = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $businessExamOccurrence = $MIOLO->getBusiness($module,'BusExamOccurrence');

        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module).':', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

        $selectiveProcessId->setAutoPostBack(true);

        $fields[] = new Separator('');

        if ( strlen((string)$selectiveProcessId->value) > 0 )
        {
            $filters1->selectiveProcessId = $selectiveProcessId->value;
            $dataExamOccurrence           = $businessExamOccurrence->searchExamOccurrence($filters1);

            if ( is_array($dataExamOccurrence) && (count($dataExamOccurrence) > 0) )
            {
                $x = 0;

                $inscriptionIdLabel = new MText('inscriptionIdLabel', _M('Inscription id', $module));
                $inscriptionIdLabel->setWidth(FIELD_CONTAINER_SIZE);
                $inscriptionIdLabel->setClass('m-caption m-caption-required');

                $inscriptionId = new MTextField('inscriptionId', '', '', FIELD_ID_SIZE);
                $validators[]  = new MIntegerValidator('inscriptionId', _M('Inscription id', $module), 'required');

                $separator = new MText('separator', '');
                $separator->setWidth(FIELD_CONTAINER_SIZE);

                $cnt = new MContainer('cnt', array($inscriptionIdLabel, $inscriptionId, $separator));

                $vert1[] = $cnt;

                foreach ( $dataExamOccurrence as $key1 => $value1 )
                {
                    $testExamOccurence = new MText('testExamOccurence', $value1[6]);
                    $testExamOccurence->setWidth(FIELD_CONTAINER_SIZE);

                    $examOccurrence    = new MTextField('examOccurrence'.$value1[0], '', '', FIELD_ID_SIZE);

                    $cnt = new MContainer('cnt', array($testExamOccurence, $examOccurrence, $separator));

                    $x < (count($dataExamOccurrence)/2) ? $vert1[] = $cnt : $vert2[] = $cnt;

                    $x++;
                }

                $cntV1 = new MVContainer('cntV1', $vert1);
                $cntV2 = new MVContainer('cntV2', $vert2);

                $separatorH = new MSeparator('');

                $cntH1 = new MContainer('cntH1', array($separatorH, $cntV1, $cntV2));

                $bsg1     = new MBaseGroup('bsg1', ' ' . _M('Exam order to csv file importation', $module) . ' ', array($cntH1), 'vertical');

                $textMessage = new MTextLabel('textMessage', _M('Below, select the columns importation order to csv file. To select order, use numbers between 1 and', $module) . ' ' . (count($dataExamOccurrence)+1) . '. ' . _M('Not\'s necessary to select all exams', $module) . '.');

                $fields[] = $separatorH;
                $fields[] = $textMessage;
                $fields[] = $separatorH;

                $fields[] = $bsg1;

                $fields[] = $separatorH;
                $fields[] = $separatorH;
            }

            $uploadCsvFileNote = new MFileField('uploadCsvFileNote', $this->getFormValue('uploadCsvFileNote', $uploadCsvFileNote), _M('Upload csv file - subscription register', $module), 40);

            $fields[]     = $uploadCsvFileNote;

            //$uploadCvsFile = new MHiddenField('uploadCvsFile', $uploadCsvFileNote->value);
            //$fields[]      = $uploadCvsFile;

//POR ENQUANTO COMENTADO, DEPOIS É NECESSÁRIO SER OBRIGATÓRIO
//            $validators[] = new MRequiredValidator('uploadCsvFileNote', '', 'required');

            $fields[] = new Separator('');

            $fields[] = new MButton('submit_button', _M('Submit', $module));
        }

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

    /**
     * Event triggered when user chooses Submit from form
     **/
    public function submit_button_click($sender=NULL)
    {
        $MIOLO                  = MIOLO::getInstance();
        $module                 = MIOLO::getCurrentModule();
        $action                 = MIOLO::getCurrentAction();
        $function               = MIOLO::_request('function');

        $businessFile           = $MIOLO->getBusiness('basic', 'BusFile');
        $businessExamOccurrence = $MIOLO->getBusiness($module,'BusExamOccurrence');
        $busNote                = $MIOLO->getBusiness($module,'BusNote');

        $isInsert               = MIOLO::_request('isInsert'); //Será TRUE se está no post de inserção
                                                               //ou update das notas

        $fileId                 = MIOLO::_request('fileId');
        $selectiveProcessId     = MIOLO::_request('selectiveProcessId');
        $inscriptionIdText      = MIOLO::_request('inscriptionId'); 

        $filters1->selectiveProcessId = $selectiveProcessId;
        $dataExamOccurrence           = $businessExamOccurrence->searchExamOccurrence($filters1);

        if ( ! $isInsert )
        {
            if ( $_FILES["uploadCsvFileNote"]["error"] === 0 )
            {
                $dataFile->fileName  = $_FILES["uploadCsvFileNote"]["name"];
                $dataFile->fileType  = $_FILES["uploadCsvFileNote"]["type"];
                $dataFile->localPath = $_FILES["uploadCsvFileNote"]["tmp_name"];
                $dataFile->size      = $_FILES["uploadCsvFileNote"]["size"];

                // Data to put information on files
                $dataFileReturn = $businessFile->insertFile($dataFile);

                if ( $dataFileReturn == false )
                {
                    $this->addInfo(_M('Some problems occurred on update the file. Please, try again.', $module));
                }
                else
                {
                    SAGUFile::saveFileToLocal($dataFile->localPath, $dataFileReturn->fileId);
                }
            }
            else
            {
                $this->addInfo(_M('Some problems occurred on update the file. Please, try again.', $module));
            }

            $content = SAGUFile::getFileBody($dataFileReturn->fileId, false, true);
        }
        else
        {
            $content = SAGUFile::getFileBody($fileId, false, true);
        }


        if ( is_array($dataExamOccurrence) && (count($dataExamOccurrence) > 0) )
        {
            //Percorre todas as ocorrências de provas de um processo seletivo
            foreach ( $dataExamOccurrence as $key1 => $value1  )
            {
                //Armazenará no array a ordem das colunas de importação informada para cada
                //prova. Sendo que a chave do array será o examOccurrenceId
                if ( strlen((string)MIOLO::_request('examOccurrence'.$value1[0])) > 0 )
                {
                    $examOccurrenceId[$value1[0]] = MIOLO::_request('examOccurrence'.$value1[0]);
                }
            }


            if ( is_array($examOccurrenceId) && (count($examOccurrenceId) > 0))
            {
                //Existem ordem de provas informadas para este processo seletivo
                $examOccurrenceId['insc'] = $inscriptionIdText;

                $keysExamOccurrenceId     = array_keys($examOccurrenceId);

                //Analisará se existem números iguais digitados
                for ( $i = 0 ; $i < count($keysExamOccurrenceId); $i++ )
                {
                    for ( $j = 0 ; $j < count($keysExamOccurrenceId); $j++ )
                    {
                        if ( $j != $i ) //Verifica se a chave não é a mesma
                        {
                            if ( ($examOccurrenceId[$keysExamOccurrenceId[$i]] == $examOccurrenceId[$keysExamOccurrenceId[$j]]) && (strlen((string)$examOccurrenceId[$keysExamOccurrenceId[$i]]) > 0) )
                            {
                                //Existem números iguais, tem que mostrar erro
                                $this->addError(_M('There are repeated numbers', $module));
                                $brekFor = true;
                                break 2;
                            }
                        }
                    }
                }

                asort($examOccurrenceId);

                if ( $content )
                {
                    //ENCONTROU arquivo
                    foreach( $content as $line )
                    {
                        $lineArray = explode(';', $line);
                        unset($data);

                        $x = 0;

                        if ( is_array($lineArray) && (count($lineArray) > 0) )
                        {
                            //Tem dados na linha

                            //Foi informada ao menos uma prova para importar
                            foreach ( $examOccurrenceId as $key2 => $value2 )
                            {
                                if ( strlen((string)$lineArray[$value2-1]) > 0 )
                                {
                                    //Tem dados na linha e coluna referidas;

                                    if ( is_string($key2) && ($key2 == 'insc') )
                                    {
                                        $data->inscriptionId = $lineArray[$value2-1];
                                    }

                                    if ( (strlen((string)$value2) > 0) && ($key2 != 'insc') )
                                    {
                                        $data->notes[$x]->note             = $lineArray[$value2-1];
                                        $data->notes[$x]->examOccurrenceId = $key2;
                                    }

                                    $x++;
                                }
                                else
                                {
                                    //Não existem dados nesta columa citada para importação para esta inscrição
                                    foreach ( $dataExamOccurrence as $value3 )
                                    {
                                        if ( $value3[0] == $key2 )
                                        {
                                            $this->addInfo( _M('There aren\'t note to exam', $module) . ' ' . $value3[6] . ' ' . _M('to subscription code', $module) . ' ' . $data->inscriptionId) . '<br>';
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //NÃO TEM dados na linha
                            $this->error(_M('Incorrect file or problems in lines importation', $module));
                        }

                        if ( strlen((string)$data->inscriptionId) > 0 )
                        {
                            //Se entrar aqui, tem dado na coluna de inscrição NO ARQUIVO
                            unset($filters2);
                            $filters2->selectiveProcessId = $selectiveProcessId;
                            $filters2->inscriptionId      = $data->inscriptionId;

                            $searchNote                   = $busNote->searchNote($filters2);

                            if ( is_array($searchNote) && (count($searchNote) > 0) )
                            {
                                //INSCRIÇÃO informada no arquivo EXISTE no processo seletivo
                                $thereAreInscription[] = $data;
                            }
                            else
                            {
                                //Esta INSCRIÇÃO informada no arquivo NÃO EXISTE no sistema
                                //***********VER MENSAGEM OU TABLERAW....
                                $noThereAreInscription[] = $data;
                            }
                        }
                        else
                        {
                            //Não econtrou inscrição NO ARQUIVO. Ou o dado não foi informado no arquivo, ou a orderm da coluna informada está incorreta
                            $this->addError(_M('The subscription column in the file is null or the order number is incorrect', $module));

                            break;
                        }
                    }
                }
                else
                {
                    //NÃO ENCONTROU arquivo
                    //$error = true;
                    $this->addError(_M('Error in file name, file location or file type', $module));
                }

                if ( ! $isInsert )
                {
                    //Gera as tableRaws
                    if ( is_array($thereAreInscription) && (count($thereAreInscription) > 0) )
                    {
                        $thereAreInscriptionColumns[]    = _M('Inscription id', $module);
    
                        foreach ( $dataExamOccurrence as $key5 => $value5 )
                        {
                            $thereAreInscriptionColumns[] = $value5[6];
                        }
    
                        $iteratorLine = 0; //Contrala a linha corrente da tabela
    
                        foreach ( $thereAreInscription as $key5 => $value5 )
                        {
                            $thereAreInscriptionValues[$iteratorLine][] = '<b>' . $value5->inscriptionId . '</b>';
    
                            //Coloca célula em branco na linha do número de inscrição
                            for ( $x = 0; $x < count($dataExamOccurrence); $x++ )
                            {
                                $thereAreInscriptionValues[$iteratorLine][$x+1] = '';
                            }
    
                            $iteratorLine++;
    
                            //Percorrea as notas do arquivo
                            $thereAreInscriptionValues[$iteratorLine][0] = '<font color=\'blue\'><b>' . _M('New note', $module) . '</b></font>'; //Primeira célula em branco

                            foreach ( $value5->notes as $key6 => $value6 )
                            {
                                for ( $x = 0; $x < count($dataExamOccurrence); $x++ )
                                {
                                    if ( $dataExamOccurrence[$x][0] == $value6->examOccurrenceId )
                                    {
                                        $thereAreInscriptionValues[$iteratorLine][$x+1] = '<font color \'blue\'><center><font color=\'blue\'><b>' . $value6->note . '</b></font></center>';
                                    }
                                    else
                                    {
                                        if ( !(strlen((string)$thereAreInscriptionValues[$iteratorLine][$x+1]) > 0) )
                                        {
                                            $thereAreInscriptionValues[$iteratorLine][$x+1] = '';
                                        }
                                    }
                                }
                            }
    
                            $iteratorLine++;
    
                            $filters3->inscriptionId = $value5->inscriptionId;
                            $dataNote                = $busNote->searchNote($filters3);
    
                            if ( is_array($dataNote) && (count($dataNote) > 0) )
                            {
                                $thereAreInscriptionValues[$iteratorLine][0] = '<font color=\'red\'>' . _M('Current note', $module) . '</font>';
    
                                foreach( $dataNote as $key7 => $value7 )
                                {
                                    for ( $x = 0; $x < count($dataExamOccurrence); $x++ )
                                    {
                                        if ( $dataExamOccurrence[$x][0] == $value7[1] )
                                        {
                                            $thereAreInscriptionValues[$iteratorLine][$x+1] = '<center>'.'<font color=\'red\'>' . $value7[6] . '</font></center>';
                                        }
                                        else
                                        {
                                            if ( !(strlen((string)$thereAreInscriptionValues[$iteratorLine][$x+1]) > 0) )
                                            {
                                                $thereAreInscriptionValues[$iteratorLine][$x+1] = '';
                                            }
                                        }
                                    }
                                }
                            }
                            $iteratorLine++;
                        }
    
                        $therAreInscriptionTR = new MTableRaw(_M('File subscriptions that are on the system', $module), $thereAreInscriptionValues, $thereAreInscriptionColumns);
    
                        $this->addField(new MSeparator(''));
                        $this->addField($therAreInscriptionTR);
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));

                        foreach ( $dataExamOccurrence as $key1 => $value1  )
                        {
                            if ( strlen((string)MIOLO::_request('examOccurrence'.$value1[0])) > 0 )
                            {
                                $opts['examOccurrence'.$value1[0]] =     MIOLO::_request('examOccurrence'.$value1[0]);
                            }
                        }

                        $opts['isInsert']           = 'true';
                        $opts['fileId']             = $dataFileReturn->fileId;
                        $opts['event']              = 'submit_button_click';
                        $opts['selectiveProcessId'] = $selectiveProcessId;
                        $opts['inscriptionId']      = $inscriptionIdText;
    
                        $btnGenerate = new MButton('btnGenerate', _M('Generate importation', $module), $MIOLO->getActionURL( $module, $action, null, $opts));
    
                        $this->addField($btnGenerate);
    
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));
                        $this->addField(new MSeparator(''));
    
                        $textMessage1 = new MTextLabel('textMessage1', _M('Below, list of incorrect subscriptions or subscriptions that aren\'t in the system', $module));
                        $textMessage1->setColor('red');
    
                        $this->addField($textMessage1);
                    }
    
                    if ( is_array($noThereAreInscription) && (count($noThereAreInscription) > 0) )
                    {
                        $noTherAreInscriptionColumns[]    = _M('Inscription id', $module);
    
                        foreach ( $dataExamOccurrence as $key5 => $value5 )
                        {
                            $noTherAreInscriptionColumns[] = $value5[6];
                        }
    
    
                        foreach ( $noThereAreInscription as $key5 => $value5 )
                        {
                            $noTherAreInscriptionValues[$key5][] = $value5->inscriptionId;
    
                            foreach ( $value5->notes as $key6 => $value6 )
                            {
                                for ( $x = 0; $x < count($dataExamOccurrence); $x++ )
                                {
                                    if ( $dataExamOccurrence[$x][0] == $value6->examOccurrenceId )
                                    {
                                        $noTherAreInscriptionValues[$key5][$x+1] = '<center>' . $value6->note . '</center>';
                                    }
                                    else
                                    {
                                        if ( !(strlen((string)$noTherAreInscriptionValues[$key5][$x+1]) > 0) )
                                        {
                                            $noTherAreInscriptionValues[$key5][$x+1] = '';
                                        }
                                    }
                                }
                            }
                        }
    
                        $noTherAreInscriptionTR = new MTableRaw(_M('Incorrect subscription or subscription that aren\'t in the system', $module) . ' - ' . _M('This list is not imported', $module), $noTherAreInscriptionValues, $noTherAreInscriptionColumns );
    
                        $this->addField(new MSeparator(''));
                        $this->addField($noTherAreInscriptionTR);
                        $this->addField(new MSeparator(''));
                    }
                }
                else
                {
                    if ( is_array($thereAreInscription) && ( count($thereAreInscription) > 0 ) )
                    {
                        $busNote->beginTransaction;

                        foreach ( $thereAreInscription as $key8 => $value8 )
                        {
                            unset($filters6);

                            $filters6->inscriptionId = $value8->inscriptionId;

                            foreach ( $value8->notes as $key9 => $value9 )
                            {
                                $filters6->examOccurrenceId = $value9->examOccurrenceId;

                                unset($filters6->note);

                                $dataNoteSearch             = $busNote->searchNote($filters6);

                                $filters6->note             = $value9->note;

                                if ( is_array($dataNoteSearch) && (count($dataNoteSearch) > 0) )
                                {
                                    //UPDATE da nota
                                    $busNote->updateOneNote($filters6);
                                }
                                else
                                {
                                    //INSERIR nova nota
                                    $busNote->insertNote($filters6);
                                }
                            }
                        }

                        $busNote->commit;

                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null);
                        $MIOLO->information('Success importation notes', $goto);
                    }
                }
            }
            else
            {
                //Se entrar aqui, nãao foi informado nenhum numero para todas as provas
                $this->addError(_M('Necessary to select column importation order to csv file', $module));
            }
        }
        else
        {
            $this->addError(_M('There aren\'t exam occurrence to this selective process', $module));
        }
    }
}

?>
