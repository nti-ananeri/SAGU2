<?php

/**
 * Exam occurrence form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 24/11/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmOtherSattleOfMatter extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $otherSattleOfMatterId = MIOLO::_request('otherSattleOfMatterId');
            $fields[]           = new MHiddenField('otherSattleOfMatterId', $otherSattleOfMatterId);
            $fields[]           = new MTextLabel('otherSattleOfMatterId', $otherSattleOfMatterId, _M('Other sattle of matter id',$module));

            $business = $MIOLO->getBusiness($module,'BusOtherSattleOfMatter');
            $data     = $business->getOtherSattleOfMatter($otherSattleOfMatterId);
        }

/*        $selectiveProcessId  = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), 10, null, null, ('description'), $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]             = $selectiveProcessId;

        $description  = new MTextField('description', $this->descriptions->value, _M('Description', $module), 30);
        $description->setReadOnly(true);
        $fields[]             = $description; */
        
        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');


        //$tableName  = new MTextField('tableName', $this->getFormValue('tableName', $data->tableName), _M('Table name', $module), 30);
        $tables = array('SPRINSCRIPTION'=>          _M('Inscription',$module),
                       // 'SPRINSCRIPTIONOPTION'=>    _M('Inscription option',$module),
                        //'SPRCOURSEOCCURRENCE'=>     _M('Vacancy occurrence',$module),
                        'BASPHYSICALPERSONSTUDENT'=>_M('Physical person student', $module) );

        $tableName = new MSelection('tableName', $this->getFormValue('tableName', $data->tableName), _M('Table name', $module), $tables);
        $tableName->setAutoPostBack(true);

        $fields[]            = $tableName;
        $validators[]        = new MRequiredValidator('tableName');

        $argsInscription     = array('INSCRIPTIONID' => _M('Inscription id', $module));
        $argsPhysicalPerson  = array('DATEBIRTH'     => _M('Birth date', $module));

        if ( $tableName->value == 'SPRINSCRIPTION' )
        {
            $argsFieldName = $argsInscription;
        }
        elseif ( $tableName->value == 'BASPHYSICALPERSONSTUDENT' )
        {
            $argsFieldName = $argsPhysicalPerson;
        }

        if ( strlen((string)$tableName->value) > 0 )
        {
            $fieldName = new MSelection('fieldName', $this->getFormValue('fieldName', $data->fieldName), _M('Field name', $module), $argsFieldName);
            $fields[]             = $fieldName;
            $validators[]       = new MRequiredValidator('fieldName');
        }

        //$fieldName  = new MTextField('fieldName', $this->getFormValue('fieldName', $data->fieldName), _M('Field name', $module), 30);

        $priority  = new MTextField('priority', $this->getFormValue('priority', $data->priority), _M('Priority', $module), 10);
        $fields[]             = $priority;
        $validators[]       = new MRequiredValidator('priority');
        //$orderBy  = new MTextField('orderBy', $this->getFormValue('orderBy', $data->orderBy), _M('Order by', $module), 10);
        $orderBy = new MSelection('orderBy', $this->getFormValue('orderBy', $data->orderBy), _M('Order by', $module), array('ASC'=>_M('Ascendant', $module), 'DESC'=>_M('Descendant', $module)));
        $fields[]             = $orderBy;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( strlen((string)$this->getFormValue('otherSattleOfMatter', $data->otherSattleOfMatterId))>0 || $function != 'insert')
        {
            $this->page->onLoad('document.' . $this->name . '.otherSattleOfMatterId.focus();');
        }
        elseif ( $function == 'insert' )
        {
            $this->page->onLoad('document.' . $this->name . '.otherSattleOfMatterId.focus();' );
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'otherSattleOfMatterId' => MIOLO::_request('otherSattleOfMatterId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusOtherSattleOfMatter');
        $ok       = $business->deleteOtherSattleOfMatter($this->otherSattleOfMatterId->value);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusOtherSattleOfMatter');

        $filters1->selectiveProcessId = $data->selectiveProcessId;
        $filters1->priority            = $data->priority;

        $dataOtherSattleOfMatter = $business->searchOtherSattleOfMatter($filters1);

        if ( is_array($dataOtherSattleOfMatter) && ( count($dataOtherSattleOfMatter) > 0 ) )
        {
            //Já existe um outro critério de desempate para este processo 
            //seletivo com esta prioridade
            $msg  = _M('Not\'s possible insert. Exist one other sattle of matter with same priority',$module);
            //$goto = SAGU::getStackBackUrl();
            //$goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            //$caption = _M('Error',$module);
            //$MIOLO->error( $msg, $goto, $caption );
            $this->addError($msg);
        }
        else
        {
            //Não existe um critério de desempate com esta prioridade
            if ( $function == 'update' )
            {
                $ok  = $business->updateOtherSattleOfMatter($data);
                $msg = MSG_RECORD_UPDATED;
            }
            else
            {

                $ok  = $business->insertOtherSattleOfMatter($data);
                $msg = MSG_RECORD_INSERTED;
            }

            if ( $ok )
            {
                $opts = array('otherSattleOfMatterIdS' => $data->otherSattleOfMatterId);

                if ( $function == 'update' )
                {
                    $caption = _M('Information', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    unset($opts);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                    $opts = array('function'=>'insert');

                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Question',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Error executing requested operation.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Error',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new SprOtherSattleOfMatter();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        $data->examDateTime = $this->date->value . ' ' . $this->time->value;

        return $data;
    }
}

?>
