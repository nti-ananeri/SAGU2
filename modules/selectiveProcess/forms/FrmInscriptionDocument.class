<?php

/**
 * Inscription form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmInscriptionDocument extends MForm
{
    private $home;
    var $inscriptionData;
    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->inscriptionData = unserialize(urldecode(MIOLO::_request('inscriptionData')));

        if ( MIOLO::_request('function') == 'insert' )
        {
        $this->home   = $data->home;

            parent::__construct(_M('Insert', $module));
        }
        else
        {
        $this->home   = $data->home;

            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $returnTo = MIOLO::_request('returnTo');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
            $toolBar->disableButton('tbBtnBack');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Inscription', $this->home, 'inscriptionDocument-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $inscriptionId = MIOLO::_request('inscriptionId');
            $fields[]           = new MHiddenField('inscriptionId', $inscriptionId);
            $fields[]           = new MTextLabel('inscriptionId', $inscriptionId, _M('Inscription id',$module));

            $business = $MIOLO->getBusiness($module,'BusInscription');
            $data     = $business->getInscription($inscriptionId);
        }

        $selectiveProcessId  = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $this->inscriptionData->selectiveProcessId), _M('Selective process id',$module), 10, null, null, ('description') , $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $validators[] = new MRequiredValidator('selectiveProcess', '', 'required');
        $fields[]             = $selectiveProcessId;

 /*       $description  = new MTextField('description', $this->getFormValue('description', $this->inscriptionData->description), _M('Description', $module), 20);
        $description->setReadOnly(true);
        $fields[]             = $description;

        $personId  = new MLookupTextField('personId', $this->getFormValue('personId', $this->inscriptionData->personId), _M('Person id',$module), 10, null, null, ('personName') , 'basic', 'Person', null, null, true);
        $personId->setJsHint(_M('Enter the person code',$module));
        $fields[]             = $personId;

        $personName  = new MTextField('personName', $this->getFormValue('personName', $this->inscriptionData->personName), _M('Person name', $module), 40);
        $personName->setReadOnly(true);
        $fields[]             = $personName;

        $cityExam  = new MLookupTextField('cityExam', $this->getFormValue('cityExam', $this->inscriptionData->cityExam), _M('City exam',$module), 10, null, null, ('cityName, stateId') , 'basic', 'City', null, null, true);
        $cityExam->setJsHint(_M('Enter the city exam',$module));
        $fields[]             = $cityExam;

        $cityName  = new MTextField('cityName', $this->getFormValue('cityName', $this->inscriptionData->cityName), _M('City name', $module), 40);
        $cityName->setReadOnly(true);
        $fields[]             = $cityName;

        $stateId  = new MTextField('stateId', $this->getFormValue('stateId', $this->inscriptionData->stateId), _M('State id', $module), 4);
        $stateId->setReadOnly(true);
        $fields[]             = $stateId;

        $placeRoomId  = new MLookupTextField('placeRoomId', $this->getFormValue('placeRoomId', $this->inscriptionData->placeRoomId), _M('Place room id',$module), 10, null, null, null, $module, 'PlaceRoom', null, null, true);
        $placeRoomId->setJsHint(_M('Enter the city exam',$module));
        $fields[]             = $placeRoomId;

        $languageId  = new MLookupTextField('languageId', $this->getFormValue('languageId', $this->inscriptionData->languageId), _M('Language id',$module), 10, null, null, null, $module, 'Language', null, null, true);
        $languageId->setJsHint(_M('Enter the city exam',$module));
        $fields[]             = $languageId;

        $isHighSchool = new MSelection('isHighSchool', $this->getFormValue('isHighSchool', 't'), _M('Is high school',$module), SAGU::listYesNo());
        $fields[]                = $isHighSchool;

        $isInternet = new MSelection('isInternet', $this->getFormValue('isInternet', 'f'), _M('Is internet',$module), SAGU::listYesNo());
        $fields[]                = $isInternet;

        $dateInscription = new MCalendarField('dateInscription', $this->getFormValue('dateInscription', $this->inscriptionData->dateInscription), _M('Date inscription', $module), 13);
        $validators[] = new MDATEDMYValidator('dateInscription', '', '');
        $fields[]               = $dateInscription;

        $totalPoints = new MTextField('totalPoints', $this->getFormValue('totalPoints', $this->inscriptionData->totalPoints), _M('Total points', $module), 13);
        $fields[]               = $totalPoints;

        $isClassified = new MSelection('isClassified', $this->getFormValue('isClassified', 'f'), _M('Is classified',$module), SAGU::listYesNo());
        $fields[]                = $isClassified;
*/
        /*$beginHour = new MTextField('beginHour', $this->getFormValue('beginHour', $data->beginHour), _M('Begin hour',$module), 8);
        $fields[] = $beginHour;*/

 	/*$   	 name = '',
		$  	value = '',
		$  	label = '',
		$  	options = Array('Não','Sim'),
		$  	showValues = false,
		$  	hint = '',
		$  	size = ''*/
        
        $fields[]        = new Separator('');
        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]        = $divError;

        //buttons
        $vars = array ( 'inscriptionData' => urlencode(serialize($this->inscriptionData)) );
        $vars = array ( 'inscriptionData' => urlencode(serialize($this->inscriptionData)), 
                        'function'=>'insert' );
        $prevUrl = $MIOLO->getActionURL($module, $returnTo, null, $vars);
        $btnPrev = new MButton('btnPrev', '<< ' . _M('Previous', $module), $prevUrl);
        $div1       = new MDiv('div1', $btnPrev, null, 'align=center');
        //$div1->addStyle('text-align', 'center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }
        
        $fields[] = new Separator('');

        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( strlen((string)$this->getFormValue('inscription', $data->inscriptionId))>0 || $function != 'insert')
        {
            $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
        }
        elseif ( $function == 'insert' )
        {
            $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();' );
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $vars = array ('function' => 'insert');
        $postAction = substr($action,0,strrpos($action,':')) . ':inscription';
        $this->page->mGoto($MIOLO->getActionURL($module, $postAction, null, $vars));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'inscriptionId' => MIOLO::_request('inscriptionId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusInscription');
        $ok       = $business->deleteInscription($this->inscriptionId->value);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusInscription');

        if ( $function == 'update' )
        {
            $ok  = $business->updateInscription($data);
            $msg = MSG_RECORD_UPDATED;
        }
        else
        {

            $ok  = $business->insertInscription($data);
            $msg = MSG_RECORD_INSERTED;
        }

        if ( $ok )
        {
            $opts = array('inscriptionIdS' => $data->inscriptionId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Information',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'    => 'tbBtnNew_click',
                                 'function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new SprInscription();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        $data->inscriptionDateTime = $this->date->value . ' ' . $this->time->value;

        return $data;
    }

}

?>
