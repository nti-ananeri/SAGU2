<?php

/**
 * Generate contract table form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a generate notes table
 **/
class FrmGenerateContract extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Generate contract', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $orderby  = MIOLO::_request('orderby');

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process',$module).':', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

//         $businessReason = $MIOLO->getBusiness('academic', 'BusReason');
//         $reasons        = $businessReason->listReason();
// 
//         $reasonId = new MSelection('reasonId', $this->getFormValue('reason', $data->reason), _M('Reason', $module), $reasons);
//         $validators[] = new MRequiredValidator('reasonId');
//         $fields[] = $reasonId;

        $fields[] = new MSeparator();
        $fields[] = new MButton('submit_button', _M('Generate', $module));
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

    /**
     * Event triggered when user chooses Submit from form
     **/
    public function submit_button_click($sender=NULL)
    {
        $MIOLO                    = MIOLO::getInstance();
        $module                   = MIOLO::getCurrentModule();
        $action                   = MIOLO::getCurrentAction();

        $selectiveProcessId       = $this->selectiveProcessId->value;
        $reasonId                 = $this->reasonId->value;

        $businessContract         = $MIOLO->getBusiness('academic', 'BusContract');
        $businessMovementContract = $MIOLO->getBusiness('academic', 'BusMovementContract');
        $businessLearningPeriod   = $MIOLO->getBusiness('academic', 'BusLearningPeriod');
        $businessClassification   = $MIOLO->getBusiness($module, 'BusClassification');

        $classified               = $businessClassification->getClassified($selectiveProcessId);

        $businessContract->beginTransaction();

        $countInsertContract = 0;

        if ( count($classified) > 0 )
        {
            foreach( $classified as $c )
            {
                list ( $data->inscriptionSelectiveProcId,
                       $limbo,
                       $limbo,
                       $limbo,
                       $limbo,
                       $data->personId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->periodId) = $c;

                $data->maturityDay             = MATURITY_DAY;
                $data->isListener              = DB_FALSE;
                $data->isRequestAcademicDegree = DB_FALSE;

                $data->formationDate           = NULL;
                $data->formationPeriodId       = NULL;
                $data->conclusionDate          = NULL;
                $data->emendsDate              = NULL;
                $data->diplomaDate             = NULL;

                $data->globalAverage           = NULL;
                $data->obs                     = NULL;
                $data->parcelsNumber           = NULL;

                $contract = $businessContract->searchContract($data);

                if ( !$contract )
                {
                    $ok       = $businessContract->insertContract($data);

                    $learningPeriod = $businessLearningPeriod->searchLearningPeriod($data);

                    $dataMovement->contractId       = $ok;
                    $dataMovement->stateContractId  = WRITING_STATE_CONTRACT;
                    $dataMovement->reasonId         = REASON_ID_WRITING_STATE_CONTRACT;
                    $dataMovement->learningPeriodId = $learningPeriod[0][0];

                    //Currente date
                    $dataMovement->stateTime         = date('d-m-Y G:i:s');

                    $businessMovementContract->insertMovementContract($dataMovement);

                    $countInsertContract++;
                }
            }
        }

        if ( $ok )
        {
            $businessContract->commit();
            $goto = $MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) );

            $opts    = array(
                             'event'    => 'tbBtnNew_click',
                             'function' => 'insert'
                            );

            $caption = _M('Question',$module);
            $msg = $countInsertContract . ' ' . _M('contracts generated',$module) . '!!!';
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('It does not have contracts to be generated.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

    }
}

?>
