<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/05/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the sprInscription table
 */
class FrmListInscriptionBySpecialNecessitySearch extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $this->module = 'basic';
        $module = $this->module;

        parent::__construct(_M('List inscription by special necessity',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->returnTo           = MIOLO::_request('returnTo');
        $filters->returnData         = stripslashes(MIOLO::_request('returnData'));
        $filters->specialNecessityId = MIOLO::_request('specialNecessityId');
        $filters->selectiveProcessId = MIOLO::_request('selectiveProcessId');

        $business = $this->manager->getBusiness($module, 'BusInscription');
        $data     = $business->getInscriptionsBySpecialNecessity($filters);

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $fields[] = new MTextLabel('selectiveProcessId', $filters->selectiveProcessId, _M('Selective process id', $module));
        }
        if ( strlen((string)$filters->specialNecessityId) > 0 )
        {
            $busSpecialNecessity  = $MIOLO->getBusiness('basic', 'BusSpecialNecessity');
            $specialNecessityData = $busSpecialNecessity->getSpecialNecessity($filters->specialNecessityId);
            $fields[] = new MTextLabel('specialNecessityId', $filters->specialNecessityId.' - '.$specialNecessityData->description, _M('Special Necessity', $module));
        }
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdListInscriptionBySpecialNecessitySearch', $filters);
        $grdResults->setData($data);
        $grdResults->setTitle(_M('List inscription details for a specific special necessity', $module));
        $grdResults->setClose(null);
        $fields[] = $grdResults;
 
        if ( strlen((string)$filters->returnTo) > 0 )
        {
            $sepBack = new MSeparator('<hr>');
            $sepBack->setWidth('99%');
            $fields[] = $sepBack;
            
            $btnBack = new MButton('btnBack', _M('Back', $module), $MIOLO->getActionURL($module, $filters->returnTo, null , unserialize(urldecode($filters->returnData))));
            $divBack = new MDiv('divBack', array($btnBack), null, 'align="center"');
            $fields[] = $divBack;
        }
        
        $this->setLabelWidth(FIELD_CONTAINER_SIZE);
        $this->setFields($fields);
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }
}

?>
