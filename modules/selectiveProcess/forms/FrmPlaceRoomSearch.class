<?php

/**
 *
 * This file handles the connection and actions for sprPlaceRoom table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basPlaceRoom table
 */
class FrmPlaceRoomSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Place room', $this->home, 'placeRoom-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $fields[]  = new MHiddenField('placeRoomIdS', $this->getFormValue('placeRoomIdS', $placeRoomIdS));

/*        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Selective process',$module));
        $selectiveProcessLabel->setWidth('70');

        $selectiveProcessIdS  = new MLookupTextField('selectiveProcessIdS', $this->selectiveProcessIdS->value, '', 10, null, null, 'selectiveProcessDescriptionS', $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));

        $selectiveProcessDescriptionS = new MTextField('selectiveProcessDescriptionS', $this->selectiveProcessDescriptionS->value, '', 40);
        $selectiveProcessDescriptionS->setReadOnly(true);
        $selectiveProcessDescriptionS->setJsHint(_M('Selective process description',$module));

        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array( $selectiveProcessLabel, $selectiveProcessIdS, $selectiveProcessDescriptionS) );
        $hctSelectiveProcess->setShowLabel(true);
        $fields[]  = $hctSelectiveProcess; */

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
//         $selectiveProcessIdS->addAttribute('onChange','document.' . $this->getName() . '.submit()' );
        $selectiveProcessIdS->setAutoPostBack(true);
        $fields[]           = $selectiveProcessIdS;
        $validators[] = new MRequiredValidator('selectiveProcessIdS');

        $business = $MIOLO->getBusiness($module,'BusPlaceOccurrence');
        $placeIdS = new MComboBox('placeIdS', $this->placeIdS->value, _M('Place id',$module), $business->listPlaceOccurrence($selectiveProcessIdS->value));
        $fields[] = $placeIdS;

        $roomS = new MTextField('roomS', $this->roomS->value, _M('Room',$module), 8);
        $roomS->setJsHint(_M('Enter the room',$module));
        $fields[] = $roomS;

        $buildS = new MTextField('buildS', $this->buildS->value, _M('Build',$module), 8);
        $buildS->setJsHint(_M('Enter the build',$module));
        $fields[] = $buildS;

        $specialNecessityLabelS = new MText('specialNecessityLabelS', _M('Special necessity',$module) . ':');
        $specialNecessityLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $specialNecessityS = $this->GetFormValue('specialNecessityS',$data->specialNecessityS);
        $specialNecessityS = new MRadioButtonGroup('specialNecessityS', '', SAGU::listYesNo(1), $specialNecessityS, null, 'horizontal');
        $specialNecessityS->SetShowLabel(false);

        $hctSpecialNecessityS = new MHContainer('hctSpecialNecessityS', array($specialNecessityLabelS, $specialNecessityS));
        $fields[]  = $hctSpecialNecessityS;

        $business                = $MIOLO->getBusiness($module,'BusLanguage');
        $languageIdS = new MComboBox('languageIdS', $this->languageIdS->value, _M('Language',$module), $business->listLanguage());
        $fields[]                = $languageIdS;
        $validators[] = new MIntegerValidator('languageIdS', '', 'optional');

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->placeRoomId        = $this->placeRoomIdS->value;
        $filters->selectiveProcessId = $this->selectiveProcessIdS->value;
        $filters->placeId            = $this->placeIdS->value;
        $filters->room               = $this->roomS->value;
        $filters->build              = $this->buildS->value;
        $filters->specialNecessity   = $this->specialNecessityS->value;
        $filters->languageId         = $this->languageIdS->value;

        unset($this->placeRoomIdS->value);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPlaceRoomSearch',$filters);
        $business   = $this->manager->getBusiness($module,'BusPlaceRoom');
        $data       = $business->searchPlaceRoom($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.selectiveProcessIdS.focus();');
        }

    }

}

?>
