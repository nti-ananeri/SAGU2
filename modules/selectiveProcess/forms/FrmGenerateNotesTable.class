<?php

/**
 * Generate notes table form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a generate notes table
 **/
class FrmGenerateNotesTable extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Generate notes table', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $orderby  = MIOLO::_request('orderby');

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module).':', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]     = $selectiveProcessId;
        $validators[] = new MRequiredValidator('selectiveProcessId');

        $student = new MSelection('student', $this->getFormValue('student', ''), _M('Candidate', $module), array('0'=>_M('All', $module), '1'=>_M('Unique', $module)));
        $student->setAutoSubmit(true);
        $fields[] = $student;

        if ( $this->getFormValue('student') == 1 )
        {
            $personLabel  = new MText('personLabel', _M('Person',$module));
            $personLabel->setWidth(FIELD_CONTAINER_SIZE);

            $personId     = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', FIELD_ID_SIZE, null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Enter the person code',$module));
            $validators[] = new MIntegerValidator('personId', '', 'required');

            $personName   = new MTextField('personName', $this->personName->value, '', FIELD_DESCRIPTION_SIZE);
            $personName->setJsHint(_M('Person name',$module));
            $personName->setReadOnly(true);

            $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]     = $hctPerson;

        }

        $fields[] = new MSeparator();
        $fields[] = new MButton('submit_button', _M('Submit', $module));
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }


    /**
     * Event triggered when user chooses Submit from the form
     **/
    public function submit_button_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $selectiveProcessId = $this->selectiveProcessId->value;
        $personId           = $this->personId->value;

        $businessNote = $MIOLO->GetBusiness('selectiveProcess', 'BusNote');

        if ( $businessNote->insertNotesTable($selectiveProcessId, $personId) )
        {
            $msg = _M('Notes table generated with success',$module);
            $goto = $MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) );

            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

    }
}

?>
