<?php

/**
 * Classification form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a classification
 **/
class FrmGeneralClassification extends MForm
{
    private $classifyAllTheCourse = false;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('General classification', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $selectiveProcessId = MIOLO::_request('selectiveProcessId');

        set_time_limit(0);

        $businessSelectiveProcess = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $selectiveProcessId       = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $selectiveProcessId), _M('Selective process', $module), $businessSelectiveProcess->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code', $module));
//         $selectiveProcessId->setAutoPostBack(true);
        $fields[]            = $selectiveProcessId;
        $validators[]        = new MRequiredValidator('selectiveProcessId');

        $selectiveProcessIdData  = $this->getFormValue('selectiveProcessId');

        $btnClassifyAllTheCourse = new MButton('btnGeneralClassification',_M('General classification',$module));
        $btnClassifyAllTheCourse->attachEventHandler('click', 'tbBtnGeneralClassification_click', true);
        $fields[] = $btnClassifyAllTheCourse;
        $fields[] = new MSeparator();

        $this->setFields($fields);

        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnGeneralClassification_click($sender=NULL, $classifyAllTheCourse=false)
    {
        $MIOLO                       = MIOLO::getInstance();
        $module                      = MIOLO::getCurrentModule();
        $action                      = MIOLO::getCurrentAction();
        $filters->selectiveProcessId = MIOLO::_request('selectiveProcessId');

        $businessClassification = $MIOLO->GetBusiness($module, 'BusClassification');

        //gera a pontuacao total dos candidatos e retorna as inscricoes dos mesmos
        $inscriptions = $businessClassification->generatePositionGeneral($filters);

        if ( $inscriptions && count($inscriptions) > 0 )
        {
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdClassificationReport');

            $inscriptionsPosition = $businessClassification->getGeneralPosition($filters->selectiveProcessId);

            $grdResults->setData($inscriptionsPosition);

            //###GRID///is_array($data) ? $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

            $fields[] = $grdResults;

            $this->setFields($fields);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}

?>
