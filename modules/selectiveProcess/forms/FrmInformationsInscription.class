<?php

/**
 * Inscription form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmInformationsInscription extends MForm
{
    private $inscriptionData;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $this->inscriptionData = unserialize(urldecode(stripslashes($MIOLO->session->getValue('inscriptionData'))));
        parent::__construct(_M('Step', $module) . ' 2 ' . _M('of', $module) .  ' '.$this->inscriptionData->stepTotal.' -> ' . _M('Informations', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fontText = new MText('fontText', "<font color=" . INSCRIPTION_TEXT_COLOR . ">");
        $fields[] = $fontText;

        $busCompany     = $MIOLO->getBusiness('basic', 'BusCompany');
        $company        = $busCompany->getCompany(DEFAULT_COMPANY_CONF);

        $busLegalPerson = $MIOLO->getBusiness('basic', 'BusLegalPerson');

        $legalPerson    = $busLegalPerson->getLegalPerson($company->personId);

        //Dados que serão subistuídos se encontrados nos corpos das mensagens
        $searchData  = array( "\$LEGAL_PERSON_NAME",
                              "\$LEGAL_PERSON_PHONE" );

        //Dados que substituirã os corpos das mensagens
        $replaceData = array( $legalPerson->name,
                              $legalPerson->phone );

        $msgInscriptionText = str_replace($searchData, $replaceData, $this->inscriptionData->message->messageInformationInscription);

        $btnNext = new MButton('btnNext',_M('Step',$module).' 3 >>');
        $btnNext->attachEventHandler('click', 'tbBtnNext_click', true);

        $btnBack = new MButton('btnBack', '<< ' . _M('Step',$module) . ' 1');
        $btnBack->attachEventHandler('click', 'tbBtnBack_click', true);

        $separator = new Separator('');

        $div1       = new MDiv('div1', array($btnBack, $btnNext), null, 'align=center');

        $msgInscription     = new MText('msgInscription', $msgInscriptionText);

        $cntInscription     = new MHContainer('cntInscription', array($msgInscription, $div1, $separator, $separator));

        $cntInscription->addBoxStyle('background', 'white');
        $cntInscription->setDisposition('center');

        $fields[] = $cntInscription;


        $fields[] = new Separator('');

        $fontText1 = new MText('fontText1', "</font>");
        $fields[] = $fontText1;

        $this->setFields($fields);

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnNext_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array('page' => '5');  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

    /**
     * Event triggered when user click next
     **/
    public function tbBtnBack_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array('page' => '2');  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }
}

?>
