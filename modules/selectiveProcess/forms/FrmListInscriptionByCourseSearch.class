<?php

/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the sprInscription table
 */
class FrmListInscriptionByCourseSearch extends MForm
{
    private $module;

    /**
     * Class constructor
     */
    function __construct()
    {
        $this->module = MIOLO::getCurrentModule();
        $module = $this->module;

        parent::__construct(_M('List inscription',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->returnTo           = MIOLO::_request('returnTo');
        $filters->returnData         = stripslashes(MIOLO::_request('returnData'));
        $filters->courseId           = MIOLO::_request('courseId');
        $filters->turnId             = MIOLO::_request('turnId');
        $filters->cityExam           = MIOLO::_request('cityExam');
        $filters->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $filters->optionNumber       = MIOLO::_request('optionNumber');
        $filters->placeRoomId        = MIOLO::_request('placeRoomId');
        $filters->unitId             = MIOLO::_request('unitId');
        $business = $this->manager->getBusiness($module, 'BusInscription');
        $data     = $business->searchInscriptionGrid($filters);
        
        // Course id
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $fields[] = new MTextLabel('course', $filters->courseId.' - '.$data[0][12], _M('Course', $module));
        }
        // Unit id
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $fields[] = new MTextLabel('unitDescription', $filters->unitId.' - '.$data[0][16],_M('Unit description', $module));
        }
        // Selective process id
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $fields[] = new MTextLabel('selectiveProcessId', $filters->selectiveProcessId, _M('Selective process id', $module));
        }
        if ( strlen((string)$filters->cityExam) > 0 )
        {
            $fields[] = new MTextLabel('cityExam', $data[0][6], _M('City exam', $module));
        }

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdListInscriptionByCourseSearch',$filters);
        $grdResults->setData($data);

        $fields[] = $grdResults;
 
        if ( strlen((string)$filters->returnTo) > 0 )
        {
            $sep1 = new MSeparator('<hr>');
            $sep1->setWidth('99%');
            $fields[] = $sep1;
            $urlBack = $MIOLO->getActionURL($module, $filters->returnTo, null , array_merge(unserialize(urldecode($filters->returnData)), array('event'=>'btnGenerate_click')));
            $btnBack = new MButton('btnBack', _M('Back', $module), $urlBack);
            $divBack = new MDiv('divBack', array($btnBack), null, 'align="center"');
            $fields[] = $divBack;
        }

        $this->setFields($fields);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }
}

?>
