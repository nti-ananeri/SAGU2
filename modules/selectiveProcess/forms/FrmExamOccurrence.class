<?php

/**
 * Exam occurrence form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmExamOccurrence extends MForm
{

    /**
     * Class constructor
     **/
    function __construct()
    {

        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Insert', $module));
        }
        else
        {
            parent::__construct(_M('Update', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
            $toolBar->disableButton('tbBtnPrint');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $fields[] = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $examOccurrenceId = $_GET['examOccurrenceId'] ? $_GET['examOccurrenceId'] : $_POST['examOccurrenceId'];
            $fields[]         = new MTextLabel('examOccurrenceId', $examOccurrenceId, _M('Exam occurrence id',$module));
            $fields[]         = new MHiddenField('examOccurrenceId', $examOccurrenceId);

            $business = $MIOLO->getBusiness($module,'BusExamOccurrence');
            $data     = $business->getExamOccurrence($examOccurrenceId);
            list ( $data->date, $data->time ) = explode(' ',$data->examDateTime,2);
        }

        //$selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), 10, null, null, 'selectiveProcessDescription, selectiveProcessTypeId, selectiveProcessTypeDescription', $module, 'SelectiveProcessOccurrence', null, null, true);
        //$selectiveProcessId = new MTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), 10);
        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        //$selectiveProcessId->addAttribute('onBlur','document.' . $this->getName() . '.submit()' );
//         $selectiveProcessId->setAutoPostBack(true);
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

        $selectiveProcessId->setAutoPostBack(true);

        //$selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), _M('Description',$module), 20);
        //$selectiveProcessDescription->setReadOnly(true);
        //$fields[]                    = $selectiveProcessDescription;

        //$business               = $MIOLO->getBusiness($module,'BusSelectiveProcessOccurrence');
        //$selectiveProcessTypeId = new MSelection('selectiveProcessTypeId', $this->getFormValue('selectiveProcessTypeId', $data->selectiveProcessTypeId), _M('Type',$module), $business->listSelectiveProcessOccurrenceType($this->getFormValue('selectiveProcessId', $data->selectiveProcessId)));
        if ( strlen((string)$selectiveProcessId->value) > 0 )
        {
            $business               = $MIOLO->getBusiness($module,'BusSelectiveProcessType');
            $selectiveProcessTypeId = new MComboBox('selectiveProcessTypeId', $this->getFormValue('selectiveProcessTypeId', $data->selectiveProcessTypeId), _M('Type id',$module), $business->listSelectiveProcessTypeToSelectiveProcessId($selectiveProcessId->value));
            $selectiveProcessTypeId->setJsHint(_M('Enter the process type code',$module));
            $fields[]               = $selectiveProcessTypeId;
            $validators[]           = new MRequiredValidator('selectiveProcessTypeId');

            $selectiveProcessTypeId->setAutoPostBack(true);
        }


//         $businessExamOccurrence     = $MIOLO->getBusiness($module,'BusExamOccurrence');
//         $examId       = new MComboBox('examId', $this->getFormValue('examId', $data->examId), _M('Exam id',$module), $businessExamOccurrence->listExamOccurrence($selectiveProcessId->value));
//         $fields[]     = $examId;
//         $validators[]           = new MRequiredValidator('examId');

        $businessExam     = $MIOLO->getBusiness($module,'BusExam');

        $examId       = new MComboBox('examId', $this->getFormValue('examId', $data->examId), _M('Exam id',$module), $businessExam->listExam());
        $examId->setJsHint(_M('Enter the exam code',$module));
        $fields[]     = $examId;
        $validators[]           = new MRequiredValidator('examId');

        $isAnswerSheetLabel = new MText('isAnswerSheetLabel', _M('Is answer sheet',$module).':');
        $isAnswerSheetLabel->setWidth(FIELD_LABEL_SIZE);
        $isAnswerSheetLabel->setClass('m-caption m-caption-required');

        $isAnswerSheet = $this->GetFormValue('isAnswerSheet', $data->isAnswerSheet);
        if ( ! isset($isAnswerSheet) )
        {
            $isAnswerSheet = 'f';
        }

        $isAnswerSheet = new MRadioButtonGroup('isAnswerSheet', '', SAGU::listYesNo(1), $isAnswerSheet, null, 'horizontal');
        $isAnswerSheet->setJsHint(_M('Will this exam be printed on the answer sheet?', $module));
        $isAnswerSheet->SetShowLabel(false);

        $hctIsAnswerSheet = new MHContainer('hctIsAnswerSheet', array($isAnswerSheetLabel, $isAnswerSheet));
        $fields[]  = $hctIsAnswerSheet;

        $numberQuestions = new MTextField('numberQuestions', $this->getFormValue('numberQuestions', $data->numberQuestions), _M('Number questions',$module), 7);
        $numberQuestions->setJsHint(_M('Enter the exam number of questions',$module));
        $fields[]           = $numberQuestions;
        $validators[] = new MIntegerValidator('numberQuestions', '', 'required');

        $weightQuestion = new MTextField('weightQuestion', $this->getFormValue('weightQuestion', $data->weightQuestion), _M('Weight question',$module), 7);
        $weightQuestion->setJsHint(_M('Enter the weight of each question for this exam',$module));
        $fields[]     = $weightQuestion;
        $validators[] = new MFloatValidator('weightQuestion', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'required');

        $numberOrder  = new MTextField('numberOrder', $this->getFormValue('numberOrder', $data->numberOrder), _M('Number order',$module), 7);
        $numberOrder->setJsHint(_M('Enter the exam number of order',$module));
        $fields[]           = $numberOrder;
        $validators[] = new MIntegerValidator('numberOrder', '', 'required');

        $examDate     = new MCalendarField('examDate', $this->getFormValue('examDate', $data->examDate), _M('Date',$module), FIELD_DATE_SIZE);
        $examDate->setJsHint(_M('Enter the exam date',$module));
        $examDate->setValidator(new MDATEDMYValidator('examDate', _M('Date',$module), 'required'));
        $fields[]     = $examDate;

        $examTime = new MTextField('examTime', $this->getFormValue('examTime', $data->examTime), _M('Time',$module), FIELD_TIME_SIZE, 'HH:mm');
        $examTime->setJsHint(_M('Enter the exam time',$module));
        $fields[]           = $examTime;
        $validators[]       = new MTimeValidator('examTime','','required');

        $maximumPoints = new MTextField('maximumPoints', $this->getFormValue('maximumPoints', $data->maximumPoints), _M('Maximum points',$module), FIELD_TIME_SIZE, _M('Maximum points possible to this exam occurrence', $module));
        $maximumPoints->setJsHint(_M('Enter the maximum points possible',$module));
        $fields[]           = $maximumPoints;
        $validators[] = new MFloatValidator('maximumPoints', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE , 'required');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Last modification',$module));
        }

        $fields[] = new Separator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ( strlen((string)$this->getFormValue('selectiveProcessId', $data->selectiveProcessId))>0 || $function != 'insert')
        {
            $this->page->onLoad('document.' . $this->name . '.selectiveProcessTypeId.focus();');
        }
        elseif ( $function == 'insert' )
        {
            $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();' );
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'examOccurrenceId' => MIOLO::_request('examOccurrenceId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = _M(MSG_CONFIRM_RECORD_DELETE,$module);
        $caption = _M('Question',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $MIOLO->getBusiness($module, 'BusExamOccurrence');
        $ok       = $business->deleteExamOccurrence($this->examOccurrenceId->value);

        if ( $ok )
        {
            $msg  = _M(MSG_RECORD_DELETED,$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Information',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $MIOLO->getBusiness($module, 'BusExamOccurrence');

        if ( $function == 'update' )
        {
            $ok  = $business->updateExamOccurrence($data);
            $msg = _M(MSG_RECORD_UPDATED,$module);
        }
        else
        {
            $ok  = $business->insertExamOccurrence($data);
            $msg = _M(MSG_RECORD_INSERTED,$module);
        }

        if ( $ok )
        {
            $opts = array('examOccurrenceIdS' => $data->examOccurrenceId);

            if ( $function == 'update' )
            {
                $caption = _M('Information', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Question',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Error executing requested operation.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new SprExamOccurrence();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }

        $data->examDateTime = $this->examDate->value . ' ' . $this->examTime->value;

        return $data;
    }
}

?>
