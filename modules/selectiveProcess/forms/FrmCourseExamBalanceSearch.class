<?php

/**
 *
 * This file handles the connection and actions for sprCourseExamBalance table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 24/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the basCourseExamBalance table
 */
class FrmCourseExamBalanceSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Course exam balance', $this->home, 'courseExamBalance-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessIdS;

        $courseLabel = new MText('courseLabel', _M('Course',$module).':');
        $courseLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseId  = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', FIELD_LOOKUPFIELD_SIZE, null, null,('courseVersion, courseName, unitId, unitDescription, turnId, turnDescription'), 'academic', 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());

        $courseId->setJsHint(_M('Enter the course code',$module));

        $courseName  = new MTextField('courseName', strlen((string)$data->courseName) > 0 ? $data->courseName : $this->getFormValue('courseName', $data->courseName), '', FIELD_DESCRIPTION_SIZE);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Course name',$module));

        $courseVersion  = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_SIZE);
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Course version',$module));

        $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseId, $courseVersion, $courseName) );
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $turnLabel = new MText('turnLabel', _M('Turn',$module).':');
        $turnLabel->setWidth(FIELD_CONTAINER_SIZE);

        $turnId  = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', FIELD_LOOKUPFIELD_SIZE);
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Turn id',$module));
        $validators[] = new MIntegerValidator('turnId', _M('Turn', $module), 'optional');
        
        $turnDescription  = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', FIELD_DESCRIPTION_SIZE);
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Turn description',$module));

        $hctTurn = new MHContainer('hctTurn', array( $turnLabel, $turnId, $turnDescription) );
        $hctTurn->setShowLabel(true);
        $fields[]  = $hctTurn;

        $unitLabel = new MText('unitLabel', _M('Unit',$module).':');
        $unitLabel->setWidth(FIELD_CONTAINER_SIZE);
        
        $unitId  = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', FIELD_LOOKUPFIELD_SIZE);
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Unit id',$module));
        $validators[] = new MIntegerValidator('unitId', _M('Unit', $module), 'optional');
        
        $unitDescription  = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', FIELD_DESCRIPTION_SIZE);
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Unit description',$module));
        
        $hctUnit = new MHContainer('hctUnit', array( $unitLabel, $unitId, $unitDescription) );
        $hctUnit->setShowLabel(true);
        $fields[]  = $hctUnit;

        $examOccurrenceLabel = new MText('examOccurrenceLabel', _M('Exam occurrence id',$module) . ':');
        $examOccurrenceLabel->setWidth(FIELD_CONTAINER_SIZE);

        $examOccurrenceIdS = new MLookupTextField('examOccurrenceIdS', $this->getFormValue('examOccurrenceIdS', $data->examOccurrenceIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('limbo, limbo, limbo, limbo, limbo, examDescription') , $module, 'ExamOccurrence', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $examOccurrenceIdS->setJsHint(_M('Enter the exam occurrence code',$module));
        $validators[] = new MIntegerValidator('examOccurrenceIdS', '', 'optional');

        $examDescription  = new MTextField('examDescription', $this->getFormValue('examDescription', $data->$examDescription), '', FIELD_DESCRIPTION_SIZE);
        $examDescription->setReadOnly(true);
        $examDescription->setJsHint(_M('Exam occurrence description',$module));

        $hctExamOccurrence = new MHContainer('hctExamOccurrence', array( $examOccurrenceLabel, $examOccurrenceIdS, $examDescription) );
        $hctExamOccurrence->setShowLabel(true);
        $fields[]  = $hctExamOccurrence;


        $courseVacantLabel = new MText('courseVacantLabel', _M('Vacancy',$module) . ':');
        $courseVacantLabel->setWidth(FIELD_CONTAINER_SIZE);

        $courseVacantIdS  = new MLookupTextField('courseVacantIdS', $this->courseVacantIdS->value, '', FIELD_LOOKUPFIELD_SIZE, null, null,
                'limbo,limbo,vacant,CourseVacantDescription' , $module,'CourseVacant', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $courseVacantIdS->setJsHint(_M('Enter the vacancy code',$module));
        $validators[] = new MIntegerValidator('courseVacantIdS', '', 'optional');

        $CourseVacantDescription  = new MTextField('CourseVacantDescription', $this->getFormValue('CourseVacantDescription', $data->CourseVacantDescription), '', FIELD_DESCRIPTION_SIZE);
        $CourseVacantDescription->setReadOnly(true);
        $CourseVacantDescription->setJsHint(_M('Vacancy description',$module));

        $vacant  = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), '', 10);
        $vacant->setReadOnly(true);
        $vacant->setJsHint(_M('Vacancy number',$module));

        $hctVacant = new MHContainer('hctVacant', array( $courseVacantLabel, $courseVacantIdS, $CourseVacantDescription, $vacant) );
        $hctVacant->setShowLabel(true);
        $fields[]  = $hctVacant;

        $weightS  = new MTextField('weightS', $this->getFormValue('weightS', $data->weightS), _M('Weight', $module), 8);
        $fields[]             = $weightS;
        $validators[] = new MFloatValidator('weightS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');


        $minimunNoteS  = new MTextField('minimunNoteS', $this->getFormValue('minimunNoteS', $data->minimunNoteS), _M('Minimun note', $module), 8);
        $fields[]             = $minimunNoteS;
        $validators[] = new MFloatValidator('minimunNoteS', '', FLOAT_SEPARATOR, REAL_ROUND_VALUE, 'optional');


        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->selectiveProcessId     = $this->selectiveProcessIdS->value;
        $filters->examOccurrenceId       = $this->examOccurrenceIdS->value;
        $filters->courseVacantId         = $this->courseVacantIdS->value;
        $filters->weight                 = $this->weightS->value;
        $filters->minimunNote            = $this->minimunNoteS->value;

        $filters->courseId               = $this->courseId->value;
        $filters->courseVersion          = $this->courseVersion->value;
        $filters->turnId                 = $this->turnId->value;
        $filters->unitId                 = $this->unitId->value;

        $grdResults = $MIOLO->getUI()->getGrid ($module, 'GrdCourseExamBalanceSearch', $filters);
        $business   = $this->manager->getBusiness($module,'BusCourseExamBalance');
        $data       = $business->searchCourseExamBalance($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ?  $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
