<?php

/**
 * Inscription form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/07/2006
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or
http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a selectiveProcessOccurrence
 **/
class FrmSocialEconomicInscription extends MForm
{
    var $inscriptionData;
    var $optionsNumber;
    var $othersSelectiveProcessNumbers;
    /**
     * Class constructor
     **/
    function __construct()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->inscriptionData = unserialize(urldecode(stripslashes($MIOLO->session->getValue('inscriptionData'))));

        if ( count($this->inscriptionData->selectiveProcessTypeData) > 0 )
        {
            parent::__construct(_M('Step', $module) . ' 6 ' . _M('of', $module) .  ' '.$this->inscriptionData->stepTotal.' -> ' . _M('Informations', $module));
        }
        else
        {
            parent::__construct(_M('Step', $module) . ' 5 ' . _M('of', $module) .  ' '.$this->inscriptionData->stepTotal.' -> ' . _M('Informations', $module));
        }

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        set_time_limit(0);

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $separator = new Separator('');

        $fontText  = new MHiddenField('fontText',  "<font color=" . INSCRIPTION_TEXT_COLOR . ">");
        $fontText1 = new MHiddenField('fontText1', "</font>");
        $fontSize3 = new MHiddenField('fontText3', "<font size=3>");

        $head2     = new MText('head2',      "<h6>");
        $closeHead2= new MText('closeHead2', "</h6>");

        $fields[] = $fontText;

        $filters->formId = FORM_INSCRIPTION_ID;

        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');
        $flds[]          = $divError;

        $businessForm            = $MIOLO->getBusiness('research','BusForm');
        $businessQuestions       = $MIOLO->getBusiness('research', 'BusQuestion');
        $businessOption          = $MIOLO->getBusiness('research', 'BusOption');

        $socialEconomicForm      = $businessForm->getForm(FORM_INSCRIPTION_ID);
        $socialEconomicQuestions = $businessQuestions->searchQuestion($filters);

        $auxSocialEconomicQuestion = 0;  //Contador para a quantidade de questões do formulário
        if ( count($socialEconomicQuestions) > 0 )
        {
            foreach($socialEconomicQuestions as $socialEconomicQuestion)  //Laço para cada questão
            {
                $filters2->questionId           = $socialEconomicQuestion[0];
                $socialEconomicQuestionsOptions = $businessOption->searchOption($filters2);

                eval('$question'.$socialEconomicQuestions[0].' = new MText(\'question'.$socialEconomicQuestions[0].'\', $auxSocialEconomicQuestion + 1 . \' - \' . $socialEconomicQuestion[1]); ');

                $auxSocialEconomicQuestion++;

                eval('$flds[] = $question'.$socialEconomicQuestions[0].';');

                $flds[] = $separator;

                $choicesResult = array();
                $choicesWhith  = array();

                $numberChoices = count($socialEconomicQuestionsOptions);

                //array com as possíveis respostas

                if ( count($socialEconomicQuestionsOptions) > 0 )
                {
                    foreach ( $socialEconomicQuestionsOptions as $socialEconomicQuestionsOption )
                    {
                        eval('$choices'.$socialEconomicQuestion[0].'[] = array(  \''.$socialEconomicQuestionsOption[3].'\' , \''.$socialEconomicQuestionsOption[0].'\');');
                    }
                }

                //se for uma questão de escolha única
                if ( $socialEconomicQuestion[2] == DB_FALSE )
                {
                    if ( $numberChoices > 0 )
                    {
                        if( $numberChoices < 7 )
                        {
                            eval('$rdChoices'.$socialEconomicQuestion[0].' = new MRadioButtonGroup(\'rdChoices'.$socialEconomicQuestion[0].'\', \'\', $choices'.$socialEconomicQuestion[0].', $this->getFormValue(\'rdChoices'.$socialEconomicQuestion[0].'\', $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId), \'horizontal\');');

                            eval('$rdChoices'.$socialEconomicQuestion[0].'->setShowLabel(false);');

                            //if se tem apenas uma opçao de resposta
                            if ( $numberChoices == 1 )
                            {
                                eval('
                                        $rdChoices'.$socialEconomicQuestion[0].'->setValue($choices'.$socialEconomicQuestion[0].'[0][1]);
                                     ');
                            }

                            eval('$flds[] = $rdChoices'.$socialEconomicQuestion[0].';');

                            eval('$this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId = $rdChoices'.$socialEconomicQuestion[0].'->value;');
                        }
                        else
                        {
                            $auxQuestionsUse2;
                            $countAuxQuestionsUse2 = 0;
                            eval('foreach($choices'.$socialEconomicQuestion[0].' as $auxQuestionUse) 
                                {
                                    $auxQuestionsUse2 = $auxQuestionUse[1];
                                    $choices'.$socialEconomicQuestion[0].'[$countAuxQuestionsUse2][1] = $choices'.$socialEconomicQuestion[0].'[$countAuxQuestionsUse2][0];
                                    $choices'.$socialEconomicQuestion[0].'[$countAuxQuestionsUse2][0] = $auxQuestionsUse2;
                                    unset($auxQuestionsUse2);
                                    $countAuxQuestionsUse2++;
                                }
                                ');

                            eval('$cbChoices'.$socialEconomicQuestion[0].' = new MComboBox(\'cbChoices'.$socialEconomicQuestion[0].'\', $this->getFormValue(\'cbChoices'.$socialEconomicQuestion[0].'\', $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId), \'\', $choices'.$socialEconomicQuestion[0].');');

                            eval('$flds[] = $cbChoices'.$socialEconomicQuestion[0].';');

                            eval('$this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId = $cbChoices'.$socialEconomicQuestion[0].'->value;');
                        }
                    }
                }
                else //se for uma questão de múltipla escolha
                {
                    //Codigo que utiliza checkBox
                    //begin

                    //Codigo da questao
                    $questionId   = $socialEconomicQuestion[0];

                    //todas opçoes da questao estao nesta variavel
                    $choicesTotal = ${'choices'.$questionId};

                    //Object question
                    $questionAux  = $this->inscriptionData->answer->{'o'. $questionId};

                    //Numero de opçoes
                    $countOptions[$questionId] = count($questionAux->optionId);

                    if ( is_array($choicesTotal) && (count($choicesTotal)>0) )
                    {
                        //Laço para cada uma das opçoes possiveis
                        foreach ( $choicesTotal as $choice )
                        {
                            $choiceVar          = 'choice_' . $questionId . '_' . $choice[1];

                            //For para ver se cada uma das opçoes possiveis de resposta
                            //ja estao respondidas ou nao
                            for ( $i = 0; $i < $countOptions[$questionId]; $i++ )
                            {
                                if ( $questionAux->optionId[$i] == $choice[1])
                                {
                                    //questao que ja foi respondida anteriormente, e igual a esta
                                    //que sera impressa na tela. Armazenar na variavel este valor
                                    ${$choiceVar} = $choice[1];
                                }
                            }

                            $choiceGetFormValue = $this->getFormValue($choiceVar, ${$choiceVar});

                            ${$choiceVar}       = new MCheckBox($choiceVar,
                                                                $choice[1],
                                                                '',
                                                                $choiceGetFormValue,
                                                                $choice[0]);
                            $flds[]             = ${$choiceVar};
                        }
                    }

                    //Codigo quer utiliza Multi-Selection
                    //begin
//                     eval('$a = $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId;
//                     if ( is_array($a) )
//                     {
//                         $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId = $a;
//                     }');
// 
//                     eval('if ( !is_array($this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId) )
//                           {
//                               $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId = array();
//                           }');
// 
//                     eval('$auxChoices = $choices'.$socialEconomicQuestion[0].';');
// 
//                     foreach ( $auxChoices as $key1 => $value1 )
//                     {
//                         $auxChoices1       = $value1[1];
//                         $value1[1]         = $value1[0];
//                         $value1[0]         = $auxChoices1;
// 
//                         $auxChoices[$key1] = $value1;
//                     }
// 
//                     eval('$rdChoices'.$socialEconomicQuestion[0].' = new MMultiSelection(\'rdChoices'.$socialEconomicQuestion[0].'\', is_array($this->getFormValue(\'rdChoices'.$socialEconomicQuestion[0].'\', $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId)) ? $this->getFormValue(\'rdChoices'.$socialEconomicQuestion[0].'\', $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId) : $this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId, \'\', $auxChoices, true, null, 5);');
// 
//                     eval('$flds[] = $rdChoices'.$socialEconomicQuestion[0].';');
//                     eval('$this->inscriptionData->answer->o'.$socialEconomicQuestion[0].'->optionId = $rdChoices'.$socialEconomicQuestion[0].'->value;');

                    //end
                    //Codigo quer utiliza Multi-Selection
                }
            }
        }

        $flds[] = $separator;

        $btnBack   = new MButton('btnBack', '<< '. _M('Step', $module) . ' 5');
        $btnSave   = new MButton('btnSave', _M('Save inscription', $module));

        $div1     = new MDiv('div1', array($btnBack, $btnSave), null, 'align=center');

        $flds[] = $separator;
        $flds[] = $div1;
        $flds[] = $separator;

        $flds[] = $fontText1;

        $cntInscription     = new MHContainer('cntInscription', $flds);

        $cntInscription->addBoxStyle('background', 'white');
        $cntInscription->addBoxStyle('color', INSCRIPTION_TEXT_COLOR);
        $cntInscription->setDisposition('center');

        $fields[] = $cntInscription;

        $fields[] = new Separator('');

        $this->setFields($fields);

        //Este codigo vai depois do setFields porque e checkBox
        if ( count($socialEconomicQuestions) > 0 )
        {
            foreach($socialEconomicQuestions as $socialEconomicQuestion)  //Laço para cada questão
            {
                //se for uma questão multipla
                if ( $socialEconomicQuestion[2] == DB_TRUE )
                {
                    $questionId = $socialEconomicQuestion[0];

                    //unset($this->inscriptionData->answer->{'o'. $questionId}->optionId);
                    $this->inscriptionData->answer->{'o'. $questionId}->optionId = NULL;
                    $choicesTotal = ${'choices'.$questionId};

                    //Object question
                    $questionAux  = $this->inscriptionData->answer->{'o'. $questionId};

                    //Numero de opçoes
                    $countOptions[$questionId] = count($questionAux->optionId);

                    if ( is_array($choicesTotal) && (count($choicesTotal)>0) )
                    {
                        //Laço para cada uma das opçoes possiveis
                        foreach ( $choicesTotal as $choice )
                        {
                            $choiceVar          = 'choice_' . $questionId . '_' . $choice[1];
                            if ( ${$choiceVar}->checked )
                            {
                                $this->inscriptionData->answer->{'o'. $questionId}->optionId[] = ${$choiceVar}->value;
                            }
                        }
                    }
                }
            }
        }

        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);

        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,': '))));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnSave_click($sender = null)
    {
        $MIOLO                         = MIOLO::getInstance();
        $module                        = MIOLO::getCurrentModule();
        $action                        = MIOLO::getCurrentAction();

        $businessInscriptionWeb        = $MIOLO->getBusiness($module, 'BusInscriptionWeb');
        $businessCourseOccurence       = $MIOLO->getBusiness($module, 'BusCourseOccurrence');

        $businessPerson                = $MIOLO->getBusiness('basic', 'BusPerson');
        $businessPhysicalPerson        = $MIOLO->getBusiness('basic', 'BusPhysicalPerson');
        $businessPhysicalPersonStudent = $MIOLO->getBusiness('basic', 'BusPhysicalPersonStudent');

        $businessDocument              = $MIOLO->getBusiness('basic', 'BusDocument');
        $businessInscription           = $MIOLO->getBusiness($module, 'BusInscription');
        $businessInscriptionOption     = $MIOLO->getBusiness($module, 'BusInscriptionOption');
        $businessCourseOccurrence      = $MIOLO->getBusiness($module, 'BusCourseOccurrence');

        $businessNote                  = $MIOLO->getBusiness($module, 'BusNote');

        $businessTypeData              = $MIOLO->getBusiness($module, 'BusSelectiveProcessTypeData');

        $businessAnswer                = $MIOLO->getBusiness('research', 'BusAnswer');

        $businessExamOccurrence        = $MIOLO->getBusiness($module, 'BusExamOccurrence');

        $businessCVSLog                = $MIOLO->getBusiness('basic', 'BusCvsLog');
        $businessCourse                = $MIOLO->getBusiness('academic', 'BusCourse');

        $businessReceivableInvoice     = $MIOLO->getBusiness('finance', 'BusReceivableInvoice');
        $businessInvoice               = $MIOLO->getBusiness('finance', 'BusInvoice');
        $businessEntry                 = $MIOLO->getBusiness('finance', 'BusEntry');
        $businessCourseAccount         = $MIOLO->getBusiness('accountancy', 'BusCourseAccount');

        $businessInscriptionSetting    = $MIOLO->getBusiness($module, 'BusInscriptionSetting');
        $businessDefaultOperations     = $MIOLO->getBusiness('finance', 'BusDefaultOperations');
        $businessOperation             = $MIOLO->getBusiness('finance', 'BusOperation');
		//create an array with all person attributes
        $person1 = new BasPerson();
        $vars2  = get_object_vars($person1);
        $vars2  = array_keys($vars2);

        //create an array with all document attributes
        $documentAux1 = new BasDocument();
        $vars3        = get_object_vars($documentAux1);
        $vars3        = array_keys($vars3);

        //create cvsLog object
        $cvsLog                 = new BasCvsLog();

        $this->inscriptionData->physicalPersonStudent->personId = $this->inscriptionData->physicalPerson->personId;

        //Alimenta os vetores para inserção a priori

        foreach ( $this->inscriptionData as $key1 => $value1 )
        {
            if ( $key1 == "physicalPerson" )
            {
                $physicalPerson = $value1;
            }
            elseif ( $key1 == "document" )
            {
                $document = $value1;
            }
            elseif ( $key1 == "inscription" )
            {
                $inscription = $value1;
            }
            elseif ( $key1 == "physicalPersonStudent" )
            {
                $physicalPersonStudent = $value1;
            }
            elseif ( $key1 == "inscriptionOption" )
            {
                $inscriptionOption = $value1;
            }
            elseif ( $key1 == "selectiveProcessTypeData" )
            {
                $selectiveProcessTypeData = $value1;
            }
            elseif ( $key1 == "answer" )
            {
                $answer = $value1;
            }
        }

        $businessInscriptionWeb->beginTransaction();

        if ( strlen((string)$physicalPerson->personId) > 0 ) //pessoa física já está cadastrada
        {
            $personAux = $businessPhysicalPerson->getPhysicalPerson($physicalPerson->personId);

            $businessPhysicalPerson->db = $businessInscriptionWeb->db;
            $ok3 = $businessPhysicalPerson->updatePhysicalPerson($physicalPerson);

            $businessPerson->db = $businessInscriptionWeb->db;
            $businessPerson->updatePerson($physicalPerson);

            $businessCVSLog->db = $businessInscriptionWeb->db;

            if ( $ok3 == true )
            {
                $cvsLog->tablePkey      = 'personId';
                $cvsLog->tablePkeyValue = $physicalPerson->personId;

                $vars = get_object_vars($physicalPerson);

                foreach ( $vars as $var => $value )
                {
                    if ( strtoupper($physicalPerson->$var) != $personAux->$var )
                    {
                        if ( in_array($var, $vars2) )
                        {
                            $cvsLog->tableName = 'basPerson';
                        }
                        else
                        {
                            $cvsLog->tableName = 'basPhysicalPerson';
                        }

                        $cvsLog->fieldName = $var;
                        $cvsLog->oldValue  = $personAux->$var;

                        //save the logs

                        $ok4 = $businessCVSLog->insertCvsLog($cvsLog);

                        if ( $ok4 != true )
                        {
                            $ok3 = false;
                        }
                    }
                }

                if ( $ok3 == false)
                {
                    $msg           = _M('Incorrect data',$module);

                    $lblMsg        = new MText('lblMsg',$msg);
                    $lblMsg->color = 'red';

                    $flds[]        = $lblMsg;
                    $flds[]        = new Separator('');

                    $this->divError->addControl($flds);
                }
            }
        }
        else //pessoa física NÃO está cadastrada fazer os inserts necessários
        {
            $physicalPerson->isAllowPersonalData = DB_TRUE;

            $businessPhysicalPerson->db = $businessInscriptionWeb->db;
            $ok1 = $businessPhysicalPerson->insertPhysicalPerson($physicalPerson);

            if ( $ok1 ) //Inseriu a pessoa, e preciso pegar o código dela
            {
                $personInserted = $businessPhysicalPerson->searchPhysicalPerson($physicalPerson);
                $this->inscriptionData->physicalPersonStudent->personId = $personInserted[0][0];

                $this->inscriptionData->physicalPersonStudent->personId = $this->inscriptionData->physicalPerson->personId;
            }
        }

        $resultPhysicalPersonStudentSearch = $businessPhysicalPersonStudent->searchPhysicalPersonStudent($physicalPerson);

        $businessPhysicalPersonStudent->db = $businessInscriptionWeb->db;

        //Laço para pegar os dados da pessoa física que precisaremos cadastrar também na pessoa física estudante
        foreach ($this->inscriptionData->physicalPerson as $key8 => $value8) 
        {
            $physicalPersonStudent->$key8 = $value8;
        }

        if ( count($resultPhysicalPersonStudentSearch) > 0 ) //pessoa fís. estudante já cadastrada
        {
            $businessPhysicalPersonStudent->updatePhysicalPersonStudent( $physicalPersonStudent);
        }
        else //Inserir nova pessoa física
        {
            $businessPhysicalPersonStudent->insertPhysicalPersonStudent($physicalPersonStudent);
        }

        $document1->personId       = $this->inscriptionData->physicalPerson->personId;
        $document1->documentTypeId = RG_CODE;

        $document2->personId       = $this->inscriptionData->physicalPerson->personId;
        $document2->documentTypeId = CPF_CODE;

        $searchDocument1 = $businessDocument->searchDocument($document1);

        $document1->content        = $document->rgNumber;
        $document1->organ          = $document->organ;

        $businessDocument->db = $businessInscriptionWeb->db;
        $businessCVSLog->db   = $businessInscriptionWeb->db;

        if ( count($searchDocument1) > 0 ) //update
        {
            $documentAux1 = $businessDocument->getDocument($document1->personId, RG_CODE) ;

            $ok5 = $businessDocument->updateDocument($document1);

            if ($ok5 == true)
            {
                $cvsLog->tablePkey      = 'personId, documentTypeId';
                $cvsLog->tablePkeyValue = $document1->personId . ', ' . $document1->documentTypeId;

                unset($vars);
                $vars = get_object_vars($document1);

                foreach ( $vars as $var => $value )
                {
                    if ( strtoupper($document1->$var) != $documentAux1->$var )
                    {
                        $cvsLog->tableName = 'basDocument';
                        $cvsLog->fieldName = $var;
                        $cvsLog->oldValue  = $documentAux1->$var;

                        //save the logs
                        $ok6 = $businessCVSLog->insertCvsLog($cvsLog);

                        if ( $ok6 != true )
                        {
                            $ok5 = false;
                        }
                    }
                }

                if ( $ok5 == false)
                {
                    $msg           = _M('Incorrect data',$module);

                    $lblMsg        = new MText('lblMsg',$msg);
                    $lblMsg->color = 'red';

                    $flds[]        = $lblMsg;
                    $flds[]        = new Separator('');

                    $this->divError->addControl($flds);
                }
            }
        }
        else //insert new
        {
            $document1->isDelivered = DB_FALSE;
            $businessDocument->insertDocument($document1);
        }
        $searchDocument2 = $businessDocument->searchDocument($document2);

        $document2->content        = SAGU::convertInCPFWithoutDelimiters($document->cpf);

        if ( count($searchDocument2) > 0 ) //update
        {
            $documentAux2 = $businessDocument->getDocument($document2->personId, CPF_CODE);

            $ok7          = $businessDocument->updateDocument($document2);

            if ($ok7 == true)
            {
                $cvsLog->tablePkey      = 'personId, documentTypeId';
                $cvsLog->tablePkeyValue = $document1->personId . ', ' . $document1->documentTypeId;

                unset($vars);
                $vars = get_object_vars($document2);

                foreach ( $vars as $var => $value )
                {
                    if ( strtoupper($document2->$var) != $documentAux2->$var )
                    {
                        $cvsLog->tableName = 'basDocument';
                        $cvsLog->fieldName = $var;
                        $cvsLog->oldValue  = $documentAux2->$var;

                        //save the logs
                        $ok8 = $businessCVSLog->insertCvsLog($cvsLog);

                        if ( $ok8 != true )
                        {
                            $ok7 = false;
                        }
                    }
                }

                if ( $ok7 == false)
                {
                    $msg           = _M('Incorrect data',$module);

                    $lblMsg        = new MText('lblMsg',$msg);
                    $lblMsg->color = 'red';

                    $flds[]        = $lblMsg;
                    $flds[]        = new Separator('');

                    $this->divError->addControl($flds);
                }
            }
        }
        else //insert new
        {
            if ( strlen((string)$document2->content) > 0)
            {
                $document2->isDelivered = DB_FALSE;
                $businessDocument->insertDocument($document2);
            }
        }

        $businessInscription->db = $businessInscriptionWeb->db;
        //dados da inscrição
        $inscription1->personId             = $this->inscriptionData->physicalPerson->personId;
        $inscription1->selectiveProcessId   = $this->inscriptionData->inscription->selectiveProcessId;

        $searchInscription                  = $businessInscription->searchInscription($inscription1);

        $inscription1                       = $inscription;
        $inscription1->personId             = $this->inscriptionData->physicalPerson->personId;
        $inscription1->selectiveProcessId   = $this->inscriptionData->inscription->selectiveProcessId;

        if ( count($searchInscription) > 0 ) //update inscription
        {
            $ok2                 = $businessInscription->updateInscription($inscription1);
        }
        else //insert inscription
        {
            $ok2                 = $businessInscription->insertInscription($inscription1);
        }

        if ( $ok2 )
        {
            $inscriptionInserted = $businessInscription->searchInscription($inscription1);

            $this->inscriptionData->inscription->inscriptionId = $inscriptionInserted[0][0];
            $inscription->inscriptionId = $this->inscriptionData->inscription->inscriptionId;
        }

        $businessInscriptionOption->db = $businessInscriptionWeb->db;
		if(is_array($inscriptionOption) || is_object($inscriptionOption))
		{
	        foreach ( $inscriptionOption as $value2  ) //para todas as opções de curso
			{
	         //Verficica se foi informada uma opção de curso
				strlen((string)$value2->courseOccurrenceId) > 0 ? $isInscriptionOption = true : $isInscriptionOption = false;

	            $value2->inscriptionId = $inscription->inscriptionId;

		        $courseOccurrenceIdAux = explode('/', $value2->courseOccurrenceId);

			    $filters->selectiveProcessId = $inscription->selectiveProcessId;
				$filters->courseId           = $courseOccurrenceIdAux[0];
                $filters->courseVersion      = $courseOccurrenceIdAux[1];
                $filters->turnId             = $courseOccurrenceIdAux[2];
                $filters->unitId             = $courseOccurrenceIdAux[3];

				$courseOccurrenceIdAux       = $businessCourseOccurence->searchCourseOccurrence($filters);

				$filtersCourseOccurrence = $value2;
				$filtersCourseOccurrence->courseOccurrenceId = NULL;

				$searchInscriptionOption     = $businessInscriptionOption->searchInscriptionOption($filtersCourseOccurrence/*$value2*/);

				$value2->courseOccurrenceId = $courseOccurrenceIdAux[0][0];

				if ( is_array($searchInscriptionOption) ) //update or delete
				{
					if ( !$isInscriptionOption )
					{
						//Delete
						$businessInscriptionOption->deleteInscriptionOptionWithInscriptionOptionId($searchInscriptionOption[0][0]);
					}
					else
					{	
						//Update
	                    $businessInscriptionOption->updateInscriptionOption($value2);
		            }
			    }
				else //insert
				{
					$businessInscriptionOption->insertInscriptionOption($value2);
				}
			}
		}
        $businessTypeData->db = $businessInscriptionWeb->db;
        $businessNote->db     = $businessInscriptionWeb->db;

        if ( is_array($selectiveProcessTypeData) || is_object($selectiveProcessTypeData) )
        {
            foreach ( $selectiveProcessTypeData as $value3) //laço p/ processos seletivos
            {
                $selectiveProcessTypeData1->inscriptionId = $this->inscriptionData->inscription->inscriptionId;

                $selectiveProcessTypeData1->selectiveProcessTypeId = $value3->selectiveProcessTypeId;

                $searchTypeData = $businessTypeData->searchSelectiveProcessTypeData($selectiveProcessTypeData1);

                $selectiveProcessTypeData1->numberInscription      = $value3->numberInscription;

                if ( is_array($searchTypeData) && ( count($searchTypeData) > 0 ) )
                {
                    //Se entrar aqui já existe cadastro para esta pessoa
                    if ( ! (strlen((string)$selectiveProcessTypeData1->numberInscription) > 0) )
                    {
                        //Foi excluído o número da inscrição, tem-se que excluir o registro
                        $businessTypeData->deleteSelectiveProcessTypeData($selectiveProcessTypeData1->inscriptionId, $selectiveProcessTypeData1->selectiveProcessTypeId);
                    }
                    else if ( $searchTypeData[0][2] != $selectiveProcessTypeData1->numberInscription )
                    {
                        //Número de inscrição foi informado e é diferente do cadastro, tem-se
                        //que efetuar atualização do registro
                        $businessTypeData->updateSelectiveProcessTypeData($selectiveProcessTypeData1);
                    }
                }
                else
                {
                    //Não existe cadastro ainda para esta pessoa, então temos que ver se será inserido um cadastro para ela ou não
                    if ( strlen((string)$selectiveProcessTypeData1->numberInscription) > 0 )
                    {
                        //Foi informado um número de inscrição. Então temos que inserir
                        $businessTypeData->insertSelectiveProcessTypeData($selectiveProcessTypeData1);
                    }
                    //else{
                        //Não foi informado um número de inscrição, ou seja, não utilizará
                        //esta forma de processo seletivo para concorrer }
                }

				$filters5->selectiveProcessId = $this->inscriptionData->inscription->selectiveProcessId;
                $filters5->selectiveProcessTypeId = $value3->selectiveProcessTypeId;

                $examsOccurrences = $businessExamOccurrence->searchExamOccurrence($filters5);

                if ( is_array($examsOccurrences) && ( count($examsOccurrences) > 0 ) )
                {
                    foreach ( $examsOccurrences as $value5 )
                    {
                        unset($noteUse);

                        $noteUse->inscriptionId    = $this->inscriptionData->inscription->inscriptionId;
                        $noteUse->examOccurrenceId = $value5[0];

                        $searchNote                =  $businessNote->searchNote($noteUse);

                        eval('$noteAux = $value3->o'.$value5[0].'->note;');

                        if ( is_array($searchNote) )
                        {
                            //Existem notas cadastradas para esta pessoa

                            if ( strlen((string)$noteAux) > 0 )
                            {
                                //Existe nota para esta prova, ver se é a mesma cadastrada
                                //senão fazer update
                                if ( $noteAux == $searchNote[0][6] )
                                {
                                    //As notas são iguais, não é necessário update
                                }
                                else
                                {
                                    //Nota informada é diferente da cadastrada, temos que fazer
                                    //update
                                    $noteUse->notes->note->note             = $noteAux;
                                    $noteUse->notes->note->examOccurrenceId = $value5[0];

                                    $businessNote->updateNote($noteUse);
                                }
                            }
                            else
                            {
                                //A nota foi deletada. Ou seja, existia uma nota cadastrada
                                //e esta foi excluída. Temos que deletá-la.
                                $businessNote->deleteNoteToExamOccurrence($noteUse->inscriptionId, $noteUse->examOccurrenceId);
                            }
                        }
                        else
                        {
                            //Não existem notas cadastradas ainda para esta pessoa
                            if ( strlen((string)$noteAux) > 0 )
                            {
                                $noteUse->note = $noteAux;
                                $businessNote->insertNote($noteUse);
                            }
                        }
                    }
                }
            }
        }

        $businessAnswer->db = $businessInscriptionWeb->db;
        //questionário sócio-econômico
        if ( $this->inscriptionData->inscription->isSocialEconomic == DB_TRUE/*is_Object($answer) || is_Array($answer)*/ )
        {
            foreach ( $answer as $value4 )
            {
                unset($answer1);
                $answer1->personId   = $this->inscriptionData->physicalPerson->personId;
                $answer1->questionId = $value4->questionId;

                $searchAnswer        = $businessAnswer->searchAnswer($answer1);

                $searchAnswer1       = $businessAnswer->searchAnswer($answer1);

                if ( $value4->optionId == NULL )
                {
                    if ( is_array($searchAnswer1) && (count($searchAnswer1) > 0 ) )
                    {
                        for($x = 0; $x < count($searchAnswer); $x++ )
                        {
                            $businessAnswer->deleteAnswer($searchAnswer[$x][0]);
                        }
                    }
                }
                else if ( count($value4->optionId) > 1 )
                {
                    if ( is_array($searchAnswer) )
                    {
                        for($x = 0; $x < count($searchAnswer); $x++ )
                        {
                            $businessAnswer->deleteAnswer($searchAnswer[$x][0]);
                        }
                    }

                    for($x = 0; $x < count($value4->optionId); $x++ )
                    {
                        $answer1->optionId   = $value4->optionId[$x];

                        if( ( strlen((string)$value4->optionId) > 0 ) )
                        {
                            $businessAnswer->insertAnswer($answer1);
                        }
                    }
                }
                else
                {
                    //$searchAnswer       = $businessAnswer->searchAnswer($answer1);
                    $answer1->optionId   = $value4->optionId;

                    if ( is_array($searchAnswer) && (strlen((string)$value4->optionId) > 0) ) //update resposta
                    {
                        $answer1->answerId  = $searchAnswer[0][0];
                        $businessAnswer->updateAnswer($answer1);
                    }
                    else //insert respostas
                    {
                        if( ( strlen((string)$value4->optionId) > 0 ) )
                        {
                            $businessAnswer->insertAnswer($answer1);
                        }
                    }
                }
            }
        }

        //Parte Financeira
        if ( GENERATE_BANK_INVOICE == DB_TRUE )
        {
            $filters9->personId             = $this->inscriptionData->physicalPerson->personId;
			$filters9->selectiveProcessId = $this->inscriptionData->inscription->selectiveProcessId;
			$filters9->unitId = $filters->unitId;

            $verifyBackPayment = $businessInscriptionWeb->verifyBackPayment($filters9);

            if ( is_array($verifyBackPayment) )
            {
                foreach ( $verifyBackPayment as $key => $verify)
                {
                    if ( $verify[0] == DB_FALSE) //Título em aberto (não pago)
                    {
                        $isPayrolPayment = false;
                    }
                    elseif ( $verify[0] == DB_TRUE ) //Título pago, não gerar título
                    {
                        $isPayrolPayment = true;
                        break;
                    }
                }
            }
            else //Não tem anterior
            {
                $isPayrolPayment = false;
            }

            $businessEntry->db             = $businessInscriptionWeb->db;
            $businessInvoice->db           = $businessInscriptionWeb->db;
            $businessReceivableInvoice->db = $businessInscriptionWeb->db;

            if ( !$isPayrolPayment ) // Titulo em aberto, gerar novo título
            {
                //Geração de título para gerar boleto bancário
                $inscriptionSettingsData = $businessInscriptionSetting->getInscriptionSetting($this->inscriptionData->inscription->selectiveProcessId);

                //CÓDIGOS COMENTADOS PARA INSERIR NO CENTRO DE CUSTOS DOS CURSOS, SE PRECISAR....
                //$courseOccurrenceData    = $businessCourseOccurrence->getCourseOccurrence($this->inscriptionData->inscriptionOption->o1->courseOccurrenceId);
                //$filters7->courseId      = $courseOccurrenceData->courseId;
                //$filters7->courseVersion = $courseOccurrenceData->courseVersion;
                //$filters7->unitId        = $courseOccurrenceData->unitId;
    
                //Retorna os dados da conta do curso
                //$courseAccountData         = $businessCourseAccount->getCourseAccount($filters7);
    
                $filters6->personId        = $this->inscriptionData->physicalPerson->personId;
                //$filters6->accountSchemeId = $courseAccountData->accountSchemeId; // to course
                $filters6->accountSchemeId = SELECTIVE_PROCESS_ACCOUNT_SCHEME_ID;
                //$filters6->costCenterId    = $courseAccountData->costCenterId;
                $filters6->costCenterId    = SELECTIVE_PROCESS_COST_CENTER;
                //$filters6->courseId        = $courseOccurrenceData->courseId;
                //$filters6->courseVersion   = $courseOccurrenceData->courseVersion;
                $filters6->unitId          = $filters->unitId; //$courseOccurrenceData->unitId;
                $filters6->parcelNumber    = SPR_INSCRIPTION_PARCELS_NUMBER;
                $filters6->maturityDate    = $inscriptionSettingsData->endDate;
                $filters6->policyId        = SPR_INSCRIPTION_POLICY_ID;
                $filters6->automaticDebit  = DB_FALSE; //colocar na tabela ou basConfig
                $filters6->comments        = _M('Selective process tax', $module); 
                $filters6->incomeSourceId  = SPR_INSCRIPTION_INCOME_SOURCE_ID; //colocarna tabela ou basConfig
                

                $defaultOperations         = $businessDefaultOperations->getDefaultOperations();
                $operationSPR              = $businessOperation->getOperation($defaultOperations->selectiveProcessTaxOperation);

                $filters6->bankAccountId   = isset($inscriptionSettingsData->bankAccountId) ? $inscriptionSettingsData->bankAccountId : $operationSPR->bankAccountId;
                $filters6->bankContractId  = isset($inscriptionSettingsData->bankContractId) ? $inscriptionSettingsData->bankContractId : $operationSPR->bankContractId;

                if ( strlen((string)$this->inscriptionData->inscription->selectiveProcessId)>0 )
                {
                    $busSelectiveProcess       = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
                    $selectiveProcess          = $busSelectiveProcess->getSelectiveProcess($this->inscriptionData->inscription->selectiveProcessId);
                    $filters6->periodId        = $selectiveProcess->periodId;
                }

                $searchReceivableInvoice = $businessReceivableInvoice->searchReceivableInvoice($filters6);

                $filters6->value           = 0;   //This because the value is update by finEntry.

                if ( is_array($searchReceivableInvoice) )
                {
                    $aux_invoiceId       = $searchReceivableInvoice[0][0];
                    $this->inscriptionData->_invoiceId = $aux_invoiceId;
                }
                else
                {
                    //INSERT NOVO TÍTULO
                    $receivableInvoiceId = $businessReceivableInvoice->insertReceivableInvoice($filters6);

                    $aux_invoiceId = $receivableInvoiceId;

                    if ( strlen((string)$receivableInvoiceId) > 0 )
                    {
                        $defaultOperations        = $businessDefaultOperations->getDefaultOperations();
    
                        //Colocar na finEntry
                        $filters8->invoiceId      = $receivableInvoiceId;
                        $filters8->operationId    = $defaultOperations->selectiveProcessTaxOperation;
    
                        $filters8->value          = $inscriptionSettingsData->fee;//colocar na tabela ou basConfig
                        $filters8->entryDate      = date('d/m/Y');
                        //$filters8->costCenterId   = $courseAccountData->costCenterId;
                        $filters8->costCenterId   = SELECTIVE_PROCESS_COST_CENTER;
                        $filters8->comments       = _M('Selective process tax', $module);
                        $filters8->isAccounted    = DB_FALSE;
                        $ok8 = $businessEntry->insertEntry($filters8);
    
                        if ( $ok8 )
                        {
                            //lançamento inserido
                            $businessInvoice->updateInvoiceBalance($receivableInvoiceId);
                        }
                    }
                    $this->inscriptionData->_invoiceId = $receivableInvoiceId;
                }
            }
            else //Título já foi pago, então lançamos um título nulo para esta inscrição neste selectiveProcessId
            {
                $aux_invoiceId = NULL;
            }
        }


//         //dados da inscrição
         $inscription1                       = $inscription;
         $inscription1->personId             = $this->inscriptionData->physicalPerson->personId;
         $inscription1->selectiveProcessId   = $this->inscriptionData->inscription->selectiveProcessId;
// 
//         $searchInscription                  = $businessInscription->searchInscription($inscription1);
// 
         $inscription1->inscriptionInvoiceId = $aux_invoiceId;
         
         $businessInscription->db = $businessInscriptionWeb->db;
// 
//         if ( count($searchInscription) > 0 ) //update inscription
//         {
             $ok2                 = $businessInscription->updateInscription($inscription1);
//         }
//         else //insert inscription
//         {
//             $ok2                 = $businessInscription->insertInscription($inscription1);
//         }
// 
//         if ( $ok2 )
//         {
//             $inscriptionInserted = $businessInscription->searchInscription($inscription1);
// 
//             $this->inscriptionData->inscription->inscriptionId = $inscriptionInserted[0][0];
	//         }
		if(USE_INDICATION == 'TRUE')
		{
			if(strlen((string)$this->inscriptionData->friendPersonId) > 0)
			{
				$businessDescontoAmigo	   = $MIOLO->getBusiness($module,'BusInscriptionIndication');
				$businessDescontoAmigo->db = $businessInscriptionWeb->db;
				$data->inscriptionId = $this->inscriptionData->inscription->inscriptionId;
				$data->personId = $this->inscriptionData->friendPersonId;
				$data->personMask = $this->inscriptionData->personMask;
				$businessDescontoAmigo->insertInscriptionIndication($data);
			}
		}

        $businessInscriptionWeb->commit();
        $opts = array('page' => '9');
        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnBack_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        //$opts1 = $opts1 = urlencode(serialize($this->inscriptionData));

        $MIOLO->session->setValue('inscriptionData', urlencode(serialize($this->inscriptionData)));

        $opts = array('page' => '7'/*,
                      'inscriptionData' => $opts1*/);  //Verify documents

        $this->page->mGoto($MIOLO->getActionURL($module, $action, null, $opts));
    }
}

?>
