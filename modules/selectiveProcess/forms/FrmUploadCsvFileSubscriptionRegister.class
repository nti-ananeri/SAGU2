<?php

/**
 * Exam form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://sagu.solis.coop.br/
 *
 **/

/**
 * Form to manipulate a exam
 **/
class FrmUploadCsvFileSubscriptionRegister extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    function __construct($data)
    {

        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Upload csv file - subscription register', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Selective process id',$module).':', $business->listSelectiveProcess());
        $selectiveProcessId->setJsHint(_M('Enter the selective process code',$module));
        $fields[]           = $selectiveProcessId;
        $validators[]       = new MRequiredValidator('selectiveProcessId');

        $fields[]     = new MFileField('uploadCsvFileSubscriptionRegister', $data->uploadCsvFileSubscriptionRegister, _M('Upload csv file - subscription register',$module), 40);
        $validators[] = new MRequiredValidator('uploadCsvFileSubscriptionRegister', '', 'required');
        $fields[] = new MSeparator();

        $inscriptionsLabel = new MText('inscriptionsLabel', _M('Inscription order for file',$module) . ':');
        $inscriptionsLabel->setWidth(FIELD_CONTAINER_SIZE);

        $fields[] = new MText('inscriptionsColumnT', _M('Order colums for file from inscriptions', $module) );

        $flds[] = new MText('inscriptionsColumn1', _M('Column', $module) . ' 1  => ' . _M('Person name', $module));
        $flds[] = new MText('inscriptionsColumn2', _M('Column', $module) . ' 2  => ' . _M('Country birth day id', $module));
        $flds[] = new MText('inscriptionsColumn3', _M('Column', $module) . ' 3  => ' . _M('RG from person', $module));
        $flds[] = new MText('inscriptionsColumn4', _M('Column', $module) . ' 4  => ' . _M('Organ', $module));
        $flds[] = new MText('inscriptionsColumn5', _M('Column', $module) . ' 5  => ' . _M('In white', $module));
        $flds[] = new MText('inscriptionsColumn6', _M('Column', $module) . ' 6  => ' . _M('CPF', $module));
        $flds[] = new MText('inscriptionsColumn7', _M('Column', $module) . ' 7  => ' . _M('Birth day', $module));
        $flds[] = new MText('inscriptionsColumn8', _M('Column', $module) . ' 8  => ' . _M('Location', $module));
        $flds[] = new MText('inscriptionsColumn9', _M('Column', $module) . ' 9  => ' . _M('Number', $module));
        $flds[] = new MText('inscriptionsColumn10', _M('Column', $module) . ' 10  => ' . _M('Complement', $module));
        $flds[] = new MText('inscriptionsColumn11', _M('Column', $module) . ' 11 => ' . _M('Quarter', $module));
        $flds[] = new MText('inscriptionsColumn12', _M('Column', $module) . ' 12 => ' . _M('Sagu id from residential of person', $module));
        $flds[] = new MText('inscriptionsColumn13', _M('Column', $module) . ' 13 => ' . _M('Zip code', $module));
        $flds[] = new MText('inscriptionsColumn14', _M('Column', $module) . ' 14 => ' . _M('Marital status id', $module));
        $flds[] = new MText('inscriptionsColumn15', _M('Column', $module) . ' 15 => ' . _M('Sex', $module));
        $flds[] = new MText('inscriptionsColumn16', _M('Column', $module) . ' 16 => ' . _M('Residential Phone', $module));
        $flds[] = new MText('inscriptionsColumn17', _M('Column', $module) . ' 17 => ' . _M('Work Phone', $module));
        $flds[] = new MText('inscriptionsColumn18', _M('Column', $module) . ' 18 => ' . _M('Necessity special', $module));
        $flds[] = new MText('inscriptionsColumn19', _M('Column', $module) . ' 19 => ' . _M('Cell Phone', $module));
        $flds[] = new MText('inscriptionsColumn20', _M('Column', $module) . ' 20 => ' . _M('Is high school', $module));
        $flds[] = new MText('inscriptionsColumn21', _M('Column', $module) . ' 21 => ' . _M('Sagu id from school of high school', $module));
        $flds[] = new MText('inscriptionsColumn22', _M('Column', $module) . ' 22 => ' . _M('Sagu id from city of school of high school', $module));
        $flds[] = new MText('inscriptionsColumn23', _M('Column', $module) . ' 23 => ' . _M('Language id', $module));
        $flds[] = new MText('inscriptionsColumn24', _M('Column', $module) . ' 24 => ' . _M('Id from exam city', $module));
        $flds[] = new MText('inscriptionsColumn25', _M('Column', $module) . ' 25 => ' . _M('First course option', $module));
        $flds[] = new MText('inscriptionsColumn26', _M('Column', $module) . ' 26 => ' . _M('Second course option', $module));
        $flds[] = new MText('inscriptionsColumn27', _M('Column', $module) . ' 27 => ' . _M('ENEM inscription', $module));
        $flds[] = new MText('inscriptionsColumn28', _M('Column', $module) . ' 28 => ' . _M('ENEM exam note', $module));
        $flds[] = new MText('inscriptionsColumn29', _M('Column', $module) . ' 29 => ' . _M('ENEM writing note', $module));


        $bsgInscriptionLabel = new BaseGroup('bsgInscriptionLabel', '', $flds, 'vertical' );
        $bsgInscriptionLabel->addBoxStyle('width', '50%');

        $fields[] = $bsgInscriptionLabel;


        $fields[] = new MSeparator();
        $fields[] = new MButton('submit_button', _M('Submit', $module));
        $fields[] = new MSeparator();

        $this->page->SetEnctype('multipart/form-data');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(FIELD_LABEL_SIZE);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.selectiveProcessId.focus();');
    }


    /**
     * Event triggered when user chooses Submit from the form
     **/
    public function submit_button_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $selectiveProcessId = $this->selectiveProcessId->value;
        $content = file($_FILES['uploadCsvFileSubscriptionRegister']['tmp_name']);

        if ( $content )
        {
            //ORDEM DAS COLUNAS NO ARQUIVO PARA IMPORTAÇÃO: ISSO HOJE É ESTÁTICO
            //Coluna 1 - Nome da pessoa
            //Coluna 2 - Country birth day
            //Coluna 3 - RG da pessoa
            //Coluna 4 - Orgão expedidor
            //Coluna 5 - EM BRANCO
            //Coluna 6 - CPF da pessoa
            //Coluna 7 - Data de nascimento
            //Coluna 8 - location
            //Coluna 9 - numero
            //Coluna 10 - Complemento
            //Coluna 11 - Bairro
            //Coluna 12 - Código da cidade da pessoa
            //Coluna 13 - Zip code
            //Coluna 14 - Estado civil
            //Coluna 15 - Sexo
            //Coluna 16 - Estado civil
            //Coluna 17 - Work Phone
            //Coluna 18 - Possui deficiência
            //Coluna 19 - Cell Phone
            //Coluna 20 - Concluíu o ensino médio ou não
            //Coluna 21 - Código do sagu da escola em que estudou
            //Coluna 22 - Código do sagu da cidade da escola em que estudou
            //Coluna 23 - Código da língua estrangeira
            //Coluna 24 - Código da cidade de prova
            //Coluna 25 - Primeira opção de curso (código.campus)
            //Coluna 26 - Segunda opção de curso (código.campus)
            //Coluna 27 - Inscrição no ENEM;
            //Coluna 28 - Nota da prova do ENEM;
            //Coluna 29 - Nota da redação no ENEM

            $businessPhysicalPerson         = $MIOLO->GetBusiness('basic', 'BusPhysicalPerson');
            $businessPhysicalPersonStudent  = $MIOLO->GetBusiness('basic', 'BusPhysicalPersonStudent');
            $businessCity                   = $MIOLO->GetBusiness('basic', 'BusCity');
            $businessDocument               = $MIOLO->GetBusiness('basic', 'BusDocument');
            $businessLegalPerson            = $MIOLO->GetBusiness('basic', 'BusLegalPerson');
            $businessInscription            = $MIOLO->GetBusiness('selectiveProcess', 'BusInscription');
            $businessInscriptionOption      = $MIOLO->GetBusiness('selectiveProcess', 'BusInscriptionOption');

            foreach ($content as $line)
            {
                $lineArray = explode(';', $line);

                $filterDocument->content = $lineArray[2];
                $filterDocument->documentTypeId = RG_CODE;

                $document = $businessDocument->searchDocument($filterDocument);

                if ( !$document )                                               //Se a pessoa não está cadastrada (verificação pelo RG)
                {
                    unset($data);

                    //PERSON
                    $data->name = $lineArray[0];
                    $city = $businessCity->getCity($lineArray[11]);

                    $data->cityId       = $city->cityId ? $city->cityId : 0;
                    $data->zipCode      = $lineArray[12];
                    $data->location     = $lineArray[7];
                    $data->complement   = $lineArray[8] . ' - ' . $lineArray[9];
                    $data->neighborhood = $lineArray[10];
                    $data->isAllowPersonalData = 't';

                    //PHYSICAL PERSON
                    if ( $lineArray[14] == '1' )
                    {
                        $sex = 'M';
                    }
                    elseif ( $lineArray[14] == '2' )
                    {
                        $sex = 'F';
                    }
                    $data->sex = $sex;

                    switch( $lineArray[13] )
                    {
                        case '1': $maritalStatusId = 'S';
                                  break;
                        case '2': $maritalStatusId = 'C';
                                  break;
                        case '3': $maritalStatusId = 'V';
                                  break;
                        case '4':
                        case '5': $maritalStatusId = 'D';
                                  break;
                        case '6': $maritalStatusId = 'U';
                                  break;
                        default: $maritalStatusId = '';
                    }
                    $data->maritalStatusId = $maritalStatusId;
                    $data->residentialPhone = $lineArray[15];
                    $data->workPhone = $lineArray[16];
                    $data->cellPhone = $lineArray[18];
                    $data->dateBirth = $lineArray[6];
                    $data->countryIdBirth = $lineArray[1];

                    //***POSSUI DEFICIENCIA***
                    if ( $lineArray[17] == '1' )
                    {
                        $specialNecessityId = '1'; // VERIFICAR UM CÓDIGO GENÉRICO
                    }
                    elseif ( $lineArray[17] == '2' )
                    {
                        $specialNecessityId = '0';
                    }
                    $data->specialNecessityId = $specialNecessityId;

                    //DOCUMENTS
                    $data->document[0]->documentTypeId = RG_CODE;
                    $data->document[0]->content = $lineArray[2];
                    $data->document[0]->organ = $lineArray[3];
                    $data->document[1]->documentTypeId = CPF_CODE;
                    $data->document[1]->content = $lineArray[5];

                    $objLegalPerson = $businessLegalPerson->getLegalPerson($lineArray[20]);

                    if ( $objLegalPerson )
                    {
                        $legalPerson = $objLegalPerson->personId;
                    }

                    $data->institutionIdHs = $legalPerson;
                    $data->cityIdHs        = trim($lineArray[21]);

                    $result     = $businessPhysicalPerson->insertPhysicalPerson($data);

                    if ( $result )
                    {
                        $result2    = $businessPhysicalPersonStudent->insertPhysicalPersonStudent($data);
                        $personId   = $result->personId;
                    }
                    else
                    {
                        $error .= _M('Physical person', $module) . ': '. $lineArray[0] . '<br>';
                    }
                }
                else
                {
                    $personId = $document[0][0];
                }

                if ( strlen((string)$personId) > 0 )
                {
                    unset($dataInscription);

                    $filterInscription->personId            = $personId;
                    $filterInscription->selectiveProcessId  = $selectiveProcessId;
                    $inscription = $businessInscription->searchInscription($filterInscription);

                    if ( !$inscription ) //Verifica se a pessoa já tem inscrição
                    {
                        $dataInscription->selectiveProcessId = $selectiveProcessId;
                        $dataInscription->personId           = $personId;
                        $dataInscription->cityExam           = $lineArray[23];
                        $dataInscription->languageId         = $lineArray[22];

                        if ( $lineArray[19] == 3 )
                        {
                            $isHighSchool = DB_FALSE;
                        }
                        elseif( $lineArray[19] == 2 )
                        {
                            $isHighSchool = DB_TRUE;
                        }
                        $data->isHighSchool            = $isHighSchool;
                        $dataInscription->isHighSchool = $isHighSchool; 
                        $dataInscription->isInternet   = DB_FALSE; 
                        $dataInscription->isClassified = DB_FALSE; 

                        // SEPARA OS CURSOS E CAMPUS
                        $unitId1   = substr(strstr(trim($lineArray[24]), "/"), 1);
                        $unitId1   = str_replace('"', '', $unitId1);
                        $unitId1   = str_replace('\'', '', $unitId1);

                        $courseId1 = str_replace('/' . $unitId1, '', trim($lineArray[24]));
                        $courseId1 = str_replace('"', '', $courseId1);
                        $courseId1 = str_replace('\'', '', $courseId1);

                        $unitId2   = substr(strstr(trim($lineArray[25]), "/"), 1);
                        $unitId2   = str_replace('"', '', $unitId2);
                        $unitId2   = str_replace('\'', '', $unitId2);

                        $courseId2 = str_replace('/' . $unitId2, '', trim($lineArray[25]));
                        $courseId2 = str_replace('"', '', $courseId2);
                        $courseId2 = str_replace('\'', '', $courseId2);

                        $dataInscription->options[0]->courseOccurrenceId = $businessInscriptionOption->getCourseOccurrenceId($selectiveProcessId, $courseId1, $unitId1);

                        $dataInscription->options[0]->optionNumber = 1;

                        $dataInscription->options[1]->courseOccurrenceId = $businessInscriptionOption->getCourseOccurrenceId($selectiveProcessId, $courseId2, $unitId2);
                        $dataInscription->options[1]->optionNumber = 2;

                        $dataInscription = $businessInscription->insertInscription($dataInscription);

                        if ( !$dataInscription )
                        {
                            $error .= $error .= _M('Selective process inscription', $module) . ': '. $lineArray[0] . '<br>';
                        }
                        else
                        {
                            if ( strlen((string)$lineArray[26]) > 0)
                            {
                                //Tem ENEM
                                $businessSelectiveProcessTypeData = $MIOLO->GetBusiness('selectiveProcess', 'BusSelectiveProcessTypeData');

                                $businessNote = $MIOLO->GetBusiness('selectiveProcess', 'BusNote');
                                $businessExamOccurrence = $MIOLO->GetBusiness('selectiveProcess', 'BusExamOccurrence');
                                unset($dataEnem);
                                //ENEM
                                $dataEnem->inscriptionId = $dataInscription->inscriptionId;
                                $dataEnem->selectiveProcessTypeId = ENEM_TYPE_ID;
                                $dataEnem->numberInscription = $lineArray[26];
                                $businessSelectiveProcessTypeData->insertSelectiveProcessTypeData($dataEnem);

                                //Nota da prova objetiva
                                $dataEnem->examId = ENEM_EXAM_CODE;
                                $dataEnem->selectiveProcessId = $selectiveProcessId;
                                $examOccurrence = $businessExamOccurrence->searchExamOccurrence($dataEnem);
                                $dataEnem->examOccurrenceId = $examOccurrence[0][0];
                                $dataEnem->note = $lineArray[27];
                                $businessNote->insertNote($dataEnem);
                                unset($dataEnem->examOccurrenceId);

                                //Nota da redação
                                $dataEnem->examId = ENEM_WRITING_CODE;
                                $dataEnem->selectiveProcessId = $selectiveProcessId;
                                $examOccurrence = $businessExamOccurrence->searchExamOccurrence($dataEnem);
                                $dataEnem->examOccurrenceId = $examOccurrence[0][0];
                                $dataEnem->note = $lineArray[28];
                                $businessNote->insertNote($dataEnem);
                                unset($dataEnem->examOccurrenceId);
                            }
                            else
                            {
                                //Sem ENEM
                            }
                        }
                    }
                    else
                    {
                        //Pessoa já cadastrada
                    }
                }
                else
                {
                    //Pessoa não cadastrada
                }
            }
        }

        if ( $error )
        {
            $msg  = _M('Error executing requested operation.',$module) . '<br>';
            $msg  .= $error; 
            $goto = SAGU::getStackBackUrl();
            $goto = strlen((string)$goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Error',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        else
        {
            $msg = _M(MSG_RECORD_INSERTED,$module);
            $goto = $MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')), null, $opts);

            $opts    = array('event'=>'tbBtnNew_click',
                            'function'=>'insert');

            $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Question',$module);
            $MIOLO->question($msg, $gotoYes, $goto);
        }
    }
}

?>
