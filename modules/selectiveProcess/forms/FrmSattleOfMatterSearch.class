<?php

/**
 *
 * This file handles the connection and actions for sprSattleOfMatter table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Form to search the sprSattleOfMatter table
 */
class FrmSattleOfMatterSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Search',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
//        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        $toolBar->addButton('tbBtnBookmark', _M('Add to bookmarks', 'basic'), $url, null, true, $enabledImage, $disabledImage);

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Sattle of matter', $this->home, 'sattleOfMatter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

//         $sattleOfMatterIdS = new MTextField('sattleOfMatterIdS', $this->sattleOfMatterIdS->value, _M('Sattle of matter id',$module), FIELD_ID_SIZE);
//         $sattleOfMatterIdS->setJsHint(_M('Enter the sattle of matter id',$module));
//         $fields[] = $sattleOfMatterIdS;
//         $validators[] = new MIntegerValidator('sattleOfMatterIdS', '', 'optional');

        /*
         * MLookupTextField class constructor prototype:
         *
         * function __construct($name = '', $value     = '',       $label   = '', $size         = 10,
         *                      $hint = '', $validator = null,     $related = '', $module       = '',
         *                      $item = '', $event     = 'filler', $filter  = '', $autocomplete = false)
         */
        $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
        $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessId), _M('Selective process id',$module), $business->listSelectiveProcess());
        $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
        $selectiveProcessIdS->addAttribute('onChange','document.' . $this->getName() . '.submit()' );
        $fields[]           = $selectiveProcessIdS;

        $examOccurrenceLabelS = new MText('examOccurrenceLabelS', _M('Exam occurrence id',$module) . ':');
        $examOccurrenceLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $examOccurrenceIdS = new MLookupTextField('examOccurrenceIdS', $this->getFormValue('examOccurrenceIdS', $data->examOccurrenceIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, ('examOcurrenceIdS, limbo, limbo, limbo, limbo, examOccurrenceDescriptionS'), 'selectiveProcess', 'ExamOccurrence', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $examOccurrenceIdS->setJsHint(_M('Enter the exam occurrence id',$module));
        $validators[] = new MIntegerValidator('examOccurrenceIdS', '', 'optional');

        $examOccurrenceDescriptionS = new MTextField('examOccurrenceDescriptionS', $this->getFormValue('examOccurrenceDescriptionS', $data->examOccurrenceDescriptionS), '', FIELD_DESCRIPTION_SIZE);

        $hctExamOccurrence = new MHContainer('hctExamOccurrence', array($examOccurrenceLabelS, $examOccurrenceIdS, $examOccurrenceDescriptionS));
        $fields[]  = $hctExamOccurrence;




//         $examOccurrenceLabelS = new MText('examOccurrenceLabelS', _M('Exam occurrence id',$module) . ':');
//         $examOccurrenceLabelS->setWidth(FIELD_CONTAINER_SIZE);
// 
//         $examOccurrenceIdS = new MLookupTextField('examOccurrenceIdS', $this->getFormValue('examOccurrenceIdS', $data->examOccurrenceIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, examOccurrenceDescriptionS', 'selectiveProcess', 'ExamOccurrence', null, null, true);
//         $examOccurrenceIdS->setJsHint(_M('Enter the exam occurrence id',$module));
// 
//         
//         $validators[] = new MIntegerValidator('examOccurrenceIdS', '', 'optional');
// 
//         $examOccurrenceDescriptionS = new MTextField('examOccurrenceDescriptionS', $this->getFormValue('examOccurrenceDescriptionS', $data->examOccurrenceDescriptionS), '', FIELD_DESCRIPTION_SIZE);
//         
//         $hctexamOccurrence = new MHContainer('hctexamOccurrence', array( $examOccurrenceLabelS, $examOccurrenceIdS, $examOccurrenceDescriptionS) );
//         $hctexamOccurrence->setShowLabel(true);
//         $fields[]  = $hctexamOccurrence;
        



        $courseVacantLabelS = new MText('courseVacantLabelS', _M('Vacancy',$module) . ':');
        $courseVacantLabelS->setWidth(FIELD_CONTAINER_SIZE);

        $courseVacantIdS = new MLookupTextField('courseVacantIdS', $this->getFormValue('courseVacantIdS', $data->courseVacantIdS), '', FIELD_LOOKUPFIELD_SIZE, null, null, 'limbo, limbo, limbo, courseVacantDescriptionS', 'selectiveProcess', 'CourseVacant', null, array('selectiveProcessId' => 'selectiveProcessIdS'), true);
        $courseVacantIdS->setJsHint(_M('Enter the vacancy id',$module));

        $validators[] = new MIntegerValidator('courseVacantIdS', '', 'optional');

        $courseVacantDescriptionS = new MTextField('courseVacantDescriptionS', $this->getFormValue('courseVacantDescriptionS', $data->courseVacantDescriptionS), '', FIELD_DESCRIPTION_SIZE);
        
        $hctVacant = new MHContainer('hctVacant', array( $courseVacantLabelS, $courseVacantIdS, $CourseVacantDescription, $courseVacantDescriptionS) );
        $hctVacant->setShowLabel(true);
        $fields[]  = $hctVacant;

//         $business           = $MIOLO->getBusiness($module,'BusSelectiveProcess');
//         $selectiveProcessIdS = new MComboBox('selectiveProcessIdS', $this->getFormValue('selectiveProcessIdS', $data->selectiveProcessIdS), _M('Selective process id',$module), $business->listSelectiveProcess());
//         $selectiveProcessIdS->setJsHint(_M('Enter the selective process code',$module));
//         $fields[]           = $selectiveProcessIdS;

        $priorityS = new MTextField('priorityS', $this->getFormValue('priorityS', $data->priorityS), _M('Priority',$module), 8);
        $priorityS->setJsHint(_M('Enter the priority',$module));
        $fields[] = $priorityS;

        $validators[] = new MIntegerValidator('priorityS', '', 'optional');

        $fields[] = new MButton('btnSearch',_M('Search',$module));

        $this->setFields($fields);
        $this->setValidators($validators);

        // get filters values
        $filters->sattleOfMatterId          = $this->sattleOfMatterIdS->value;
        $filters->examOccurrenceId          = $this->examOccurrenceIdS->value;
        $filters->courseVacantId            = $this->courseVacantIdS->value;
        $filters->courseVacantDescription   = $this->courseVacantDescriptionS->value;
        $filters->priority                  = $this->priorityS->value;
        $filters->selectiveProcessId        = $this->selectiveProcessIdS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdSattleOfMatterSearch',$filters);
        $business = $MIOLO->getBusiness($module,'BusSattleOfMatter');
        $data = $business->searchSattleOfMatter($filters);
        $grdResults->setData($data);

        //###GRID///is_array($data) ?  $grdResults->SetScrollHeight(GRID_SCROLL_HEIGHT) : false;

        $this->addField($grdResults);

        if ( $this->isSubmitted() )
        {
            $this->page->onLoad('document.' . $this->name . '.sattleOfMatterId.focus();');
        }
        $this->setLabelWidth(FIELD_LABEL_SIZE);

    }

}

?>
