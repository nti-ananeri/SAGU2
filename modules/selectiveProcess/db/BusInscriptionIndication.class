<?php
/**
 *
 * This file handles the connection and actions for sprSelectiveProcess table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcess table
 **/
class BusinessSelectiveProcessBusInscriptionIndication extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessSelectiveProcessBusInscriptionIndication()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInscriptionIndication($data)
    {
         $sql = 'INSERT INTO sprInscriptionIndication
                            (inscriptionId,
                             personId,
                             personMask)
                     VALUES (?,?,?)';

        //$db     = $this->getDatabase();
        $args   = array ( $data->inscriptionId,
                          $data->personId,
                          $data->personMask);

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }
}

?>
