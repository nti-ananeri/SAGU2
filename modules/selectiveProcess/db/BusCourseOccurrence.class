<?php
/**
 *
 * This file handles the connection and actions for sprCourseOccurrence table
 *
 * @author Rafael Lu�s Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Rafael Lu�s Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 09/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprCourseOccurrence table
 **/
class BusinessSelectiveProcessBusCourseOccurrence extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

/*    public function listCourseOccurrence()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT courseOccurrenceId,
                       courseVacantId,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId,
                       isAvailable
                  FROM basCourseOcurrence
              ORDER BY courseVacantId';

        $ret = $db->query(SAGU::prepare($sql, $args));
        //$db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseOccurrenceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseOccurrence($courseOccurrenceId, $availalbe = null)
    {
        $sql = 'SELECT A.courseOccurrenceId,
                       B.courseVacantId,
                       C.courseId,
                       C.courseVersion,
                       C.turnId,
                       C.unitId,
                       A.isAvailable,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       B.selectiveProcessId,
                       D.shortName as courseName
                  FROM sprCourseOccurrence A
             LEFT JOIN sprCourseVacant B
                 USING ( courseVacantId )
             LEFT JOIN acdCourseOccurrence C
                 on A.courseid = C.courseid and a.turnid = c.turnid and a.unitid = c.unitid and a.courseversion = c.courseversion
             LEFT JOIN acdCourse D
                    ON ( D.courseId = C.courseId )
                 WHERE A.courseOccurrenceId = ?';

        $args = array($courseOccurrenceId);

        if ( strlen((string)$availalbe) > 0 )
        {
            $sql   .= ' AND A.isAvailalbe = ?';
            $args[] = $availalbe;
        }


        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        //$db->close();

        $courseOccurrence = new sprCourseOccurrence();

        list ( $courseOccurrence->courseOccurrenceId,
               $courseOccurrence->courseVacantId,
               $courseOccurrence->courseId,
               $courseOccurrence->courseVersion,
               $courseOccurrence->turnId,
               $courseOccurrence->unitId,
               $courseOccurrence->isAvailable,
               $courseOccurrence->userName,
               $courseOccurrence->dateTime,
               $courseOccurrence->ipAddress,
               $courseOccurrence->selectiveProcessId,
               $courseOccurrence->courseName ) = $result[0];

        return $courseOccurrence;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseOccurrence($filters)
    {
        $sql = 'SELECT A.courseOccurrenceId,
                       B.courseVacantId,
                       C.courseId,
                       D.shortName,
                       C.courseVersion,
                       E.description,
                       F.description,
                       A.isAvailable,
                       B.vacant,
                       B.selectiveProcessId
                  FROM sprCourseOccurrence A
             LEFT JOIN sprCourseVacant B
                 USING ( courseVacantId )
             LEFT JOIN acdCourseOccurrence C
                    ON (C.courseId = A.courseId 
                   AND  C.unitId = A.unitId
                   AND  C.turnId = A.turnId
                   AND  C.courseVersion = A.courseVersion)
             LEFT JOIN acdCourse D
                    ON ( A.courseId = D.courseId )
             LEFT JOIN basTurn E
                    ON (E.turnId = C.turnId)
             LEFT JOIN basUnit F
                    ON (F.unitId = C.unitId)';

        if ( strlen((string)$filters->courseOccurrenceId) > 0 )
        {
            $where .= ' AND A.courseOccurrenceId = ? ';
            $args[] = $filters->courseOccurrenceId;
        }
        if ( strlen((string)$filters->courseVacantId) > 0 )
        {
            $where .= ' AND A.courseVacantId = ? ';
            $args[] = $filters->courseVacantId;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND C.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->turnId) > 0 )
        {
            $where .= ' AND C.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND B.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->isAvailable) > 0 )
        {
            $where .= ' AND A.isAvailable = ? ';
            $args[] = $filters->isAvailable;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY courseVacantId';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseOccurrence($data)
    {
        $sql = 'INSERT INTO sprCourseOccurrence
                            (courseVacantId,
                             courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             isAvailable)
                     VALUES (?,?,?,?,?,?)';

        $args   = array ( $data->courseVacantId,
                          $data->courseId,
                          $data->courseVersion,
                          $data->turnId,
                          $data->unitId,
                          $data->isAvailable );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCourseOccurrence($data)
    {
        $sql = 'UPDATE sprCourseOccurrence
                   SET courseVacantId         = ?,
                       courseId               = ?,
                       courseVersion          = ?,
                       turnId                 = ?,
                       unitId                 = ?,
                       isAvailable            = ?
                 WHERE courseOccurrenceId     = ?';

        $args = array( $data->courseVacantId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->isAvailable,
                       $data->courseOccurrenceId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseOccurrenceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCourseOccurrence($courseOccurrenceId)
    {
        $sql = 'DELETE FROM sprCourseOccurrence
                      WHERE courseOccurrenceId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $courseOccurrenceId));
        //$db->close();

        return $result;
    }

    public function listCourseOccurence($selectiveProcessId)
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT A.courseId || \'/\' || A.courseVersion || \'/\' || A.turnId || \'/\' ||A.unitId ,
                       C.shortName as courseName
                 FROM  sprCourseOccurrence A
             LEFT JOIN sprCourseVacant B
                    ON ( A.courseVacantId = B.courseVacantId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE B.selectiveProcessId = ? 
              ORDER BY C.shortName';

        if ( strlen((string)$selectiveProcessId)>0 )
        {
            $result = $db->query(SAGU::prepare($sql, $selectiveProcessId));
        }

        if ( !$result )
        {
            $result = array();
        }

        return $result;
    }

    public function listCourseOccurenceToInscription($selectiveProcessId, $availalbe = null)
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT A.courseId || \'/\' || A.courseVersion ||  \'/\' || A.turnId || \'/\' || A.unitId,
                       C.shortName || \' - \' || E.description || \' - \' || D.description as courseName 
                 FROM  sprCourseOccurrence A
             LEFT JOIN sprCourseVacant B
                    ON ( A.courseVacantId = B.courseVacantId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE B.selectiveProcessId = ? ';
        $args = array($selectiveProcessId);

        if ( strlen((string)$availalbe) > 0 )
        {
            $sql   .= ' AND A.isAvailable = ?';
            $args[] = $availalbe;
        }

        $sql .= ' ORDER BY C.shortName';


        if ( strlen((string)$selectiveProcessId)>0 )
        {
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        if ( !$result )
        {
            $result = array();
        }

        return $result;
    }

    public function listUnitFromCourseOccurence($selectiveProcessId)
    {
        $sql = '   SELECT DISTINCT A.unitId,
                                   C.description
                              FROM sprCourseOccurrence A
                        INNER JOIN sprCourseVacant B
                                ON (A.courseVacantId = B.courseVacantId)
                        INNER JOIN basUnit C
                                ON (C.unitId = A.unitId)
                             WHERE B.selectiveProcessId = \''.$selectiveProcessId.'\'';

        $db  = $this->getDatabase();

        $result = $db->query($sql);

        return $result;
    }
}

?>
