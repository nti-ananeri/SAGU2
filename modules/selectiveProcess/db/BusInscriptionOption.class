<?php
/**
 *
 * This file handles the connection and actions for sprSelectiveProcess table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcess table
 **/
class BusinessSelectiveProcessBusInscriptionOption extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessSelectiveProcessBusInscriptionOption()
    {
        $this->db = $this->getDatabase();
    }
    
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInscriptionOption()
    {
    
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $inscriptionId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInscriptionOption($inscriptionId)
    {
        $sql = 'SELECT A.inscriptionOptionId,
                       A.inscriptionId,
                       A.courseOccurrenceId,
                       A.optionNumber,
                       A.coursePosition
                  FROM sprInscriptionOption A
                 WHERE A.inscriptionId = ?
              ORDER BY A.optionNumber ';

        //$db     = $this->getDatabase();
        $result = $this->db->query(SAGU::prepare($sql, $inscriptionId));
        //$db->close();

        if ( is_array($result) )
        {
            foreach ( $result as $key => $r )
            {
                $inscription = new sprInscriptionOption();
                list ( $inscription->inscriptionOptionId,
                    $inscription->inscriptionId,
                    $inscription->courseOccurrenceId,
                    $inscription->optionNumber,
                    $inscription->coursePosition ) = $r;

                $inscriptionOption[] = $inscription;
                unset($inscription);
            }
        }

        return $inscriptionOption;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInscriptionOption($filters)
    {
       $sql = ' SELECT A.inscriptionOptionId,
                       A.inscriptionId,
                       A.courseOccurrenceId,
                       A.optionNumber,
                       A.coursePosition,
                       A.generalPosition
                  FROM sprInscriptionOption A
            INNER JOIN sprInscription B
                    ON (A.inscriptionId = B.inscriptionId)';

        if ( strlen((string)$filters->inscriptionId) > 0 )
        {
            $where .= ' AND A.inscriptionId = ? ';
            $args[] = $filters->inscriptionId;
        }

        if ( strlen((string)$filters->courseOccurrenceId) > 0 )
        {
            $where .= ' AND A.courseOccurrenceId = ? ';
            $args[] = $filters->courseOccurrenceId;
        }

        if ( strlen((string)$filters->optionNumber) > 0 )
        {
            $where .= ' AND A.optionNumber = ? ';
            $args[] = $filters->optionNumber;
        }

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND B.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ';
            //$db = $this->getDatabase();

            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    public function searchInscriptionOptionWeb($filters)
    {
       $sql = ' SELECT A.inscriptionOptionId,
                       A.inscriptionId,
                       C.courseId || \'/\' || C.courseVersion || \'/\' || C.turnId || \'/\' || C.unitId,
                       A.optionNumber,
                       A.coursePosition,
                       A.generalPosition
                  FROM sprInscriptionOption A
            INNER JOIN sprInscription B
                    ON (A.inscriptionId = B.inscriptionId)
            INNER JOIN sprCourseOccurrence C
                    ON (C.courseOccurrenceId = A.courseOccurrenceId)';

        if ( strlen((string)$filters->inscriptionId) > 0 )
        {
            $where .= ' AND A.inscriptionId = ? ';
            $args[] = $filters->inscriptionId;
        }

        if ( strlen((string)$filters->courseOccurrenceId) > 0 )
        {
            $where .= ' AND A.courseOccurrenceId = ? ';
            $args[] = $filters->courseOccurrenceId;
        }

        if ( strlen((string)$filters->optionNumber) > 0 )
        {
            $where .= ' AND A.optionNumber = ? ';
            $args[] = $filters->optionNumber;
        }

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND B.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ';
            //$db = $this->getDatabase();
            $result = $this->db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInscriptionOption($data)
    {
         $sql = 'INSERT INTO sprInscriptionOption
                            (inscriptionId,
                             courseOccurrenceId,
                             optionNumber,
                             coursePosition)
                     VALUES (?,?,?,?)';

        //$db     = $this->getDatabase();
        $args   = array ( $data->inscriptionId,
                          $data->courseOccurrenceId,
                          $data->optionNumber,
                          $data->coursePosition );

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInscriptionOption($data)
    {
        $sql = 'UPDATE sprInscriptionOption
                   SET courseOccurrenceId   = ?,
                       coursePosition       = ?
                 WHERE inscriptionId        = ? AND
                       optionNumber         = ?';

        $args   = array ( $data->courseOccurrenceId,
                          $data->coursePosition,
                          $data->inscriptionId,
                          $data->optionNumber);


        //$db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $inscriptionId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInscriptionOption($inscriptionId)
    {
        $sql = 'DELETE FROM sprInscriptionOption
                      WHERE inscriptionId = ? ';

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $inscriptionId));
        //$db->close();

        return $result;
    }

    /**
     * Delete a record by inscriptionOptionId
     *
     * @param $inscriptionOptionId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInscriptionOptionWithInscriptionOptionId($inscriptionOptionId)
    {
        $sql = 'DELETE FROM sprInscriptionOption
                      WHERE inscriptionOptionId = ? ';

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $inscriptionOptionId));
        //$db->close();

        return $result;
    }

    /**
     *
     **/
    public function listInscriptionOptionNotes()
    {
    }

    /**
     * Get course occurrence id
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $selectiveProcessId (integer): Selective process id
     * @param $courseId (integer): Course id
     * @param $unitId (integer): Unit id
     *
     * @return $courseOccurrenceId (integer): Course occurrence id
     **/
    function getCourseOccurrenceId($selectiveProcessId, $courseId, $unitId)
    {
        //$db = $this->GetDatabase();

        $sql = 'SELECT A.courseoccurrenceid 
                  FROM sprcourseoccurrence A 
             LEFT JOIN sprcoursevacant B 
                    ON A.coursevacantid = B.coursevacantid 
                 WHERE B.selectiveprocessid = ?
                   AND A.courseid = ?
                   AND A.unitid = ? ';

        $args = array( $selectiveProcessId,
                       $courseId,
                       $unitId );
                       
        $courseOccurrenceId = $this->db->query(SAGU::prepare($sql, $args));

        return $courseOccurrenceId[0][0];
    }

}

?>
