<?php
/**
 *
 * This file handles the connection and actions for sprSelectiveProcess table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcess table
 **/
class BusinessSelectiveProcessBusSelectiveProcessCopy extends Business
{

	/**
	 * Make a connection to the database
	 *
	 * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
	 *
	 * @return (object): A MIOLO Database connection
	 **/
	public function getDatabase($module = null)
	{
		$MIOLO = MIOLO::getInstance();
		$MIOLO->getClass('basic','sagu');
		$module = is_null($module) ? 'selectiveProcess' : $module;

		return $MIOLO->getDatabase($module);
	}

	/**
	 * List all records from the table handled by the class
	 *
	 * @param: None
	 *
	 * @returns (array): Return an array with the entire table
	 *
	 **/
	public function executeSelectiveProcessCopy($data)
	{
		$sql = "select newSelectiveProcess(?, ?, ?, ?, to_date(?,'dd/mm/yyyy'))";
		$args[] = $data->selectiveProcessId;
		$args[] = $data->periodId;
		$args[] = $data->description;
		$args[] = $data->selectiveProcessNumber;
		$args[] = $data->beginDate;
		$sql    = SAGU::prepare($sql, $args);
		$db     = $this->getDatabase();
		$result = $db->execute($sql);
		return $result;
	}

	public function executeSelectiveProcessTransfer($data)
	{
		$sql = " update sprInscription set selectiveProcessId = ? where selectiveProcessId = ? ";
		$sql .=" and personId not in
				(
					select distinct ac1.personId 
					from acdContract ac1 
					join sprinscription si1 on ac1.personid = si1.personid 
					join sprinscriptionoption sio1 on si1.inscriptionid = sio1.inscriptionid and sio1.optionnumber = 1 
					join sprcourseoccurrence sco1 on sco1.courseoccurrenceid = sio1.courseoccurrenceid
					and ac1.courseid = sco1.courseid and ac1.courseversion=sco1.courseversion and ac1.turnid=sco1.turnid and ac1.unitid=sco1.unitid
					where not iscontractout(ac1.contractid)
				)";
		$sql .= " and inscriptionid in (".$data->inscriptionsId.")";
		
		$sql .= " and not (isCanceled)";
		
		$args[] = $data->selectiveProcessToId;
		$args[] = $data->selectiveProcessFromId;		
		
		$sql    = SAGU::prepare($sql, $args);
		$db     = $this->getDatabase();
		$result = $db->execute($sql);
		return $result;
	}
	
	public function getInscriptionsGrid($data){
		
		$sql = "select A.inscriptionid
		             , A.personId
		             , B.name
			      from sprinscription A 
	   inner join only basperson B on B.personid = A.personid
	 			 where A.personId not in
							(
								select distinct ac1.personId 
								from acdContract ac1 
								join sprinscription si1 on ac1.personid = si1.personid 
								join sprinscriptionoption sio1 on si1.inscriptionid = sio1.inscriptionid and sio1.optionnumber = 1 
								join sprcourseoccurrence sco1 on sco1.courseoccurrenceid = sio1.courseoccurrenceid
								and ac1.courseid = sco1.courseid and ac1.courseversion=sco1.courseversion and ac1.turnid=sco1.turnid and ac1.unitid=sco1.unitid
								where not iscontractout(ac1.contractid)
							)
				  and A.selectiveprocessid = ?";
		
		$args = array($data);
		$sql    = SAGU::prepare($sql, $args);
		$db     = $this->getDatabase();
		$result = $db->query($sql);
		return $result;
		
	}
	
}

?>
