<?php
/**
 *
 * This file handles the connection and actions for sprAnswerSheet table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 08/12/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprAnswerSheet table
 **/
class BusinessSelectiveProcessBusAnswerSheet extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function listAnswerSheet()
        {
        }

    public function getNumberQuestions($selectiveProcessId)
    {
        if ( isset($selectiveProcessId) )
        {
            $sql = 'SELECT SUM(numberQuestions)
                      FROM sprExamOccurrence
                     WHERE selectiveProcessId = ?
                       AND isAnswerSheet = true';

            // AND selectiveprocesstypeid IN(' . ANSWER_SHEET_SELECTIVE_PROCESS . ')

            $db     = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $selectiveProcessId ));

            return $result[0][0];
        }
    }

    public function getExams($selectiveProcessId)
    {
        if ( isset($selectiveProcessId) )
        {
             $sql = 'SELECT B.shortDescription, 
                            A.numberquestions
                       FROM sprExamOccurrence A,
                            sprExam B
                      WHERE A.selectiveProcessId = ?
                        AND (A.examid = B.examid)
                        AND isAnswerSheet = true';

// AND A.selectiveprocesstypeid IN(' . ANSWER_SHEET_SELECTIVE_PROCESS . ')

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $selectiveProcessId ));

//             return $result[0][0];
              return $result;
        }
    }




    /**
     * Return a specific record from the database
     *
     * @param $examOccurrenceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getAnswerSheet($selectiveProcessId)
    {
        $sql = 'SELECT A.selectiveProcessId,
                       A.numberQuestion,
                       A.option,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM sprAnswerSheet A
                 WHERE A.selectiveProcessId = ?
              ORDER BY A.numberQuestion ASC';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $selectiveProcessId ));
        //$db->close();

        if ( strlen((string)$result) > 0 )
        {
            foreach ( $result as $r )
            {
                $aS = new sprAnswerSheet();
                list ( $aS->selectiveProcessId,
                       $aS->numberQuestion,
                       $aS->option,
                       $aS->userName,
                       $aS->dateTime,
                       $aS->ipAddress) = $r;
                $answerSheet[] = $aS;
            }
        }

        return $answerSheet;

    }

    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchAnswerSheet($filters)
    {
        $sql = 'SELECT DISTINCT A.selectiveProcessId
                           FROM sprAnswerSheet A ';

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->numberQuestion) > 0 )
        {
            $where .= ' AND A.numberQuestion = ? ';
            $args[] = $filters->numberQuestion;
        }
        if ( strlen((string)$filters->option) > 0 )
        {
            $where .= ' AND A.option = ? ';
            $args[] = $filters->option;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    public function countAnswerSheet($filters)
    {
        $sql = 'SELECT count(*)
                  FROM sprAnswerSheet A ';

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }

        unset($result);

        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertAnswerSheet($data)
    {
        $sql = 'INSERT INTO sprAnswerSheet
                            (selectiveProcessId,
                             numberQuestion,
                             option)
                     VALUES (?,?,?)';

        $args   = array ( $data->selectiveProcessId,
                          $data->numberQuestion,
                          $data->option);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAnswerSheet($data)
    {
        $sql = 'UPDATE sprAnswerSheet
                   SET option               = ?
                 WHERE selectiveProcessId   = ?
                   AND numberQuestion       = ?';

        $args = array( $data->option,
                       $data->selectiveProcessId,
                       $data->numberQuestion);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $examOccurrenceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAnswerSheet($selectiveProcessId)
    {
        $sql = 'DELETE FROM sprAnswerSheet
                      WHERE selectiveProcessId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $selectiveProcessId));
        //$db->close();

        return $result;
    }

    public function beginTransaction()
    {
        $db = $this->getDatabase();
        $db->execute('BEGIN TRANSACTION');

    }

    public function commit()
    {
        $db = $this->getDatabase();
        $db->execute('COMMIT');

    }


}

?>
