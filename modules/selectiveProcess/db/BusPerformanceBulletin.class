<?php
/**
 *
 * This file handles the connection and actions for Pupils and schools' performance bulletin table
 *
 * @author Hélio H. R. Guimaras [helio@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprPupilsAndSchoolsPerformanceBulletinPupilsData table
 **/
class BusinessSelectiveProcessBusPerformanceBulletin extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
//     public function searchSchools($filters)
//     {
// 
//         $sql = 'SELECT  E.institutionIdHs AS personId,
//                         F.currentName,
//                         count (A.personId)
//                    FROM sprInscription A
//              INNER JOIN sprInscriptionOption B
//                      ON ( A.inscriptionId = B.inscriptionId )
//              INNER JOIN sprCourseOccurrence C
//                      ON ( B.courseOccurrenceId = C.courseOccurrenceId )
//              INNER JOIN sprCourseVacant D
//                      ON ( C.courseVacantId = D.courseVacantId )
// 	 LEFT JOIN ONLY basPhysicalPersonStudent E
//                      ON ( E.personId = A.personId )
//          LEFT JOIN ONLY basLegalPerson F
//                      ON ( F.personId = E.institutionIdHs )
//                   WHERE B.optionNumber = 1
//                     AND B.position <= D.vacant ';
// 
// 
//         if ( strlen((string)$filters->selectiveProcessId) > 0 )
//         {
//             $where .= ' AND A.selectiveProcessId = ? ';
//             $args[] = $filters->selectiveProcessId;
//         }
//         
//         if ( strlen((string)$filters->personId) > 0 )
//         {
//             $where .= ' AND F.personId = ? ';
//             $args[] = $filters->personId;
//         }
// 
//         unset($result);
//         if ( strlen((string)$where) > 0 )
//         {
//             $db = $this->getDatabase();
//             $sql .= $where . ' GROUP BY E.institutionIdHs, F.currentName
// 	       ORDER BY F.currentName ';
// 
//             $result = $db->query(SAGU::prepare($sql, $args));
//             //$db->close();
//         }
//         return $result;
//     }

    public function pupilsData($filters)
    {
        $sql = ' SELECT DISTINCT A.inscriptionId,
                                 E.personId,
                                 E.name,
                                 E.sex,
                                 E.maritalstatusid,
                                 TO_CHAR(E.datebirth, \''.MASK_DATE.'\'),
                                 K.content,
                                 K.organ,
                                 E.location,
                                 E.number,
                                 E.complement,
                                 round(A.totalPoints::numeric, '.ROUND_VALUE_CLASSIFICATION.'),
                                 E.neighborhood,
                                 E.zipcode,
                                 L.name,
                                 B.coursePosition,
                                 B.generalPosition,
                                 A.isClassified
                            FROM sprInscription A
                      INNER JOIN sprInscriptionOption B
                              ON ( A.inscriptionId = B.inscriptionId )
                       LEFT JOIN sprCourseOccurrence C
                              ON (B.courseOccurrenceId = C.courseOccurrenceId)
                      INNER JOIN basUnit D
                              ON ( C.unitId = D.unitId )
                  LEFT JOIN ONLY basPhysicalPersonStudent E
                              ON ( A.personId = E.personId )
                      INNER JOIN sprCourseVacant G
                              ON ( C.courseVacantId = G.courseVacantId )
                      INNER JOIN acdCourse I
                              ON ( C.courseId = I.courseId)
                      INNER JOIN acdCourseVersion J
                              ON ( I.courseId = J.courseId )
                       LEFT JOIN basDocument K
                              ON (K.personId = A.personId AND
                                  K.documenttypeid = ' . RG_CODE . ')
                       LEFT JOIN basCity L
                              ON (L.cityId = E.cityId)
                           WHERE A.selectiveProcessId = ?
                             AND B.optionNumber = 1
                             AND B.coursePosition <= G.vacant';


        $args[] = $filters->selectiveProcessId;

        if ( strlen((string)$filters->inscriptionId) > 0 )
        {
            $where .= ' AND A.inscriptionId = ? ';
            $args[] = $filters->inscriptionId;
        }

        if ( strlen((string)$filters->legalPersonId) > 0 )
        {
            $where .= ' AND E.institutionIdHs = ? ';
            $args[] = $filters->legalPersonId;
        }

        if ( strlen((string)$filters->cityExamId) > 0 )
        {
            $where .= ' AND A.cityExam = ? ';
            $args[] = $filters->cityExamId;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND C.unitId = ? ';
            $args[] = $filters->unitId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= $where . ' ORDER BY B.coursePosition, E.name ';
        }

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }


    /**
    *   Function to get courses of options in selective process
    **/
    public function getCourseOfOptions($inscriptionId)
    {
        $sql1 = '   SELECT D.courseId,
                           D.shortName
                      FROM sprInscription A
                INNER JOIN sprInscriptionOption B
                        ON ( A.inscriptionId = B.inscriptionId )
                LEFT JOIN sprCourseOccurrence C
                        ON (B.courseOccurrenceId = C.courseOccurrenceId)
                INNER JOIN acdCourse D
                        ON ( C.courseId = D.courseId)
                     WHERE A.inscriptionId = ?
                  ORDER BY B.optionnumber  ';

        $db1 = $this->getDatabase();
        $result1 = $db1->query(SAGU::prepare($sql1, $inscriptionId ));

        return $result1;
    }


    /**
    *   Function to get exams notes 
    **/
    public function getExamNote($inscriptionId)
    {
        $sql1 = 'SELECT DISTINCT TO_CHAR(A.examDateTime, \'' . MASK_DATE . '\'),
                         B.description AS examDescription,
                         C.note
                    FROM sprExamOccurrence A
              INNER JOIN sprExam B
                      ON (A.examId = B.examId)
              INNER JOIN sprNote C
                      ON (C.examOccurrenceId = A.examOccurrenceId)
              INNER JOIN sprSelectiveProcessOccurrence G
                      ON (G.selectiveProcessId = A.selectiveProcessId AND 
                          G.isMain = \''.DB_TRUE.'\')
                   WHERE C.inscriptionId = ? 
                     AND A.selectiveProcessTypeId = G.selectiveProcessTypeId';

// (C.note * F.weight) / (SELECT maximumPoints 
//                                                        FROM sprSelectiveProcess
//                                                       WHERE selectiveProcessId = A.selectiveprocessid ) as examNote

//               INNER JOIN sprInscriptionOption D
//                       ON (D.inscriptionId = D.inscriptionId AND
//                           D.optionNumber = 1)
//               INNER JOIN sprCourseOccurrence E
//                       ON (D.courseOccurrenceId = E.courseOccurrenceId)
//               INNER JOIN sprCourseExamBalance F
//                       ON (F.examOccurrenceId = A.examOccurrenceId AND
//                           F.courseVacantId   = E.courseVacantId )

        $args = array ($inscriptionId);

        $db1 = $this->getDatabase();
        $result1 = $db1->query(SAGU::prepare($sql1, $args));

        return $result1;
    }


    /**
    *   Function to get the selectiveProcessTypeDescription
    *   from totalPoits of one inscriptionId
    **/
    public function getSelectiveProcessTypeDescriptioToTotalPoints($inscriptionId)
    {
        $sql1 = 'SELECT selectiveProcessId,
                        description,
                        totalPoints,
                        totalPointsSelectiveProcessType,
                        selectiveProcessTypeId,
                        selectiveProcessId
                   FROM
                        ( SELECT B.selectiveProcessId,
                                 H.description,
                                 I.totalPoints,
                                 round( ( SUM((A.note / B.maximumPoints) * G.weight) / 
                                                                        (SELECT SUM(AE.weight)
                                                                           FROM sprInscription AA
                                                                     INNER JOIN sprCourseVacant AB
                                                                             ON (AB.selectiveProcessId = AA.selectiveProcessId)
                                                                     INNER JOIN sprInscriptionOption AC
                                                                             ON (AC.inscriptionId = \''.$inscriptionId.'\' AND 
                                                                                 AC.optionNumber = 1)
                                                                      INNER JOIN sprCourseOccurrence AD
                                                                              ON (AD.courseOccurrenceId = AC.courseOccurrenceId AND
                                                                                  AD.courseVacantId = AB.courseVacantId)
                                                                      INNER JOIN sprExamOccurrence AF
                                                                              ON (AF.selectiveProcessTypeId = B.selectiveProcessTypeId AND AF.selectiveProcessId = AA.selectiveProcessId)
                                                                      INNER JOIN sprCourseExamBalance AE
                                                                              ON (AE.courseVacantId = AD.courseVacantId AND
                                                                                  AE.examOccurrenceId = AF.examOccurrenceId)
                                                                           WHERE (AA.inscriptionId = \''.$inscriptionId.'\'))
                                                                        * (SELECT maximumPoints 
                                                                             FROM sprSelectiveProcess
                                                                            WHERE selectiveProcessId = B.selectiveProcessId))::numeric, '.ROUND_VALUE_CLASSIFICATION.') as totalPointsSelectiveProcessType,
                                 B.selectiveProcessTypeId
                            FROM sprNote A
                      INNER JOIN sprExamOccurrence B
                              ON (A.examOccurrenceId = B.examOccurrenceId)
                      INNER JOIN sprSelectiveProcessOccurrence C
                              ON (C.selectiveProcessTypeId = B.selectiveProcessTypeId AND
                                  C.selectiveProcessId = B.selectiveProcessId)
                      INNER JOIN sprExam D
                              ON (D.examId = B.examId)
                      INNER JOIN sprInscriptionOption E
                              ON (E.inscriptionId = A.inscriptionId AND
                                  E.optionNumber  = 1)
                      INNER JOIN sprCourseOccurrence F
                              ON (E.courseOccurrenceId = F.courseOccurrenceId)
                      INNER JOIN sprCourseExamBalance G
                              ON (G.examOccurrenceId = A.examOccurrenceId AND
                                  G.courseVacantId = F.courseVacantId)
                      INNER JOIN sprSelectiveProcessType H
                              ON (H.selectiveProcessTypeId = C.selectiveProcessTypeId)
                      INNER JOIN sprInscription I
                              ON (I.inscriptionId = A.inscriptionId)
                           WHERE A.inscriptionId = ?
                        GROUP BY 1, 2, 3, 5
                         ) as XX
                  WHERE totalPointsSelectiveProcessType = totalPoints';

        $args = array ($inscriptionId);

        $db1 = $this->getDatabase();

        $result1 = $db1->query(SAGU::prepare($sql1, $args));

        return $result1[0][1];
    }


}

?>
