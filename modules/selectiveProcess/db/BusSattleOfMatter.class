<?php
/**
 *
 * This file handles the connection and actions for sprSattleOfMatter table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/10/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSattleOfMatter table
 **/
class BusinessSelectiveProcessBusSattleOfMatter extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSattleOfMatter()
    {
        $sql = 'SELECT sattleOfMatterId,
                       description
                  FROM sprSattleOfMatter
              ORDER BY description';

        $db     = $this->getDatabase();
        $result = $db->query($sql);
        //$db->close();

        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $sattleOfMatterId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSattleOfMatter($sattleOfMatterId)
    {
        $sql = 'SELECT A.sattleOfMatterId,
                       A.examOccurrenceId,
                       A.courseVacantId,
                       A.priority,
                       B.selectiveProcessId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM sprSattleOfMatter A,
                       sprExamOccurrence B
                 WHERE A.examOccurrenceId = B.examOccurrenceId
                   AND A.sattleOfMatterId = ? ';

        $pk = array(
                     $sattleOfMatterId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        //$db->close();

        $sattleOfMatter = new SprSattleOfMatter();

        list ( $sattleOfMatter->sattleOfMatterId,
               $sattleOfMatter->examOccurrenceId,
               $sattleOfMatter->courseVacantId,
               $sattleOfMatter->priority,
               $sattleOfMatter->selectiveProcessId,
               $sattleOfMatter->userName,
               $sattleOfMatter->dateTime,
               $sattleOfMatter->ipAddress ) = $result[0];

        return $sattleOfMatter; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSattleOfMatter($filters)
    {
        $sql = 'SELECT A.sattleOfMatterId,
                       A.examOccurrenceId,
                       E.description,
                       A.courseVacantId,
                       B.description AS courseVacantDescription,
                       A.priority,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM sprSattleOfMatter A
             LEFT JOIN sprCourseVacant B
                    ON (B.courseVacantId = A.courseVacantId)
             LEFT JOIN sprCourseOccurrence C
                    ON (A.courseVacantId = C.courseVacantId)
             LEFT JOIN sprExamOccurrence D
                    ON ( A.examOccurrenceId = D.examOccurrenceId )
             LEFT JOIN sprExam E
                    ON ( E.examId = D.examId)';

        if ( strlen((string)$filters->sattleOfMatterId) > 0 )
        {
            $where .= ' AND A.sattleOfMatterId = ?';
            $args[] = $filters->sattleOfMatterId;
        }
        if ( strlen((string)$filters->examOccurrenceId) > 0 )
        {
            $where .= ' AND A.examOccurrenceId = ?';
            $args[] = $filters->examOccurrenceId;
        }
        if ( strlen((string)$filters->courseVacantId) > 0 )
        {
            $where .= ' AND A.courseVacantId = ?';
            $args[] = $filters->courseVacantId;
        }
        if ( strlen((string)$filters->courseVacantDescription) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?)';
            $args[] = $filters->courseVacantDescription . '%';
        }
        if ( strlen((string)$filters->priority) > 0 )
        {
            $where .= ' AND A.priority = ?';
            $args[] = $filters->priority;
        }
        if ( strlen((string)$filters->courseId) > 0 )
        {
            $where .= ' AND C.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen((string)$filters->courseVersion) > 0 )
        {
            $where .= ' AND C.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen((string)$filters->unitId) > 0 )
        {
            $where .= ' AND C.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND D.selectiveProcessId = ?';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->selectiveProcessTypeId) > 0 )
        {
            $where .= ' AND D.selectiveProcessTypeId = ?';
            $args[] = $filters->selectiveProcessTypeId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.priority';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSattleOfMatter($data)
    {
        $sql = 'INSERT INTO sprSattleOfMatter
                            (examOccurrenceId,
                             courseVacantId,
                             priority)
                     VALUES (?,
                             ?,
                             ?)';

        $args = array(
                       $data->examOccurrenceId,
                       $data->courseVacantId,
                       $data->priority
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSattleOfMatter($data)
    {
        $sql = 'UPDATE sprSattleOfMatter
                   SET examOccurrenceId     = ?,
                       courseVacantId       = ?,
                       priority             = ?
                 WHERE sattleOfMatterId     = ?';

        $args = array( 
                       $data->examOccurrenceId,
                       $data->courseVacantId,
                       $data->priority,
                       $data->sattleOfMatterId
                     );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $sattleOfMatterId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSattleOfMatter($sattleOfMatterId)
    {
        $sql = 'DELETE FROM sprSattleOfMatter
                      WHERE sattleOfMatterId = ?';

        $pk = array(
                     $sattleOfMatterId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        //$db->close();

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSattleOfMatterSelectiveProcessId($filters)
    {
        $db      = $this->getDatabase();

        $sql1    = ' SELECT DISTINCT courseVacantId
                                FROM sprSattleOfMatter
                               WHERE examOccurrenceId = ?
                                 AND courseVacantId IS NOT NULL ';

        $args1   = array( $filters->examOccurrenceId );

        $result1 = $db->query(SAGU::prepare($sql1, $args1));

        $args2 = array( $filters->selectiveProcessId );

        if ( count($result1) > 0 )
        {
            //Existem cadastro de vagas
            $sql2 = 'SELECT A.courseVacantId
                       FROM sprCourseVacant A
                      WHERE A.selectiveProcessId = ?
                        AND A.courseVacantId NOT IN (SELECT DISTINCT courseVacantId
                                                              FROM sprSattleOfMatter
                                                             WHERE examOccurrenceId = ? ) ';

            $args2[] = $filters->examOccurrenceId;
        }
        else
        {
            //Não existe nenhuma vaga cadastrada ainda
            $sql2 = 'SELECT courseVacantId
                       FROM sprCourseVacant
                      WHERE selectiveProcessId = ? ';
        }

        $result2 = $db->query(SAGU::prepare($sql2, $args2));

        return $result2;
    }
    /**
     * Return the array with priority and examOccurrenceId
     *
     * @param $sattleOfMatterId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSattleOfMatterToPriotiry($courseVacantId, $selectiveProcessId = NULL)
    {
        $select = 'SELECT DISTINCT NULL,
                                   A.examOccurrenceId';

        $from   = ' FROM sprSattleOfMatter A
              INNER JOIN sprExamOccurrence B
                      ON (B.examOccurrenceId = A.examOccurrenceId) ';

        if ( $courseVacantId != NULL )
        {
            $select .= ', A.courseVacantId,
                          A.priority';

            $where  .= ' AND A.courseVacantId = ? ';
            $args[] = $courseVacantId;
        }
        else if ( $selectiveProcessId != NULL )
        {
            $select .= ', NULL,
                          A.priority';

            $where  .= ' AND B.selectiveProcessId = ?
                         AND A.courseVacantId IS NULL';
            $args[] = $selectiveProcessId;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql .= $select;
            $sql .= $from;

            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.priority ASC';

            $db = $this->getDatabase();
            $sattlesOfMatter = $db->query(SAGU::prepare($sql, $args));
        }

        if ( is_array($sattlesOfMatter) && ( count($sattlesOfMatter) > 0 ) )
        {
            //Tem critério de desempate
            foreach($sattlesOfMatter as $sattleOfMatter)
            {
                if ( $sattleOfMatter[3] != $key )
                {
                    $key = $sattleOfMatter[3];
                    $x = 0;
                }
                $resultSattleOfMatter[$sattleOfMatter[3]][$x++] = $sattleOfMatter[1];
            }
        }
        else
        {
            //Não tem critério de desempate
        }

        return $resultSattleOfMatter; 
    }
}

?>
