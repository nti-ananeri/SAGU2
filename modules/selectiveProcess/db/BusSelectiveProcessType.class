<?php
/**
 *
 * This file handles the connection and actions for sprSelectiveProcessType table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcessType table
 **/
class BusinessSelectiveProcessBusSelectiveProcessType extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSelectiveProcessType()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT selectiveProcessTypeId,
                       description
                  FROM sprSelectiveProcessType
              ORDER BY description';
        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }

    public function listSelectiveProcessTypeToSelectiveProcessId($selectiveProcessId)
    {
        $db  = $this->getDatabase();

        $sql = ' SELECT B.selectiveProcessTypeId,
                        B.description
                   FROM sprSelectiveProcessOccurrence A
             INNER JOIN sprSelectiveProcessType B
                     ON ( A.selectiveProcessTypeId = B.selectiveProcessTypeId )
                  WHERE A.selectiveProcessId = \''.$selectiveProcessId.'\'';

        $ret = $db->query($sql);
        //$db->close();
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $selectiveProcessTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSelectiveProcessType($selectiveProcessTypeId)
    {
        $sql = 'SELECT selectiveProcessTypeId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . MASK_TIMESTAMP . '\'),
                       ipAddress
                  FROM sprSelectiveProcessType
                 WHERE selectiveProcessTypeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $selectiveProcessTypeId));
        //$db->close();

        $selectiveProcessType = new sprSelectiveProcessType();
        list ( $selectiveProcessType->selectiveProcessTypeId,
               $selectiveProcessType->description,
               $selectiveProcessType->userName,
               $selectiveProcessType->dateTime,
               $selectiveProcessType->ipAddress ) = $result[0];

        return $selectiveProcessType;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSelectiveProcessType($filters)
    {
        $sql= 'SELECT selectiveProcessTypeId,
                      description
                 FROM sprSelectiveProcessType ';

        if ( strlen((string)$filters->selectiveProcessTypeId) > 0 )
        {
            $where .= ' AND selectiveProcessTypeId = ? ';
            $args[] = $filters->selectiveProcessTypeId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSelectiveProcessType($data)
    {
//selectiveProcessTypeId,
//?,
//$data->selectiveProcessTypeId,
        $sql = 'INSERT INTO sprSelectiveProcessType
                            (
                             description)
                     VALUES (?)';

        $db     = $this->getDatabase();
        $args   = array ( 
                          $data->description );
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSelectiveProcessType($data)
    {
        $sql = 'UPDATE sprSelectiveProcessType
                   SET description            = ?
                 WHERE selectiveProcessTypeId = ?';

        $args = array( $data->description,
                       $data->selectiveProcessTypeId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $selectiveProcessTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSelectiveProcessType($selectiveProcessTypeId)
    {
        $sql = 'DELETE FROM sprSelectiveProcessType
                      WHERE selectiveProcessTypeId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $selectiveProcessTypeId));
        //$db->close();

        return $result;
    }

}

?>
