<?php
/**
 *
 * This file handles the connection and actions for sprSelectiveProcessTypeData table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcessTypeData table
 **/
class BusinessSelectiveProcessBusSelectiveProcessTypeData extends Business
{
    public $db;
    
    /**
     * Class constructor
     **/
    public function BusinessSelectiveProcessBusSelectiveProcessTypeData()
    {
        $this->db = $this->getDatabase();
    }
     
    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSelectiveProcessTypeData()
    {

    }

    /**
     * Return a specific record from the database
     *
     * @param $selectiveProcessTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSelectiveProcessTypeData($inscriptionId, $selectiveProcessTypeId)
    {
        $sql = ' SELECT inscriptionId,
                        selectiveProcessTypeId,
                        numberInscription
                   FROM sprSelectiveProcessTypeData
                  WHERE inscriptionId = ?
                    AND selectiveProcessTypeId = ? ';

        //$db     = $this->getDatabase();
        $args   = array ( $inscriptionId,
                          $selectiveProcessTypeId );

        $result = $this->db->query(SAGU::prepare($sql, $args));
        //$db->close();

        list ( $selectiveProcessTypeData->inscriptionId,
               $selectiveProcessTypeData->selectiveProcessTypeId,
               $selectiveProcessTypeData->numberInscription ) = $result[0];

        return $selectiveProcessTypeData;

    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSelectiveProcessTypeData($filters)
    {
        //$db     = $this->getDatabase();

        $sql = 'SELECT A.inscriptionId,
                       A.selectiveProcessTypeId,
                       A.numberInscription
                  FROM sprSelectiveProcessTypeData A';

        if ( strlen((string)$filters->inscriptionId) > 0 )
        {
            $where .= ' AND A.inscriptionId = ? ';
            $args[] = $filters->inscriptionId;
        }

        if ( strlen((string)$filters->selectiveProcessTypeId)>0 )
        {
            $where .= ' AND A.selectiveProcessTypeId = ? ';
            $args[] = $filters->selectiveProcessTypeId;
        }

        if ( strlen((string)$filters->numberInscription)>0 )
        {
            $where .= ' AND A.numberInscription = ? ';
            $args[] = $filters->numberInscription;
        }

        if ( strlen((string)$where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4, strlen((string)$where));

            $result = $this->db->query(SAGU::Prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSelectiveProcessTypeData($data)
    {
        $sql = 'INSERT INTO sprSelectiveProcessTypeData
                            (inscriptionId,
                             selectiveProcessTypeId,
                             numberInscription)
                     VALUES (?,?,?)';

        //$db     = $this->getDatabase();
        $args   = array ( $data->inscriptionId,
                          $data->selectiveProcessTypeId,
                          $data->numberInscription );

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSelectiveProcessTypeData($data)
    {
        $sql = ' UPDATE sprSelectiveProcessTypeData
                    SET numberInscription = ?
                  WHERE inscriptionId = ?
                    AND selectiveProcessTypeId = ? ';

        //$db     = $this->getDatabase();
        $args   = array ( $data->numberInscription,
                          $data->inscriptionId,
                          $data->selectiveProcessTypeId );

        $result = $this->db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $selectiveProcessTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSelectiveProcessTypeData($inscriptionId, $selectiveProcessTypeId = null)
    {
        $sql = 'DELETE FROM sprSelectiveProcessTypeData
                      WHERE inscriptionId = ?';

        if ( strlen((string)$selectiveProcessTypeId) > 0 )
        {
            $sql .= ' AND selectiveProcessTypeId = '.$selectiveProcessTypeId.'';
        }

        //$db     = $this->getDatabase();
        $result = $this->db->execute(SAGU::prepare($sql, $inscriptionId));
        //$db->close();

        return $result;
    }

}

?>
