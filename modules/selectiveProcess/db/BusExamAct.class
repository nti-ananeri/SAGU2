<?php
/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/06/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the sprInscriptionReport table
 **/
class BusinessSelectiveProcessBusExamAct extends Business
{

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Report of inscriptions for room
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForRoom($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

//        $sql = ' SELECT A.cityExam,
//                        B.name,
//                        A.placeRoomId,
//                        C.room,
//                        C.build,
//                        count(A.inscriptionId),
//                        C.vacant
//                   FROM sprInscription A
//              LEFT JOIN basCity B
//                     ON (B.cityId = A.cityExam)
//              LEFT JOIN sprPlaceRoom C
//                     ON (A.placeRoomId = C.placeRoomId)
//                  WHERE A.selectiveProcessId = ?
//               GROUP BY A.cityExam, B.name, A.placeRoomId, C.room, C.build, C.vacant
//               ORDER BY B.name, C.build, C.room ';
         $sql = 'SELECT D.cityId,
                        D.name,
                        A.placeRoomId,
                        B.room,
                        B.build,
                        count(A.inscriptionId),
                        B.vacant
                   FROM sprInscription A 
             INNER JOIN sprPlaceRoom B
                     ON (B.placeRoomId = A.placeRoomId)
             INNER JOIN sprPlace C
                     ON (C.placeId = B.placeId)
             INNER JOIN basCity D
                     ON (D.cityId = C.cityId)
                  WHERE A.selectiveProcessId = ?
               GROUP BY 1, 2, 3, 4, 5, 7';


        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }


    public function roomsOfAct($filters)
    {
       $sql = ' SELECT A.placeRoomId, 
                       A.room, 
                       A.build, 
                       C.name
                  FROM sprPlaceRoom A
            INNER JOIN sprPlace B
                    ON (B.placeId = A.placeId)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId) ';

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }

        if ( strlen((string)$filters->cityExamId) > 0 )
        {
            $where .= ' AND B.cityId = ? ';
            $args[] = $filters->cityExamId;
        }


        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.cityId, A.placeRoomId';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

}

?>
