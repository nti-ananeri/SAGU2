<?php
/**
 *
 * This file handles the connection and actions for sprPlaceRoom table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprPlaceRoom table
 **/
class BusinessSelectiveProcessBusPlaceRoom extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $placeRoomId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPlaceRoom($placeRoomId)
    {
        $sql = 'SELECT A.placeRoomId,
                       A.selectiveProcessId,
                       B.description,
                       A.placeId,
                       C.description,
                       A.room,
                       A.build,
                       A.vacant,
                       A.priority,
                       A.specialNecessity,
                       A.languageId,
                       D.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.isInternet,
                       A.isHighSchool
                  FROM sprPlaceRoom A
             LEFT JOIN sprSelectiveProcess B
                    ON ( A.selectiveProcessId = B.selectiveProcessId )
             LEFT JOIN sprPlace C
                    ON ( A.placeId            = C.placeId )
             LEFT JOIN sprLanguage D
                    ON ( A.languageId         = D.languageId )
                 WHERE A.placeRoomId          = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $placeRoomId));
        //$db->close();

        $placeRoom = new sprPlaceRoom();

        list ( $placeRoom->placeRoomId,
               $placeRoom->selectiveProcessId,
               $placeRoom->selectiveProcessDescription,
               $placeRoom->placeId,
               $placeRoom->placeDescription,
               $placeRoom->room,
               $placeRoom->build,
               $placeRoom->vacant,
               $placeRoom->priority,
               $placeRoom->specialNecessity,
               $placeRoom->languageId,
               $placeRoom->languageDescription,
               $placeRoom->userName,
               $placeRoom->dateTime,
               $placeRoom->ipAddress,
               $placeRoom->isInternet,
               $placeRoom->isHighSchool ) = $result[0];

        return $placeRoom;
    }


    /**
     * Return a specific record from the database
     *
     * @param $placeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPlaceRoomFromPlace($placeId)
    {
        $sql = 'SELECT A.placeRoomId,
                       A.selectiveProcessId,
                       A.languageId,
                       A.placeId,
                       A.room,
                       A.build,
                       A.vacant,
                       A.priority,
                       A.specialNecessity
                  FROM sprPlaceRoom A
                 WHERE A.placeId = ?
              ORDER BY A.priority ASC';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $placeId));

        $placeRoom = new sprPlaceRoom();
        list ( $placeRoom->placeRoomId,
               $placeRoom->selectiveProcessId,
               $placeRoom->languageId,
               $placeRoom->placeId,
               $placeRoom->room,
               $placeRoom->build,
               $placeRoom->vacant,
               $placeRoom->priority,
               $placeRoom->specialNecessity ) = $result[0];

        return $placeRoom;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPlaceRoom($filters)
    {
        $sql = 'SELECT A.placeRoomId,
                       A.selectiveProcessId,
                       B.description,
                       A.placeId,
                       C.description,
                       A.room,
                       A.build,
                       A.vacant,
                       A.priority,
                       A.specialNecessity,
                       A.languageId,
                       D.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM sprPlaceRoom A
             LEFT JOIN sprSelectiveProcess B
                    ON ( A.selectiveProcessId = B.selectiveProcessId )
             LEFT JOIN sprPlace C
                    ON ( A.placeId            = C.placeId )
             LEFT JOIN sprLanguage D
                    ON ( A.languageId         = D.languageId ) ';

        if ( strlen((string)$filters->placeRoomId) > 0 )
        {
            $where .= ' AND A.placeRoomId = ? ';
            $args[] = $filters->placeRoomId;
        }
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->placeId) > 0 )
        {
            $where .= ' AND A.placeId = ? ';
            $args[] = $filters->placeId;
        }
        if ( strlen((string)$filters->languageId) > 0 )
        {
            $where .= ' AND A.languageId = ? ';
            $args[] = $filters->languageId;
        }
        if ( strlen((string)$filters->room) > 0 )
        {
            $where .= ' AND A.room ILIKE ? ';
            $args[] = $filters->room;
        }
        if ( strlen((string)$filters->build) > 0 )
        {
            $where .= ' AND A.build ILIKE ? ';
            $args[] = $filters->build;
        }
        if ( strlen((string)$filters->specialNecessity) > 0 )
        {
            $where .= ' AND A.specialNecessity = ? ';
            $args[] = $filters->specialNecessity;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.description, 
                                                               C.description';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPlaceRoom($data)
    {
        $sql = 'INSERT INTO sprPlaceRoom
                            (selectiveProcessId,
                             placeId,
                             room,
                             build,
                             vacant,
                             priority,
                             specialNecessity,
                             languageId,
                             isInternet,
                             isHighSchool)
                     VALUES (?,?,?,?,?,?,?,?,?,?)';

        $db     = $this->getDatabase();
        $args   = array ( $data->selectiveProcessId,
                          $data->placeId,
                          $data->room,
                          $data->build,
                          $data->vacant,
                          $data->priority,
                          $data->specialNecessity,
                          $data->languageId,
                          $data->isInternet,
                          $data->isHighSchool );

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePlaceRoom($data)
    {
        $sql = 'UPDATE sprPlaceRoom
                   SET selectiveProcessId = ?,
                       placeId            = ?,
                       room               = ?,
                       build              = ?,
                       vacant             = ?,
                       priority           = ?,
                       specialNecessity   = ?,
                       languageId         = ?,
                       isInternet         = ?,
                       isHighSchool       = ?
                 WHERE placeRoomId        = ?';

        $args   = array ( $data->selectiveProcessId,
                          $data->placeId,
                          $data->room,
                          $data->build,
                          $data->vacant,
                          $data->priority,
                          $data->specialNecessity,
                          $data->languageId,
                          $data->isInternet,
                          $data->isHighSchool,
                          $data->placeRoomId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $placeRoomId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePlaceRoom($placeRoomId)
    {
        $sql = 'DELETE FROM sprPlaceRoom
                      WHERE placeRoomId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $placeRoomId));

        return $result;
    }

    /**
     * list the place room for inscription
     *
     * @author: Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $selectiveProcessId (int): selective process id
     *
     * @return (array): list of place room
     *
     */
    public function listPlaceRoomInscription($selectiveProcessId, $auxSelect)
    {
        $sql = '     SELECT A.placeRoomId,
                            A.vacant,
                            B.cityId, ';

        $auxSelect = str_replace('CASE WHEN B.specialNecessityId > 0 THEN \'t\' ELSE \'f\' END', 'A.specialNecessity', $auxSelect);

        $sql .= $auxSelect;

        $sql .=       ' FROM sprPlaceRoom A
                  INNER JOIN sprPlace B
                          ON (B.placeId = A.placeId)
                      WHERE A.selectiveProcessId = ?
                   ORDER BY A.priority, 
                            B.cityId';

        $db = $this->getDatabase();

        $args = array($selectiveProcessId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * list the build ocurrence
     *
     * @author: Hélio H. R. Guimarães [helio@solis.coop.br]
     *
     * @param $selectiveProcessId (int): selective process id
     *
     * @return (array):
     *
     */
    public function listBuild($filters)
    {
        $sql = 'SELECT DISTINCT A.build,
                                A.build
                           FROM sprPlaceRoom A
                     INNER JOIN sprPlace B
                             ON (A.placeid = B.placeid)';

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->cityExamId) > 0 )
        {
            $where .= ' AND B.cityId = ? ';
            $args[] = $filters->cityExamId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.build';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }
        return $result;
    }


    /**
     * list the room ocurrence
     *
     * @author: Hélio H. R. Guimarães [jamiel@solis.coop.br]
     *
     * @param $selectiveProcessId (int): selective process id
     *
     * @return (array):
     *
     */
    public function listRoom($filters)
    {
        $sql = 'SELECT DISTINCT A.room,
                                A.room
                           FROM sprPlaceRoom A
                     INNER JOIN sprPlace B
                             ON (A.placeid = B.placeid)';

        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->cityExamId) > 0 )
        {
            $where .= ' AND B.cityId = ? ';
            $args[] = $filters->cityExamId;
        }
        if ( strlen((string)$filters->buildId) > 0 )
        {
            $where .= ' AND A.build = ? ';
            $args[] = $filters->buildId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.room';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

        }
        return $result;
    }
}

?>
