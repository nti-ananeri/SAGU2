<?php
/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Lu�s Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the sprInscriptionReport table
 **/
class BusinessSelectiveProcessBusInscriptionReport extends Business
{

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Report of inscriptions for course
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForCourse($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT C.unitId,
                       F.description,
                       C.courseId,
                       D.shortName || \' / \' || getturncharid(C.turnid),
                       A.isHighSchool,
                       count(A.inscriptionId),
                       E.vacant, 
                       C.turnId
                  FROM sprInscription A
             LEFT JOIN sprInscriptionOption B
                    ON (A.inscriptionId = B.inscriptionId)
             LEFT JOIN sprCourseOccurrence C
                    ON (B.courseOccurrenceId = C.courseOccurrenceId)
             LEFT JOIN acdCourse D
                    ON (C.courseId = D.courseId)
             LEFT JOIN sprCourseVacant E
                    ON (C.courseVacantId = E.courseVacantId)
             LEFT JOIN basUnit F
                    ON (C.unitId = F.unitId)
                 WHERE A.selectiveProcessId = ?
                   AND not (A.isCanceled)
                   AND B.optionNumber = 1
              GROUP BY 1,2,3,4,5,7,8
              ORDER BY 2,4 ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of inscriptions for sex
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForSex($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT C.unitId,
                       E.description,
                       C.courseId,
                       D.shortName  || \' / \' || getturncharid(C.turnid),
                       F.sex,
                       count(A.inscriptionId)
                  FROM sprInscription A
             LEFT JOIN sprInscriptionOption B
                    ON (A.inscriptionId = B.inscriptionId)
             LEFT JOIN sprCourseOccurrence C
                    ON (B.courseOccurrenceId = C.courseOccurrenceId)
             LEFT JOIN acdCourse D
                    ON (C.courseId = D.courseId)
             LEFT JOIN basUnit E
                    ON (C.unitId = E.unitId)
             LEFT JOIN basPhysicalPersonStudent F
                    ON (F.personId = A.personId)
                 WHERE A.selectiveProcessId = ?
                   AND B.optionNumber = 1
                   AND not (A.isCanceled)
              GROUP BY 1, 2, 3, 4, 5
              ORDER BY 2, 4 ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of inscriptions for city exam
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForCityExam($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT A.cityExam,
                       E.name,
                       C.courseId,
                       D.shortName || \' / \' || getturncharid(C.turnid),
                       count(A.inscriptionId)
                  FROM sprInscription A
             LEFT JOIN sprInscriptionOption B
                    ON (A.inscriptionId = B.inscriptionId)
             LEFT JOIN sprCourseOccurrence C
                    ON (B.courseOccurrenceId = C.courseOccurrenceId)
             LEFT JOIN acdCourse D
                    ON (C.courseId = D.courseId)
             LEFT JOIN basCity E
                    ON (E.cityId = A.cityExam)
                 WHERE A.selectiveProcessId = ?
                   AND B.optionNumber = 1
                   AND not (A.isCanceled)
              GROUP BY 1, 2, 3, 4
              ORDER BY 2, 4 ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of inscriptions for room
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForRoom($selectiveProcessId)
    {
        $args = array($selectiveProcessId);

        $sql =  'SELECT D.cityId,
                        D.name,
                        A.placeRoomId,
                        B.room,
                        B.build,
                        count(A.inscriptionId),
                        B.vacant
                   FROM sprInscription A 
             INNER JOIN sprPlaceRoom B
                     ON (B.placeRoomId = A.placeRoomId)
             INNER JOIN sprPlace C
                     ON (C.placeId = B.placeId)
             INNER JOIN basCity D
                     ON (D.cityId = C.cityId)
                  WHERE A.selectiveProcessId = ?
                  AND not (A.isCanceled)
               GROUP BY 1, 2, 3, 4, 5, 7';

//        $sql = ' SELECT A.cityExam,
//                        B.name,
//                        A.placeRoomId,
//                        C.room,
//                        C.build,
//                        count(A.inscriptionId),
//                        C.vacant
//                   FROM sprInscription A
//              LEFT JOIN basCity B
//                     ON (B.cityId = A.cityExam)
//              LEFT JOIN sprPlaceRoom C
//                     ON (A.placeRoomId = C.placeRoomId)
//                  WHERE A.selectiveProcessId = ?
//               GROUP BY A.cityExam, B.name, A.placeRoomId, C.room, C.build, C.vacant
//               ORDER BY B.name, C.build, C.room; ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of inscriptions for general location
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function inscriptionForGeneralLocation($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = 'SELECT DISTINCT A.cityExam,
                               B.name
                          FROM sprInscription A
                     LEFT JOIN basCity B
                            ON (A.cityExam = B.cityId)
                         WHERE A.selectiveProcessId = ?
                         AND not (A.isCanceled)
                      ORDER BY B.name ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of inscriptions for incomplete high school
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
//     public function inscriptionForIncompleteHighSchool($selectiveProcessId)
//     {
//        $args = array($selectiveProcessId);
// 
//        $sql = 'SELECT DISTINCT A.cityExam,
//                                B.name
//                           FROM sprInscription A
//                      LEFT JOIN basCity B
//                             ON (A.cityExam = B.cityId)
//                          WHERE A.selectiveProcessId = ?
//                       ORDER BY B.name ';
// 
//         $db = $this->getDatabase();
// 
//         $result = $db->query(SAGU::prepare($sql, $args));
// 
//         return $result;
//     }

    public function inscriptionForRoomLocationList($filters)
    {
        $sql = '   SELECT A.cityExam,
                          B.name,
                          A.placeRoomId,
                          C.room,
                          C.build,
                          D.name,
                          I.content
                     FROM sprInscription A
                LEFT JOIN basCity B
                       ON (B.cityId = A.cityExam)
                LEFT JOIN sprPlaceRoom C
                       ON (A.placeRoomId = C.placeRoomId)
           LEFT JOIN ONLY basPhysicalPerson D
                       ON ( A.personId = D.personId )
                LEFT JOIN basDocument I
                       ON ( I.personId = D.personId AND I.documentTypeId = ' . RG_CODE . ')
                    WHERE A.selectiveProcessId = ?
                    AND not (A.isCanceled) ';

        $args[] = $filters->selectiveProcessId;

        if (strlen((string)$filters->cityExam) > 0)
        {
            $sql .= ' AND A.cityExam = ?';
            $args[] = $filters->cityExam;
        }

        if (strlen((string)$filters->build) > 0)
        {
            $sql .= ' AND C.build = ?';
            $args[] = $filters->build;
        }

        $sql .= 'GROUP BY A.cityExam, B.name, A.placeRoomId, C.room, C.build, D.name, I.content
                 ORDER BY D.name, C.build, C.room';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
