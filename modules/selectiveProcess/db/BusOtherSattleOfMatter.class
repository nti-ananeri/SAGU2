<?php
/**
 *
 * This file handles the connection and actions for sprOtherSattleOfMatter table
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br] 
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 24/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprOtherSattleOfMatter table
 **/
class BusinessSelectiveProcessBusOtherSattleOfMatter extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    public function listOtherSattleOfMatter()
        {
        }

    /**
     * Return a specific record from the database
     *
     * @param $otherSattleOfMatterId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOtherSattleOfMatter($otherSattleOfMatterId)
    {
        $sql = 'SELECT A.otherSattleOfMatterId,
                       B.selectiveProcessId,
                       A.tableName,
                       A.fieldName,
                       A.priority,
                       A.orderBy,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress
                  FROM sprOtherSattleOfMatter A
             LEFT JOIN sprSelectiveProcess B
                 USING ( selectiveProcessId )
                 WHERE A.otherSattleOfMatterId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $otherSattleOfMatterId));
        //$db->close();

        $otherSattleOfMatter = new sprOtherSattleOfMatter();
        list ( $otherSattleOfMatter->otherSattleOfMatterId,
               $otherSattleOfMatter->selectiveProcessId,
               $otherSattleOfMatter->tableName,
               $otherSattleOfMatter->fieldName,
               $otherSattleOfMatter->priority,
               $otherSattleOfMatter->orderBy,
               $otherSattleOfMatter->userName,
               $otherSattleOfMatter->dateTime,
               $otherSattleOfMatter->ipAddress ) = $result[0];

        return $otherSattleOfMatter;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchOtherSattleOfMatter($filters)
    {
        $sql = 'SELECT A.otherSattleOfMatterId,
                       B.selectiveProcessId,
                       B.description,
                       A.tableName,
                       A.fieldName,
                       A.priority,
                       A.orderBy
                  FROM sprOtherSattleOfMatter A
             LEFT JOIN sprSelectiveProcess B
                 USING ( selectiveProcessId )';

        if ( strlen((string)$filters->otherSattleOfMatterId) > 0 )
        {
            $where .= ' AND A.otherSattleOfMatterId = ? ';
            $args[] = $filters->otherSattleOfMatterId;
        }
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId ILIKE ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->description) > 0 )
        {
            $where .= ' AND TO_ASCII(B.description) ILIKE TO_ASCII(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen((string)$filters->tableName) > 0 )
        {
            $where .= ' AND A.tableName ILIKE ? ';
            $args[] = $filters->tableName . '%';
        }
        if ( strlen((string)$filters->fieldName) > 0 )
        {
            $where .= ' AND A.fieldName ILIKE ? ';
            $args[] = $filters->fieldName . '%';
        }
        if ( strlen((string)$filters->priority) > 0 )
        {
            $where .= ' AND A.priority = ? ';
            $args[] = $filters->priority;
        }
        if ( strlen((string)$filters->orderBy) > 0 )
        {
            $where .= ' AND A.orderBy ILIKE ? ';
            $args[] = $filters->orderBy . '%';
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY selectiveProcessId, A.priority ASC';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertOtherSattleOfMatter($data)
    {
        $sql = 'INSERT INTO sprOtherSattleOfMatter
                            (selectiveProcessId,
                             tableName,
                             fieldName,
                             priority,
                             orderBy)
                     VALUES (?,?,?,?,?)';

        $args   = array ( $data->selectiveProcessId,
                          $data->tableName,
                          $data->fieldName,
                          $data->priority,
                          $data->orderBy);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOtherSattleOfMatter($data)
    {
        $sql = 'UPDATE sprOtherSattleOfMatter
                   SET selectiveProcessId       = ?,
                       tableName                = ?,
                       fieldName                = ?,
                       priority                 = ?,
                       orderBy                  = ?
                 WHERE otherSattleOfMatterId    = ?';

        $args = array( $data->selectiveProcessId,
                       $data->tableName,
                       $data->fieldName,
                       $data->priority,
                       $data->orderBy,
                       $data->otherSattleOfMatterId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $otherSattleOfMatterId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteOtherSattleOfMatter($otherSattleOfMatterId)
    {
        $sql = 'DELETE FROM sprOtherSattleOfMatter
                      WHERE otherSattleOfMatterId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $otherSattleOfMatterId));
        //$db->close();

        return $result;
    }

    /**
     * Return the array with priority from selective process 
     *
     * @param $sattleOfMatterId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOtherSattleOfMatterToPriotiry($selectiveProcessId)
    {
        $sql = 'SELECT A.otherSattleOfMatterId,
                       A.selectiveProcessid,
                       A.tableName,
                       A.fieldName,
                       A.priority,
                       A.orderBy
                  FROM sprOtherSattleOfMatter A
                 WHERE A.selectiveProcessid = ?';

        $args = array($selectiveProcessId);

        $db                    = $this->getDatabase();
        $othersSattlesOfMatter = $db->query(SAGU::prepare($sql, $args));


        foreach($othersSattlesOfMatter as $otherSattlesOfMatter)
        {
            if ( $otherSattlesOfMatter[4] != $key )
            {
                $key = $otherSattlesOfMatter[4];
                $x = 0;
            }
            $resultOtherSattleOfMatter[$otherSattlesOfMatter[4]]->tableName = $otherSattlesOfMatter[2];
            $resultOtherSattleOfMatter[$otherSattlesOfMatter[4]]->fieldName = $otherSattlesOfMatter[3];
            $resultOtherSattleOfMatter[$otherSattlesOfMatter[4]]->orderBy   = $otherSattlesOfMatter[5];
        }

        return $resultOtherSattleOfMatter;
    }
}

?>
