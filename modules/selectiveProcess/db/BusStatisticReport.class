<?php
/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Lu�s Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Solu��es Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Solu��es Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the sprInscriptionReport table
 **/
class BusinessSelectiveProcessBusStatisticReport extends Business
{

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Report of the amount inscription for language
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForLanguage($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT A.cityExam,
                       B.name,
                       A.languageId,
                       C.description,
                       count(A.inscriptionId)
                  FROM sprInscription A
             LEFT JOIN basCity B
                    ON (B.cityId = A.cityExam)
             LEFT JOIN sprLanguage C
                    ON (C.languageId = A.languageId)
                 WHERE A.selectiveProcessId = ?
                 AND not (A.isCanceled)
              GROUP BY A.cityExam,
                       B.name,
                       A.languageId,
                       C.description
              ORDER BY B.name,
                       C.description ASC ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of the amount inscription for special necessity
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForSpecialNecessity($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT B.specialNecessityId,
                       COUNT(*)
                  FROM sprInscription A
       INNER JOIN ONLY basphysicalperson B
                    ON B.personId = A.personId
                 WHERE A.selectiveProcessId = ?
                 AND not (A.isCanceled)
              GROUP BY B.specialNecessityId
              ORDER BY COUNT(*) DESC';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        $sql = 'SELECT description
                  FROM basSpecialNecessity
                 WHERE specialNecessityId = ?';

        $y = 1;
        for ( $x=0; $x < count($result); $x++ )
        {
            if ( $result[$x][0] == '0' || $result[$x][0] == '' )
            {
                $res           = $db->query(SAGU::prepare($sql, '0'));
                $result2[0][0] = '0';
                $result2[0][1] = $res[0][0];
                $result2[0][2] += $result[$x][1];
            }
            else
            {
                $res            = $db->query(SAGU::prepare($sql, $result[$x][0]));
                $result2[$y][0] = $result[$x][0];
                $result2[$y][1] = $res[0][0];
                $result2[$y][2] = $result[$x][1];
                $y++;
            }
        }

        return $result2;
    }




    /**
     * Report of the amount inscription for high school
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForHighSchool($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT A.isHighSchool,
                       count(A.inscriptionId)
                       FROM sprInscription A
                       WHERE A.selectiveProcessId = ?
                       AND not (A.isCanceled)
              GROUP BY A.isHighSchool
              ORDER BY A.isHighSchool ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of the amount inscription for type of ingression
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForTypeIngression($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT A.isHighSchool,
                       count(A.inscriptionId)
                       FROM sprInscription A
                       WHERE A.selectiveProcessId = ?
                       AND not (A.isCanceled)
              GROUP BY A.isHighSchool
              ORDER BY A.isHighSchool ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of the amount inscription for selective process
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForSelectiveProcess($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT CASE WHEN B.selectiveProcessTypeId isnull
                            THEN ' . DEFAULT_SELECTIVE_PROCESS_TYPE . '
                            ELSE B.selectiveProcessTypeId
                             END,
                       C.description,
                       count(A.inscriptionId)
                  FROM sprInscription A
             LEFT JOIN sprSelectiveProcessTypeData B
                    ON (B.inscriptionId = A.inscriptionId)
             LEFT JOIN sprSelectiveProcessType C
                    ON (C.selectiveProcessTypeId = CASE WHEN B.selectiveProcessTypeId isnull
                                                   THEN ' . DEFAULT_SELECTIVE_PROCESS_TYPE . '
                                                   ELSE B.selectiveProcessTypeId
                                                    END)
                 WHERE A.selectiveProcessId = ?
                 AND not (A.isCanceled)
              GROUP BY B.selectiveProcessTypeId,
                       C.description
              ORDER BY C.description ';
//        $sql = ' SELECT CASE  B.selectiveProcessTypeId,
//                        C.description,
//                        count(A.inscriptionId)
//                   FROM sprInscription A
//              LEFT JOIN sprSelectiveProcessTypeData B
//                     ON (B.inscriptionId = A.inscriptionId)
//              LEFT JOIN sprSelectiveProcessType C
//                     ON (C.selectiveProcessTypeId = B.selectiveProcessTypeId)
//                  WHERE A.selectiveProcessId = ?
//               GROUP BY B.selectiveProcessTypeId,
//                        C.description
//               ORDER BY C.description ';


        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Report of the amount inscription for age comparative
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function statisticForAgeComparative($selectiveProcessId)
    {
       $args = array($selectiveProcessId);

       $sql = ' SELECT C.unitId,
                       E.description,
                       C.courseId,
                       D.shortName,
                       F.sex,
                       CASE WHEN ( (G.beginDate - F.datebirth)/365 ) < 25
                            THEN 1
                            ELSE CASE WHEN ( (G.beginDate - F.datebirth)/365  ) > 34
                                      THEN 3
                                      ELSE 2
                                       END
                            END as age,
                       count(A.inscriptionId)
                  FROM sprInscription A
             LEFT JOIN sprInscriptionOption B
                    ON (A.inscriptionId = B.inscriptionId)
             LEFT JOIN sprCourseOccurrence C
                    ON (B.courseOccurrenceId = C.courseOccurrenceId)
             LEFT JOIN acdCourse D
                    ON (C.courseId = D.courseId)
             LEFT JOIN basUnit E
                    ON (C.unitId = E.unitId)
             LEFT JOIN basPhysicalPersonStudent F
                    ON (F.personId = A.personId)
             LEFT JOIN sprSelectiveProcess G
                    ON (G.selectiveProcessId = A.selectiveProcessId)
                 WHERE A.selectiveProcessId = ?
                   AND B.optionNumber = 1
                   AND not (A.isCanceled)
              GROUP BY C.unitId,
                       E.description,
                       C.courseId,
                       D.shortName,
                       F.sex,
                       age
              ORDER BY E.description,
                       D.shortName,
                       age,
                       F.sex ';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
