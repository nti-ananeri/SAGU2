<?php
/**
 *
 * This file handles the connection and actions for sprInscription table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/11/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br
 *
 **/

/**
 * Class to manipulate the sprInscriptionReport table
 **/
class BusinessSelectiveProcessBusOrderlyListOfNotes extends Business
{

    /**
     * Make a connection to the database
     *
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Report of orderly list of notes of candidates
     *
     * @param $selectiveProcessId (int): Selective process id
     *
     * @return (array): An array containing the search results
     **/
    public function orderlyList($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();

        //$businessClassification = $MIOLO->getBusiness($module, 'BusClassification');
        //$inscription = $businessClassification->generatePositionGeneral($filters);

//         $sql = ' SELECT A.inscriptionId,
//                         B.generalPosition
//                    FROM sprInscription A
//              INNER JOIN sprInscriptionOption B
//                      ON (A.inscriptionId = B.inscriptionId)
//         INNER JOIN ONLY basPhysicalPerson C
//                      ON (A.personId = C.personId)
//                   WHERE A.selectiveProcessId = \'' . $filters->selectiveProcessId . '\' AND
//                         B.optionNumber = 1';
// 
//         if ( $filters->order == 't' ) // to alphabetic order
//         {
//             $sql .= ' ORDER BY C.name ASC';
//         }
//         else
//         {
//             $sql .= ' ORDER BY B.generalPosition ASC';
//         }
// 
//         $inscription = $db->query($sql);

//         foreach ( $inscription as $key1 => $value1 )
//         {
//             $result[$key1][0] = $inscription[$key1][1];      //position

            $sql = ' SELECT A.inscriptionId,
                            C.name as personName,
                            D.courseId,
                            B.coursePosition,
                            round( ( SUM((E.note / F.maximumPoints) * G.weight) / 
                                                                (SELECT SUM(AE.weight)
                                                                   FROM sprInscription AA
                                                             INNER JOIN sprCourseVacant AB
                                                                     ON (AB.selectiveProcessId = AA.selectiveProcessId)
                                                             INNER JOIN sprInscriptionOption AC
                                                                     ON (AC.inscriptionId = A.inscriptionId AND 
                                                                         AC.optionNumber = 1)
                                                             INNER JOIN sprCourseOccurrence AD
                                                                     ON (AD.courseOccurrenceId = AC.courseOccurrenceId AND
                                                                         AD.courseVacantId = AB.courseVacantId)
                                                             INNER JOIN sprExamOccurrence AF
                                                                     ON (AF.selectiveProcessTypeId = F.selectiveProcessTypeId AND AF.selectiveProcessId = AA.selectiveProcessId)
                                                             INNER JOIN sprCourseExamBalance AE
                                                                     ON (AE.courseVacantId = AD.courseVacantId AND
                                                                         AE.examOccurrenceId = AF.examOccurrenceId)
                                                                  WHERE (AA.inscriptionId = A.inscriptionId))
                                                                 * (SELECT maximumPoints 
                                                                      FROM sprSelectiveProcess
                                                                     WHERE selectiveProcessId = A.selectiveProcessId))::numeric, '.ROUND_VALUE_CLASSIFICATION.') as totalPointsSelectiveProcessType,
                            round(A.totalPoints::numeric, '.ROUND_VALUE_CLASSIFICATION.'),
                            D.unitId,
                            A.isHighSchool,
                            B.generalposition,
                            A.selectiveProcessId,
                            F.selectiveProcessTypeId
                       FROM sprInscription A
                 INNER JOIN sprInscriptionOption B
                         ON (A.inscriptionId = B.inscriptionId)
            INNER JOIN ONLY basPhysicalPerson C
                         ON (C.personId = A.personId)
                 INNER JOIN sprCourseOccurrence D
                         ON (D.courseOccurrenceId = B.courseOccurrenceId)
                  LEFT JOIN sprExamOccurrence F
                         ON (F.examOccurrenceId IN ( SELECT examOccurrenceId
                                                        FROM sprExamOccurrence
                                                       WHERE selectiveProcessId = \'' . $filters->selectiveProcessId . '\' AND
                                                             selectiveprocesstypeid = ' . ENEM_TYPE_ID . '))
                  LEFT JOIN sprCourseExamBalance G
                         ON (D.courseVacantId = G.courseVacantId AND
                             G.examOccurrenceId = F.examOccurrenceId)
                  LEFT JOIN sprNote E
                         ON (A.inscriptionId = E.inscriptionId AND
                             E.examOccurrenceId = F.examOccurrenceId)
                      WHERE A.selectiveProcessId = \'' . $filters->selectiveProcessId . '\' AND
                            B.optionNumber = 1 
                   GROUP BY A.inscriptionId, C.name, D.courseId, B.coursePosition, A.totalPoints, D.unitId, A.isHighSchool, B.generalposition, A.selectiveProcessId,  F.selectiveProcessTypeId';

//                             round((SUM(E.note * G.weight) / (SELECT maximumPoints 
//                                                        FROM sprSelectiveProcess
//                                                       WHERE selectiveProcessId = \'' . $filters->selectiveProcessId . '\'))::numeric, '.ROUND_VALUE_CLASSIFICATION.'),


        if ( $filters->order == 't' ) // to alphabetic order
        {
            $sql .= ' ORDER BY C.name ASC';
        }
        else
        {
            $sql .= ' ORDER BY B.generalPosition ASC';
        }

        $result2 = $db->query($sql);

        foreach ($result2 as $key1 => $result22)
        {
            $result[$key1][0] = $result22[8];  //position
            $result[$key1][1] = $result22[0];  //personId
            $result[$key1][2] = $result22[1];  //personName
            $result[$key1][3] = $result22[2];  //courseId
            $result[$key1][4] = $result22[3];  //coursePosition
            $result[$key1][5] = $result22[4];  //notaENEM
            $result[$key1][6] = $result22[5];  //total points
            $result[$key1][7] = $result22[6];  //unitCourseId
            $result[$key1][8] = $result22[7];  //isHighSchool
        }

        return $result;
    }
}

?>
