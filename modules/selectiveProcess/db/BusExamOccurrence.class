<?php
/**
 *
 * This file handles the connection and actions for sprExamOccurrence table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/09/2005
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprExamOccurrence table
 **/
class BusinessSelectiveProcessBusExamOccurrence extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic','sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $examOccurrenceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getExamOccurrence($examOccurrenceId)
    {
//                       A.examDateTime::time as examTime,
        $sql = 'SELECT A.examOccurrenceId,
                       A.selectiveProcessId,
                       B.description AS selectiveProcessDescription,
                       A.selectiveProcessTypeId,
                       C.description,
                       A.examId,
                       D.description,
                       A.numberQuestions,
                       A.weightQuestion,
                       A.numberOrder,
                       TO_CHAR(A.examDateTime,\'' . MASK_DATE . '\') as examDate,
		       TO_CHAR(A.examDateTime,\'' . MASK_TIME . '\') as examTime,
                       TO_CHAR(A.examDateTime,\'' . MASK_TIMESTAMP . '\') as examDateTime,
                       A.isAnswerSheet,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.maximumPoints
                  FROM sprExamOccurrence A
             LEFT JOIN sprSelectiveProcess B
                    ON ( A.selectiveProcessId = B.selectiveProcessId )
             LEFT JOIN sprSelectiveProcessType C
                    ON ( A.selectiveProcessTypeId = C.selectiveProcessTypeId )
             LEFT JOIN sprExam D
                    ON ( A.examId = D.examId )
                 WHERE A.examOccurrenceId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $examOccurrenceId));
        //$db->close();

        $examOccurrence = new sprExamOccurrence();
        list ( $examOccurrence->examOccurrenceId,
               $examOccurrence->selectiveProcessId,
               $examOccurrence->selectiveProcessDescription,
               $examOccurrence->selectiveProcessTypeId,
               $examOccurrence->selectiveProcessTypeDescription,
               $examOccurrence->examId,
               $examOccurrence->examDescription,
               $examOccurrence->numberQuestions,
               $examOccurrence->weightQuestion,
               $examOccurrence->numberOrder,
               $examOccurrence->examDate,
               $examOccurrence->examTime,
               $examOccurrence->examDateTime,
               $examOccurrence->isAnswerSheet,
               $examOccurrence->userName,
               $examOccurrence->dateTime,
               $examOccurrence->ipAddress,
               $examOccurrence->maximumPoints ) = $result[0];
        return $examOccurrence;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchExamOccurrence($filters)
    {
        $sql = 'SELECT A.examOccurrenceId,
                       A.selectiveProcessId,
                       B.description,
                       A.selectiveProcessTypeId,
                       C.description,
                       A.examId,
                       D.description,
                       A.numberQuestions,
                       A.weightQuestion,
                       A.numberOrder,
                       TO_CHAR(A.examDateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.maximumPoints
                  FROM sprExamOccurrence A
             LEFT JOIN sprSelectiveProcess B
                    ON ( A.selectiveProcessId = B.selectiveProcessId )
             LEFT JOIN sprSelectiveProcessType C
                    ON ( A.selectiveProcessTypeId = C.selectiveProcessTypeId )
             LEFT JOIN sprExam D
                    ON ( A.examId = D.examId ) ';

        if ( strlen((string)$filters->examOccurrenceId) > 0 )
        {
            $where .= ' AND A.examOccurrenceId = ? ';
            $args[] = $filters->examOccurrenceId;
        }
        if ( strlen((string)$filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ? ';
            $args[] = $filters->selectiveProcessId;
        }
        if ( strlen((string)$filters->selectiveProcessTypeId) > 0 )
        {
            $where .= ' AND A.selectiveProcessTypeId = ? ';
            $args[] = $filters->selectiveProcessTypeId;
        }
        if ( strlen((string)$filters->examId) > 0 )
        {
            $where .= ' AND A.examId = ? ';
            $args[] = $filters->examId;
        }

        unset($result);
        if ( strlen((string)$where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.description';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertExamOccurrence($data)
    {
        $sql = 'INSERT INTO sprExamOccurrence
                            (selectiveProcessId,
                             selectiveProcessTypeId,
                             examId,
                             isAnswerSheet,
                             numberQuestions,
                             weightQuestion,
                             numberOrder,
                             examDateTime,
                             maximumPoints)
                     VALUES (?,?,?,?,?,?,?,TO_TIMESTAMP(?,\'' . MASK_TIMESTAMP . '\'),?)';

        $db     = $this->getDatabase();
        $args   = array ( $data->selectiveProcessId,
                          $data->selectiveProcessTypeId,
                          $data->examId,
                          $data->isAnswerSheet,
                          $data->numberQuestions,
                          $data->weightQuestion,
                          $data->numberOrder,
                          $data->examDateTime,
                          $data->maximumPoints );

        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateExamOccurrence($data)
    {
        $sql = 'UPDATE sprExamOccurrence
                   SET selectiveProcessId     = ?,
                       selectiveProcessTypeId = ?,
                       examId                 = ?,
                       isAnswerSheet          = ?,
                       numberQuestions        = ?,
                       weightQuestion         = ?,
                       numberOrder            = ?,
                       examDateTime           = TO_TIMESTAMP(?,\'' . MASK_TIMESTAMP . '\'),
                       maximumPoints          = ?
                 WHERE examOccurrenceId       = ?';

        $args = array( $data->selectiveProcessId,
                       $data->selectiveProcessTypeId,
                       $data->examId,
                       $data->isAnswerSheet,
                       $data->numberQuestions,
                       $data->weightQuestion,
                       $data->numberOrder,
                       $data->examDateTime,
                       $data->maximumPoints,
                       $data->examOccurrenceId
                       );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $examOccurrenceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteExamOccurrence($examOccurrenceId)
    {
        $sql = 'DELETE FROM sprExamOccurrence
                      WHERE examOccurrenceId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $examOccurrenceId));
        //$db->close();

        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listExamOccurrence($selectiveProcessId)
    {

        $sql = 'SELECT A.examOccurrenceId,
                       B.description AS examOccurrenceDescription
                  FROM sprExamOccurrence A
            INNER JOIN sprExam B
                    ON (A.examId = B.examId)
                  WHERE A.selectiveProcessId = ?';

        $db     = $this->getDatabase();

        if ( strlen((string)$selectiveProcessId)>0 )
        {
            $result = $db->query(SAGU::prepare($sql, $selectiveProcessId));
        }

        if ( !$result )
        {
            $result = array();
        }

        //$db->close();
        return $result;
    }

}

?>
