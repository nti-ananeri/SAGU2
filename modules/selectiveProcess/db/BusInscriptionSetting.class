<?php
/**
 *
 * This file handles the connection and actions for sprInscriptionSettings table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/07/2006
 *
 * \b @organization \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The Sagu2 development team
 *
 * \b Copyleft \n
 * Copyleft (L) 2005 - SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History \n
 * See history in CVS repository: http://sagu.solis.coop.br   
 *
 **/

/**
 * Class to manipulate the sprSelectiveProcess table
 **/
class BusinessSelectiveProcessBusInscriptionSetting extends Business
{

    /**
     * Make a connection to the database
     * 
     * @param $module (string): The module whose database we should connect. If null, the actual module database is connected.
     *
     * @return (object): A MIOLO Database connection
     **/
    public function getDatabase($module = null)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getClass('basic', 'sagu');
        $module = is_null($module) ? 'selectiveProcess' : $module;

        return $MIOLO->getDatabase($module);
    }

    /**
     * Return a specific record from the database
     *
     * @param $selectiveProcessId (varchar): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInscriptionSetting($selectiveProcessId)
    {
        $sql = 'SELECT A.selectiveProcessId,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginHour,\'' . MASK_TIME . '\'),
                       TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                       ROUND(A.fee, '.REAL_ROUND_VALUE.'),
                       A.invoicePrefix,
                       A.emailAdmin,
                       A.isSocialEconomic,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . MASK_TIMESTAMP . '\'),
                       A.ipAddress,
                       A.messageFinishInscription,
                       A.messageWelcomeInscription,
                       A.messageNotDisponibleInscription,
                       A.messageInformationInscription,
                       A.messageDocumentInscription,
                       A.messageHighSchoolConcluedInscription,
                       A.messageConcluedInscription,
                       A.messageOfInvoice,
                       A.bankAccountId,
                       B.bankContractId,
                       C.description
                  FROM sprInscriptionSetting A 
                  JOIN finBankAccountContract B using(bankAccountId)
            INNER JOIN sprSelectiveProcess C ON C.selectiveProcessId = A.selectiveProcessId
                 WHERE A.selectiveProcessId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $selectiveProcessId));
        //$db->close();

        $inscriptionSetting = new sprInscriptionSetting();
        list ( 
               $inscriptionSetting->selectiveProcessId,
               $inscriptionSetting->beginDate,
               $inscriptionSetting->endDate,
               $inscriptionSetting->beginHour,
               $inscriptionSetting->endHour,
               $inscriptionSetting->fee,
               $inscriptionSetting->invoicePrefix,
               $inscriptionSetting->emailAdmin,
               $inscriptionSetting->isSocialEconomic,
               $inscriptionSetting->userName,
               $inscriptionSetting->dateTime,
               $inscriptionSetting->ipAddress,
               $inscriptionSetting->messageFinishInscription,
               $inscriptionSetting->messageWelcomeInscription,
               $inscriptionSetting->messageNotDisponibleInscription,
               $inscriptionSetting->messageInformationInscription,
               $inscriptionSetting->messageDocumentInscription,
               $inscriptionSetting->messageHighSchoolConcluedInscription,
               $inscriptionSetting->messageConcluedInscription,
               $inscriptionSetting->messageOfInvoice,
               $inscriptionSetting->bankAccountId,
               $inscriptionSetting->bankContractId,
               $inscriptionSetting->description
             ) = $result[0];
             
             return $inscriptionSetting;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInscriptionSetting($data)
    {
        $sql = 'SELECT A.selectiveProcessId,
                       TO_CHAR(A.beginDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.endDate,\'' . MASK_DATE . '\'),
                       TO_CHAR(A.beginHour,\'' . MASK_TIME . '\'),
                       TO_CHAR(A.endHour,\'' . MASK_TIME . '\'),
                       ROUND(A.fee, ' . REAL_ROUND_VALUE . '),
                       A.invoicePrefix,
                       A.emailAdmin,
                       A.isSocialEconomic,
                       A.messageFinishInscription,
                       A.messageWelcomeInscription,
                       A.messageNotDisponibleInscription,
                       A.messageInformationInscription,
                       A.messageDocumentInscription,
                       A.messageHighSchoolConcluedInscription,
                       A.messageConcluedInscription,
                       A.messageOfInvoice,
                       A.bankAccountId
                  FROM sprInscriptionSetting A ';

        $where  = '';
        unset($args);
        if ( strlen((string)$data->selectiveProcessId) > 0 )
        {
            $where .= '    AND   A.selectiveProcessId ILIKE ?';
            $args[] = $data->selectiveProcessId;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where,8) .
                    ' ORDER BY 1';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
            //$db->Close();
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInscriptionSetting($data)
    {
         $sql = 'INSERT INTO sprInscriptionSetting
                            (selectiveProcessId,
                             beginDate,
                             endDate,
                             beginHour,
                             endHour,
                             fee,
                             emailAdmin,
                             isSocialEconomic,
                             messageFinishInscription,
                             messageWelcomeInscription,
                             messageNotDisponibleInscription,
                             messageInformationInscription,
                             messageDocumentInscription,
                             messageHighSchoolConcluedInscription,
                             messageConcluedInscription,
                             messageOfInvoice,
                             bankAccountId)
                     VALUES (?,TO_DATE(?,\'' . MASK_DATE .'\'),
                             TO_DATE(?,\'' . MASK_DATE .'\'),
                             TO_TIMESTAMP(?,\'' . MASK_TIME .'\'),
                             TO_TIMESTAMP(?,\'' . MASK_TIME .'\'),
                             ?,?,?,?,?,?,?,?,?,?,?,?)';

        $db     = $this->getDatabase();
        $args   = array ( $data->selectiveProcessId,
                          $data->beginDate,
                          $data->endDate,
                          $data->beginHour,
                          $data->endHour,
                          $data->fee,
                          $data->emailAdmin,
                          $data->isSocialEconomic,
                          $data->messageFinishInscription,
                          $data->messageWelcomeInscription,
                          $data->messageNotDisponibleInscription,
                          $data->messageInformationInscription,
                          $data->messageDocumentInscription,
                          $data->messageHighSchoolConcluedInscription,
                          $data->messageConcluedInscription,
                          $data->messageOfInvoice,
                          $data->bankAccountId );

        $result = $db->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInscriptionSetting($data)
    {
        $sql = 'UPDATE sprInscriptionSetting
                   SET beginDate                            = TO_DATE(?,\'' . MASK_DATE .'\'),
                       endDate                              = TO_DATE(?,\'' . MASK_DATE .'\'),
                       beginHour                            = TO_TIMESTAMP(?,\'' . MASK_TIME .'\'),
                       endHour                              = TO_TIMESTAMP(?,\'' . MASK_TIME .'\'),
                       fee                                  = ?,
                       emailAdmin                           = ?,
                       isSocialEconomic                     = ?,
                       messageFinishInscription             = ?,
                       messageWelcomeInscription            = ?,
                       messageNotDisponibleInscription      = ?,
                       messageInformationInscription        = ?,
                       messageDocumentInscription           = ?,
                       messageHighSchoolConcluedInscription = ?,
                       messageConcluedInscription           = ?,
                       messageOfInvoice                     = ?,
                       bankAccountId                        = ?
                 WHERE selectiveProcessId = ?';

        $args   = array ( $data->beginDate,
                          $data->endDate,
                          $data->beginHour,
                          $data->endHour,
                          $data->fee,
                          $data->emailAdmin,
                          $data->isSocialEconomic,
                          $data->messageFinishInscription,
                          $data->messageWelcomeInscription,
                          $data->messageNotDisponibleInscription,
                          $data->messageInformationInscription,
                          $data->messageDocumentInscription,
                          $data->messageHighSchoolConcluedInscription,
                          $data->messageConcluedInscription,
                          $data->messageOfInvoice,
                          $data->bankAccountId,
                          $data->selectiveProcessId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        //$db->close();
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $selectiveProcessId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInscriptionSetting($selectiveProcessId)
    {
        $sql = 'DELETE FROM sprInscriptionSetting
                      WHERE selectiveProcessId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $selectiveProcessId));
        //$db->close();

        return $result;
    }

}

?>
