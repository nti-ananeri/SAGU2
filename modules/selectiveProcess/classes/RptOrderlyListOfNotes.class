<?php

/**
 * Default defines 
 * To report identification
 */
$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();

define('REPORT_ID', 'SP001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    var $rdata = 0;

    /**
     * Class constructor
     **/
    function __construct($rdata1)
    {
        parent::__construct();
        $this->rdata = $rdata1;
    }

    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();


        $this->setFont(DEFAULT_REPORT_FONT, 'B', 14);
        $this->ln(6);

        $this->cell(200, 8, _M('Finished general classification ', $module), '', 'L','C');

        $this->ln(12);

        $this->setFont(DEFAULT_REPORT_FONT, 'B', 10);

        $this->cell(20, 8, _M('POS', $module),   'TBL', 'R','L');
        $this->cell(30, 8, _M('COD', $module),   'TB',  'R','L');
        $this->cell(60, 8, _M('NAME', $module),  'TB',  'R','L');
        $this->cell(20, 8, _M('1. id', $module), 'TB',  'R','L');
        $this->cell(20, 8, _M('PCou', $module),  'TB',  'R','L');
        $this->cell(25, 8, _M('ENEM', $module),  'TB',  'R','L');
        $this->cell(14, 8, _M('TOTAL', $module), 'TBR',  'R','L');

        $this->ln(8);
    }
}


/**
 * PDF extension to generate report
 */
class RptOrderlyListOfNotes
{
    /**
     * Method to generate the report
     */
    public function RptOrderlyListOfNotes($data = null)
    {
        $rdata  = $this->getReportData($data);
        $module = MIOLO::getCurrentModule();

        $this->pdf = new PDF($rdata);

        $this->generateContent($rdata);

        $this->pdf->close();
        $this->pdf->output();
    }

    /**
     * Get report data information
     */
    private function getReportData($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Inscription information
        $busOrdelyListNotes              = $MIOLO->getBusiness($module, 'BusOrderlyListOfNotes');

        if ( is_object($data) )
        {
            $filters->selectiveProcessId = $data->selectiveProcessId;
            $filters->order              = $data->order;
        }
        else
        {
            $filters->selectiveProcessId = $data["selectiveProcessId"];
            $filters->order              = $data["order"];
        }

        $rdata->orderlyList              = $busOrdelyListNotes->orderlyList($filters);

        $rdata->selectiveProcessId       = $data->selectiveProcessId;

        return $rdata;
    }

    private function generateContent($rdata)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->pdf->addPage('P', 'mm', 'A4');

        $this->pdf->setFillColor(242);

        $this->pdf->setFont(DEFAULT_REPORT_FONT, '', 10);

        $x = 1;

        for($xAux = 0; $xAux < count($rdata->orderlyList); $xAux++)
        {
               if ($x == 1)                         //if, que determina se a célula será preenchida ou não
               {
                   $x = 0;
               }
               else
               {
                   $x = 1;
               }

               if($rdata->orderlyList[$xAux][8] == 'f')
               {
                    $this->pdf->text(200, $this->pdf->getY()+4, '2G');
               }

               $this->pdf->cell(20, 6, $rdata->orderlyList[$xAux][0],  'TBL', 'R','L', $x);
               $this->pdf->cell(30, 6, $rdata->orderlyList[$xAux][1],  'TB',  'R','L', $x);
               $this->pdf->cell(60, 6, substr($rdata->orderlyList[$xAux][2], 0, 26),  'TB',  'R','L',$x);
               $this->pdf->cell(20, 6, $rdata->orderlyList[$xAux][3].'/'.$rdata->orderlyList[$xAux][7],  'TB',  'R','L', $x);
               $this->pdf->cell(20, 6, $rdata->orderlyList[$xAux][4],  'TB',  'R','L', $x);
               $this->pdf->cell(25, 6, $rdata->orderlyList[$xAux][5],  'TB',  'R','L', $x);
               $this->pdf->cell(14, 6, $rdata->orderlyList[$xAux][6],  'TBR',  'R','L', $x);

               $this->pdf->ln(6);
        }
    }
}
?>
