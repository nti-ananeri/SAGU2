<?php

/**
 * Default defines 
 * To report identification
 */
$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();

define('REPORT_ID', 'SP001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
        $this->setY(-15);
        $pn = $this->PageNo().'/{nb}';
        $this->cell(190, 1, '', 'B', 1);
        $this->ln();

        $this->setFont(DEFAULT_REPORT_FONT, 'I', 8);
        $this->cell(50, 4, $text, 0, 0);
        $this->cell(140, 4, _M('REPORT @1 ', $module, REPORT_ID).' '._M('Page @1', $module, $pn), 0, 0, 'R');
        $this->ln();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();
        if ($this->type == 1)
        {
            $this->ln();
            $this->ln();
            $this->ln();
            $this->ln();
        }
    }
}


/**
 * PDF extension to generate report
 */
class RptInscriptionByRoom 
{
    /**
     * Method to generate the report
     */
    public function RptInscriptionByRoom($data = null)
    {
        $rdata  = $this->getReportData($data);
        $module = MIOLO::getCurrentModule();

        // Generating PDF file
        $this->pdf = new PDF();
        $this->pdf->aliasNbPages();
        // First page
        $this->pdf->addPage('P', 'mm', 'A4');
        $this->pdf->ln();

        if ( is_array($data) )
        {
            foreach ( $data as $d )
            {
                $rdata  = $this->getReportData($d);
                $this->generateContent($rdata);
                $this->pdf->addPage('P', 'mm', 'A4');
            }
        }
        else
        {
            $rdata  = $this->getReportData($data);
            $this->generateContent($rdata);
        }

        $this->pdf->close();
        $this->pdf->output();
    }

    /**
     * Get report data information
     */
    private function getReportData($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Inscription information
        $busInscription          = $MIOLO->getBusiness($module, 'BusInscription');
        $rdata->inscriptions     = $busInscription->searchInscription($data);
        $rdata->build            = $data->build;
        $rdata->room             = $data->room;
        $rdata->selectiveProcess = $busInscription->searchInscription($data);
        $busSelectiveProcess     = $MIOLO->getBusiness($module, 'BusSelectiveProcess');
        $rdata->beginDate        = $busSelectiveProcess->searchSelectiveProcess($data);
        $busCompany              = $MIOLO->getBusiness(basic, 'BusCompany');
        $company                 = $busCompany->getCompany(DEFAULT_COMPANY_CONF);
        $rdata->file             = $company->personId;

        $getSelecitveProcess     = $busSelectiveProcess->getSelectiveProcess($data->selectiveProcessId);
        $rdata->isLanguage       = $getSelecitveProcess->isLanguage;

        return $rdata;
    }

    private function generateContent($rdata)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->pdf->setFont(DEFAULT_REPORT_FONT, 'B', 26);

        $this->pdf->Image(SAGUFile::getPhotoPath($rdata->file), 10, 8, 33, NULL, PHOTO_FORMAT);

        $this->pdf->cell(7, 5,'','',0,'C');
        $this->pdf->cell(190, 8, _M('Room @1 - building @2', $module, $rdata->room, $rdata->build), 8, '','C');
        $this->pdf->setFont(DEFAULT_REPORT_FONT, 'B', 13);
        $this->pdf->ln();
        $this->pdf->cell(205, 8,_M('Selective process @1 - @2', $module, $rdata->selectiveProcess[0][1], $rdata->beginDate[0][6]),8, 'R','C');

        $this->pdf->ln();
        $this->pdf->setFont(DEFAULT_REPORT_FONT, 'B', 14);
        $this->pdf->cell(205, 10, _M('Unit @1', $module, $rdata->inscriptions[0][5]), 0, 0, 'C');
        $this->pdf->ln();

        $this->pdf->ln();

        if ( $rdata->isLanguage == DB_TRUE )
        {
            $this->pdf->setFont(DEFAULT_REPORT_FONT, 'B', 12);
            $this->pdf->cell(25, 10, _M('Inscription', $module), 1, 0, 'C');
            $this->pdf->cell(20, 10, _M('Id', $module), 1, 0, 'C');
            $this->pdf->cell(100, 10,_M('Name', $module), 1, 0, 'C');
            $this->pdf->cell(45, 10, _M('Language', $module), 1, 0, 'C');
        }
        else
        {
            $this->pdf->setFont(DEFAULT_REPORT_FONT, 'B', 12);
            $this->pdf->cell(40, 10, _M('Inscription', $module), 1, 0, 'C');
            $this->pdf->cell(35, 10, _M('Id', $module), 1, 0, 'C');
            $this->pdf->cell(115, 10,_M('Name', $module), 1, 0, 'C');
        }
        $this->pdf->ln();

        $this->pdf->setFont(DEFAULT_REPORT_FONT, '', 12);
        $this->pdf->setFillColor(242);

        $x = 1;
        if ( is_array($rdata->inscriptions) && (count($rdata->inscriptions) > 0) )
        {
            foreach ($rdata->inscriptions as $inscription)
            {
                if ($x == 1)
                {
                    $x = 0;
                }
                else
                {
                    $x = 1;
                }
    
                if ( $rdata->isLanguage == DB_TRUE )
                {
                    $this->pdf->cell(25, 10, $inscription[0], 1, 0, 'C', $x);
                    $this->pdf->cell(20, 10, $inscription[2], 1, 0, 'C', $x);
                    $this->pdf->cell(100, 10, ' ' . $inscription[3], 1, 0, 'L', $x);
                    $this->pdf->cell(45, 10, $inscription[7], 1, 0, 'C', $x);
                }
                else
                {
                    $this->pdf->cell(40, 10, $inscription[0], 1, 0, 'C', $x);
                    $this->pdf->cell(35, 10, $inscription[2], 1, 0, 'C', $x);
                    $this->pdf->cell(115, 10, ' ' . $inscription[3], 1, 0, 'L', $x);
                }
                $this->pdf->ln();
            }
        }
    }
}

?>
