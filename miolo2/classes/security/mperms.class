<?
class MPerms extends MService
{
    private $auth;
    public  $perms;

    function __construct()
    {
        parent::__construct();
        $this->auth = $this->manager->GetAuth();
        $this->perms = array
            (
            A_ACCESS  => "SELECT",
            A_INSERT  => "INSERT",
            A_DELETE  => "DELETE",
            A_UPDATE  => "UPDATE",
            A_EXECUTE => "EXECUTE",
            A_ADMIN   => "SYSTEM",
            ACC_ACCESS => 'ACC_ACCESS',
            ACC_ACCOUNTING_LIMIT => 'ACC_ACCOUNTING_LIMIT',
            ACC_ADMIN => 'ACC_ADMIN',
            ACC_DELETE => 'ACC_DELETE',
            ACC_INSERT => 'ACC_INSERT',
            ACC_UPDATE => 'ACC_UPDATE',
            ACD_ACCESS => 'ACD_ACCESS',
            ACD_ADMIN  => 'ACD_ADMIN',
            ACD_DELETE => 'ACD_DELETE',
            ACD_ENROLL => 'ACD_ENROLL',
            ACD_INSERT => 'ACD_INSERT',
            ACD_UPDATE => 'ACD_UPDATE',
            ACD_NEW_CONTRACT => 'ACD_NEW_CONTRACT',
            ACD_ENROLL_UPDATE => 'ACD_ENROLL_UPDATE',
            ACD_PROCESS_CONTRACT => 'ACD_PROCESS_CONTRACT',
            ACD_PROFESSOR_CURRICULAR_COMPONENT => 'ACD_PROFESSOR_CURRICULAR_COMPONENT',
            ACD_GROUP  => 'ACD_GROUP',
            ACD_ACADEMIC_CALENDAR => 'ACD_ACADEMIC_CALENDAR',
            ACD_ACADEMIC_CALENDAR_ADJUSTMENT => 'ACD_ACADEMIC_CALENDAR_ADJUSTMENT',
            ACD_REPORT => 'ACD_REPORT',
            ACD_DOCUMENT => 'ACD_DOCUMENT', 
            ACD_SCHEDULE_LEARNING_PERIOD => 'ACD_SCHEDULE_LEARNING_PERIOD', 
            ACD_REGISTER => 'ACD_REGISTER', 
            ACD_PROCESS => 'ACD_PROCESS', 
            ACD_CLASS => 'ACD_CLASS',
            BAS_ACCESS => 'BAS_ACCESS',
            BAS_ADMIN  => 'BAS_ADMIN',
            BAS_DELETE => 'BAS_DELETE',
            BAS_INSERT => 'BAS_INSERT',
            BAS_UPDATE => 'BAS_UPDATE',
            BAS_NEW_PHYSICAL_PERSON => 'BAS_NEW_PHYSICAL_PERSON',
            BAS_NEW_DOCUMENT => 'BAS_NEW_DOCUMENT',
            BAS_NEW_PHONE => 'BAS_NEW_PHONE',
            BAS_NEW_PROFESSOR => 'BAS_NEW_PROFESSOR',
            BAS_NEW_EMPLOYEE => 'BAS_NEW_EMPLOYEE',
            CCP_ACCESS => 'CCP_ACCESS',
            CCP_ADMIN  => 'CCP_ADMIN',
            CCP_DELETE => 'CCP_DELETE',
            CCP_INSERT => 'CCP_INSERT',
            CCP_UPDATE => 'CCP_UPDATE',
            FIN_ACCESS => 'FIN_ACCESS',
            FIN_ADMIN  => 'FIN_ADMIN',
            FIN_DELETE => 'FIN_DELETE',
            FIN_INCOME_FORECAST_GENERATION => 'FIN_INCOME_FORECAST_GENERATION',
            FIN_INSERT => 'FIN_INSERT',
            FIN_UPDATE => 'FIN_UPDATE',
            FIN_INCOME_FORECAST_GENERATION => 'FIN_INCOME_FORECAST_GENERATION',
            FIN_INDIVIDUAL_INVOICE_GENERATION => 'FIN_INDIVIDUAL_INVOICE_GENERATION',
            FIN_INSERT => 'FIN_INSERT',
            FIN_UPDATE => 'FIN_UPDATE',
            FIN_CLOSE_INVOICE => 'FIN_CLOSE_INVOICE',
            FIN_COUNTER_MOVEMENT => 'FIN_COUNTER_MOVEMENT',
            FIN_CLOSE_COUNTER => 'FIN_CLOSE_COUNTER',
            FIN_AGREEMENT => 'FIN_AGREEMENT',
            HRS_ACCESS => 'HRS_ACCESS',
            HRS_ADMIN  => 'HRS_ADMIN',
            HRS_DELETE => 'HRS_DELETE',
            HRS_INSERT => 'HRS_INSERT',
            HRS_UPDATE => 'HRS_UPDATE',
            INS_ACCESS => 'INS_ACCESS',
            INS_ADMIN  => 'INS_ADMIN',
            INS_DELETE => 'INS_DELETE',
            INS_INSERT => 'INS_INSERT',
            INS_UPDATE => 'INS_UPDATE',
            RSH_ACCESS => 'RSH_ACCESS',
            RSH_ADMIN  => 'RSH_ADMIN',
            RSH_DELETE => 'RSH_DELETE',
            RSH_INSERT => 'RSH_INSERT',
            RSH_UPDATE => 'RSH_UPDATE',
            SPR_ACCESS => 'SPR_ACCESS',
            SPR_ADMIN  => 'SPR_ADMIN',
            SPR_DELETE => 'SPR_DELETE',
            SPR_INSERT => 'SPR_INSERT',
            SPR_UPDATE => 'SPR_UPDATE',
            SPR_INSCRIPTION => 'SPR_INSCRIPTION',
            SERVICES_ACCESS => 'SERVICES_ACCESS',
            SERVICES_ADMIN  => 'SERVICES_ADMIN',
            TRD_ACCESS => 'TRD_ACCESS',
            TRD_ADMIN => 'TRD_ADMIN',
            TRD_DELETE => 'TRD_DELETE',
            TRD_INSERT => 'TRD_INSERT',
            TRD_UPDATE => 'TRD_UPDATE',
            PAY_ACCESS => 'PAY_ACCESS',
            PAY_ADMIN => 'PAY_ADMIN',
            PAY_DELETE => 'PAY_DELETE',
            PAY_INSERT => 'PAY_INSERT',
            PAY_UPDATE => 'PAY_UPDATE'
            );
    }

    function CheckAccess($transaction, $access, $deny = false)
    {
        if ($this->auth->IsLogged())
        {
            $login       = $this->auth->GetLogin();  // MLogin object
            $transaction = strtoupper($transaction); // Transaction name
            $isAdmin     = $login->IsAdmin(); // Is administrator?
            $rights      = (int)$login->rights[$transaction]; // user rights
            $rightsInAll = (int)$login->rights['ALL']; // user rights in all transactions
            $ok = (($rights & $access) == $access) || (($rightsInAll & $access) == $access) || ($isAdmin);
        }

        if (!$ok && $deny)
        {
            $msg = _M('Access Denied') . "<br><br>\n" . 
                   '<center><big><i><font color=red>' . _M('Transaction: ') . "$transaction</font></i></big></center><br><br>\n" .
                   _M('Please inform a valid login/password to access this content.') . "<br>";

            $users = $this->GetGroupsAllowed($transaction, $access);
            if ($users)
            {
                $msg .= "<br><br>\n" . _M('Groups with access rights') . ":<ul><li>" . implode('<li>', $users) . '</ul>';
            }
            $go = $this->manager->history->Back('action'); 
            $error = Prompt::Error($msg, $go, $caption, '');
            $error->AddButton(_M('   Login   '), $this->manager->getActionURL($this->manager->getConf('login.module'),'login',null,array('return_to'=>urlencode($this->manager->history->Top()))), '');
            $this->manager->Prompt($error,$deny);
            //$this->manager->Error($msg, $go);
        }
        return $ok;
    }

    function GetTransactionRights($transaction, $login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetTransactionRights($transaction);
    }

    function GetRights($login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetRights($transaction);
    }

    function GetGroups($login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetArrayGroups();
    }

    function isMemberOf($login, $group)
    {
        $groups = $this->auth->GetLogin()->groups;
        $ok = $groups[strtoupper($group)] || $groups['ADMIN'];
        return $ok;
    }

    function isAdmin()
    {
        return $this->auth->GetLogin()->IsAdmin();
    }

    function GetUsersAllowed($trans, $action = A_ACCESS)
    {
        $transaction = $this->manager->GetBusinessMAD('transaction');
        $transaction->GetByName($trans);
        return $transaction->GetUsersAllowed($action);
    }

    function GetGroupsAllowed($trans, $action = A_ACCESS)
    {
        $transaction = $this->manager->GetBusinessMAD('transaction');
        $transaction->GetByName($trans);
        return $transaction->GetGroupsAllowed($action);
    }
}
?>
