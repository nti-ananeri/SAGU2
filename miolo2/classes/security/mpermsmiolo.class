<?php

class MPermsMiolo extends MPerms
{
    private $auth;
    public  $perms;

    public function __construct()
    {
        parent::__construct();

        $this->auth  = $this->manager->GetAuth();
        
        $this->perms = array
            (
            A_ACCESS  => "SELECT",
            A_INSERT  => "INSERT",
            A_DELETE  => "DELETE",
            A_UPDATE  => "UPDATE",
            A_EXECUTE => "EXECUTE",
            A_ADMIN   => "SYSTEM",
            ACC_ACCESS => 'ACC_ACCESS',
            ACC_ACCOUNTING_LIMIT => 'ACC_ACCOUNTING_LIMIT',
            ACC_ADMIN => 'ACC_ADMIN',
            ACC_DELETE => 'ACC_DELETE',
            ACC_INSERT => 'ACC_INSERT',
            ACC_UPDATE => 'ACC_UPDATE',
            ACD_ACCESS => 'ACD_ACCESS',
            ACD_ADMIN  => 'ACD_ADMIN',
            ACD_DELETE => 'ACD_DELETE',
            ACD_ENROLL => 'ACD_ENROLL',
            ACD_INSERT => 'ACD_INSERT',
            ACD_UPDATE => 'ACD_UPDATE',
            ACD_NEW_CONTRACT => 'ACD_NEW_CONTRACT',
            ACD_ENROLL_UPDATE => 'ACD_ENROLL_UPDATE',
            ACD_PROCESS_CONTRACT => 'ACD_PROCESS_CONTRACT',
            ACD_PROFESSOR_CURRICULAR_COMPONENT => 'ACD_PROFESSOR_CURRICULAR_COMPONENT',
            ACD_GROUP  => 'ACD_GROUP',
            ACD_ACADEMIC_CALENDAR => 'ACD_ACADEMIC_CALENDAR',
            ACD_ACADEMIC_CALENDAR_ADJUSTMENT => 'ACD_ACADEMIC_CALENDAR_ADJUSTMENT',
            ACD_REPORT => 'ACD_REPORT',
            ACD_DOCUMENT => 'ACD_DOCUMENT', 
            ACD_SCHEDULE_LEARNING_PERIOD => 'ACD_SCHEDULE_LEARNING_PERIOD', 
            ACD_REGISTER => 'ACD_REGISTER', 
            ACD_PROCESS => 'ACD_PROCESS', 
            ACD_CLASS => 'ACD_CLASS',
            BAS_ACCESS => 'BAS_ACCESS',
            BAS_ADMIN  => 'BAS_ADMIN',
            BAS_DELETE => 'BAS_DELETE',
            BAS_INSERT => 'BAS_INSERT',
            BAS_UPDATE => 'BAS_UPDATE',
            BAS_NEW_PHYSICAL_PERSON => 'BAS_NEW_PHYSICAL_PERSON',
            BAS_NEW_DOCUMENT => 'BAS_NEW_DOCUMENT',
            BAS_NEW_PHONE => 'BAS_NEW_PHONE',
            BAS_NEW_PROFESSOR => 'BAS_NEW_PROFESSOR',
            BAS_NEW_EMPLOYEE => 'BAS_NEW_EMPLOYEE',
            CCP_ACCESS => 'CCP_ACCESS',
            CCP_ADMIN  => 'CCP_ADMIN',
            CCP_DELETE => 'CCP_DELETE',
            CCP_INSERT => 'CCP_INSERT',
            CCP_UPDATE => 'CCP_UPDATE',
            FIN_ACCESS => 'FIN_ACCESS',
            FIN_ADMIN  => 'FIN_ADMIN',
            FIN_DELETE => 'FIN_DELETE',
            FIN_INCOME_FORECAST_GENERATION => 'FIN_INCOME_FORECAST_GENERATION',
            FIN_INDIVIDUAL_INVOICE_GENERATION => 'FIN_INDIVIDUAL_INVOICE_GENERATION',
            FIN_INSERT => 'FIN_INSERT',
            FIN_UPDATE => 'FIN_UPDATE',
            FIN_CLOSE_INVOICE => 'FIN_CLOSE_INVOICE',
            FIN_COUNTER_MOVEMENT => 'FIN_COUNTER_MOVEMENT',
            FIN_CLOSE_COUNTER => 'FIN_CLOSE_COUNTER',
            FIN_AGREEMENT => 'FIN_AGREEMENT',
            HRS_ACCESS => 'HRS_ACCESS',
            HRS_ADMIN  => 'HRS_ADMIN',
            HRS_DELETE => 'HRS_DELETE',
            HRS_INSERT => 'HRS_INSERT',
            HRS_UPDATE => 'HRS_UPDATE',
            INS_ACCESS => 'INS_ACCESS',
            INS_ADMIN  => 'INS_ADMIN',
            INS_DELETE => 'INS_DELETE',
            INS_INSERT => 'INS_INSERT',
            INS_UPDATE => 'INS_UPDATE',
            RSH_ACCESS => 'RSH_ACCESS',
            RSH_ADMIN  => 'RSH_ADMIN',
            RSH_DELETE => 'RSH_DELETE',
            RSH_INSERT => 'RSH_INSERT',
            RSH_UPDATE => 'RSH_UPDATE',
            SPR_ACCESS => 'SPR_ACCESS',
            SPR_ADMIN  => 'SPR_ADMIN',
            SPR_DELETE => 'SPR_DELETE',
            SPR_INSERT => 'SPR_INSERT',
            SPR_UPDATE => 'SPR_UPDATE',
            SPR_INSCRIPTION => 'SPR_INSCRIPTION',
            SERVICES_ACCESS => 'SERVICES_ACCESS',
            SERVICES_ADMIN  => 'SERVICES_ADMIN',
            TRD_ACCESS => 'TRD_ACCESS',
            TRD_ADMIN  => 'TRD_ADMIN',
            TRD_DELETE => 'TRD_DELETE',
            TRD_INSERT => 'TRD_INSERT',
            TRD_UPDATE => 'TRD_UPDATE',
            PAY_ACCESS => 'PAY_ACCESS',
            PAY_ADMIN => 'PAY_ADMIN',
            PAY_DELETE => 'PAY_DELETE',
            PAY_INSERT => 'PAY_INSERT',
            PAY_UPDATE => 'PAY_UPDATE'
            );
        asort($this->perms);
    }

    public function checkAccess($module, $action, $deny = false, $group = false)
    {
        if ( $this->auth->isLogged() )
        {
            $login   = $this->auth->getLogin();  // MLogin object
            $isAdmin = $login->isAdmin(); // Is administrator?
            $rights  = $login->rights[$module]; // user rights

            if( ! $rights )
            {
                $login->setRights( $this->getRights($login->id, $action) );
            }

            $ok = @in_array($action, $this->getRights($login->id, $action) );

            if( ! $ok && $group )
            {
                $groups = $this->getGroupsAllowed($module, $action);
                $ok     = sizeof( array_intersect($groups, $login->groups) ) > 0;
            }
        }

        if ( ! $ok && $deny )
        {
            $msg = _M('Access Denied') . "<br><br>\n" .
                      '<center><big><i><font color=red>' . _M('Transaction: ') . "$module ($action)</font></i></big></center><br><br>\n" .
                   _M('Please inform a valid login/password to access this content.') . "<br>";

            $users  = $this->getUsersAllowed($module, $action);
            $groups = $this->getGroupsAllowed($module, $action);

            if ($users)
            {
                $msg .= "<br/>\n" . _M('Users with access rights') . ":<ul><li>" . implode('<li>', $users) . '</ul>';
            }
            if ($groups)
            {
                $msg .= "<br/>\n" . _M('Groups with access rights') . ":<ul><li>" . implode('<li>', $groups) . '</ul>';
            }

            $go    = $this->manager->history->Back('action');
            $error = Prompt::Error($msg, $go, $caption, '');
            $error->addButton( _M('   Login   '), $this->manager->getActionURL($this->manager->getConf('login.module'),'login',null,array('return_to'=>urlencode($this->manager->history->Top()))), '');

            $this->manager->Prompt($error,$deny);
        }

        return $ok;
    }

    public function getTransactionRights($transaction, $login)
    {
        $user = $this->manager->getBusinessMAD('user');
        $user->getByLogin($login);

        return $user->getTransactionRights($transaction);
    }

    public function getRights($login)
    {
        $this->manager->loadMADConf();
        $db = $this->manager->getDatabase('admin');

        $sql = "select a.rights from miolo_user u, miolo_groupuser g, miolo_access a where u.iduser = g.iduser and g.idgroup = a.idgroup and u.login = '$login'";

        $result = $db->query($sql);

        $rights = array();

        if ( strlen((string)$result) > 0 )
        {
            foreach($result as $r)
            {
                $rights[] = $r[0];
            }
        }

        return $rights;
    }

    public function getGroups($login)
    {
        $user = $this->manager->getBusinessMAD('user');
        $user->getByLogin($login);

        return $user->getArrayGroups();
    }

    public function getUsersAllowed($module, $action = A_ACCESS)
    {
        $this->manager->loadMADConf();

        $db  = $this->manager->getDatabase('admin');
        $sql = "select distinct u.login from miolo_user u, miolo_groupuser g, miolo_access a, miolo_transaction t where u.iduser = g.iduser and g.idgroup = a.idgroup and a.idtransaction = t.idtransaction and lower(t.m_transaction) = '" . strtolower($module) ."' and a.rights='$action'";

        $result = $db->query($sql);
        $users  = array();

        if ( $result )
        {
            foreach($result as $user)
            {
                $users[] = $user[0];
            }
        }

        return $users;
    }

    public function getGroupsAllowed($module, $action = A_ACCESS)
    {
        $this->manager->loadMADConf();

        $db  = $this->manager->getDatabase('admin');
        $sql = "select g.m_group from miolo_group g, miolo_access a, miolo_transaction t where g.idgroup = a.idgroup and a.idtransaction = t.idtransaction and lower(t.m_transaction) = '" . strtolower($module) ."' and a.rights='$action'";

        $result = $db->query($sql);
        $groups = array();

        if ( $result )
        {
            foreach($result as $group)
            {
                $groups[] = $group[0];
            }
        }

        return $groups;
    }
}
?>
